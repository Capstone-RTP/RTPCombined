
RTPCombined.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce28  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800cfe4  0800cfe4  0001cfe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d054  0800d054  000202cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800d054  0800d054  0001d054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d05c  0800d05c  000202cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d05c  0800d05c  0001d05c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d060  0800d060  0001d060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002cc  20000000  0800d064  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f4  200002d0  0800d330  000202d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200007c4  0800d330  000207c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022291  00000000  00000000  000202fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000352d  00000000  00000000  0004258d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001918  00000000  00000000  00045ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017d0  00000000  00000000  000473d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004f83  00000000  00000000  00048ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e07d  00000000  00000000  0004db2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a6d5  00000000  00000000  0006bba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018627d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006be8  00000000  00000000  001862d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	200002d0 	.word	0x200002d0
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800cfcc 	.word	0x0800cfcc

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	200002d4 	.word	0x200002d4
 80001f8:	0800cfcc 	.word	0x0800cfcc

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000504:	b08a      	sub	sp, #40	; 0x28
 8000506:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000508:	f001 fab7 	bl	8001a7a <HAL_Init>

  /* USER CODE BEGIN Init */

	InitSerialFromPC(&hlpuart1,rxBuffer);
 800050c:	49b5      	ldr	r1, [pc, #724]	; (80007e4 <main+0x2e4>)
 800050e:	48b6      	ldr	r0, [pc, #728]	; (80007e8 <main+0x2e8>)
 8000510:	f000 fe92 	bl	8001238 <InitSerialFromPC>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 fa0a 	bl	800092c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f000 fc9c 	bl	8000e54 <MX_GPIO_Init>
  MX_TIM2_Init();
 800051c:	f000 fae4 	bl	8000ae8 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000520:	f000 fbd2 	bl	8000cc8 <MX_TIM4_Init>
  MX_LPUART1_UART_Init();
 8000524:	f000 fa94 	bl	8000a50 <MX_LPUART1_UART_Init>
  MX_I2C2_Init();
 8000528:	f000 fa52 	bl	80009d0 <MX_I2C2_Init>
  MX_TIM3_Init();
 800052c:	f000 fb54 	bl	8000bd8 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000530:	f000 fc42 	bl	8000db8 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

	//Enable Timer Interrupts
	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE);
 8000534:	4bad      	ldr	r3, [pc, #692]	; (80007ec <main+0x2ec>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	68d9      	ldr	r1, [r3, #12]
 800053a:	4bac      	ldr	r3, [pc, #688]	; (80007ec <main+0x2ec>)
 800053c:	681a      	ldr	r2, [r3, #0]
 800053e:	f041 0301 	orr.w	r3, r1, #1
 8000542:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 8000544:	4baa      	ldr	r3, [pc, #680]	; (80007f0 <main+0x2f0>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	68d9      	ldr	r1, [r3, #12]
 800054a:	4ba9      	ldr	r3, [pc, #676]	; (80007f0 <main+0x2f0>)
 800054c:	681a      	ldr	r2, [r3, #0]
 800054e:	f041 0301 	orr.w	r3, r1, #1
 8000552:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_UPDATE);
 8000554:	4ba7      	ldr	r3, [pc, #668]	; (80007f4 <main+0x2f4>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	68d9      	ldr	r1, [r3, #12]
 800055a:	4ba6      	ldr	r3, [pc, #664]	; (80007f4 <main+0x2f4>)
 800055c:	681a      	ldr	r2, [r3, #0]
 800055e:	f041 0301 	orr.w	r3, r1, #1
 8000562:	60d3      	str	r3, [r2, #12]
	//Initialize stepper structures
	initStepper(&thetaMotor, &htim3, TIM_CHANNEL_1, thetaDir_GPIO_Port, thetaDir_Pin, 400);
 8000564:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000568:	9301      	str	r3, [sp, #4]
 800056a:	2320      	movs	r3, #32
 800056c:	9300      	str	r3, [sp, #0]
 800056e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000572:	2200      	movs	r2, #0
 8000574:	499d      	ldr	r1, [pc, #628]	; (80007ec <main+0x2ec>)
 8000576:	48a0      	ldr	r0, [pc, #640]	; (80007f8 <main+0x2f8>)
 8000578:	f000 febb 	bl	80012f2 <initStepper>
	initStepper(&yMotor,&htim2,TIM_CHANNEL_1,yDir_GPIO_Port,yDir_Pin, 400);
 800057c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000580:	9301      	str	r3, [sp, #4]
 8000582:	2340      	movs	r3, #64	; 0x40
 8000584:	9300      	str	r3, [sp, #0]
 8000586:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800058a:	2200      	movs	r2, #0
 800058c:	4998      	ldr	r1, [pc, #608]	; (80007f0 <main+0x2f0>)
 800058e:	489b      	ldr	r0, [pc, #620]	; (80007fc <main+0x2fc>)
 8000590:	f000 feaf 	bl	80012f2 <initStepper>
	initStepper(&rMotor, &htim4, TIM_CHANNEL_3, rDir_GPIO_Port, rDir_Pin, 400);
 8000594:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000598:	9301      	str	r3, [sp, #4]
 800059a:	2380      	movs	r3, #128	; 0x80
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005a2:	2208      	movs	r2, #8
 80005a4:	4993      	ldr	r1, [pc, #588]	; (80007f4 <main+0x2f4>)
 80005a6:	4896      	ldr	r0, [pc, #600]	; (8000800 <main+0x300>)
 80005a8:	f000 fea3 	bl	80012f2 <initStepper>
	yMotor.PPS_ZeroDefault = 200;
 80005ac:	4b93      	ldr	r3, [pc, #588]	; (80007fc <main+0x2fc>)
 80005ae:	22c8      	movs	r2, #200	; 0xc8
 80005b0:	615a      	str	r2, [r3, #20]
	thetaMotor.PPS_ZeroDefault = 200;
 80005b2:	4b91      	ldr	r3, [pc, #580]	; (80007f8 <main+0x2f8>)
 80005b4:	22c8      	movs	r2, #200	; 0xc8
 80005b6:	615a      	str	r2, [r3, #20]
	rMotor.PPS_ZeroDefault = 200;
 80005b8:	4b91      	ldr	r3, [pc, #580]	; (8000800 <main+0x300>)
 80005ba:	22c8      	movs	r2, #200	; 0xc8
 80005bc:	615a      	str	r2, [r3, #20]

	Dev->I2cHandle = &hi2c2;
 80005be:	4b91      	ldr	r3, [pc, #580]	; (8000804 <main+0x304>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a91      	ldr	r2, [pc, #580]	; (8000808 <main+0x308>)
 80005c4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	Dev->I2cDevAddr = 0x52;
 80005c8:	4b8e      	ldr	r3, [pc, #568]	; (8000804 <main+0x304>)
 80005ca:	681a      	ldr	r2, [r3, #0]
 80005cc:	2352      	movs	r3, #82	; 0x52
 80005ce:	f882 3160 	strb.w	r3, [r2, #352]	; 0x160

	// VL53L0X init for Single Measurement
	//

	VL53L0X_WaitDeviceBooted( Dev );
 80005d2:	4b8c      	ldr	r3, [pc, #560]	; (8000804 <main+0x304>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4618      	mov	r0, r3
 80005d8:	f007 ffb2 	bl	8008540 <VL53L0X_WaitDeviceBooted>
	VL53L0X_DataInit( Dev );
 80005dc:	4b89      	ldr	r3, [pc, #548]	; (8000804 <main+0x304>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4618      	mov	r0, r3
 80005e2:	f007 fcc7 	bl	8007f74 <VL53L0X_DataInit>
	VL53L0X_StaticInit( Dev );
 80005e6:	4b87      	ldr	r3, [pc, #540]	; (8000804 <main+0x304>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4618      	mov	r0, r3
 80005ec:	f007 fe26 	bl	800823c <VL53L0X_StaticInit>
	VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 80005f0:	4b84      	ldr	r3, [pc, #528]	; (8000804 <main+0x304>)
 80005f2:	6818      	ldr	r0, [r3, #0]
 80005f4:	f107 0219 	add.w	r2, r7, #25
 80005f8:	f107 031a 	add.w	r3, r7, #26
 80005fc:	4619      	mov	r1, r3
 80005fe:	f008 fcbf 	bl	8008f80 <VL53L0X_PerformRefCalibration>
	VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 8000602:	4b80      	ldr	r3, [pc, #512]	; (8000804 <main+0x304>)
 8000604:	6818      	ldr	r0, [r3, #0]
 8000606:	f107 021b 	add.w	r2, r7, #27
 800060a:	f107 031c 	add.w	r3, r7, #28
 800060e:	4619      	mov	r1, r3
 8000610:	f009 f944 	bl	800989c <VL53L0X_PerformRefSpadManagement>
	VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8000614:	4b7b      	ldr	r3, [pc, #492]	; (8000804 <main+0x304>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f008 f82e 	bl	800867c <VL53L0X_SetDeviceMode>

	// Enable/Disable Sigma and Signal check
	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 8000620:	4b78      	ldr	r3, [pc, #480]	; (8000804 <main+0x304>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2201      	movs	r2, #1
 8000626:	2100      	movs	r1, #0
 8000628:	4618      	mov	r0, r3
 800062a:	f008 faa3 	bl	8008b74 <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 800062e:	4b75      	ldr	r3, [pc, #468]	; (8000804 <main+0x304>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	2201      	movs	r2, #1
 8000634:	2101      	movs	r1, #1
 8000636:	4618      	mov	r0, r3
 8000638:	f008 fa9c 	bl	8008b74 <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 800063c:	4b71      	ldr	r3, [pc, #452]	; (8000804 <main+0x304>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f641 1299 	movw	r2, #6553	; 0x1999
 8000644:	2101      	movs	r1, #1
 8000646:	4618      	mov	r0, r3
 8000648:	f008 fb44 	bl	8008cd4 <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 800064c:	4b6d      	ldr	r3, [pc, #436]	; (8000804 <main+0x304>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f008 fb3c 	bl	8008cd4 <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 33000);
 800065c:	4b69      	ldr	r3, [pc, #420]	; (8000804 <main+0x304>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f248 01e8 	movw	r1, #33000	; 0x80e8
 8000664:	4618      	mov	r0, r3
 8000666:	f008 f867 	bl	8008738 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 800066a:	4b66      	ldr	r3, [pc, #408]	; (8000804 <main+0x304>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	2212      	movs	r2, #18
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f008 f886 	bl	8008784 <VL53L0X_SetVcselPulsePeriod>
	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8000678:	4b62      	ldr	r3, [pc, #392]	; (8000804 <main+0x304>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	220e      	movs	r2, #14
 800067e:	2101      	movs	r1, #1
 8000680:	4618      	mov	r0, r3
 8000682:	f008 f87f 	bl	8008784 <VL53L0X_SetVcselPulsePeriod>

	//Enable UART Enable IT
	HAL_UART_Receive_IT(&hlpuart1, rxBuffer, 6); //receive 6 bytes
 8000686:	2206      	movs	r2, #6
 8000688:	4956      	ldr	r1, [pc, #344]	; (80007e4 <main+0x2e4>)
 800068a:	4857      	ldr	r0, [pc, #348]	; (80007e8 <main+0x2e8>)
 800068c:	f005 fcce 	bl	800602c <HAL_UART_Receive_IT>

	//Start timer for uSDelay for HX711
	HAL_TIM_Base_Start(&htim5);
 8000690:	485e      	ldr	r0, [pc, #376]	; (800080c <main+0x30c>)
 8000692:	f004 f95d 	bl	8004950 <HAL_TIM_Base_Start>

	HAL_Delay(1000);
 8000696:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800069a:	f001 fa63 	bl	8001b64 <HAL_Delay>
	//	pressureZero = hx711_value_ave(&loadCell, 5);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	timer = HAL_GetTick();
 800069e:	f001 fa55 	bl	8001b4c <HAL_GetTick>
 80006a2:	4603      	mov	r3, r0
 80006a4:	4a5a      	ldr	r2, [pc, #360]	; (8000810 <main+0x310>)
 80006a6:	6013      	str	r3, [r2, #0]
		//		}
		//check if data has been received



		if(scanState == posReceive && yMotor.Status == Stopped && thetaMotor.Status == Stopped){
 80006a8:	4b5a      	ldr	r3, [pc, #360]	; (8000814 <main+0x314>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d12a      	bne.n	8000706 <main+0x206>
 80006b0:	4b52      	ldr	r3, [pc, #328]	; (80007fc <main+0x2fc>)
 80006b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	2b03      	cmp	r3, #3
 80006ba:	d124      	bne.n	8000706 <main+0x206>
 80006bc:	4b4e      	ldr	r3, [pc, #312]	; (80007f8 <main+0x2f8>)
 80006be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	2b03      	cmp	r3, #3
 80006c6:	d11e      	bne.n	8000706 <main+0x206>
					HAL_GPIO_WritePin(state1LED_GPIO_Port, state1LED_Pin, SET);
 80006c8:	2201      	movs	r2, #1
 80006ca:	2180      	movs	r1, #128	; 0x80
 80006cc:	4852      	ldr	r0, [pc, #328]	; (8000818 <main+0x318>)
 80006ce:	f001 fdcb 	bl	8002268 <HAL_GPIO_WritePin>
					if(uartRecievedFlag){
 80006d2:	4b52      	ldr	r3, [pc, #328]	; (800081c <main+0x31c>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	f000 8117 	beq.w	800090a <main+0x40a>
						//retrieve instructions
						ParseInstructions(rxBuffer, &nextInstr);
 80006dc:	4950      	ldr	r1, [pc, #320]	; (8000820 <main+0x320>)
 80006de:	4841      	ldr	r0, [pc, #260]	; (80007e4 <main+0x2e4>)
 80006e0:	f000 fdd2 	bl	8001288 <ParseInstructions>
						//enable receive interrupt
						uartRecievedFlag = 0;
 80006e4:	4a4d      	ldr	r2, [pc, #308]	; (800081c <main+0x31c>)
 80006e6:	2300      	movs	r3, #0
 80006e8:	7013      	strb	r3, [r2, #0]
						HAL_UART_Receive_IT(&hlpuart1, rxBuffer, 6);
 80006ea:	2206      	movs	r2, #6
 80006ec:	493d      	ldr	r1, [pc, #244]	; (80007e4 <main+0x2e4>)
 80006ee:	483e      	ldr	r0, [pc, #248]	; (80007e8 <main+0x2e8>)
 80006f0:	f005 fc9c 	bl	800602c <HAL_UART_Receive_IT>
						HAL_GPIO_WritePin(state1LED_GPIO_Port, state1LED_Pin, RESET);
 80006f4:	2200      	movs	r2, #0
 80006f6:	2180      	movs	r1, #128	; 0x80
 80006f8:	4847      	ldr	r0, [pc, #284]	; (8000818 <main+0x318>)
 80006fa:	f001 fdb5 	bl	8002268 <HAL_GPIO_WritePin>
						scanState = goToPos;
 80006fe:	4a45      	ldr	r2, [pc, #276]	; (8000814 <main+0x314>)
 8000700:	2301      	movs	r3, #1
 8000702:	7013      	strb	r3, [r2, #0]
					if(uartRecievedFlag){
 8000704:	e101      	b.n	800090a <main+0x40a>
					}
				}
				else if(scanState == goToPos && yMotor.Status == Stopped && thetaMotor.Status == Stopped){
 8000706:	4b43      	ldr	r3, [pc, #268]	; (8000814 <main+0x314>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	2b01      	cmp	r3, #1
 800070c:	f040 80a3 	bne.w	8000856 <main+0x356>
 8000710:	4b3a      	ldr	r3, [pc, #232]	; (80007fc <main+0x2fc>)
 8000712:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000716:	b2db      	uxtb	r3, r3
 8000718:	2b03      	cmp	r3, #3
 800071a:	f040 809c 	bne.w	8000856 <main+0x356>
 800071e:	4b36      	ldr	r3, [pc, #216]	; (80007f8 <main+0x2f8>)
 8000720:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000724:	b2db      	uxtb	r3, r3
 8000726:	2b03      	cmp	r3, #3
 8000728:	f040 8095 	bne.w	8000856 <main+0x356>
					//HAL_GPIO_WritePin(state2LED_GPIO_Port, state2LED_Pin, SET);
					//Increment theta based on direction
					if(nextInstr.th>=thetaMotor.TargetPosition){
 800072c:	4b3c      	ldr	r3, [pc, #240]	; (8000820 <main+0x320>)
 800072e:	885b      	ldrh	r3, [r3, #2]
 8000730:	b29b      	uxth	r3, r3
 8000732:	2200      	movs	r2, #0
 8000734:	461c      	mov	r4, r3
 8000736:	4615      	mov	r5, r2
 8000738:	4b2f      	ldr	r3, [pc, #188]	; (80007f8 <main+0x2f8>)
 800073a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800073e:	4294      	cmp	r4, r2
 8000740:	eb75 0303 	sbcs.w	r3, r5, r3
 8000744:	d315      	bcc.n	8000772 <main+0x272>
						setTarget(&thetaMotor, (uint64_t)abs(nextInstr.th - thetaMotor.TargetPosition), 1);
 8000746:	4b36      	ldr	r3, [pc, #216]	; (8000820 <main+0x320>)
 8000748:	885b      	ldrh	r3, [r3, #2]
 800074a:	4619      	mov	r1, r3
 800074c:	4b2a      	ldr	r3, [pc, #168]	; (80007f8 <main+0x2f8>)
 800074e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8000752:	4613      	mov	r3, r2
 8000754:	1acb      	subs	r3, r1, r3
 8000756:	2b00      	cmp	r3, #0
 8000758:	bfb8      	it	lt
 800075a:	425b      	neglt	r3, r3
 800075c:	17da      	asrs	r2, r3, #31
 800075e:	469a      	mov	sl, r3
 8000760:	4693      	mov	fp, r2
 8000762:	2301      	movs	r3, #1
 8000764:	9300      	str	r3, [sp, #0]
 8000766:	4652      	mov	r2, sl
 8000768:	465b      	mov	r3, fp
 800076a:	4823      	ldr	r0, [pc, #140]	; (80007f8 <main+0x2f8>)
 800076c:	f000 fdf3 	bl	8001356 <setTarget>
 8000770:	e014      	b.n	800079c <main+0x29c>
					}
					else{
						setTarget(&thetaMotor, (uint64_t)abs(nextInstr.th - thetaMotor.TargetPosition), 0);
 8000772:	4b2b      	ldr	r3, [pc, #172]	; (8000820 <main+0x320>)
 8000774:	885b      	ldrh	r3, [r3, #2]
 8000776:	4619      	mov	r1, r3
 8000778:	4b1f      	ldr	r3, [pc, #124]	; (80007f8 <main+0x2f8>)
 800077a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800077e:	4613      	mov	r3, r2
 8000780:	1acb      	subs	r3, r1, r3
 8000782:	2b00      	cmp	r3, #0
 8000784:	bfb8      	it	lt
 8000786:	425b      	neglt	r3, r3
 8000788:	17da      	asrs	r2, r3, #31
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	617a      	str	r2, [r7, #20]
 800078e:	2300      	movs	r3, #0
 8000790:	9300      	str	r3, [sp, #0]
 8000792:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000796:	4818      	ldr	r0, [pc, #96]	; (80007f8 <main+0x2f8>)
 8000798:	f000 fddd 	bl	8001356 <setTarget>
					}
					//Increment Y based on direction
					if(nextInstr.y >= yMotor.TargetPosition){
 800079c:	4b20      	ldr	r3, [pc, #128]	; (8000820 <main+0x320>)
 800079e:	889b      	ldrh	r3, [r3, #4]
 80007a0:	b29b      	uxth	r3, r3
 80007a2:	2200      	movs	r2, #0
 80007a4:	4698      	mov	r8, r3
 80007a6:	4691      	mov	r9, r2
 80007a8:	4b14      	ldr	r3, [pc, #80]	; (80007fc <main+0x2fc>)
 80007aa:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80007ae:	4590      	cmp	r8, r2
 80007b0:	eb79 0303 	sbcs.w	r3, r9, r3
 80007b4:	d336      	bcc.n	8000824 <main+0x324>
						setTarget(&yMotor, (uint64_t)abs(nextInstr.y - yMotor.TargetPosition), 1);
 80007b6:	4b1a      	ldr	r3, [pc, #104]	; (8000820 <main+0x320>)
 80007b8:	889b      	ldrh	r3, [r3, #4]
 80007ba:	4619      	mov	r1, r3
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <main+0x2fc>)
 80007be:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80007c2:	4613      	mov	r3, r2
 80007c4:	1acb      	subs	r3, r1, r3
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	bfb8      	it	lt
 80007ca:	425b      	neglt	r3, r3
 80007cc:	17da      	asrs	r2, r3, #31
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	60fa      	str	r2, [r7, #12]
 80007d2:	2301      	movs	r3, #1
 80007d4:	9300      	str	r3, [sp, #0]
 80007d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80007da:	4808      	ldr	r0, [pc, #32]	; (80007fc <main+0x2fc>)
 80007dc:	f000 fdbb 	bl	8001356 <setTarget>
 80007e0:	e035      	b.n	800084e <main+0x34e>
 80007e2:	bf00      	nop
 80007e4:	2000075c 	.word	0x2000075c
 80007e8:	20000340 	.word	0x20000340
 80007ec:	2000041c 	.word	0x2000041c
 80007f0:	200003d0 	.word	0x200003d0
 80007f4:	20000468 	.word	0x20000468
 80007f8:	20000500 	.word	0x20000500
 80007fc:	20000538 	.word	0x20000538
 8000800:	20000570 	.word	0x20000570
 8000804:	20000000 	.word	0x20000000
 8000808:	200002ec 	.word	0x200002ec
 800080c:	200004b4 	.word	0x200004b4
 8000810:	20000758 	.word	0x20000758
 8000814:	200005a8 	.word	0x200005a8
 8000818:	48000800 	.word	0x48000800
 800081c:	2000076c 	.word	0x2000076c
 8000820:	20000770 	.word	0x20000770
					}
					else{
						setTarget(&yMotor, (uint64_t)abs(nextInstr.y - yMotor.TargetPosition), 0);
 8000824:	4b39      	ldr	r3, [pc, #228]	; (800090c <main+0x40c>)
 8000826:	889b      	ldrh	r3, [r3, #4]
 8000828:	4619      	mov	r1, r3
 800082a:	4b39      	ldr	r3, [pc, #228]	; (8000910 <main+0x410>)
 800082c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8000830:	4613      	mov	r3, r2
 8000832:	1acb      	subs	r3, r1, r3
 8000834:	2b00      	cmp	r3, #0
 8000836:	bfb8      	it	lt
 8000838:	425b      	neglt	r3, r3
 800083a:	17da      	asrs	r2, r3, #31
 800083c:	603b      	str	r3, [r7, #0]
 800083e:	607a      	str	r2, [r7, #4]
 8000840:	2300      	movs	r3, #0
 8000842:	9300      	str	r3, [sp, #0]
 8000844:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000848:	4831      	ldr	r0, [pc, #196]	; (8000910 <main+0x410>)
 800084a:	f000 fd84 	bl	8001356 <setTarget>
					}
					//HAL_GPIO_WritePin(state2LED_GPIO_Port, state2LED_Pin, RESET);
					scanState = distGet;
 800084e:	4a31      	ldr	r2, [pc, #196]	; (8000914 <main+0x414>)
 8000850:	2302      	movs	r3, #2
 8000852:	7013      	strb	r3, [r2, #0]
 8000854:	e059      	b.n	800090a <main+0x40a>
				}
				else if(scanState == distGet && (yMotor.Status != Stopped || thetaMotor.Status != Stopped)){
 8000856:	4b2f      	ldr	r3, [pc, #188]	; (8000914 <main+0x414>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b02      	cmp	r3, #2
 800085c:	d116      	bne.n	800088c <main+0x38c>
 800085e:	4b2c      	ldr	r3, [pc, #176]	; (8000910 <main+0x410>)
 8000860:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000864:	b2db      	uxtb	r3, r3
 8000866:	2b03      	cmp	r3, #3
 8000868:	d105      	bne.n	8000876 <main+0x376>
 800086a:	4b2b      	ldr	r3, [pc, #172]	; (8000918 <main+0x418>)
 800086c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000870:	b2db      	uxtb	r3, r3
 8000872:	2b03      	cmp	r3, #3
 8000874:	d00a      	beq.n	800088c <main+0x38c>
					HAL_GPIO_WritePin(state2LED_GPIO_Port, state2LED_Pin, SET);
 8000876:	2201      	movs	r2, #1
 8000878:	2180      	movs	r1, #128	; 0x80
 800087a:	4828      	ldr	r0, [pc, #160]	; (800091c <main+0x41c>)
 800087c:	f001 fcf4 	bl	8002268 <HAL_GPIO_WritePin>
					timer = HAL_GetTick();
 8000880:	f001 f964 	bl	8001b4c <HAL_GetTick>
 8000884:	4603      	mov	r3, r0
 8000886:	4a26      	ldr	r2, [pc, #152]	; (8000920 <main+0x420>)
 8000888:	6013      	str	r3, [r2, #0]
 800088a:	e03e      	b.n	800090a <main+0x40a>
				}
				else if(scanState == distGet && yMotor.Status == Stopped && thetaMotor.Status == Stopped){
 800088c:	4b21      	ldr	r3, [pc, #132]	; (8000914 <main+0x414>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	2b02      	cmp	r3, #2
 8000892:	f47f af09 	bne.w	80006a8 <main+0x1a8>
 8000896:	4b1e      	ldr	r3, [pc, #120]	; (8000910 <main+0x410>)
 8000898:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800089c:	b2db      	uxtb	r3, r3
 800089e:	2b03      	cmp	r3, #3
 80008a0:	f47f af02 	bne.w	80006a8 <main+0x1a8>
 80008a4:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <main+0x418>)
 80008a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	2b03      	cmp	r3, #3
 80008ae:	f47f aefb 	bne.w	80006a8 <main+0x1a8>
					HAL_GPIO_WritePin(state2LED_GPIO_Port, state2LED_Pin, RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2180      	movs	r1, #128	; 0x80
 80008b6:	4819      	ldr	r0, [pc, #100]	; (800091c <main+0x41c>)
 80008b8:	f001 fcd6 	bl	8002268 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(state3LED_GPIO_Port, state3LED_Pin, SET);
 80008bc:	2201      	movs	r2, #1
 80008be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008c2:	4816      	ldr	r0, [pc, #88]	; (800091c <main+0x41c>)
 80008c4:	f001 fcd0 	bl	8002268 <HAL_GPIO_WritePin>
					VL53L0X_PerformSingleRangingMeasurement(Dev, &RangingData);
 80008c8:	4b16      	ldr	r3, [pc, #88]	; (8000924 <main+0x424>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4916      	ldr	r1, [pc, #88]	; (8000928 <main+0x428>)
 80008ce:	4618      	mov	r0, r3
 80008d0:	f008 fdf8 	bl	80094c4 <VL53L0X_PerformSingleRangingMeasurement>
					if(RangingData.RangeStatus == 0){
 80008d4:	4b14      	ldr	r3, [pc, #80]	; (8000928 <main+0x428>)
 80008d6:	7e1b      	ldrb	r3, [r3, #24]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	f47f aee5 	bne.w	80006a8 <main+0x1a8>
						SendSerialInt(RangingData.RangeMilliMeter);
 80008de:	4b12      	ldr	r3, [pc, #72]	; (8000928 <main+0x428>)
 80008e0:	891b      	ldrh	r3, [r3, #8]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 fcbe 	bl	8001264 <SendSerialInt>
						timer = HAL_GetTick()-timer;
 80008e8:	f001 f930 	bl	8001b4c <HAL_GetTick>
 80008ec:	4602      	mov	r2, r0
 80008ee:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <main+0x420>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	1ad3      	subs	r3, r2, r3
 80008f4:	4a0a      	ldr	r2, [pc, #40]	; (8000920 <main+0x420>)
 80008f6:	6013      	str	r3, [r2, #0]
						HAL_GPIO_WritePin(state3LED_GPIO_Port, state3LED_Pin, RESET);
 80008f8:	2200      	movs	r2, #0
 80008fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008fe:	4807      	ldr	r0, [pc, #28]	; (800091c <main+0x41c>)
 8000900:	f001 fcb2 	bl	8002268 <HAL_GPIO_WritePin>
						scanState = posReceive;
 8000904:	4a03      	ldr	r2, [pc, #12]	; (8000914 <main+0x414>)
 8000906:	2300      	movs	r3, #0
 8000908:	7013      	strb	r3, [r2, #0]
		if(scanState == posReceive && yMotor.Status == Stopped && thetaMotor.Status == Stopped){
 800090a:	e6cd      	b.n	80006a8 <main+0x1a8>
 800090c:	20000770 	.word	0x20000770
 8000910:	20000538 	.word	0x20000538
 8000914:	200005a8 	.word	0x200005a8
 8000918:	20000500 	.word	0x20000500
 800091c:	48000400 	.word	0x48000400
 8000920:	20000758 	.word	0x20000758
 8000924:	20000000 	.word	0x20000000
 8000928:	200005ac 	.word	0x200005ac

0800092c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b098      	sub	sp, #96	; 0x60
 8000930:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000932:	f107 0318 	add.w	r3, r7, #24
 8000936:	2248      	movs	r2, #72	; 0x48
 8000938:	2100      	movs	r1, #0
 800093a:	4618      	mov	r0, r3
 800093c:	f00c fb36 	bl	800cfac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
 800094c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800094e:	2000      	movs	r0, #0
 8000950:	f002 fa64 	bl	8002e1c <HAL_PWREx_ControlVoltageScaling>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800095a:	f000 fc67 	bl	800122c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800095e:	2310      	movs	r3, #16
 8000960:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000962:	2301      	movs	r3, #1
 8000964:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000966:	2300      	movs	r3, #0
 8000968:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800096a:	2360      	movs	r3, #96	; 0x60
 800096c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800096e:	2302      	movs	r3, #2
 8000970:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000972:	2301      	movs	r3, #1
 8000974:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000976:	2301      	movs	r3, #1
 8000978:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 50;
 800097a:	2332      	movs	r3, #50	; 0x32
 800097c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800097e:	2302      	movs	r3, #2
 8000980:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000982:	2302      	movs	r3, #2
 8000984:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000986:	2302      	movs	r3, #2
 8000988:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800098a:	f107 0318 	add.w	r3, r7, #24
 800098e:	4618      	mov	r0, r3
 8000990:	f002 faf8 	bl	8002f84 <HAL_RCC_OscConfig>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800099a:	f000 fc47 	bl	800122c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800099e:	230f      	movs	r3, #15
 80009a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a2:	2303      	movs	r3, #3
 80009a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ae:	2300      	movs	r3, #0
 80009b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009b2:	1d3b      	adds	r3, r7, #4
 80009b4:	2104      	movs	r1, #4
 80009b6:	4618      	mov	r0, r3
 80009b8:	f002 ff60 	bl	800387c <HAL_RCC_ClockConfig>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80009c2:	f000 fc33 	bl	800122c <Error_Handler>
  }
}
 80009c6:	bf00      	nop
 80009c8:	3760      	adds	r7, #96	; 0x60
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
	...

080009d0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009d4:	4b1b      	ldr	r3, [pc, #108]	; (8000a44 <MX_I2C2_Init+0x74>)
 80009d6:	4a1c      	ldr	r2, [pc, #112]	; (8000a48 <MX_I2C2_Init+0x78>)
 80009d8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10C0ECFF;
 80009da:	4b1a      	ldr	r3, [pc, #104]	; (8000a44 <MX_I2C2_Init+0x74>)
 80009dc:	4a1b      	ldr	r2, [pc, #108]	; (8000a4c <MX_I2C2_Init+0x7c>)
 80009de:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80009e0:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <MX_I2C2_Init+0x74>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009e6:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <MX_I2C2_Init+0x74>)
 80009e8:	2201      	movs	r2, #1
 80009ea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009ec:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <MX_I2C2_Init+0x74>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80009f2:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <MX_I2C2_Init+0x74>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <MX_I2C2_Init+0x74>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_I2C2_Init+0x74>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <MX_I2C2_Init+0x74>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a0a:	480e      	ldr	r0, [pc, #56]	; (8000a44 <MX_I2C2_Init+0x74>)
 8000a0c:	f001 fc5c 	bl	80022c8 <HAL_I2C_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a16:	f000 fc09 	bl	800122c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	4809      	ldr	r0, [pc, #36]	; (8000a44 <MX_I2C2_Init+0x74>)
 8000a1e:	f002 f945 	bl	8002cac <HAL_I2CEx_ConfigAnalogFilter>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a28:	f000 fc00 	bl	800122c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_I2C2_Init+0x74>)
 8000a30:	f002 f987 	bl	8002d42 <HAL_I2CEx_ConfigDigitalFilter>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a3a:	f000 fbf7 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	200002ec 	.word	0x200002ec
 8000a48:	40005800 	.word	0x40005800
 8000a4c:	10c0ecff 	.word	0x10c0ecff

08000a50 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000a54:	4b22      	ldr	r3, [pc, #136]	; (8000ae0 <MX_LPUART1_UART_Init+0x90>)
 8000a56:	4a23      	ldr	r2, [pc, #140]	; (8000ae4 <MX_LPUART1_UART_Init+0x94>)
 8000a58:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000a5a:	4b21      	ldr	r3, [pc, #132]	; (8000ae0 <MX_LPUART1_UART_Init+0x90>)
 8000a5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a60:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a62:	4b1f      	ldr	r3, [pc, #124]	; (8000ae0 <MX_LPUART1_UART_Init+0x90>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000a68:	4b1d      	ldr	r3, [pc, #116]	; (8000ae0 <MX_LPUART1_UART_Init+0x90>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000a6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ae0 <MX_LPUART1_UART_Init+0x90>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000a74:	4b1a      	ldr	r3, [pc, #104]	; (8000ae0 <MX_LPUART1_UART_Init+0x90>)
 8000a76:	220c      	movs	r2, #12
 8000a78:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7a:	4b19      	ldr	r3, [pc, #100]	; (8000ae0 <MX_LPUART1_UART_Init+0x90>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a80:	4b17      	ldr	r3, [pc, #92]	; (8000ae0 <MX_LPUART1_UART_Init+0x90>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a86:	4b16      	ldr	r3, [pc, #88]	; (8000ae0 <MX_LPUART1_UART_Init+0x90>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a8c:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <MX_LPUART1_UART_Init+0x90>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000a92:	4b13      	ldr	r3, [pc, #76]	; (8000ae0 <MX_LPUART1_UART_Init+0x90>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000a98:	4811      	ldr	r0, [pc, #68]	; (8000ae0 <MX_LPUART1_UART_Init+0x90>)
 8000a9a:	f005 f9e1 	bl	8005e60 <HAL_UART_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000aa4:	f000 fbc2 	bl	800122c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	480d      	ldr	r0, [pc, #52]	; (8000ae0 <MX_LPUART1_UART_Init+0x90>)
 8000aac:	f007 f983 	bl	8007db6 <HAL_UARTEx_SetTxFifoThreshold>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000ab6:	f000 fbb9 	bl	800122c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aba:	2100      	movs	r1, #0
 8000abc:	4808      	ldr	r0, [pc, #32]	; (8000ae0 <MX_LPUART1_UART_Init+0x90>)
 8000abe:	f007 f9b8 	bl	8007e32 <HAL_UARTEx_SetRxFifoThreshold>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000ac8:	f000 fbb0 	bl	800122c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000acc:	4804      	ldr	r0, [pc, #16]	; (8000ae0 <MX_LPUART1_UART_Init+0x90>)
 8000ace:	f007 f939 	bl	8007d44 <HAL_UARTEx_DisableFifoMode>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000ad8:	f000 fba8 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20000340 	.word	0x20000340
 8000ae4:	40008000 	.word	0x40008000

08000ae8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08e      	sub	sp, #56	; 0x38
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000afc:	f107 031c 	add.w	r3, r7, #28
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b08:	463b      	mov	r3, r7
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]
 8000b12:	60da      	str	r2, [r3, #12]
 8000b14:	611a      	str	r2, [r3, #16]
 8000b16:	615a      	str	r2, [r3, #20]
 8000b18:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b1a:	4b2e      	ldr	r3, [pc, #184]	; (8000bd4 <MX_TIM2_Init+0xec>)
 8000b1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b20:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8000b22:	4b2c      	ldr	r3, [pc, #176]	; (8000bd4 <MX_TIM2_Init+0xec>)
 8000b24:	2263      	movs	r2, #99	; 0x63
 8000b26:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b28:	4b2a      	ldr	r3, [pc, #168]	; (8000bd4 <MX_TIM2_Init+0xec>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1250-1;
 8000b2e:	4b29      	ldr	r3, [pc, #164]	; (8000bd4 <MX_TIM2_Init+0xec>)
 8000b30:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8000b34:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b36:	4b27      	ldr	r3, [pc, #156]	; (8000bd4 <MX_TIM2_Init+0xec>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b3c:	4b25      	ldr	r3, [pc, #148]	; (8000bd4 <MX_TIM2_Init+0xec>)
 8000b3e:	2280      	movs	r2, #128	; 0x80
 8000b40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b42:	4824      	ldr	r0, [pc, #144]	; (8000bd4 <MX_TIM2_Init+0xec>)
 8000b44:	f003 feac 	bl	80048a0 <HAL_TIM_Base_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000b4e:	f000 fb6d 	bl	800122c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b56:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	481d      	ldr	r0, [pc, #116]	; (8000bd4 <MX_TIM2_Init+0xec>)
 8000b60:	f004 fbb6 	bl	80052d0 <HAL_TIM_ConfigClockSource>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000b6a:	f000 fb5f 	bl	800122c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b6e:	4819      	ldr	r0, [pc, #100]	; (8000bd4 <MX_TIM2_Init+0xec>)
 8000b70:	f003 ff7d 	bl	8004a6e <HAL_TIM_PWM_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000b7a:	f000 fb57 	bl	800122c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b82:	2300      	movs	r3, #0
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b86:	f107 031c 	add.w	r3, r7, #28
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4811      	ldr	r0, [pc, #68]	; (8000bd4 <MX_TIM2_Init+0xec>)
 8000b8e:	f005 f8c1 	bl	8005d14 <HAL_TIMEx_MasterConfigSynchronization>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000b98:	f000 fb48 	bl	800122c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b9c:	2360      	movs	r3, #96	; 0x60
 8000b9e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8000ba0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ba4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000baa:	2300      	movs	r3, #0
 8000bac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bae:	463b      	mov	r3, r7
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4807      	ldr	r0, [pc, #28]	; (8000bd4 <MX_TIM2_Init+0xec>)
 8000bb6:	f004 fa77 	bl	80050a8 <HAL_TIM_PWM_ConfigChannel>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000bc0:	f000 fb34 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000bc4:	4803      	ldr	r0, [pc, #12]	; (8000bd4 <MX_TIM2_Init+0xec>)
 8000bc6:	f000 fe39 	bl	800183c <HAL_TIM_MspPostInit>

}
 8000bca:	bf00      	nop
 8000bcc:	3738      	adds	r7, #56	; 0x38
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	200003d0 	.word	0x200003d0

08000bd8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08e      	sub	sp, #56	; 0x38
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bec:	f107 031c 	add.w	r3, r7, #28
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bf8:	463b      	mov	r3, r7
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]
 8000c04:	611a      	str	r2, [r3, #16]
 8000c06:	615a      	str	r2, [r3, #20]
 8000c08:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c0a:	4b2d      	ldr	r3, [pc, #180]	; (8000cc0 <MX_TIM3_Init+0xe8>)
 8000c0c:	4a2d      	ldr	r2, [pc, #180]	; (8000cc4 <MX_TIM3_Init+0xec>)
 8000c0e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8000c10:	4b2b      	ldr	r3, [pc, #172]	; (8000cc0 <MX_TIM3_Init+0xe8>)
 8000c12:	2263      	movs	r2, #99	; 0x63
 8000c14:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c16:	4b2a      	ldr	r3, [pc, #168]	; (8000cc0 <MX_TIM3_Init+0xe8>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1250-1;
 8000c1c:	4b28      	ldr	r3, [pc, #160]	; (8000cc0 <MX_TIM3_Init+0xe8>)
 8000c1e:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8000c22:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c24:	4b26      	ldr	r3, [pc, #152]	; (8000cc0 <MX_TIM3_Init+0xe8>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c2a:	4b25      	ldr	r3, [pc, #148]	; (8000cc0 <MX_TIM3_Init+0xe8>)
 8000c2c:	2280      	movs	r2, #128	; 0x80
 8000c2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c30:	4823      	ldr	r0, [pc, #140]	; (8000cc0 <MX_TIM3_Init+0xe8>)
 8000c32:	f003 fe35 	bl	80048a0 <HAL_TIM_Base_Init>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000c3c:	f000 faf6 	bl	800122c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c44:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	481c      	ldr	r0, [pc, #112]	; (8000cc0 <MX_TIM3_Init+0xe8>)
 8000c4e:	f004 fb3f 	bl	80052d0 <HAL_TIM_ConfigClockSource>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000c58:	f000 fae8 	bl	800122c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c5c:	4818      	ldr	r0, [pc, #96]	; (8000cc0 <MX_TIM3_Init+0xe8>)
 8000c5e:	f003 ff06 	bl	8004a6e <HAL_TIM_PWM_Init>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000c68:	f000 fae0 	bl	800122c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c70:	2300      	movs	r3, #0
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c74:	f107 031c 	add.w	r3, r7, #28
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4811      	ldr	r0, [pc, #68]	; (8000cc0 <MX_TIM3_Init+0xe8>)
 8000c7c:	f005 f84a 	bl	8005d14 <HAL_TIMEx_MasterConfigSynchronization>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000c86:	f000 fad1 	bl	800122c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c8a:	2360      	movs	r3, #96	; 0x60
 8000c8c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8000c8e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c92:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c94:	2300      	movs	r3, #0
 8000c96:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c9c:	463b      	mov	r3, r7
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4807      	ldr	r0, [pc, #28]	; (8000cc0 <MX_TIM3_Init+0xe8>)
 8000ca4:	f004 fa00 	bl	80050a8 <HAL_TIM_PWM_ConfigChannel>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000cae:	f000 fabd 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000cb2:	4803      	ldr	r0, [pc, #12]	; (8000cc0 <MX_TIM3_Init+0xe8>)
 8000cb4:	f000 fdc2 	bl	800183c <HAL_TIM_MspPostInit>

}
 8000cb8:	bf00      	nop
 8000cba:	3738      	adds	r7, #56	; 0x38
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	2000041c 	.word	0x2000041c
 8000cc4:	40000400 	.word	0x40000400

08000cc8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08e      	sub	sp, #56	; 0x38
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cdc:	f107 031c 	add.w	r3, r7, #28
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ce8:	463b      	mov	r3, r7
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]
 8000cf0:	609a      	str	r2, [r3, #8]
 8000cf2:	60da      	str	r2, [r3, #12]
 8000cf4:	611a      	str	r2, [r3, #16]
 8000cf6:	615a      	str	r2, [r3, #20]
 8000cf8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cfa:	4b2d      	ldr	r3, [pc, #180]	; (8000db0 <MX_TIM4_Init+0xe8>)
 8000cfc:	4a2d      	ldr	r2, [pc, #180]	; (8000db4 <MX_TIM4_Init+0xec>)
 8000cfe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 8000d00:	4b2b      	ldr	r3, [pc, #172]	; (8000db0 <MX_TIM4_Init+0xe8>)
 8000d02:	2263      	movs	r2, #99	; 0x63
 8000d04:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d06:	4b2a      	ldr	r3, [pc, #168]	; (8000db0 <MX_TIM4_Init+0xe8>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1250-1;
 8000d0c:	4b28      	ldr	r3, [pc, #160]	; (8000db0 <MX_TIM4_Init+0xe8>)
 8000d0e:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8000d12:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d14:	4b26      	ldr	r3, [pc, #152]	; (8000db0 <MX_TIM4_Init+0xe8>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d1a:	4b25      	ldr	r3, [pc, #148]	; (8000db0 <MX_TIM4_Init+0xe8>)
 8000d1c:	2280      	movs	r2, #128	; 0x80
 8000d1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d20:	4823      	ldr	r0, [pc, #140]	; (8000db0 <MX_TIM4_Init+0xe8>)
 8000d22:	f003 fdbd 	bl	80048a0 <HAL_TIM_Base_Init>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000d2c:	f000 fa7e 	bl	800122c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d34:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	481c      	ldr	r0, [pc, #112]	; (8000db0 <MX_TIM4_Init+0xe8>)
 8000d3e:	f004 fac7 	bl	80052d0 <HAL_TIM_ConfigClockSource>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000d48:	f000 fa70 	bl	800122c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d4c:	4818      	ldr	r0, [pc, #96]	; (8000db0 <MX_TIM4_Init+0xe8>)
 8000d4e:	f003 fe8e 	bl	8004a6e <HAL_TIM_PWM_Init>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000d58:	f000 fa68 	bl	800122c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d60:	2300      	movs	r3, #0
 8000d62:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d64:	f107 031c 	add.w	r3, r7, #28
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4811      	ldr	r0, [pc, #68]	; (8000db0 <MX_TIM4_Init+0xe8>)
 8000d6c:	f004 ffd2 	bl	8005d14 <HAL_TIMEx_MasterConfigSynchronization>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000d76:	f000 fa59 	bl	800122c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d7a:	2360      	movs	r3, #96	; 0x60
 8000d7c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 200;
 8000d7e:	23c8      	movs	r3, #200	; 0xc8
 8000d80:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d82:	2300      	movs	r3, #0
 8000d84:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d86:	2300      	movs	r3, #0
 8000d88:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d8a:	463b      	mov	r3, r7
 8000d8c:	2208      	movs	r2, #8
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4807      	ldr	r0, [pc, #28]	; (8000db0 <MX_TIM4_Init+0xe8>)
 8000d92:	f004 f989 	bl	80050a8 <HAL_TIM_PWM_ConfigChannel>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000d9c:	f000 fa46 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000da0:	4803      	ldr	r0, [pc, #12]	; (8000db0 <MX_TIM4_Init+0xe8>)
 8000da2:	f000 fd4b 	bl	800183c <HAL_TIM_MspPostInit>

}
 8000da6:	bf00      	nop
 8000da8:	3738      	adds	r7, #56	; 0x38
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20000468 	.word	0x20000468
 8000db4:	40000800 	.word	0x40000800

08000db8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b088      	sub	sp, #32
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dbe:	f107 0310 	add.w	r3, r7, #16
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000dd6:	4b1d      	ldr	r3, [pc, #116]	; (8000e4c <MX_TIM5_Init+0x94>)
 8000dd8:	4a1d      	ldr	r2, [pc, #116]	; (8000e50 <MX_TIM5_Init+0x98>)
 8000dda:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 100-1;
 8000ddc:	4b1b      	ldr	r3, [pc, #108]	; (8000e4c <MX_TIM5_Init+0x94>)
 8000dde:	2263      	movs	r2, #99	; 0x63
 8000de0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de2:	4b1a      	ldr	r3, [pc, #104]	; (8000e4c <MX_TIM5_Init+0x94>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000de8:	4b18      	ldr	r3, [pc, #96]	; (8000e4c <MX_TIM5_Init+0x94>)
 8000dea:	f04f 32ff 	mov.w	r2, #4294967295
 8000dee:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df0:	4b16      	ldr	r3, [pc, #88]	; (8000e4c <MX_TIM5_Init+0x94>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df6:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <MX_TIM5_Init+0x94>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000dfc:	4813      	ldr	r0, [pc, #76]	; (8000e4c <MX_TIM5_Init+0x94>)
 8000dfe:	f003 fd4f 	bl	80048a0 <HAL_TIM_Base_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000e08:	f000 fa10 	bl	800122c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000e12:	f107 0310 	add.w	r3, r7, #16
 8000e16:	4619      	mov	r1, r3
 8000e18:	480c      	ldr	r0, [pc, #48]	; (8000e4c <MX_TIM5_Init+0x94>)
 8000e1a:	f004 fa59 	bl	80052d0 <HAL_TIM_ConfigClockSource>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000e24:	f000 fa02 	bl	800122c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e30:	1d3b      	adds	r3, r7, #4
 8000e32:	4619      	mov	r1, r3
 8000e34:	4805      	ldr	r0, [pc, #20]	; (8000e4c <MX_TIM5_Init+0x94>)
 8000e36:	f004 ff6d 	bl	8005d14 <HAL_TIMEx_MasterConfigSynchronization>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000e40:	f000 f9f4 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000e44:	bf00      	nop
 8000e46:	3720      	adds	r7, #32
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	200004b4 	.word	0x200004b4
 8000e50:	40000c00 	.word	0x40000c00

08000e54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08c      	sub	sp, #48	; 0x30
 8000e58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5a:	f107 031c 	add.w	r3, r7, #28
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
 8000e68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e6a:	4b67      	ldr	r3, [pc, #412]	; (8001008 <MX_GPIO_Init+0x1b4>)
 8000e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6e:	4a66      	ldr	r2, [pc, #408]	; (8001008 <MX_GPIO_Init+0x1b4>)
 8000e70:	f043 0310 	orr.w	r3, r3, #16
 8000e74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e76:	4b64      	ldr	r3, [pc, #400]	; (8001008 <MX_GPIO_Init+0x1b4>)
 8000e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7a:	f003 0310 	and.w	r3, r3, #16
 8000e7e:	61bb      	str	r3, [r7, #24]
 8000e80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e82:	4b61      	ldr	r3, [pc, #388]	; (8001008 <MX_GPIO_Init+0x1b4>)
 8000e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e86:	4a60      	ldr	r2, [pc, #384]	; (8001008 <MX_GPIO_Init+0x1b4>)
 8000e88:	f043 0320 	orr.w	r3, r3, #32
 8000e8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e8e:	4b5e      	ldr	r3, [pc, #376]	; (8001008 <MX_GPIO_Init+0x1b4>)
 8000e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e92:	f003 0320 	and.w	r3, r3, #32
 8000e96:	617b      	str	r3, [r7, #20]
 8000e98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9a:	4b5b      	ldr	r3, [pc, #364]	; (8001008 <MX_GPIO_Init+0x1b4>)
 8000e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9e:	4a5a      	ldr	r2, [pc, #360]	; (8001008 <MX_GPIO_Init+0x1b4>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ea6:	4b58      	ldr	r3, [pc, #352]	; (8001008 <MX_GPIO_Init+0x1b4>)
 8000ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	613b      	str	r3, [r7, #16]
 8000eb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb2:	4b55      	ldr	r3, [pc, #340]	; (8001008 <MX_GPIO_Init+0x1b4>)
 8000eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb6:	4a54      	ldr	r2, [pc, #336]	; (8001008 <MX_GPIO_Init+0x1b4>)
 8000eb8:	f043 0302 	orr.w	r3, r3, #2
 8000ebc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ebe:	4b52      	ldr	r3, [pc, #328]	; (8001008 <MX_GPIO_Init+0x1b4>)
 8000ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec2:	f003 0302 	and.w	r3, r3, #2
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eca:	4b4f      	ldr	r3, [pc, #316]	; (8001008 <MX_GPIO_Init+0x1b4>)
 8000ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ece:	4a4e      	ldr	r2, [pc, #312]	; (8001008 <MX_GPIO_Init+0x1b4>)
 8000ed0:	f043 0308 	orr.w	r3, r3, #8
 8000ed4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ed6:	4b4c      	ldr	r3, [pc, #304]	; (8001008 <MX_GPIO_Init+0x1b4>)
 8000ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eda:	f003 0308 	and.w	r3, r3, #8
 8000ede:	60bb      	str	r3, [r7, #8]
 8000ee0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ee2:	4b49      	ldr	r3, [pc, #292]	; (8001008 <MX_GPIO_Init+0x1b4>)
 8000ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee6:	4a48      	ldr	r2, [pc, #288]	; (8001008 <MX_GPIO_Init+0x1b4>)
 8000ee8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000eec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eee:	4b46      	ldr	r3, [pc, #280]	; (8001008 <MX_GPIO_Init+0x1b4>)
 8000ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000efa:	f002 f833 	bl	8002f64 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efe:	4b42      	ldr	r3, [pc, #264]	; (8001008 <MX_GPIO_Init+0x1b4>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	4a41      	ldr	r2, [pc, #260]	; (8001008 <MX_GPIO_Init+0x1b4>)
 8000f04:	f043 0304 	orr.w	r3, r3, #4
 8000f08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0a:	4b3f      	ldr	r3, [pc, #252]	; (8001008 <MX_GPIO_Init+0x1b4>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0e:	f003 0304 	and.w	r3, r3, #4
 8000f12:	603b      	str	r3, [r7, #0]
 8000f14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, thetaDir_Pin|yDir_Pin|rDir_Pin, GPIO_PIN_RESET);
 8000f16:	2200      	movs	r2, #0
 8000f18:	21e0      	movs	r1, #224	; 0xe0
 8000f1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f1e:	f001 f9a3 	bl	8002268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, state3LED_Pin|state2LED_Pin, GPIO_PIN_RESET);
 8000f22:	2200      	movs	r2, #0
 8000f24:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000f28:	4838      	ldr	r0, [pc, #224]	; (800100c <MX_GPIO_Init+0x1b8>)
 8000f2a:	f001 f99d 	bl	8002268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(loadCLK_GPIO_Port, loadCLK_Pin, GPIO_PIN_RESET);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f34:	4836      	ldr	r0, [pc, #216]	; (8001010 <MX_GPIO_Init+0x1bc>)
 8000f36:	f001 f997 	bl	8002268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(state1LED_GPIO_Port, state1LED_Pin, GPIO_PIN_RESET);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2180      	movs	r1, #128	; 0x80
 8000f3e:	4835      	ldr	r0, [pc, #212]	; (8001014 <MX_GPIO_Init+0x1c0>)
 8000f40:	f001 f992 	bl	8002268 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : thetaDir_Pin yDir_Pin rDir_Pin */
  GPIO_InitStruct.Pin = thetaDir_Pin|yDir_Pin|rDir_Pin;
 8000f44:	23e0      	movs	r3, #224	; 0xe0
 8000f46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f50:	2300      	movs	r3, #0
 8000f52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f54:	f107 031c 	add.w	r3, r7, #28
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f5e:	f000 fff1 	bl	8001f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : thLim_Pin yLim_Pin rLim_Pin */
  GPIO_InitStruct.Pin = thLim_Pin|yLim_Pin|rLim_Pin;
 8000f62:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000f66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f68:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f72:	f107 031c 	add.w	r3, r7, #28
 8000f76:	4619      	mov	r1, r3
 8000f78:	4827      	ldr	r0, [pc, #156]	; (8001018 <MX_GPIO_Init+0x1c4>)
 8000f7a:	f000 ffe3 	bl	8001f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : state3LED_Pin state2LED_Pin */
  GPIO_InitStruct.Pin = state3LED_Pin|state2LED_Pin;
 8000f7e:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000f82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f84:	2301      	movs	r3, #1
 8000f86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f90:	f107 031c 	add.w	r3, r7, #28
 8000f94:	4619      	mov	r1, r3
 8000f96:	481d      	ldr	r0, [pc, #116]	; (800100c <MX_GPIO_Init+0x1b8>)
 8000f98:	f000 ffd4 	bl	8001f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : loadCLK_Pin */
  GPIO_InitStruct.Pin = loadCLK_Pin;
 8000f9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000faa:	2300      	movs	r3, #0
 8000fac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(loadCLK_GPIO_Port, &GPIO_InitStruct);
 8000fae:	f107 031c 	add.w	r3, r7, #28
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4816      	ldr	r0, [pc, #88]	; (8001010 <MX_GPIO_Init+0x1bc>)
 8000fb6:	f000 ffc5 	bl	8001f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : loadDATA_Pin */
  GPIO_InitStruct.Pin = loadDATA_Pin;
 8000fba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(loadDATA_GPIO_Port, &GPIO_InitStruct);
 8000fc8:	f107 031c 	add.w	r3, r7, #28
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4810      	ldr	r0, [pc, #64]	; (8001010 <MX_GPIO_Init+0x1bc>)
 8000fd0:	f000 ffb8 	bl	8001f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : state1LED_Pin */
  GPIO_InitStruct.Pin = state1LED_Pin;
 8000fd4:	2380      	movs	r3, #128	; 0x80
 8000fd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(state1LED_GPIO_Port, &GPIO_InitStruct);
 8000fe4:	f107 031c 	add.w	r3, r7, #28
 8000fe8:	4619      	mov	r1, r3
 8000fea:	480a      	ldr	r0, [pc, #40]	; (8001014 <MX_GPIO_Init+0x1c0>)
 8000fec:	f000 ffaa 	bl	8001f44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	2028      	movs	r0, #40	; 0x28
 8000ff6:	f000 feb4 	bl	8001d62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ffa:	2028      	movs	r0, #40	; 0x28
 8000ffc:	f000 fecd 	bl	8001d9a <HAL_NVIC_EnableIRQ>

}
 8001000:	bf00      	nop
 8001002:	3730      	adds	r7, #48	; 0x30
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40021000 	.word	0x40021000
 800100c:	48000400 	.word	0x48000400
 8001010:	48000c00 	.word	0x48000c00
 8001014:	48000800 	.word	0x48000800
 8001018:	48001000 	.word	0x48001000

0800101c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void  HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim){
 800101c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001020:	b088      	sub	sp, #32
 8001022:	af00      	add	r7, sp, #0
 8001024:	61f8      	str	r0, [r7, #28]
	//Theta Motor interrupts
	if(htim == &htim3){
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	4a60      	ldr	r2, [pc, #384]	; (80011ac <HAL_TIM_PeriodElapsedCallback+0x190>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d13b      	bne.n	80010a6 <HAL_TIM_PeriodElapsedCallback+0x8a>
		if(thetaMotor.Status == RunningForward){
 800102e:	4b60      	ldr	r3, [pc, #384]	; (80011b0 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001030:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001034:	b2db      	uxtb	r3, r3
 8001036:	2b01      	cmp	r3, #1
 8001038:	d10d      	bne.n	8001056 <HAL_TIM_PeriodElapsedCallback+0x3a>
			thetaMotor.CurrentPosition++;
 800103a:	4b5d      	ldr	r3, [pc, #372]	; (80011b0 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800103c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001040:	1c51      	adds	r1, r2, #1
 8001042:	6139      	str	r1, [r7, #16]
 8001044:	f143 0300 	adc.w	r3, r3, #0
 8001048:	617b      	str	r3, [r7, #20]
 800104a:	4b59      	ldr	r3, [pc, #356]	; (80011b0 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800104c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001050:	e9c3 1208 	strd	r1, r2, [r3, #32]
 8001054:	e012      	b.n	800107c <HAL_TIM_PeriodElapsedCallback+0x60>
		}
		else if (thetaMotor.Status == RunningBackward){
 8001056:	4b56      	ldr	r3, [pc, #344]	; (80011b0 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001058:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800105c:	b2db      	uxtb	r3, r3
 800105e:	2b02      	cmp	r3, #2
 8001060:	d10c      	bne.n	800107c <HAL_TIM_PeriodElapsedCallback+0x60>
			thetaMotor.CurrentPosition--;
 8001062:	4b53      	ldr	r3, [pc, #332]	; (80011b0 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001064:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001068:	1e51      	subs	r1, r2, #1
 800106a:	60b9      	str	r1, [r7, #8]
 800106c:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	4b4f      	ldr	r3, [pc, #316]	; (80011b0 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001074:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001078:	e9c3 1208 	strd	r1, r2, [r3, #32]
		}
		if(thetaMotor.CurrentPosition == thetaMotor.TargetPosition){
 800107c:	4b4c      	ldr	r3, [pc, #304]	; (80011b0 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800107e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001082:	4b4b      	ldr	r3, [pc, #300]	; (80011b0 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001084:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001088:	4299      	cmp	r1, r3
 800108a:	bf08      	it	eq
 800108c:	4290      	cmpeq	r0, r2
 800108e:	d10a      	bne.n	80010a6 <HAL_TIM_PeriodElapsedCallback+0x8a>
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001090:	2100      	movs	r1, #0
 8001092:	4846      	ldr	r0, [pc, #280]	; (80011ac <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001094:	f003 fe52 	bl	8004d3c <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop(&htim3);
 8001098:	4844      	ldr	r0, [pc, #272]	; (80011ac <HAL_TIM_PeriodElapsedCallback+0x190>)
 800109a:	f003 fcc1 	bl	8004a20 <HAL_TIM_Base_Stop>
			thetaMotor.Status = Stopped;
 800109e:	4b44      	ldr	r3, [pc, #272]	; (80011b0 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80010a0:	2203      	movs	r2, #3
 80010a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}
	}
	//yMotor Interrupts
	if(htim == &htim2){
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	4a42      	ldr	r2, [pc, #264]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d138      	bne.n	8001120 <HAL_TIM_PeriodElapsedCallback+0x104>
		if(yMotor.Status == RunningForward){
 80010ae:	4b42      	ldr	r3, [pc, #264]	; (80011b8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80010b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d10d      	bne.n	80010d6 <HAL_TIM_PeriodElapsedCallback+0xba>
			yMotor.CurrentPosition++;
 80010ba:	4b3f      	ldr	r3, [pc, #252]	; (80011b8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80010bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80010c0:	1c51      	adds	r1, r2, #1
 80010c2:	6039      	str	r1, [r7, #0]
 80010c4:	f143 0300 	adc.w	r3, r3, #0
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	4b3b      	ldr	r3, [pc, #236]	; (80011b8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80010cc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80010d0:	e9c3 1208 	strd	r1, r2, [r3, #32]
 80010d4:	e00f      	b.n	80010f6 <HAL_TIM_PeriodElapsedCallback+0xda>
		}
		else if (yMotor.Status == RunningBackward){
 80010d6:	4b38      	ldr	r3, [pc, #224]	; (80011b8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80010d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d109      	bne.n	80010f6 <HAL_TIM_PeriodElapsedCallback+0xda>
			yMotor.CurrentPosition--;
 80010e2:	4b35      	ldr	r3, [pc, #212]	; (80011b8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80010e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80010e8:	f112 3aff 	adds.w	sl, r2, #4294967295
 80010ec:	f143 3bff 	adc.w	fp, r3, #4294967295
 80010f0:	4b31      	ldr	r3, [pc, #196]	; (80011b8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80010f2:	e9c3 ab08 	strd	sl, fp, [r3, #32]
		}
		if(yMotor.CurrentPosition == yMotor.TargetPosition){
 80010f6:	4b30      	ldr	r3, [pc, #192]	; (80011b8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80010f8:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80010fc:	4b2e      	ldr	r3, [pc, #184]	; (80011b8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80010fe:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001102:	4299      	cmp	r1, r3
 8001104:	bf08      	it	eq
 8001106:	4290      	cmpeq	r0, r2
 8001108:	d10a      	bne.n	8001120 <HAL_TIM_PeriodElapsedCallback+0x104>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800110a:	2100      	movs	r1, #0
 800110c:	4829      	ldr	r0, [pc, #164]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x198>)
 800110e:	f003 fe15 	bl	8004d3c <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop(&htim2);
 8001112:	4828      	ldr	r0, [pc, #160]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001114:	f003 fc84 	bl	8004a20 <HAL_TIM_Base_Stop>
			yMotor.Status = Stopped;
 8001118:	4b27      	ldr	r3, [pc, #156]	; (80011b8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800111a:	2203      	movs	r2, #3
 800111c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}
	}
	//rMotor Interrupts
	if(htim == rMotor.Timer){
 8001120:	4b26      	ldr	r3, [pc, #152]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	69fa      	ldr	r2, [r7, #28]
 8001126:	429a      	cmp	r2, r3
 8001128:	d13a      	bne.n	80011a0 <HAL_TIM_PeriodElapsedCallback+0x184>
		if(rMotor.Status == RunningForward){
 800112a:	4b24      	ldr	r3, [pc, #144]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800112c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001130:	b2db      	uxtb	r3, r3
 8001132:	2b01      	cmp	r3, #1
 8001134:	d10a      	bne.n	800114c <HAL_TIM_PeriodElapsedCallback+0x130>
			rMotor.CurrentPosition++;
 8001136:	4b21      	ldr	r3, [pc, #132]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001138:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800113c:	f112 0801 	adds.w	r8, r2, #1
 8001140:	f143 0900 	adc.w	r9, r3, #0
 8001144:	4b1d      	ldr	r3, [pc, #116]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001146:	e9c3 8908 	strd	r8, r9, [r3, #32]
 800114a:	e00e      	b.n	800116a <HAL_TIM_PeriodElapsedCallback+0x14e>
		}
		else if (rMotor.Status == RunningBackward){
 800114c:	4b1b      	ldr	r3, [pc, #108]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800114e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001152:	b2db      	uxtb	r3, r3
 8001154:	2b02      	cmp	r3, #2
 8001156:	d108      	bne.n	800116a <HAL_TIM_PeriodElapsedCallback+0x14e>
			rMotor.CurrentPosition--;
 8001158:	4b18      	ldr	r3, [pc, #96]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800115a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800115e:	1e54      	subs	r4, r2, #1
 8001160:	f143 35ff 	adc.w	r5, r3, #4294967295
 8001164:	4b15      	ldr	r3, [pc, #84]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001166:	e9c3 4508 	strd	r4, r5, [r3, #32]
		}
		if(rMotor.CurrentPosition == rMotor.TargetPosition){
 800116a:	4b14      	ldr	r3, [pc, #80]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800116c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001170:	4b12      	ldr	r3, [pc, #72]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001172:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001176:	4299      	cmp	r1, r3
 8001178:	bf08      	it	eq
 800117a:	4290      	cmpeq	r0, r2
 800117c:	d110      	bne.n	80011a0 <HAL_TIM_PeriodElapsedCallback+0x184>
			HAL_TIM_PWM_Stop(rMotor.Timer, rMotor.Channel);
 800117e:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a0e      	ldr	r2, [pc, #56]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001184:	6852      	ldr	r2, [r2, #4]
 8001186:	4611      	mov	r1, r2
 8001188:	4618      	mov	r0, r3
 800118a:	f003 fdd7 	bl	8004d3c <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop(rMotor.Timer);
 800118e:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4618      	mov	r0, r3
 8001194:	f003 fc44 	bl	8004a20 <HAL_TIM_Base_Stop>
			rMotor.Status = Stopped;
 8001198:	4b08      	ldr	r3, [pc, #32]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800119a:	2203      	movs	r2, #3
 800119c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}

	}
}
 80011a0:	bf00      	nop
 80011a2:	3720      	adds	r7, #32
 80011a4:	46bd      	mov	sp, r7
 80011a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80011aa:	bf00      	nop
 80011ac:	2000041c 	.word	0x2000041c
 80011b0:	20000500 	.word	0x20000500
 80011b4:	200003d0 	.word	0x200003d0
 80011b8:	20000538 	.word	0x20000538
 80011bc:	20000570 	.word	0x20000570

080011c0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
	//set flag
	uartRecievedFlag = 1;
 80011c8:	4b04      	ldr	r3, [pc, #16]	; (80011dc <HAL_UART_RxCpltCallback+0x1c>)
 80011ca:	2201      	movs	r2, #1
 80011cc:	701a      	strb	r2, [r3, #0]
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	2000076c 	.word	0x2000076c

080011e0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	80fb      	strh	r3, [r7, #6]

	//check which limit switch was hit
	if(GPIO_Pin == rLim_Pin){
 80011ea:	88fb      	ldrh	r3, [r7, #6]
 80011ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80011f0:	d103      	bne.n	80011fa <HAL_GPIO_EXTI_Callback+0x1a>
		zeroStepper(&rMotor);
 80011f2:	480b      	ldr	r0, [pc, #44]	; (8001220 <HAL_GPIO_EXTI_Callback+0x40>)
 80011f4:	f000 f9ae 	bl	8001554 <zeroStepper>
	else if(GPIO_Pin == yLim_Pin){
		zeroStepper(&yMotor);
	}


}
 80011f8:	e00e      	b.n	8001218 <HAL_GPIO_EXTI_Callback+0x38>
	else if(GPIO_Pin == thLim_Pin){
 80011fa:	88fb      	ldrh	r3, [r7, #6]
 80011fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001200:	d103      	bne.n	800120a <HAL_GPIO_EXTI_Callback+0x2a>
		zeroStepper(&thetaMotor);
 8001202:	4808      	ldr	r0, [pc, #32]	; (8001224 <HAL_GPIO_EXTI_Callback+0x44>)
 8001204:	f000 f9a6 	bl	8001554 <zeroStepper>
}
 8001208:	e006      	b.n	8001218 <HAL_GPIO_EXTI_Callback+0x38>
	else if(GPIO_Pin == yLim_Pin){
 800120a:	88fb      	ldrh	r3, [r7, #6]
 800120c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001210:	d102      	bne.n	8001218 <HAL_GPIO_EXTI_Callback+0x38>
		zeroStepper(&yMotor);
 8001212:	4805      	ldr	r0, [pc, #20]	; (8001228 <HAL_GPIO_EXTI_Callback+0x48>)
 8001214:	f000 f99e 	bl	8001554 <zeroStepper>
}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20000570 	.word	0x20000570
 8001224:	20000500 	.word	0x20000500
 8001228:	20000538 	.word	0x20000538

0800122c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001230:	b672      	cpsid	i
}
 8001232:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001234:	e7fe      	b.n	8001234 <Error_Handler+0x8>
	...

08001238 <InitSerialFromPC>:
uint8_t newLine = '\n';
uint8_t carriageReturn = '\r';

UART_HandleTypeDef* huart;

void InitSerialFromPC(UART_HandleTypeDef* huartHandler, uint8_t* rxBuffer){
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
	huart = huartHandler;
 8001242:	4a06      	ldr	r2, [pc, #24]	; (800125c <InitSerialFromPC+0x24>)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6013      	str	r3, [r2, #0]
	//allocate for buffer
	//usartInputBuffer = (uint8_t*)calloc(INPUT_BUFFER_SIZE,sizeof(uint8_t));
	usartOutputBuffer = rxBuffer;
 8001248:	4a05      	ldr	r2, [pc, #20]	; (8001260 <InitSerialFromPC+0x28>)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	6013      	str	r3, [r2, #0]
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	2000077c 	.word	0x2000077c
 8001260:	20000778 	.word	0x20000778

08001264 <SendSerialInt>:

void SendSerialChar(uint8_t c){
	HAL_UART_Transmit(huart,&c,1,10);
}

void SendSerialInt(uint16_t i){
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	80fb      	strh	r3, [r7, #6]
	HAL_UART_Transmit(huart,(uint8_t*)(&i),sizeof(uint16_t),10);
 800126e:	4b05      	ldr	r3, [pc, #20]	; (8001284 <SendSerialInt+0x20>)
 8001270:	6818      	ldr	r0, [r3, #0]
 8001272:	1db9      	adds	r1, r7, #6
 8001274:	230a      	movs	r3, #10
 8001276:	2202      	movs	r2, #2
 8001278:	f004 fe42 	bl	8005f00 <HAL_UART_Transmit>
}
 800127c:	bf00      	nop
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	2000077c 	.word	0x2000077c

08001288 <ParseInstructions>:

void ParseInstructions(uint8_t* rxBuffer, Instruction* i){
 8001288:	b480      	push	{r7}
 800128a:	b087      	sub	sp, #28
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
	//assume that the characters were sent r,th,y

	uint16_t temp[3];

	for(int a = 0; a < 3; a++){
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
 8001296:	e01a      	b.n	80012ce <ParseInstructions+0x46>
		temp[a] = rxBuffer[2*a] | (rxBuffer[2*a+1] << 8);
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	461a      	mov	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4413      	add	r3, r2
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	b21a      	sxth	r2, r3
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	3301      	adds	r3, #1
 80012ac:	6879      	ldr	r1, [r7, #4]
 80012ae:	440b      	add	r3, r1
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	021b      	lsls	r3, r3, #8
 80012b4:	b21b      	sxth	r3, r3
 80012b6:	4313      	orrs	r3, r2
 80012b8:	b21b      	sxth	r3, r3
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	3318      	adds	r3, #24
 80012c2:	443b      	add	r3, r7
 80012c4:	f823 2c0c 	strh.w	r2, [r3, #-12]
	for(int a = 0; a < 3; a++){
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	3301      	adds	r3, #1
 80012cc:	617b      	str	r3, [r7, #20]
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	dde1      	ble.n	8001298 <ParseInstructions+0x10>
	}

	i->r = temp[0];
 80012d4:	89ba      	ldrh	r2, [r7, #12]
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	801a      	strh	r2, [r3, #0]
	i->th = temp[1];
 80012da:	89fa      	ldrh	r2, [r7, #14]
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	805a      	strh	r2, [r3, #2]
	i->y = temp[2];
 80012e0:	8a3a      	ldrh	r2, [r7, #16]
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	809a      	strh	r2, [r3, #4]
}
 80012e6:	bf00      	nop
 80012e8:	371c      	adds	r7, #28
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <initStepper>:
#include "stepperControl.h"

void initStepper(stepper * stepper, TIM_HandleTypeDef * tim, uint32_t  channel, GPIO_TypeDef * dirPort, uint16_t dirPin, uint32_t speed){
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b084      	sub	sp, #16
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	60f8      	str	r0, [r7, #12]
 80012fa:	60b9      	str	r1, [r7, #8]
 80012fc:	607a      	str	r2, [r7, #4]
 80012fe:	603b      	str	r3, [r7, #0]

	//Initialize values
	stepper->Timer = tim;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	68ba      	ldr	r2, [r7, #8]
 8001304:	601a      	str	r2, [r3, #0]
	stepper->Channel = channel;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	605a      	str	r2, [r3, #4]
	stepper->DIRPort = dirPort;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	683a      	ldr	r2, [r7, #0]
 8001310:	609a      	str	r2, [r3, #8]
	stepper->DIRPin = dirPin;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	8b3a      	ldrh	r2, [r7, #24]
 8001316:	819a      	strh	r2, [r3, #12]
	stepper->PPS = speed;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	69fa      	ldr	r2, [r7, #28]
 800131c:	611a      	str	r2, [r3, #16]
	stepper->CurrentPosition = 0;
 800131e:	68f9      	ldr	r1, [r7, #12]
 8001320:	f04f 0200 	mov.w	r2, #0
 8001324:	f04f 0300 	mov.w	r3, #0
 8001328:	e9c1 2308 	strd	r2, r3, [r1, #32]
	stepper->TargetPosition =0;
 800132c:	68f9      	ldr	r1, [r7, #12]
 800132e:	f04f 0200 	mov.w	r2, #0
 8001332:	f04f 0300 	mov.w	r3, #0
 8001336:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	//Set status
	stepper->Status = Stopped;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	2203      	movs	r2, #3
 800133e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	//update timer to align with speed
	setSpeed(stepper, stepper->PPS);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	691b      	ldr	r3, [r3, #16]
 8001346:	4619      	mov	r1, r3
 8001348:	68f8      	ldr	r0, [r7, #12]
 800134a:	f000 f84b 	bl	80013e4 <setSpeed>
	//return stepper structure pointer
}
 800134e:	bf00      	nop
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <setTarget>:


void setTarget (stepper * stepper, uint64_t increment, char forward){
 8001356:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	e9c7 2300 	strd	r2, r3, [r7]
	//if positive move forward and add to current position
	if(forward){
 8001364:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001368:	2b00      	cmp	r3, #0
 800136a:	d00c      	beq.n	8001386 <setTarget+0x30>
		stepper->TargetPosition+= increment;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001372:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001376:	eb10 0802 	adds.w	r8, r0, r2
 800137a:	eb41 0903 	adc.w	r9, r1, r3
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	e9c3 890a 	strd	r8, r9, [r3, #40]	; 0x28
 8001384:	e00a      	b.n	800139c <setTarget+0x46>
	}
	//if negative move backward and take away from current position
	else{
		stepper->TargetPosition-= increment;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800138c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001390:	1a84      	subs	r4, r0, r2
 8001392:	eb61 0503 	sbc.w	r5, r1, r3
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
	}
	//TargetPosition can't be negative
	if(stepper->TargetPosition<0){
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
		stepper->TargetPosition=0;
	}
	//Start timer if it needs to be started
	if (stepper->Status == Stopped && stepper->TargetPosition != stepper->CurrentPosition){
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b03      	cmp	r3, #3
 80013ac:	d111      	bne.n	80013d2 <setTarget+0x7c>
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80013ba:	4299      	cmp	r1, r3
 80013bc:	bf08      	it	eq
 80013be:	4290      	cmpeq	r0, r2
 80013c0:	d007      	beq.n	80013d2 <setTarget+0x7c>
		//start pulses on timer
		HAL_TIM_PWM_Start(stepper->Timer, stepper->Channel);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	4619      	mov	r1, r3
 80013cc:	4610      	mov	r0, r2
 80013ce:	f003 fbaf 	bl	8004b30 <HAL_TIM_PWM_Start>
	}
	//Set Direction
	setDirection(stepper);
 80013d2:	68f8      	ldr	r0, [r7, #12]
 80013d4:	f000 f86a 	bl	80014ac <setDirection>
}
 80013d8:	bf00      	nop
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

080013e4 <setSpeed>:

void setSpeed (stepper * stepper, uint32_t speed){
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
	//update pulse rate of stepper
	stepper->PPS = speed;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	683a      	ldr	r2, [r7, #0]
 80013f2:	611a      	str	r2, [r3, #16]
	//set duty cycle
	switch(stepper->Channel){
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	2b0c      	cmp	r3, #12
 80013fa:	d845      	bhi.n	8001488 <setSpeed+0xa4>
 80013fc:	a201      	add	r2, pc, #4	; (adr r2, 8001404 <setSpeed+0x20>)
 80013fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001402:	bf00      	nop
 8001404:	08001439 	.word	0x08001439
 8001408:	08001489 	.word	0x08001489
 800140c:	08001489 	.word	0x08001489
 8001410:	08001489 	.word	0x08001489
 8001414:	0800144d 	.word	0x0800144d
 8001418:	08001489 	.word	0x08001489
 800141c:	08001489 	.word	0x08001489
 8001420:	08001489 	.word	0x08001489
 8001424:	08001461 	.word	0x08001461
 8001428:	08001489 	.word	0x08001489
 800142c:	08001489 	.word	0x08001489
 8001430:	08001489 	.word	0x08001489
 8001434:	08001475 	.word	0x08001475
		case TIM_CHANNEL_1:{
			stepper->Timer->Instance->CCR1=1000000/(2*speed);
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	005a      	lsls	r2, r3, #1
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4919      	ldr	r1, [pc, #100]	; (80014a8 <setSpeed+0xc4>)
 8001444:	fbb1 f2f2 	udiv	r2, r1, r2
 8001448:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 800144a:	e01d      	b.n	8001488 <setSpeed+0xa4>
		}
		case TIM_CHANNEL_2:{
			stepper->Timer->Instance->CCR2=1000000/(2*speed);
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	005a      	lsls	r2, r3, #1
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4914      	ldr	r1, [pc, #80]	; (80014a8 <setSpeed+0xc4>)
 8001458:	fbb1 f2f2 	udiv	r2, r1, r2
 800145c:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 800145e:	e013      	b.n	8001488 <setSpeed+0xa4>
		}
		case TIM_CHANNEL_3:{
			stepper->Timer->Instance->CCR3=1000000/(2*speed);
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	005a      	lsls	r2, r3, #1
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	490f      	ldr	r1, [pc, #60]	; (80014a8 <setSpeed+0xc4>)
 800146c:	fbb1 f2f2 	udiv	r2, r1, r2
 8001470:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8001472:	e009      	b.n	8001488 <setSpeed+0xa4>
		}
		case TIM_CHANNEL_4:{
			stepper->Timer->Instance->CCR4=1000000/(2*speed);
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	005a      	lsls	r2, r3, #1
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	490a      	ldr	r1, [pc, #40]	; (80014a8 <setSpeed+0xc4>)
 8001480:	fbb1 f2f2 	udiv	r2, r1, r2
 8001484:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8001486:	bf00      	nop
		}
	}

	//set timer period
	stepper->Timer->Instance->ARR=(1000000/speed)-1;
 8001488:	4a07      	ldr	r2, [pc, #28]	; (80014a8 <setSpeed+0xc4>)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	3a01      	subs	r2, #1
 8001498:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	000f4240 	.word	0x000f4240

080014ac <setDirection>:

//set direction
void setDirection(stepper *stepper){
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
	if(stepper->CurrentPosition > stepper->TargetPosition){
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80014ba:	6879      	ldr	r1, [r7, #4]
 80014bc:	e9d1 010a 	ldrd	r0, r1, [r1, #40]	; 0x28
 80014c0:	4290      	cmp	r0, r2
 80014c2:	eb71 0303 	sbcs.w	r3, r1, r3
 80014c6:	d20c      	bcs.n	80014e2 <setDirection+0x36>
		HAL_GPIO_WritePin(stepper->DIRPort, stepper->DIRPin, SET);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6898      	ldr	r0, [r3, #8]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	899b      	ldrh	r3, [r3, #12]
 80014d0:	2201      	movs	r2, #1
 80014d2:	4619      	mov	r1, r3
 80014d4:	f000 fec8 	bl	8002268 <HAL_GPIO_WritePin>
		stepper->Status = RunningBackward;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2202      	movs	r2, #2
 80014dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	}
	else if(stepper->CurrentPosition < stepper->TargetPosition){
		HAL_GPIO_WritePin(stepper->DIRPort, stepper->DIRPin, RESET);
		stepper->Status = RunningForward;
	}
}
 80014e0:	e015      	b.n	800150e <setDirection+0x62>
	else if(stepper->CurrentPosition < stepper->TargetPosition){
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80014ee:	4290      	cmp	r0, r2
 80014f0:	eb71 0303 	sbcs.w	r3, r1, r3
 80014f4:	d20b      	bcs.n	800150e <setDirection+0x62>
		HAL_GPIO_WritePin(stepper->DIRPort, stepper->DIRPin, RESET);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6898      	ldr	r0, [r3, #8]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	899b      	ldrh	r3, [r3, #12]
 80014fe:	2200      	movs	r2, #0
 8001500:	4619      	mov	r1, r3
 8001502:	f000 feb1 	bl	8002268 <HAL_GPIO_WritePin>
		stepper->Status = RunningForward;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2201      	movs	r2, #1
 800150a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <stopStepper>:

void stopStepper(stepper *stepper){
 8001516:	b580      	push	{r7, lr}
 8001518:	b082      	sub	sp, #8
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(stepper->Timer, stepper->Channel);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	4619      	mov	r1, r3
 8001528:	4610      	mov	r0, r2
 800152a:	f003 fc07 	bl	8004d3c <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop(stepper->Timer);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4618      	mov	r0, r3
 8001534:	f003 fa74 	bl	8004a20 <HAL_TIM_Base_Stop>
	stepper->Status = Stopped;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2203      	movs	r2, #3
 800153c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	stepper->TargetPosition = stepper->CurrentPosition;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001546:	6879      	ldr	r1, [r7, #4]
 8001548:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 800154c:	bf00      	nop
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <zeroStepper>:

void zeroStepper(stepper *stepper){
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
	stopStepper(stepper);
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7ff ffda 	bl	8001516 <stopStepper>
	stepper->CurrentPosition = 0;
 8001562:	6879      	ldr	r1, [r7, #4]
 8001564:	f04f 0200 	mov.w	r2, #0
 8001568:	f04f 0300 	mov.w	r3, #0
 800156c:	e9c1 2308 	strd	r2, r3, [r1, #32]
	stepper->TargetPosition = 0;
 8001570:	6879      	ldr	r1, [r7, #4]
 8001572:	f04f 0200 	mov.w	r2, #0
 8001576:	f04f 0300 	mov.w	r3, #0
 800157a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
	...

08001588 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158e:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <HAL_MspInit+0x44>)
 8001590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001592:	4a0e      	ldr	r2, [pc, #56]	; (80015cc <HAL_MspInit+0x44>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	6613      	str	r3, [r2, #96]	; 0x60
 800159a:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <HAL_MspInit+0x44>)
 800159c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a6:	4b09      	ldr	r3, [pc, #36]	; (80015cc <HAL_MspInit+0x44>)
 80015a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015aa:	4a08      	ldr	r2, [pc, #32]	; (80015cc <HAL_MspInit+0x44>)
 80015ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b0:	6593      	str	r3, [r2, #88]	; 0x58
 80015b2:	4b06      	ldr	r3, [pc, #24]	; (80015cc <HAL_MspInit+0x44>)
 80015b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ba:	603b      	str	r3, [r7, #0]
 80015bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	40021000 	.word	0x40021000

080015d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b0b0      	sub	sp, #192	; 0xc0
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	2298      	movs	r2, #152	; 0x98
 80015ee:	2100      	movs	r1, #0
 80015f0:	4618      	mov	r0, r3
 80015f2:	f00b fcdb 	bl	800cfac <memset>
  if(hi2c->Instance==I2C2)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a21      	ldr	r2, [pc, #132]	; (8001680 <HAL_I2C_MspInit+0xb0>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d13a      	bne.n	8001676 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001600:	2380      	movs	r3, #128	; 0x80
 8001602:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001604:	2300      	movs	r3, #0
 8001606:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	4618      	mov	r0, r3
 800160e:	f002 fbf3 	bl	8003df8 <HAL_RCCEx_PeriphCLKConfig>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001618:	f7ff fe08 	bl	800122c <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800161c:	4b19      	ldr	r3, [pc, #100]	; (8001684 <HAL_I2C_MspInit+0xb4>)
 800161e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001620:	4a18      	ldr	r2, [pc, #96]	; (8001684 <HAL_I2C_MspInit+0xb4>)
 8001622:	f043 0320 	orr.w	r3, r3, #32
 8001626:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001628:	4b16      	ldr	r3, [pc, #88]	; (8001684 <HAL_I2C_MspInit+0xb4>)
 800162a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162c:	f003 0320 	and.w	r3, r3, #32
 8001630:	613b      	str	r3, [r7, #16]
 8001632:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001634:	2303      	movs	r3, #3
 8001636:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800163a:	2312      	movs	r3, #18
 800163c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001646:	2303      	movs	r3, #3
 8001648:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800164c:	2304      	movs	r3, #4
 800164e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001652:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001656:	4619      	mov	r1, r3
 8001658:	480b      	ldr	r0, [pc, #44]	; (8001688 <HAL_I2C_MspInit+0xb8>)
 800165a:	f000 fc73 	bl	8001f44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800165e:	4b09      	ldr	r3, [pc, #36]	; (8001684 <HAL_I2C_MspInit+0xb4>)
 8001660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001662:	4a08      	ldr	r2, [pc, #32]	; (8001684 <HAL_I2C_MspInit+0xb4>)
 8001664:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001668:	6593      	str	r3, [r2, #88]	; 0x58
 800166a:	4b06      	ldr	r3, [pc, #24]	; (8001684 <HAL_I2C_MspInit+0xb4>)
 800166c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001676:	bf00      	nop
 8001678:	37c0      	adds	r7, #192	; 0xc0
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40005800 	.word	0x40005800
 8001684:	40021000 	.word	0x40021000
 8001688:	48001400 	.word	0x48001400

0800168c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b0b0      	sub	sp, #192	; 0xc0
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001694:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	2298      	movs	r2, #152	; 0x98
 80016aa:	2100      	movs	r1, #0
 80016ac:	4618      	mov	r0, r3
 80016ae:	f00b fc7d 	bl	800cfac <memset>
  if(huart->Instance==LPUART1)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a26      	ldr	r2, [pc, #152]	; (8001750 <HAL_UART_MspInit+0xc4>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d145      	bne.n	8001748 <HAL_UART_MspInit+0xbc>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80016bc:	2320      	movs	r3, #32
 80016be:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80016c0:	2300      	movs	r3, #0
 80016c2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016c4:	f107 0314 	add.w	r3, r7, #20
 80016c8:	4618      	mov	r0, r3
 80016ca:	f002 fb95 	bl	8003df8 <HAL_RCCEx_PeriphCLKConfig>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016d4:	f7ff fdaa 	bl	800122c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80016d8:	4b1e      	ldr	r3, [pc, #120]	; (8001754 <HAL_UART_MspInit+0xc8>)
 80016da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016dc:	4a1d      	ldr	r2, [pc, #116]	; (8001754 <HAL_UART_MspInit+0xc8>)
 80016de:	f043 0301 	orr.w	r3, r3, #1
 80016e2:	65d3      	str	r3, [r2, #92]	; 0x5c
 80016e4:	4b1b      	ldr	r3, [pc, #108]	; (8001754 <HAL_UART_MspInit+0xc8>)
 80016e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	613b      	str	r3, [r7, #16]
 80016ee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80016f0:	4b18      	ldr	r3, [pc, #96]	; (8001754 <HAL_UART_MspInit+0xc8>)
 80016f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f4:	4a17      	ldr	r2, [pc, #92]	; (8001754 <HAL_UART_MspInit+0xc8>)
 80016f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016fc:	4b15      	ldr	r3, [pc, #84]	; (8001754 <HAL_UART_MspInit+0xc8>)
 80016fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8001708:	f001 fc2c 	bl	8002f64 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800170c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001710:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001714:	2302      	movs	r3, #2
 8001716:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001720:	2303      	movs	r3, #3
 8001722:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001726:	2308      	movs	r3, #8
 8001728:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800172c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001730:	4619      	mov	r1, r3
 8001732:	4809      	ldr	r0, [pc, #36]	; (8001758 <HAL_UART_MspInit+0xcc>)
 8001734:	f000 fc06 	bl	8001f44 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001738:	2200      	movs	r2, #0
 800173a:	2100      	movs	r1, #0
 800173c:	2046      	movs	r0, #70	; 0x46
 800173e:	f000 fb10 	bl	8001d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001742:	2046      	movs	r0, #70	; 0x46
 8001744:	f000 fb29 	bl	8001d9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001748:	bf00      	nop
 800174a:	37c0      	adds	r7, #192	; 0xc0
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40008000 	.word	0x40008000
 8001754:	40021000 	.word	0x40021000
 8001758:	48001800 	.word	0x48001800

0800175c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800176c:	d114      	bne.n	8001798 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800176e:	4b2f      	ldr	r3, [pc, #188]	; (800182c <HAL_TIM_Base_MspInit+0xd0>)
 8001770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001772:	4a2e      	ldr	r2, [pc, #184]	; (800182c <HAL_TIM_Base_MspInit+0xd0>)
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	6593      	str	r3, [r2, #88]	; 0x58
 800177a:	4b2c      	ldr	r3, [pc, #176]	; (800182c <HAL_TIM_Base_MspInit+0xd0>)
 800177c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	617b      	str	r3, [r7, #20]
 8001784:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001786:	2200      	movs	r2, #0
 8001788:	2100      	movs	r1, #0
 800178a:	201c      	movs	r0, #28
 800178c:	f000 fae9 	bl	8001d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001790:	201c      	movs	r0, #28
 8001792:	f000 fb02 	bl	8001d9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001796:	e044      	b.n	8001822 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM3)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a24      	ldr	r2, [pc, #144]	; (8001830 <HAL_TIM_Base_MspInit+0xd4>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d114      	bne.n	80017cc <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017a2:	4b22      	ldr	r3, [pc, #136]	; (800182c <HAL_TIM_Base_MspInit+0xd0>)
 80017a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a6:	4a21      	ldr	r2, [pc, #132]	; (800182c <HAL_TIM_Base_MspInit+0xd0>)
 80017a8:	f043 0302 	orr.w	r3, r3, #2
 80017ac:	6593      	str	r3, [r2, #88]	; 0x58
 80017ae:	4b1f      	ldr	r3, [pc, #124]	; (800182c <HAL_TIM_Base_MspInit+0xd0>)
 80017b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	613b      	str	r3, [r7, #16]
 80017b8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80017ba:	2200      	movs	r2, #0
 80017bc:	2100      	movs	r1, #0
 80017be:	201d      	movs	r0, #29
 80017c0:	f000 facf 	bl	8001d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80017c4:	201d      	movs	r0, #29
 80017c6:	f000 fae8 	bl	8001d9a <HAL_NVIC_EnableIRQ>
}
 80017ca:	e02a      	b.n	8001822 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM4)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a18      	ldr	r2, [pc, #96]	; (8001834 <HAL_TIM_Base_MspInit+0xd8>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d114      	bne.n	8001800 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017d6:	4b15      	ldr	r3, [pc, #84]	; (800182c <HAL_TIM_Base_MspInit+0xd0>)
 80017d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017da:	4a14      	ldr	r2, [pc, #80]	; (800182c <HAL_TIM_Base_MspInit+0xd0>)
 80017dc:	f043 0304 	orr.w	r3, r3, #4
 80017e0:	6593      	str	r3, [r2, #88]	; 0x58
 80017e2:	4b12      	ldr	r3, [pc, #72]	; (800182c <HAL_TIM_Base_MspInit+0xd0>)
 80017e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e6:	f003 0304 	and.w	r3, r3, #4
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80017ee:	2200      	movs	r2, #0
 80017f0:	2100      	movs	r1, #0
 80017f2:	201e      	movs	r0, #30
 80017f4:	f000 fab5 	bl	8001d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80017f8:	201e      	movs	r0, #30
 80017fa:	f000 face 	bl	8001d9a <HAL_NVIC_EnableIRQ>
}
 80017fe:	e010      	b.n	8001822 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM5)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a0c      	ldr	r2, [pc, #48]	; (8001838 <HAL_TIM_Base_MspInit+0xdc>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d10b      	bne.n	8001822 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800180a:	4b08      	ldr	r3, [pc, #32]	; (800182c <HAL_TIM_Base_MspInit+0xd0>)
 800180c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180e:	4a07      	ldr	r2, [pc, #28]	; (800182c <HAL_TIM_Base_MspInit+0xd0>)
 8001810:	f043 0308 	orr.w	r3, r3, #8
 8001814:	6593      	str	r3, [r2, #88]	; 0x58
 8001816:	4b05      	ldr	r3, [pc, #20]	; (800182c <HAL_TIM_Base_MspInit+0xd0>)
 8001818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181a:	f003 0308 	and.w	r3, r3, #8
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	68bb      	ldr	r3, [r7, #8]
}
 8001822:	bf00      	nop
 8001824:	3718      	adds	r7, #24
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40021000 	.word	0x40021000
 8001830:	40000400 	.word	0x40000400
 8001834:	40000800 	.word	0x40000800
 8001838:	40000c00 	.word	0x40000c00

0800183c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08a      	sub	sp, #40	; 0x28
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800185c:	d11d      	bne.n	800189a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800185e:	4b33      	ldr	r3, [pc, #204]	; (800192c <HAL_TIM_MspPostInit+0xf0>)
 8001860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001862:	4a32      	ldr	r2, [pc, #200]	; (800192c <HAL_TIM_MspPostInit+0xf0>)
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800186a:	4b30      	ldr	r3, [pc, #192]	; (800192c <HAL_TIM_MspPostInit+0xf0>)
 800186c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	613b      	str	r3, [r7, #16]
 8001874:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001876:	2301      	movs	r3, #1
 8001878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187a:	2302      	movs	r3, #2
 800187c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001882:	2300      	movs	r3, #0
 8001884:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001886:	2301      	movs	r3, #1
 8001888:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188a:	f107 0314 	add.w	r3, r7, #20
 800188e:	4619      	mov	r1, r3
 8001890:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001894:	f000 fb56 	bl	8001f44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001898:	e043      	b.n	8001922 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM3)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a24      	ldr	r2, [pc, #144]	; (8001930 <HAL_TIM_MspPostInit+0xf4>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d11c      	bne.n	80018de <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018a4:	4b21      	ldr	r3, [pc, #132]	; (800192c <HAL_TIM_MspPostInit+0xf0>)
 80018a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a8:	4a20      	ldr	r2, [pc, #128]	; (800192c <HAL_TIM_MspPostInit+0xf0>)
 80018aa:	f043 0310 	orr.w	r3, r3, #16
 80018ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018b0:	4b1e      	ldr	r3, [pc, #120]	; (800192c <HAL_TIM_MspPostInit+0xf0>)
 80018b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b4:	f003 0310 	and.w	r3, r3, #16
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80018bc:	2308      	movs	r3, #8
 80018be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c0:	2302      	movs	r3, #2
 80018c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c8:	2300      	movs	r3, #0
 80018ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018cc:	2302      	movs	r3, #2
 80018ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018d0:	f107 0314 	add.w	r3, r7, #20
 80018d4:	4619      	mov	r1, r3
 80018d6:	4817      	ldr	r0, [pc, #92]	; (8001934 <HAL_TIM_MspPostInit+0xf8>)
 80018d8:	f000 fb34 	bl	8001f44 <HAL_GPIO_Init>
}
 80018dc:	e021      	b.n	8001922 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM4)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a15      	ldr	r2, [pc, #84]	; (8001938 <HAL_TIM_MspPostInit+0xfc>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d11c      	bne.n	8001922 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018e8:	4b10      	ldr	r3, [pc, #64]	; (800192c <HAL_TIM_MspPostInit+0xf0>)
 80018ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ec:	4a0f      	ldr	r2, [pc, #60]	; (800192c <HAL_TIM_MspPostInit+0xf0>)
 80018ee:	f043 0308 	orr.w	r3, r3, #8
 80018f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018f4:	4b0d      	ldr	r3, [pc, #52]	; (800192c <HAL_TIM_MspPostInit+0xf0>)
 80018f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f8:	f003 0308 	and.w	r3, r3, #8
 80018fc:	60bb      	str	r3, [r7, #8]
 80018fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001900:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001904:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001906:	2302      	movs	r3, #2
 8001908:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	2300      	movs	r3, #0
 800190c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190e:	2300      	movs	r3, #0
 8001910:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001912:	2302      	movs	r3, #2
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001916:	f107 0314 	add.w	r3, r7, #20
 800191a:	4619      	mov	r1, r3
 800191c:	4807      	ldr	r0, [pc, #28]	; (800193c <HAL_TIM_MspPostInit+0x100>)
 800191e:	f000 fb11 	bl	8001f44 <HAL_GPIO_Init>
}
 8001922:	bf00      	nop
 8001924:	3728      	adds	r7, #40	; 0x28
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40021000 	.word	0x40021000
 8001930:	40000400 	.word	0x40000400
 8001934:	48001000 	.word	0x48001000
 8001938:	40000800 	.word	0x40000800
 800193c:	48000c00 	.word	0x48000c00

08001940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001944:	e7fe      	b.n	8001944 <NMI_Handler+0x4>

08001946 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800194a:	e7fe      	b.n	800194a <HardFault_Handler+0x4>

0800194c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001950:	e7fe      	b.n	8001950 <MemManage_Handler+0x4>

08001952 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001952:	b480      	push	{r7}
 8001954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001956:	e7fe      	b.n	8001956 <BusFault_Handler+0x4>

08001958 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800195c:	e7fe      	b.n	800195c <UsageFault_Handler+0x4>

0800195e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800198c:	f000 f8ca 	bl	8001b24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001990:	bf00      	nop
 8001992:	bd80      	pop	{r7, pc}

08001994 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001998:	4802      	ldr	r0, [pc, #8]	; (80019a4 <TIM2_IRQHandler+0x10>)
 800199a:	f003 fa65 	bl	8004e68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	200003d0 	.word	0x200003d0

080019a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019ac:	4802      	ldr	r0, [pc, #8]	; (80019b8 <TIM3_IRQHandler+0x10>)
 80019ae:	f003 fa5b 	bl	8004e68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	2000041c 	.word	0x2000041c

080019bc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80019c0:	4802      	ldr	r0, [pc, #8]	; (80019cc <TIM4_IRQHandler+0x10>)
 80019c2:	f003 fa51 	bl	8004e68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000468 	.word	0x20000468

080019d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(thLim_Pin);
 80019d4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80019d8:	f000 fc5e 	bl	8002298 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(yLim_Pin);
 80019dc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80019e0:	f000 fc5a 	bl	8002298 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(rLim_Pin);
 80019e4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80019e8:	f000 fc56 	bl	8002298 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019ec:	bf00      	nop
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80019f4:	4802      	ldr	r0, [pc, #8]	; (8001a00 <LPUART1_IRQHandler+0x10>)
 80019f6:	f004 fb6f 	bl	80060d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000340 	.word	0x20000340

08001a04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <SystemInit+0x20>)
 8001a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a0e:	4a05      	ldr	r2, [pc, #20]	; (8001a24 <SystemInit+0x20>)
 8001a10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <Reset_Handler>:
    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

  ldr   sp, =_estack    /* Set stack pointer */
 8001a28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a60 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a2c:	f7ff ffea 	bl	8001a04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a30:	480c      	ldr	r0, [pc, #48]	; (8001a64 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a32:	490d      	ldr	r1, [pc, #52]	; (8001a68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a34:	4a0d      	ldr	r2, [pc, #52]	; (8001a6c <LoopForever+0xe>)
  movs r3, #0
 8001a36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a38:	e002      	b.n	8001a40 <LoopCopyDataInit>

08001a3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a3e:	3304      	adds	r3, #4

08001a40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a44:	d3f9      	bcc.n	8001a3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a46:	4a0a      	ldr	r2, [pc, #40]	; (8001a70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a48:	4c0a      	ldr	r4, [pc, #40]	; (8001a74 <LoopForever+0x16>)
  movs r3, #0
 8001a4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a4c:	e001      	b.n	8001a52 <LoopFillZerobss>

08001a4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a50:	3204      	adds	r2, #4

08001a52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a54:	d3fb      	bcc.n	8001a4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a56:	f00b fa77 	bl	800cf48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a5a:	f7fe fd51 	bl	8000500 <main>

08001a5e <LoopForever>:

LoopForever:
    b LoopForever
 8001a5e:	e7fe      	b.n	8001a5e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a60:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001a64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a68:	200002cc 	.word	0x200002cc
  ldr r2, =_sidata
 8001a6c:	0800d064 	.word	0x0800d064
  ldr r2, =_sbss
 8001a70:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 8001a74:	200007c4 	.word	0x200007c4

08001a78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a78:	e7fe      	b.n	8001a78 <ADC1_2_IRQHandler>

08001a7a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b082      	sub	sp, #8
 8001a7e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a80:	2300      	movs	r3, #0
 8001a82:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a84:	2003      	movs	r0, #3
 8001a86:	f000 f961 	bl	8001d4c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a8a:	200f      	movs	r0, #15
 8001a8c:	f000 f80e 	bl	8001aac <HAL_InitTick>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d002      	beq.n	8001a9c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	71fb      	strb	r3, [r7, #7]
 8001a9a:	e001      	b.n	8001aa0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a9c:	f7ff fd74 	bl	8001588 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
	...

08001aac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ab8:	4b17      	ldr	r3, [pc, #92]	; (8001b18 <HAL_InitTick+0x6c>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d023      	beq.n	8001b08 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ac0:	4b16      	ldr	r3, [pc, #88]	; (8001b1c <HAL_InitTick+0x70>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	4b14      	ldr	r3, [pc, #80]	; (8001b18 <HAL_InitTick+0x6c>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ace:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f000 f96d 	bl	8001db6 <HAL_SYSTICK_Config>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10f      	bne.n	8001b02 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2b0f      	cmp	r3, #15
 8001ae6:	d809      	bhi.n	8001afc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ae8:	2200      	movs	r2, #0
 8001aea:	6879      	ldr	r1, [r7, #4]
 8001aec:	f04f 30ff 	mov.w	r0, #4294967295
 8001af0:	f000 f937 	bl	8001d62 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001af4:	4a0a      	ldr	r2, [pc, #40]	; (8001b20 <HAL_InitTick+0x74>)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	e007      	b.n	8001b0c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	73fb      	strb	r3, [r7, #15]
 8001b00:	e004      	b.n	8001b0c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	73fb      	strb	r3, [r7, #15]
 8001b06:	e001      	b.n	8001b0c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	2000000c 	.word	0x2000000c
 8001b1c:	20000004 	.word	0x20000004
 8001b20:	20000008 	.word	0x20000008

08001b24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b28:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <HAL_IncTick+0x20>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <HAL_IncTick+0x24>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4413      	add	r3, r2
 8001b34:	4a04      	ldr	r2, [pc, #16]	; (8001b48 <HAL_IncTick+0x24>)
 8001b36:	6013      	str	r3, [r2, #0]
}
 8001b38:	bf00      	nop
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	2000000c 	.word	0x2000000c
 8001b48:	20000780 	.word	0x20000780

08001b4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b50:	4b03      	ldr	r3, [pc, #12]	; (8001b60 <HAL_GetTick+0x14>)
 8001b52:	681b      	ldr	r3, [r3, #0]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	20000780 	.word	0x20000780

08001b64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b6c:	f7ff ffee 	bl	8001b4c <HAL_GetTick>
 8001b70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b7c:	d005      	beq.n	8001b8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001b7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ba8 <HAL_Delay+0x44>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	461a      	mov	r2, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	4413      	add	r3, r2
 8001b88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b8a:	bf00      	nop
 8001b8c:	f7ff ffde 	bl	8001b4c <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d8f7      	bhi.n	8001b8c <HAL_Delay+0x28>
  {
  }
}
 8001b9c:	bf00      	nop
 8001b9e:	bf00      	nop
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	2000000c 	.word	0x2000000c

08001bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bc2:	68ba      	ldr	r2, [r7, #8]
 8001bc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bc8:	4013      	ands	r3, r2
 8001bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bde:	4a04      	ldr	r2, [pc, #16]	; (8001bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	60d3      	str	r3, [r2, #12]
}
 8001be4:	bf00      	nop
 8001be6:	3714      	adds	r7, #20
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bf8:	4b04      	ldr	r3, [pc, #16]	; (8001c0c <__NVIC_GetPriorityGrouping+0x18>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	0a1b      	lsrs	r3, r3, #8
 8001bfe:	f003 0307 	and.w	r3, r3, #7
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	db0b      	blt.n	8001c3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c22:	79fb      	ldrb	r3, [r7, #7]
 8001c24:	f003 021f 	and.w	r2, r3, #31
 8001c28:	4907      	ldr	r1, [pc, #28]	; (8001c48 <__NVIC_EnableIRQ+0x38>)
 8001c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2e:	095b      	lsrs	r3, r3, #5
 8001c30:	2001      	movs	r0, #1
 8001c32:	fa00 f202 	lsl.w	r2, r0, r2
 8001c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	e000e100 	.word	0xe000e100

08001c4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	6039      	str	r1, [r7, #0]
 8001c56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	db0a      	blt.n	8001c76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	490c      	ldr	r1, [pc, #48]	; (8001c98 <__NVIC_SetPriority+0x4c>)
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	0112      	lsls	r2, r2, #4
 8001c6c:	b2d2      	uxtb	r2, r2
 8001c6e:	440b      	add	r3, r1
 8001c70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c74:	e00a      	b.n	8001c8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	4908      	ldr	r1, [pc, #32]	; (8001c9c <__NVIC_SetPriority+0x50>)
 8001c7c:	79fb      	ldrb	r3, [r7, #7]
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	3b04      	subs	r3, #4
 8001c84:	0112      	lsls	r2, r2, #4
 8001c86:	b2d2      	uxtb	r2, r2
 8001c88:	440b      	add	r3, r1
 8001c8a:	761a      	strb	r2, [r3, #24]
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	e000e100 	.word	0xe000e100
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b089      	sub	sp, #36	; 0x24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	f1c3 0307 	rsb	r3, r3, #7
 8001cba:	2b04      	cmp	r3, #4
 8001cbc:	bf28      	it	cs
 8001cbe:	2304      	movcs	r3, #4
 8001cc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	2b06      	cmp	r3, #6
 8001cc8:	d902      	bls.n	8001cd0 <NVIC_EncodePriority+0x30>
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	3b03      	subs	r3, #3
 8001cce:	e000      	b.n	8001cd2 <NVIC_EncodePriority+0x32>
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	43da      	mvns	r2, r3
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	401a      	ands	r2, r3
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf2:	43d9      	mvns	r1, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf8:	4313      	orrs	r3, r2
         );
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3724      	adds	r7, #36	; 0x24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
	...

08001d08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	3b01      	subs	r3, #1
 8001d14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d18:	d301      	bcc.n	8001d1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e00f      	b.n	8001d3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d1e:	4a0a      	ldr	r2, [pc, #40]	; (8001d48 <SysTick_Config+0x40>)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3b01      	subs	r3, #1
 8001d24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d26:	210f      	movs	r1, #15
 8001d28:	f04f 30ff 	mov.w	r0, #4294967295
 8001d2c:	f7ff ff8e 	bl	8001c4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d30:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <SysTick_Config+0x40>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d36:	4b04      	ldr	r3, [pc, #16]	; (8001d48 <SysTick_Config+0x40>)
 8001d38:	2207      	movs	r2, #7
 8001d3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	e000e010 	.word	0xe000e010

08001d4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f7ff ff29 	bl	8001bac <__NVIC_SetPriorityGrouping>
}
 8001d5a:	bf00      	nop
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b086      	sub	sp, #24
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	4603      	mov	r3, r0
 8001d6a:	60b9      	str	r1, [r7, #8]
 8001d6c:	607a      	str	r2, [r7, #4]
 8001d6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d74:	f7ff ff3e 	bl	8001bf4 <__NVIC_GetPriorityGrouping>
 8001d78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	68b9      	ldr	r1, [r7, #8]
 8001d7e:	6978      	ldr	r0, [r7, #20]
 8001d80:	f7ff ff8e 	bl	8001ca0 <NVIC_EncodePriority>
 8001d84:	4602      	mov	r2, r0
 8001d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d8a:	4611      	mov	r1, r2
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff ff5d 	bl	8001c4c <__NVIC_SetPriority>
}
 8001d92:	bf00      	nop
 8001d94:	3718      	adds	r7, #24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	4603      	mov	r3, r0
 8001da2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff ff31 	bl	8001c10 <__NVIC_EnableIRQ>
}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b082      	sub	sp, #8
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7ff ffa2 	bl	8001d08 <SysTick_Config>
 8001dc4:	4603      	mov	r3, r0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b085      	sub	sp, #20
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d008      	beq.n	8001df8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2204      	movs	r2, #4
 8001dea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e040      	b.n	8001e7a <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f022 020e 	bic.w	r2, r2, #14
 8001e06:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e16:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 0201 	bic.w	r2, r2, #1
 8001e26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2c:	f003 021c 	and.w	r2, r3, #28
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e34:	2101      	movs	r1, #1
 8001e36:	fa01 f202 	lsl.w	r2, r1, r2
 8001e3a:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001e44:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00c      	beq.n	8001e68 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e5c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001e66:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001e78:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3714      	adds	r7, #20
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b084      	sub	sp, #16
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d005      	beq.n	8001eaa <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2204      	movs	r2, #4
 8001ea2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	73fb      	strb	r3, [r7, #15]
 8001ea8:	e047      	b.n	8001f3a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 020e 	bic.w	r2, r2, #14
 8001eb8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 0201 	bic.w	r2, r2, #1
 8001ec8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ed4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ed8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ede:	f003 021c 	and.w	r2, r3, #28
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	fa01 f202 	lsl.w	r2, r1, r2
 8001eec:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001ef6:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d00c      	beq.n	8001f1a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f0e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001f18:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	4798      	blx	r3
    }
  }
  return status;
 8001f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b087      	sub	sp, #28
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f52:	e166      	b.n	8002222 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	2101      	movs	r1, #1
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f60:	4013      	ands	r3, r2
 8001f62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f000 8158 	beq.w	800221c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f003 0303 	and.w	r3, r3, #3
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d005      	beq.n	8001f84 <HAL_GPIO_Init+0x40>
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f003 0303 	and.w	r3, r3, #3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d130      	bne.n	8001fe6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	2203      	movs	r2, #3
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	68da      	ldr	r2, [r3, #12]
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fba:	2201      	movs	r2, #1
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	091b      	lsrs	r3, r3, #4
 8001fd0:	f003 0201 	and.w	r2, r3, #1
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	2b03      	cmp	r3, #3
 8001ff0:	d017      	beq.n	8002022 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	2203      	movs	r2, #3
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	43db      	mvns	r3, r3
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	4013      	ands	r3, r2
 8002008:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	689a      	ldr	r2, [r3, #8]
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	4313      	orrs	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f003 0303 	and.w	r3, r3, #3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d123      	bne.n	8002076 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	08da      	lsrs	r2, r3, #3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	3208      	adds	r2, #8
 8002036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800203a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	220f      	movs	r2, #15
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	43db      	mvns	r3, r3
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	4013      	ands	r3, r2
 8002050:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	691a      	ldr	r2, [r3, #16]
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	f003 0307 	and.w	r3, r3, #7
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	4313      	orrs	r3, r2
 8002066:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	08da      	lsrs	r2, r3, #3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3208      	adds	r2, #8
 8002070:	6939      	ldr	r1, [r7, #16]
 8002072:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	2203      	movs	r2, #3
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43db      	mvns	r3, r3
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	4013      	ands	r3, r2
 800208c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f003 0203 	and.w	r2, r3, #3
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f000 80b2 	beq.w	800221c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020b8:	4b61      	ldr	r3, [pc, #388]	; (8002240 <HAL_GPIO_Init+0x2fc>)
 80020ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020bc:	4a60      	ldr	r2, [pc, #384]	; (8002240 <HAL_GPIO_Init+0x2fc>)
 80020be:	f043 0301 	orr.w	r3, r3, #1
 80020c2:	6613      	str	r3, [r2, #96]	; 0x60
 80020c4:	4b5e      	ldr	r3, [pc, #376]	; (8002240 <HAL_GPIO_Init+0x2fc>)
 80020c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	60bb      	str	r3, [r7, #8]
 80020ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80020d0:	4a5c      	ldr	r2, [pc, #368]	; (8002244 <HAL_GPIO_Init+0x300>)
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	089b      	lsrs	r3, r3, #2
 80020d6:	3302      	adds	r3, #2
 80020d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	f003 0303 	and.w	r3, r3, #3
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	220f      	movs	r2, #15
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	43db      	mvns	r3, r3
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	4013      	ands	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80020fa:	d02b      	beq.n	8002154 <HAL_GPIO_Init+0x210>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a52      	ldr	r2, [pc, #328]	; (8002248 <HAL_GPIO_Init+0x304>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d025      	beq.n	8002150 <HAL_GPIO_Init+0x20c>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a51      	ldr	r2, [pc, #324]	; (800224c <HAL_GPIO_Init+0x308>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d01f      	beq.n	800214c <HAL_GPIO_Init+0x208>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a50      	ldr	r2, [pc, #320]	; (8002250 <HAL_GPIO_Init+0x30c>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d019      	beq.n	8002148 <HAL_GPIO_Init+0x204>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a4f      	ldr	r2, [pc, #316]	; (8002254 <HAL_GPIO_Init+0x310>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d013      	beq.n	8002144 <HAL_GPIO_Init+0x200>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a4e      	ldr	r2, [pc, #312]	; (8002258 <HAL_GPIO_Init+0x314>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d00d      	beq.n	8002140 <HAL_GPIO_Init+0x1fc>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a4d      	ldr	r2, [pc, #308]	; (800225c <HAL_GPIO_Init+0x318>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d007      	beq.n	800213c <HAL_GPIO_Init+0x1f8>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a4c      	ldr	r2, [pc, #304]	; (8002260 <HAL_GPIO_Init+0x31c>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d101      	bne.n	8002138 <HAL_GPIO_Init+0x1f4>
 8002134:	2307      	movs	r3, #7
 8002136:	e00e      	b.n	8002156 <HAL_GPIO_Init+0x212>
 8002138:	2308      	movs	r3, #8
 800213a:	e00c      	b.n	8002156 <HAL_GPIO_Init+0x212>
 800213c:	2306      	movs	r3, #6
 800213e:	e00a      	b.n	8002156 <HAL_GPIO_Init+0x212>
 8002140:	2305      	movs	r3, #5
 8002142:	e008      	b.n	8002156 <HAL_GPIO_Init+0x212>
 8002144:	2304      	movs	r3, #4
 8002146:	e006      	b.n	8002156 <HAL_GPIO_Init+0x212>
 8002148:	2303      	movs	r3, #3
 800214a:	e004      	b.n	8002156 <HAL_GPIO_Init+0x212>
 800214c:	2302      	movs	r3, #2
 800214e:	e002      	b.n	8002156 <HAL_GPIO_Init+0x212>
 8002150:	2301      	movs	r3, #1
 8002152:	e000      	b.n	8002156 <HAL_GPIO_Init+0x212>
 8002154:	2300      	movs	r3, #0
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	f002 0203 	and.w	r2, r2, #3
 800215c:	0092      	lsls	r2, r2, #2
 800215e:	4093      	lsls	r3, r2
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	4313      	orrs	r3, r2
 8002164:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002166:	4937      	ldr	r1, [pc, #220]	; (8002244 <HAL_GPIO_Init+0x300>)
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	089b      	lsrs	r3, r3, #2
 800216c:	3302      	adds	r3, #2
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002174:	4b3b      	ldr	r3, [pc, #236]	; (8002264 <HAL_GPIO_Init+0x320>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	43db      	mvns	r3, r3
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	4013      	ands	r3, r2
 8002182:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d003      	beq.n	8002198 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	4313      	orrs	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002198:	4a32      	ldr	r2, [pc, #200]	; (8002264 <HAL_GPIO_Init+0x320>)
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800219e:	4b31      	ldr	r3, [pc, #196]	; (8002264 <HAL_GPIO_Init+0x320>)
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	43db      	mvns	r3, r3
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	4013      	ands	r3, r2
 80021ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	4313      	orrs	r3, r2
 80021c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021c2:	4a28      	ldr	r2, [pc, #160]	; (8002264 <HAL_GPIO_Init+0x320>)
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80021c8:	4b26      	ldr	r3, [pc, #152]	; (8002264 <HAL_GPIO_Init+0x320>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	43db      	mvns	r3, r3
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	4013      	ands	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d003      	beq.n	80021ec <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80021ec:	4a1d      	ldr	r2, [pc, #116]	; (8002264 <HAL_GPIO_Init+0x320>)
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80021f2:	4b1c      	ldr	r3, [pc, #112]	; (8002264 <HAL_GPIO_Init+0x320>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	43db      	mvns	r3, r3
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	4013      	ands	r3, r2
 8002200:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	4313      	orrs	r3, r2
 8002214:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002216:	4a13      	ldr	r2, [pc, #76]	; (8002264 <HAL_GPIO_Init+0x320>)
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	3301      	adds	r3, #1
 8002220:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	fa22 f303 	lsr.w	r3, r2, r3
 800222c:	2b00      	cmp	r3, #0
 800222e:	f47f ae91 	bne.w	8001f54 <HAL_GPIO_Init+0x10>
  }
}
 8002232:	bf00      	nop
 8002234:	bf00      	nop
 8002236:	371c      	adds	r7, #28
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	40021000 	.word	0x40021000
 8002244:	40010000 	.word	0x40010000
 8002248:	48000400 	.word	0x48000400
 800224c:	48000800 	.word	0x48000800
 8002250:	48000c00 	.word	0x48000c00
 8002254:	48001000 	.word	0x48001000
 8002258:	48001400 	.word	0x48001400
 800225c:	48001800 	.word	0x48001800
 8002260:	48001c00 	.word	0x48001c00
 8002264:	40010400 	.word	0x40010400

08002268 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	460b      	mov	r3, r1
 8002272:	807b      	strh	r3, [r7, #2]
 8002274:	4613      	mov	r3, r2
 8002276:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002278:	787b      	ldrb	r3, [r7, #1]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800227e:	887a      	ldrh	r2, [r7, #2]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002284:	e002      	b.n	800228c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002286:	887a      	ldrh	r2, [r7, #2]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80022a2:	4b08      	ldr	r3, [pc, #32]	; (80022c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022a4:	695a      	ldr	r2, [r3, #20]
 80022a6:	88fb      	ldrh	r3, [r7, #6]
 80022a8:	4013      	ands	r3, r2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d006      	beq.n	80022bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022ae:	4a05      	ldr	r2, [pc, #20]	; (80022c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022b0:	88fb      	ldrh	r3, [r7, #6]
 80022b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022b4:	88fb      	ldrh	r3, [r7, #6]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7fe ff92 	bl	80011e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80022bc:	bf00      	nop
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40010400 	.word	0x40010400

080022c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d101      	bne.n	80022da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e081      	b.n	80023de <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d106      	bne.n	80022f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7ff f96e 	bl	80015d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2224      	movs	r2, #36	; 0x24
 80022f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f022 0201 	bic.w	r2, r2, #1
 800230a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685a      	ldr	r2, [r3, #4]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002318:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002328:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d107      	bne.n	8002342 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689a      	ldr	r2, [r3, #8]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800233e:	609a      	str	r2, [r3, #8]
 8002340:	e006      	b.n	8002350 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	689a      	ldr	r2, [r3, #8]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800234e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	2b02      	cmp	r3, #2
 8002356:	d104      	bne.n	8002362 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002360:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	6812      	ldr	r2, [r2, #0]
 800236c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002370:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002374:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68da      	ldr	r2, [r3, #12]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002384:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	691a      	ldr	r2, [r3, #16]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	430a      	orrs	r2, r1
 800239e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	69d9      	ldr	r1, [r3, #28]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a1a      	ldr	r2, [r3, #32]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	430a      	orrs	r2, r1
 80023ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f042 0201 	orr.w	r2, r2, #1
 80023be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2220      	movs	r2, #32
 80023ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
	...

080023e8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b088      	sub	sp, #32
 80023ec:	af02      	add	r7, sp, #8
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	607a      	str	r2, [r7, #4]
 80023f2:	461a      	mov	r2, r3
 80023f4:	460b      	mov	r3, r1
 80023f6:	817b      	strh	r3, [r7, #10]
 80023f8:	4613      	mov	r3, r2
 80023fa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002402:	b2db      	uxtb	r3, r3
 8002404:	2b20      	cmp	r3, #32
 8002406:	f040 80da 	bne.w	80025be <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002410:	2b01      	cmp	r3, #1
 8002412:	d101      	bne.n	8002418 <HAL_I2C_Master_Transmit+0x30>
 8002414:	2302      	movs	r3, #2
 8002416:	e0d3      	b.n	80025c0 <HAL_I2C_Master_Transmit+0x1d8>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002420:	f7ff fb94 	bl	8001b4c <HAL_GetTick>
 8002424:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	2319      	movs	r3, #25
 800242c:	2201      	movs	r2, #1
 800242e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f000 f9e6 	bl	8002804 <I2C_WaitOnFlagUntilTimeout>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e0be      	b.n	80025c0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2221      	movs	r2, #33	; 0x21
 8002446:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2210      	movs	r2, #16
 800244e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	893a      	ldrh	r2, [r7, #8]
 8002462:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2200      	movs	r2, #0
 8002468:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800246e:	b29b      	uxth	r3, r3
 8002470:	2bff      	cmp	r3, #255	; 0xff
 8002472:	d90e      	bls.n	8002492 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	22ff      	movs	r2, #255	; 0xff
 8002478:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800247e:	b2da      	uxtb	r2, r3
 8002480:	8979      	ldrh	r1, [r7, #10]
 8002482:	4b51      	ldr	r3, [pc, #324]	; (80025c8 <HAL_I2C_Master_Transmit+0x1e0>)
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f000 fbdc 	bl	8002c48 <I2C_TransferConfig>
 8002490:	e06c      	b.n	800256c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002496:	b29a      	uxth	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	8979      	ldrh	r1, [r7, #10]
 80024a4:	4b48      	ldr	r3, [pc, #288]	; (80025c8 <HAL_I2C_Master_Transmit+0x1e0>)
 80024a6:	9300      	str	r3, [sp, #0]
 80024a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024ac:	68f8      	ldr	r0, [r7, #12]
 80024ae:	f000 fbcb 	bl	8002c48 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80024b2:	e05b      	b.n	800256c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024b4:	697a      	ldr	r2, [r7, #20]
 80024b6:	6a39      	ldr	r1, [r7, #32]
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	f000 f9e3 	bl	8002884 <I2C_WaitOnTXISFlagUntilTimeout>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e07b      	b.n	80025c0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024cc:	781a      	ldrb	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d8:	1c5a      	adds	r2, r3, #1
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	3b01      	subs	r3, #1
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f0:	3b01      	subs	r3, #1
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d034      	beq.n	800256c <HAL_I2C_Master_Transmit+0x184>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002506:	2b00      	cmp	r3, #0
 8002508:	d130      	bne.n	800256c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	9300      	str	r3, [sp, #0]
 800250e:	6a3b      	ldr	r3, [r7, #32]
 8002510:	2200      	movs	r2, #0
 8002512:	2180      	movs	r1, #128	; 0x80
 8002514:	68f8      	ldr	r0, [r7, #12]
 8002516:	f000 f975 	bl	8002804 <I2C_WaitOnFlagUntilTimeout>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e04d      	b.n	80025c0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002528:	b29b      	uxth	r3, r3
 800252a:	2bff      	cmp	r3, #255	; 0xff
 800252c:	d90e      	bls.n	800254c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	22ff      	movs	r2, #255	; 0xff
 8002532:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002538:	b2da      	uxtb	r2, r3
 800253a:	8979      	ldrh	r1, [r7, #10]
 800253c:	2300      	movs	r3, #0
 800253e:	9300      	str	r3, [sp, #0]
 8002540:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f000 fb7f 	bl	8002c48 <I2C_TransferConfig>
 800254a:	e00f      	b.n	800256c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002550:	b29a      	uxth	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800255a:	b2da      	uxtb	r2, r3
 800255c:	8979      	ldrh	r1, [r7, #10]
 800255e:	2300      	movs	r3, #0
 8002560:	9300      	str	r3, [sp, #0]
 8002562:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f000 fb6e 	bl	8002c48 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002570:	b29b      	uxth	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d19e      	bne.n	80024b4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	6a39      	ldr	r1, [r7, #32]
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f000 f9c2 	bl	8002904 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e01a      	b.n	80025c0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2220      	movs	r2, #32
 8002590:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	6859      	ldr	r1, [r3, #4]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	4b0b      	ldr	r3, [pc, #44]	; (80025cc <HAL_I2C_Master_Transmit+0x1e4>)
 800259e:	400b      	ands	r3, r1
 80025a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2220      	movs	r2, #32
 80025a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025ba:	2300      	movs	r3, #0
 80025bc:	e000      	b.n	80025c0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80025be:	2302      	movs	r3, #2
  }
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3718      	adds	r7, #24
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	80002000 	.word	0x80002000
 80025cc:	fe00e800 	.word	0xfe00e800

080025d0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b088      	sub	sp, #32
 80025d4:	af02      	add	r7, sp, #8
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	607a      	str	r2, [r7, #4]
 80025da:	461a      	mov	r2, r3
 80025dc:	460b      	mov	r3, r1
 80025de:	817b      	strh	r3, [r7, #10]
 80025e0:	4613      	mov	r3, r2
 80025e2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	2b20      	cmp	r3, #32
 80025ee:	f040 80db 	bne.w	80027a8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d101      	bne.n	8002600 <HAL_I2C_Master_Receive+0x30>
 80025fc:	2302      	movs	r3, #2
 80025fe:	e0d4      	b.n	80027aa <HAL_I2C_Master_Receive+0x1da>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002608:	f7ff faa0 	bl	8001b4c <HAL_GetTick>
 800260c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	2319      	movs	r3, #25
 8002614:	2201      	movs	r2, #1
 8002616:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f000 f8f2 	bl	8002804 <I2C_WaitOnFlagUntilTimeout>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e0bf      	b.n	80027aa <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2222      	movs	r2, #34	; 0x22
 800262e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2210      	movs	r2, #16
 8002636:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	893a      	ldrh	r2, [r7, #8]
 800264a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002656:	b29b      	uxth	r3, r3
 8002658:	2bff      	cmp	r3, #255	; 0xff
 800265a:	d90e      	bls.n	800267a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	22ff      	movs	r2, #255	; 0xff
 8002660:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002666:	b2da      	uxtb	r2, r3
 8002668:	8979      	ldrh	r1, [r7, #10]
 800266a:	4b52      	ldr	r3, [pc, #328]	; (80027b4 <HAL_I2C_Master_Receive+0x1e4>)
 800266c:	9300      	str	r3, [sp, #0]
 800266e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f000 fae8 	bl	8002c48 <I2C_TransferConfig>
 8002678:	e06d      	b.n	8002756 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800267e:	b29a      	uxth	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002688:	b2da      	uxtb	r2, r3
 800268a:	8979      	ldrh	r1, [r7, #10]
 800268c:	4b49      	ldr	r3, [pc, #292]	; (80027b4 <HAL_I2C_Master_Receive+0x1e4>)
 800268e:	9300      	str	r3, [sp, #0]
 8002690:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f000 fad7 	bl	8002c48 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800269a:	e05c      	b.n	8002756 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	6a39      	ldr	r1, [r7, #32]
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f000 f96b 	bl	800297c <I2C_WaitOnRXNEFlagUntilTimeout>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e07c      	b.n	80027aa <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ba:	b2d2      	uxtb	r2, r2
 80026bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c2:	1c5a      	adds	r2, r3, #1
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026cc:	3b01      	subs	r3, #1
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d8:	b29b      	uxth	r3, r3
 80026da:	3b01      	subs	r3, #1
 80026dc:	b29a      	uxth	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d034      	beq.n	8002756 <HAL_I2C_Master_Receive+0x186>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d130      	bne.n	8002756 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	6a3b      	ldr	r3, [r7, #32]
 80026fa:	2200      	movs	r2, #0
 80026fc:	2180      	movs	r1, #128	; 0x80
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f000 f880 	bl	8002804 <I2C_WaitOnFlagUntilTimeout>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e04d      	b.n	80027aa <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002712:	b29b      	uxth	r3, r3
 8002714:	2bff      	cmp	r3, #255	; 0xff
 8002716:	d90e      	bls.n	8002736 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	22ff      	movs	r2, #255	; 0xff
 800271c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002722:	b2da      	uxtb	r2, r3
 8002724:	8979      	ldrh	r1, [r7, #10]
 8002726:	2300      	movs	r3, #0
 8002728:	9300      	str	r3, [sp, #0]
 800272a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f000 fa8a 	bl	8002c48 <I2C_TransferConfig>
 8002734:	e00f      	b.n	8002756 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273a:	b29a      	uxth	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002744:	b2da      	uxtb	r2, r3
 8002746:	8979      	ldrh	r1, [r7, #10]
 8002748:	2300      	movs	r3, #0
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f000 fa79 	bl	8002c48 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800275a:	b29b      	uxth	r3, r3
 800275c:	2b00      	cmp	r3, #0
 800275e:	d19d      	bne.n	800269c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	6a39      	ldr	r1, [r7, #32]
 8002764:	68f8      	ldr	r0, [r7, #12]
 8002766:	f000 f8cd 	bl	8002904 <I2C_WaitOnSTOPFlagUntilTimeout>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e01a      	b.n	80027aa <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2220      	movs	r2, #32
 800277a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6859      	ldr	r1, [r3, #4]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	4b0c      	ldr	r3, [pc, #48]	; (80027b8 <HAL_I2C_Master_Receive+0x1e8>)
 8002788:	400b      	ands	r3, r1
 800278a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2220      	movs	r2, #32
 8002790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027a4:	2300      	movs	r3, #0
 80027a6:	e000      	b.n	80027aa <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80027a8:	2302      	movs	r3, #2
  }
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3718      	adds	r7, #24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	80002400 	.word	0x80002400
 80027b8:	fe00e800 	.word	0xfe00e800

080027bc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d103      	bne.n	80027da <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2200      	movs	r2, #0
 80027d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d007      	beq.n	80027f8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	699a      	ldr	r2, [r3, #24]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f042 0201 	orr.w	r2, r2, #1
 80027f6:	619a      	str	r2, [r3, #24]
  }
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	603b      	str	r3, [r7, #0]
 8002810:	4613      	mov	r3, r2
 8002812:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002814:	e022      	b.n	800285c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281c:	d01e      	beq.n	800285c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800281e:	f7ff f995 	bl	8001b4c <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	429a      	cmp	r2, r3
 800282c:	d302      	bcc.n	8002834 <I2C_WaitOnFlagUntilTimeout+0x30>
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d113      	bne.n	800285c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002838:	f043 0220 	orr.w	r2, r3, #32
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2220      	movs	r2, #32
 8002844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e00f      	b.n	800287c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	699a      	ldr	r2, [r3, #24]
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	4013      	ands	r3, r2
 8002866:	68ba      	ldr	r2, [r7, #8]
 8002868:	429a      	cmp	r2, r3
 800286a:	bf0c      	ite	eq
 800286c:	2301      	moveq	r3, #1
 800286e:	2300      	movne	r3, #0
 8002870:	b2db      	uxtb	r3, r3
 8002872:	461a      	mov	r2, r3
 8002874:	79fb      	ldrb	r3, [r7, #7]
 8002876:	429a      	cmp	r2, r3
 8002878:	d0cd      	beq.n	8002816 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002890:	e02c      	b.n	80028ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	68b9      	ldr	r1, [r7, #8]
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 f8ea 	bl	8002a70 <I2C_IsErrorOccurred>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e02a      	b.n	80028fc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ac:	d01e      	beq.n	80028ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ae:	f7ff f94d 	bl	8001b4c <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	68ba      	ldr	r2, [r7, #8]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d302      	bcc.n	80028c4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d113      	bne.n	80028ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c8:	f043 0220 	orr.w	r2, r3, #32
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2220      	movs	r2, #32
 80028d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e007      	b.n	80028fc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d1cb      	bne.n	8002892 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002910:	e028      	b.n	8002964 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	68b9      	ldr	r1, [r7, #8]
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f000 f8aa 	bl	8002a70 <I2C_IsErrorOccurred>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e026      	b.n	8002974 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002926:	f7ff f911 	bl	8001b4c <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	68ba      	ldr	r2, [r7, #8]
 8002932:	429a      	cmp	r2, r3
 8002934:	d302      	bcc.n	800293c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d113      	bne.n	8002964 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002940:	f043 0220 	orr.w	r2, r3, #32
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2220      	movs	r2, #32
 800294c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e007      	b.n	8002974 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	f003 0320 	and.w	r3, r3, #32
 800296e:	2b20      	cmp	r3, #32
 8002970:	d1cf      	bne.n	8002912 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3710      	adds	r7, #16
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002988:	e064      	b.n	8002a54 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	68b9      	ldr	r1, [r7, #8]
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f000 f86e 	bl	8002a70 <I2C_IsErrorOccurred>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e062      	b.n	8002a64 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	f003 0320 	and.w	r3, r3, #32
 80029a8:	2b20      	cmp	r3, #32
 80029aa:	d138      	bne.n	8002a1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	f003 0304 	and.w	r3, r3, #4
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	d105      	bne.n	80029c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80029c2:	2300      	movs	r3, #0
 80029c4:	e04e      	b.n	8002a64 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	f003 0310 	and.w	r3, r3, #16
 80029d0:	2b10      	cmp	r3, #16
 80029d2:	d107      	bne.n	80029e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2210      	movs	r2, #16
 80029da:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2204      	movs	r2, #4
 80029e0:	645a      	str	r2, [r3, #68]	; 0x44
 80029e2:	e002      	b.n	80029ea <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2220      	movs	r2, #32
 80029f0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	6859      	ldr	r1, [r3, #4]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	4b1b      	ldr	r3, [pc, #108]	; (8002a6c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80029fe:	400b      	ands	r3, r1
 8002a00:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2220      	movs	r2, #32
 8002a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e022      	b.n	8002a64 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a1e:	f7ff f895 	bl	8001b4c <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	68ba      	ldr	r2, [r7, #8]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d302      	bcc.n	8002a34 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d10f      	bne.n	8002a54 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a38:	f043 0220 	orr.w	r2, r3, #32
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2220      	movs	r2, #32
 8002a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e007      	b.n	8002a64 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	f003 0304 	and.w	r3, r3, #4
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	d193      	bne.n	800298a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	fe00e800 	.word	0xfe00e800

08002a70 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b08a      	sub	sp, #40	; 0x28
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	f003 0310 	and.w	r3, r3, #16
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d075      	beq.n	8002b88 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2210      	movs	r2, #16
 8002aa2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002aa4:	e056      	b.n	8002b54 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aac:	d052      	beq.n	8002b54 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002aae:	f7ff f84d 	bl	8001b4c <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	68ba      	ldr	r2, [r7, #8]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d302      	bcc.n	8002ac4 <I2C_IsErrorOccurred+0x54>
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d147      	bne.n	8002b54 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ace:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ad6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ae2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ae6:	d12e      	bne.n	8002b46 <I2C_IsErrorOccurred+0xd6>
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002aee:	d02a      	beq.n	8002b46 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002af0:	7cfb      	ldrb	r3, [r7, #19]
 8002af2:	2b20      	cmp	r3, #32
 8002af4:	d027      	beq.n	8002b46 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	685a      	ldr	r2, [r3, #4]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b04:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002b06:	f7ff f821 	bl	8001b4c <HAL_GetTick>
 8002b0a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b0c:	e01b      	b.n	8002b46 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002b0e:	f7ff f81d 	bl	8001b4c <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b19      	cmp	r3, #25
 8002b1a:	d914      	bls.n	8002b46 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b20:	f043 0220 	orr.w	r2, r3, #32
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2220      	movs	r2, #32
 8002b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	f003 0320 	and.w	r3, r3, #32
 8002b50:	2b20      	cmp	r3, #32
 8002b52:	d1dc      	bne.n	8002b0e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	f003 0320 	and.w	r3, r3, #32
 8002b5e:	2b20      	cmp	r3, #32
 8002b60:	d003      	beq.n	8002b6a <I2C_IsErrorOccurred+0xfa>
 8002b62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d09d      	beq.n	8002aa6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002b6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d103      	bne.n	8002b7a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2220      	movs	r2, #32
 8002b78:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002b7a:	6a3b      	ldr	r3, [r7, #32]
 8002b7c:	f043 0304 	orr.w	r3, r3, #4
 8002b80:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00b      	beq.n	8002bb2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002b9a:	6a3b      	ldr	r3, [r7, #32]
 8002b9c:	f043 0301 	orr.w	r3, r3, #1
 8002ba0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002baa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00b      	beq.n	8002bd4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002bbc:	6a3b      	ldr	r3, [r7, #32]
 8002bbe:	f043 0308 	orr.w	r3, r3, #8
 8002bc2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bcc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00b      	beq.n	8002bf6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002bde:	6a3b      	ldr	r3, [r7, #32]
 8002be0:	f043 0302 	orr.w	r3, r3, #2
 8002be4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002bf6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d01c      	beq.n	8002c38 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002bfe:	68f8      	ldr	r0, [r7, #12]
 8002c00:	f7ff fddc 	bl	80027bc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6859      	ldr	r1, [r3, #4]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	4b0d      	ldr	r3, [pc, #52]	; (8002c44 <I2C_IsErrorOccurred+0x1d4>)
 8002c10:	400b      	ands	r3, r1
 8002c12:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c18:	6a3b      	ldr	r3, [r7, #32]
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2220      	movs	r2, #32
 8002c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002c38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3728      	adds	r7, #40	; 0x28
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	fe00e800 	.word	0xfe00e800

08002c48 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b087      	sub	sp, #28
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	607b      	str	r3, [r7, #4]
 8002c52:	460b      	mov	r3, r1
 8002c54:	817b      	strh	r3, [r7, #10]
 8002c56:	4613      	mov	r3, r2
 8002c58:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c5a:	897b      	ldrh	r3, [r7, #10]
 8002c5c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c60:	7a7b      	ldrb	r3, [r7, #9]
 8002c62:	041b      	lsls	r3, r3, #16
 8002c64:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c68:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c6e:	6a3b      	ldr	r3, [r7, #32]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c76:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	6a3b      	ldr	r3, [r7, #32]
 8002c80:	0d5b      	lsrs	r3, r3, #21
 8002c82:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002c86:	4b08      	ldr	r3, [pc, #32]	; (8002ca8 <I2C_TransferConfig+0x60>)
 8002c88:	430b      	orrs	r3, r1
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	ea02 0103 	and.w	r1, r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002c9a:	bf00      	nop
 8002c9c:	371c      	adds	r7, #28
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	03ff63ff 	.word	0x03ff63ff

08002cac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b20      	cmp	r3, #32
 8002cc0:	d138      	bne.n	8002d34 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d101      	bne.n	8002cd0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ccc:	2302      	movs	r3, #2
 8002cce:	e032      	b.n	8002d36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2224      	movs	r2, #36	; 0x24
 8002cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 0201 	bic.w	r2, r2, #1
 8002cee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002cfe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6819      	ldr	r1, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f042 0201 	orr.w	r2, r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2220      	movs	r2, #32
 8002d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d30:	2300      	movs	r3, #0
 8002d32:	e000      	b.n	8002d36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d34:	2302      	movs	r3, #2
  }
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b085      	sub	sp, #20
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
 8002d4a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	2b20      	cmp	r3, #32
 8002d56:	d139      	bne.n	8002dcc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d101      	bne.n	8002d66 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002d62:	2302      	movs	r3, #2
 8002d64:	e033      	b.n	8002dce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2224      	movs	r2, #36	; 0x24
 8002d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 0201 	bic.w	r2, r2, #1
 8002d84:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d94:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	021b      	lsls	r3, r3, #8
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f042 0201 	orr.w	r2, r2, #1
 8002db6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2220      	movs	r2, #32
 8002dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	e000      	b.n	8002dce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002dcc:	2302      	movs	r3, #2
  }
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3714      	adds	r7, #20
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
	...

08002ddc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002de0:	4b0d      	ldr	r3, [pc, #52]	; (8002e18 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002de8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dec:	d102      	bne.n	8002df4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002dee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002df2:	e00b      	b.n	8002e0c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002df4:	4b08      	ldr	r3, [pc, #32]	; (8002e18 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002df6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e02:	d102      	bne.n	8002e0a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002e04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e08:	e000      	b.n	8002e0c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002e0a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	40007000 	.word	0x40007000

08002e1c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d141      	bne.n	8002eae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e2a:	4b4b      	ldr	r3, [pc, #300]	; (8002f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e36:	d131      	bne.n	8002e9c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e38:	4b47      	ldr	r3, [pc, #284]	; (8002f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e3e:	4a46      	ldr	r2, [pc, #280]	; (8002f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e44:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e48:	4b43      	ldr	r3, [pc, #268]	; (8002f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e50:	4a41      	ldr	r2, [pc, #260]	; (8002f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e56:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002e58:	4b40      	ldr	r3, [pc, #256]	; (8002f5c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2232      	movs	r2, #50	; 0x32
 8002e5e:	fb02 f303 	mul.w	r3, r2, r3
 8002e62:	4a3f      	ldr	r2, [pc, #252]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002e64:	fba2 2303 	umull	r2, r3, r2, r3
 8002e68:	0c9b      	lsrs	r3, r3, #18
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e6e:	e002      	b.n	8002e76 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	3b01      	subs	r3, #1
 8002e74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e76:	4b38      	ldr	r3, [pc, #224]	; (8002f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e82:	d102      	bne.n	8002e8a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1f2      	bne.n	8002e70 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e8a:	4b33      	ldr	r3, [pc, #204]	; (8002f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e96:	d158      	bne.n	8002f4a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e057      	b.n	8002f4c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e9c:	4b2e      	ldr	r3, [pc, #184]	; (8002f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ea2:	4a2d      	ldr	r2, [pc, #180]	; (8002f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ea4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ea8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002eac:	e04d      	b.n	8002f4a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eb4:	d141      	bne.n	8002f3a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002eb6:	4b28      	ldr	r3, [pc, #160]	; (8002f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ebe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ec2:	d131      	bne.n	8002f28 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ec4:	4b24      	ldr	r3, [pc, #144]	; (8002f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002eca:	4a23      	ldr	r2, [pc, #140]	; (8002f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ecc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ed0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ed4:	4b20      	ldr	r3, [pc, #128]	; (8002f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002edc:	4a1e      	ldr	r2, [pc, #120]	; (8002f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ede:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ee2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002ee4:	4b1d      	ldr	r3, [pc, #116]	; (8002f5c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2232      	movs	r2, #50	; 0x32
 8002eea:	fb02 f303 	mul.w	r3, r2, r3
 8002eee:	4a1c      	ldr	r2, [pc, #112]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef4:	0c9b      	lsrs	r3, r3, #18
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002efa:	e002      	b.n	8002f02 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	3b01      	subs	r3, #1
 8002f00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f02:	4b15      	ldr	r3, [pc, #84]	; (8002f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f0e:	d102      	bne.n	8002f16 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1f2      	bne.n	8002efc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f16:	4b10      	ldr	r3, [pc, #64]	; (8002f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f22:	d112      	bne.n	8002f4a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e011      	b.n	8002f4c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f28:	4b0b      	ldr	r3, [pc, #44]	; (8002f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f2e:	4a0a      	ldr	r2, [pc, #40]	; (8002f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002f38:	e007      	b.n	8002f4a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f3a:	4b07      	ldr	r3, [pc, #28]	; (8002f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f42:	4a05      	ldr	r2, [pc, #20]	; (8002f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f44:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f48:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3714      	adds	r7, #20
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr
 8002f58:	40007000 	.word	0x40007000
 8002f5c:	20000004 	.word	0x20000004
 8002f60:	431bde83 	.word	0x431bde83

08002f64 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002f68:	4b05      	ldr	r3, [pc, #20]	; (8002f80 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	4a04      	ldr	r2, [pc, #16]	; (8002f80 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002f6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f72:	6053      	str	r3, [r2, #4]
}
 8002f74:	bf00      	nop
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	40007000 	.word	0x40007000

08002f84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b08a      	sub	sp, #40	; 0x28
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d102      	bne.n	8002f98 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	f000 bc68 	b.w	8003868 <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f98:	4b97      	ldr	r3, [pc, #604]	; (80031f8 <HAL_RCC_OscConfig+0x274>)
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f003 030c 	and.w	r3, r3, #12
 8002fa0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fa2:	4b95      	ldr	r3, [pc, #596]	; (80031f8 <HAL_RCC_OscConfig+0x274>)
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	f003 0303 	and.w	r3, r3, #3
 8002faa:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0310 	and.w	r3, r3, #16
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f000 80e6 	beq.w	8003186 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fba:	6a3b      	ldr	r3, [r7, #32]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d007      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x4c>
 8002fc0:	6a3b      	ldr	r3, [r7, #32]
 8002fc2:	2b0c      	cmp	r3, #12
 8002fc4:	f040 808d 	bne.w	80030e2 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	f040 8089 	bne.w	80030e2 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fd0:	4b89      	ldr	r3, [pc, #548]	; (80031f8 <HAL_RCC_OscConfig+0x274>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d006      	beq.n	8002fea <HAL_RCC_OscConfig+0x66>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	69db      	ldr	r3, [r3, #28]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d102      	bne.n	8002fea <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	f000 bc3f 	b.w	8003868 <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fee:	4b82      	ldr	r3, [pc, #520]	; (80031f8 <HAL_RCC_OscConfig+0x274>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0308 	and.w	r3, r3, #8
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d004      	beq.n	8003004 <HAL_RCC_OscConfig+0x80>
 8002ffa:	4b7f      	ldr	r3, [pc, #508]	; (80031f8 <HAL_RCC_OscConfig+0x274>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003002:	e005      	b.n	8003010 <HAL_RCC_OscConfig+0x8c>
 8003004:	4b7c      	ldr	r3, [pc, #496]	; (80031f8 <HAL_RCC_OscConfig+0x274>)
 8003006:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800300a:	091b      	lsrs	r3, r3, #4
 800300c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003010:	4293      	cmp	r3, r2
 8003012:	d224      	bcs.n	800305e <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003018:	4618      	mov	r0, r3
 800301a:	f000 fe2d 	bl	8003c78 <RCC_SetFlashLatencyFromMSIRange>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d002      	beq.n	800302a <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	f000 bc1f 	b.w	8003868 <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800302a:	4b73      	ldr	r3, [pc, #460]	; (80031f8 <HAL_RCC_OscConfig+0x274>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a72      	ldr	r2, [pc, #456]	; (80031f8 <HAL_RCC_OscConfig+0x274>)
 8003030:	f043 0308 	orr.w	r3, r3, #8
 8003034:	6013      	str	r3, [r2, #0]
 8003036:	4b70      	ldr	r3, [pc, #448]	; (80031f8 <HAL_RCC_OscConfig+0x274>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003042:	496d      	ldr	r1, [pc, #436]	; (80031f8 <HAL_RCC_OscConfig+0x274>)
 8003044:	4313      	orrs	r3, r2
 8003046:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003048:	4b6b      	ldr	r3, [pc, #428]	; (80031f8 <HAL_RCC_OscConfig+0x274>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	021b      	lsls	r3, r3, #8
 8003056:	4968      	ldr	r1, [pc, #416]	; (80031f8 <HAL_RCC_OscConfig+0x274>)
 8003058:	4313      	orrs	r3, r2
 800305a:	604b      	str	r3, [r1, #4]
 800305c:	e025      	b.n	80030aa <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800305e:	4b66      	ldr	r3, [pc, #408]	; (80031f8 <HAL_RCC_OscConfig+0x274>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a65      	ldr	r2, [pc, #404]	; (80031f8 <HAL_RCC_OscConfig+0x274>)
 8003064:	f043 0308 	orr.w	r3, r3, #8
 8003068:	6013      	str	r3, [r2, #0]
 800306a:	4b63      	ldr	r3, [pc, #396]	; (80031f8 <HAL_RCC_OscConfig+0x274>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003076:	4960      	ldr	r1, [pc, #384]	; (80031f8 <HAL_RCC_OscConfig+0x274>)
 8003078:	4313      	orrs	r3, r2
 800307a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800307c:	4b5e      	ldr	r3, [pc, #376]	; (80031f8 <HAL_RCC_OscConfig+0x274>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a1b      	ldr	r3, [r3, #32]
 8003088:	021b      	lsls	r3, r3, #8
 800308a:	495b      	ldr	r1, [pc, #364]	; (80031f8 <HAL_RCC_OscConfig+0x274>)
 800308c:	4313      	orrs	r3, r2
 800308e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003090:	6a3b      	ldr	r3, [r7, #32]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d109      	bne.n	80030aa <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309a:	4618      	mov	r0, r3
 800309c:	f000 fdec 	bl	8003c78 <RCC_SetFlashLatencyFromMSIRange>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e3de      	b.n	8003868 <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030aa:	f000 fd21 	bl	8003af0 <HAL_RCC_GetSysClockFreq>
 80030ae:	4602      	mov	r2, r0
 80030b0:	4b51      	ldr	r3, [pc, #324]	; (80031f8 <HAL_RCC_OscConfig+0x274>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	091b      	lsrs	r3, r3, #4
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	4950      	ldr	r1, [pc, #320]	; (80031fc <HAL_RCC_OscConfig+0x278>)
 80030bc:	5ccb      	ldrb	r3, [r1, r3]
 80030be:	f003 031f 	and.w	r3, r3, #31
 80030c2:	fa22 f303 	lsr.w	r3, r2, r3
 80030c6:	4a4e      	ldr	r2, [pc, #312]	; (8003200 <HAL_RCC_OscConfig+0x27c>)
 80030c8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80030ca:	4b4e      	ldr	r3, [pc, #312]	; (8003204 <HAL_RCC_OscConfig+0x280>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7fe fcec 	bl	8001aac <HAL_InitTick>
 80030d4:	4603      	mov	r3, r0
 80030d6:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80030d8:	7dfb      	ldrb	r3, [r7, #23]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d052      	beq.n	8003184 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80030de:	7dfb      	ldrb	r3, [r7, #23]
 80030e0:	e3c2      	b.n	8003868 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d032      	beq.n	8003150 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80030ea:	4b43      	ldr	r3, [pc, #268]	; (80031f8 <HAL_RCC_OscConfig+0x274>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a42      	ldr	r2, [pc, #264]	; (80031f8 <HAL_RCC_OscConfig+0x274>)
 80030f0:	f043 0301 	orr.w	r3, r3, #1
 80030f4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030f6:	f7fe fd29 	bl	8001b4c <HAL_GetTick>
 80030fa:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030fc:	e008      	b.n	8003110 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030fe:	f7fe fd25 	bl	8001b4c <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d901      	bls.n	8003110 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e3ab      	b.n	8003868 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003110:	4b39      	ldr	r3, [pc, #228]	; (80031f8 <HAL_RCC_OscConfig+0x274>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d0f0      	beq.n	80030fe <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800311c:	4b36      	ldr	r3, [pc, #216]	; (80031f8 <HAL_RCC_OscConfig+0x274>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a35      	ldr	r2, [pc, #212]	; (80031f8 <HAL_RCC_OscConfig+0x274>)
 8003122:	f043 0308 	orr.w	r3, r3, #8
 8003126:	6013      	str	r3, [r2, #0]
 8003128:	4b33      	ldr	r3, [pc, #204]	; (80031f8 <HAL_RCC_OscConfig+0x274>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003134:	4930      	ldr	r1, [pc, #192]	; (80031f8 <HAL_RCC_OscConfig+0x274>)
 8003136:	4313      	orrs	r3, r2
 8003138:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800313a:	4b2f      	ldr	r3, [pc, #188]	; (80031f8 <HAL_RCC_OscConfig+0x274>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	021b      	lsls	r3, r3, #8
 8003148:	492b      	ldr	r1, [pc, #172]	; (80031f8 <HAL_RCC_OscConfig+0x274>)
 800314a:	4313      	orrs	r3, r2
 800314c:	604b      	str	r3, [r1, #4]
 800314e:	e01a      	b.n	8003186 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003150:	4b29      	ldr	r3, [pc, #164]	; (80031f8 <HAL_RCC_OscConfig+0x274>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a28      	ldr	r2, [pc, #160]	; (80031f8 <HAL_RCC_OscConfig+0x274>)
 8003156:	f023 0301 	bic.w	r3, r3, #1
 800315a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800315c:	f7fe fcf6 	bl	8001b4c <HAL_GetTick>
 8003160:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003164:	f7fe fcf2 	bl	8001b4c <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e378      	b.n	8003868 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003176:	4b20      	ldr	r3, [pc, #128]	; (80031f8 <HAL_RCC_OscConfig+0x274>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1f0      	bne.n	8003164 <HAL_RCC_OscConfig+0x1e0>
 8003182:	e000      	b.n	8003186 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003184:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	2b00      	cmp	r3, #0
 8003190:	d073      	beq.n	800327a <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003192:	6a3b      	ldr	r3, [r7, #32]
 8003194:	2b08      	cmp	r3, #8
 8003196:	d005      	beq.n	80031a4 <HAL_RCC_OscConfig+0x220>
 8003198:	6a3b      	ldr	r3, [r7, #32]
 800319a:	2b0c      	cmp	r3, #12
 800319c:	d10e      	bne.n	80031bc <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	2b03      	cmp	r3, #3
 80031a2:	d10b      	bne.n	80031bc <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a4:	4b14      	ldr	r3, [pc, #80]	; (80031f8 <HAL_RCC_OscConfig+0x274>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d063      	beq.n	8003278 <HAL_RCC_OscConfig+0x2f4>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d15f      	bne.n	8003278 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e355      	b.n	8003868 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031c4:	d106      	bne.n	80031d4 <HAL_RCC_OscConfig+0x250>
 80031c6:	4b0c      	ldr	r3, [pc, #48]	; (80031f8 <HAL_RCC_OscConfig+0x274>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a0b      	ldr	r2, [pc, #44]	; (80031f8 <HAL_RCC_OscConfig+0x274>)
 80031cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d0:	6013      	str	r3, [r2, #0]
 80031d2:	e025      	b.n	8003220 <HAL_RCC_OscConfig+0x29c>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031dc:	d114      	bne.n	8003208 <HAL_RCC_OscConfig+0x284>
 80031de:	4b06      	ldr	r3, [pc, #24]	; (80031f8 <HAL_RCC_OscConfig+0x274>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a05      	ldr	r2, [pc, #20]	; (80031f8 <HAL_RCC_OscConfig+0x274>)
 80031e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031e8:	6013      	str	r3, [r2, #0]
 80031ea:	4b03      	ldr	r3, [pc, #12]	; (80031f8 <HAL_RCC_OscConfig+0x274>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a02      	ldr	r2, [pc, #8]	; (80031f8 <HAL_RCC_OscConfig+0x274>)
 80031f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031f4:	6013      	str	r3, [r2, #0]
 80031f6:	e013      	b.n	8003220 <HAL_RCC_OscConfig+0x29c>
 80031f8:	40021000 	.word	0x40021000
 80031fc:	0800cfe4 	.word	0x0800cfe4
 8003200:	20000004 	.word	0x20000004
 8003204:	20000008 	.word	0x20000008
 8003208:	4b8f      	ldr	r3, [pc, #572]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a8e      	ldr	r2, [pc, #568]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 800320e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003212:	6013      	str	r3, [r2, #0]
 8003214:	4b8c      	ldr	r3, [pc, #560]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a8b      	ldr	r2, [pc, #556]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 800321a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800321e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d013      	beq.n	8003250 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003228:	f7fe fc90 	bl	8001b4c <HAL_GetTick>
 800322c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003230:	f7fe fc8c 	bl	8001b4c <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b64      	cmp	r3, #100	; 0x64
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e312      	b.n	8003868 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003242:	4b81      	ldr	r3, [pc, #516]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d0f0      	beq.n	8003230 <HAL_RCC_OscConfig+0x2ac>
 800324e:	e014      	b.n	800327a <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003250:	f7fe fc7c 	bl	8001b4c <HAL_GetTick>
 8003254:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003256:	e008      	b.n	800326a <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003258:	f7fe fc78 	bl	8001b4c <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b64      	cmp	r3, #100	; 0x64
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e2fe      	b.n	8003868 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800326a:	4b77      	ldr	r3, [pc, #476]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1f0      	bne.n	8003258 <HAL_RCC_OscConfig+0x2d4>
 8003276:	e000      	b.n	800327a <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003278:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d060      	beq.n	8003348 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003286:	6a3b      	ldr	r3, [r7, #32]
 8003288:	2b04      	cmp	r3, #4
 800328a:	d005      	beq.n	8003298 <HAL_RCC_OscConfig+0x314>
 800328c:	6a3b      	ldr	r3, [r7, #32]
 800328e:	2b0c      	cmp	r3, #12
 8003290:	d119      	bne.n	80032c6 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	2b02      	cmp	r3, #2
 8003296:	d116      	bne.n	80032c6 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003298:	4b6b      	ldr	r3, [pc, #428]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d005      	beq.n	80032b0 <HAL_RCC_OscConfig+0x32c>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d101      	bne.n	80032b0 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e2db      	b.n	8003868 <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b0:	4b65      	ldr	r3, [pc, #404]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	061b      	lsls	r3, r3, #24
 80032be:	4962      	ldr	r1, [pc, #392]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032c4:	e040      	b.n	8003348 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d023      	beq.n	8003316 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032ce:	4b5e      	ldr	r3, [pc, #376]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a5d      	ldr	r2, [pc, #372]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 80032d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032da:	f7fe fc37 	bl	8001b4c <HAL_GetTick>
 80032de:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032e0:	e008      	b.n	80032f4 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032e2:	f7fe fc33 	bl	8001b4c <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e2b9      	b.n	8003868 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032f4:	4b54      	ldr	r3, [pc, #336]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0f0      	beq.n	80032e2 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003300:	4b51      	ldr	r3, [pc, #324]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	061b      	lsls	r3, r3, #24
 800330e:	494e      	ldr	r1, [pc, #312]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 8003310:	4313      	orrs	r3, r2
 8003312:	604b      	str	r3, [r1, #4]
 8003314:	e018      	b.n	8003348 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003316:	4b4c      	ldr	r3, [pc, #304]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a4b      	ldr	r2, [pc, #300]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 800331c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003320:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003322:	f7fe fc13 	bl	8001b4c <HAL_GetTick>
 8003326:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003328:	e008      	b.n	800333c <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800332a:	f7fe fc0f 	bl	8001b4c <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	2b02      	cmp	r3, #2
 8003336:	d901      	bls.n	800333c <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e295      	b.n	8003868 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800333c:	4b42      	ldr	r3, [pc, #264]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1f0      	bne.n	800332a <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0308 	and.w	r3, r3, #8
 8003350:	2b00      	cmp	r3, #0
 8003352:	f000 8082 	beq.w	800345a <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d05f      	beq.n	800341e <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 800335e:	4b3a      	ldr	r3, [pc, #232]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 8003360:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003364:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	699a      	ldr	r2, [r3, #24]
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	f003 0310 	and.w	r3, r3, #16
 8003370:	429a      	cmp	r2, r3
 8003372:	d037      	beq.n	80033e4 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d006      	beq.n	800338c <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003384:	2b00      	cmp	r3, #0
 8003386:	d101      	bne.n	800338c <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e26d      	b.n	8003868 <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	2b00      	cmp	r3, #0
 8003394:	d01b      	beq.n	80033ce <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8003396:	4b2c      	ldr	r3, [pc, #176]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 8003398:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800339c:	4a2a      	ldr	r2, [pc, #168]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 800339e:	f023 0301 	bic.w	r3, r3, #1
 80033a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80033a6:	f7fe fbd1 	bl	8001b4c <HAL_GetTick>
 80033aa:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033ac:	e008      	b.n	80033c0 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033ae:	f7fe fbcd 	bl	8001b4c <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	2b11      	cmp	r3, #17
 80033ba:	d901      	bls.n	80033c0 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e253      	b.n	8003868 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033c0:	4b21      	ldr	r3, [pc, #132]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 80033c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1ef      	bne.n	80033ae <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80033ce:	4b1e      	ldr	r3, [pc, #120]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 80033d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033d4:	f023 0210 	bic.w	r2, r3, #16
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	491a      	ldr	r1, [pc, #104]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033e4:	4b18      	ldr	r3, [pc, #96]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 80033e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033ea:	4a17      	ldr	r2, [pc, #92]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 80033ec:	f043 0301 	orr.w	r3, r3, #1
 80033f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f4:	f7fe fbaa 	bl	8001b4c <HAL_GetTick>
 80033f8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033fc:	f7fe fba6 	bl	8001b4c <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b11      	cmp	r3, #17
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e22c      	b.n	8003868 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800340e:	4b0e      	ldr	r3, [pc, #56]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 8003410:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d0ef      	beq.n	80033fc <HAL_RCC_OscConfig+0x478>
 800341c:	e01d      	b.n	800345a <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800341e:	4b0a      	ldr	r3, [pc, #40]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 8003420:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003424:	4a08      	ldr	r2, [pc, #32]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 8003426:	f023 0301 	bic.w	r3, r3, #1
 800342a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800342e:	f7fe fb8d 	bl	8001b4c <HAL_GetTick>
 8003432:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003434:	e00a      	b.n	800344c <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003436:	f7fe fb89 	bl	8001b4c <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	2b11      	cmp	r3, #17
 8003442:	d903      	bls.n	800344c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e20f      	b.n	8003868 <HAL_RCC_OscConfig+0x8e4>
 8003448:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800344c:	4b83      	ldr	r3, [pc, #524]	; (800365c <HAL_RCC_OscConfig+0x6d8>)
 800344e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1ed      	bne.n	8003436 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0304 	and.w	r3, r3, #4
 8003462:	2b00      	cmp	r3, #0
 8003464:	f000 80bd 	beq.w	80035e2 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003468:	2300      	movs	r3, #0
 800346a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800346e:	4b7b      	ldr	r3, [pc, #492]	; (800365c <HAL_RCC_OscConfig+0x6d8>)
 8003470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10e      	bne.n	8003498 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800347a:	4b78      	ldr	r3, [pc, #480]	; (800365c <HAL_RCC_OscConfig+0x6d8>)
 800347c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800347e:	4a77      	ldr	r2, [pc, #476]	; (800365c <HAL_RCC_OscConfig+0x6d8>)
 8003480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003484:	6593      	str	r3, [r2, #88]	; 0x58
 8003486:	4b75      	ldr	r3, [pc, #468]	; (800365c <HAL_RCC_OscConfig+0x6d8>)
 8003488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800348a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800348e:	60fb      	str	r3, [r7, #12]
 8003490:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003492:	2301      	movs	r3, #1
 8003494:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003498:	4b71      	ldr	r3, [pc, #452]	; (8003660 <HAL_RCC_OscConfig+0x6dc>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d118      	bne.n	80034d6 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034a4:	4b6e      	ldr	r3, [pc, #440]	; (8003660 <HAL_RCC_OscConfig+0x6dc>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a6d      	ldr	r2, [pc, #436]	; (8003660 <HAL_RCC_OscConfig+0x6dc>)
 80034aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034b0:	f7fe fb4c 	bl	8001b4c <HAL_GetTick>
 80034b4:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034b8:	f7fe fb48 	bl	8001b4c <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e1ce      	b.n	8003868 <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034ca:	4b65      	ldr	r3, [pc, #404]	; (8003660 <HAL_RCC_OscConfig+0x6dc>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d0f0      	beq.n	80034b8 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d02c      	beq.n	800353c <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80034e2:	4b5e      	ldr	r3, [pc, #376]	; (800365c <HAL_RCC_OscConfig+0x6d8>)
 80034e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f4:	4959      	ldr	r1, [pc, #356]	; (800365c <HAL_RCC_OscConfig+0x6d8>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f003 0304 	and.w	r3, r3, #4
 8003504:	2b00      	cmp	r3, #0
 8003506:	d010      	beq.n	800352a <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003508:	4b54      	ldr	r3, [pc, #336]	; (800365c <HAL_RCC_OscConfig+0x6d8>)
 800350a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800350e:	4a53      	ldr	r2, [pc, #332]	; (800365c <HAL_RCC_OscConfig+0x6d8>)
 8003510:	f043 0304 	orr.w	r3, r3, #4
 8003514:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003518:	4b50      	ldr	r3, [pc, #320]	; (800365c <HAL_RCC_OscConfig+0x6d8>)
 800351a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800351e:	4a4f      	ldr	r2, [pc, #316]	; (800365c <HAL_RCC_OscConfig+0x6d8>)
 8003520:	f043 0301 	orr.w	r3, r3, #1
 8003524:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003528:	e018      	b.n	800355c <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800352a:	4b4c      	ldr	r3, [pc, #304]	; (800365c <HAL_RCC_OscConfig+0x6d8>)
 800352c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003530:	4a4a      	ldr	r2, [pc, #296]	; (800365c <HAL_RCC_OscConfig+0x6d8>)
 8003532:	f043 0301 	orr.w	r3, r3, #1
 8003536:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800353a:	e00f      	b.n	800355c <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800353c:	4b47      	ldr	r3, [pc, #284]	; (800365c <HAL_RCC_OscConfig+0x6d8>)
 800353e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003542:	4a46      	ldr	r2, [pc, #280]	; (800365c <HAL_RCC_OscConfig+0x6d8>)
 8003544:	f023 0301 	bic.w	r3, r3, #1
 8003548:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800354c:	4b43      	ldr	r3, [pc, #268]	; (800365c <HAL_RCC_OscConfig+0x6d8>)
 800354e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003552:	4a42      	ldr	r2, [pc, #264]	; (800365c <HAL_RCC_OscConfig+0x6d8>)
 8003554:	f023 0304 	bic.w	r3, r3, #4
 8003558:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d016      	beq.n	8003592 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003564:	f7fe faf2 	bl	8001b4c <HAL_GetTick>
 8003568:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800356a:	e00a      	b.n	8003582 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800356c:	f7fe faee 	bl	8001b4c <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	f241 3288 	movw	r2, #5000	; 0x1388
 800357a:	4293      	cmp	r3, r2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e172      	b.n	8003868 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003582:	4b36      	ldr	r3, [pc, #216]	; (800365c <HAL_RCC_OscConfig+0x6d8>)
 8003584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d0ed      	beq.n	800356c <HAL_RCC_OscConfig+0x5e8>
 8003590:	e01d      	b.n	80035ce <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003592:	f7fe fadb 	bl	8001b4c <HAL_GetTick>
 8003596:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003598:	e00a      	b.n	80035b0 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800359a:	f7fe fad7 	bl	8001b4c <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d901      	bls.n	80035b0 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e15b      	b.n	8003868 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035b0:	4b2a      	ldr	r3, [pc, #168]	; (800365c <HAL_RCC_OscConfig+0x6d8>)
 80035b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1ed      	bne.n	800359a <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80035be:	4b27      	ldr	r3, [pc, #156]	; (800365c <HAL_RCC_OscConfig+0x6d8>)
 80035c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c4:	4a25      	ldr	r2, [pc, #148]	; (800365c <HAL_RCC_OscConfig+0x6d8>)
 80035c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d105      	bne.n	80035e2 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035d6:	4b21      	ldr	r3, [pc, #132]	; (800365c <HAL_RCC_OscConfig+0x6d8>)
 80035d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035da:	4a20      	ldr	r2, [pc, #128]	; (800365c <HAL_RCC_OscConfig+0x6d8>)
 80035dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035e0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0320 	and.w	r3, r3, #32
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d041      	beq.n	8003672 <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d01c      	beq.n	8003630 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80035f6:	4b19      	ldr	r3, [pc, #100]	; (800365c <HAL_RCC_OscConfig+0x6d8>)
 80035f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035fc:	4a17      	ldr	r2, [pc, #92]	; (800365c <HAL_RCC_OscConfig+0x6d8>)
 80035fe:	f043 0301 	orr.w	r3, r3, #1
 8003602:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003606:	f7fe faa1 	bl	8001b4c <HAL_GetTick>
 800360a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800360c:	e008      	b.n	8003620 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800360e:	f7fe fa9d 	bl	8001b4c <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d901      	bls.n	8003620 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e123      	b.n	8003868 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003620:	4b0e      	ldr	r3, [pc, #56]	; (800365c <HAL_RCC_OscConfig+0x6d8>)
 8003622:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d0ef      	beq.n	800360e <HAL_RCC_OscConfig+0x68a>
 800362e:	e020      	b.n	8003672 <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003630:	4b0a      	ldr	r3, [pc, #40]	; (800365c <HAL_RCC_OscConfig+0x6d8>)
 8003632:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003636:	4a09      	ldr	r2, [pc, #36]	; (800365c <HAL_RCC_OscConfig+0x6d8>)
 8003638:	f023 0301 	bic.w	r3, r3, #1
 800363c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003640:	f7fe fa84 	bl	8001b4c <HAL_GetTick>
 8003644:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003646:	e00d      	b.n	8003664 <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003648:	f7fe fa80 	bl	8001b4c <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d906      	bls.n	8003664 <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e106      	b.n	8003868 <HAL_RCC_OscConfig+0x8e4>
 800365a:	bf00      	nop
 800365c:	40021000 	.word	0x40021000
 8003660:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003664:	4b82      	ldr	r3, [pc, #520]	; (8003870 <HAL_RCC_OscConfig+0x8ec>)
 8003666:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1ea      	bne.n	8003648 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003676:	2b00      	cmp	r3, #0
 8003678:	f000 80f5 	beq.w	8003866 <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003680:	2b02      	cmp	r3, #2
 8003682:	f040 80cb 	bne.w	800381c <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003686:	4b7a      	ldr	r3, [pc, #488]	; (8003870 <HAL_RCC_OscConfig+0x8ec>)
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	f003 0203 	and.w	r2, r3, #3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003696:	429a      	cmp	r2, r3
 8003698:	d12c      	bne.n	80036f4 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036a4:	3b01      	subs	r3, #1
 80036a6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d123      	bne.n	80036f4 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d11b      	bne.n	80036f4 <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d113      	bne.n	80036f4 <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	085b      	lsrs	r3, r3, #1
 80036d8:	3b01      	subs	r3, #1
 80036da:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036dc:	429a      	cmp	r2, r3
 80036de:	d109      	bne.n	80036f4 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ea:	085b      	lsrs	r3, r3, #1
 80036ec:	3b01      	subs	r3, #1
 80036ee:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d06d      	beq.n	80037d0 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036f4:	6a3b      	ldr	r3, [r7, #32]
 80036f6:	2b0c      	cmp	r3, #12
 80036f8:	d068      	beq.n	80037cc <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80036fa:	4b5d      	ldr	r3, [pc, #372]	; (8003870 <HAL_RCC_OscConfig+0x8ec>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d105      	bne.n	8003712 <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003706:	4b5a      	ldr	r3, [pc, #360]	; (8003870 <HAL_RCC_OscConfig+0x8ec>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e0a8      	b.n	8003868 <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003716:	4b56      	ldr	r3, [pc, #344]	; (8003870 <HAL_RCC_OscConfig+0x8ec>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a55      	ldr	r2, [pc, #340]	; (8003870 <HAL_RCC_OscConfig+0x8ec>)
 800371c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003720:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003722:	f7fe fa13 	bl	8001b4c <HAL_GetTick>
 8003726:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003728:	e008      	b.n	800373c <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800372a:	f7fe fa0f 	bl	8001b4c <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d901      	bls.n	800373c <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e095      	b.n	8003868 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800373c:	4b4c      	ldr	r3, [pc, #304]	; (8003870 <HAL_RCC_OscConfig+0x8ec>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1f0      	bne.n	800372a <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003748:	4b49      	ldr	r3, [pc, #292]	; (8003870 <HAL_RCC_OscConfig+0x8ec>)
 800374a:	68da      	ldr	r2, [r3, #12]
 800374c:	4b49      	ldr	r3, [pc, #292]	; (8003874 <HAL_RCC_OscConfig+0x8f0>)
 800374e:	4013      	ands	r3, r2
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003758:	3a01      	subs	r2, #1
 800375a:	0112      	lsls	r2, r2, #4
 800375c:	4311      	orrs	r1, r2
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003762:	0212      	lsls	r2, r2, #8
 8003764:	4311      	orrs	r1, r2
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800376a:	0852      	lsrs	r2, r2, #1
 800376c:	3a01      	subs	r2, #1
 800376e:	0552      	lsls	r2, r2, #21
 8003770:	4311      	orrs	r1, r2
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003776:	0852      	lsrs	r2, r2, #1
 8003778:	3a01      	subs	r2, #1
 800377a:	0652      	lsls	r2, r2, #25
 800377c:	4311      	orrs	r1, r2
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003782:	06d2      	lsls	r2, r2, #27
 8003784:	430a      	orrs	r2, r1
 8003786:	493a      	ldr	r1, [pc, #232]	; (8003870 <HAL_RCC_OscConfig+0x8ec>)
 8003788:	4313      	orrs	r3, r2
 800378a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800378c:	4b38      	ldr	r3, [pc, #224]	; (8003870 <HAL_RCC_OscConfig+0x8ec>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a37      	ldr	r2, [pc, #220]	; (8003870 <HAL_RCC_OscConfig+0x8ec>)
 8003792:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003796:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003798:	4b35      	ldr	r3, [pc, #212]	; (8003870 <HAL_RCC_OscConfig+0x8ec>)
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	4a34      	ldr	r2, [pc, #208]	; (8003870 <HAL_RCC_OscConfig+0x8ec>)
 800379e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037a2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037a4:	f7fe f9d2 	bl	8001b4c <HAL_GetTick>
 80037a8:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037aa:	e008      	b.n	80037be <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ac:	f7fe f9ce 	bl	8001b4c <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e054      	b.n	8003868 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037be:	4b2c      	ldr	r3, [pc, #176]	; (8003870 <HAL_RCC_OscConfig+0x8ec>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d0f0      	beq.n	80037ac <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037ca:	e04c      	b.n	8003866 <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e04b      	b.n	8003868 <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037d0:	4b27      	ldr	r3, [pc, #156]	; (8003870 <HAL_RCC_OscConfig+0x8ec>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d144      	bne.n	8003866 <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80037dc:	4b24      	ldr	r3, [pc, #144]	; (8003870 <HAL_RCC_OscConfig+0x8ec>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a23      	ldr	r2, [pc, #140]	; (8003870 <HAL_RCC_OscConfig+0x8ec>)
 80037e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037e6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037e8:	4b21      	ldr	r3, [pc, #132]	; (8003870 <HAL_RCC_OscConfig+0x8ec>)
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	4a20      	ldr	r2, [pc, #128]	; (8003870 <HAL_RCC_OscConfig+0x8ec>)
 80037ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037f2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80037f4:	f7fe f9aa 	bl	8001b4c <HAL_GetTick>
 80037f8:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037fa:	e008      	b.n	800380e <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037fc:	f7fe f9a6 	bl	8001b4c <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b02      	cmp	r3, #2
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e02c      	b.n	8003868 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800380e:	4b18      	ldr	r3, [pc, #96]	; (8003870 <HAL_RCC_OscConfig+0x8ec>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d0f0      	beq.n	80037fc <HAL_RCC_OscConfig+0x878>
 800381a:	e024      	b.n	8003866 <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800381c:	6a3b      	ldr	r3, [r7, #32]
 800381e:	2b0c      	cmp	r3, #12
 8003820:	d01f      	beq.n	8003862 <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003822:	4b13      	ldr	r3, [pc, #76]	; (8003870 <HAL_RCC_OscConfig+0x8ec>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a12      	ldr	r2, [pc, #72]	; (8003870 <HAL_RCC_OscConfig+0x8ec>)
 8003828:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800382c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800382e:	f7fe f98d 	bl	8001b4c <HAL_GetTick>
 8003832:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003834:	e008      	b.n	8003848 <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003836:	f7fe f989 	bl	8001b4c <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b02      	cmp	r3, #2
 8003842:	d901      	bls.n	8003848 <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e00f      	b.n	8003868 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003848:	4b09      	ldr	r3, [pc, #36]	; (8003870 <HAL_RCC_OscConfig+0x8ec>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1f0      	bne.n	8003836 <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003854:	4b06      	ldr	r3, [pc, #24]	; (8003870 <HAL_RCC_OscConfig+0x8ec>)
 8003856:	68da      	ldr	r2, [r3, #12]
 8003858:	4905      	ldr	r1, [pc, #20]	; (8003870 <HAL_RCC_OscConfig+0x8ec>)
 800385a:	4b07      	ldr	r3, [pc, #28]	; (8003878 <HAL_RCC_OscConfig+0x8f4>)
 800385c:	4013      	ands	r3, r2
 800385e:	60cb      	str	r3, [r1, #12]
 8003860:	e001      	b.n	8003866 <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e000      	b.n	8003868 <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	3728      	adds	r7, #40	; 0x28
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	40021000 	.word	0x40021000
 8003874:	019d800c 	.word	0x019d800c
 8003878:	feeefffc 	.word	0xfeeefffc

0800387c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003886:	2300      	movs	r3, #0
 8003888:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d101      	bne.n	8003894 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e11d      	b.n	8003ad0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003894:	4b90      	ldr	r3, [pc, #576]	; (8003ad8 <HAL_RCC_ClockConfig+0x25c>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 030f 	and.w	r3, r3, #15
 800389c:	683a      	ldr	r2, [r7, #0]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d910      	bls.n	80038c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038a2:	4b8d      	ldr	r3, [pc, #564]	; (8003ad8 <HAL_RCC_ClockConfig+0x25c>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f023 020f 	bic.w	r2, r3, #15
 80038aa:	498b      	ldr	r1, [pc, #556]	; (8003ad8 <HAL_RCC_ClockConfig+0x25c>)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038b2:	4b89      	ldr	r3, [pc, #548]	; (8003ad8 <HAL_RCC_ClockConfig+0x25c>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 030f 	and.w	r3, r3, #15
 80038ba:	683a      	ldr	r2, [r7, #0]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d001      	beq.n	80038c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e105      	b.n	8003ad0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d010      	beq.n	80038f2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689a      	ldr	r2, [r3, #8]
 80038d4:	4b81      	ldr	r3, [pc, #516]	; (8003adc <HAL_RCC_ClockConfig+0x260>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038dc:	429a      	cmp	r2, r3
 80038de:	d908      	bls.n	80038f2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038e0:	4b7e      	ldr	r3, [pc, #504]	; (8003adc <HAL_RCC_ClockConfig+0x260>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	497b      	ldr	r1, [pc, #492]	; (8003adc <HAL_RCC_ClockConfig+0x260>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d079      	beq.n	80039f2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	2b03      	cmp	r3, #3
 8003904:	d11e      	bne.n	8003944 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003906:	4b75      	ldr	r3, [pc, #468]	; (8003adc <HAL_RCC_ClockConfig+0x260>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e0dc      	b.n	8003ad0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003916:	f000 fa09 	bl	8003d2c <RCC_GetSysClockFreqFromPLLSource>
 800391a:	4603      	mov	r3, r0
 800391c:	4a70      	ldr	r2, [pc, #448]	; (8003ae0 <HAL_RCC_ClockConfig+0x264>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d946      	bls.n	80039b0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003922:	4b6e      	ldr	r3, [pc, #440]	; (8003adc <HAL_RCC_ClockConfig+0x260>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d140      	bne.n	80039b0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800392e:	4b6b      	ldr	r3, [pc, #428]	; (8003adc <HAL_RCC_ClockConfig+0x260>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003936:	4a69      	ldr	r2, [pc, #420]	; (8003adc <HAL_RCC_ClockConfig+0x260>)
 8003938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800393c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800393e:	2380      	movs	r3, #128	; 0x80
 8003940:	617b      	str	r3, [r7, #20]
 8003942:	e035      	b.n	80039b0 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	2b02      	cmp	r3, #2
 800394a:	d107      	bne.n	800395c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800394c:	4b63      	ldr	r3, [pc, #396]	; (8003adc <HAL_RCC_ClockConfig+0x260>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d115      	bne.n	8003984 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e0b9      	b.n	8003ad0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d107      	bne.n	8003974 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003964:	4b5d      	ldr	r3, [pc, #372]	; (8003adc <HAL_RCC_ClockConfig+0x260>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d109      	bne.n	8003984 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e0ad      	b.n	8003ad0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003974:	4b59      	ldr	r3, [pc, #356]	; (8003adc <HAL_RCC_ClockConfig+0x260>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800397c:	2b00      	cmp	r3, #0
 800397e:	d101      	bne.n	8003984 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e0a5      	b.n	8003ad0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003984:	f000 f8b4 	bl	8003af0 <HAL_RCC_GetSysClockFreq>
 8003988:	4603      	mov	r3, r0
 800398a:	4a55      	ldr	r2, [pc, #340]	; (8003ae0 <HAL_RCC_ClockConfig+0x264>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d90f      	bls.n	80039b0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003990:	4b52      	ldr	r3, [pc, #328]	; (8003adc <HAL_RCC_ClockConfig+0x260>)
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d109      	bne.n	80039b0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800399c:	4b4f      	ldr	r3, [pc, #316]	; (8003adc <HAL_RCC_ClockConfig+0x260>)
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039a4:	4a4d      	ldr	r2, [pc, #308]	; (8003adc <HAL_RCC_ClockConfig+0x260>)
 80039a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039aa:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80039ac:	2380      	movs	r3, #128	; 0x80
 80039ae:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039b0:	4b4a      	ldr	r3, [pc, #296]	; (8003adc <HAL_RCC_ClockConfig+0x260>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f023 0203 	bic.w	r2, r3, #3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	4947      	ldr	r1, [pc, #284]	; (8003adc <HAL_RCC_ClockConfig+0x260>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039c2:	f7fe f8c3 	bl	8001b4c <HAL_GetTick>
 80039c6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039c8:	e00a      	b.n	80039e0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039ca:	f7fe f8bf 	bl	8001b4c <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d8:	4293      	cmp	r3, r2
 80039da:	d901      	bls.n	80039e0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e077      	b.n	8003ad0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039e0:	4b3e      	ldr	r3, [pc, #248]	; (8003adc <HAL_RCC_ClockConfig+0x260>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f003 020c 	and.w	r2, r3, #12
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d1eb      	bne.n	80039ca <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	2b80      	cmp	r3, #128	; 0x80
 80039f6:	d105      	bne.n	8003a04 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80039f8:	4b38      	ldr	r3, [pc, #224]	; (8003adc <HAL_RCC_ClockConfig+0x260>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	4a37      	ldr	r2, [pc, #220]	; (8003adc <HAL_RCC_ClockConfig+0x260>)
 80039fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a02:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d010      	beq.n	8003a32 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689a      	ldr	r2, [r3, #8]
 8003a14:	4b31      	ldr	r3, [pc, #196]	; (8003adc <HAL_RCC_ClockConfig+0x260>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d208      	bcs.n	8003a32 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a20:	4b2e      	ldr	r3, [pc, #184]	; (8003adc <HAL_RCC_ClockConfig+0x260>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	492b      	ldr	r1, [pc, #172]	; (8003adc <HAL_RCC_ClockConfig+0x260>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a32:	4b29      	ldr	r3, [pc, #164]	; (8003ad8 <HAL_RCC_ClockConfig+0x25c>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 030f 	and.w	r3, r3, #15
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d210      	bcs.n	8003a62 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a40:	4b25      	ldr	r3, [pc, #148]	; (8003ad8 <HAL_RCC_ClockConfig+0x25c>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f023 020f 	bic.w	r2, r3, #15
 8003a48:	4923      	ldr	r1, [pc, #140]	; (8003ad8 <HAL_RCC_ClockConfig+0x25c>)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a50:	4b21      	ldr	r3, [pc, #132]	; (8003ad8 <HAL_RCC_ClockConfig+0x25c>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 030f 	and.w	r3, r3, #15
 8003a58:	683a      	ldr	r2, [r7, #0]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d001      	beq.n	8003a62 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e036      	b.n	8003ad0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0304 	and.w	r3, r3, #4
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d008      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a6e:	4b1b      	ldr	r3, [pc, #108]	; (8003adc <HAL_RCC_ClockConfig+0x260>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	4918      	ldr	r1, [pc, #96]	; (8003adc <HAL_RCC_ClockConfig+0x260>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0308 	and.w	r3, r3, #8
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d009      	beq.n	8003aa0 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a8c:	4b13      	ldr	r3, [pc, #76]	; (8003adc <HAL_RCC_ClockConfig+0x260>)
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	00db      	lsls	r3, r3, #3
 8003a9a:	4910      	ldr	r1, [pc, #64]	; (8003adc <HAL_RCC_ClockConfig+0x260>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003aa0:	f000 f826 	bl	8003af0 <HAL_RCC_GetSysClockFreq>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	4b0d      	ldr	r3, [pc, #52]	; (8003adc <HAL_RCC_ClockConfig+0x260>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	091b      	lsrs	r3, r3, #4
 8003aac:	f003 030f 	and.w	r3, r3, #15
 8003ab0:	490c      	ldr	r1, [pc, #48]	; (8003ae4 <HAL_RCC_ClockConfig+0x268>)
 8003ab2:	5ccb      	ldrb	r3, [r1, r3]
 8003ab4:	f003 031f 	and.w	r3, r3, #31
 8003ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8003abc:	4a0a      	ldr	r2, [pc, #40]	; (8003ae8 <HAL_RCC_ClockConfig+0x26c>)
 8003abe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003ac0:	4b0a      	ldr	r3, [pc, #40]	; (8003aec <HAL_RCC_ClockConfig+0x270>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7fd fff1 	bl	8001aac <HAL_InitTick>
 8003aca:	4603      	mov	r3, r0
 8003acc:	73fb      	strb	r3, [r7, #15]

  return status;
 8003ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3718      	adds	r7, #24
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	40022000 	.word	0x40022000
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	04c4b400 	.word	0x04c4b400
 8003ae4:	0800cfe4 	.word	0x0800cfe4
 8003ae8:	20000004 	.word	0x20000004
 8003aec:	20000008 	.word	0x20000008

08003af0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b089      	sub	sp, #36	; 0x24
 8003af4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003af6:	2300      	movs	r3, #0
 8003af8:	61fb      	str	r3, [r7, #28]
 8003afa:	2300      	movs	r3, #0
 8003afc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003afe:	4b3e      	ldr	r3, [pc, #248]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f003 030c 	and.w	r3, r3, #12
 8003b06:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b08:	4b3b      	ldr	r3, [pc, #236]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	f003 0303 	and.w	r3, r3, #3
 8003b10:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d005      	beq.n	8003b24 <HAL_RCC_GetSysClockFreq+0x34>
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	2b0c      	cmp	r3, #12
 8003b1c:	d121      	bne.n	8003b62 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d11e      	bne.n	8003b62 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003b24:	4b34      	ldr	r3, [pc, #208]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0308 	and.w	r3, r3, #8
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d107      	bne.n	8003b40 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b30:	4b31      	ldr	r3, [pc, #196]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b36:	0a1b      	lsrs	r3, r3, #8
 8003b38:	f003 030f 	and.w	r3, r3, #15
 8003b3c:	61fb      	str	r3, [r7, #28]
 8003b3e:	e005      	b.n	8003b4c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b40:	4b2d      	ldr	r3, [pc, #180]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	091b      	lsrs	r3, r3, #4
 8003b46:	f003 030f 	and.w	r3, r3, #15
 8003b4a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003b4c:	4a2b      	ldr	r2, [pc, #172]	; (8003bfc <HAL_RCC_GetSysClockFreq+0x10c>)
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b54:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d10d      	bne.n	8003b78 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b60:	e00a      	b.n	8003b78 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	2b04      	cmp	r3, #4
 8003b66:	d102      	bne.n	8003b6e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b68:	4b25      	ldr	r3, [pc, #148]	; (8003c00 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b6a:	61bb      	str	r3, [r7, #24]
 8003b6c:	e004      	b.n	8003b78 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	2b08      	cmp	r3, #8
 8003b72:	d101      	bne.n	8003b78 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b74:	4b23      	ldr	r3, [pc, #140]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b76:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	2b0c      	cmp	r3, #12
 8003b7c:	d134      	bne.n	8003be8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b7e:	4b1e      	ldr	r3, [pc, #120]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	f003 0303 	and.w	r3, r3, #3
 8003b86:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d003      	beq.n	8003b96 <HAL_RCC_GetSysClockFreq+0xa6>
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	2b03      	cmp	r3, #3
 8003b92:	d003      	beq.n	8003b9c <HAL_RCC_GetSysClockFreq+0xac>
 8003b94:	e005      	b.n	8003ba2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003b96:	4b1a      	ldr	r3, [pc, #104]	; (8003c00 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b98:	617b      	str	r3, [r7, #20]
      break;
 8003b9a:	e005      	b.n	8003ba8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003b9c:	4b19      	ldr	r3, [pc, #100]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b9e:	617b      	str	r3, [r7, #20]
      break;
 8003ba0:	e002      	b.n	8003ba8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	617b      	str	r3, [r7, #20]
      break;
 8003ba6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ba8:	4b13      	ldr	r3, [pc, #76]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	091b      	lsrs	r3, r3, #4
 8003bae:	f003 030f 	and.w	r3, r3, #15
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003bb6:	4b10      	ldr	r3, [pc, #64]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	0a1b      	lsrs	r3, r3, #8
 8003bbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	fb03 f202 	mul.w	r2, r3, r2
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bcc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003bce:	4b0a      	ldr	r3, [pc, #40]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	0e5b      	lsrs	r3, r3, #25
 8003bd4:	f003 0303 	and.w	r3, r3, #3
 8003bd8:	3301      	adds	r3, #1
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003be8:	69bb      	ldr	r3, [r7, #24]
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3724      	adds	r7, #36	; 0x24
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	40021000 	.word	0x40021000
 8003bfc:	0800cffc 	.word	0x0800cffc
 8003c00:	00f42400 	.word	0x00f42400
 8003c04:	007a1200 	.word	0x007a1200

08003c08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c0c:	4b03      	ldr	r3, [pc, #12]	; (8003c1c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	20000004 	.word	0x20000004

08003c20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003c24:	f7ff fff0 	bl	8003c08 <HAL_RCC_GetHCLKFreq>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	4b06      	ldr	r3, [pc, #24]	; (8003c44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	0a1b      	lsrs	r3, r3, #8
 8003c30:	f003 0307 	and.w	r3, r3, #7
 8003c34:	4904      	ldr	r1, [pc, #16]	; (8003c48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c36:	5ccb      	ldrb	r3, [r1, r3]
 8003c38:	f003 031f 	and.w	r3, r3, #31
 8003c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	40021000 	.word	0x40021000
 8003c48:	0800cff4 	.word	0x0800cff4

08003c4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c50:	f7ff ffda 	bl	8003c08 <HAL_RCC_GetHCLKFreq>
 8003c54:	4602      	mov	r2, r0
 8003c56:	4b06      	ldr	r3, [pc, #24]	; (8003c70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	0adb      	lsrs	r3, r3, #11
 8003c5c:	f003 0307 	and.w	r3, r3, #7
 8003c60:	4904      	ldr	r1, [pc, #16]	; (8003c74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c62:	5ccb      	ldrb	r3, [r1, r3]
 8003c64:	f003 031f 	and.w	r3, r3, #31
 8003c68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40021000 	.word	0x40021000
 8003c74:	0800cff4 	.word	0x0800cff4

08003c78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c80:	2300      	movs	r3, #0
 8003c82:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c84:	4b27      	ldr	r3, [pc, #156]	; (8003d24 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d003      	beq.n	8003c98 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003c90:	f7ff f8a4 	bl	8002ddc <HAL_PWREx_GetVoltageRange>
 8003c94:	6178      	str	r0, [r7, #20]
 8003c96:	e014      	b.n	8003cc2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c98:	4b22      	ldr	r3, [pc, #136]	; (8003d24 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c9c:	4a21      	ldr	r2, [pc, #132]	; (8003d24 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ca2:	6593      	str	r3, [r2, #88]	; 0x58
 8003ca4:	4b1f      	ldr	r3, [pc, #124]	; (8003d24 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cac:	60fb      	str	r3, [r7, #12]
 8003cae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003cb0:	f7ff f894 	bl	8002ddc <HAL_PWREx_GetVoltageRange>
 8003cb4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003cb6:	4b1b      	ldr	r3, [pc, #108]	; (8003d24 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cba:	4a1a      	ldr	r2, [pc, #104]	; (8003d24 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003cbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cc0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cc8:	d10b      	bne.n	8003ce2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2b80      	cmp	r3, #128	; 0x80
 8003cce:	d913      	bls.n	8003cf8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2ba0      	cmp	r3, #160	; 0xa0
 8003cd4:	d902      	bls.n	8003cdc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	613b      	str	r3, [r7, #16]
 8003cda:	e00d      	b.n	8003cf8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003cdc:	2301      	movs	r3, #1
 8003cde:	613b      	str	r3, [r7, #16]
 8003ce0:	e00a      	b.n	8003cf8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2b7f      	cmp	r3, #127	; 0x7f
 8003ce6:	d902      	bls.n	8003cee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003ce8:	2302      	movs	r3, #2
 8003cea:	613b      	str	r3, [r7, #16]
 8003cec:	e004      	b.n	8003cf8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2b70      	cmp	r3, #112	; 0x70
 8003cf2:	d101      	bne.n	8003cf8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003cf8:	4b0b      	ldr	r3, [pc, #44]	; (8003d28 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f023 020f 	bic.w	r2, r3, #15
 8003d00:	4909      	ldr	r1, [pc, #36]	; (8003d28 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003d08:	4b07      	ldr	r3, [pc, #28]	; (8003d28 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 030f 	and.w	r3, r3, #15
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d001      	beq.n	8003d1a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e000      	b.n	8003d1c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3718      	adds	r7, #24
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	40021000 	.word	0x40021000
 8003d28:	40022000 	.word	0x40022000

08003d2c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b087      	sub	sp, #28
 8003d30:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d32:	4b2d      	ldr	r3, [pc, #180]	; (8003de8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	f003 0303 	and.w	r3, r3, #3
 8003d3a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2b03      	cmp	r3, #3
 8003d40:	d00b      	beq.n	8003d5a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2b03      	cmp	r3, #3
 8003d46:	d825      	bhi.n	8003d94 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d008      	beq.n	8003d60 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d11f      	bne.n	8003d94 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003d54:	4b25      	ldr	r3, [pc, #148]	; (8003dec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003d56:	613b      	str	r3, [r7, #16]
    break;
 8003d58:	e01f      	b.n	8003d9a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003d5a:	4b25      	ldr	r3, [pc, #148]	; (8003df0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003d5c:	613b      	str	r3, [r7, #16]
    break;
 8003d5e:	e01c      	b.n	8003d9a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d60:	4b21      	ldr	r3, [pc, #132]	; (8003de8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0308 	and.w	r3, r3, #8
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d107      	bne.n	8003d7c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d6c:	4b1e      	ldr	r3, [pc, #120]	; (8003de8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d72:	0a1b      	lsrs	r3, r3, #8
 8003d74:	f003 030f 	and.w	r3, r3, #15
 8003d78:	617b      	str	r3, [r7, #20]
 8003d7a:	e005      	b.n	8003d88 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d7c:	4b1a      	ldr	r3, [pc, #104]	; (8003de8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	091b      	lsrs	r3, r3, #4
 8003d82:	f003 030f 	and.w	r3, r3, #15
 8003d86:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003d88:	4a1a      	ldr	r2, [pc, #104]	; (8003df4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d90:	613b      	str	r3, [r7, #16]
    break;
 8003d92:	e002      	b.n	8003d9a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003d94:	2300      	movs	r3, #0
 8003d96:	613b      	str	r3, [r7, #16]
    break;
 8003d98:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d9a:	4b13      	ldr	r3, [pc, #76]	; (8003de8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	091b      	lsrs	r3, r3, #4
 8003da0:	f003 030f 	and.w	r3, r3, #15
 8003da4:	3301      	adds	r3, #1
 8003da6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003da8:	4b0f      	ldr	r3, [pc, #60]	; (8003de8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	0a1b      	lsrs	r3, r3, #8
 8003dae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	fb03 f202 	mul.w	r2, r3, r2
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dbe:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003dc0:	4b09      	ldr	r3, [pc, #36]	; (8003de8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	0e5b      	lsrs	r3, r3, #25
 8003dc6:	f003 0303 	and.w	r3, r3, #3
 8003dca:	3301      	adds	r3, #1
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003dda:	683b      	ldr	r3, [r7, #0]
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	371c      	adds	r7, #28
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr
 8003de8:	40021000 	.word	0x40021000
 8003dec:	00f42400 	.word	0x00f42400
 8003df0:	007a1200 	.word	0x007a1200
 8003df4:	0800cffc 	.word	0x0800cffc

08003df8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b086      	sub	sp, #24
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e00:	2300      	movs	r3, #0
 8003e02:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e04:	2300      	movs	r3, #0
 8003e06:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d040      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e18:	2b80      	cmp	r3, #128	; 0x80
 8003e1a:	d02a      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003e1c:	2b80      	cmp	r3, #128	; 0x80
 8003e1e:	d825      	bhi.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003e20:	2b60      	cmp	r3, #96	; 0x60
 8003e22:	d026      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003e24:	2b60      	cmp	r3, #96	; 0x60
 8003e26:	d821      	bhi.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003e28:	2b40      	cmp	r3, #64	; 0x40
 8003e2a:	d006      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003e2c:	2b40      	cmp	r3, #64	; 0x40
 8003e2e:	d81d      	bhi.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d009      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003e34:	2b20      	cmp	r3, #32
 8003e36:	d010      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003e38:	e018      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e3a:	4b89      	ldr	r3, [pc, #548]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	4a88      	ldr	r2, [pc, #544]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e44:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e46:	e015      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	3304      	adds	r3, #4
 8003e4c:	2100      	movs	r1, #0
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 fb3e 	bl	80044d0 <RCCEx_PLLSAI1_Config>
 8003e54:	4603      	mov	r3, r0
 8003e56:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e58:	e00c      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	3320      	adds	r3, #32
 8003e5e:	2100      	movs	r1, #0
 8003e60:	4618      	mov	r0, r3
 8003e62:	f000 fc29 	bl	80046b8 <RCCEx_PLLSAI2_Config>
 8003e66:	4603      	mov	r3, r0
 8003e68:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e6a:	e003      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	74fb      	strb	r3, [r7, #19]
      break;
 8003e70:	e000      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003e72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e74:	7cfb      	ldrb	r3, [r7, #19]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10b      	bne.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e7a:	4b79      	ldr	r3, [pc, #484]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e80:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e88:	4975      	ldr	r1, [pc, #468]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003e90:	e001      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e92:	7cfb      	ldrb	r3, [r7, #19]
 8003e94:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d047      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eaa:	d030      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003eac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eb0:	d82a      	bhi.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003eb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003eb6:	d02a      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003eb8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ebc:	d824      	bhi.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003ebe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ec2:	d008      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003ec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ec8:	d81e      	bhi.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00a      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003ece:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ed2:	d010      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003ed4:	e018      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ed6:	4b62      	ldr	r3, [pc, #392]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	4a61      	ldr	r2, [pc, #388]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ee0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ee2:	e015      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	3304      	adds	r3, #4
 8003ee8:	2100      	movs	r1, #0
 8003eea:	4618      	mov	r0, r3
 8003eec:	f000 faf0 	bl	80044d0 <RCCEx_PLLSAI1_Config>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ef4:	e00c      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	3320      	adds	r3, #32
 8003efa:	2100      	movs	r1, #0
 8003efc:	4618      	mov	r0, r3
 8003efe:	f000 fbdb 	bl	80046b8 <RCCEx_PLLSAI2_Config>
 8003f02:	4603      	mov	r3, r0
 8003f04:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f06:	e003      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	74fb      	strb	r3, [r7, #19]
      break;
 8003f0c:	e000      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003f0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f10:	7cfb      	ldrb	r3, [r7, #19]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10b      	bne.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f16:	4b52      	ldr	r3, [pc, #328]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f18:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f24:	494e      	ldr	r1, [pc, #312]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003f2c:	e001      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f2e:	7cfb      	ldrb	r3, [r7, #19]
 8003f30:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f000 809f 	beq.w	800407e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f40:	2300      	movs	r3, #0
 8003f42:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f44:	4b46      	ldr	r3, [pc, #280]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d101      	bne.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003f50:	2301      	movs	r3, #1
 8003f52:	e000      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003f54:	2300      	movs	r3, #0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00d      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f5a:	4b41      	ldr	r3, [pc, #260]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f5e:	4a40      	ldr	r2, [pc, #256]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f64:	6593      	str	r3, [r2, #88]	; 0x58
 8003f66:	4b3e      	ldr	r3, [pc, #248]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f6e:	60bb      	str	r3, [r7, #8]
 8003f70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f72:	2301      	movs	r3, #1
 8003f74:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f76:	4b3b      	ldr	r3, [pc, #236]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a3a      	ldr	r2, [pc, #232]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f80:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f82:	f7fd fde3 	bl	8001b4c <HAL_GetTick>
 8003f86:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f88:	e009      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f8a:	f7fd fddf 	bl	8001b4c <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d902      	bls.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	74fb      	strb	r3, [r7, #19]
        break;
 8003f9c:	e005      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f9e:	4b31      	ldr	r3, [pc, #196]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d0ef      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003faa:	7cfb      	ldrb	r3, [r7, #19]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d15b      	bne.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003fb0:	4b2b      	ldr	r3, [pc, #172]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fba:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d01f      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d019      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003fce:	4b24      	ldr	r3, [pc, #144]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fd8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003fda:	4b21      	ldr	r3, [pc, #132]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe0:	4a1f      	ldr	r2, [pc, #124]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fe6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003fea:	4b1d      	ldr	r3, [pc, #116]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff0:	4a1b      	ldr	r2, [pc, #108]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ff2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ff6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ffa:	4a19      	ldr	r2, [pc, #100]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	f003 0301 	and.w	r3, r3, #1
 8004008:	2b00      	cmp	r3, #0
 800400a:	d016      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800400c:	f7fd fd9e 	bl	8001b4c <HAL_GetTick>
 8004010:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004012:	e00b      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004014:	f7fd fd9a 	bl	8001b4c <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004022:	4293      	cmp	r3, r2
 8004024:	d902      	bls.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	74fb      	strb	r3, [r7, #19]
            break;
 800402a:	e006      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800402c:	4b0c      	ldr	r3, [pc, #48]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800402e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d0ec      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800403a:	7cfb      	ldrb	r3, [r7, #19]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10c      	bne.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004040:	4b07      	ldr	r3, [pc, #28]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004046:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004050:	4903      	ldr	r1, [pc, #12]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004052:	4313      	orrs	r3, r2
 8004054:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004058:	e008      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800405a:	7cfb      	ldrb	r3, [r7, #19]
 800405c:	74bb      	strb	r3, [r7, #18]
 800405e:	e005      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004060:	40021000 	.word	0x40021000
 8004064:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004068:	7cfb      	ldrb	r3, [r7, #19]
 800406a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800406c:	7c7b      	ldrb	r3, [r7, #17]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d105      	bne.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004072:	4ba0      	ldr	r3, [pc, #640]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004076:	4a9f      	ldr	r2, [pc, #636]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004078:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800407c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00a      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800408a:	4b9a      	ldr	r3, [pc, #616]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800408c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004090:	f023 0203 	bic.w	r2, r3, #3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004098:	4996      	ldr	r1, [pc, #600]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800409a:	4313      	orrs	r3, r2
 800409c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00a      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040ac:	4b91      	ldr	r3, [pc, #580]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b2:	f023 020c 	bic.w	r2, r3, #12
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ba:	498e      	ldr	r1, [pc, #568]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0304 	and.w	r3, r3, #4
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00a      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040ce:	4b89      	ldr	r3, [pc, #548]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040dc:	4985      	ldr	r1, [pc, #532]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0308 	and.w	r3, r3, #8
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00a      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040f0:	4b80      	ldr	r3, [pc, #512]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040fe:	497d      	ldr	r1, [pc, #500]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004100:	4313      	orrs	r3, r2
 8004102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0310 	and.w	r3, r3, #16
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00a      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004112:	4b78      	ldr	r3, [pc, #480]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004118:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004120:	4974      	ldr	r1, [pc, #464]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004122:	4313      	orrs	r3, r2
 8004124:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0320 	and.w	r3, r3, #32
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00a      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004134:	4b6f      	ldr	r3, [pc, #444]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800413a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004142:	496c      	ldr	r1, [pc, #432]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004144:	4313      	orrs	r3, r2
 8004146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00a      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004156:	4b67      	ldr	r3, [pc, #412]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800415c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004164:	4963      	ldr	r1, [pc, #396]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004166:	4313      	orrs	r3, r2
 8004168:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00a      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004178:	4b5e      	ldr	r3, [pc, #376]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800417a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004186:	495b      	ldr	r1, [pc, #364]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004188:	4313      	orrs	r3, r2
 800418a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00a      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800419a:	4b56      	ldr	r3, [pc, #344]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800419c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a8:	4952      	ldr	r1, [pc, #328]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00a      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041bc:	4b4d      	ldr	r3, [pc, #308]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ca:	494a      	ldr	r1, [pc, #296]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00a      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041de:	4b45      	ldr	r3, [pc, #276]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ec:	4941      	ldr	r1, [pc, #260]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00a      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004200:	4b3c      	ldr	r3, [pc, #240]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004202:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004206:	f023 0203 	bic.w	r2, r3, #3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800420e:	4939      	ldr	r1, [pc, #228]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004210:	4313      	orrs	r3, r2
 8004212:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d028      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004222:	4b34      	ldr	r3, [pc, #208]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004228:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004230:	4930      	ldr	r1, [pc, #192]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004232:	4313      	orrs	r3, r2
 8004234:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800423c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004240:	d106      	bne.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004242:	4b2c      	ldr	r3, [pc, #176]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	4a2b      	ldr	r2, [pc, #172]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004248:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800424c:	60d3      	str	r3, [r2, #12]
 800424e:	e011      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004254:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004258:	d10c      	bne.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	3304      	adds	r3, #4
 800425e:	2101      	movs	r1, #1
 8004260:	4618      	mov	r0, r3
 8004262:	f000 f935 	bl	80044d0 <RCCEx_PLLSAI1_Config>
 8004266:	4603      	mov	r3, r0
 8004268:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800426a:	7cfb      	ldrb	r3, [r7, #19]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d001      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004270:	7cfb      	ldrb	r3, [r7, #19]
 8004272:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d04d      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004284:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004288:	d108      	bne.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800428a:	4b1a      	ldr	r3, [pc, #104]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800428c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004290:	4a18      	ldr	r2, [pc, #96]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004292:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004296:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800429a:	e012      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800429c:	4b15      	ldr	r3, [pc, #84]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800429e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042a2:	4a14      	ldr	r2, [pc, #80]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042a8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80042ac:	4b11      	ldr	r3, [pc, #68]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042ba:	490e      	ldr	r1, [pc, #56]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042ca:	d106      	bne.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042cc:	4b09      	ldr	r3, [pc, #36]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	4a08      	ldr	r2, [pc, #32]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042d6:	60d3      	str	r3, [r2, #12]
 80042d8:	e020      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042e2:	d109      	bne.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80042e4:	4b03      	ldr	r3, [pc, #12]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	4a02      	ldr	r2, [pc, #8]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042ee:	60d3      	str	r3, [r2, #12]
 80042f0:	e014      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x524>
 80042f2:	bf00      	nop
 80042f4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004300:	d10c      	bne.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	3304      	adds	r3, #4
 8004306:	2101      	movs	r1, #1
 8004308:	4618      	mov	r0, r3
 800430a:	f000 f8e1 	bl	80044d0 <RCCEx_PLLSAI1_Config>
 800430e:	4603      	mov	r3, r0
 8004310:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004312:	7cfb      	ldrb	r3, [r7, #19]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d001      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004318:	7cfb      	ldrb	r3, [r7, #19]
 800431a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d028      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004328:	4b68      	ldr	r3, [pc, #416]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800432a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800432e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004336:	4965      	ldr	r1, [pc, #404]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004338:	4313      	orrs	r3, r2
 800433a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004342:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004346:	d106      	bne.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004348:	4b60      	ldr	r3, [pc, #384]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	4a5f      	ldr	r2, [pc, #380]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800434e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004352:	60d3      	str	r3, [r2, #12]
 8004354:	e011      	b.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800435a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800435e:	d10c      	bne.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	3304      	adds	r3, #4
 8004364:	2101      	movs	r1, #1
 8004366:	4618      	mov	r0, r3
 8004368:	f000 f8b2 	bl	80044d0 <RCCEx_PLLSAI1_Config>
 800436c:	4603      	mov	r3, r0
 800436e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004370:	7cfb      	ldrb	r3, [r7, #19]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d001      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004376:	7cfb      	ldrb	r3, [r7, #19]
 8004378:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d01e      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004386:	4b51      	ldr	r3, [pc, #324]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800438c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004396:	494d      	ldr	r1, [pc, #308]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004398:	4313      	orrs	r3, r2
 800439a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043a8:	d10c      	bne.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	3304      	adds	r3, #4
 80043ae:	2102      	movs	r1, #2
 80043b0:	4618      	mov	r0, r3
 80043b2:	f000 f88d 	bl	80044d0 <RCCEx_PLLSAI1_Config>
 80043b6:	4603      	mov	r3, r0
 80043b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043ba:	7cfb      	ldrb	r3, [r7, #19]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d001      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80043c0:	7cfb      	ldrb	r3, [r7, #19]
 80043c2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d00b      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043d0:	4b3e      	ldr	r3, [pc, #248]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80043d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043d6:	f023 0204 	bic.w	r2, r3, #4
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043e0:	493a      	ldr	r1, [pc, #232]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00b      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80043f4:	4b35      	ldr	r3, [pc, #212]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80043f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043fa:	f023 0218 	bic.w	r2, r3, #24
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004404:	4931      	ldr	r1, [pc, #196]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004406:	4313      	orrs	r3, r2
 8004408:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d035      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004418:	4b2c      	ldr	r3, [pc, #176]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a2b      	ldr	r2, [pc, #172]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800441e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004422:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004424:	f7fd fb92 	bl	8001b4c <HAL_GetTick>
 8004428:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800442a:	e009      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800442c:	f7fd fb8e 	bl	8001b4c <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	2b02      	cmp	r3, #2
 8004438:	d902      	bls.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	74fb      	strb	r3, [r7, #19]
        break;
 800443e:	e005      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004440:	4b22      	ldr	r3, [pc, #136]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1ef      	bne.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 800444c:	7cfb      	ldrb	r3, [r7, #19]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d113      	bne.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8004452:	4b1e      	ldr	r3, [pc, #120]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004454:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004458:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004462:	491a      	ldr	r1, [pc, #104]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004464:	4313      	orrs	r3, r2
 8004466:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	3320      	adds	r3, #32
 800446e:	2102      	movs	r1, #2
 8004470:	4618      	mov	r0, r3
 8004472:	f000 f921 	bl	80046b8 <RCCEx_PLLSAI2_Config>
 8004476:	4603      	mov	r3, r0
 8004478:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800447a:	7cfb      	ldrb	r3, [r7, #19]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d001      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8004480:	7cfb      	ldrb	r3, [r7, #19]
 8004482:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d017      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004490:	4b0e      	ldr	r3, [pc, #56]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004492:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004496:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a0:	490a      	ldr	r1, [pc, #40]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044b2:	d105      	bne.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044b4:	4b05      	ldr	r3, [pc, #20]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	4a04      	ldr	r2, [pc, #16]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80044ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044be:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80044c0:	7cbb      	ldrb	r3, [r7, #18]
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3718      	adds	r7, #24
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	40021000 	.word	0x40021000

080044d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044da:	2300      	movs	r3, #0
 80044dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044de:	4b72      	ldr	r3, [pc, #456]	; (80046a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	f003 0303 	and.w	r3, r3, #3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00e      	beq.n	8004508 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80044ea:	4b6f      	ldr	r3, [pc, #444]	; (80046a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	f003 0203 	and.w	r2, r3, #3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d103      	bne.n	8004502 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
       ||
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d142      	bne.n	8004588 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	73fb      	strb	r3, [r7, #15]
 8004506:	e03f      	b.n	8004588 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2b03      	cmp	r3, #3
 800450e:	d018      	beq.n	8004542 <RCCEx_PLLSAI1_Config+0x72>
 8004510:	2b03      	cmp	r3, #3
 8004512:	d825      	bhi.n	8004560 <RCCEx_PLLSAI1_Config+0x90>
 8004514:	2b01      	cmp	r3, #1
 8004516:	d002      	beq.n	800451e <RCCEx_PLLSAI1_Config+0x4e>
 8004518:	2b02      	cmp	r3, #2
 800451a:	d009      	beq.n	8004530 <RCCEx_PLLSAI1_Config+0x60>
 800451c:	e020      	b.n	8004560 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800451e:	4b62      	ldr	r3, [pc, #392]	; (80046a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d11d      	bne.n	8004566 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800452e:	e01a      	b.n	8004566 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004530:	4b5d      	ldr	r3, [pc, #372]	; (80046a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004538:	2b00      	cmp	r3, #0
 800453a:	d116      	bne.n	800456a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004540:	e013      	b.n	800456a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004542:	4b59      	ldr	r3, [pc, #356]	; (80046a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d10f      	bne.n	800456e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800454e:	4b56      	ldr	r3, [pc, #344]	; (80046a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d109      	bne.n	800456e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800455e:	e006      	b.n	800456e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	73fb      	strb	r3, [r7, #15]
      break;
 8004564:	e004      	b.n	8004570 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004566:	bf00      	nop
 8004568:	e002      	b.n	8004570 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800456a:	bf00      	nop
 800456c:	e000      	b.n	8004570 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800456e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004570:	7bfb      	ldrb	r3, [r7, #15]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d108      	bne.n	8004588 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004576:	4b4c      	ldr	r3, [pc, #304]	; (80046a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	f023 0203 	bic.w	r2, r3, #3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4949      	ldr	r1, [pc, #292]	; (80046a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004584:	4313      	orrs	r3, r2
 8004586:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004588:	7bfb      	ldrb	r3, [r7, #15]
 800458a:	2b00      	cmp	r3, #0
 800458c:	f040 8086 	bne.w	800469c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004590:	4b45      	ldr	r3, [pc, #276]	; (80046a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a44      	ldr	r2, [pc, #272]	; (80046a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004596:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800459a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800459c:	f7fd fad6 	bl	8001b4c <HAL_GetTick>
 80045a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045a2:	e009      	b.n	80045b8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045a4:	f7fd fad2 	bl	8001b4c <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d902      	bls.n	80045b8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	73fb      	strb	r3, [r7, #15]
        break;
 80045b6:	e005      	b.n	80045c4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045b8:	4b3b      	ldr	r3, [pc, #236]	; (80046a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1ef      	bne.n	80045a4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80045c4:	7bfb      	ldrb	r3, [r7, #15]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d168      	bne.n	800469c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d113      	bne.n	80045f8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045d0:	4b35      	ldr	r3, [pc, #212]	; (80046a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045d2:	691a      	ldr	r2, [r3, #16]
 80045d4:	4b35      	ldr	r3, [pc, #212]	; (80046ac <RCCEx_PLLSAI1_Config+0x1dc>)
 80045d6:	4013      	ands	r3, r2
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	6892      	ldr	r2, [r2, #8]
 80045dc:	0211      	lsls	r1, r2, #8
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	68d2      	ldr	r2, [r2, #12]
 80045e2:	06d2      	lsls	r2, r2, #27
 80045e4:	4311      	orrs	r1, r2
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	6852      	ldr	r2, [r2, #4]
 80045ea:	3a01      	subs	r2, #1
 80045ec:	0112      	lsls	r2, r2, #4
 80045ee:	430a      	orrs	r2, r1
 80045f0:	492d      	ldr	r1, [pc, #180]	; (80046a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	610b      	str	r3, [r1, #16]
 80045f6:	e02d      	b.n	8004654 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d115      	bne.n	800462a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045fe:	4b2a      	ldr	r3, [pc, #168]	; (80046a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004600:	691a      	ldr	r2, [r3, #16]
 8004602:	4b2b      	ldr	r3, [pc, #172]	; (80046b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004604:	4013      	ands	r3, r2
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	6892      	ldr	r2, [r2, #8]
 800460a:	0211      	lsls	r1, r2, #8
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	6912      	ldr	r2, [r2, #16]
 8004610:	0852      	lsrs	r2, r2, #1
 8004612:	3a01      	subs	r2, #1
 8004614:	0552      	lsls	r2, r2, #21
 8004616:	4311      	orrs	r1, r2
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	6852      	ldr	r2, [r2, #4]
 800461c:	3a01      	subs	r2, #1
 800461e:	0112      	lsls	r2, r2, #4
 8004620:	430a      	orrs	r2, r1
 8004622:	4921      	ldr	r1, [pc, #132]	; (80046a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004624:	4313      	orrs	r3, r2
 8004626:	610b      	str	r3, [r1, #16]
 8004628:	e014      	b.n	8004654 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800462a:	4b1f      	ldr	r3, [pc, #124]	; (80046a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800462c:	691a      	ldr	r2, [r3, #16]
 800462e:	4b21      	ldr	r3, [pc, #132]	; (80046b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004630:	4013      	ands	r3, r2
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	6892      	ldr	r2, [r2, #8]
 8004636:	0211      	lsls	r1, r2, #8
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	6952      	ldr	r2, [r2, #20]
 800463c:	0852      	lsrs	r2, r2, #1
 800463e:	3a01      	subs	r2, #1
 8004640:	0652      	lsls	r2, r2, #25
 8004642:	4311      	orrs	r1, r2
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	6852      	ldr	r2, [r2, #4]
 8004648:	3a01      	subs	r2, #1
 800464a:	0112      	lsls	r2, r2, #4
 800464c:	430a      	orrs	r2, r1
 800464e:	4916      	ldr	r1, [pc, #88]	; (80046a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004650:	4313      	orrs	r3, r2
 8004652:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004654:	4b14      	ldr	r3, [pc, #80]	; (80046a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a13      	ldr	r2, [pc, #76]	; (80046a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800465a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800465e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004660:	f7fd fa74 	bl	8001b4c <HAL_GetTick>
 8004664:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004666:	e009      	b.n	800467c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004668:	f7fd fa70 	bl	8001b4c <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	2b02      	cmp	r3, #2
 8004674:	d902      	bls.n	800467c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	73fb      	strb	r3, [r7, #15]
          break;
 800467a:	e005      	b.n	8004688 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800467c:	4b0a      	ldr	r3, [pc, #40]	; (80046a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d0ef      	beq.n	8004668 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004688:	7bfb      	ldrb	r3, [r7, #15]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d106      	bne.n	800469c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800468e:	4b06      	ldr	r3, [pc, #24]	; (80046a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004690:	691a      	ldr	r2, [r3, #16]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	4904      	ldr	r1, [pc, #16]	; (80046a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004698:	4313      	orrs	r3, r2
 800469a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800469c:	7bfb      	ldrb	r3, [r7, #15]
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	40021000 	.word	0x40021000
 80046ac:	07ff800f 	.word	0x07ff800f
 80046b0:	ff9f800f 	.word	0xff9f800f
 80046b4:	f9ff800f 	.word	0xf9ff800f

080046b8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046c2:	2300      	movs	r3, #0
 80046c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80046c6:	4b72      	ldr	r3, [pc, #456]	; (8004890 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	f003 0303 	and.w	r3, r3, #3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00e      	beq.n	80046f0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80046d2:	4b6f      	ldr	r3, [pc, #444]	; (8004890 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	f003 0203 	and.w	r2, r3, #3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d103      	bne.n	80046ea <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
       ||
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d142      	bne.n	8004770 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	73fb      	strb	r3, [r7, #15]
 80046ee:	e03f      	b.n	8004770 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2b03      	cmp	r3, #3
 80046f6:	d018      	beq.n	800472a <RCCEx_PLLSAI2_Config+0x72>
 80046f8:	2b03      	cmp	r3, #3
 80046fa:	d825      	bhi.n	8004748 <RCCEx_PLLSAI2_Config+0x90>
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d002      	beq.n	8004706 <RCCEx_PLLSAI2_Config+0x4e>
 8004700:	2b02      	cmp	r3, #2
 8004702:	d009      	beq.n	8004718 <RCCEx_PLLSAI2_Config+0x60>
 8004704:	e020      	b.n	8004748 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004706:	4b62      	ldr	r3, [pc, #392]	; (8004890 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d11d      	bne.n	800474e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004716:	e01a      	b.n	800474e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004718:	4b5d      	ldr	r3, [pc, #372]	; (8004890 <RCCEx_PLLSAI2_Config+0x1d8>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004720:	2b00      	cmp	r3, #0
 8004722:	d116      	bne.n	8004752 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004728:	e013      	b.n	8004752 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800472a:	4b59      	ldr	r3, [pc, #356]	; (8004890 <RCCEx_PLLSAI2_Config+0x1d8>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10f      	bne.n	8004756 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004736:	4b56      	ldr	r3, [pc, #344]	; (8004890 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d109      	bne.n	8004756 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004746:	e006      	b.n	8004756 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	73fb      	strb	r3, [r7, #15]
      break;
 800474c:	e004      	b.n	8004758 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800474e:	bf00      	nop
 8004750:	e002      	b.n	8004758 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004752:	bf00      	nop
 8004754:	e000      	b.n	8004758 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004756:	bf00      	nop
    }

    if(status == HAL_OK)
 8004758:	7bfb      	ldrb	r3, [r7, #15]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d108      	bne.n	8004770 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800475e:	4b4c      	ldr	r3, [pc, #304]	; (8004890 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	f023 0203 	bic.w	r2, r3, #3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4949      	ldr	r1, [pc, #292]	; (8004890 <RCCEx_PLLSAI2_Config+0x1d8>)
 800476c:	4313      	orrs	r3, r2
 800476e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004770:	7bfb      	ldrb	r3, [r7, #15]
 8004772:	2b00      	cmp	r3, #0
 8004774:	f040 8086 	bne.w	8004884 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004778:	4b45      	ldr	r3, [pc, #276]	; (8004890 <RCCEx_PLLSAI2_Config+0x1d8>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a44      	ldr	r2, [pc, #272]	; (8004890 <RCCEx_PLLSAI2_Config+0x1d8>)
 800477e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004782:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004784:	f7fd f9e2 	bl	8001b4c <HAL_GetTick>
 8004788:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800478a:	e009      	b.n	80047a0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800478c:	f7fd f9de 	bl	8001b4c <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b02      	cmp	r3, #2
 8004798:	d902      	bls.n	80047a0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	73fb      	strb	r3, [r7, #15]
        break;
 800479e:	e005      	b.n	80047ac <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80047a0:	4b3b      	ldr	r3, [pc, #236]	; (8004890 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1ef      	bne.n	800478c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80047ac:	7bfb      	ldrb	r3, [r7, #15]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d168      	bne.n	8004884 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d113      	bne.n	80047e0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047b8:	4b35      	ldr	r3, [pc, #212]	; (8004890 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047ba:	695a      	ldr	r2, [r3, #20]
 80047bc:	4b35      	ldr	r3, [pc, #212]	; (8004894 <RCCEx_PLLSAI2_Config+0x1dc>)
 80047be:	4013      	ands	r3, r2
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	6892      	ldr	r2, [r2, #8]
 80047c4:	0211      	lsls	r1, r2, #8
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	68d2      	ldr	r2, [r2, #12]
 80047ca:	06d2      	lsls	r2, r2, #27
 80047cc:	4311      	orrs	r1, r2
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	6852      	ldr	r2, [r2, #4]
 80047d2:	3a01      	subs	r2, #1
 80047d4:	0112      	lsls	r2, r2, #4
 80047d6:	430a      	orrs	r2, r1
 80047d8:	492d      	ldr	r1, [pc, #180]	; (8004890 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	614b      	str	r3, [r1, #20]
 80047de:	e02d      	b.n	800483c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d115      	bne.n	8004812 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047e6:	4b2a      	ldr	r3, [pc, #168]	; (8004890 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047e8:	695a      	ldr	r2, [r3, #20]
 80047ea:	4b2b      	ldr	r3, [pc, #172]	; (8004898 <RCCEx_PLLSAI2_Config+0x1e0>)
 80047ec:	4013      	ands	r3, r2
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	6892      	ldr	r2, [r2, #8]
 80047f2:	0211      	lsls	r1, r2, #8
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	6912      	ldr	r2, [r2, #16]
 80047f8:	0852      	lsrs	r2, r2, #1
 80047fa:	3a01      	subs	r2, #1
 80047fc:	0552      	lsls	r2, r2, #21
 80047fe:	4311      	orrs	r1, r2
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	6852      	ldr	r2, [r2, #4]
 8004804:	3a01      	subs	r2, #1
 8004806:	0112      	lsls	r2, r2, #4
 8004808:	430a      	orrs	r2, r1
 800480a:	4921      	ldr	r1, [pc, #132]	; (8004890 <RCCEx_PLLSAI2_Config+0x1d8>)
 800480c:	4313      	orrs	r3, r2
 800480e:	614b      	str	r3, [r1, #20]
 8004810:	e014      	b.n	800483c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004812:	4b1f      	ldr	r3, [pc, #124]	; (8004890 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004814:	695a      	ldr	r2, [r3, #20]
 8004816:	4b21      	ldr	r3, [pc, #132]	; (800489c <RCCEx_PLLSAI2_Config+0x1e4>)
 8004818:	4013      	ands	r3, r2
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	6892      	ldr	r2, [r2, #8]
 800481e:	0211      	lsls	r1, r2, #8
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	6952      	ldr	r2, [r2, #20]
 8004824:	0852      	lsrs	r2, r2, #1
 8004826:	3a01      	subs	r2, #1
 8004828:	0652      	lsls	r2, r2, #25
 800482a:	4311      	orrs	r1, r2
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	6852      	ldr	r2, [r2, #4]
 8004830:	3a01      	subs	r2, #1
 8004832:	0112      	lsls	r2, r2, #4
 8004834:	430a      	orrs	r2, r1
 8004836:	4916      	ldr	r1, [pc, #88]	; (8004890 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004838:	4313      	orrs	r3, r2
 800483a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800483c:	4b14      	ldr	r3, [pc, #80]	; (8004890 <RCCEx_PLLSAI2_Config+0x1d8>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a13      	ldr	r2, [pc, #76]	; (8004890 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004846:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004848:	f7fd f980 	bl	8001b4c <HAL_GetTick>
 800484c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800484e:	e009      	b.n	8004864 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004850:	f7fd f97c 	bl	8001b4c <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b02      	cmp	r3, #2
 800485c:	d902      	bls.n	8004864 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	73fb      	strb	r3, [r7, #15]
          break;
 8004862:	e005      	b.n	8004870 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004864:	4b0a      	ldr	r3, [pc, #40]	; (8004890 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800486c:	2b00      	cmp	r3, #0
 800486e:	d0ef      	beq.n	8004850 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004870:	7bfb      	ldrb	r3, [r7, #15]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d106      	bne.n	8004884 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004876:	4b06      	ldr	r3, [pc, #24]	; (8004890 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004878:	695a      	ldr	r2, [r3, #20]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	4904      	ldr	r1, [pc, #16]	; (8004890 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004880:	4313      	orrs	r3, r2
 8004882:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004884:	7bfb      	ldrb	r3, [r7, #15]
}
 8004886:	4618      	mov	r0, r3
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	40021000 	.word	0x40021000
 8004894:	07ff800f 	.word	0x07ff800f
 8004898:	ff9f800f 	.word	0xff9f800f
 800489c:	f9ff800f 	.word	0xf9ff800f

080048a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e049      	b.n	8004946 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d106      	bne.n	80048cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f7fc ff48 	bl	800175c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2202      	movs	r2, #2
 80048d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	3304      	adds	r3, #4
 80048dc:	4619      	mov	r1, r3
 80048de:	4610      	mov	r0, r2
 80048e0:	f000 fde8 	bl	80054b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3708      	adds	r7, #8
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
	...

08004950 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800495e:	b2db      	uxtb	r3, r3
 8004960:	2b01      	cmp	r3, #1
 8004962:	d001      	beq.n	8004968 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e047      	b.n	80049f8 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2202      	movs	r2, #2
 800496c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a23      	ldr	r2, [pc, #140]	; (8004a04 <HAL_TIM_Base_Start+0xb4>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d01d      	beq.n	80049b6 <HAL_TIM_Base_Start+0x66>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004982:	d018      	beq.n	80049b6 <HAL_TIM_Base_Start+0x66>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a1f      	ldr	r2, [pc, #124]	; (8004a08 <HAL_TIM_Base_Start+0xb8>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d013      	beq.n	80049b6 <HAL_TIM_Base_Start+0x66>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a1e      	ldr	r2, [pc, #120]	; (8004a0c <HAL_TIM_Base_Start+0xbc>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d00e      	beq.n	80049b6 <HAL_TIM_Base_Start+0x66>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a1c      	ldr	r2, [pc, #112]	; (8004a10 <HAL_TIM_Base_Start+0xc0>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d009      	beq.n	80049b6 <HAL_TIM_Base_Start+0x66>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a1b      	ldr	r2, [pc, #108]	; (8004a14 <HAL_TIM_Base_Start+0xc4>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d004      	beq.n	80049b6 <HAL_TIM_Base_Start+0x66>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a19      	ldr	r2, [pc, #100]	; (8004a18 <HAL_TIM_Base_Start+0xc8>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d115      	bne.n	80049e2 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	689a      	ldr	r2, [r3, #8]
 80049bc:	4b17      	ldr	r3, [pc, #92]	; (8004a1c <HAL_TIM_Base_Start+0xcc>)
 80049be:	4013      	ands	r3, r2
 80049c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2b06      	cmp	r3, #6
 80049c6:	d015      	beq.n	80049f4 <HAL_TIM_Base_Start+0xa4>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049ce:	d011      	beq.n	80049f4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f042 0201 	orr.w	r2, r2, #1
 80049de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049e0:	e008      	b.n	80049f4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f042 0201 	orr.w	r2, r2, #1
 80049f0:	601a      	str	r2, [r3, #0]
 80049f2:	e000      	b.n	80049f6 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3714      	adds	r7, #20
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr
 8004a04:	40012c00 	.word	0x40012c00
 8004a08:	40000400 	.word	0x40000400
 8004a0c:	40000800 	.word	0x40000800
 8004a10:	40000c00 	.word	0x40000c00
 8004a14:	40013400 	.word	0x40013400
 8004a18:	40014000 	.word	0x40014000
 8004a1c:	00010007 	.word	0x00010007

08004a20 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	6a1a      	ldr	r2, [r3, #32]
 8004a2e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004a32:	4013      	ands	r3, r2
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d10f      	bne.n	8004a58 <HAL_TIM_Base_Stop+0x38>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	6a1a      	ldr	r2, [r3, #32]
 8004a3e:	f240 4344 	movw	r3, #1092	; 0x444
 8004a42:	4013      	ands	r3, r2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d107      	bne.n	8004a58 <HAL_TIM_Base_Stop+0x38>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f022 0201 	bic.w	r2, r2, #1
 8004a56:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b082      	sub	sp, #8
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d101      	bne.n	8004a80 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e049      	b.n	8004b14 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d106      	bne.n	8004a9a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 f841 	bl	8004b1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2202      	movs	r2, #2
 8004a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	3304      	adds	r3, #4
 8004aaa:	4619      	mov	r1, r3
 8004aac:	4610      	mov	r0, r2
 8004aae:	f000 fd01 	bl	80054b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2201      	movs	r2, #1
 8004aee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2201      	movs	r2, #1
 8004af6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2201      	movs	r2, #1
 8004afe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3708      	adds	r7, #8
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d109      	bne.n	8004b54 <HAL_TIM_PWM_Start+0x24>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	bf14      	ite	ne
 8004b4c:	2301      	movne	r3, #1
 8004b4e:	2300      	moveq	r3, #0
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	e03c      	b.n	8004bce <HAL_TIM_PWM_Start+0x9e>
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	2b04      	cmp	r3, #4
 8004b58:	d109      	bne.n	8004b6e <HAL_TIM_PWM_Start+0x3e>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	bf14      	ite	ne
 8004b66:	2301      	movne	r3, #1
 8004b68:	2300      	moveq	r3, #0
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	e02f      	b.n	8004bce <HAL_TIM_PWM_Start+0x9e>
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	2b08      	cmp	r3, #8
 8004b72:	d109      	bne.n	8004b88 <HAL_TIM_PWM_Start+0x58>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	bf14      	ite	ne
 8004b80:	2301      	movne	r3, #1
 8004b82:	2300      	moveq	r3, #0
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	e022      	b.n	8004bce <HAL_TIM_PWM_Start+0x9e>
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	2b0c      	cmp	r3, #12
 8004b8c:	d109      	bne.n	8004ba2 <HAL_TIM_PWM_Start+0x72>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	bf14      	ite	ne
 8004b9a:	2301      	movne	r3, #1
 8004b9c:	2300      	moveq	r3, #0
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	e015      	b.n	8004bce <HAL_TIM_PWM_Start+0x9e>
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	2b10      	cmp	r3, #16
 8004ba6:	d109      	bne.n	8004bbc <HAL_TIM_PWM_Start+0x8c>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	bf14      	ite	ne
 8004bb4:	2301      	movne	r3, #1
 8004bb6:	2300      	moveq	r3, #0
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	e008      	b.n	8004bce <HAL_TIM_PWM_Start+0x9e>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	bf14      	ite	ne
 8004bc8:	2301      	movne	r3, #1
 8004bca:	2300      	moveq	r3, #0
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d001      	beq.n	8004bd6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e09c      	b.n	8004d10 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d104      	bne.n	8004be6 <HAL_TIM_PWM_Start+0xb6>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2202      	movs	r2, #2
 8004be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004be4:	e023      	b.n	8004c2e <HAL_TIM_PWM_Start+0xfe>
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	2b04      	cmp	r3, #4
 8004bea:	d104      	bne.n	8004bf6 <HAL_TIM_PWM_Start+0xc6>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2202      	movs	r2, #2
 8004bf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bf4:	e01b      	b.n	8004c2e <HAL_TIM_PWM_Start+0xfe>
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	2b08      	cmp	r3, #8
 8004bfa:	d104      	bne.n	8004c06 <HAL_TIM_PWM_Start+0xd6>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2202      	movs	r2, #2
 8004c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c04:	e013      	b.n	8004c2e <HAL_TIM_PWM_Start+0xfe>
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	2b0c      	cmp	r3, #12
 8004c0a:	d104      	bne.n	8004c16 <HAL_TIM_PWM_Start+0xe6>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2202      	movs	r2, #2
 8004c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c14:	e00b      	b.n	8004c2e <HAL_TIM_PWM_Start+0xfe>
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	2b10      	cmp	r3, #16
 8004c1a:	d104      	bne.n	8004c26 <HAL_TIM_PWM_Start+0xf6>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2202      	movs	r2, #2
 8004c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c24:	e003      	b.n	8004c2e <HAL_TIM_PWM_Start+0xfe>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2202      	movs	r2, #2
 8004c2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2201      	movs	r2, #1
 8004c34:	6839      	ldr	r1, [r7, #0]
 8004c36:	4618      	mov	r0, r3
 8004c38:	f001 f846 	bl	8005cc8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a35      	ldr	r2, [pc, #212]	; (8004d18 <HAL_TIM_PWM_Start+0x1e8>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d013      	beq.n	8004c6e <HAL_TIM_PWM_Start+0x13e>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a34      	ldr	r2, [pc, #208]	; (8004d1c <HAL_TIM_PWM_Start+0x1ec>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d00e      	beq.n	8004c6e <HAL_TIM_PWM_Start+0x13e>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a32      	ldr	r2, [pc, #200]	; (8004d20 <HAL_TIM_PWM_Start+0x1f0>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d009      	beq.n	8004c6e <HAL_TIM_PWM_Start+0x13e>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a31      	ldr	r2, [pc, #196]	; (8004d24 <HAL_TIM_PWM_Start+0x1f4>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d004      	beq.n	8004c6e <HAL_TIM_PWM_Start+0x13e>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a2f      	ldr	r2, [pc, #188]	; (8004d28 <HAL_TIM_PWM_Start+0x1f8>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d101      	bne.n	8004c72 <HAL_TIM_PWM_Start+0x142>
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e000      	b.n	8004c74 <HAL_TIM_PWM_Start+0x144>
 8004c72:	2300      	movs	r3, #0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d007      	beq.n	8004c88 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c86:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a22      	ldr	r2, [pc, #136]	; (8004d18 <HAL_TIM_PWM_Start+0x1e8>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d01d      	beq.n	8004cce <HAL_TIM_PWM_Start+0x19e>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c9a:	d018      	beq.n	8004cce <HAL_TIM_PWM_Start+0x19e>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a22      	ldr	r2, [pc, #136]	; (8004d2c <HAL_TIM_PWM_Start+0x1fc>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d013      	beq.n	8004cce <HAL_TIM_PWM_Start+0x19e>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a21      	ldr	r2, [pc, #132]	; (8004d30 <HAL_TIM_PWM_Start+0x200>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d00e      	beq.n	8004cce <HAL_TIM_PWM_Start+0x19e>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a1f      	ldr	r2, [pc, #124]	; (8004d34 <HAL_TIM_PWM_Start+0x204>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d009      	beq.n	8004cce <HAL_TIM_PWM_Start+0x19e>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a17      	ldr	r2, [pc, #92]	; (8004d1c <HAL_TIM_PWM_Start+0x1ec>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d004      	beq.n	8004cce <HAL_TIM_PWM_Start+0x19e>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a15      	ldr	r2, [pc, #84]	; (8004d20 <HAL_TIM_PWM_Start+0x1f0>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d115      	bne.n	8004cfa <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	689a      	ldr	r2, [r3, #8]
 8004cd4:	4b18      	ldr	r3, [pc, #96]	; (8004d38 <HAL_TIM_PWM_Start+0x208>)
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2b06      	cmp	r3, #6
 8004cde:	d015      	beq.n	8004d0c <HAL_TIM_PWM_Start+0x1dc>
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ce6:	d011      	beq.n	8004d0c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f042 0201 	orr.w	r2, r2, #1
 8004cf6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cf8:	e008      	b.n	8004d0c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f042 0201 	orr.w	r2, r2, #1
 8004d08:	601a      	str	r2, [r3, #0]
 8004d0a:	e000      	b.n	8004d0e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d0c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3710      	adds	r7, #16
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	40012c00 	.word	0x40012c00
 8004d1c:	40013400 	.word	0x40013400
 8004d20:	40014000 	.word	0x40014000
 8004d24:	40014400 	.word	0x40014400
 8004d28:	40014800 	.word	0x40014800
 8004d2c:	40000400 	.word	0x40000400
 8004d30:	40000800 	.word	0x40000800
 8004d34:	40000c00 	.word	0x40000c00
 8004d38:	00010007 	.word	0x00010007

08004d3c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	6839      	ldr	r1, [r7, #0]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f000 ffba 	bl	8005cc8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a3e      	ldr	r2, [pc, #248]	; (8004e54 <HAL_TIM_PWM_Stop+0x118>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d013      	beq.n	8004d86 <HAL_TIM_PWM_Stop+0x4a>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a3d      	ldr	r2, [pc, #244]	; (8004e58 <HAL_TIM_PWM_Stop+0x11c>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d00e      	beq.n	8004d86 <HAL_TIM_PWM_Stop+0x4a>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a3b      	ldr	r2, [pc, #236]	; (8004e5c <HAL_TIM_PWM_Stop+0x120>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d009      	beq.n	8004d86 <HAL_TIM_PWM_Stop+0x4a>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a3a      	ldr	r2, [pc, #232]	; (8004e60 <HAL_TIM_PWM_Stop+0x124>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d004      	beq.n	8004d86 <HAL_TIM_PWM_Stop+0x4a>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a38      	ldr	r2, [pc, #224]	; (8004e64 <HAL_TIM_PWM_Stop+0x128>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d101      	bne.n	8004d8a <HAL_TIM_PWM_Stop+0x4e>
 8004d86:	2301      	movs	r3, #1
 8004d88:	e000      	b.n	8004d8c <HAL_TIM_PWM_Stop+0x50>
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d017      	beq.n	8004dc0 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6a1a      	ldr	r2, [r3, #32]
 8004d96:	f241 1311 	movw	r3, #4369	; 0x1111
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d10f      	bne.n	8004dc0 <HAL_TIM_PWM_Stop+0x84>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	6a1a      	ldr	r2, [r3, #32]
 8004da6:	f240 4344 	movw	r3, #1092	; 0x444
 8004daa:	4013      	ands	r3, r2
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d107      	bne.n	8004dc0 <HAL_TIM_PWM_Stop+0x84>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004dbe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6a1a      	ldr	r2, [r3, #32]
 8004dc6:	f241 1311 	movw	r3, #4369	; 0x1111
 8004dca:	4013      	ands	r3, r2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d10f      	bne.n	8004df0 <HAL_TIM_PWM_Stop+0xb4>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	6a1a      	ldr	r2, [r3, #32]
 8004dd6:	f240 4344 	movw	r3, #1092	; 0x444
 8004dda:	4013      	ands	r3, r2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d107      	bne.n	8004df0 <HAL_TIM_PWM_Stop+0xb4>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f022 0201 	bic.w	r2, r2, #1
 8004dee:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d104      	bne.n	8004e00 <HAL_TIM_PWM_Stop+0xc4>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dfe:	e023      	b.n	8004e48 <HAL_TIM_PWM_Stop+0x10c>
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	2b04      	cmp	r3, #4
 8004e04:	d104      	bne.n	8004e10 <HAL_TIM_PWM_Stop+0xd4>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e0e:	e01b      	b.n	8004e48 <HAL_TIM_PWM_Stop+0x10c>
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	2b08      	cmp	r3, #8
 8004e14:	d104      	bne.n	8004e20 <HAL_TIM_PWM_Stop+0xe4>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e1e:	e013      	b.n	8004e48 <HAL_TIM_PWM_Stop+0x10c>
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	2b0c      	cmp	r3, #12
 8004e24:	d104      	bne.n	8004e30 <HAL_TIM_PWM_Stop+0xf4>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e2e:	e00b      	b.n	8004e48 <HAL_TIM_PWM_Stop+0x10c>
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	2b10      	cmp	r3, #16
 8004e34:	d104      	bne.n	8004e40 <HAL_TIM_PWM_Stop+0x104>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e3e:	e003      	b.n	8004e48 <HAL_TIM_PWM_Stop+0x10c>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3708      	adds	r7, #8
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	40012c00 	.word	0x40012c00
 8004e58:	40013400 	.word	0x40013400
 8004e5c:	40014000 	.word	0x40014000
 8004e60:	40014400 	.word	0x40014400
 8004e64:	40014800 	.word	0x40014800

08004e68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d122      	bne.n	8004ec4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	f003 0302 	and.w	r3, r3, #2
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d11b      	bne.n	8004ec4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f06f 0202 	mvn.w	r2, #2
 8004e94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	f003 0303 	and.w	r3, r3, #3
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d003      	beq.n	8004eb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 fae3 	bl	8005476 <HAL_TIM_IC_CaptureCallback>
 8004eb0:	e005      	b.n	8004ebe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 fad5 	bl	8005462 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f000 fae6 	bl	800548a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	f003 0304 	and.w	r3, r3, #4
 8004ece:	2b04      	cmp	r3, #4
 8004ed0:	d122      	bne.n	8004f18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	f003 0304 	and.w	r3, r3, #4
 8004edc:	2b04      	cmp	r3, #4
 8004ede:	d11b      	bne.n	8004f18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f06f 0204 	mvn.w	r2, #4
 8004ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2202      	movs	r2, #2
 8004eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d003      	beq.n	8004f06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 fab9 	bl	8005476 <HAL_TIM_IC_CaptureCallback>
 8004f04:	e005      	b.n	8004f12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 faab 	bl	8005462 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f000 fabc 	bl	800548a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	f003 0308 	and.w	r3, r3, #8
 8004f22:	2b08      	cmp	r3, #8
 8004f24:	d122      	bne.n	8004f6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	f003 0308 	and.w	r3, r3, #8
 8004f30:	2b08      	cmp	r3, #8
 8004f32:	d11b      	bne.n	8004f6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f06f 0208 	mvn.w	r2, #8
 8004f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2204      	movs	r2, #4
 8004f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	69db      	ldr	r3, [r3, #28]
 8004f4a:	f003 0303 	and.w	r3, r3, #3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d003      	beq.n	8004f5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 fa8f 	bl	8005476 <HAL_TIM_IC_CaptureCallback>
 8004f58:	e005      	b.n	8004f66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 fa81 	bl	8005462 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f000 fa92 	bl	800548a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	f003 0310 	and.w	r3, r3, #16
 8004f76:	2b10      	cmp	r3, #16
 8004f78:	d122      	bne.n	8004fc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	f003 0310 	and.w	r3, r3, #16
 8004f84:	2b10      	cmp	r3, #16
 8004f86:	d11b      	bne.n	8004fc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f06f 0210 	mvn.w	r2, #16
 8004f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2208      	movs	r2, #8
 8004f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	69db      	ldr	r3, [r3, #28]
 8004f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d003      	beq.n	8004fae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 fa65 	bl	8005476 <HAL_TIM_IC_CaptureCallback>
 8004fac:	e005      	b.n	8004fba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 fa57 	bl	8005462 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 fa68 	bl	800548a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d10e      	bne.n	8004fec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	f003 0301 	and.w	r3, r3, #1
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d107      	bne.n	8004fec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f06f 0201 	mvn.w	r2, #1
 8004fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f7fc f818 	bl	800101c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ff6:	2b80      	cmp	r3, #128	; 0x80
 8004ff8:	d10e      	bne.n	8005018 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005004:	2b80      	cmp	r3, #128	; 0x80
 8005006:	d107      	bne.n	8005018 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 ff10 	bl	8005e38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005022:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005026:	d10e      	bne.n	8005046 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005032:	2b80      	cmp	r3, #128	; 0x80
 8005034:	d107      	bne.n	8005046 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800503e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 ff03 	bl	8005e4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005050:	2b40      	cmp	r3, #64	; 0x40
 8005052:	d10e      	bne.n	8005072 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800505e:	2b40      	cmp	r3, #64	; 0x40
 8005060:	d107      	bne.n	8005072 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800506a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 fa16 	bl	800549e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	f003 0320 	and.w	r3, r3, #32
 800507c:	2b20      	cmp	r3, #32
 800507e:	d10e      	bne.n	800509e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	f003 0320 	and.w	r3, r3, #32
 800508a:	2b20      	cmp	r3, #32
 800508c:	d107      	bne.n	800509e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f06f 0220 	mvn.w	r2, #32
 8005096:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 fec3 	bl	8005e24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800509e:	bf00      	nop
 80050a0:	3708      	adds	r7, #8
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
	...

080050a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b086      	sub	sp, #24
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050b4:	2300      	movs	r3, #0
 80050b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d101      	bne.n	80050c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80050c2:	2302      	movs	r3, #2
 80050c4:	e0ff      	b.n	80052c6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2b14      	cmp	r3, #20
 80050d2:	f200 80f0 	bhi.w	80052b6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80050d6:	a201      	add	r2, pc, #4	; (adr r2, 80050dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80050d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050dc:	08005131 	.word	0x08005131
 80050e0:	080052b7 	.word	0x080052b7
 80050e4:	080052b7 	.word	0x080052b7
 80050e8:	080052b7 	.word	0x080052b7
 80050ec:	08005171 	.word	0x08005171
 80050f0:	080052b7 	.word	0x080052b7
 80050f4:	080052b7 	.word	0x080052b7
 80050f8:	080052b7 	.word	0x080052b7
 80050fc:	080051b3 	.word	0x080051b3
 8005100:	080052b7 	.word	0x080052b7
 8005104:	080052b7 	.word	0x080052b7
 8005108:	080052b7 	.word	0x080052b7
 800510c:	080051f3 	.word	0x080051f3
 8005110:	080052b7 	.word	0x080052b7
 8005114:	080052b7 	.word	0x080052b7
 8005118:	080052b7 	.word	0x080052b7
 800511c:	08005235 	.word	0x08005235
 8005120:	080052b7 	.word	0x080052b7
 8005124:	080052b7 	.word	0x080052b7
 8005128:	080052b7 	.word	0x080052b7
 800512c:	08005275 	.word	0x08005275
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68b9      	ldr	r1, [r7, #8]
 8005136:	4618      	mov	r0, r3
 8005138:	f000 fa56 	bl	80055e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	699a      	ldr	r2, [r3, #24]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f042 0208 	orr.w	r2, r2, #8
 800514a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	699a      	ldr	r2, [r3, #24]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f022 0204 	bic.w	r2, r2, #4
 800515a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	6999      	ldr	r1, [r3, #24]
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	691a      	ldr	r2, [r3, #16]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	430a      	orrs	r2, r1
 800516c:	619a      	str	r2, [r3, #24]
      break;
 800516e:	e0a5      	b.n	80052bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68b9      	ldr	r1, [r7, #8]
 8005176:	4618      	mov	r0, r3
 8005178:	f000 fac6 	bl	8005708 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	699a      	ldr	r2, [r3, #24]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800518a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	699a      	ldr	r2, [r3, #24]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800519a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	6999      	ldr	r1, [r3, #24]
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	021a      	lsls	r2, r3, #8
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	430a      	orrs	r2, r1
 80051ae:	619a      	str	r2, [r3, #24]
      break;
 80051b0:	e084      	b.n	80052bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68b9      	ldr	r1, [r7, #8]
 80051b8:	4618      	mov	r0, r3
 80051ba:	f000 fb2f 	bl	800581c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	69da      	ldr	r2, [r3, #28]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f042 0208 	orr.w	r2, r2, #8
 80051cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	69da      	ldr	r2, [r3, #28]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f022 0204 	bic.w	r2, r2, #4
 80051dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	69d9      	ldr	r1, [r3, #28]
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	691a      	ldr	r2, [r3, #16]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	430a      	orrs	r2, r1
 80051ee:	61da      	str	r2, [r3, #28]
      break;
 80051f0:	e064      	b.n	80052bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68b9      	ldr	r1, [r7, #8]
 80051f8:	4618      	mov	r0, r3
 80051fa:	f000 fb97 	bl	800592c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	69da      	ldr	r2, [r3, #28]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800520c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	69da      	ldr	r2, [r3, #28]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800521c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	69d9      	ldr	r1, [r3, #28]
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	021a      	lsls	r2, r3, #8
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	430a      	orrs	r2, r1
 8005230:	61da      	str	r2, [r3, #28]
      break;
 8005232:	e043      	b.n	80052bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68b9      	ldr	r1, [r7, #8]
 800523a:	4618      	mov	r0, r3
 800523c:	f000 fbe0 	bl	8005a00 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f042 0208 	orr.w	r2, r2, #8
 800524e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f022 0204 	bic.w	r2, r2, #4
 800525e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	691a      	ldr	r2, [r3, #16]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	430a      	orrs	r2, r1
 8005270:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005272:	e023      	b.n	80052bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68b9      	ldr	r1, [r7, #8]
 800527a:	4618      	mov	r0, r3
 800527c:	f000 fc24 	bl	8005ac8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800528e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800529e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	021a      	lsls	r2, r3, #8
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	430a      	orrs	r2, r1
 80052b2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80052b4:	e002      	b.n	80052bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	75fb      	strb	r3, [r7, #23]
      break;
 80052ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80052c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3718      	adds	r7, #24
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop

080052d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052da:	2300      	movs	r3, #0
 80052dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d101      	bne.n	80052ec <HAL_TIM_ConfigClockSource+0x1c>
 80052e8:	2302      	movs	r3, #2
 80052ea:	e0b6      	b.n	800545a <HAL_TIM_ConfigClockSource+0x18a>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2202      	movs	r2, #2
 80052f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800530a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800530e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005316:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68ba      	ldr	r2, [r7, #8]
 800531e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005328:	d03e      	beq.n	80053a8 <HAL_TIM_ConfigClockSource+0xd8>
 800532a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800532e:	f200 8087 	bhi.w	8005440 <HAL_TIM_ConfigClockSource+0x170>
 8005332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005336:	f000 8086 	beq.w	8005446 <HAL_TIM_ConfigClockSource+0x176>
 800533a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800533e:	d87f      	bhi.n	8005440 <HAL_TIM_ConfigClockSource+0x170>
 8005340:	2b70      	cmp	r3, #112	; 0x70
 8005342:	d01a      	beq.n	800537a <HAL_TIM_ConfigClockSource+0xaa>
 8005344:	2b70      	cmp	r3, #112	; 0x70
 8005346:	d87b      	bhi.n	8005440 <HAL_TIM_ConfigClockSource+0x170>
 8005348:	2b60      	cmp	r3, #96	; 0x60
 800534a:	d050      	beq.n	80053ee <HAL_TIM_ConfigClockSource+0x11e>
 800534c:	2b60      	cmp	r3, #96	; 0x60
 800534e:	d877      	bhi.n	8005440 <HAL_TIM_ConfigClockSource+0x170>
 8005350:	2b50      	cmp	r3, #80	; 0x50
 8005352:	d03c      	beq.n	80053ce <HAL_TIM_ConfigClockSource+0xfe>
 8005354:	2b50      	cmp	r3, #80	; 0x50
 8005356:	d873      	bhi.n	8005440 <HAL_TIM_ConfigClockSource+0x170>
 8005358:	2b40      	cmp	r3, #64	; 0x40
 800535a:	d058      	beq.n	800540e <HAL_TIM_ConfigClockSource+0x13e>
 800535c:	2b40      	cmp	r3, #64	; 0x40
 800535e:	d86f      	bhi.n	8005440 <HAL_TIM_ConfigClockSource+0x170>
 8005360:	2b30      	cmp	r3, #48	; 0x30
 8005362:	d064      	beq.n	800542e <HAL_TIM_ConfigClockSource+0x15e>
 8005364:	2b30      	cmp	r3, #48	; 0x30
 8005366:	d86b      	bhi.n	8005440 <HAL_TIM_ConfigClockSource+0x170>
 8005368:	2b20      	cmp	r3, #32
 800536a:	d060      	beq.n	800542e <HAL_TIM_ConfigClockSource+0x15e>
 800536c:	2b20      	cmp	r3, #32
 800536e:	d867      	bhi.n	8005440 <HAL_TIM_ConfigClockSource+0x170>
 8005370:	2b00      	cmp	r3, #0
 8005372:	d05c      	beq.n	800542e <HAL_TIM_ConfigClockSource+0x15e>
 8005374:	2b10      	cmp	r3, #16
 8005376:	d05a      	beq.n	800542e <HAL_TIM_ConfigClockSource+0x15e>
 8005378:	e062      	b.n	8005440 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6818      	ldr	r0, [r3, #0]
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	6899      	ldr	r1, [r3, #8]
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	f000 fc7d 	bl	8005c88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800539c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	609a      	str	r2, [r3, #8]
      break;
 80053a6:	e04f      	b.n	8005448 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6818      	ldr	r0, [r3, #0]
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	6899      	ldr	r1, [r3, #8]
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	685a      	ldr	r2, [r3, #4]
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	f000 fc66 	bl	8005c88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	689a      	ldr	r2, [r3, #8]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053ca:	609a      	str	r2, [r3, #8]
      break;
 80053cc:	e03c      	b.n	8005448 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6818      	ldr	r0, [r3, #0]
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	6859      	ldr	r1, [r3, #4]
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	461a      	mov	r2, r3
 80053dc:	f000 fbda 	bl	8005b94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2150      	movs	r1, #80	; 0x50
 80053e6:	4618      	mov	r0, r3
 80053e8:	f000 fc33 	bl	8005c52 <TIM_ITRx_SetConfig>
      break;
 80053ec:	e02c      	b.n	8005448 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6818      	ldr	r0, [r3, #0]
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	6859      	ldr	r1, [r3, #4]
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	461a      	mov	r2, r3
 80053fc:	f000 fbf9 	bl	8005bf2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2160      	movs	r1, #96	; 0x60
 8005406:	4618      	mov	r0, r3
 8005408:	f000 fc23 	bl	8005c52 <TIM_ITRx_SetConfig>
      break;
 800540c:	e01c      	b.n	8005448 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6818      	ldr	r0, [r3, #0]
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	6859      	ldr	r1, [r3, #4]
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	461a      	mov	r2, r3
 800541c:	f000 fbba 	bl	8005b94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2140      	movs	r1, #64	; 0x40
 8005426:	4618      	mov	r0, r3
 8005428:	f000 fc13 	bl	8005c52 <TIM_ITRx_SetConfig>
      break;
 800542c:	e00c      	b.n	8005448 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4619      	mov	r1, r3
 8005438:	4610      	mov	r0, r2
 800543a:	f000 fc0a 	bl	8005c52 <TIM_ITRx_SetConfig>
      break;
 800543e:	e003      	b.n	8005448 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	73fb      	strb	r3, [r7, #15]
      break;
 8005444:	e000      	b.n	8005448 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005446:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005458:	7bfb      	ldrb	r3, [r7, #15]
}
 800545a:	4618      	mov	r0, r3
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005462:	b480      	push	{r7}
 8005464:	b083      	sub	sp, #12
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800546a:	bf00      	nop
 800546c:	370c      	adds	r7, #12
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr

08005476 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005476:	b480      	push	{r7}
 8005478:	b083      	sub	sp, #12
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800547e:	bf00      	nop
 8005480:	370c      	adds	r7, #12
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr

0800548a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800548a:	b480      	push	{r7}
 800548c:	b083      	sub	sp, #12
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005492:	bf00      	nop
 8005494:	370c      	adds	r7, #12
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr

0800549e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800549e:	b480      	push	{r7}
 80054a0:	b083      	sub	sp, #12
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054a6:	bf00      	nop
 80054a8:	370c      	adds	r7, #12
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
	...

080054b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b085      	sub	sp, #20
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a40      	ldr	r2, [pc, #256]	; (80055c8 <TIM_Base_SetConfig+0x114>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d013      	beq.n	80054f4 <TIM_Base_SetConfig+0x40>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054d2:	d00f      	beq.n	80054f4 <TIM_Base_SetConfig+0x40>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a3d      	ldr	r2, [pc, #244]	; (80055cc <TIM_Base_SetConfig+0x118>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d00b      	beq.n	80054f4 <TIM_Base_SetConfig+0x40>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a3c      	ldr	r2, [pc, #240]	; (80055d0 <TIM_Base_SetConfig+0x11c>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d007      	beq.n	80054f4 <TIM_Base_SetConfig+0x40>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a3b      	ldr	r2, [pc, #236]	; (80055d4 <TIM_Base_SetConfig+0x120>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d003      	beq.n	80054f4 <TIM_Base_SetConfig+0x40>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a3a      	ldr	r2, [pc, #232]	; (80055d8 <TIM_Base_SetConfig+0x124>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d108      	bne.n	8005506 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	4313      	orrs	r3, r2
 8005504:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a2f      	ldr	r2, [pc, #188]	; (80055c8 <TIM_Base_SetConfig+0x114>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d01f      	beq.n	800554e <TIM_Base_SetConfig+0x9a>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005514:	d01b      	beq.n	800554e <TIM_Base_SetConfig+0x9a>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a2c      	ldr	r2, [pc, #176]	; (80055cc <TIM_Base_SetConfig+0x118>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d017      	beq.n	800554e <TIM_Base_SetConfig+0x9a>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a2b      	ldr	r2, [pc, #172]	; (80055d0 <TIM_Base_SetConfig+0x11c>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d013      	beq.n	800554e <TIM_Base_SetConfig+0x9a>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a2a      	ldr	r2, [pc, #168]	; (80055d4 <TIM_Base_SetConfig+0x120>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d00f      	beq.n	800554e <TIM_Base_SetConfig+0x9a>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a29      	ldr	r2, [pc, #164]	; (80055d8 <TIM_Base_SetConfig+0x124>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d00b      	beq.n	800554e <TIM_Base_SetConfig+0x9a>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a28      	ldr	r2, [pc, #160]	; (80055dc <TIM_Base_SetConfig+0x128>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d007      	beq.n	800554e <TIM_Base_SetConfig+0x9a>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a27      	ldr	r2, [pc, #156]	; (80055e0 <TIM_Base_SetConfig+0x12c>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d003      	beq.n	800554e <TIM_Base_SetConfig+0x9a>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a26      	ldr	r2, [pc, #152]	; (80055e4 <TIM_Base_SetConfig+0x130>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d108      	bne.n	8005560 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005554:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	4313      	orrs	r3, r2
 800555e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	4313      	orrs	r3, r2
 800556c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	689a      	ldr	r2, [r3, #8]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a10      	ldr	r2, [pc, #64]	; (80055c8 <TIM_Base_SetConfig+0x114>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d00f      	beq.n	80055ac <TIM_Base_SetConfig+0xf8>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a12      	ldr	r2, [pc, #72]	; (80055d8 <TIM_Base_SetConfig+0x124>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d00b      	beq.n	80055ac <TIM_Base_SetConfig+0xf8>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a11      	ldr	r2, [pc, #68]	; (80055dc <TIM_Base_SetConfig+0x128>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d007      	beq.n	80055ac <TIM_Base_SetConfig+0xf8>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a10      	ldr	r2, [pc, #64]	; (80055e0 <TIM_Base_SetConfig+0x12c>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d003      	beq.n	80055ac <TIM_Base_SetConfig+0xf8>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a0f      	ldr	r2, [pc, #60]	; (80055e4 <TIM_Base_SetConfig+0x130>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d103      	bne.n	80055b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	691a      	ldr	r2, [r3, #16]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	615a      	str	r2, [r3, #20]
}
 80055ba:	bf00      	nop
 80055bc:	3714      	adds	r7, #20
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop
 80055c8:	40012c00 	.word	0x40012c00
 80055cc:	40000400 	.word	0x40000400
 80055d0:	40000800 	.word	0x40000800
 80055d4:	40000c00 	.word	0x40000c00
 80055d8:	40013400 	.word	0x40013400
 80055dc:	40014000 	.word	0x40014000
 80055e0:	40014400 	.word	0x40014400
 80055e4:	40014800 	.word	0x40014800

080055e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b087      	sub	sp, #28
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a1b      	ldr	r3, [r3, #32]
 80055f6:	f023 0201 	bic.w	r2, r3, #1
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a1b      	ldr	r3, [r3, #32]
 8005602:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800561a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f023 0303 	bic.w	r3, r3, #3
 8005622:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	4313      	orrs	r3, r2
 800562c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	f023 0302 	bic.w	r3, r3, #2
 8005634:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	697a      	ldr	r2, [r7, #20]
 800563c:	4313      	orrs	r3, r2
 800563e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a2c      	ldr	r2, [pc, #176]	; (80056f4 <TIM_OC1_SetConfig+0x10c>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d00f      	beq.n	8005668 <TIM_OC1_SetConfig+0x80>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a2b      	ldr	r2, [pc, #172]	; (80056f8 <TIM_OC1_SetConfig+0x110>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d00b      	beq.n	8005668 <TIM_OC1_SetConfig+0x80>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a2a      	ldr	r2, [pc, #168]	; (80056fc <TIM_OC1_SetConfig+0x114>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d007      	beq.n	8005668 <TIM_OC1_SetConfig+0x80>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a29      	ldr	r2, [pc, #164]	; (8005700 <TIM_OC1_SetConfig+0x118>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d003      	beq.n	8005668 <TIM_OC1_SetConfig+0x80>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a28      	ldr	r2, [pc, #160]	; (8005704 <TIM_OC1_SetConfig+0x11c>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d10c      	bne.n	8005682 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	f023 0308 	bic.w	r3, r3, #8
 800566e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	697a      	ldr	r2, [r7, #20]
 8005676:	4313      	orrs	r3, r2
 8005678:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	f023 0304 	bic.w	r3, r3, #4
 8005680:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a1b      	ldr	r2, [pc, #108]	; (80056f4 <TIM_OC1_SetConfig+0x10c>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d00f      	beq.n	80056aa <TIM_OC1_SetConfig+0xc2>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a1a      	ldr	r2, [pc, #104]	; (80056f8 <TIM_OC1_SetConfig+0x110>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d00b      	beq.n	80056aa <TIM_OC1_SetConfig+0xc2>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a19      	ldr	r2, [pc, #100]	; (80056fc <TIM_OC1_SetConfig+0x114>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d007      	beq.n	80056aa <TIM_OC1_SetConfig+0xc2>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a18      	ldr	r2, [pc, #96]	; (8005700 <TIM_OC1_SetConfig+0x118>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d003      	beq.n	80056aa <TIM_OC1_SetConfig+0xc2>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a17      	ldr	r2, [pc, #92]	; (8005704 <TIM_OC1_SetConfig+0x11c>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d111      	bne.n	80056ce <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	693a      	ldr	r2, [r7, #16]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	699b      	ldr	r3, [r3, #24]
 80056c8:	693a      	ldr	r2, [r7, #16]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	693a      	ldr	r2, [r7, #16]
 80056d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	685a      	ldr	r2, [r3, #4]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	697a      	ldr	r2, [r7, #20]
 80056e6:	621a      	str	r2, [r3, #32]
}
 80056e8:	bf00      	nop
 80056ea:	371c      	adds	r7, #28
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr
 80056f4:	40012c00 	.word	0x40012c00
 80056f8:	40013400 	.word	0x40013400
 80056fc:	40014000 	.word	0x40014000
 8005700:	40014400 	.word	0x40014400
 8005704:	40014800 	.word	0x40014800

08005708 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005708:	b480      	push	{r7}
 800570a:	b087      	sub	sp, #28
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a1b      	ldr	r3, [r3, #32]
 8005716:	f023 0210 	bic.w	r2, r3, #16
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a1b      	ldr	r3, [r3, #32]
 8005722:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005736:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800573a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005742:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	021b      	lsls	r3, r3, #8
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	4313      	orrs	r3, r2
 800574e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	f023 0320 	bic.w	r3, r3, #32
 8005756:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	011b      	lsls	r3, r3, #4
 800575e:	697a      	ldr	r2, [r7, #20]
 8005760:	4313      	orrs	r3, r2
 8005762:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a28      	ldr	r2, [pc, #160]	; (8005808 <TIM_OC2_SetConfig+0x100>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d003      	beq.n	8005774 <TIM_OC2_SetConfig+0x6c>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a27      	ldr	r2, [pc, #156]	; (800580c <TIM_OC2_SetConfig+0x104>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d10d      	bne.n	8005790 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800577a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	011b      	lsls	r3, r3, #4
 8005782:	697a      	ldr	r2, [r7, #20]
 8005784:	4313      	orrs	r3, r2
 8005786:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800578e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a1d      	ldr	r2, [pc, #116]	; (8005808 <TIM_OC2_SetConfig+0x100>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d00f      	beq.n	80057b8 <TIM_OC2_SetConfig+0xb0>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a1c      	ldr	r2, [pc, #112]	; (800580c <TIM_OC2_SetConfig+0x104>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d00b      	beq.n	80057b8 <TIM_OC2_SetConfig+0xb0>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a1b      	ldr	r2, [pc, #108]	; (8005810 <TIM_OC2_SetConfig+0x108>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d007      	beq.n	80057b8 <TIM_OC2_SetConfig+0xb0>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a1a      	ldr	r2, [pc, #104]	; (8005814 <TIM_OC2_SetConfig+0x10c>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d003      	beq.n	80057b8 <TIM_OC2_SetConfig+0xb0>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a19      	ldr	r2, [pc, #100]	; (8005818 <TIM_OC2_SetConfig+0x110>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d113      	bne.n	80057e0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	695b      	ldr	r3, [r3, #20]
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	693a      	ldr	r2, [r7, #16]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	693a      	ldr	r2, [r7, #16]
 80057dc:	4313      	orrs	r3, r2
 80057de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	685a      	ldr	r2, [r3, #4]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	621a      	str	r2, [r3, #32]
}
 80057fa:	bf00      	nop
 80057fc:	371c      	adds	r7, #28
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop
 8005808:	40012c00 	.word	0x40012c00
 800580c:	40013400 	.word	0x40013400
 8005810:	40014000 	.word	0x40014000
 8005814:	40014400 	.word	0x40014400
 8005818:	40014800 	.word	0x40014800

0800581c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800581c:	b480      	push	{r7}
 800581e:	b087      	sub	sp, #28
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a1b      	ldr	r3, [r3, #32]
 800582a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	69db      	ldr	r3, [r3, #28]
 8005842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800584a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800584e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f023 0303 	bic.w	r3, r3, #3
 8005856:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config
		  ->OCMode;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
  tmpccmrx |= OC_Config
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	4313      	orrs	r3, r2
 8005860:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005868:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	021b      	lsls	r3, r3, #8
 8005870:	697a      	ldr	r2, [r7, #20]
 8005872:	4313      	orrs	r3, r2
 8005874:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a27      	ldr	r2, [pc, #156]	; (8005918 <TIM_OC3_SetConfig+0xfc>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d003      	beq.n	8005886 <TIM_OC3_SetConfig+0x6a>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a26      	ldr	r2, [pc, #152]	; (800591c <TIM_OC3_SetConfig+0x100>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d10d      	bne.n	80058a2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800588c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	021b      	lsls	r3, r3, #8
 8005894:	697a      	ldr	r2, [r7, #20]
 8005896:	4313      	orrs	r3, r2
 8005898:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a1c      	ldr	r2, [pc, #112]	; (8005918 <TIM_OC3_SetConfig+0xfc>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d00f      	beq.n	80058ca <TIM_OC3_SetConfig+0xae>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a1b      	ldr	r2, [pc, #108]	; (800591c <TIM_OC3_SetConfig+0x100>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d00b      	beq.n	80058ca <TIM_OC3_SetConfig+0xae>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a1a      	ldr	r2, [pc, #104]	; (8005920 <TIM_OC3_SetConfig+0x104>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d007      	beq.n	80058ca <TIM_OC3_SetConfig+0xae>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a19      	ldr	r2, [pc, #100]	; (8005924 <TIM_OC3_SetConfig+0x108>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d003      	beq.n	80058ca <TIM_OC3_SetConfig+0xae>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a18      	ldr	r2, [pc, #96]	; (8005928 <TIM_OC3_SetConfig+0x10c>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d113      	bne.n	80058f2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	011b      	lsls	r3, r3, #4
 80058e0:	693a      	ldr	r2, [r7, #16]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	699b      	ldr	r3, [r3, #24]
 80058ea:	011b      	lsls	r3, r3, #4
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	685a      	ldr	r2, [r3, #4]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	697a      	ldr	r2, [r7, #20]
 800590a:	621a      	str	r2, [r3, #32]
}
 800590c:	bf00      	nop
 800590e:	371c      	adds	r7, #28
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr
 8005918:	40012c00 	.word	0x40012c00
 800591c:	40013400 	.word	0x40013400
 8005920:	40014000 	.word	0x40014000
 8005924:	40014400 	.word	0x40014400
 8005928:	40014800 	.word	0x40014800

0800592c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800592c:	b480      	push	{r7}
 800592e:	b087      	sub	sp, #28
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a1b      	ldr	r3, [r3, #32]
 8005946:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	69db      	ldr	r3, [r3, #28]
 8005952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800595a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800595e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005966:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	021b      	lsls	r3, r3, #8
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	4313      	orrs	r3, r2
 8005972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800597a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	031b      	lsls	r3, r3, #12
 8005982:	693a      	ldr	r2, [r7, #16]
 8005984:	4313      	orrs	r3, r2
 8005986:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a18      	ldr	r2, [pc, #96]	; (80059ec <TIM_OC4_SetConfig+0xc0>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d00f      	beq.n	80059b0 <TIM_OC4_SetConfig+0x84>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a17      	ldr	r2, [pc, #92]	; (80059f0 <TIM_OC4_SetConfig+0xc4>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d00b      	beq.n	80059b0 <TIM_OC4_SetConfig+0x84>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a16      	ldr	r2, [pc, #88]	; (80059f4 <TIM_OC4_SetConfig+0xc8>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d007      	beq.n	80059b0 <TIM_OC4_SetConfig+0x84>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a15      	ldr	r2, [pc, #84]	; (80059f8 <TIM_OC4_SetConfig+0xcc>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d003      	beq.n	80059b0 <TIM_OC4_SetConfig+0x84>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a14      	ldr	r2, [pc, #80]	; (80059fc <TIM_OC4_SetConfig+0xd0>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d109      	bne.n	80059c4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	695b      	ldr	r3, [r3, #20]
 80059bc:	019b      	lsls	r3, r3, #6
 80059be:	697a      	ldr	r2, [r7, #20]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	697a      	ldr	r2, [r7, #20]
 80059c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	685a      	ldr	r2, [r3, #4]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	693a      	ldr	r2, [r7, #16]
 80059dc:	621a      	str	r2, [r3, #32]
}
 80059de:	bf00      	nop
 80059e0:	371c      	adds	r7, #28
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	40012c00 	.word	0x40012c00
 80059f0:	40013400 	.word	0x40013400
 80059f4:	40014000 	.word	0x40014000
 80059f8:	40014400 	.word	0x40014400
 80059fc:	40014800 	.word	0x40014800

08005a00 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b087      	sub	sp, #28
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a1b      	ldr	r3, [r3, #32]
 8005a0e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005a44:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	041b      	lsls	r3, r3, #16
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a17      	ldr	r2, [pc, #92]	; (8005ab4 <TIM_OC5_SetConfig+0xb4>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d00f      	beq.n	8005a7a <TIM_OC5_SetConfig+0x7a>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a16      	ldr	r2, [pc, #88]	; (8005ab8 <TIM_OC5_SetConfig+0xb8>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d00b      	beq.n	8005a7a <TIM_OC5_SetConfig+0x7a>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a15      	ldr	r2, [pc, #84]	; (8005abc <TIM_OC5_SetConfig+0xbc>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d007      	beq.n	8005a7a <TIM_OC5_SetConfig+0x7a>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a14      	ldr	r2, [pc, #80]	; (8005ac0 <TIM_OC5_SetConfig+0xc0>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d003      	beq.n	8005a7a <TIM_OC5_SetConfig+0x7a>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a13      	ldr	r2, [pc, #76]	; (8005ac4 <TIM_OC5_SetConfig+0xc4>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d109      	bne.n	8005a8e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a80:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	021b      	lsls	r3, r3, #8
 8005a88:	697a      	ldr	r2, [r7, #20]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	697a      	ldr	r2, [r7, #20]
 8005a92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	693a      	ldr	r2, [r7, #16]
 8005aa6:	621a      	str	r2, [r3, #32]
}
 8005aa8:	bf00      	nop
 8005aaa:	371c      	adds	r7, #28
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr
 8005ab4:	40012c00 	.word	0x40012c00
 8005ab8:	40013400 	.word	0x40013400
 8005abc:	40014000 	.word	0x40014000
 8005ac0:	40014400 	.word	0x40014400
 8005ac4:	40014800 	.word	0x40014800

08005ac8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b087      	sub	sp, #28
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a1b      	ldr	r3, [r3, #32]
 8005ad6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a1b      	ldr	r3, [r3, #32]
 8005ae2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005af6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005afa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	021b      	lsls	r3, r3, #8
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	051b      	lsls	r3, r3, #20
 8005b16:	693a      	ldr	r2, [r7, #16]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a18      	ldr	r2, [pc, #96]	; (8005b80 <TIM_OC6_SetConfig+0xb8>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d00f      	beq.n	8005b44 <TIM_OC6_SetConfig+0x7c>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a17      	ldr	r2, [pc, #92]	; (8005b84 <TIM_OC6_SetConfig+0xbc>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d00b      	beq.n	8005b44 <TIM_OC6_SetConfig+0x7c>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a16      	ldr	r2, [pc, #88]	; (8005b88 <TIM_OC6_SetConfig+0xc0>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d007      	beq.n	8005b44 <TIM_OC6_SetConfig+0x7c>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a15      	ldr	r2, [pc, #84]	; (8005b8c <TIM_OC6_SetConfig+0xc4>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d003      	beq.n	8005b44 <TIM_OC6_SetConfig+0x7c>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4a14      	ldr	r2, [pc, #80]	; (8005b90 <TIM_OC6_SetConfig+0xc8>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d109      	bne.n	8005b58 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b4a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	695b      	ldr	r3, [r3, #20]
 8005b50:	029b      	lsls	r3, r3, #10
 8005b52:	697a      	ldr	r2, [r7, #20]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	685a      	ldr	r2, [r3, #4]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	693a      	ldr	r2, [r7, #16]
 8005b70:	621a      	str	r2, [r3, #32]
}
 8005b72:	bf00      	nop
 8005b74:	371c      	adds	r7, #28
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop
 8005b80:	40012c00 	.word	0x40012c00
 8005b84:	40013400 	.word	0x40013400
 8005b88:	40014000 	.word	0x40014000
 8005b8c:	40014400 	.word	0x40014400
 8005b90:	40014800 	.word	0x40014800

08005b94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b087      	sub	sp, #28
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6a1b      	ldr	r3, [r3, #32]
 8005ba4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6a1b      	ldr	r3, [r3, #32]
 8005baa:	f023 0201 	bic.w	r2, r3, #1
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	011b      	lsls	r3, r3, #4
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	f023 030a 	bic.w	r3, r3, #10
 8005bd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	697a      	ldr	r2, [r7, #20]
 8005be4:	621a      	str	r2, [r3, #32]
}
 8005be6:	bf00      	nop
 8005be8:	371c      	adds	r7, #28
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr

08005bf2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bf2:	b480      	push	{r7}
 8005bf4:	b087      	sub	sp, #28
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	60f8      	str	r0, [r7, #12]
 8005bfa:	60b9      	str	r1, [r7, #8]
 8005bfc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6a1b      	ldr	r3, [r3, #32]
 8005c02:	f023 0210 	bic.w	r2, r3, #16
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6a1b      	ldr	r3, [r3, #32]
 8005c14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	031b      	lsls	r3, r3, #12
 8005c22:	697a      	ldr	r2, [r7, #20]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	011b      	lsls	r3, r3, #4
 8005c34:	693a      	ldr	r2, [r7, #16]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	697a      	ldr	r2, [r7, #20]
 8005c3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	693a      	ldr	r2, [r7, #16]
 8005c44:	621a      	str	r2, [r3, #32]
}
 8005c46:	bf00      	nop
 8005c48:	371c      	adds	r7, #28
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr

08005c52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c52:	b480      	push	{r7}
 8005c54:	b085      	sub	sp, #20
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
 8005c5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c6a:	683a      	ldr	r2, [r7, #0]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	f043 0307 	orr.w	r3, r3, #7
 8005c74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	609a      	str	r2, [r3, #8]
}
 8005c7c:	bf00      	nop
 8005c7e:	3714      	adds	r7, #20
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b087      	sub	sp, #28
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	607a      	str	r2, [r7, #4]
 8005c94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ca2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	021a      	lsls	r2, r3, #8
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	431a      	orrs	r2, r3
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	697a      	ldr	r2, [r7, #20]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	697a      	ldr	r2, [r7, #20]
 8005cba:	609a      	str	r2, [r3, #8]
}
 8005cbc:	bf00      	nop
 8005cbe:	371c      	adds	r7, #28
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b087      	sub	sp, #28
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	f003 031f 	and.w	r3, r3, #31
 8005cda:	2201      	movs	r2, #1
 8005cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6a1a      	ldr	r2, [r3, #32]
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	43db      	mvns	r3, r3
 8005cea:	401a      	ands	r2, r3
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6a1a      	ldr	r2, [r3, #32]
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	f003 031f 	and.w	r3, r3, #31
 8005cfa:	6879      	ldr	r1, [r7, #4]
 8005cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8005d00:	431a      	orrs	r2, r3
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	621a      	str	r2, [r3, #32]
}
 8005d06:	bf00      	nop
 8005d08:	371c      	adds	r7, #28
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr
	...

08005d14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b085      	sub	sp, #20
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d101      	bne.n	8005d2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d28:	2302      	movs	r3, #2
 8005d2a:	e068      	b.n	8005dfe <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2202      	movs	r2, #2
 8005d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a2e      	ldr	r2, [pc, #184]	; (8005e0c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d004      	beq.n	8005d60 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a2d      	ldr	r2, [pc, #180]	; (8005e10 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d108      	bne.n	8005d72 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005d66:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a1e      	ldr	r2, [pc, #120]	; (8005e0c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d01d      	beq.n	8005dd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d9e:	d018      	beq.n	8005dd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a1b      	ldr	r2, [pc, #108]	; (8005e14 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d013      	beq.n	8005dd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a1a      	ldr	r2, [pc, #104]	; (8005e18 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d00e      	beq.n	8005dd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a18      	ldr	r2, [pc, #96]	; (8005e1c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d009      	beq.n	8005dd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a13      	ldr	r2, [pc, #76]	; (8005e10 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d004      	beq.n	8005dd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a14      	ldr	r2, [pc, #80]	; (8005e20 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d10c      	bne.n	8005dec <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	68ba      	ldr	r2, [r7, #8]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68ba      	ldr	r2, [r7, #8]
 8005dea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3714      	adds	r7, #20
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr
 8005e0a:	bf00      	nop
 8005e0c:	40012c00 	.word	0x40012c00
 8005e10:	40013400 	.word	0x40013400
 8005e14:	40000400 	.word	0x40000400
 8005e18:	40000800 	.word	0x40000800
 8005e1c:	40000c00 	.word	0x40000c00
 8005e20:	40014000 	.word	0x40014000

08005e24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e2c:	bf00      	nop
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e40:	bf00      	nop
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e54:	bf00      	nop
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d101      	bne.n	8005e72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e042      	b.n	8005ef8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d106      	bne.n	8005e8a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f7fb fc01 	bl	800168c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2224      	movs	r2, #36	; 0x24
 8005e8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f022 0201 	bic.w	r2, r2, #1
 8005ea0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 fc50 	bl	8006748 <UART_SetConfig>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d101      	bne.n	8005eb2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e022      	b.n	8005ef8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d002      	beq.n	8005ec0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 ff40 	bl	8006d40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	685a      	ldr	r2, [r3, #4]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ece:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	689a      	ldr	r2, [r3, #8]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ede:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f042 0201 	orr.w	r2, r2, #1
 8005eee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 ffc7 	bl	8006e84 <UART_CheckIdleState>
 8005ef6:	4603      	mov	r3, r0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3708      	adds	r7, #8
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b08a      	sub	sp, #40	; 0x28
 8005f04:	af02      	add	r7, sp, #8
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	603b      	str	r3, [r7, #0]
 8005f0c:	4613      	mov	r3, r2
 8005f0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f16:	2b20      	cmp	r3, #32
 8005f18:	f040 8083 	bne.w	8006022 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d002      	beq.n	8005f28 <HAL_UART_Transmit+0x28>
 8005f22:	88fb      	ldrh	r3, [r7, #6]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d101      	bne.n	8005f2c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e07b      	b.n	8006024 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d101      	bne.n	8005f3a <HAL_UART_Transmit+0x3a>
 8005f36:	2302      	movs	r3, #2
 8005f38:	e074      	b.n	8006024 <HAL_UART_Transmit+0x124>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2221      	movs	r2, #33	; 0x21
 8005f4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f52:	f7fb fdfb 	bl	8001b4c <HAL_GetTick>
 8005f56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	88fa      	ldrh	r2, [r7, #6]
 8005f5c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	88fa      	ldrh	r2, [r7, #6]
 8005f64:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f70:	d108      	bne.n	8005f84 <HAL_UART_Transmit+0x84>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d104      	bne.n	8005f84 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	61bb      	str	r3, [r7, #24]
 8005f82:	e003      	b.n	8005f8c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005f94:	e02c      	b.n	8005ff0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	9300      	str	r3, [sp, #0]
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	2180      	movs	r1, #128	; 0x80
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	f000 ffba 	bl	8006f1a <UART_WaitOnFlagUntilTimeout>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d001      	beq.n	8005fb0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005fac:	2303      	movs	r3, #3
 8005fae:	e039      	b.n	8006024 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d10b      	bne.n	8005fce <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	881b      	ldrh	r3, [r3, #0]
 8005fba:	461a      	mov	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fc4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	3302      	adds	r3, #2
 8005fca:	61bb      	str	r3, [r7, #24]
 8005fcc:	e007      	b.n	8005fde <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	781a      	ldrb	r2, [r3, #0]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	3301      	adds	r3, #1
 8005fdc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1cc      	bne.n	8005f96 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	9300      	str	r3, [sp, #0]
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	2200      	movs	r2, #0
 8006004:	2140      	movs	r1, #64	; 0x40
 8006006:	68f8      	ldr	r0, [r7, #12]
 8006008:	f000 ff87 	bl	8006f1a <UART_WaitOnFlagUntilTimeout>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d001      	beq.n	8006016 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e006      	b.n	8006024 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2220      	movs	r2, #32
 800601a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800601e:	2300      	movs	r3, #0
 8006020:	e000      	b.n	8006024 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006022:	2302      	movs	r3, #2
  }
}
 8006024:	4618      	mov	r0, r3
 8006026:	3720      	adds	r7, #32
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b08a      	sub	sp, #40	; 0x28
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	4613      	mov	r3, r2
 8006038:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006040:	2b20      	cmp	r3, #32
 8006042:	d142      	bne.n	80060ca <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d002      	beq.n	8006050 <HAL_UART_Receive_IT+0x24>
 800604a:	88fb      	ldrh	r3, [r7, #6]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d101      	bne.n	8006054 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e03b      	b.n	80060cc <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800605a:	2b01      	cmp	r3, #1
 800605c:	d101      	bne.n	8006062 <HAL_UART_Receive_IT+0x36>
 800605e:	2302      	movs	r3, #2
 8006060:	e034      	b.n	80060cc <HAL_UART_Receive_IT+0xa0>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2201      	movs	r2, #1
 8006066:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a17      	ldr	r2, [pc, #92]	; (80060d4 <HAL_UART_Receive_IT+0xa8>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d01f      	beq.n	80060ba <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006084:	2b00      	cmp	r3, #0
 8006086:	d018      	beq.n	80060ba <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	e853 3f00 	ldrex	r3, [r3]
 8006094:	613b      	str	r3, [r7, #16]
   return(result);
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800609c:	627b      	str	r3, [r7, #36]	; 0x24
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	461a      	mov	r2, r3
 80060a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a6:	623b      	str	r3, [r7, #32]
 80060a8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060aa:	69f9      	ldr	r1, [r7, #28]
 80060ac:	6a3a      	ldr	r2, [r7, #32]
 80060ae:	e841 2300 	strex	r3, r2, [r1]
 80060b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d1e6      	bne.n	8006088 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80060ba:	88fb      	ldrh	r3, [r7, #6]
 80060bc:	461a      	mov	r2, r3
 80060be:	68b9      	ldr	r1, [r7, #8]
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f000 fff3 	bl	80070ac <UART_Start_Receive_IT>
 80060c6:	4603      	mov	r3, r0
 80060c8:	e000      	b.n	80060cc <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80060ca:	2302      	movs	r3, #2
  }
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3728      	adds	r7, #40	; 0x28
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	40008000 	.word	0x40008000

080060d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b0ba      	sub	sp, #232	; 0xe8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	69db      	ldr	r3, [r3, #28]
 80060e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80060fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006102:	f640 030f 	movw	r3, #2063	; 0x80f
 8006106:	4013      	ands	r3, r2
 8006108:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800610c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006110:	2b00      	cmp	r3, #0
 8006112:	d11b      	bne.n	800614c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006118:	f003 0320 	and.w	r3, r3, #32
 800611c:	2b00      	cmp	r3, #0
 800611e:	d015      	beq.n	800614c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006124:	f003 0320 	and.w	r3, r3, #32
 8006128:	2b00      	cmp	r3, #0
 800612a:	d105      	bne.n	8006138 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800612c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006134:	2b00      	cmp	r3, #0
 8006136:	d009      	beq.n	800614c <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800613c:	2b00      	cmp	r3, #0
 800613e:	f000 82d6 	beq.w	80066ee <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	4798      	blx	r3
      }
      return;
 800614a:	e2d0      	b.n	80066ee <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 800614c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006150:	2b00      	cmp	r3, #0
 8006152:	f000 811f 	beq.w	8006394 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006156:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800615a:	4b8b      	ldr	r3, [pc, #556]	; (8006388 <HAL_UART_IRQHandler+0x2b0>)
 800615c:	4013      	ands	r3, r2
 800615e:	2b00      	cmp	r3, #0
 8006160:	d106      	bne.n	8006170 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006162:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006166:	4b89      	ldr	r3, [pc, #548]	; (800638c <HAL_UART_IRQHandler+0x2b4>)
 8006168:	4013      	ands	r3, r2
 800616a:	2b00      	cmp	r3, #0
 800616c:	f000 8112 	beq.w	8006394 <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006174:	f003 0301 	and.w	r3, r3, #1
 8006178:	2b00      	cmp	r3, #0
 800617a:	d011      	beq.n	80061a0 <HAL_UART_IRQHandler+0xc8>
 800617c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006184:	2b00      	cmp	r3, #0
 8006186:	d00b      	beq.n	80061a0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2201      	movs	r2, #1
 800618e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006196:	f043 0201 	orr.w	r2, r3, #1
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061a4:	f003 0302 	and.w	r3, r3, #2
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d011      	beq.n	80061d0 <HAL_UART_IRQHandler+0xf8>
 80061ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061b0:	f003 0301 	and.w	r3, r3, #1
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d00b      	beq.n	80061d0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2202      	movs	r2, #2
 80061be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061c6:	f043 0204 	orr.w	r2, r3, #4
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061d4:	f003 0304 	and.w	r3, r3, #4
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d011      	beq.n	8006200 <HAL_UART_IRQHandler+0x128>
 80061dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061e0:	f003 0301 	and.w	r3, r3, #1
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d00b      	beq.n	8006200 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2204      	movs	r2, #4
 80061ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061f6:	f043 0202 	orr.w	r2, r3, #2
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006204:	f003 0308 	and.w	r3, r3, #8
 8006208:	2b00      	cmp	r3, #0
 800620a:	d017      	beq.n	800623c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800620c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006210:	f003 0320 	and.w	r3, r3, #32
 8006214:	2b00      	cmp	r3, #0
 8006216:	d105      	bne.n	8006224 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006218:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800621c:	4b5a      	ldr	r3, [pc, #360]	; (8006388 <HAL_UART_IRQHandler+0x2b0>)
 800621e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006220:	2b00      	cmp	r3, #0
 8006222:	d00b      	beq.n	800623c <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2208      	movs	r2, #8
 800622a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006232:	f043 0208 	orr.w	r2, r3, #8
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800623c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006240:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006244:	2b00      	cmp	r3, #0
 8006246:	d012      	beq.n	800626e <HAL_UART_IRQHandler+0x196>
 8006248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800624c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006250:	2b00      	cmp	r3, #0
 8006252:	d00c      	beq.n	800626e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800625c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006264:	f043 0220 	orr.w	r2, r3, #32
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006274:	2b00      	cmp	r3, #0
 8006276:	f000 823c 	beq.w	80066f2 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800627a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800627e:	f003 0320 	and.w	r3, r3, #32
 8006282:	2b00      	cmp	r3, #0
 8006284:	d013      	beq.n	80062ae <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006286:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800628a:	f003 0320 	and.w	r3, r3, #32
 800628e:	2b00      	cmp	r3, #0
 8006290:	d105      	bne.n	800629e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006292:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800629a:	2b00      	cmp	r3, #0
 800629c:	d007      	beq.n	80062ae <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d003      	beq.n	80062ae <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c2:	2b40      	cmp	r3, #64	; 0x40
 80062c4:	d005      	beq.n	80062d2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80062c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d04f      	beq.n	8006372 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f001 f814 	bl	8007300 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e2:	2b40      	cmp	r3, #64	; 0x40
 80062e4:	d141      	bne.n	800636a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	3308      	adds	r3, #8
 80062ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062f4:	e853 3f00 	ldrex	r3, [r3]
 80062f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80062fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006300:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006304:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	3308      	adds	r3, #8
 800630e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006312:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006316:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800631a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800631e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006322:	e841 2300 	strex	r3, r2, [r1]
 8006326:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800632a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d1d9      	bne.n	80062e6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006336:	2b00      	cmp	r3, #0
 8006338:	d013      	beq.n	8006362 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800633e:	4a14      	ldr	r2, [pc, #80]	; (8006390 <HAL_UART_IRQHandler+0x2b8>)
 8006340:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006346:	4618      	mov	r0, r3
 8006348:	f7fb fd9d 	bl	8001e86 <HAL_DMA_Abort_IT>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d017      	beq.n	8006382 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800635c:	4610      	mov	r0, r2
 800635e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006360:	e00f      	b.n	8006382 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 f9da 	bl	800671c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006368:	e00b      	b.n	8006382 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 f9d6 	bl	800671c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006370:	e007      	b.n	8006382 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 f9d2 	bl	800671c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006380:	e1b7      	b.n	80066f2 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006382:	bf00      	nop
    return;
 8006384:	e1b5      	b.n	80066f2 <HAL_UART_IRQHandler+0x61a>
 8006386:	bf00      	nop
 8006388:	10000001 	.word	0x10000001
 800638c:	04000120 	.word	0x04000120
 8006390:	080073cd 	.word	0x080073cd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006398:	2b01      	cmp	r3, #1
 800639a:	f040 814a 	bne.w	8006632 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800639e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063a2:	f003 0310 	and.w	r3, r3, #16
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	f000 8143 	beq.w	8006632 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80063ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063b0:	f003 0310 	and.w	r3, r3, #16
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f000 813c 	beq.w	8006632 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2210      	movs	r2, #16
 80063c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063cc:	2b40      	cmp	r3, #64	; 0x40
 80063ce:	f040 80b5 	bne.w	800653c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80063de:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	f000 8187 	beq.w	80066f6 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80063ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80063f2:	429a      	cmp	r2, r3
 80063f4:	f080 817f 	bcs.w	80066f6 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80063fe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 0320 	and.w	r3, r3, #32
 800640e:	2b00      	cmp	r3, #0
 8006410:	f040 8086 	bne.w	8006520 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006420:	e853 3f00 	ldrex	r3, [r3]
 8006424:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006428:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800642c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006430:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	461a      	mov	r2, r3
 800643a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800643e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006442:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006446:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800644a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800644e:	e841 2300 	strex	r3, r2, [r1]
 8006452:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006456:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800645a:	2b00      	cmp	r3, #0
 800645c:	d1da      	bne.n	8006414 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	3308      	adds	r3, #8
 8006464:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006466:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006468:	e853 3f00 	ldrex	r3, [r3]
 800646c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800646e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006470:	f023 0301 	bic.w	r3, r3, #1
 8006474:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	3308      	adds	r3, #8
 800647e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006482:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006486:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006488:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800648a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800648e:	e841 2300 	strex	r3, r2, [r1]
 8006492:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006494:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006496:	2b00      	cmp	r3, #0
 8006498:	d1e1      	bne.n	800645e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	3308      	adds	r3, #8
 80064a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064a4:	e853 3f00 	ldrex	r3, [r3]
 80064a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80064aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	3308      	adds	r3, #8
 80064ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80064be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80064c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80064c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80064c6:	e841 2300 	strex	r3, r2, [r1]
 80064ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80064cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1e3      	bne.n	800649a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2220      	movs	r2, #32
 80064d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064e8:	e853 3f00 	ldrex	r3, [r3]
 80064ec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80064ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064f0:	f023 0310 	bic.w	r3, r3, #16
 80064f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	461a      	mov	r2, r3
 80064fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006502:	65bb      	str	r3, [r7, #88]	; 0x58
 8006504:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006506:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006508:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800650a:	e841 2300 	strex	r3, r2, [r1]
 800650e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006510:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1e4      	bne.n	80064e0 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800651a:	4618      	mov	r0, r3
 800651c:	f7fb fc57 	bl	8001dce <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800652c:	b29b      	uxth	r3, r3
 800652e:	1ad3      	subs	r3, r2, r3
 8006530:	b29b      	uxth	r3, r3
 8006532:	4619      	mov	r1, r3
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 f8fb 	bl	8006730 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800653a:	e0dc      	b.n	80066f6 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006548:	b29b      	uxth	r3, r3
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006556:	b29b      	uxth	r3, r3
 8006558:	2b00      	cmp	r3, #0
 800655a:	f000 80ce 	beq.w	80066fa <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800655e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006562:	2b00      	cmp	r3, #0
 8006564:	f000 80c9 	beq.w	80066fa <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800656e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006570:	e853 3f00 	ldrex	r3, [r3]
 8006574:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006578:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800657c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	461a      	mov	r2, r3
 8006586:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800658a:	647b      	str	r3, [r7, #68]	; 0x44
 800658c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006590:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006592:	e841 2300 	strex	r3, r2, [r1]
 8006596:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1e4      	bne.n	8006568 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	3308      	adds	r3, #8
 80065a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a8:	e853 3f00 	ldrex	r3, [r3]
 80065ac:	623b      	str	r3, [r7, #32]
   return(result);
 80065ae:	6a3b      	ldr	r3, [r7, #32]
 80065b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065b4:	f023 0301 	bic.w	r3, r3, #1
 80065b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	3308      	adds	r3, #8
 80065c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80065c6:	633a      	str	r2, [r7, #48]	; 0x30
 80065c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065ce:	e841 2300 	strex	r3, r2, [r1]
 80065d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80065d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d1e1      	bne.n	800659e <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2220      	movs	r2, #32
 80065de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	e853 3f00 	ldrex	r3, [r3]
 80065fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f023 0310 	bic.w	r3, r3, #16
 8006602:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	461a      	mov	r2, r3
 800660c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006610:	61fb      	str	r3, [r7, #28]
 8006612:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006614:	69b9      	ldr	r1, [r7, #24]
 8006616:	69fa      	ldr	r2, [r7, #28]
 8006618:	e841 2300 	strex	r3, r2, [r1]
 800661c:	617b      	str	r3, [r7, #20]
   return(result);
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d1e4      	bne.n	80065ee <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006624:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006628:	4619      	mov	r1, r3
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 f880 	bl	8006730 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006630:	e063      	b.n	80066fa <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006636:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00e      	beq.n	800665c <HAL_UART_IRQHandler+0x584>
 800663e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006646:	2b00      	cmp	r3, #0
 8006648:	d008      	beq.n	800665c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006652:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f001 fb57 	bl	8007d08 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800665a:	e051      	b.n	8006700 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800665c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006664:	2b00      	cmp	r3, #0
 8006666:	d014      	beq.n	8006692 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800666c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006670:	2b00      	cmp	r3, #0
 8006672:	d105      	bne.n	8006680 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006674:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006678:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800667c:	2b00      	cmp	r3, #0
 800667e:	d008      	beq.n	8006692 <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006684:	2b00      	cmp	r3, #0
 8006686:	d03a      	beq.n	80066fe <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	4798      	blx	r3
    }
    return;
 8006690:	e035      	b.n	80066fe <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800669a:	2b00      	cmp	r3, #0
 800669c:	d009      	beq.n	80066b2 <HAL_UART_IRQHandler+0x5da>
 800669e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d003      	beq.n	80066b2 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 fea4 	bl	80073f8 <UART_EndTransmit_IT>
    return;
 80066b0:	e026      	b.n	8006700 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80066b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d009      	beq.n	80066d2 <HAL_UART_IRQHandler+0x5fa>
 80066be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066c2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d003      	beq.n	80066d2 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f001 fb30 	bl	8007d30 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80066d0:	e016      	b.n	8006700 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80066d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d010      	beq.n	8006700 <HAL_UART_IRQHandler+0x628>
 80066de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	da0c      	bge.n	8006700 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f001 fb18 	bl	8007d1c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80066ec:	e008      	b.n	8006700 <HAL_UART_IRQHandler+0x628>
      return;
 80066ee:	bf00      	nop
 80066f0:	e006      	b.n	8006700 <HAL_UART_IRQHandler+0x628>
    return;
 80066f2:	bf00      	nop
 80066f4:	e004      	b.n	8006700 <HAL_UART_IRQHandler+0x628>
      return;
 80066f6:	bf00      	nop
 80066f8:	e002      	b.n	8006700 <HAL_UART_IRQHandler+0x628>
      return;
 80066fa:	bf00      	nop
 80066fc:	e000      	b.n	8006700 <HAL_UART_IRQHandler+0x628>
    return;
 80066fe:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8006700:	37e8      	adds	r7, #232	; 0xe8
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop

08006708 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006708:	b480      	push	{r7}
 800670a:	b083      	sub	sp, #12
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006710:	bf00      	nop
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006724:	bf00      	nop
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006730:	b480      	push	{r7}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	460b      	mov	r3, r1
 800673a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800673c:	bf00      	nop
 800673e:	370c      	adds	r7, #12
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006748:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800674c:	b08c      	sub	sp, #48	; 0x30
 800674e:	af00      	add	r7, sp, #0
 8006750:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006752:	2300      	movs	r3, #0
 8006754:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	689a      	ldr	r2, [r3, #8]
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	691b      	ldr	r3, [r3, #16]
 8006760:	431a      	orrs	r2, r3
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	695b      	ldr	r3, [r3, #20]
 8006766:	431a      	orrs	r2, r3
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	69db      	ldr	r3, [r3, #28]
 800676c:	4313      	orrs	r3, r2
 800676e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	4baa      	ldr	r3, [pc, #680]	; (8006a20 <UART_SetConfig+0x2d8>)
 8006778:	4013      	ands	r3, r2
 800677a:	697a      	ldr	r2, [r7, #20]
 800677c:	6812      	ldr	r2, [r2, #0]
 800677e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006780:	430b      	orrs	r3, r1
 8006782:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	68da      	ldr	r2, [r3, #12]
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	430a      	orrs	r2, r1
 8006798:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	699b      	ldr	r3, [r3, #24]
 800679e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a9f      	ldr	r2, [pc, #636]	; (8006a24 <UART_SetConfig+0x2dc>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d004      	beq.n	80067b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	6a1b      	ldr	r3, [r3, #32]
 80067ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067b0:	4313      	orrs	r3, r2
 80067b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80067be:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80067c2:	697a      	ldr	r2, [r7, #20]
 80067c4:	6812      	ldr	r2, [r2, #0]
 80067c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80067c8:	430b      	orrs	r3, r1
 80067ca:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d2:	f023 010f 	bic.w	r1, r3, #15
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	430a      	orrs	r2, r1
 80067e0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a90      	ldr	r2, [pc, #576]	; (8006a28 <UART_SetConfig+0x2e0>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d125      	bne.n	8006838 <UART_SetConfig+0xf0>
 80067ec:	4b8f      	ldr	r3, [pc, #572]	; (8006a2c <UART_SetConfig+0x2e4>)
 80067ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067f2:	f003 0303 	and.w	r3, r3, #3
 80067f6:	2b03      	cmp	r3, #3
 80067f8:	d81a      	bhi.n	8006830 <UART_SetConfig+0xe8>
 80067fa:	a201      	add	r2, pc, #4	; (adr r2, 8006800 <UART_SetConfig+0xb8>)
 80067fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006800:	08006811 	.word	0x08006811
 8006804:	08006821 	.word	0x08006821
 8006808:	08006819 	.word	0x08006819
 800680c:	08006829 	.word	0x08006829
 8006810:	2301      	movs	r3, #1
 8006812:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006816:	e116      	b.n	8006a46 <UART_SetConfig+0x2fe>
 8006818:	2302      	movs	r3, #2
 800681a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800681e:	e112      	b.n	8006a46 <UART_SetConfig+0x2fe>
 8006820:	2304      	movs	r3, #4
 8006822:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006826:	e10e      	b.n	8006a46 <UART_SetConfig+0x2fe>
 8006828:	2308      	movs	r3, #8
 800682a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800682e:	e10a      	b.n	8006a46 <UART_SetConfig+0x2fe>
 8006830:	2310      	movs	r3, #16
 8006832:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006836:	e106      	b.n	8006a46 <UART_SetConfig+0x2fe>
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a7c      	ldr	r2, [pc, #496]	; (8006a30 <UART_SetConfig+0x2e8>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d138      	bne.n	80068b4 <UART_SetConfig+0x16c>
 8006842:	4b7a      	ldr	r3, [pc, #488]	; (8006a2c <UART_SetConfig+0x2e4>)
 8006844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006848:	f003 030c 	and.w	r3, r3, #12
 800684c:	2b0c      	cmp	r3, #12
 800684e:	d82d      	bhi.n	80068ac <UART_SetConfig+0x164>
 8006850:	a201      	add	r2, pc, #4	; (adr r2, 8006858 <UART_SetConfig+0x110>)
 8006852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006856:	bf00      	nop
 8006858:	0800688d 	.word	0x0800688d
 800685c:	080068ad 	.word	0x080068ad
 8006860:	080068ad 	.word	0x080068ad
 8006864:	080068ad 	.word	0x080068ad
 8006868:	0800689d 	.word	0x0800689d
 800686c:	080068ad 	.word	0x080068ad
 8006870:	080068ad 	.word	0x080068ad
 8006874:	080068ad 	.word	0x080068ad
 8006878:	08006895 	.word	0x08006895
 800687c:	080068ad 	.word	0x080068ad
 8006880:	080068ad 	.word	0x080068ad
 8006884:	080068ad 	.word	0x080068ad
 8006888:	080068a5 	.word	0x080068a5
 800688c:	2300      	movs	r3, #0
 800688e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006892:	e0d8      	b.n	8006a46 <UART_SetConfig+0x2fe>
 8006894:	2302      	movs	r3, #2
 8006896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800689a:	e0d4      	b.n	8006a46 <UART_SetConfig+0x2fe>
 800689c:	2304      	movs	r3, #4
 800689e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068a2:	e0d0      	b.n	8006a46 <UART_SetConfig+0x2fe>
 80068a4:	2308      	movs	r3, #8
 80068a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068aa:	e0cc      	b.n	8006a46 <UART_SetConfig+0x2fe>
 80068ac:	2310      	movs	r3, #16
 80068ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068b2:	e0c8      	b.n	8006a46 <UART_SetConfig+0x2fe>
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a5e      	ldr	r2, [pc, #376]	; (8006a34 <UART_SetConfig+0x2ec>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d125      	bne.n	800690a <UART_SetConfig+0x1c2>
 80068be:	4b5b      	ldr	r3, [pc, #364]	; (8006a2c <UART_SetConfig+0x2e4>)
 80068c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068c4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80068c8:	2b30      	cmp	r3, #48	; 0x30
 80068ca:	d016      	beq.n	80068fa <UART_SetConfig+0x1b2>
 80068cc:	2b30      	cmp	r3, #48	; 0x30
 80068ce:	d818      	bhi.n	8006902 <UART_SetConfig+0x1ba>
 80068d0:	2b20      	cmp	r3, #32
 80068d2:	d00a      	beq.n	80068ea <UART_SetConfig+0x1a2>
 80068d4:	2b20      	cmp	r3, #32
 80068d6:	d814      	bhi.n	8006902 <UART_SetConfig+0x1ba>
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d002      	beq.n	80068e2 <UART_SetConfig+0x19a>
 80068dc:	2b10      	cmp	r3, #16
 80068de:	d008      	beq.n	80068f2 <UART_SetConfig+0x1aa>
 80068e0:	e00f      	b.n	8006902 <UART_SetConfig+0x1ba>
 80068e2:	2300      	movs	r3, #0
 80068e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068e8:	e0ad      	b.n	8006a46 <UART_SetConfig+0x2fe>
 80068ea:	2302      	movs	r3, #2
 80068ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068f0:	e0a9      	b.n	8006a46 <UART_SetConfig+0x2fe>
 80068f2:	2304      	movs	r3, #4
 80068f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068f8:	e0a5      	b.n	8006a46 <UART_SetConfig+0x2fe>
 80068fa:	2308      	movs	r3, #8
 80068fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006900:	e0a1      	b.n	8006a46 <UART_SetConfig+0x2fe>
 8006902:	2310      	movs	r3, #16
 8006904:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006908:	e09d      	b.n	8006a46 <UART_SetConfig+0x2fe>
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a4a      	ldr	r2, [pc, #296]	; (8006a38 <UART_SetConfig+0x2f0>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d125      	bne.n	8006960 <UART_SetConfig+0x218>
 8006914:	4b45      	ldr	r3, [pc, #276]	; (8006a2c <UART_SetConfig+0x2e4>)
 8006916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800691a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800691e:	2bc0      	cmp	r3, #192	; 0xc0
 8006920:	d016      	beq.n	8006950 <UART_SetConfig+0x208>
 8006922:	2bc0      	cmp	r3, #192	; 0xc0
 8006924:	d818      	bhi.n	8006958 <UART_SetConfig+0x210>
 8006926:	2b80      	cmp	r3, #128	; 0x80
 8006928:	d00a      	beq.n	8006940 <UART_SetConfig+0x1f8>
 800692a:	2b80      	cmp	r3, #128	; 0x80
 800692c:	d814      	bhi.n	8006958 <UART_SetConfig+0x210>
 800692e:	2b00      	cmp	r3, #0
 8006930:	d002      	beq.n	8006938 <UART_SetConfig+0x1f0>
 8006932:	2b40      	cmp	r3, #64	; 0x40
 8006934:	d008      	beq.n	8006948 <UART_SetConfig+0x200>
 8006936:	e00f      	b.n	8006958 <UART_SetConfig+0x210>
 8006938:	2300      	movs	r3, #0
 800693a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800693e:	e082      	b.n	8006a46 <UART_SetConfig+0x2fe>
 8006940:	2302      	movs	r3, #2
 8006942:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006946:	e07e      	b.n	8006a46 <UART_SetConfig+0x2fe>
 8006948:	2304      	movs	r3, #4
 800694a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800694e:	e07a      	b.n	8006a46 <UART_SetConfig+0x2fe>
 8006950:	2308      	movs	r3, #8
 8006952:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006956:	e076      	b.n	8006a46 <UART_SetConfig+0x2fe>
 8006958:	2310      	movs	r3, #16
 800695a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800695e:	e072      	b.n	8006a46 <UART_SetConfig+0x2fe>
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a35      	ldr	r2, [pc, #212]	; (8006a3c <UART_SetConfig+0x2f4>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d12a      	bne.n	80069c0 <UART_SetConfig+0x278>
 800696a:	4b30      	ldr	r3, [pc, #192]	; (8006a2c <UART_SetConfig+0x2e4>)
 800696c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006970:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006974:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006978:	d01a      	beq.n	80069b0 <UART_SetConfig+0x268>
 800697a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800697e:	d81b      	bhi.n	80069b8 <UART_SetConfig+0x270>
 8006980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006984:	d00c      	beq.n	80069a0 <UART_SetConfig+0x258>
 8006986:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800698a:	d815      	bhi.n	80069b8 <UART_SetConfig+0x270>
 800698c:	2b00      	cmp	r3, #0
 800698e:	d003      	beq.n	8006998 <UART_SetConfig+0x250>
 8006990:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006994:	d008      	beq.n	80069a8 <UART_SetConfig+0x260>
 8006996:	e00f      	b.n	80069b8 <UART_SetConfig+0x270>
 8006998:	2300      	movs	r3, #0
 800699a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800699e:	e052      	b.n	8006a46 <UART_SetConfig+0x2fe>
 80069a0:	2302      	movs	r3, #2
 80069a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069a6:	e04e      	b.n	8006a46 <UART_SetConfig+0x2fe>
 80069a8:	2304      	movs	r3, #4
 80069aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069ae:	e04a      	b.n	8006a46 <UART_SetConfig+0x2fe>
 80069b0:	2308      	movs	r3, #8
 80069b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069b6:	e046      	b.n	8006a46 <UART_SetConfig+0x2fe>
 80069b8:	2310      	movs	r3, #16
 80069ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069be:	e042      	b.n	8006a46 <UART_SetConfig+0x2fe>
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a17      	ldr	r2, [pc, #92]	; (8006a24 <UART_SetConfig+0x2dc>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d13a      	bne.n	8006a40 <UART_SetConfig+0x2f8>
 80069ca:	4b18      	ldr	r3, [pc, #96]	; (8006a2c <UART_SetConfig+0x2e4>)
 80069cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80069d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80069d8:	d01a      	beq.n	8006a10 <UART_SetConfig+0x2c8>
 80069da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80069de:	d81b      	bhi.n	8006a18 <UART_SetConfig+0x2d0>
 80069e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069e4:	d00c      	beq.n	8006a00 <UART_SetConfig+0x2b8>
 80069e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069ea:	d815      	bhi.n	8006a18 <UART_SetConfig+0x2d0>
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d003      	beq.n	80069f8 <UART_SetConfig+0x2b0>
 80069f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069f4:	d008      	beq.n	8006a08 <UART_SetConfig+0x2c0>
 80069f6:	e00f      	b.n	8006a18 <UART_SetConfig+0x2d0>
 80069f8:	2300      	movs	r3, #0
 80069fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069fe:	e022      	b.n	8006a46 <UART_SetConfig+0x2fe>
 8006a00:	2302      	movs	r3, #2
 8006a02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a06:	e01e      	b.n	8006a46 <UART_SetConfig+0x2fe>
 8006a08:	2304      	movs	r3, #4
 8006a0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a0e:	e01a      	b.n	8006a46 <UART_SetConfig+0x2fe>
 8006a10:	2308      	movs	r3, #8
 8006a12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a16:	e016      	b.n	8006a46 <UART_SetConfig+0x2fe>
 8006a18:	2310      	movs	r3, #16
 8006a1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a1e:	e012      	b.n	8006a46 <UART_SetConfig+0x2fe>
 8006a20:	cfff69f3 	.word	0xcfff69f3
 8006a24:	40008000 	.word	0x40008000
 8006a28:	40013800 	.word	0x40013800
 8006a2c:	40021000 	.word	0x40021000
 8006a30:	40004400 	.word	0x40004400
 8006a34:	40004800 	.word	0x40004800
 8006a38:	40004c00 	.word	0x40004c00
 8006a3c:	40005000 	.word	0x40005000
 8006a40:	2310      	movs	r3, #16
 8006a42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4aae      	ldr	r2, [pc, #696]	; (8006d04 <UART_SetConfig+0x5bc>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	f040 8097 	bne.w	8006b80 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006a52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006a56:	2b08      	cmp	r3, #8
 8006a58:	d823      	bhi.n	8006aa2 <UART_SetConfig+0x35a>
 8006a5a:	a201      	add	r2, pc, #4	; (adr r2, 8006a60 <UART_SetConfig+0x318>)
 8006a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a60:	08006a85 	.word	0x08006a85
 8006a64:	08006aa3 	.word	0x08006aa3
 8006a68:	08006a8d 	.word	0x08006a8d
 8006a6c:	08006aa3 	.word	0x08006aa3
 8006a70:	08006a93 	.word	0x08006a93
 8006a74:	08006aa3 	.word	0x08006aa3
 8006a78:	08006aa3 	.word	0x08006aa3
 8006a7c:	08006aa3 	.word	0x08006aa3
 8006a80:	08006a9b 	.word	0x08006a9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a84:	f7fd f8cc 	bl	8003c20 <HAL_RCC_GetPCLK1Freq>
 8006a88:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a8a:	e010      	b.n	8006aae <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a8c:	4b9e      	ldr	r3, [pc, #632]	; (8006d08 <UART_SetConfig+0x5c0>)
 8006a8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006a90:	e00d      	b.n	8006aae <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a92:	f7fd f82d 	bl	8003af0 <HAL_RCC_GetSysClockFreq>
 8006a96:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a98:	e009      	b.n	8006aae <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006aa0:	e005      	b.n	8006aae <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006aac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	f000 8130 	beq.w	8006d16 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aba:	4a94      	ldr	r2, [pc, #592]	; (8006d0c <UART_SetConfig+0x5c4>)
 8006abc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ac8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	685a      	ldr	r2, [r3, #4]
 8006ace:	4613      	mov	r3, r2
 8006ad0:	005b      	lsls	r3, r3, #1
 8006ad2:	4413      	add	r3, r2
 8006ad4:	69ba      	ldr	r2, [r7, #24]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d305      	bcc.n	8006ae6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ae0:	69ba      	ldr	r2, [r7, #24]
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	d903      	bls.n	8006aee <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006aec:	e113      	b.n	8006d16 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af0:	2200      	movs	r2, #0
 8006af2:	60bb      	str	r3, [r7, #8]
 8006af4:	60fa      	str	r2, [r7, #12]
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afa:	4a84      	ldr	r2, [pc, #528]	; (8006d0c <UART_SetConfig+0x5c4>)
 8006afc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	2200      	movs	r2, #0
 8006b04:	603b      	str	r3, [r7, #0]
 8006b06:	607a      	str	r2, [r7, #4]
 8006b08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b0c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006b10:	f7f9 fb74 	bl	80001fc <__aeabi_uldivmod>
 8006b14:	4602      	mov	r2, r0
 8006b16:	460b      	mov	r3, r1
 8006b18:	4610      	mov	r0, r2
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	f04f 0200 	mov.w	r2, #0
 8006b20:	f04f 0300 	mov.w	r3, #0
 8006b24:	020b      	lsls	r3, r1, #8
 8006b26:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006b2a:	0202      	lsls	r2, r0, #8
 8006b2c:	6979      	ldr	r1, [r7, #20]
 8006b2e:	6849      	ldr	r1, [r1, #4]
 8006b30:	0849      	lsrs	r1, r1, #1
 8006b32:	2000      	movs	r0, #0
 8006b34:	460c      	mov	r4, r1
 8006b36:	4605      	mov	r5, r0
 8006b38:	eb12 0804 	adds.w	r8, r2, r4
 8006b3c:	eb43 0905 	adc.w	r9, r3, r5
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	469a      	mov	sl, r3
 8006b48:	4693      	mov	fp, r2
 8006b4a:	4652      	mov	r2, sl
 8006b4c:	465b      	mov	r3, fp
 8006b4e:	4640      	mov	r0, r8
 8006b50:	4649      	mov	r1, r9
 8006b52:	f7f9 fb53 	bl	80001fc <__aeabi_uldivmod>
 8006b56:	4602      	mov	r2, r0
 8006b58:	460b      	mov	r3, r1
 8006b5a:	4613      	mov	r3, r2
 8006b5c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b5e:	6a3b      	ldr	r3, [r7, #32]
 8006b60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b64:	d308      	bcc.n	8006b78 <UART_SetConfig+0x430>
 8006b66:	6a3b      	ldr	r3, [r7, #32]
 8006b68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b6c:	d204      	bcs.n	8006b78 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	6a3a      	ldr	r2, [r7, #32]
 8006b74:	60da      	str	r2, [r3, #12]
 8006b76:	e0ce      	b.n	8006d16 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006b7e:	e0ca      	b.n	8006d16 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	69db      	ldr	r3, [r3, #28]
 8006b84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b88:	d166      	bne.n	8006c58 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006b8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006b8e:	2b08      	cmp	r3, #8
 8006b90:	d827      	bhi.n	8006be2 <UART_SetConfig+0x49a>
 8006b92:	a201      	add	r2, pc, #4	; (adr r2, 8006b98 <UART_SetConfig+0x450>)
 8006b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b98:	08006bbd 	.word	0x08006bbd
 8006b9c:	08006bc5 	.word	0x08006bc5
 8006ba0:	08006bcd 	.word	0x08006bcd
 8006ba4:	08006be3 	.word	0x08006be3
 8006ba8:	08006bd3 	.word	0x08006bd3
 8006bac:	08006be3 	.word	0x08006be3
 8006bb0:	08006be3 	.word	0x08006be3
 8006bb4:	08006be3 	.word	0x08006be3
 8006bb8:	08006bdb 	.word	0x08006bdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bbc:	f7fd f830 	bl	8003c20 <HAL_RCC_GetPCLK1Freq>
 8006bc0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006bc2:	e014      	b.n	8006bee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bc4:	f7fd f842 	bl	8003c4c <HAL_RCC_GetPCLK2Freq>
 8006bc8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006bca:	e010      	b.n	8006bee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bcc:	4b4e      	ldr	r3, [pc, #312]	; (8006d08 <UART_SetConfig+0x5c0>)
 8006bce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006bd0:	e00d      	b.n	8006bee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bd2:	f7fc ff8d 	bl	8003af0 <HAL_RCC_GetSysClockFreq>
 8006bd6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006bd8:	e009      	b.n	8006bee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bde:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006be0:	e005      	b.n	8006bee <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006be2:	2300      	movs	r3, #0
 8006be4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006bec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	f000 8090 	beq.w	8006d16 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfa:	4a44      	ldr	r2, [pc, #272]	; (8006d0c <UART_SetConfig+0x5c4>)
 8006bfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c00:	461a      	mov	r2, r3
 8006c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c04:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c08:	005a      	lsls	r2, r3, #1
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	085b      	lsrs	r3, r3, #1
 8006c10:	441a      	add	r2, r3
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c1a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c1c:	6a3b      	ldr	r3, [r7, #32]
 8006c1e:	2b0f      	cmp	r3, #15
 8006c20:	d916      	bls.n	8006c50 <UART_SetConfig+0x508>
 8006c22:	6a3b      	ldr	r3, [r7, #32]
 8006c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c28:	d212      	bcs.n	8006c50 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c2a:	6a3b      	ldr	r3, [r7, #32]
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	f023 030f 	bic.w	r3, r3, #15
 8006c32:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c34:	6a3b      	ldr	r3, [r7, #32]
 8006c36:	085b      	lsrs	r3, r3, #1
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	f003 0307 	and.w	r3, r3, #7
 8006c3e:	b29a      	uxth	r2, r3
 8006c40:	8bfb      	ldrh	r3, [r7, #30]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	8bfa      	ldrh	r2, [r7, #30]
 8006c4c:	60da      	str	r2, [r3, #12]
 8006c4e:	e062      	b.n	8006d16 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006c56:	e05e      	b.n	8006d16 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c58:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006c5c:	2b08      	cmp	r3, #8
 8006c5e:	d828      	bhi.n	8006cb2 <UART_SetConfig+0x56a>
 8006c60:	a201      	add	r2, pc, #4	; (adr r2, 8006c68 <UART_SetConfig+0x520>)
 8006c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c66:	bf00      	nop
 8006c68:	08006c8d 	.word	0x08006c8d
 8006c6c:	08006c95 	.word	0x08006c95
 8006c70:	08006c9d 	.word	0x08006c9d
 8006c74:	08006cb3 	.word	0x08006cb3
 8006c78:	08006ca3 	.word	0x08006ca3
 8006c7c:	08006cb3 	.word	0x08006cb3
 8006c80:	08006cb3 	.word	0x08006cb3
 8006c84:	08006cb3 	.word	0x08006cb3
 8006c88:	08006cab 	.word	0x08006cab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c8c:	f7fc ffc8 	bl	8003c20 <HAL_RCC_GetPCLK1Freq>
 8006c90:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006c92:	e014      	b.n	8006cbe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c94:	f7fc ffda 	bl	8003c4c <HAL_RCC_GetPCLK2Freq>
 8006c98:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006c9a:	e010      	b.n	8006cbe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c9c:	4b1a      	ldr	r3, [pc, #104]	; (8006d08 <UART_SetConfig+0x5c0>)
 8006c9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006ca0:	e00d      	b.n	8006cbe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ca2:	f7fc ff25 	bl	8003af0 <HAL_RCC_GetSysClockFreq>
 8006ca6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ca8:	e009      	b.n	8006cbe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006caa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006cb0:	e005      	b.n	8006cbe <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006cbc:	bf00      	nop
    }

    if (pclk != 0U)
 8006cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d028      	beq.n	8006d16 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc8:	4a10      	ldr	r2, [pc, #64]	; (8006d0c <UART_SetConfig+0x5c4>)
 8006cca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cce:	461a      	mov	r2, r3
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd2:	fbb3 f2f2 	udiv	r2, r3, r2
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	085b      	lsrs	r3, r3, #1
 8006cdc:	441a      	add	r2, r3
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ce6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ce8:	6a3b      	ldr	r3, [r7, #32]
 8006cea:	2b0f      	cmp	r3, #15
 8006cec:	d910      	bls.n	8006d10 <UART_SetConfig+0x5c8>
 8006cee:	6a3b      	ldr	r3, [r7, #32]
 8006cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cf4:	d20c      	bcs.n	8006d10 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006cf6:	6a3b      	ldr	r3, [r7, #32]
 8006cf8:	b29a      	uxth	r2, r3
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	60da      	str	r2, [r3, #12]
 8006d00:	e009      	b.n	8006d16 <UART_SetConfig+0x5ce>
 8006d02:	bf00      	nop
 8006d04:	40008000 	.word	0x40008000
 8006d08:	00f42400 	.word	0x00f42400
 8006d0c:	0800d02c 	.word	0x0800d02c
      }
      else
      {
        ret = HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	2201      	movs	r2, #1
 8006d22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006d32:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3730      	adds	r7, #48	; 0x30
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006d40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d4c:	f003 0301 	and.w	r3, r3, #1
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d00a      	beq.n	8006d6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	430a      	orrs	r2, r1
 8006d68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d6e:	f003 0302 	and.w	r3, r3, #2
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00a      	beq.n	8006d8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	430a      	orrs	r2, r1
 8006d8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d90:	f003 0304 	and.w	r3, r3, #4
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d00a      	beq.n	8006dae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	430a      	orrs	r2, r1
 8006dac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db2:	f003 0308 	and.w	r3, r3, #8
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d00a      	beq.n	8006dd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	430a      	orrs	r2, r1
 8006dce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dd4:	f003 0310 	and.w	r3, r3, #16
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d00a      	beq.n	8006df2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	430a      	orrs	r2, r1
 8006df0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df6:	f003 0320 	and.w	r3, r3, #32
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d00a      	beq.n	8006e14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	430a      	orrs	r2, r1
 8006e12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d01a      	beq.n	8006e56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	430a      	orrs	r2, r1
 8006e34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e3e:	d10a      	bne.n	8006e56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	430a      	orrs	r2, r1
 8006e54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d00a      	beq.n	8006e78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	430a      	orrs	r2, r1
 8006e76:	605a      	str	r2, [r3, #4]
  }
}
 8006e78:	bf00      	nop
 8006e7a:	370c      	adds	r7, #12
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b086      	sub	sp, #24
 8006e88:	af02      	add	r7, sp, #8
 8006e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e94:	f7fa fe5a 	bl	8001b4c <HAL_GetTick>
 8006e98:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f003 0308 	and.w	r3, r3, #8
 8006ea4:	2b08      	cmp	r3, #8
 8006ea6:	d10e      	bne.n	8006ec6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ea8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006eac:	9300      	str	r3, [sp, #0]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 f82f 	bl	8006f1a <UART_WaitOnFlagUntilTimeout>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d001      	beq.n	8006ec6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ec2:	2303      	movs	r3, #3
 8006ec4:	e025      	b.n	8006f12 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f003 0304 	and.w	r3, r3, #4
 8006ed0:	2b04      	cmp	r3, #4
 8006ed2:	d10e      	bne.n	8006ef2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ed4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ed8:	9300      	str	r3, [sp, #0]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 f819 	bl	8006f1a <UART_WaitOnFlagUntilTimeout>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d001      	beq.n	8006ef2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	e00f      	b.n	8006f12 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2220      	movs	r2, #32
 8006ef6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2220      	movs	r2, #32
 8006efe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3710      	adds	r7, #16
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}

08006f1a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f1a:	b580      	push	{r7, lr}
 8006f1c:	b09c      	sub	sp, #112	; 0x70
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	60f8      	str	r0, [r7, #12]
 8006f22:	60b9      	str	r1, [r7, #8]
 8006f24:	603b      	str	r3, [r7, #0]
 8006f26:	4613      	mov	r3, r2
 8006f28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f2a:	e0a9      	b.n	8007080 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f32:	f000 80a5 	beq.w	8007080 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f36:	f7fa fe09 	bl	8001b4c <HAL_GetTick>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	1ad3      	subs	r3, r2, r3
 8006f40:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d302      	bcc.n	8006f4c <UART_WaitOnFlagUntilTimeout+0x32>
 8006f46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d140      	bne.n	8006fce <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f54:	e853 3f00 	ldrex	r3, [r3]
 8006f58:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006f5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f5c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f60:	667b      	str	r3, [r7, #100]	; 0x64
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	461a      	mov	r2, r3
 8006f68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f6c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f70:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006f72:	e841 2300 	strex	r3, r2, [r1]
 8006f76:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006f78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d1e6      	bne.n	8006f4c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	3308      	adds	r3, #8
 8006f84:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f88:	e853 3f00 	ldrex	r3, [r3]
 8006f8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f90:	f023 0301 	bic.w	r3, r3, #1
 8006f94:	663b      	str	r3, [r7, #96]	; 0x60
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	3308      	adds	r3, #8
 8006f9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006f9e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006fa0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006fa4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fa6:	e841 2300 	strex	r3, r2, [r1]
 8006faa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006fac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d1e5      	bne.n	8006f7e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2220      	movs	r2, #32
 8006fb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2220      	movs	r2, #32
 8006fbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006fca:	2303      	movs	r3, #3
 8006fcc:	e069      	b.n	80070a2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 0304 	and.w	r3, r3, #4
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d051      	beq.n	8007080 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	69db      	ldr	r3, [r3, #28]
 8006fe2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fe6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fea:	d149      	bne.n	8007080 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ff4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ffe:	e853 3f00 	ldrex	r3, [r3]
 8007002:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007006:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800700a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	461a      	mov	r2, r3
 8007012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007014:	637b      	str	r3, [r7, #52]	; 0x34
 8007016:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007018:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800701a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800701c:	e841 2300 	strex	r3, r2, [r1]
 8007020:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007024:	2b00      	cmp	r3, #0
 8007026:	d1e6      	bne.n	8006ff6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	3308      	adds	r3, #8
 800702e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	e853 3f00 	ldrex	r3, [r3]
 8007036:	613b      	str	r3, [r7, #16]
   return(result);
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	f023 0301 	bic.w	r3, r3, #1
 800703e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	3308      	adds	r3, #8
 8007046:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007048:	623a      	str	r2, [r7, #32]
 800704a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800704c:	69f9      	ldr	r1, [r7, #28]
 800704e:	6a3a      	ldr	r2, [r7, #32]
 8007050:	e841 2300 	strex	r3, r2, [r1]
 8007054:	61bb      	str	r3, [r7, #24]
   return(result);
 8007056:	69bb      	ldr	r3, [r7, #24]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d1e5      	bne.n	8007028 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2220      	movs	r2, #32
 8007060:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2220      	movs	r2, #32
 8007068:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2220      	movs	r2, #32
 8007070:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2200      	movs	r2, #0
 8007078:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800707c:	2303      	movs	r3, #3
 800707e:	e010      	b.n	80070a2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	69da      	ldr	r2, [r3, #28]
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	4013      	ands	r3, r2
 800708a:	68ba      	ldr	r2, [r7, #8]
 800708c:	429a      	cmp	r2, r3
 800708e:	bf0c      	ite	eq
 8007090:	2301      	moveq	r3, #1
 8007092:	2300      	movne	r3, #0
 8007094:	b2db      	uxtb	r3, r3
 8007096:	461a      	mov	r2, r3
 8007098:	79fb      	ldrb	r3, [r7, #7]
 800709a:	429a      	cmp	r2, r3
 800709c:	f43f af46 	beq.w	8006f2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070a0:	2300      	movs	r3, #0
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3770      	adds	r7, #112	; 0x70
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
	...

080070ac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b0a3      	sub	sp, #140	; 0x8c
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	4613      	mov	r3, r2
 80070b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	68ba      	ldr	r2, [r7, #8]
 80070be:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	88fa      	ldrh	r2, [r7, #6]
 80070c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	88fa      	ldrh	r2, [r7, #6]
 80070cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2200      	movs	r2, #0
 80070d4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070de:	d10e      	bne.n	80070fe <UART_Start_Receive_IT+0x52>
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d105      	bne.n	80070f4 <UART_Start_Receive_IT+0x48>
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f240 12ff 	movw	r2, #511	; 0x1ff
 80070ee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80070f2:	e02d      	b.n	8007150 <UART_Start_Receive_IT+0xa4>
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	22ff      	movs	r2, #255	; 0xff
 80070f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80070fc:	e028      	b.n	8007150 <UART_Start_Receive_IT+0xa4>
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d10d      	bne.n	8007122 <UART_Start_Receive_IT+0x76>
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d104      	bne.n	8007118 <UART_Start_Receive_IT+0x6c>
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	22ff      	movs	r2, #255	; 0xff
 8007112:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007116:	e01b      	b.n	8007150 <UART_Start_Receive_IT+0xa4>
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	227f      	movs	r2, #127	; 0x7f
 800711c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007120:	e016      	b.n	8007150 <UART_Start_Receive_IT+0xa4>
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800712a:	d10d      	bne.n	8007148 <UART_Start_Receive_IT+0x9c>
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d104      	bne.n	800713e <UART_Start_Receive_IT+0x92>
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	227f      	movs	r2, #127	; 0x7f
 8007138:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800713c:	e008      	b.n	8007150 <UART_Start_Receive_IT+0xa4>
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	223f      	movs	r2, #63	; 0x3f
 8007142:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007146:	e003      	b.n	8007150 <UART_Start_Receive_IT+0xa4>
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2200      	movs	r2, #0
 800714c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2200      	movs	r2, #0
 8007154:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2222      	movs	r2, #34	; 0x22
 800715c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	3308      	adds	r3, #8
 8007166:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007168:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800716a:	e853 3f00 	ldrex	r3, [r3]
 800716e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007170:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007172:	f043 0301 	orr.w	r3, r3, #1
 8007176:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	3308      	adds	r3, #8
 8007180:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007184:	673a      	str	r2, [r7, #112]	; 0x70
 8007186:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007188:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800718a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800718c:	e841 2300 	strex	r3, r2, [r1]
 8007190:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007192:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007194:	2b00      	cmp	r3, #0
 8007196:	d1e3      	bne.n	8007160 <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800719c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071a0:	d153      	bne.n	800724a <UART_Start_Receive_IT+0x19e>
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80071a8:	88fa      	ldrh	r2, [r7, #6]
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d34d      	bcc.n	800724a <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071b6:	d107      	bne.n	80071c8 <UART_Start_Receive_IT+0x11c>
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	691b      	ldr	r3, [r3, #16]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d103      	bne.n	80071c8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	4a4b      	ldr	r2, [pc, #300]	; (80072f0 <UART_Start_Receive_IT+0x244>)
 80071c4:	671a      	str	r2, [r3, #112]	; 0x70
 80071c6:	e002      	b.n	80071ce <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	4a4a      	ldr	r2, [pc, #296]	; (80072f4 <UART_Start_Receive_IT+0x248>)
 80071cc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2200      	movs	r2, #0
 80071d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d01a      	beq.n	8007214 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071e6:	e853 3f00 	ldrex	r3, [r3]
 80071ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80071ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	461a      	mov	r2, r3
 80071fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007200:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007202:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007204:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007206:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007208:	e841 2300 	strex	r3, r2, [r1]
 800720c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800720e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007210:	2b00      	cmp	r3, #0
 8007212:	d1e4      	bne.n	80071de <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	3308      	adds	r3, #8
 800721a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800721c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800721e:	e853 3f00 	ldrex	r3, [r3]
 8007222:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007226:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800722a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	3308      	adds	r3, #8
 8007232:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007234:	64ba      	str	r2, [r7, #72]	; 0x48
 8007236:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007238:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800723a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800723c:	e841 2300 	strex	r3, r2, [r1]
 8007240:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007242:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007244:	2b00      	cmp	r3, #0
 8007246:	d1e5      	bne.n	8007214 <UART_Start_Receive_IT+0x168>
 8007248:	e04a      	b.n	80072e0 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007252:	d107      	bne.n	8007264 <UART_Start_Receive_IT+0x1b8>
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	691b      	ldr	r3, [r3, #16]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d103      	bne.n	8007264 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	4a26      	ldr	r2, [pc, #152]	; (80072f8 <UART_Start_Receive_IT+0x24c>)
 8007260:	671a      	str	r2, [r3, #112]	; 0x70
 8007262:	e002      	b.n	800726a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	4a25      	ldr	r2, [pc, #148]	; (80072fc <UART_Start_Receive_IT+0x250>)
 8007268:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2200      	movs	r2, #0
 800726e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	691b      	ldr	r3, [r3, #16]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d019      	beq.n	80072ae <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007282:	e853 3f00 	ldrex	r3, [r3]
 8007286:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800728e:	677b      	str	r3, [r7, #116]	; 0x74
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	461a      	mov	r2, r3
 8007296:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007298:	637b      	str	r3, [r7, #52]	; 0x34
 800729a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800729e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072a0:	e841 2300 	strex	r3, r2, [r1]
 80072a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80072a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d1e6      	bne.n	800727a <UART_Start_Receive_IT+0x1ce>
 80072ac:	e018      	b.n	80072e0 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	e853 3f00 	ldrex	r3, [r3]
 80072ba:	613b      	str	r3, [r7, #16]
   return(result);
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	f043 0320 	orr.w	r3, r3, #32
 80072c2:	67bb      	str	r3, [r7, #120]	; 0x78
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	461a      	mov	r2, r3
 80072ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072cc:	623b      	str	r3, [r7, #32]
 80072ce:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d0:	69f9      	ldr	r1, [r7, #28]
 80072d2:	6a3a      	ldr	r2, [r7, #32]
 80072d4:	e841 2300 	strex	r3, r2, [r1]
 80072d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d1e6      	bne.n	80072ae <UART_Start_Receive_IT+0x202>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	378c      	adds	r7, #140	; 0x8c
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop
 80072f0:	08007a09 	.word	0x08007a09
 80072f4:	08007711 	.word	0x08007711
 80072f8:	080075af 	.word	0x080075af
 80072fc:	0800744f 	.word	0x0800744f

08007300 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007300:	b480      	push	{r7}
 8007302:	b095      	sub	sp, #84	; 0x54
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007310:	e853 3f00 	ldrex	r3, [r3]
 8007314:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007318:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800731c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	461a      	mov	r2, r3
 8007324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007326:	643b      	str	r3, [r7, #64]	; 0x40
 8007328:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800732c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800732e:	e841 2300 	strex	r3, r2, [r1]
 8007332:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007336:	2b00      	cmp	r3, #0
 8007338:	d1e6      	bne.n	8007308 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	3308      	adds	r3, #8
 8007340:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007342:	6a3b      	ldr	r3, [r7, #32]
 8007344:	e853 3f00 	ldrex	r3, [r3]
 8007348:	61fb      	str	r3, [r7, #28]
   return(result);
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007350:	f023 0301 	bic.w	r3, r3, #1
 8007354:	64bb      	str	r3, [r7, #72]	; 0x48
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	3308      	adds	r3, #8
 800735c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800735e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007360:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007362:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007364:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007366:	e841 2300 	strex	r3, r2, [r1]
 800736a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800736c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736e:	2b00      	cmp	r3, #0
 8007370:	d1e3      	bne.n	800733a <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007376:	2b01      	cmp	r3, #1
 8007378:	d118      	bne.n	80073ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	e853 3f00 	ldrex	r3, [r3]
 8007386:	60bb      	str	r3, [r7, #8]
   return(result);
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	f023 0310 	bic.w	r3, r3, #16
 800738e:	647b      	str	r3, [r7, #68]	; 0x44
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	461a      	mov	r2, r3
 8007396:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007398:	61bb      	str	r3, [r7, #24]
 800739a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739c:	6979      	ldr	r1, [r7, #20]
 800739e:	69ba      	ldr	r2, [r7, #24]
 80073a0:	e841 2300 	strex	r3, r2, [r1]
 80073a4:	613b      	str	r3, [r7, #16]
   return(result);
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d1e6      	bne.n	800737a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2220      	movs	r2, #32
 80073b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	671a      	str	r2, [r3, #112]	; 0x70
}
 80073c0:	bf00      	nop
 80073c2:	3754      	adds	r7, #84	; 0x54
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2200      	movs	r2, #0
 80073de:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80073ea:	68f8      	ldr	r0, [r7, #12]
 80073ec:	f7ff f996 	bl	800671c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073f0:	bf00      	nop
 80073f2:	3710      	adds	r7, #16
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b088      	sub	sp, #32
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	e853 3f00 	ldrex	r3, [r3]
 800740c:	60bb      	str	r3, [r7, #8]
   return(result);
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007414:	61fb      	str	r3, [r7, #28]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	461a      	mov	r2, r3
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	61bb      	str	r3, [r7, #24]
 8007420:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007422:	6979      	ldr	r1, [r7, #20]
 8007424:	69ba      	ldr	r2, [r7, #24]
 8007426:	e841 2300 	strex	r3, r2, [r1]
 800742a:	613b      	str	r3, [r7, #16]
   return(result);
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d1e6      	bne.n	8007400 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2220      	movs	r2, #32
 8007436:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f7ff f961 	bl	8006708 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007446:	bf00      	nop
 8007448:	3720      	adds	r7, #32
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}

0800744e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800744e:	b580      	push	{r7, lr}
 8007450:	b096      	sub	sp, #88	; 0x58
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800745c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007466:	2b22      	cmp	r3, #34	; 0x22
 8007468:	f040 8095 	bne.w	8007596 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007472:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007476:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800747a:	b2d9      	uxtb	r1, r3
 800747c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007480:	b2da      	uxtb	r2, r3
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007486:	400a      	ands	r2, r1
 8007488:	b2d2      	uxtb	r2, r2
 800748a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007490:	1c5a      	adds	r2, r3, #1
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800749c:	b29b      	uxth	r3, r3
 800749e:	3b01      	subs	r3, #1
 80074a0:	b29a      	uxth	r2, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d178      	bne.n	80075a6 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074bc:	e853 3f00 	ldrex	r3, [r3]
 80074c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80074c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074c8:	653b      	str	r3, [r7, #80]	; 0x50
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	461a      	mov	r2, r3
 80074d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074d2:	647b      	str	r3, [r7, #68]	; 0x44
 80074d4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074da:	e841 2300 	strex	r3, r2, [r1]
 80074de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d1e6      	bne.n	80074b4 <UART_RxISR_8BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	3308      	adds	r3, #8
 80074ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f0:	e853 3f00 	ldrex	r3, [r3]
 80074f4:	623b      	str	r3, [r7, #32]
   return(result);
 80074f6:	6a3b      	ldr	r3, [r7, #32]
 80074f8:	f023 0301 	bic.w	r3, r3, #1
 80074fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	3308      	adds	r3, #8
 8007504:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007506:	633a      	str	r2, [r7, #48]	; 0x30
 8007508:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800750a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800750c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800750e:	e841 2300 	strex	r3, r2, [r1]
 8007512:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007516:	2b00      	cmp	r3, #0
 8007518:	d1e5      	bne.n	80074e6 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2220      	movs	r2, #32
 800751e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800752c:	2b01      	cmp	r3, #1
 800752e:	d12e      	bne.n	800758e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	e853 3f00 	ldrex	r3, [r3]
 8007542:	60fb      	str	r3, [r7, #12]
   return(result);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f023 0310 	bic.w	r3, r3, #16
 800754a:	64bb      	str	r3, [r7, #72]	; 0x48
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	461a      	mov	r2, r3
 8007552:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007554:	61fb      	str	r3, [r7, #28]
 8007556:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007558:	69b9      	ldr	r1, [r7, #24]
 800755a:	69fa      	ldr	r2, [r7, #28]
 800755c:	e841 2300 	strex	r3, r2, [r1]
 8007560:	617b      	str	r3, [r7, #20]
   return(result);
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d1e6      	bne.n	8007536 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	69db      	ldr	r3, [r3, #28]
 800756e:	f003 0310 	and.w	r3, r3, #16
 8007572:	2b10      	cmp	r3, #16
 8007574:	d103      	bne.n	800757e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	2210      	movs	r2, #16
 800757c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007584:	4619      	mov	r1, r3
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f7ff f8d2 	bl	8006730 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800758c:	e00b      	b.n	80075a6 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f7f9 fe16 	bl	80011c0 <HAL_UART_RxCpltCallback>
}
 8007594:	e007      	b.n	80075a6 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	699a      	ldr	r2, [r3, #24]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f042 0208 	orr.w	r2, r2, #8
 80075a4:	619a      	str	r2, [r3, #24]
}
 80075a6:	bf00      	nop
 80075a8:	3758      	adds	r7, #88	; 0x58
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}

080075ae <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80075ae:	b580      	push	{r7, lr}
 80075b0:	b096      	sub	sp, #88	; 0x58
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80075bc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075c6:	2b22      	cmp	r3, #34	; 0x22
 80075c8:	f040 8095 	bne.w	80076f6 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075da:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80075dc:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80075e0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80075e4:	4013      	ands	r3, r2
 80075e6:	b29a      	uxth	r2, r3
 80075e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075ea:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075f0:	1c9a      	adds	r2, r3, #2
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	3b01      	subs	r3, #1
 8007600:	b29a      	uxth	r2, r3
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800760e:	b29b      	uxth	r3, r3
 8007610:	2b00      	cmp	r3, #0
 8007612:	d178      	bne.n	8007706 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800761c:	e853 3f00 	ldrex	r3, [r3]
 8007620:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007624:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007628:	64fb      	str	r3, [r7, #76]	; 0x4c
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	461a      	mov	r2, r3
 8007630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007632:	643b      	str	r3, [r7, #64]	; 0x40
 8007634:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007636:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007638:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800763a:	e841 2300 	strex	r3, r2, [r1]
 800763e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1e6      	bne.n	8007614 <UART_RxISR_16BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	3308      	adds	r3, #8
 800764c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800764e:	6a3b      	ldr	r3, [r7, #32]
 8007650:	e853 3f00 	ldrex	r3, [r3]
 8007654:	61fb      	str	r3, [r7, #28]
   return(result);
 8007656:	69fb      	ldr	r3, [r7, #28]
 8007658:	f023 0301 	bic.w	r3, r3, #1
 800765c:	64bb      	str	r3, [r7, #72]	; 0x48
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	3308      	adds	r3, #8
 8007664:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007666:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007668:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800766c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800766e:	e841 2300 	strex	r3, r2, [r1]
 8007672:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007676:	2b00      	cmp	r3, #0
 8007678:	d1e5      	bne.n	8007646 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2220      	movs	r2, #32
 800767e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2200      	movs	r2, #0
 8007686:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800768c:	2b01      	cmp	r3, #1
 800768e:	d12e      	bne.n	80076ee <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	e853 3f00 	ldrex	r3, [r3]
 80076a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	f023 0310 	bic.w	r3, r3, #16
 80076aa:	647b      	str	r3, [r7, #68]	; 0x44
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	461a      	mov	r2, r3
 80076b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076b4:	61bb      	str	r3, [r7, #24]
 80076b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b8:	6979      	ldr	r1, [r7, #20]
 80076ba:	69ba      	ldr	r2, [r7, #24]
 80076bc:	e841 2300 	strex	r3, r2, [r1]
 80076c0:	613b      	str	r3, [r7, #16]
   return(result);
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d1e6      	bne.n	8007696 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	69db      	ldr	r3, [r3, #28]
 80076ce:	f003 0310 	and.w	r3, r3, #16
 80076d2:	2b10      	cmp	r3, #16
 80076d4:	d103      	bne.n	80076de <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	2210      	movs	r2, #16
 80076dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80076e4:	4619      	mov	r1, r3
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f7ff f822 	bl	8006730 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80076ec:	e00b      	b.n	8007706 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f7f9 fd66 	bl	80011c0 <HAL_UART_RxCpltCallback>
}
 80076f4:	e007      	b.n	8007706 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	699a      	ldr	r2, [r3, #24]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f042 0208 	orr.w	r2, r2, #8
 8007704:	619a      	str	r2, [r3, #24]
}
 8007706:	bf00      	nop
 8007708:	3758      	adds	r7, #88	; 0x58
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
	...

08007710 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b0a6      	sub	sp, #152	; 0x98
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800771e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	69db      	ldr	r3, [r3, #28]
 8007728:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007746:	2b22      	cmp	r3, #34	; 0x22
 8007748:	f040 814f 	bne.w	80079ea <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007752:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007756:	e0f6      	b.n	8007946 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800775e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007762:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8007766:	b2d9      	uxtb	r1, r3
 8007768:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800776c:	b2da      	uxtb	r2, r3
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007772:	400a      	ands	r2, r1
 8007774:	b2d2      	uxtb	r2, r2
 8007776:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800777c:	1c5a      	adds	r2, r3, #1
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007788:	b29b      	uxth	r3, r3
 800778a:	3b01      	subs	r3, #1
 800778c:	b29a      	uxth	r2, r3
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	69db      	ldr	r3, [r3, #28]
 800779a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800779e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80077a2:	f003 0307 	and.w	r3, r3, #7
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d053      	beq.n	8007852 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80077aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80077ae:	f003 0301 	and.w	r3, r3, #1
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d011      	beq.n	80077da <UART_RxISR_8BIT_FIFOEN+0xca>
 80077b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80077ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d00b      	beq.n	80077da <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	2201      	movs	r2, #1
 80077c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077d0:	f043 0201 	orr.w	r2, r3, #1
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80077da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80077de:	f003 0302 	and.w	r3, r3, #2
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d011      	beq.n	800780a <UART_RxISR_8BIT_FIFOEN+0xfa>
 80077e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80077ea:	f003 0301 	and.w	r3, r3, #1
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d00b      	beq.n	800780a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	2202      	movs	r2, #2
 80077f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007800:	f043 0204 	orr.w	r2, r3, #4
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800780a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800780e:	f003 0304 	and.w	r3, r3, #4
 8007812:	2b00      	cmp	r3, #0
 8007814:	d011      	beq.n	800783a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007816:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800781a:	f003 0301 	and.w	r3, r3, #1
 800781e:	2b00      	cmp	r3, #0
 8007820:	d00b      	beq.n	800783a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	2204      	movs	r2, #4
 8007828:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007830:	f043 0202 	orr.w	r2, r3, #2
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007840:	2b00      	cmp	r3, #0
 8007842:	d006      	beq.n	8007852 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f7fe ff69 	bl	800671c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007858:	b29b      	uxth	r3, r3
 800785a:	2b00      	cmp	r3, #0
 800785c:	d173      	bne.n	8007946 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007864:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007866:	e853 3f00 	ldrex	r3, [r3]
 800786a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800786c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800786e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007872:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	461a      	mov	r2, r3
 800787c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007880:	66bb      	str	r3, [r7, #104]	; 0x68
 8007882:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007884:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007886:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007888:	e841 2300 	strex	r3, r2, [r1]
 800788c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800788e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007890:	2b00      	cmp	r3, #0
 8007892:	d1e4      	bne.n	800785e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	3308      	adds	r3, #8
 800789a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800789c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800789e:	e853 3f00 	ldrex	r3, [r3]
 80078a2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80078a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078aa:	f023 0301 	bic.w	r3, r3, #1
 80078ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	3308      	adds	r3, #8
 80078b6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80078b8:	657a      	str	r2, [r7, #84]	; 0x54
 80078ba:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078bc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80078be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80078c0:	e841 2300 	strex	r3, r2, [r1]
 80078c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80078c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d1e3      	bne.n	8007894 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2220      	movs	r2, #32
 80078d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d12e      	bne.n	8007940 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2200      	movs	r2, #0
 80078e6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078f0:	e853 3f00 	ldrex	r3, [r3]
 80078f4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80078f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f8:	f023 0310 	bic.w	r3, r3, #16
 80078fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	461a      	mov	r2, r3
 8007904:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007906:	643b      	str	r3, [r7, #64]	; 0x40
 8007908:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800790a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800790c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800790e:	e841 2300 	strex	r3, r2, [r1]
 8007912:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007916:	2b00      	cmp	r3, #0
 8007918:	d1e6      	bne.n	80078e8 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	69db      	ldr	r3, [r3, #28]
 8007920:	f003 0310 	and.w	r3, r3, #16
 8007924:	2b10      	cmp	r3, #16
 8007926:	d103      	bne.n	8007930 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2210      	movs	r2, #16
 800792e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007936:	4619      	mov	r1, r3
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f7fe fef9 	bl	8006730 <HAL_UARTEx_RxEventCallback>
 800793e:	e002      	b.n	8007946 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f7f9 fc3d 	bl	80011c0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007946:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800794a:	2b00      	cmp	r3, #0
 800794c:	d006      	beq.n	800795c <UART_RxISR_8BIT_FIFOEN+0x24c>
 800794e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007952:	f003 0320 	and.w	r3, r3, #32
 8007956:	2b00      	cmp	r3, #0
 8007958:	f47f aefe 	bne.w	8007758 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007962:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007966:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800796a:	2b00      	cmp	r3, #0
 800796c:	d045      	beq.n	80079fa <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007974:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007978:	429a      	cmp	r2, r3
 800797a:	d23e      	bcs.n	80079fa <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	3308      	adds	r3, #8
 8007982:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007984:	6a3b      	ldr	r3, [r7, #32]
 8007986:	e853 3f00 	ldrex	r3, [r3]
 800798a:	61fb      	str	r3, [r7, #28]
   return(result);
 800798c:	69fb      	ldr	r3, [r7, #28]
 800798e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007992:	673b      	str	r3, [r7, #112]	; 0x70
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	3308      	adds	r3, #8
 800799a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800799c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800799e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079a4:	e841 2300 	strex	r3, r2, [r1]
 80079a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d1e5      	bne.n	800797c <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	4a14      	ldr	r2, [pc, #80]	; (8007a04 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80079b4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	e853 3f00 	ldrex	r3, [r3]
 80079c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	f043 0320 	orr.w	r3, r3, #32
 80079ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	461a      	mov	r2, r3
 80079d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079d4:	61bb      	str	r3, [r7, #24]
 80079d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d8:	6979      	ldr	r1, [r7, #20]
 80079da:	69ba      	ldr	r2, [r7, #24]
 80079dc:	e841 2300 	strex	r3, r2, [r1]
 80079e0:	613b      	str	r3, [r7, #16]
   return(result);
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d1e6      	bne.n	80079b6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80079e8:	e007      	b.n	80079fa <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	699a      	ldr	r2, [r3, #24]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f042 0208 	orr.w	r2, r2, #8
 80079f8:	619a      	str	r2, [r3, #24]
}
 80079fa:	bf00      	nop
 80079fc:	3798      	adds	r7, #152	; 0x98
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	0800744f 	.word	0x0800744f

08007a08 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b0a8      	sub	sp, #160	; 0xa0
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007a16:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	69db      	ldr	r3, [r3, #28]
 8007a20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a3e:	2b22      	cmp	r3, #34	; 0x22
 8007a40:	f040 8153 	bne.w	8007cea <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007a4a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007a4e:	e0fa      	b.n	8007c46 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a56:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8007a62:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8007a66:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007a6a:	4013      	ands	r3, r2
 8007a6c:	b29a      	uxth	r2, r3
 8007a6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a72:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a78:	1c9a      	adds	r2, r3, #2
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	3b01      	subs	r3, #1
 8007a88:	b29a      	uxth	r2, r3
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	69db      	ldr	r3, [r3, #28]
 8007a96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007a9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007a9e:	f003 0307 	and.w	r3, r3, #7
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d053      	beq.n	8007b4e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007aa6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007aaa:	f003 0301 	and.w	r3, r3, #1
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d011      	beq.n	8007ad6 <UART_RxISR_16BIT_FIFOEN+0xce>
 8007ab2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d00b      	beq.n	8007ad6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007acc:	f043 0201 	orr.w	r2, r3, #1
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ad6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ada:	f003 0302 	and.w	r3, r3, #2
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d011      	beq.n	8007b06 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007ae2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007ae6:	f003 0301 	and.w	r3, r3, #1
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d00b      	beq.n	8007b06 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	2202      	movs	r2, #2
 8007af4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007afc:	f043 0204 	orr.w	r2, r3, #4
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b06:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b0a:	f003 0304 	and.w	r3, r3, #4
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d011      	beq.n	8007b36 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007b12:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007b16:	f003 0301 	and.w	r3, r3, #1
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d00b      	beq.n	8007b36 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	2204      	movs	r2, #4
 8007b24:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b2c:	f043 0202 	orr.w	r2, r3, #2
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d006      	beq.n	8007b4e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f7fe fdeb 	bl	800671c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d175      	bne.n	8007c46 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b62:	e853 3f00 	ldrex	r3, [r3]
 8007b66:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007b68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	461a      	mov	r2, r3
 8007b78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b7c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b7e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b80:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007b82:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007b84:	e841 2300 	strex	r3, r2, [r1]
 8007b88:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007b8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d1e4      	bne.n	8007b5a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	3308      	adds	r3, #8
 8007b96:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b9a:	e853 3f00 	ldrex	r3, [r3]
 8007b9e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007ba0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ba2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ba6:	f023 0301 	bic.w	r3, r3, #1
 8007baa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	3308      	adds	r3, #8
 8007bb4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007bb8:	65ba      	str	r2, [r7, #88]	; 0x58
 8007bba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bbc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007bbe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007bc0:	e841 2300 	strex	r3, r2, [r1]
 8007bc4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007bc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d1e1      	bne.n	8007b90 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2220      	movs	r2, #32
 8007bd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d12e      	bne.n	8007c40 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf0:	e853 3f00 	ldrex	r3, [r3]
 8007bf4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bf8:	f023 0310 	bic.w	r3, r3, #16
 8007bfc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	461a      	mov	r2, r3
 8007c04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007c06:	647b      	str	r3, [r7, #68]	; 0x44
 8007c08:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c0e:	e841 2300 	strex	r3, r2, [r1]
 8007c12:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d1e6      	bne.n	8007be8 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	69db      	ldr	r3, [r3, #28]
 8007c20:	f003 0310 	and.w	r3, r3, #16
 8007c24:	2b10      	cmp	r3, #16
 8007c26:	d103      	bne.n	8007c30 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	2210      	movs	r2, #16
 8007c2e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007c36:	4619      	mov	r1, r3
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f7fe fd79 	bl	8006730 <HAL_UARTEx_RxEventCallback>
 8007c3e:	e002      	b.n	8007c46 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f7f9 fabd 	bl	80011c0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007c46:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d006      	beq.n	8007c5c <UART_RxISR_16BIT_FIFOEN+0x254>
 8007c4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c52:	f003 0320 	and.w	r3, r3, #32
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	f47f aefa 	bne.w	8007a50 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c62:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007c66:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d045      	beq.n	8007cfa <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007c74:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d23e      	bcs.n	8007cfa <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	3308      	adds	r3, #8
 8007c82:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c86:	e853 3f00 	ldrex	r3, [r3]
 8007c8a:	623b      	str	r3, [r7, #32]
   return(result);
 8007c8c:	6a3b      	ldr	r3, [r7, #32]
 8007c8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c92:	677b      	str	r3, [r7, #116]	; 0x74
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	3308      	adds	r3, #8
 8007c9a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007c9c:	633a      	str	r2, [r7, #48]	; 0x30
 8007c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ca2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ca4:	e841 2300 	strex	r3, r2, [r1]
 8007ca8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d1e5      	bne.n	8007c7c <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	4a14      	ldr	r2, [pc, #80]	; (8007d04 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8007cb4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	e853 3f00 	ldrex	r3, [r3]
 8007cc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f043 0320 	orr.w	r3, r3, #32
 8007cca:	673b      	str	r3, [r7, #112]	; 0x70
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cd4:	61fb      	str	r3, [r7, #28]
 8007cd6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd8:	69b9      	ldr	r1, [r7, #24]
 8007cda:	69fa      	ldr	r2, [r7, #28]
 8007cdc:	e841 2300 	strex	r3, r2, [r1]
 8007ce0:	617b      	str	r3, [r7, #20]
   return(result);
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d1e6      	bne.n	8007cb6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ce8:	e007      	b.n	8007cfa <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	699a      	ldr	r2, [r3, #24]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f042 0208 	orr.w	r2, r2, #8
 8007cf8:	619a      	str	r2, [r3, #24]
}
 8007cfa:	bf00      	nop
 8007cfc:	37a0      	adds	r7, #160	; 0xa0
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
 8007d02:	bf00      	nop
 8007d04:	080075af 	.word	0x080075af

08007d08 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007d10:	bf00      	nop
 8007d12:	370c      	adds	r7, #12
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr

08007d1c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007d24:	bf00      	nop
 8007d26:	370c      	adds	r7, #12
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007d38:	bf00      	nop
 8007d3a:	370c      	adds	r7, #12
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b085      	sub	sp, #20
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d101      	bne.n	8007d5a <HAL_UARTEx_DisableFifoMode+0x16>
 8007d56:	2302      	movs	r3, #2
 8007d58:	e027      	b.n	8007daa <HAL_UARTEx_DisableFifoMode+0x66>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2224      	movs	r2, #36	; 0x24
 8007d66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f022 0201 	bic.w	r2, r2, #1
 8007d80:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007d88:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	68fa      	ldr	r2, [r7, #12]
 8007d96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2220      	movs	r2, #32
 8007d9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3714      	adds	r7, #20
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr

08007db6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007db6:	b580      	push	{r7, lr}
 8007db8:	b084      	sub	sp, #16
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
 8007dbe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d101      	bne.n	8007dce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007dca:	2302      	movs	r3, #2
 8007dcc:	e02d      	b.n	8007e2a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2224      	movs	r2, #36	; 0x24
 8007dda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f022 0201 	bic.w	r2, r2, #1
 8007df4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	683a      	ldr	r2, [r7, #0]
 8007e06:	430a      	orrs	r2, r1
 8007e08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 f850 	bl	8007eb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	68fa      	ldr	r2, [r7, #12]
 8007e16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2220      	movs	r2, #32
 8007e1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007e28:	2300      	movs	r3, #0
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3710      	adds	r7, #16
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}

08007e32 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007e32:	b580      	push	{r7, lr}
 8007e34:	b084      	sub	sp, #16
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
 8007e3a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d101      	bne.n	8007e4a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007e46:	2302      	movs	r3, #2
 8007e48:	e02d      	b.n	8007ea6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2224      	movs	r2, #36	; 0x24
 8007e56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f022 0201 	bic.w	r2, r2, #1
 8007e70:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	683a      	ldr	r2, [r7, #0]
 8007e82:	430a      	orrs	r2, r1
 8007e84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 f812 	bl	8007eb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	68fa      	ldr	r2, [r7, #12]
 8007e92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2220      	movs	r2, #32
 8007e98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007ea4:	2300      	movs	r3, #0
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3710      	adds	r7, #16
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
	...

08007eb0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b085      	sub	sp, #20
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d108      	bne.n	8007ed2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007ed0:	e031      	b.n	8007f36 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007ed2:	2308      	movs	r3, #8
 8007ed4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007ed6:	2308      	movs	r3, #8
 8007ed8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	0e5b      	lsrs	r3, r3, #25
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	f003 0307 	and.w	r3, r3, #7
 8007ee8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	0f5b      	lsrs	r3, r3, #29
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	f003 0307 	and.w	r3, r3, #7
 8007ef8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007efa:	7bbb      	ldrb	r3, [r7, #14]
 8007efc:	7b3a      	ldrb	r2, [r7, #12]
 8007efe:	4911      	ldr	r1, [pc, #68]	; (8007f44 <UARTEx_SetNbDataToProcess+0x94>)
 8007f00:	5c8a      	ldrb	r2, [r1, r2]
 8007f02:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007f06:	7b3a      	ldrb	r2, [r7, #12]
 8007f08:	490f      	ldr	r1, [pc, #60]	; (8007f48 <UARTEx_SetNbDataToProcess+0x98>)
 8007f0a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007f0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f10:	b29a      	uxth	r2, r3
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f18:	7bfb      	ldrb	r3, [r7, #15]
 8007f1a:	7b7a      	ldrb	r2, [r7, #13]
 8007f1c:	4909      	ldr	r1, [pc, #36]	; (8007f44 <UARTEx_SetNbDataToProcess+0x94>)
 8007f1e:	5c8a      	ldrb	r2, [r1, r2]
 8007f20:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007f24:	7b7a      	ldrb	r2, [r7, #13]
 8007f26:	4908      	ldr	r1, [pc, #32]	; (8007f48 <UARTEx_SetNbDataToProcess+0x98>)
 8007f28:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f2a:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f2e:	b29a      	uxth	r2, r3
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007f36:	bf00      	nop
 8007f38:	3714      	adds	r7, #20
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr
 8007f42:	bf00      	nop
 8007f44:	0800d044 	.word	0x0800d044
 8007f48:	0800d04c 	.word	0x0800d04c

08007f4c <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b084      	sub	sp, #16
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007f56:	2300      	movs	r3, #0
 8007f58:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8007f5a:	6839      	ldr	r1, [r7, #0]
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f001 fcb2 	bl	80098c6 <VL53L0X_get_offset_calibration_data_micro_meter>
 8007f62:	4603      	mov	r3, r0
 8007f64:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8007f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3710      	adds	r7, #16
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
	...

08007f74 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8007f74:	b5b0      	push	{r4, r5, r7, lr}
 8007f76:	b096      	sub	sp, #88	; 0x58
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8007f82:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d107      	bne.n	8007f9a <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	2188      	movs	r1, #136	; 0x88
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f004 feaa 	bl	800cce8 <VL53L0X_WrByte>
 8007f94:	4603      	mov	r3, r0
 8007f96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007fa8:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007fb2:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	4a9e      	ldr	r2, [pc, #632]	; (8008234 <VL53L0X_DataInit+0x2c0>)
 8007fba:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	4a9d      	ldr	r2, [pc, #628]	; (8008238 <VL53L0X_DataInit+0x2c4>)
 8007fc2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8007fcc:	f107 0310 	add.w	r3, r7, #16
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 fac2 	bl	800855c <VL53L0X_GetDeviceParameters>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8007fde:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d112      	bne.n	800800c <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8007fea:	2300      	movs	r3, #0
 8007fec:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f103 0410 	add.w	r4, r3, #16
 8007ff4:	f107 0510 	add.w	r5, r7, #16
 8007ff8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007ffa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ffc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007ffe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008000:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008002:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008004:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008008:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2264      	movs	r2, #100	; 0x64
 8008010:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f44f 7261 	mov.w	r2, #900	; 0x384
 800801a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008024:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800802e:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2201      	movs	r2, #1
 8008036:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800803a:	2201      	movs	r2, #1
 800803c:	2180      	movs	r1, #128	; 0x80
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f004 fe52 	bl	800cce8 <VL53L0X_WrByte>
 8008044:	4603      	mov	r3, r0
 8008046:	461a      	mov	r2, r3
 8008048:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800804c:	4313      	orrs	r3, r2
 800804e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008052:	2201      	movs	r2, #1
 8008054:	21ff      	movs	r1, #255	; 0xff
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f004 fe46 	bl	800cce8 <VL53L0X_WrByte>
 800805c:	4603      	mov	r3, r0
 800805e:	461a      	mov	r2, r3
 8008060:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008064:	4313      	orrs	r3, r2
 8008066:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800806a:	2200      	movs	r2, #0
 800806c:	2100      	movs	r1, #0
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f004 fe3a 	bl	800cce8 <VL53L0X_WrByte>
 8008074:	4603      	mov	r3, r0
 8008076:	461a      	mov	r2, r3
 8008078:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800807c:	4313      	orrs	r3, r2
 800807e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8008082:	f107 030f 	add.w	r3, r7, #15
 8008086:	461a      	mov	r2, r3
 8008088:	2191      	movs	r1, #145	; 0x91
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f004 feae 	bl	800cdec <VL53L0X_RdByte>
 8008090:	4603      	mov	r3, r0
 8008092:	461a      	mov	r2, r3
 8008094:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008098:	4313      	orrs	r3, r2
 800809a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 800809e:	7bfa      	ldrb	r2, [r7, #15]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80080a6:	2201      	movs	r2, #1
 80080a8:	2100      	movs	r1, #0
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f004 fe1c 	bl	800cce8 <VL53L0X_WrByte>
 80080b0:	4603      	mov	r3, r0
 80080b2:	461a      	mov	r2, r3
 80080b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80080b8:	4313      	orrs	r3, r2
 80080ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80080be:	2200      	movs	r2, #0
 80080c0:	21ff      	movs	r1, #255	; 0xff
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f004 fe10 	bl	800cce8 <VL53L0X_WrByte>
 80080c8:	4603      	mov	r3, r0
 80080ca:	461a      	mov	r2, r3
 80080cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80080d0:	4313      	orrs	r3, r2
 80080d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80080d6:	2200      	movs	r2, #0
 80080d8:	2180      	movs	r1, #128	; 0x80
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f004 fe04 	bl	800cce8 <VL53L0X_WrByte>
 80080e0:	4603      	mov	r3, r0
 80080e2:	461a      	mov	r2, r3
 80080e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80080e8:	4313      	orrs	r3, r2
 80080ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80080ee:	2300      	movs	r3, #0
 80080f0:	653b      	str	r3, [r7, #80]	; 0x50
 80080f2:	e014      	b.n	800811e <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 80080f4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d114      	bne.n	8008126 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 80080fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080fe:	b29b      	uxth	r3, r3
 8008100:	2201      	movs	r2, #1
 8008102:	4619      	mov	r1, r3
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 fd35 	bl	8008b74 <VL53L0X_SetLimitCheckEnable>
 800810a:	4603      	mov	r3, r0
 800810c:	461a      	mov	r2, r3
 800810e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008112:	4313      	orrs	r3, r2
 8008114:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8008118:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800811a:	3301      	adds	r3, #1
 800811c:	653b      	str	r3, [r7, #80]	; 0x50
 800811e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008120:	2b05      	cmp	r3, #5
 8008122:	dde7      	ble.n	80080f4 <VL53L0X_DataInit+0x180>
 8008124:	e000      	b.n	8008128 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8008126:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8008128:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800812c:	2b00      	cmp	r3, #0
 800812e:	d107      	bne.n	8008140 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8008130:	2200      	movs	r2, #0
 8008132:	2102      	movs	r1, #2
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 fd1d 	bl	8008b74 <VL53L0X_SetLimitCheckEnable>
 800813a:	4603      	mov	r3, r0
 800813c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8008140:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008144:	2b00      	cmp	r3, #0
 8008146:	d107      	bne.n	8008158 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8008148:	2200      	movs	r2, #0
 800814a:	2103      	movs	r1, #3
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 fd11 	bl	8008b74 <VL53L0X_SetLimitCheckEnable>
 8008152:	4603      	mov	r3, r0
 8008154:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8008158:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800815c:	2b00      	cmp	r3, #0
 800815e:	d107      	bne.n	8008170 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8008160:	2200      	movs	r2, #0
 8008162:	2104      	movs	r1, #4
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 fd05 	bl	8008b74 <VL53L0X_SetLimitCheckEnable>
 800816a:	4603      	mov	r3, r0
 800816c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8008170:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008174:	2b00      	cmp	r3, #0
 8008176:	d107      	bne.n	8008188 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8008178:	2200      	movs	r2, #0
 800817a:	2105      	movs	r1, #5
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f000 fcf9 	bl	8008b74 <VL53L0X_SetLimitCheckEnable>
 8008182:	4603      	mov	r3, r0
 8008184:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8008188:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800818c:	2b00      	cmp	r3, #0
 800818e:	d108      	bne.n	80081a2 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8008190:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8008194:	2100      	movs	r1, #0
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 fd9c 	bl	8008cd4 <VL53L0X_SetLimitCheckValue>
 800819c:	4603      	mov	r3, r0
 800819e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80081a2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d108      	bne.n	80081bc <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80081aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80081ae:	2101      	movs	r1, #1
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f000 fd8f 	bl	8008cd4 <VL53L0X_SetLimitCheckValue>
 80081b6:	4603      	mov	r3, r0
 80081b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80081bc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d108      	bne.n	80081d6 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80081c4:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 80081c8:	2102      	movs	r1, #2
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 fd82 	bl	8008cd4 <VL53L0X_SetLimitCheckValue>
 80081d0:	4603      	mov	r3, r0
 80081d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80081d6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d107      	bne.n	80081ee <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80081de:	2200      	movs	r2, #0
 80081e0:	2103      	movs	r1, #3
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 fd76 	bl	8008cd4 <VL53L0X_SetLimitCheckValue>
 80081e8:	4603      	mov	r3, r0
 80081ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80081ee:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d10f      	bne.n	8008216 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	22ff      	movs	r2, #255	; 0xff
 80081fa:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80081fe:	22ff      	movs	r2, #255	; 0xff
 8008200:	2101      	movs	r1, #1
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f004 fd70 	bl	800cce8 <VL53L0X_WrByte>
 8008208:	4603      	mov	r3, r0
 800820a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2201      	movs	r2, #1
 8008212:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8008216:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800821a:	2b00      	cmp	r3, #0
 800821c:	d103      	bne.n	8008226 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8008226:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800822a:	4618      	mov	r0, r3
 800822c:	3758      	adds	r7, #88	; 0x58
 800822e:	46bd      	mov	sp, r7
 8008230:	bdb0      	pop	{r4, r5, r7, pc}
 8008232:	bf00      	nop
 8008234:	00016b85 	.word	0x00016b85
 8008238:	000970a4 	.word	0x000970a4

0800823c <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 800823c:	b5b0      	push	{r4, r5, r7, lr}
 800823e:	b09e      	sub	sp, #120	; 0x78
 8008240:	af02      	add	r7, sp, #8
 8008242:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008244:	2300      	movs	r3, #0
 8008246:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 800824a:	f107 031c 	add.w	r3, r7, #28
 800824e:	2240      	movs	r2, #64	; 0x40
 8008250:	2100      	movs	r1, #0
 8008252:	4618      	mov	r0, r3
 8008254:	f004 feaa 	bl	800cfac <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8008258:	2300      	movs	r3, #0
 800825a:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 800825c:	2300      	movs	r3, #0
 800825e:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8008260:	2300      	movs	r3, #0
 8008262:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8008266:	2300      	movs	r3, #0
 8008268:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 800826a:	2300      	movs	r3, #0
 800826c:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 800826e:	2300      	movs	r3, #0
 8008270:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8008272:	2300      	movs	r3, #0
 8008274:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8008278:	2101      	movs	r1, #1
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f002 fa79 	bl	800a772 <VL53L0X_get_info_from_device>
 8008280:	4603      	mov	r3, r0
 8008282:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 800828c:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8008294:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8008298:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800829c:	2b01      	cmp	r3, #1
 800829e:	d80d      	bhi.n	80082bc <VL53L0X_StaticInit+0x80>
 80082a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	d102      	bne.n	80082ae <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 80082a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80082aa:	2b20      	cmp	r3, #32
 80082ac:	d806      	bhi.n	80082bc <VL53L0X_StaticInit+0x80>
 80082ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d10e      	bne.n	80082d4 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 80082b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80082b8:	2b0c      	cmp	r3, #12
 80082ba:	d90b      	bls.n	80082d4 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 80082bc:	f107 0218 	add.w	r2, r7, #24
 80082c0:	f107 0314 	add.w	r3, r7, #20
 80082c4:	4619      	mov	r1, r3
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f001 fcf8 	bl	8009cbc <VL53L0X_perform_ref_spad_management>
 80082cc:	4603      	mov	r3, r0
 80082ce:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80082d2:	e009      	b.n	80082e8 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 80082d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082d8:	461a      	mov	r2, r3
 80082da:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f001 fef9 	bl	800a0d4 <VL53L0X_set_reference_spads>
 80082e2:	4603      	mov	r3, r0
 80082e4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 80082e8:	4b94      	ldr	r3, [pc, #592]	; (800853c <VL53L0X_StaticInit+0x300>)
 80082ea:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 80082ec:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d10f      	bne.n	8008314 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 80082fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 80082fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008302:	2b00      	cmp	r3, #0
 8008304:	d104      	bne.n	8008310 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800830c:	66bb      	str	r3, [r7, #104]	; 0x68
 800830e:	e001      	b.n	8008314 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8008310:	4b8a      	ldr	r3, [pc, #552]	; (800853c <VL53L0X_StaticInit+0x300>)
 8008312:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8008314:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008318:	2b00      	cmp	r3, #0
 800831a:	d106      	bne.n	800832a <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 800831c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f003 fdcc 	bl	800bebc <VL53L0X_load_tuning_settings>
 8008324:	4603      	mov	r3, r0
 8008326:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 800832a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800832e:	2b00      	cmp	r3, #0
 8008330:	d10a      	bne.n	8008348 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8008332:	2300      	movs	r3, #0
 8008334:	9300      	str	r3, [sp, #0]
 8008336:	2304      	movs	r3, #4
 8008338:	2200      	movs	r2, #0
 800833a:	2100      	movs	r1, #0
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f001 f8f1 	bl	8009524 <VL53L0X_SetGpioConfig>
 8008342:	4603      	mov	r3, r0
 8008344:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008348:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800834c:	2b00      	cmp	r3, #0
 800834e:	d121      	bne.n	8008394 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008350:	2201      	movs	r2, #1
 8008352:	21ff      	movs	r1, #255	; 0xff
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f004 fcc7 	bl	800cce8 <VL53L0X_WrByte>
 800835a:	4603      	mov	r3, r0
 800835c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8008360:	f107 031a 	add.w	r3, r7, #26
 8008364:	461a      	mov	r2, r3
 8008366:	2184      	movs	r1, #132	; 0x84
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f004 fd69 	bl	800ce40 <VL53L0X_RdWord>
 800836e:	4603      	mov	r3, r0
 8008370:	461a      	mov	r2, r3
 8008372:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008376:	4313      	orrs	r3, r2
 8008378:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800837c:	2200      	movs	r2, #0
 800837e:	21ff      	movs	r1, #255	; 0xff
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f004 fcb1 	bl	800cce8 <VL53L0X_WrByte>
 8008386:	4603      	mov	r3, r0
 8008388:	461a      	mov	r2, r3
 800838a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800838e:	4313      	orrs	r3, r2
 8008390:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008394:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008398:	2b00      	cmp	r3, #0
 800839a:	d105      	bne.n	80083a8 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 800839c:	8b7b      	ldrh	r3, [r7, #26]
 800839e:	011b      	lsls	r3, r3, #4
 80083a0:	461a      	mov	r2, r3
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 80083a8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d108      	bne.n	80083c2 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80083b0:	f107 031c 	add.w	r3, r7, #28
 80083b4:	4619      	mov	r1, r3
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 f8d0 	bl	800855c <VL53L0X_GetDeviceParameters>
 80083bc:	4603      	mov	r3, r0
 80083be:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 80083c2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d110      	bne.n	80083ec <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 80083ca:	f107 0319 	add.w	r3, r7, #25
 80083ce:	4619      	mov	r1, r3
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 f992 	bl	80086fa <VL53L0X_GetFractionEnable>
 80083d6:	4603      	mov	r3, r0
 80083d8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 80083dc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d103      	bne.n	80083ec <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 80083e4:	7e7a      	ldrb	r2, [r7, #25]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 80083ec:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d10e      	bne.n	8008412 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f103 0410 	add.w	r4, r3, #16
 80083fa:	f107 051c 	add.w	r5, r7, #28
 80083fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008400:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008402:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008404:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008406:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008408:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800840a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800840e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8008412:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008416:	2b00      	cmp	r3, #0
 8008418:	d111      	bne.n	800843e <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 800841a:	f107 0319 	add.w	r3, r7, #25
 800841e:	461a      	mov	r2, r3
 8008420:	2101      	movs	r1, #1
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f004 fce2 	bl	800cdec <VL53L0X_RdByte>
 8008428:	4603      	mov	r3, r0
 800842a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 800842e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008432:	2b00      	cmp	r3, #0
 8008434:	d103      	bne.n	800843e <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8008436:	7e7a      	ldrb	r2, [r7, #25]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 800843e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008442:	2b00      	cmp	r3, #0
 8008444:	d107      	bne.n	8008456 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8008446:	2200      	movs	r2, #0
 8008448:	2100      	movs	r1, #0
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 f9ca 	bl	80087e4 <VL53L0X_SetSequenceStepEnable>
 8008450:	4603      	mov	r3, r0
 8008452:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8008456:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800845a:	2b00      	cmp	r3, #0
 800845c:	d107      	bne.n	800846e <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800845e:	2200      	movs	r2, #0
 8008460:	2102      	movs	r1, #2
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 f9be 	bl	80087e4 <VL53L0X_SetSequenceStepEnable>
 8008468:	4603      	mov	r3, r0
 800846a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 800846e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008472:	2b00      	cmp	r3, #0
 8008474:	d103      	bne.n	800847e <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2203      	movs	r2, #3
 800847a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800847e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008482:	2b00      	cmp	r3, #0
 8008484:	d109      	bne.n	800849a <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8008486:	f107 0313 	add.w	r3, r7, #19
 800848a:	461a      	mov	r2, r3
 800848c:	2100      	movs	r1, #0
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 f990 	bl	80087b4 <VL53L0X_GetVcselPulsePeriod>
 8008494:	4603      	mov	r3, r0
 8008496:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800849a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d103      	bne.n	80084aa <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80084a2:	7cfa      	ldrb	r2, [r7, #19]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80084aa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d109      	bne.n	80084c6 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 80084b2:	f107 0313 	add.w	r3, r7, #19
 80084b6:	461a      	mov	r2, r3
 80084b8:	2101      	movs	r1, #1
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 f97a 	bl	80087b4 <VL53L0X_GetVcselPulsePeriod>
 80084c0:	4603      	mov	r3, r0
 80084c2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80084c6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d103      	bne.n	80084d6 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80084ce:	7cfa      	ldrb	r2, [r7, #19]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80084d6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d109      	bne.n	80084f2 <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 80084de:	f107 030c 	add.w	r3, r7, #12
 80084e2:	461a      	mov	r2, r3
 80084e4:	2103      	movs	r1, #3
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f002 fec4 	bl	800b274 <get_sequence_step_timeout>
 80084ec:	4603      	mov	r3, r0
 80084ee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80084f2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d103      	bne.n	8008502 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80084fa:	68fa      	ldr	r2, [r7, #12]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8008502:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008506:	2b00      	cmp	r3, #0
 8008508:	d109      	bne.n	800851e <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 800850a:	f107 030c 	add.w	r3, r7, #12
 800850e:	461a      	mov	r2, r3
 8008510:	2104      	movs	r1, #4
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f002 feae 	bl	800b274 <get_sequence_step_timeout>
 8008518:	4603      	mov	r3, r0
 800851a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800851e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008522:	2b00      	cmp	r3, #0
 8008524:	d103      	bne.n	800852e <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008526:	68fa      	ldr	r2, [r7, #12]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800852e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8008532:	4618      	mov	r0, r3
 8008534:	3770      	adds	r7, #112	; 0x70
 8008536:	46bd      	mov	sp, r7
 8008538:	bdb0      	pop	{r4, r5, r7, pc}
 800853a:	bf00      	nop
 800853c:	20000010 	.word	0x20000010

08008540 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 8008540:	b480      	push	{r7}
 8008542:	b085      	sub	sp, #20
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8008548:	239d      	movs	r3, #157	; 0x9d
 800854a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 800854c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008550:	4618      	mov	r0, r3
 8008552:	3714      	adds	r7, #20
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr

0800855c <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b084      	sub	sp, #16
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008566:	2300      	movs	r3, #0
 8008568:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	4619      	mov	r1, r3
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 f8b0 	bl	80086d4 <VL53L0X_GetDeviceMode>
 8008574:	4603      	mov	r3, r0
 8008576:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008578:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d107      	bne.n	8008590 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	3308      	adds	r3, #8
 8008584:	4619      	mov	r1, r3
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 fa78 	bl	8008a7c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 800858c:	4603      	mov	r3, r0
 800858e:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8008590:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d102      	bne.n	800859e <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	2200      	movs	r2, #0
 800859c:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 800859e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d107      	bne.n	80085b6 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	3310      	adds	r3, #16
 80085aa:	4619      	mov	r1, r3
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f000 faae 	bl	8008b0e <VL53L0X_GetXTalkCompensationRateMegaCps>
 80085b2:	4603      	mov	r3, r0
 80085b4:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 80085b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d107      	bne.n	80085ce <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	3314      	adds	r3, #20
 80085c2:	4619      	mov	r1, r3
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f7ff fcc1 	bl	8007f4c <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 80085ca:	4603      	mov	r3, r0
 80085cc:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 80085ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d134      	bne.n	8008640 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80085d6:	2300      	movs	r3, #0
 80085d8:	60bb      	str	r3, [r7, #8]
 80085da:	e02a      	b.n	8008632 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80085dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d12a      	bne.n	800863a <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	b299      	uxth	r1, r3
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	3308      	adds	r3, #8
 80085ec:	009b      	lsls	r3, r3, #2
 80085ee:	683a      	ldr	r2, [r7, #0]
 80085f0:	4413      	add	r3, r2
 80085f2:	3304      	adds	r3, #4
 80085f4:	461a      	mov	r2, r3
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f000 fbce 	bl	8008d98 <VL53L0X_GetLimitCheckValue>
 80085fc:	4603      	mov	r3, r0
 80085fe:	461a      	mov	r2, r3
 8008600:	7bfb      	ldrb	r3, [r7, #15]
 8008602:	4313      	orrs	r3, r2
 8008604:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8008606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d117      	bne.n	800863e <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	b299      	uxth	r1, r3
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	3318      	adds	r3, #24
 8008616:	683a      	ldr	r2, [r7, #0]
 8008618:	4413      	add	r3, r2
 800861a:	461a      	mov	r2, r3
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 fb35 	bl	8008c8c <VL53L0X_GetLimitCheckEnable>
 8008622:	4603      	mov	r3, r0
 8008624:	461a      	mov	r2, r3
 8008626:	7bfb      	ldrb	r3, [r7, #15]
 8008628:	4313      	orrs	r3, r2
 800862a:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	3301      	adds	r3, #1
 8008630:	60bb      	str	r3, [r7, #8]
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	2b05      	cmp	r3, #5
 8008636:	ddd1      	ble.n	80085dc <VL53L0X_GetDeviceParameters+0x80>
 8008638:	e002      	b.n	8008640 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 800863a:	bf00      	nop
 800863c:	e000      	b.n	8008640 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 800863e:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008640:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d107      	bne.n	8008658 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	333c      	adds	r3, #60	; 0x3c
 800864c:	4619      	mov	r1, r3
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 fc30 	bl	8008eb4 <VL53L0X_GetWrapAroundCheckEnable>
 8008654:	4603      	mov	r3, r0
 8008656:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8008658:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d107      	bne.n	8008670 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	3304      	adds	r3, #4
 8008664:	4619      	mov	r1, r3
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 f879 	bl	800875e <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 800866c:	4603      	mov	r3, r0
 800866e:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008670:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008674:	4618      	mov	r0, r3
 8008676:	3710      	adds	r7, #16
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 800867c:	b480      	push	{r7}
 800867e:	b085      	sub	sp, #20
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	460b      	mov	r3, r1
 8008686:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008688:	2300      	movs	r3, #0
 800868a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 800868c:	78fb      	ldrb	r3, [r7, #3]
 800868e:	2b15      	cmp	r3, #21
 8008690:	bf8c      	ite	hi
 8008692:	2201      	movhi	r2, #1
 8008694:	2200      	movls	r2, #0
 8008696:	b2d2      	uxtb	r2, r2
 8008698:	2a00      	cmp	r2, #0
 800869a:	d10e      	bne.n	80086ba <VL53L0X_SetDeviceMode+0x3e>
 800869c:	2201      	movs	r2, #1
 800869e:	409a      	lsls	r2, r3
 80086a0:	4b0b      	ldr	r3, [pc, #44]	; (80086d0 <VL53L0X_SetDeviceMode+0x54>)
 80086a2:	4013      	ands	r3, r2
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	bf14      	ite	ne
 80086a8:	2301      	movne	r3, #1
 80086aa:	2300      	moveq	r3, #0
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d003      	beq.n	80086ba <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	78fa      	ldrb	r2, [r7, #3]
 80086b6:	741a      	strb	r2, [r3, #16]
		break;
 80086b8:	e001      	b.n	80086be <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80086ba:	23f8      	movs	r3, #248	; 0xf8
 80086bc:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80086be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3714      	adds	r7, #20
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr
 80086ce:	bf00      	nop
 80086d0:	0030000b 	.word	0x0030000b

080086d4 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b085      	sub	sp, #20
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80086de:	2300      	movs	r3, #0
 80086e0:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	7c1a      	ldrb	r2, [r3, #16]
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80086ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3714      	adds	r7, #20
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr

080086fa <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 80086fa:	b580      	push	{r7, lr}
 80086fc:	b084      	sub	sp, #16
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
 8008702:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008704:	2300      	movs	r3, #0
 8008706:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8008708:	683a      	ldr	r2, [r7, #0]
 800870a:	2109      	movs	r1, #9
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f004 fb6d 	bl	800cdec <VL53L0X_RdByte>
 8008712:	4603      	mov	r3, r0
 8008714:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d106      	bne.n	800872c <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	781b      	ldrb	r3, [r3, #0]
 8008722:	f003 0301 	and.w	r3, r3, #1
 8008726:	b2da      	uxtb	r2, r3
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800872c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008730:	4618      	mov	r0, r3
 8008732:	3710      	adds	r7, #16
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008742:	2300      	movs	r3, #0
 8008744:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8008746:	6839      	ldr	r1, [r7, #0]
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f003 fa26 	bl	800bb9a <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800874e:	4603      	mov	r3, r0
 8008750:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8008752:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008756:	4618      	mov	r0, r3
 8008758:	3710      	adds	r7, #16
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}

0800875e <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800875e:	b580      	push	{r7, lr}
 8008760:	b084      	sub	sp, #16
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
 8008766:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008768:	2300      	movs	r3, #0
 800876a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 800876c:	6839      	ldr	r1, [r7, #0]
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f003 faf3 	bl	800bd5a <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8008774:	4603      	mov	r3, r0
 8008776:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8008778:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800877c:	4618      	mov	r0, r3
 800877e:	3710      	adds	r7, #16
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	460b      	mov	r3, r1
 800878e:	70fb      	strb	r3, [r7, #3]
 8008790:	4613      	mov	r3, r2
 8008792:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008794:	2300      	movs	r3, #0
 8008796:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8008798:	78ba      	ldrb	r2, [r7, #2]
 800879a:	78fb      	ldrb	r3, [r7, #3]
 800879c:	4619      	mov	r1, r3
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f002 ff3b 	bl	800b61a <VL53L0X_set_vcsel_pulse_period>
 80087a4:	4603      	mov	r3, r0
 80087a6:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80087a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3710      	adds	r7, #16
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b086      	sub	sp, #24
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	460b      	mov	r3, r1
 80087be:	607a      	str	r2, [r7, #4]
 80087c0:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80087c2:	2300      	movs	r3, #0
 80087c4:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80087c6:	7afb      	ldrb	r3, [r7, #11]
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	4619      	mov	r1, r3
 80087cc:	68f8      	ldr	r0, [r7, #12]
 80087ce:	f003 f9ad 	bl	800bb2c <VL53L0X_get_vcsel_pulse_period>
 80087d2:	4603      	mov	r3, r0
 80087d4:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80087d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3718      	adds	r7, #24
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
	...

080087e4 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b086      	sub	sp, #24
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	460b      	mov	r3, r1
 80087ee:	70fb      	strb	r3, [r7, #3]
 80087f0:	4613      	mov	r3, r2
 80087f2:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80087f4:	2300      	movs	r3, #0
 80087f6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80087f8:	2300      	movs	r3, #0
 80087fa:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 80087fc:	2300      	movs	r3, #0
 80087fe:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008800:	f107 030f 	add.w	r3, r7, #15
 8008804:	461a      	mov	r2, r3
 8008806:	2101      	movs	r1, #1
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f004 faef 	bl	800cdec <VL53L0X_RdByte>
 800880e:	4603      	mov	r3, r0
 8008810:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8008812:	7bfb      	ldrb	r3, [r7, #15]
 8008814:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8008816:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d15a      	bne.n	80088d4 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 800881e:	78bb      	ldrb	r3, [r7, #2]
 8008820:	2b01      	cmp	r3, #1
 8008822:	d12b      	bne.n	800887c <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8008824:	78fb      	ldrb	r3, [r7, #3]
 8008826:	2b04      	cmp	r3, #4
 8008828:	d825      	bhi.n	8008876 <VL53L0X_SetSequenceStepEnable+0x92>
 800882a:	a201      	add	r2, pc, #4	; (adr r2, 8008830 <VL53L0X_SetSequenceStepEnable+0x4c>)
 800882c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008830:	08008845 	.word	0x08008845
 8008834:	0800884f 	.word	0x0800884f
 8008838:	08008859 	.word	0x08008859
 800883c:	08008863 	.word	0x08008863
 8008840:	0800886d 	.word	0x0800886d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8008844:	7dbb      	ldrb	r3, [r7, #22]
 8008846:	f043 0310 	orr.w	r3, r3, #16
 800884a:	75bb      	strb	r3, [r7, #22]
				break;
 800884c:	e043      	b.n	80088d6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800884e:	7dbb      	ldrb	r3, [r7, #22]
 8008850:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8008854:	75bb      	strb	r3, [r7, #22]
				break;
 8008856:	e03e      	b.n	80088d6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8008858:	7dbb      	ldrb	r3, [r7, #22]
 800885a:	f043 0304 	orr.w	r3, r3, #4
 800885e:	75bb      	strb	r3, [r7, #22]
				break;
 8008860:	e039      	b.n	80088d6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8008862:	7dbb      	ldrb	r3, [r7, #22]
 8008864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008868:	75bb      	strb	r3, [r7, #22]
				break;
 800886a:	e034      	b.n	80088d6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 800886c:	7dbb      	ldrb	r3, [r7, #22]
 800886e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008872:	75bb      	strb	r3, [r7, #22]
				break;
 8008874:	e02f      	b.n	80088d6 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008876:	23fc      	movs	r3, #252	; 0xfc
 8008878:	75fb      	strb	r3, [r7, #23]
 800887a:	e02c      	b.n	80088d6 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 800887c:	78fb      	ldrb	r3, [r7, #3]
 800887e:	2b04      	cmp	r3, #4
 8008880:	d825      	bhi.n	80088ce <VL53L0X_SetSequenceStepEnable+0xea>
 8008882:	a201      	add	r2, pc, #4	; (adr r2, 8008888 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8008884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008888:	0800889d 	.word	0x0800889d
 800888c:	080088a7 	.word	0x080088a7
 8008890:	080088b1 	.word	0x080088b1
 8008894:	080088bb 	.word	0x080088bb
 8008898:	080088c5 	.word	0x080088c5
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 800889c:	7dbb      	ldrb	r3, [r7, #22]
 800889e:	f023 0310 	bic.w	r3, r3, #16
 80088a2:	75bb      	strb	r3, [r7, #22]
				break;
 80088a4:	e017      	b.n	80088d6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 80088a6:	7dbb      	ldrb	r3, [r7, #22]
 80088a8:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80088ac:	75bb      	strb	r3, [r7, #22]
				break;
 80088ae:	e012      	b.n	80088d6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 80088b0:	7dbb      	ldrb	r3, [r7, #22]
 80088b2:	f023 0304 	bic.w	r3, r3, #4
 80088b6:	75bb      	strb	r3, [r7, #22]
				break;
 80088b8:	e00d      	b.n	80088d6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 80088ba:	7dbb      	ldrb	r3, [r7, #22]
 80088bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088c0:	75bb      	strb	r3, [r7, #22]
				break;
 80088c2:	e008      	b.n	80088d6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 80088c4:	7dbb      	ldrb	r3, [r7, #22]
 80088c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088ca:	75bb      	strb	r3, [r7, #22]
				break;
 80088cc:	e003      	b.n	80088d6 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80088ce:	23fc      	movs	r3, #252	; 0xfc
 80088d0:	75fb      	strb	r3, [r7, #23]
 80088d2:	e000      	b.n	80088d6 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 80088d4:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 80088d6:	7bfb      	ldrb	r3, [r7, #15]
 80088d8:	7dba      	ldrb	r2, [r7, #22]
 80088da:	429a      	cmp	r2, r3
 80088dc:	d01e      	beq.n	800891c <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 80088de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d107      	bne.n	80088f6 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 80088e6:	7dbb      	ldrb	r3, [r7, #22]
 80088e8:	461a      	mov	r2, r3
 80088ea:	2101      	movs	r1, #1
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f004 f9fb 	bl	800cce8 <VL53L0X_WrByte>
 80088f2:	4603      	mov	r3, r0
 80088f4:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 80088f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d103      	bne.n	8008906 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	7dba      	ldrb	r2, [r7, #22]
 8008902:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8008906:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d106      	bne.n	800891c <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	695b      	ldr	r3, [r3, #20]
 8008912:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8008914:	6939      	ldr	r1, [r7, #16]
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f7ff ff0e 	bl	8008738 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800891c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008920:	4618      	mov	r0, r3
 8008922:	3718      	adds	r7, #24
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8008928:	b480      	push	{r7}
 800892a:	b087      	sub	sp, #28
 800892c:	af00      	add	r7, sp, #0
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	607b      	str	r3, [r7, #4]
 8008932:	460b      	mov	r3, r1
 8008934:	72fb      	strb	r3, [r7, #11]
 8008936:	4613      	mov	r3, r2
 8008938:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800893a:	2300      	movs	r3, #0
 800893c:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2200      	movs	r2, #0
 8008942:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8008944:	7afb      	ldrb	r3, [r7, #11]
 8008946:	2b04      	cmp	r3, #4
 8008948:	d836      	bhi.n	80089b8 <sequence_step_enabled+0x90>
 800894a:	a201      	add	r2, pc, #4	; (adr r2, 8008950 <sequence_step_enabled+0x28>)
 800894c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008950:	08008965 	.word	0x08008965
 8008954:	08008977 	.word	0x08008977
 8008958:	08008989 	.word	0x08008989
 800895c:	0800899b 	.word	0x0800899b
 8008960:	080089ad 	.word	0x080089ad
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8008964:	7abb      	ldrb	r3, [r7, #10]
 8008966:	111b      	asrs	r3, r3, #4
 8008968:	b2db      	uxtb	r3, r3
 800896a:	f003 0301 	and.w	r3, r3, #1
 800896e:	b2da      	uxtb	r2, r3
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	701a      	strb	r2, [r3, #0]
		break;
 8008974:	e022      	b.n	80089bc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8008976:	7abb      	ldrb	r3, [r7, #10]
 8008978:	10db      	asrs	r3, r3, #3
 800897a:	b2db      	uxtb	r3, r3
 800897c:	f003 0301 	and.w	r3, r3, #1
 8008980:	b2da      	uxtb	r2, r3
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	701a      	strb	r2, [r3, #0]
		break;
 8008986:	e019      	b.n	80089bc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8008988:	7abb      	ldrb	r3, [r7, #10]
 800898a:	109b      	asrs	r3, r3, #2
 800898c:	b2db      	uxtb	r3, r3
 800898e:	f003 0301 	and.w	r3, r3, #1
 8008992:	b2da      	uxtb	r2, r3
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	701a      	strb	r2, [r3, #0]
		break;
 8008998:	e010      	b.n	80089bc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800899a:	7abb      	ldrb	r3, [r7, #10]
 800899c:	119b      	asrs	r3, r3, #6
 800899e:	b2db      	uxtb	r3, r3
 80089a0:	f003 0301 	and.w	r3, r3, #1
 80089a4:	b2da      	uxtb	r2, r3
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	701a      	strb	r2, [r3, #0]
		break;
 80089aa:	e007      	b.n	80089bc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80089ac:	7abb      	ldrb	r3, [r7, #10]
 80089ae:	09db      	lsrs	r3, r3, #7
 80089b0:	b2da      	uxtb	r2, r3
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	701a      	strb	r2, [r3, #0]
		break;
 80089b6:	e001      	b.n	80089bc <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80089b8:	23fc      	movs	r3, #252	; 0xfc
 80089ba:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80089bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	371c      	adds	r7, #28
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr

080089cc <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b084      	sub	sp, #16
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80089d6:	2300      	movs	r3, #0
 80089d8:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 80089da:	2300      	movs	r3, #0
 80089dc:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80089de:	f107 030e 	add.w	r3, r7, #14
 80089e2:	461a      	mov	r2, r3
 80089e4:	2101      	movs	r1, #1
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f004 fa00 	bl	800cdec <VL53L0X_RdByte>
 80089ec:	4603      	mov	r3, r0
 80089ee:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 80089f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d107      	bne.n	8008a08 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 80089f8:	7bba      	ldrb	r2, [r7, #14]
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	2100      	movs	r1, #0
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f7ff ff92 	bl	8008928 <sequence_step_enabled>
 8008a04:	4603      	mov	r3, r0
 8008a06:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008a08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d108      	bne.n	8008a22 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8008a10:	7bba      	ldrb	r2, [r7, #14]
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	3302      	adds	r3, #2
 8008a16:	2101      	movs	r1, #1
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f7ff ff85 	bl	8008928 <sequence_step_enabled>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d108      	bne.n	8008a3c <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8008a2a:	7bba      	ldrb	r2, [r7, #14]
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	3301      	adds	r3, #1
 8008a30:	2102      	movs	r1, #2
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f7ff ff78 	bl	8008928 <sequence_step_enabled>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008a3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d108      	bne.n	8008a56 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8008a44:	7bba      	ldrb	r2, [r7, #14]
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	3303      	adds	r3, #3
 8008a4a:	2103      	movs	r1, #3
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f7ff ff6b 	bl	8008928 <sequence_step_enabled>
 8008a52:	4603      	mov	r3, r0
 8008a54:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d108      	bne.n	8008a70 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8008a5e:	7bba      	ldrb	r2, [r7, #14]
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	3304      	adds	r3, #4
 8008a64:	2104      	movs	r1, #4
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f7ff ff5e 	bl	8008928 <sequence_step_enabled>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008a70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3710      	adds	r7, #16
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b084      	sub	sp, #16
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008a86:	2300      	movs	r3, #0
 8008a88:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8008a8a:	f107 030c 	add.w	r3, r7, #12
 8008a8e:	461a      	mov	r2, r3
 8008a90:	21f8      	movs	r1, #248	; 0xf8
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f004 f9d4 	bl	800ce40 <VL53L0X_RdWord>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8008a9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d108      	bne.n	8008ab6 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8008aa4:	f107 0308 	add.w	r3, r7, #8
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	2104      	movs	r1, #4
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f004 f9ff 	bl	800ceb0 <VL53L0X_RdDWord>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d10c      	bne.n	8008ad8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8008abe:	89bb      	ldrh	r3, [r7, #12]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d005      	beq.n	8008ad0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	89ba      	ldrh	r2, [r7, #12]
 8008ac8:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	681a      	ldr	r2, [r3, #0]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008ad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3710      	adds	r7, #16
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b085      	sub	sp, #20
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008aee:	2300      	movs	r3, #0
 8008af0:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	7f1b      	ldrb	r3, [r3, #28]
 8008af6:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	7bba      	ldrb	r2, [r7, #14]
 8008afc:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8008afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3714      	adds	r7, #20
 8008b06:	46bd      	mov	sp, r7
 8008b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0c:	4770      	bx	lr

08008b0e <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8008b0e:	b580      	push	{r7, lr}
 8008b10:	b086      	sub	sp, #24
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	6078      	str	r0, [r7, #4]
 8008b16:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8008b1c:	f107 030e 	add.w	r3, r7, #14
 8008b20:	461a      	mov	r2, r3
 8008b22:	2120      	movs	r1, #32
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f004 f98b 	bl	800ce40 <VL53L0X_RdWord>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8008b2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d118      	bne.n	8008b68 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8008b36:	89fb      	ldrh	r3, [r7, #14]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d109      	bne.n	8008b50 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6a1b      	ldr	r3, [r3, #32]
 8008b40:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	693a      	ldr	r2, [r7, #16]
 8008b46:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	771a      	strb	r2, [r3, #28]
 8008b4e:	e00b      	b.n	8008b68 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8008b50:	89fb      	ldrh	r3, [r7, #14]
 8008b52:	00db      	lsls	r3, r3, #3
 8008b54:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	693a      	ldr	r2, [r7, #16]
 8008b5a:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	693a      	ldr	r2, [r7, #16]
 8008b60:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2201      	movs	r2, #1
 8008b66:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008b68:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3718      	adds	r7, #24
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b086      	sub	sp, #24
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	460b      	mov	r3, r1
 8008b7e:	807b      	strh	r3, [r7, #2]
 8008b80:	4613      	mov	r3, r2
 8008b82:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008b84:	2300      	movs	r3, #0
 8008b86:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8008b90:	2300      	movs	r3, #0
 8008b92:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8008b94:	887b      	ldrh	r3, [r7, #2]
 8008b96:	2b05      	cmp	r3, #5
 8008b98:	d902      	bls.n	8008ba0 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008b9a:	23fc      	movs	r3, #252	; 0xfc
 8008b9c:	75fb      	strb	r3, [r7, #23]
 8008b9e:	e05b      	b.n	8008c58 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8008ba0:	787b      	ldrb	r3, [r7, #1]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d106      	bne.n	8008bb4 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8008baa:	2300      	movs	r3, #0
 8008bac:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	73bb      	strb	r3, [r7, #14]
 8008bb2:	e00a      	b.n	8008bca <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008bb4:	887b      	ldrh	r3, [r7, #2]
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	330c      	adds	r3, #12
 8008bba:	009b      	lsls	r3, r3, #2
 8008bbc:	4413      	add	r3, r2
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8008bca:	887b      	ldrh	r3, [r7, #2]
 8008bcc:	2b05      	cmp	r3, #5
 8008bce:	d841      	bhi.n	8008c54 <VL53L0X_SetLimitCheckEnable+0xe0>
 8008bd0:	a201      	add	r2, pc, #4	; (adr r2, 8008bd8 <VL53L0X_SetLimitCheckEnable+0x64>)
 8008bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bd6:	bf00      	nop
 8008bd8:	08008bf1 	.word	0x08008bf1
 8008bdc:	08008bfb 	.word	0x08008bfb
 8008be0:	08008c11 	.word	0x08008c11
 8008be4:	08008c1b 	.word	0x08008c1b
 8008be8:	08008c25 	.word	0x08008c25
 8008bec:	08008c3d 	.word	0x08008c3d

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	7bfa      	ldrb	r2, [r7, #15]
 8008bf4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8008bf8:	e02e      	b.n	8008c58 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8008bfe:	b29b      	uxth	r3, r3
 8008c00:	461a      	mov	r2, r3
 8008c02:	2144      	movs	r1, #68	; 0x44
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f004 f893 	bl	800cd30 <VL53L0X_WrWord>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	75fb      	strb	r3, [r7, #23]

			break;
 8008c0e:	e023      	b.n	8008c58 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	7bfa      	ldrb	r2, [r7, #15]
 8008c14:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8008c18:	e01e      	b.n	8008c58 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	7bfa      	ldrb	r2, [r7, #15]
 8008c1e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8008c22:	e019      	b.n	8008c58 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8008c24:	7bbb      	ldrb	r3, [r7, #14]
 8008c26:	005b      	lsls	r3, r3, #1
 8008c28:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8008c2a:	7b7b      	ldrb	r3, [r7, #13]
 8008c2c:	22fe      	movs	r2, #254	; 0xfe
 8008c2e:	2160      	movs	r1, #96	; 0x60
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f004 f8a7 	bl	800cd84 <VL53L0X_UpdateByte>
 8008c36:	4603      	mov	r3, r0
 8008c38:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8008c3a:	e00d      	b.n	8008c58 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8008c3c:	7bbb      	ldrb	r3, [r7, #14]
 8008c3e:	011b      	lsls	r3, r3, #4
 8008c40:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8008c42:	7b7b      	ldrb	r3, [r7, #13]
 8008c44:	22ef      	movs	r2, #239	; 0xef
 8008c46:	2160      	movs	r1, #96	; 0x60
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f004 f89b 	bl	800cd84 <VL53L0X_UpdateByte>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8008c52:	e001      	b.n	8008c58 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008c54:	23fc      	movs	r3, #252	; 0xfc
 8008c56:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008c58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d10f      	bne.n	8008c80 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8008c60:	787b      	ldrb	r3, [r7, #1]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d106      	bne.n	8008c74 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008c66:	887b      	ldrh	r3, [r7, #2]
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	4413      	add	r3, r2
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8008c72:	e005      	b.n	8008c80 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008c74:	887b      	ldrh	r3, [r7, #2]
 8008c76:	687a      	ldr	r2, [r7, #4]
 8008c78:	4413      	add	r3, r2
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008c80:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3718      	adds	r7, #24
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b087      	sub	sp, #28
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	60f8      	str	r0, [r7, #12]
 8008c94:	460b      	mov	r3, r1
 8008c96:	607a      	str	r2, [r7, #4]
 8008c98:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8008c9e:	897b      	ldrh	r3, [r7, #10]
 8008ca0:	2b05      	cmp	r3, #5
 8008ca2:	d905      	bls.n	8008cb0 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008ca4:	23fc      	movs	r3, #252	; 0xfc
 8008ca6:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2200      	movs	r2, #0
 8008cac:	701a      	strb	r2, [r3, #0]
 8008cae:	e008      	b.n	8008cc2 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008cb0:	897b      	ldrh	r3, [r7, #10]
 8008cb2:	68fa      	ldr	r2, [r7, #12]
 8008cb4:	4413      	add	r3, r2
 8008cb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008cba:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	7dba      	ldrb	r2, [r7, #22]
 8008cc0:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008cc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	371c      	adds	r7, #28
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr
	...

08008cd4 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b086      	sub	sp, #24
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	60f8      	str	r0, [r7, #12]
 8008cdc:	460b      	mov	r3, r1
 8008cde:	607a      	str	r2, [r7, #4]
 8008ce0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8008ce6:	897b      	ldrh	r3, [r7, #10]
 8008ce8:	68fa      	ldr	r2, [r7, #12]
 8008cea:	4413      	add	r3, r2
 8008cec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008cf0:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8008cf2:	7dbb      	ldrb	r3, [r7, #22]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d107      	bne.n	8008d08 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008cf8:	897b      	ldrh	r3, [r7, #10]
 8008cfa:	68fa      	ldr	r2, [r7, #12]
 8008cfc:	330c      	adds	r3, #12
 8008cfe:	009b      	lsls	r3, r3, #2
 8008d00:	4413      	add	r3, r2
 8008d02:	687a      	ldr	r2, [r7, #4]
 8008d04:	605a      	str	r2, [r3, #4]
 8008d06:	e040      	b.n	8008d8a <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8008d08:	897b      	ldrh	r3, [r7, #10]
 8008d0a:	2b05      	cmp	r3, #5
 8008d0c:	d830      	bhi.n	8008d70 <VL53L0X_SetLimitCheckValue+0x9c>
 8008d0e:	a201      	add	r2, pc, #4	; (adr r2, 8008d14 <VL53L0X_SetLimitCheckValue+0x40>)
 8008d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d14:	08008d2d 	.word	0x08008d2d
 8008d18:	08008d35 	.word	0x08008d35
 8008d1c:	08008d4b 	.word	0x08008d4b
 8008d20:	08008d53 	.word	0x08008d53
 8008d24:	08008d5b 	.word	0x08008d5b
 8008d28:	08008d5b 	.word	0x08008d5b

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	687a      	ldr	r2, [r7, #4]
 8008d30:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8008d32:	e01f      	b.n	8008d74 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8008d38:	b29b      	uxth	r3, r3
 8008d3a:	461a      	mov	r2, r3
 8008d3c:	2144      	movs	r1, #68	; 0x44
 8008d3e:	68f8      	ldr	r0, [r7, #12]
 8008d40:	f003 fff6 	bl	800cd30 <VL53L0X_WrWord>
 8008d44:	4603      	mov	r3, r0
 8008d46:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8008d48:	e014      	b.n	8008d74 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8008d50:	e010      	b.n	8008d74 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8008d58:	e00c      	b.n	8008d74 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	461a      	mov	r2, r3
 8008d62:	2164      	movs	r1, #100	; 0x64
 8008d64:	68f8      	ldr	r0, [r7, #12]
 8008d66:	f003 ffe3 	bl	800cd30 <VL53L0X_WrWord>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8008d6e:	e001      	b.n	8008d74 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008d70:	23fc      	movs	r3, #252	; 0xfc
 8008d72:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8008d74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d106      	bne.n	8008d8a <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008d7c:	897b      	ldrh	r3, [r7, #10]
 8008d7e:	68fa      	ldr	r2, [r7, #12]
 8008d80:	330c      	adds	r3, #12
 8008d82:	009b      	lsls	r3, r3, #2
 8008d84:	4413      	add	r3, r2
 8008d86:	687a      	ldr	r2, [r7, #4]
 8008d88:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008d8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3718      	adds	r7, #24
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}
 8008d96:	bf00      	nop

08008d98 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b088      	sub	sp, #32
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	60f8      	str	r0, [r7, #12]
 8008da0:	460b      	mov	r3, r1
 8008da2:	607a      	str	r2, [r7, #4]
 8008da4:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008da6:	2300      	movs	r3, #0
 8008da8:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8008daa:	2300      	movs	r3, #0
 8008dac:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8008dae:	897b      	ldrh	r3, [r7, #10]
 8008db0:	2b05      	cmp	r3, #5
 8008db2:	d847      	bhi.n	8008e44 <VL53L0X_GetLimitCheckValue+0xac>
 8008db4:	a201      	add	r2, pc, #4	; (adr r2, 8008dbc <VL53L0X_GetLimitCheckValue+0x24>)
 8008db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dba:	bf00      	nop
 8008dbc:	08008dd5 	.word	0x08008dd5
 8008dc0:	08008de1 	.word	0x08008de1
 8008dc4:	08008e07 	.word	0x08008e07
 8008dc8:	08008e13 	.word	0x08008e13
 8008dcc:	08008e1f 	.word	0x08008e1f
 8008dd0:	08008e1f 	.word	0x08008e1f

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dd8:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	77bb      	strb	r3, [r7, #30]
		break;
 8008dde:	e033      	b.n	8008e48 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8008de0:	f107 0316 	add.w	r3, r7, #22
 8008de4:	461a      	mov	r2, r3
 8008de6:	2144      	movs	r1, #68	; 0x44
 8008de8:	68f8      	ldr	r0, [r7, #12]
 8008dea:	f004 f829 	bl	800ce40 <VL53L0X_RdWord>
 8008dee:	4603      	mov	r3, r0
 8008df0:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8008df2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d102      	bne.n	8008e00 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8008dfa:	8afb      	ldrh	r3, [r7, #22]
 8008dfc:	025b      	lsls	r3, r3, #9
 8008dfe:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8008e00:	2301      	movs	r3, #1
 8008e02:	77bb      	strb	r3, [r7, #30]
		break;
 8008e04:	e020      	b.n	8008e48 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e0a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	77bb      	strb	r3, [r7, #30]
		break;
 8008e10:	e01a      	b.n	8008e48 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e16:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	77bb      	strb	r3, [r7, #30]
		break;
 8008e1c:	e014      	b.n	8008e48 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8008e1e:	f107 0316 	add.w	r3, r7, #22
 8008e22:	461a      	mov	r2, r3
 8008e24:	2164      	movs	r1, #100	; 0x64
 8008e26:	68f8      	ldr	r0, [r7, #12]
 8008e28:	f004 f80a 	bl	800ce40 <VL53L0X_RdWord>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8008e30:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d102      	bne.n	8008e3e <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8008e38:	8afb      	ldrh	r3, [r7, #22]
 8008e3a:	025b      	lsls	r3, r3, #9
 8008e3c:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	77bb      	strb	r3, [r7, #30]
		break;
 8008e42:	e001      	b.n	8008e48 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008e44:	23fc      	movs	r3, #252	; 0xfc
 8008e46:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008e48:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d12a      	bne.n	8008ea6 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8008e50:	7fbb      	ldrb	r3, [r7, #30]
 8008e52:	2b01      	cmp	r3, #1
 8008e54:	d124      	bne.n	8008ea0 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8008e56:	69bb      	ldr	r3, [r7, #24]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d110      	bne.n	8008e7e <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8008e5c:	897b      	ldrh	r3, [r7, #10]
 8008e5e:	68fa      	ldr	r2, [r7, #12]
 8008e60:	330c      	adds	r3, #12
 8008e62:	009b      	lsls	r3, r3, #2
 8008e64:	4413      	add	r3, r2
 8008e66:	685b      	ldr	r3, [r3, #4]
 8008e68:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	69ba      	ldr	r2, [r7, #24]
 8008e6e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8008e70:	897b      	ldrh	r3, [r7, #10]
 8008e72:	68fa      	ldr	r2, [r7, #12]
 8008e74:	4413      	add	r3, r2
 8008e76:	2200      	movs	r2, #0
 8008e78:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8008e7c:	e013      	b.n	8008ea6 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	69ba      	ldr	r2, [r7, #24]
 8008e82:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8008e84:	897b      	ldrh	r3, [r7, #10]
 8008e86:	68fa      	ldr	r2, [r7, #12]
 8008e88:	330c      	adds	r3, #12
 8008e8a:	009b      	lsls	r3, r3, #2
 8008e8c:	4413      	add	r3, r2
 8008e8e:	69ba      	ldr	r2, [r7, #24]
 8008e90:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8008e92:	897b      	ldrh	r3, [r7, #10]
 8008e94:	68fa      	ldr	r2, [r7, #12]
 8008e96:	4413      	add	r3, r2
 8008e98:	2201      	movs	r2, #1
 8008e9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8008e9e:	e002      	b.n	8008ea6 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	69ba      	ldr	r2, [r7, #24]
 8008ea4:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008ea6:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3720      	adds	r7, #32
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop

08008eb4 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b084      	sub	sp, #16
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8008ec2:	f107 030e 	add.w	r3, r7, #14
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	2101      	movs	r1, #1
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f003 ff8e 	bl	800cdec <VL53L0X_RdByte>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8008ed4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d10e      	bne.n	8008efa <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8008edc:	7bba      	ldrb	r2, [r7, #14]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8008ee4:	7bbb      	ldrb	r3, [r7, #14]
 8008ee6:	b25b      	sxtb	r3, r3
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	da03      	bge.n	8008ef4 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	2201      	movs	r2, #1
 8008ef0:	701a      	strb	r2, [r3, #0]
 8008ef2:	e002      	b.n	8008efa <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d104      	bne.n	8008f0c <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	781a      	ldrb	r2, [r3, #0]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008f0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3710      	adds	r7, #16
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b084      	sub	sp, #16
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008f20:	2300      	movs	r3, #0
 8008f22:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8008f24:	f107 030e 	add.w	r3, r7, #14
 8008f28:	4619      	mov	r1, r3
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f7ff fbd2 	bl	80086d4 <VL53L0X_GetDeviceMode>
 8008f30:	4603      	mov	r3, r0
 8008f32:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8008f34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d107      	bne.n	8008f4c <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8008f3c:	7bbb      	ldrb	r3, [r7, #14]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d104      	bne.n	8008f4c <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 f898 	bl	8009078 <VL53L0X_StartMeasurement>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8008f4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d104      	bne.n	8008f5e <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f001 fb3f 	bl	800a5d8 <VL53L0X_measurement_poll_for_completion>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8008f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d106      	bne.n	8008f74 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8008f66:	7bbb      	ldrb	r3, [r7, #14]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d103      	bne.n	8008f74 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2203      	movs	r2, #3
 8008f70:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8008f74:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3710      	adds	r7, #16
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b086      	sub	sp, #24
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	60f8      	str	r0, [r7, #12]
 8008f88:	60b9      	str	r1, [r7, #8]
 8008f8a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8008f90:	2301      	movs	r3, #1
 8008f92:	687a      	ldr	r2, [r7, #4]
 8008f94:	68b9      	ldr	r1, [r7, #8]
 8008f96:	68f8      	ldr	r0, [r7, #12]
 8008f98:	f001 fae1 	bl	800a55e <VL53L0X_perform_ref_calibration>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8008fa0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3718      	adds	r7, #24
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b086      	sub	sp, #24
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8008fc2:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8008fc4:	7dbb      	ldrb	r3, [r7, #22]
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d005      	beq.n	8008fd6 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8008fca:	7dbb      	ldrb	r3, [r7, #22]
 8008fcc:	2b02      	cmp	r3, #2
 8008fce:	d002      	beq.n	8008fd6 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8008fd0:	7dbb      	ldrb	r3, [r7, #22]
 8008fd2:	2b03      	cmp	r3, #3
 8008fd4:	d147      	bne.n	8009066 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8008fd6:	f107 030c 	add.w	r3, r7, #12
 8008fda:	f107 0210 	add.w	r2, r7, #16
 8008fde:	2101      	movs	r1, #1
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f000 fbc3 	bl	800976c <VL53L0X_GetInterruptThresholds>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8008ff0:	d803      	bhi.n	8008ffa <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8008ff2:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8008ff4:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8008ff8:	d935      	bls.n	8009066 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8008ffa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d131      	bne.n	8009066 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8009002:	78fb      	ldrb	r3, [r7, #3]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d006      	beq.n	8009016 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8009008:	491a      	ldr	r1, [pc, #104]	; (8009074 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f002 ff56 	bl	800bebc <VL53L0X_load_tuning_settings>
 8009010:	4603      	mov	r3, r0
 8009012:	75fb      	strb	r3, [r7, #23]
 8009014:	e027      	b.n	8009066 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8009016:	2204      	movs	r2, #4
 8009018:	21ff      	movs	r1, #255	; 0xff
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f003 fe64 	bl	800cce8 <VL53L0X_WrByte>
 8009020:	4603      	mov	r3, r0
 8009022:	461a      	mov	r2, r3
 8009024:	7dfb      	ldrb	r3, [r7, #23]
 8009026:	4313      	orrs	r3, r2
 8009028:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800902a:	2200      	movs	r2, #0
 800902c:	2170      	movs	r1, #112	; 0x70
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f003 fe5a 	bl	800cce8 <VL53L0X_WrByte>
 8009034:	4603      	mov	r3, r0
 8009036:	461a      	mov	r2, r3
 8009038:	7dfb      	ldrb	r3, [r7, #23]
 800903a:	4313      	orrs	r3, r2
 800903c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800903e:	2200      	movs	r2, #0
 8009040:	21ff      	movs	r1, #255	; 0xff
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f003 fe50 	bl	800cce8 <VL53L0X_WrByte>
 8009048:	4603      	mov	r3, r0
 800904a:	461a      	mov	r2, r3
 800904c:	7dfb      	ldrb	r3, [r7, #23]
 800904e:	4313      	orrs	r3, r2
 8009050:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8009052:	2200      	movs	r2, #0
 8009054:	2180      	movs	r1, #128	; 0x80
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f003 fe46 	bl	800cce8 <VL53L0X_WrByte>
 800905c:	4603      	mov	r3, r0
 800905e:	461a      	mov	r2, r3
 8009060:	7dfb      	ldrb	r3, [r7, #23]
 8009062:	4313      	orrs	r3, r2
 8009064:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8009066:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800906a:	4618      	mov	r0, r3
 800906c:	3718      	adds	r7, #24
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	20000104 	.word	0x20000104

08009078 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b086      	sub	sp, #24
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009080:	2300      	movs	r3, #0
 8009082:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8009084:	2301      	movs	r3, #1
 8009086:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8009088:	f107 030e 	add.w	r3, r7, #14
 800908c:	4619      	mov	r1, r3
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f7ff fb20 	bl	80086d4 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009094:	2201      	movs	r2, #1
 8009096:	2180      	movs	r1, #128	; 0x80
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f003 fe25 	bl	800cce8 <VL53L0X_WrByte>
 800909e:	4603      	mov	r3, r0
 80090a0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80090a2:	2201      	movs	r2, #1
 80090a4:	21ff      	movs	r1, #255	; 0xff
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f003 fe1e 	bl	800cce8 <VL53L0X_WrByte>
 80090ac:	4603      	mov	r3, r0
 80090ae:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 80090b0:	2200      	movs	r2, #0
 80090b2:	2100      	movs	r1, #0
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f003 fe17 	bl	800cce8 <VL53L0X_WrByte>
 80090ba:	4603      	mov	r3, r0
 80090bc:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 80090c4:	461a      	mov	r2, r3
 80090c6:	2191      	movs	r1, #145	; 0x91
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f003 fe0d 	bl	800cce8 <VL53L0X_WrByte>
 80090ce:	4603      	mov	r3, r0
 80090d0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 80090d2:	2201      	movs	r2, #1
 80090d4:	2100      	movs	r1, #0
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f003 fe06 	bl	800cce8 <VL53L0X_WrByte>
 80090dc:	4603      	mov	r3, r0
 80090de:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80090e0:	2200      	movs	r2, #0
 80090e2:	21ff      	movs	r1, #255	; 0xff
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f003 fdff 	bl	800cce8 <VL53L0X_WrByte>
 80090ea:	4603      	mov	r3, r0
 80090ec:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 80090ee:	2200      	movs	r2, #0
 80090f0:	2180      	movs	r1, #128	; 0x80
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f003 fdf8 	bl	800cce8 <VL53L0X_WrByte>
 80090f8:	4603      	mov	r3, r0
 80090fa:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 80090fc:	7bbb      	ldrb	r3, [r7, #14]
 80090fe:	2b03      	cmp	r3, #3
 8009100:	d054      	beq.n	80091ac <VL53L0X_StartMeasurement+0x134>
 8009102:	2b03      	cmp	r3, #3
 8009104:	dc6c      	bgt.n	80091e0 <VL53L0X_StartMeasurement+0x168>
 8009106:	2b00      	cmp	r3, #0
 8009108:	d002      	beq.n	8009110 <VL53L0X_StartMeasurement+0x98>
 800910a:	2b01      	cmp	r3, #1
 800910c:	d034      	beq.n	8009178 <VL53L0X_StartMeasurement+0x100>
 800910e:	e067      	b.n	80091e0 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8009110:	2201      	movs	r2, #1
 8009112:	2100      	movs	r1, #0
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f003 fde7 	bl	800cce8 <VL53L0X_WrByte>
 800911a:	4603      	mov	r3, r0
 800911c:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 800911e:	7bfb      	ldrb	r3, [r7, #15]
 8009120:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8009122:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d15d      	bne.n	80091e6 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 800912a:	2300      	movs	r3, #0
 800912c:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d008      	beq.n	8009146 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8009134:	f107 030d 	add.w	r3, r7, #13
 8009138:	461a      	mov	r2, r3
 800913a:	2100      	movs	r1, #0
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f003 fe55 	bl	800cdec <VL53L0X_RdByte>
 8009142:	4603      	mov	r3, r0
 8009144:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	3301      	adds	r3, #1
 800914a:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 800914c:	7b7a      	ldrb	r2, [r7, #13]
 800914e:	7bfb      	ldrb	r3, [r7, #15]
 8009150:	4013      	ands	r3, r2
 8009152:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8009154:	7bfa      	ldrb	r2, [r7, #15]
 8009156:	429a      	cmp	r2, r3
 8009158:	d107      	bne.n	800916a <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 800915a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d103      	bne.n	800916a <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009168:	d3e1      	bcc.n	800912e <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009170:	d339      	bcc.n	80091e6 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 8009172:	23f9      	movs	r3, #249	; 0xf9
 8009174:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8009176:	e036      	b.n	80091e6 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8009178:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d105      	bne.n	800918c <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8009180:	2101      	movs	r1, #1
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f7ff ff12 	bl	8008fac <VL53L0X_CheckAndLoadInterruptSettings>
 8009188:	4603      	mov	r3, r0
 800918a:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800918c:	2202      	movs	r2, #2
 800918e:	2100      	movs	r1, #0
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f003 fda9 	bl	800cce8 <VL53L0X_WrByte>
 8009196:	4603      	mov	r3, r0
 8009198:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 800919a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d123      	bne.n	80091ea <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2204      	movs	r2, #4
 80091a6:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 80091aa:	e01e      	b.n	80091ea <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 80091ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d105      	bne.n	80091c0 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80091b4:	2101      	movs	r1, #1
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f7ff fef8 	bl	8008fac <VL53L0X_CheckAndLoadInterruptSettings>
 80091bc:	4603      	mov	r3, r0
 80091be:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80091c0:	2204      	movs	r2, #4
 80091c2:	2100      	movs	r1, #0
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f003 fd8f 	bl	800cce8 <VL53L0X_WrByte>
 80091ca:	4603      	mov	r3, r0
 80091cc:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 80091ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d10b      	bne.n	80091ee <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2204      	movs	r2, #4
 80091da:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 80091de:	e006      	b.n	80091ee <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80091e0:	23f8      	movs	r3, #248	; 0xf8
 80091e2:	75fb      	strb	r3, [r7, #23]
 80091e4:	e004      	b.n	80091f0 <VL53L0X_StartMeasurement+0x178>
		break;
 80091e6:	bf00      	nop
 80091e8:	e002      	b.n	80091f0 <VL53L0X_StartMeasurement+0x178>
		break;
 80091ea:	bf00      	nop
 80091ec:	e000      	b.n	80091f0 <VL53L0X_StartMeasurement+0x178>
		break;
 80091ee:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 80091f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3718      	adds	r7, #24
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}

080091fc <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b084      	sub	sp, #16
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009206:	2300      	movs	r3, #0
 8009208:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8009210:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8009212:	7bbb      	ldrb	r3, [r7, #14]
 8009214:	2b04      	cmp	r3, #4
 8009216:	d112      	bne.n	800923e <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8009218:	f107 0308 	add.w	r3, r7, #8
 800921c:	4619      	mov	r1, r3
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f000 fb1a 	bl	8009858 <VL53L0X_GetInterruptMaskStatus>
 8009224:	4603      	mov	r3, r0
 8009226:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	2b04      	cmp	r3, #4
 800922c:	d103      	bne.n	8009236 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	2201      	movs	r2, #1
 8009232:	701a      	strb	r2, [r3, #0]
 8009234:	e01c      	b.n	8009270 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	2200      	movs	r2, #0
 800923a:	701a      	strb	r2, [r3, #0]
 800923c:	e018      	b.n	8009270 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800923e:	f107 030d 	add.w	r3, r7, #13
 8009242:	461a      	mov	r2, r3
 8009244:	2114      	movs	r1, #20
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f003 fdd0 	bl	800cdec <VL53L0X_RdByte>
 800924c:	4603      	mov	r3, r0
 800924e:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8009250:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d10b      	bne.n	8009270 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8009258:	7b7b      	ldrb	r3, [r7, #13]
 800925a:	f003 0301 	and.w	r3, r3, #1
 800925e:	2b00      	cmp	r3, #0
 8009260:	d003      	beq.n	800926a <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	2201      	movs	r2, #1
 8009266:	701a      	strb	r2, [r3, #0]
 8009268:	e002      	b.n	8009270 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	2200      	movs	r2, #0
 800926e:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009270:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009274:	4618      	mov	r0, r3
 8009276:	3710      	adds	r7, #16
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}

0800927c <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800927c:	b5b0      	push	{r4, r5, r7, lr}
 800927e:	b096      	sub	sp, #88	; 0x58
 8009280:	af02      	add	r7, sp, #8
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009286:	2300      	movs	r3, #0
 8009288:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 800928c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009290:	230c      	movs	r3, #12
 8009292:	2114      	movs	r1, #20
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f003 fcfb 	bl	800cc90 <VL53L0X_ReadMulti>
 800929a:	4603      	mov	r3, r0
 800929c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 80092a0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	f040 80d1 	bne.w	800944c <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	2200      	movs	r2, #0
 80092ae:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	2200      	movs	r2, #0
 80092b4:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 80092b6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80092ba:	b29b      	uxth	r3, r3
 80092bc:	021b      	lsls	r3, r3, #8
 80092be:	b29a      	uxth	r2, r3
 80092c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80092c4:	b29b      	uxth	r3, r3
 80092c6:	4413      	add	r3, r2
 80092c8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	2200      	movs	r2, #0
 80092d0:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 80092d2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	021b      	lsls	r3, r3, #8
 80092da:	b29a      	uxth	r2, r3
 80092dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	4413      	add	r3, r2
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	025b      	lsls	r3, r3, #9
 80092e8:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80092ee:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 80092f0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80092f4:	b29b      	uxth	r3, r3
 80092f6:	021b      	lsls	r3, r3, #8
 80092f8:	b29a      	uxth	r2, r3
 80092fa:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80092fe:	b29b      	uxth	r3, r3
 8009300:	4413      	add	r3, r2
 8009302:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8009306:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800930a:	025b      	lsls	r3, r3, #9
 800930c:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8009312:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8009316:	b29b      	uxth	r3, r3
 8009318:	021b      	lsls	r3, r3, #8
 800931a:	b29a      	uxth	r2, r3
 800931c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009320:	b29b      	uxth	r3, r3
 8009322:	4413      	add	r3, r2
 8009324:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800932e:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8009330:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009334:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 800933e:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8009346:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800934a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800934c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009350:	d046      	beq.n	80093e0 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8009352:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009354:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8009358:	fb02 f303 	mul.w	r3, r2, r3
 800935c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009360:	4a57      	ldr	r2, [pc, #348]	; (80094c0 <VL53L0X_GetRangingMeasurementData+0x244>)
 8009362:	fb82 1203 	smull	r1, r2, r2, r3
 8009366:	1192      	asrs	r2, r2, #6
 8009368:	17db      	asrs	r3, r3, #31
 800936a:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 800936c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6a1b      	ldr	r3, [r3, #32]
 8009374:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	7f1b      	ldrb	r3, [r3, #28]
 800937a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800937e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009382:	2b00      	cmp	r3, #0
 8009384:	d02c      	beq.n	80093e0 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8009386:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009388:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800938c:	fb02 f303 	mul.w	r3, r2, r3
 8009390:	121a      	asrs	r2, r3, #8
					<= 0) {
 8009392:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 8009394:	429a      	cmp	r2, r3
 8009396:	d10d      	bne.n	80093b4 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8009398:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800939c:	2b00      	cmp	r3, #0
 800939e:	d004      	beq.n	80093aa <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 80093a0:	f242 23b8 	movw	r3, #8888	; 0x22b8
 80093a4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80093a8:	e016      	b.n	80093d8 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 80093aa:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 80093ae:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80093b2:	e011      	b.n	80093d8 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 80093b4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80093b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80093ba:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 80093be:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80093c0:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 80093c4:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 80093c8:	121b      	asrs	r3, r3, #8
 80093ca:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 80093cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093ce:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 80093d0:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 80093d4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 80093d8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80093dc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 80093e0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d00d      	beq.n	8009404 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 80093e8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80093ec:	089b      	lsrs	r3, r3, #2
 80093ee:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 80093f4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80093f8:	b2db      	uxtb	r3, r3
 80093fa:	019b      	lsls	r3, r3, #6
 80093fc:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	75da      	strb	r2, [r3, #23]
 8009402:	e006      	b.n	8009412 <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800940a:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	2200      	movs	r2, #0
 8009410:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8009412:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8009416:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800941a:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800941e:	9301      	str	r3, [sp, #4]
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	9300      	str	r3, [sp, #0]
 8009424:	4613      	mov	r3, r2
 8009426:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f003 f9e5 	bl	800c7f8 <VL53L0X_get_pal_range_status>
 800942e:	4603      	mov	r3, r0
 8009430:	461a      	mov	r2, r3
 8009432:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009436:	4313      	orrs	r3, r2
 8009438:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800943c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8009440:	2b00      	cmp	r3, #0
 8009442:	d103      	bne.n	800944c <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8009444:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800944c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8009450:	2b00      	cmp	r3, #0
 8009452:	d12f      	bne.n	80094b4 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f107 040c 	add.w	r4, r7, #12
 800945a:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800945e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009460:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009462:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009466:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800946e:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8009474:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800947c:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8009482:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8009488:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800948e:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8009494:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800949a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f103 0450 	add.w	r4, r3, #80	; 0x50
 80094a4:	f107 050c 	add.w	r5, r7, #12
 80094a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80094aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80094ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80094b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80094b4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3750      	adds	r7, #80	; 0x50
 80094bc:	46bd      	mov	sp, r7
 80094be:	bdb0      	pop	{r4, r5, r7, pc}
 80094c0:	10624dd3 	.word	0x10624dd3

080094c4 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b084      	sub	sp, #16
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
 80094cc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80094ce:	2300      	movs	r3, #0
 80094d0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80094d2:	2100      	movs	r1, #0
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f7ff f8d1 	bl	800867c <VL53L0X_SetDeviceMode>
 80094da:	4603      	mov	r3, r0
 80094dc:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80094de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d104      	bne.n	80094f0 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f7ff fd16 	bl	8008f18 <VL53L0X_PerformSingleMeasurement>
 80094ec:	4603      	mov	r3, r0
 80094ee:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80094f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d105      	bne.n	8009504 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 80094f8:	6839      	ldr	r1, [r7, #0]
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f7ff febe 	bl	800927c <VL53L0X_GetRangingMeasurementData>
 8009500:	4603      	mov	r3, r0
 8009502:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8009504:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d105      	bne.n	8009518 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800950c:	2100      	movs	r1, #0
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 f962 	bl	80097d8 <VL53L0X_ClearInterruptMask>
 8009514:	4603      	mov	r3, r0
 8009516:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8009518:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800951c:	4618      	mov	r0, r3
 800951e:	3710      	adds	r7, #16
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}

08009524 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b084      	sub	sp, #16
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
 800952c:	4608      	mov	r0, r1
 800952e:	4611      	mov	r1, r2
 8009530:	461a      	mov	r2, r3
 8009532:	4603      	mov	r3, r0
 8009534:	70fb      	strb	r3, [r7, #3]
 8009536:	460b      	mov	r3, r1
 8009538:	70bb      	strb	r3, [r7, #2]
 800953a:	4613      	mov	r3, r2
 800953c:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800953e:	2300      	movs	r3, #0
 8009540:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8009542:	78fb      	ldrb	r3, [r7, #3]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d002      	beq.n	800954e <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8009548:	23f6      	movs	r3, #246	; 0xf6
 800954a:	73fb      	strb	r3, [r7, #15]
 800954c:	e107      	b.n	800975e <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800954e:	78bb      	ldrb	r3, [r7, #2]
 8009550:	2b14      	cmp	r3, #20
 8009552:	d110      	bne.n	8009576 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8009554:	7e3b      	ldrb	r3, [r7, #24]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d102      	bne.n	8009560 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800955a:	2310      	movs	r3, #16
 800955c:	73bb      	strb	r3, [r7, #14]
 800955e:	e001      	b.n	8009564 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8009560:	2301      	movs	r3, #1
 8009562:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8009564:	7bbb      	ldrb	r3, [r7, #14]
 8009566:	461a      	mov	r2, r3
 8009568:	2184      	movs	r1, #132	; 0x84
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f003 fbbc 	bl	800cce8 <VL53L0X_WrByte>
 8009570:	4603      	mov	r3, r0
 8009572:	73fb      	strb	r3, [r7, #15]
 8009574:	e0f3      	b.n	800975e <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8009576:	78bb      	ldrb	r3, [r7, #2]
 8009578:	2b15      	cmp	r3, #21
 800957a:	f040 8097 	bne.w	80096ac <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800957e:	2201      	movs	r2, #1
 8009580:	21ff      	movs	r1, #255	; 0xff
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f003 fbb0 	bl	800cce8 <VL53L0X_WrByte>
 8009588:	4603      	mov	r3, r0
 800958a:	461a      	mov	r2, r3
 800958c:	7bfb      	ldrb	r3, [r7, #15]
 800958e:	4313      	orrs	r3, r2
 8009590:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8009592:	2200      	movs	r2, #0
 8009594:	2100      	movs	r1, #0
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f003 fba6 	bl	800cce8 <VL53L0X_WrByte>
 800959c:	4603      	mov	r3, r0
 800959e:	461a      	mov	r2, r3
 80095a0:	7bfb      	ldrb	r3, [r7, #15]
 80095a2:	4313      	orrs	r3, r2
 80095a4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80095a6:	2200      	movs	r2, #0
 80095a8:	21ff      	movs	r1, #255	; 0xff
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f003 fb9c 	bl	800cce8 <VL53L0X_WrByte>
 80095b0:	4603      	mov	r3, r0
 80095b2:	461a      	mov	r2, r3
 80095b4:	7bfb      	ldrb	r3, [r7, #15]
 80095b6:	4313      	orrs	r3, r2
 80095b8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80095ba:	2201      	movs	r2, #1
 80095bc:	2180      	movs	r1, #128	; 0x80
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f003 fb92 	bl	800cce8 <VL53L0X_WrByte>
 80095c4:	4603      	mov	r3, r0
 80095c6:	461a      	mov	r2, r3
 80095c8:	7bfb      	ldrb	r3, [r7, #15]
 80095ca:	4313      	orrs	r3, r2
 80095cc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 80095ce:	2202      	movs	r2, #2
 80095d0:	2185      	movs	r1, #133	; 0x85
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f003 fb88 	bl	800cce8 <VL53L0X_WrByte>
 80095d8:	4603      	mov	r3, r0
 80095da:	461a      	mov	r2, r3
 80095dc:	7bfb      	ldrb	r3, [r7, #15]
 80095de:	4313      	orrs	r3, r2
 80095e0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 80095e2:	2204      	movs	r2, #4
 80095e4:	21ff      	movs	r1, #255	; 0xff
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f003 fb7e 	bl	800cce8 <VL53L0X_WrByte>
 80095ec:	4603      	mov	r3, r0
 80095ee:	461a      	mov	r2, r3
 80095f0:	7bfb      	ldrb	r3, [r7, #15]
 80095f2:	4313      	orrs	r3, r2
 80095f4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 80095f6:	2200      	movs	r2, #0
 80095f8:	21cd      	movs	r1, #205	; 0xcd
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f003 fb74 	bl	800cce8 <VL53L0X_WrByte>
 8009600:	4603      	mov	r3, r0
 8009602:	461a      	mov	r2, r3
 8009604:	7bfb      	ldrb	r3, [r7, #15]
 8009606:	4313      	orrs	r3, r2
 8009608:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800960a:	2211      	movs	r2, #17
 800960c:	21cc      	movs	r1, #204	; 0xcc
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f003 fb6a 	bl	800cce8 <VL53L0X_WrByte>
 8009614:	4603      	mov	r3, r0
 8009616:	461a      	mov	r2, r3
 8009618:	7bfb      	ldrb	r3, [r7, #15]
 800961a:	4313      	orrs	r3, r2
 800961c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800961e:	2207      	movs	r2, #7
 8009620:	21ff      	movs	r1, #255	; 0xff
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f003 fb60 	bl	800cce8 <VL53L0X_WrByte>
 8009628:	4603      	mov	r3, r0
 800962a:	461a      	mov	r2, r3
 800962c:	7bfb      	ldrb	r3, [r7, #15]
 800962e:	4313      	orrs	r3, r2
 8009630:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8009632:	2200      	movs	r2, #0
 8009634:	21be      	movs	r1, #190	; 0xbe
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f003 fb56 	bl	800cce8 <VL53L0X_WrByte>
 800963c:	4603      	mov	r3, r0
 800963e:	461a      	mov	r2, r3
 8009640:	7bfb      	ldrb	r3, [r7, #15]
 8009642:	4313      	orrs	r3, r2
 8009644:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8009646:	2206      	movs	r2, #6
 8009648:	21ff      	movs	r1, #255	; 0xff
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f003 fb4c 	bl	800cce8 <VL53L0X_WrByte>
 8009650:	4603      	mov	r3, r0
 8009652:	461a      	mov	r2, r3
 8009654:	7bfb      	ldrb	r3, [r7, #15]
 8009656:	4313      	orrs	r3, r2
 8009658:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800965a:	2209      	movs	r2, #9
 800965c:	21cc      	movs	r1, #204	; 0xcc
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f003 fb42 	bl	800cce8 <VL53L0X_WrByte>
 8009664:	4603      	mov	r3, r0
 8009666:	461a      	mov	r2, r3
 8009668:	7bfb      	ldrb	r3, [r7, #15]
 800966a:	4313      	orrs	r3, r2
 800966c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800966e:	2200      	movs	r2, #0
 8009670:	21ff      	movs	r1, #255	; 0xff
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f003 fb38 	bl	800cce8 <VL53L0X_WrByte>
 8009678:	4603      	mov	r3, r0
 800967a:	461a      	mov	r2, r3
 800967c:	7bfb      	ldrb	r3, [r7, #15]
 800967e:	4313      	orrs	r3, r2
 8009680:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009682:	2201      	movs	r2, #1
 8009684:	21ff      	movs	r1, #255	; 0xff
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f003 fb2e 	bl	800cce8 <VL53L0X_WrByte>
 800968c:	4603      	mov	r3, r0
 800968e:	461a      	mov	r2, r3
 8009690:	7bfb      	ldrb	r3, [r7, #15]
 8009692:	4313      	orrs	r3, r2
 8009694:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8009696:	2200      	movs	r2, #0
 8009698:	2100      	movs	r1, #0
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f003 fb24 	bl	800cce8 <VL53L0X_WrByte>
 80096a0:	4603      	mov	r3, r0
 80096a2:	461a      	mov	r2, r3
 80096a4:	7bfb      	ldrb	r3, [r7, #15]
 80096a6:	4313      	orrs	r3, r2
 80096a8:	73fb      	strb	r3, [r7, #15]
 80096aa:	e058      	b.n	800975e <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 80096ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d121      	bne.n	80096f8 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 80096b4:	787b      	ldrb	r3, [r7, #1]
 80096b6:	2b04      	cmp	r3, #4
 80096b8:	d81b      	bhi.n	80096f2 <VL53L0X_SetGpioConfig+0x1ce>
 80096ba:	a201      	add	r2, pc, #4	; (adr r2, 80096c0 <VL53L0X_SetGpioConfig+0x19c>)
 80096bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096c0:	080096d5 	.word	0x080096d5
 80096c4:	080096db 	.word	0x080096db
 80096c8:	080096e1 	.word	0x080096e1
 80096cc:	080096e7 	.word	0x080096e7
 80096d0:	080096ed 	.word	0x080096ed
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 80096d4:	2300      	movs	r3, #0
 80096d6:	73bb      	strb	r3, [r7, #14]
				break;
 80096d8:	e00f      	b.n	80096fa <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 80096da:	2301      	movs	r3, #1
 80096dc:	73bb      	strb	r3, [r7, #14]
				break;
 80096de:	e00c      	b.n	80096fa <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 80096e0:	2302      	movs	r3, #2
 80096e2:	73bb      	strb	r3, [r7, #14]
				break;
 80096e4:	e009      	b.n	80096fa <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 80096e6:	2303      	movs	r3, #3
 80096e8:	73bb      	strb	r3, [r7, #14]
				break;
 80096ea:	e006      	b.n	80096fa <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 80096ec:	2304      	movs	r3, #4
 80096ee:	73bb      	strb	r3, [r7, #14]
				break;
 80096f0:	e003      	b.n	80096fa <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 80096f2:	23f5      	movs	r3, #245	; 0xf5
 80096f4:	73fb      	strb	r3, [r7, #15]
 80096f6:	e000      	b.n	80096fa <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 80096f8:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 80096fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d107      	bne.n	8009712 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 8009702:	7bbb      	ldrb	r3, [r7, #14]
 8009704:	461a      	mov	r2, r3
 8009706:	210a      	movs	r1, #10
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f003 faed 	bl	800cce8 <VL53L0X_WrByte>
 800970e:	4603      	mov	r3, r0
 8009710:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8009712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d10f      	bne.n	800973a <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800971a:	7e3b      	ldrb	r3, [r7, #24]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d102      	bne.n	8009726 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8009720:	2300      	movs	r3, #0
 8009722:	73bb      	strb	r3, [r7, #14]
 8009724:	e001      	b.n	800972a <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 8009726:	2310      	movs	r3, #16
 8009728:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800972a:	7bbb      	ldrb	r3, [r7, #14]
 800972c:	22ef      	movs	r2, #239	; 0xef
 800972e:	2184      	movs	r1, #132	; 0x84
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f003 fb27 	bl	800cd84 <VL53L0X_UpdateByte>
 8009736:	4603      	mov	r3, r0
 8009738:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800973a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d103      	bne.n	800974a <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	787a      	ldrb	r2, [r7, #1]
 8009746:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800974a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d105      	bne.n	800975e <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8009752:	2100      	movs	r1, #0
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f000 f83f 	bl	80097d8 <VL53L0X_ClearInterruptMask>
 800975a:	4603      	mov	r3, r0
 800975c:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800975e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009762:	4618      	mov	r0, r3
 8009764:	3710      	adds	r7, #16
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
 800976a:	bf00      	nop

0800976c <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b086      	sub	sp, #24
 8009770:	af00      	add	r7, sp, #0
 8009772:	60f8      	str	r0, [r7, #12]
 8009774:	607a      	str	r2, [r7, #4]
 8009776:	603b      	str	r3, [r7, #0]
 8009778:	460b      	mov	r3, r1
 800977a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800977c:	2300      	movs	r3, #0
 800977e:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8009780:	f107 0314 	add.w	r3, r7, #20
 8009784:	461a      	mov	r2, r3
 8009786:	210e      	movs	r1, #14
 8009788:	68f8      	ldr	r0, [r7, #12]
 800978a:	f003 fb59 	bl	800ce40 <VL53L0X_RdWord>
 800978e:	4603      	mov	r3, r0
 8009790:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8009792:	8abb      	ldrh	r3, [r7, #20]
 8009794:	045b      	lsls	r3, r3, #17
 8009796:	461a      	mov	r2, r3
 8009798:	4b0e      	ldr	r3, [pc, #56]	; (80097d4 <VL53L0X_GetInterruptThresholds+0x68>)
 800979a:	4013      	ands	r3, r2
 800979c:	687a      	ldr	r2, [r7, #4]
 800979e:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 80097a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d10f      	bne.n	80097c8 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 80097a8:	f107 0314 	add.w	r3, r7, #20
 80097ac:	461a      	mov	r2, r3
 80097ae:	210c      	movs	r1, #12
 80097b0:	68f8      	ldr	r0, [r7, #12]
 80097b2:	f003 fb45 	bl	800ce40 <VL53L0X_RdWord>
 80097b6:	4603      	mov	r3, r0
 80097b8:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80097ba:	8abb      	ldrh	r3, [r7, #20]
 80097bc:	045b      	lsls	r3, r3, #17
 80097be:	461a      	mov	r2, r3
 80097c0:	4b04      	ldr	r3, [pc, #16]	; (80097d4 <VL53L0X_GetInterruptThresholds+0x68>)
 80097c2:	4013      	ands	r3, r2
		*pThresholdHigh =
 80097c4:	683a      	ldr	r2, [r7, #0]
 80097c6:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80097c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3718      	adds	r7, #24
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}
 80097d4:	1ffe0000 	.word	0x1ffe0000

080097d8 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b084      	sub	sp, #16
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80097e2:	2300      	movs	r3, #0
 80097e4:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 80097e6:	2300      	movs	r3, #0
 80097e8:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 80097ea:	2201      	movs	r2, #1
 80097ec:	210b      	movs	r1, #11
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f003 fa7a 	bl	800cce8 <VL53L0X_WrByte>
 80097f4:	4603      	mov	r3, r0
 80097f6:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 80097f8:	2200      	movs	r2, #0
 80097fa:	210b      	movs	r1, #11
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f003 fa73 	bl	800cce8 <VL53L0X_WrByte>
 8009802:	4603      	mov	r3, r0
 8009804:	461a      	mov	r2, r3
 8009806:	7bfb      	ldrb	r3, [r7, #15]
 8009808:	4313      	orrs	r3, r2
 800980a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800980c:	f107 030d 	add.w	r3, r7, #13
 8009810:	461a      	mov	r2, r3
 8009812:	2113      	movs	r1, #19
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f003 fae9 	bl	800cdec <VL53L0X_RdByte>
 800981a:	4603      	mov	r3, r0
 800981c:	461a      	mov	r2, r3
 800981e:	7bfb      	ldrb	r3, [r7, #15]
 8009820:	4313      	orrs	r3, r2
 8009822:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8009824:	7bbb      	ldrb	r3, [r7, #14]
 8009826:	3301      	adds	r3, #1
 8009828:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800982a:	7b7b      	ldrb	r3, [r7, #13]
 800982c:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8009830:	2b00      	cmp	r3, #0
 8009832:	d006      	beq.n	8009842 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8009834:	7bbb      	ldrb	r3, [r7, #14]
 8009836:	2b02      	cmp	r3, #2
 8009838:	d803      	bhi.n	8009842 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800983a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d0d3      	beq.n	80097ea <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8009842:	7bbb      	ldrb	r3, [r7, #14]
 8009844:	2b02      	cmp	r3, #2
 8009846:	d901      	bls.n	800984c <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8009848:	23f4      	movs	r3, #244	; 0xf4
 800984a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800984c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009850:	4618      	mov	r0, r3
 8009852:	3710      	adds	r7, #16
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b084      	sub	sp, #16
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009862:	2300      	movs	r3, #0
 8009864:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8009866:	f107 030e 	add.w	r3, r7, #14
 800986a:	461a      	mov	r2, r3
 800986c:	2113      	movs	r1, #19
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f003 fabc 	bl	800cdec <VL53L0X_RdByte>
 8009874:	4603      	mov	r3, r0
 8009876:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8009878:	7bbb      	ldrb	r3, [r7, #14]
 800987a:	f003 0207 	and.w	r2, r3, #7
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8009882:	7bbb      	ldrb	r3, [r7, #14]
 8009884:	f003 0318 	and.w	r3, r3, #24
 8009888:	2b00      	cmp	r3, #0
 800988a:	d001      	beq.n	8009890 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800988c:	23fa      	movs	r3, #250	; 0xfa
 800988e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8009890:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009894:	4618      	mov	r0, r3
 8009896:	3710      	adds	r7, #16
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}

0800989c <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b086      	sub	sp, #24
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	60f8      	str	r0, [r7, #12]
 80098a4:	60b9      	str	r1, [r7, #8]
 80098a6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80098a8:	2300      	movs	r3, #0
 80098aa:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 80098ac:	687a      	ldr	r2, [r7, #4]
 80098ae:	68b9      	ldr	r1, [r7, #8]
 80098b0:	68f8      	ldr	r0, [r7, #12]
 80098b2:	f000 fa03 	bl	8009cbc <VL53L0X_perform_ref_spad_management>
 80098b6:	4603      	mov	r3, r0
 80098b8:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 80098ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3718      	adds	r7, #24
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}

080098c6 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 80098c6:	b580      	push	{r7, lr}
 80098c8:	b084      	sub	sp, #16
 80098ca:	af00      	add	r7, sp, #0
 80098cc:	6078      	str	r0, [r7, #4]
 80098ce:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80098d0:	2300      	movs	r3, #0
 80098d2:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 80098d4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80098d8:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 80098da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80098de:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 80098e0:	f107 0308 	add.w	r3, r7, #8
 80098e4:	461a      	mov	r2, r3
 80098e6:	2128      	movs	r1, #40	; 0x28
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f003 faa9 	bl	800ce40 <VL53L0X_RdWord>
 80098ee:	4603      	mov	r3, r0
 80098f0:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 80098f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d11e      	bne.n	8009938 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 80098fa:	893b      	ldrh	r3, [r7, #8]
 80098fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009900:	b29b      	uxth	r3, r3
 8009902:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8009904:	893b      	ldrh	r3, [r7, #8]
 8009906:	461a      	mov	r2, r3
 8009908:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800990c:	429a      	cmp	r2, r3
 800990e:	dd0b      	ble.n	8009928 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8009910:	893a      	ldrh	r2, [r7, #8]
 8009912:	897b      	ldrh	r3, [r7, #10]
 8009914:	1ad3      	subs	r3, r2, r3
 8009916:	b29b      	uxth	r3, r3
 8009918:	b21b      	sxth	r3, r3
 800991a:	461a      	mov	r2, r3
					* 250;
 800991c:	23fa      	movs	r3, #250	; 0xfa
 800991e:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	601a      	str	r2, [r3, #0]
 8009926:	e007      	b.n	8009938 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8009928:	893b      	ldrh	r3, [r7, #8]
 800992a:	b21b      	sxth	r3, r3
 800992c:	461a      	mov	r2, r3
 800992e:	23fa      	movs	r3, #250	; 0xfa
 8009930:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8009938:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800993c:	4618      	mov	r0, r3
 800993e:	3710      	adds	r7, #16
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8009944:	b480      	push	{r7}
 8009946:	b08b      	sub	sp, #44	; 0x2c
 8009948:	af00      	add	r7, sp, #0
 800994a:	60f8      	str	r0, [r7, #12]
 800994c:	60b9      	str	r1, [r7, #8]
 800994e:	607a      	str	r2, [r7, #4]
 8009950:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8009952:	2308      	movs	r3, #8
 8009954:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8009956:	2300      	movs	r3, #0
 8009958:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	f04f 32ff 	mov.w	r2, #4294967295
 8009960:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8009962:	687a      	ldr	r2, [r7, #4]
 8009964:	69bb      	ldr	r3, [r7, #24]
 8009966:	fbb2 f3f3 	udiv	r3, r2, r3
 800996a:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	69ba      	ldr	r2, [r7, #24]
 8009970:	fbb3 f2f2 	udiv	r2, r3, r2
 8009974:	69b9      	ldr	r1, [r7, #24]
 8009976:	fb01 f202 	mul.w	r2, r1, r2
 800997a:	1a9b      	subs	r3, r3, r2
 800997c:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	627b      	str	r3, [r7, #36]	; 0x24
 8009982:	e030      	b.n	80099e6 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8009984:	2300      	movs	r3, #0
 8009986:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8009988:	68fa      	ldr	r2, [r7, #12]
 800998a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800998c:	4413      	add	r3, r2
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8009992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	429a      	cmp	r2, r3
 8009998:	d11e      	bne.n	80099d8 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800999a:	7ffa      	ldrb	r2, [r7, #31]
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	fa42 f303 	asr.w	r3, r2, r3
 80099a2:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 80099a8:	e016      	b.n	80099d8 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 80099aa:	7ffb      	ldrb	r3, [r7, #31]
 80099ac:	f003 0301 	and.w	r3, r3, #1
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d00b      	beq.n	80099cc <get_next_good_spad+0x88>
				success = 1;
 80099b4:	2301      	movs	r3, #1
 80099b6:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 80099b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ba:	69ba      	ldr	r2, [r7, #24]
 80099bc:	fb03 f202 	mul.w	r2, r3, r2
 80099c0:	6a3b      	ldr	r3, [r7, #32]
 80099c2:	4413      	add	r3, r2
 80099c4:	461a      	mov	r2, r3
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	601a      	str	r2, [r3, #0]
				break;
 80099ca:	e009      	b.n	80099e0 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 80099cc:	7ffb      	ldrb	r3, [r7, #31]
 80099ce:	085b      	lsrs	r3, r3, #1
 80099d0:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 80099d2:	6a3b      	ldr	r3, [r7, #32]
 80099d4:	3301      	adds	r3, #1
 80099d6:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 80099d8:	6a3a      	ldr	r2, [r7, #32]
 80099da:	69bb      	ldr	r3, [r7, #24]
 80099dc:	429a      	cmp	r2, r3
 80099de:	d3e4      	bcc.n	80099aa <get_next_good_spad+0x66>
				coarseIndex++) {
 80099e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e2:	3301      	adds	r3, #1
 80099e4:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80099e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	429a      	cmp	r2, r3
 80099ec:	d202      	bcs.n	80099f4 <get_next_good_spad+0xb0>
 80099ee:	7fbb      	ldrb	r3, [r7, #30]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d0c7      	beq.n	8009984 <get_next_good_spad+0x40>
		}
	}
}
 80099f4:	bf00      	nop
 80099f6:	372c      	adds	r7, #44	; 0x2c
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr

08009a00 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b085      	sub	sp, #20
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8009a08:	2301      	movs	r3, #1
 8009a0a:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	099b      	lsrs	r3, r3, #6
 8009a10:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8009a12:	4a07      	ldr	r2, [pc, #28]	; (8009a30 <is_aperture+0x30>)
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d101      	bne.n	8009a22 <is_aperture+0x22>
		isAperture = 0;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8009a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	3714      	adds	r7, #20
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr
 8009a30:	200002bc 	.word	0x200002bc

08009a34 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b089      	sub	sp, #36	; 0x24
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	60f8      	str	r0, [r7, #12]
 8009a3c:	60b9      	str	r1, [r7, #8]
 8009a3e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8009a40:	2300      	movs	r3, #0
 8009a42:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8009a44:	2308      	movs	r3, #8
 8009a46:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8009a48:	687a      	ldr	r2, [r7, #4]
 8009a4a:	69bb      	ldr	r3, [r7, #24]
 8009a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a50:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	69ba      	ldr	r2, [r7, #24]
 8009a56:	fbb3 f2f2 	udiv	r2, r3, r2
 8009a5a:	69b9      	ldr	r1, [r7, #24]
 8009a5c:	fb01 f202 	mul.w	r2, r1, r2
 8009a60:	1a9b      	subs	r3, r3, r2
 8009a62:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8009a64:	697a      	ldr	r2, [r7, #20]
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d302      	bcc.n	8009a72 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8009a6c:	23ce      	movs	r3, #206	; 0xce
 8009a6e:	77fb      	strb	r3, [r7, #31]
 8009a70:	e010      	b.n	8009a94 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8009a72:	68fa      	ldr	r2, [r7, #12]
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	4413      	add	r3, r2
 8009a78:	781b      	ldrb	r3, [r3, #0]
 8009a7a:	b25a      	sxtb	r2, r3
 8009a7c:	2101      	movs	r1, #1
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	fa01 f303 	lsl.w	r3, r1, r3
 8009a84:	b25b      	sxtb	r3, r3
 8009a86:	4313      	orrs	r3, r2
 8009a88:	b259      	sxtb	r1, r3
 8009a8a:	68fa      	ldr	r2, [r7, #12]
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	4413      	add	r3, r2
 8009a90:	b2ca      	uxtb	r2, r1
 8009a92:	701a      	strb	r2, [r3, #0]

	return status;
 8009a94:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	3724      	adds	r7, #36	; 0x24
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa2:	4770      	bx	lr

08009aa4 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b084      	sub	sp, #16
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
 8009aac:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8009aae:	2306      	movs	r3, #6
 8009ab0:	683a      	ldr	r2, [r7, #0]
 8009ab2:	21b0      	movs	r1, #176	; 0xb0
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f003 f8bb 	bl	800cc30 <VL53L0X_WriteMulti>
 8009aba:	4603      	mov	r3, r0
 8009abc:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8009abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3710      	adds	r7, #16
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}

08009aca <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8009aca:	b580      	push	{r7, lr}
 8009acc:	b084      	sub	sp, #16
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	6078      	str	r0, [r7, #4]
 8009ad2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8009ad4:	2306      	movs	r3, #6
 8009ad6:	683a      	ldr	r2, [r7, #0]
 8009ad8:	21b0      	movs	r1, #176	; 0xb0
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f003 f8d8 	bl	800cc90 <VL53L0X_ReadMulti>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8009ae4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	3710      	adds	r7, #16
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}

08009af0 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b08c      	sub	sp, #48	; 0x30
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	60f8      	str	r0, [r7, #12]
 8009af8:	607a      	str	r2, [r7, #4]
 8009afa:	603b      	str	r3, [r7, #0]
 8009afc:	460b      	mov	r3, r1
 8009afe:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8009b00:	2300      	movs	r3, #0
 8009b02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8009b06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b08:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8009b0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b0c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8009b0e:	2300      	movs	r3, #0
 8009b10:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b12:	e02b      	b.n	8009b6c <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8009b14:	f107 031c 	add.w	r3, r7, #28
 8009b18:	6a3a      	ldr	r2, [r7, #32]
 8009b1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f7ff ff11 	bl	8009944 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8009b22:	69fb      	ldr	r3, [r7, #28]
 8009b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b28:	d103      	bne.n	8009b32 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8009b2a:	23ce      	movs	r3, #206	; 0xce
 8009b2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8009b30:	e020      	b.n	8009b74 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8009b32:	69fb      	ldr	r3, [r7, #28]
 8009b34:	461a      	mov	r2, r3
 8009b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b38:	4413      	add	r3, r2
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f7ff ff60 	bl	8009a00 <is_aperture>
 8009b40:	4603      	mov	r3, r0
 8009b42:	461a      	mov	r2, r3
 8009b44:	7afb      	ldrb	r3, [r7, #11]
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d003      	beq.n	8009b52 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8009b4a:	23ce      	movs	r3, #206	; 0xce
 8009b4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8009b50:	e010      	b.n	8009b74 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8009b52:	69fb      	ldr	r3, [r7, #28]
 8009b54:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8009b56:	6a3a      	ldr	r2, [r7, #32]
 8009b58:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009b5a:	6838      	ldr	r0, [r7, #0]
 8009b5c:	f7ff ff6a 	bl	8009a34 <enable_spad_bit>
		currentSpad++;
 8009b60:	6a3b      	ldr	r3, [r7, #32]
 8009b62:	3301      	adds	r3, #1
 8009b64:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8009b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b68:	3301      	adds	r3, #1
 8009b6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d3cf      	bcc.n	8009b14 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8009b74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b76:	6a3a      	ldr	r2, [r7, #32]
 8009b78:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8009b7a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d106      	bne.n	8009b90 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8009b82:	6839      	ldr	r1, [r7, #0]
 8009b84:	68f8      	ldr	r0, [r7, #12]
 8009b86:	f7ff ff8d 	bl	8009aa4 <set_ref_spad_map>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8009b90:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d121      	bne.n	8009bdc <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8009b98:	f107 0314 	add.w	r3, r7, #20
 8009b9c:	4619      	mov	r1, r3
 8009b9e:	68f8      	ldr	r0, [r7, #12]
 8009ba0:	f7ff ff93 	bl	8009aca <get_ref_spad_map>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8009baa:	2300      	movs	r3, #0
 8009bac:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8009bae:	e011      	b.n	8009bd4 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8009bb0:	683a      	ldr	r2, [r7, #0]
 8009bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb4:	4413      	add	r3, r2
 8009bb6:	781a      	ldrb	r2, [r3, #0]
 8009bb8:	f107 0114 	add.w	r1, r7, #20
 8009bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bbe:	440b      	add	r3, r1
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	d003      	beq.n	8009bce <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8009bc6:	23ce      	movs	r3, #206	; 0xce
 8009bc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8009bcc:	e006      	b.n	8009bdc <enable_ref_spads+0xec>
			}
			i++;
 8009bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd0:	3301      	adds	r3, #1
 8009bd2:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8009bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	d3e9      	bcc.n	8009bb0 <enable_ref_spads+0xc0>
		}
	}
	return status;
 8009bdc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3730      	adds	r7, #48	; 0x30
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b08a      	sub	sp, #40	; 0x28
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8009c04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8009c08:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d107      	bne.n	8009c20 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8009c10:	22c0      	movs	r2, #192	; 0xc0
 8009c12:	2101      	movs	r1, #1
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f003 f867 	bl	800cce8 <VL53L0X_WrByte>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8009c20:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d108      	bne.n	8009c3a <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8009c28:	f107 0308 	add.w	r3, r7, #8
 8009c2c:	4619      	mov	r1, r3
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f7ff fc48 	bl	80094c4 <VL53L0X_PerformSingleRangingMeasurement>
 8009c34:	4603      	mov	r3, r0
 8009c36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8009c3a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d107      	bne.n	8009c52 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009c42:	2201      	movs	r2, #1
 8009c44:	21ff      	movs	r1, #255	; 0xff
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f003 f84e 	bl	800cce8 <VL53L0X_WrByte>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8009c52:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d107      	bne.n	8009c6a <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8009c5a:	683a      	ldr	r2, [r7, #0]
 8009c5c:	21b6      	movs	r1, #182	; 0xb6
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f003 f8ee 	bl	800ce40 <VL53L0X_RdWord>
 8009c64:	4603      	mov	r3, r0
 8009c66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8009c6a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d107      	bne.n	8009c82 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009c72:	2200      	movs	r2, #0
 8009c74:	21ff      	movs	r1, #255	; 0xff
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f003 f836 	bl	800cce8 <VL53L0X_WrByte>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8009c82:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d112      	bne.n	8009cb0 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009c8a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009c8e:	461a      	mov	r2, r3
 8009c90:	2101      	movs	r1, #1
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f003 f828 	bl	800cce8 <VL53L0X_WrByte>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8009c9e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d104      	bne.n	8009cb0 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009cac:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8009cb0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3728      	adds	r7, #40	; 0x28
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}

08009cbc <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8009cbc:	b590      	push	{r4, r7, lr}
 8009cbe:	b09d      	sub	sp, #116	; 0x74
 8009cc0:	af06      	add	r7, sp, #24
 8009cc2:	60f8      	str	r0, [r7, #12]
 8009cc4:	60b9      	str	r1, [r7, #8]
 8009cc6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009cc8:	2300      	movs	r3, #0
 8009cca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8009cce:	23b4      	movs	r3, #180	; 0xb4
 8009cd0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8009cd4:	2303      	movs	r3, #3
 8009cd6:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8009cd8:	232c      	movs	r3, #44	; 0x2c
 8009cda:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8009ce8:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8009cec:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8009cf6:	2306      	movs	r3, #6
 8009cf8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8009d02:	2300      	movs	r3, #0
 8009d04:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8009d10:	2300      	movs	r3, #0
 8009d12:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8009d14:	2300      	movs	r3, #0
 8009d16:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8009d20:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8009d22:	2300      	movs	r3, #0
 8009d24:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d26:	e009      	b.n	8009d3c <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8009d28:	68fa      	ldr	r2, [r7, #12]
 8009d2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d2c:	4413      	add	r3, r2
 8009d2e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8009d32:	2200      	movs	r2, #0
 8009d34:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8009d36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d38:	3301      	adds	r3, #1
 8009d3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d40:	429a      	cmp	r2, r3
 8009d42:	d3f1      	bcc.n	8009d28 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009d44:	2201      	movs	r2, #1
 8009d46:	21ff      	movs	r1, #255	; 0xff
 8009d48:	68f8      	ldr	r0, [r7, #12]
 8009d4a:	f002 ffcd 	bl	800cce8 <VL53L0X_WrByte>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8009d54:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d107      	bne.n	8009d6c <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	214f      	movs	r1, #79	; 0x4f
 8009d60:	68f8      	ldr	r0, [r7, #12]
 8009d62:	f002 ffc1 	bl	800cce8 <VL53L0X_WrByte>
 8009d66:	4603      	mov	r3, r0
 8009d68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8009d6c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d107      	bne.n	8009d84 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8009d74:	222c      	movs	r2, #44	; 0x2c
 8009d76:	214e      	movs	r1, #78	; 0x4e
 8009d78:	68f8      	ldr	r0, [r7, #12]
 8009d7a:	f002 ffb5 	bl	800cce8 <VL53L0X_WrByte>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8009d84:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d107      	bne.n	8009d9c <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	21ff      	movs	r1, #255	; 0xff
 8009d90:	68f8      	ldr	r0, [r7, #12]
 8009d92:	f002 ffa9 	bl	800cce8 <VL53L0X_WrByte>
 8009d96:	4603      	mov	r3, r0
 8009d98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8009d9c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d109      	bne.n	8009db8 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8009da4:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8009da8:	461a      	mov	r2, r3
 8009daa:	21b6      	movs	r1, #182	; 0xb6
 8009dac:	68f8      	ldr	r0, [r7, #12]
 8009dae:	f002 ff9b 	bl	800cce8 <VL53L0X_WrByte>
 8009db2:	4603      	mov	r3, r0
 8009db4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8009db8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d107      	bne.n	8009dd0 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	2180      	movs	r1, #128	; 0x80
 8009dc4:	68f8      	ldr	r0, [r7, #12]
 8009dc6:	f002 ff8f 	bl	800cce8 <VL53L0X_WrByte>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8009dd0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d10a      	bne.n	8009dee <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8009dd8:	f107 0210 	add.w	r2, r7, #16
 8009ddc:	f107 0111 	add.w	r1, r7, #17
 8009de0:	2300      	movs	r3, #0
 8009de2:	68f8      	ldr	r0, [r7, #12]
 8009de4:	f000 fbbb 	bl	800a55e <VL53L0X_perform_ref_calibration>
 8009de8:	4603      	mov	r3, r0
 8009dea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8009dee:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d121      	bne.n	8009e3a <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8009df6:	2300      	movs	r3, #0
 8009df8:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8009dfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009dfc:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8009e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e04:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8009e12:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8009e16:	f107 0218 	add.w	r2, r7, #24
 8009e1a:	9204      	str	r2, [sp, #16]
 8009e1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e1e:	9203      	str	r2, [sp, #12]
 8009e20:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009e22:	9202      	str	r2, [sp, #8]
 8009e24:	9301      	str	r3, [sp, #4]
 8009e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e28:	9300      	str	r3, [sp, #0]
 8009e2a:	4623      	mov	r3, r4
 8009e2c:	4602      	mov	r2, r0
 8009e2e:	68f8      	ldr	r0, [r7, #12]
 8009e30:	f7ff fe5e 	bl	8009af0 <enable_ref_spads>
 8009e34:	4603      	mov	r3, r0
 8009e36:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009e3a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d174      	bne.n	8009f2c <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8009e42:	69bb      	ldr	r3, [r7, #24]
 8009e44:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8009e46:	f107 0312 	add.w	r3, r7, #18
 8009e4a:	4619      	mov	r1, r3
 8009e4c:	68f8      	ldr	r0, [r7, #12]
 8009e4e:	f7ff fecb 	bl	8009be8 <perform_ref_signal_measurement>
 8009e52:	4603      	mov	r3, r0
 8009e54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8009e58:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d161      	bne.n	8009f24 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8009e60:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8009e62:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009e64:	429a      	cmp	r2, r3
 8009e66:	d25d      	bcs.n	8009f24 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8009e68:	2300      	movs	r3, #0
 8009e6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8009e6c:	e009      	b.n	8009e82 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8009e6e:	68fa      	ldr	r2, [r7, #12]
 8009e70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e72:	4413      	add	r3, r2
 8009e74:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8009e78:	2200      	movs	r2, #0
 8009e7a:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8009e7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e7e:	3301      	adds	r3, #1
 8009e80:	64bb      	str	r3, [r7, #72]	; 0x48
 8009e82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e86:	429a      	cmp	r2, r3
 8009e88:	d3f1      	bcc.n	8009e6e <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8009e8a:	e002      	b.n	8009e92 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8009e8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e8e:	3301      	adds	r3, #1
 8009e90:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8009e92:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8009e96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e98:	4413      	add	r3, r2
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f7ff fdb0 	bl	8009a00 <is_aperture>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d103      	bne.n	8009eae <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8009ea6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	d3ee      	bcc.n	8009e8c <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8009eae:	2301      	movs	r3, #1
 8009eb0:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8009eb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009eb4:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8009ec2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8009ec6:	f107 0218 	add.w	r2, r7, #24
 8009eca:	9204      	str	r2, [sp, #16]
 8009ecc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ece:	9203      	str	r2, [sp, #12]
 8009ed0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009ed2:	9202      	str	r2, [sp, #8]
 8009ed4:	9301      	str	r3, [sp, #4]
 8009ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed8:	9300      	str	r3, [sp, #0]
 8009eda:	4623      	mov	r3, r4
 8009edc:	4602      	mov	r2, r0
 8009ede:	68f8      	ldr	r0, [r7, #12]
 8009ee0:	f7ff fe06 	bl	8009af0 <enable_ref_spads>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8009eea:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d11b      	bne.n	8009f2a <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8009ef2:	69bb      	ldr	r3, [r7, #24]
 8009ef4:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8009ef6:	f107 0312 	add.w	r3, r7, #18
 8009efa:	4619      	mov	r1, r3
 8009efc:	68f8      	ldr	r0, [r7, #12]
 8009efe:	f7ff fe73 	bl	8009be8 <perform_ref_signal_measurement>
 8009f02:	4603      	mov	r3, r0
 8009f04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8009f08:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d10c      	bne.n	8009f2a <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8009f10:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8009f12:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009f14:	429a      	cmp	r2, r3
 8009f16:	d208      	bcs.n	8009f2a <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8009f18:	2301      	movs	r3, #1
 8009f1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8009f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f20:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8009f22:	e002      	b.n	8009f2a <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8009f24:	2300      	movs	r3, #0
 8009f26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f28:	e000      	b.n	8009f2c <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8009f2a:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8009f2c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	f040 80af 	bne.w	800a094 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8009f36:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8009f38:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009f3a:	429a      	cmp	r2, r3
 8009f3c:	f240 80aa 	bls.w	800a094 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8009f40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8009f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f48:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8009f50:	f107 031c 	add.w	r3, r7, #28
 8009f54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f56:	4618      	mov	r0, r3
 8009f58:	f003 f81a 	bl	800cf90 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8009f5c:	8a7b      	ldrh	r3, [r7, #18]
 8009f5e:	461a      	mov	r2, r3
 8009f60:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009f62:	1ad3      	subs	r3, r2, r3
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	bfb8      	it	lt
 8009f68:	425b      	neglt	r3, r3
 8009f6a:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8009f72:	e086      	b.n	800a082 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8009f7a:	f107 0314 	add.w	r3, r7, #20
 8009f7e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009f80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f82:	f7ff fcdf 	bl	8009944 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f8c:	d103      	bne.n	8009f96 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8009f8e:	23ce      	movs	r3, #206	; 0xce
 8009f90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8009f94:	e07e      	b.n	800a094 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8009f96:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8009f9a:	697a      	ldr	r2, [r7, #20]
 8009f9c:	4413      	add	r3, r2
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f7ff fd2e 	bl	8009a00 <is_aperture>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d003      	beq.n	8009fb6 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8009fae:	2301      	movs	r3, #1
 8009fb0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8009fb4:	e06e      	b.n	800a094 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8009fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fb8:	3301      	adds	r3, #1
 8009fba:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8009fc6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009fc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f7ff fd32 	bl	8009a34 <enable_spad_bit>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8009fd6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d10c      	bne.n	8009ff8 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8009fde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009fe0:	3301      	adds	r3, #1
 8009fe2:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8009fea:	4619      	mov	r1, r3
 8009fec:	68f8      	ldr	r0, [r7, #12]
 8009fee:	f7ff fd59 	bl	8009aa4 <set_ref_spad_map>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8009ff8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d146      	bne.n	800a08e <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800a000:	f107 0312 	add.w	r3, r7, #18
 800a004:	4619      	mov	r1, r3
 800a006:	68f8      	ldr	r0, [r7, #12]
 800a008:	f7ff fdee 	bl	8009be8 <perform_ref_signal_measurement>
 800a00c:	4603      	mov	r3, r0
 800a00e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800a012:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a016:	2b00      	cmp	r3, #0
 800a018:	d13b      	bne.n	800a092 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800a01a:	8a7b      	ldrh	r3, [r7, #18]
 800a01c:	461a      	mov	r2, r3
 800a01e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a020:	1ad3      	subs	r3, r2, r3
 800a022:	2b00      	cmp	r3, #0
 800a024:	bfb8      	it	lt
 800a026:	425b      	neglt	r3, r3
 800a028:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 800a02a:	8a7b      	ldrh	r3, [r7, #18]
 800a02c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a02e:	429a      	cmp	r2, r3
 800a030:	d21c      	bcs.n	800a06c <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800a032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a036:	429a      	cmp	r2, r3
 800a038:	d914      	bls.n	800a064 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800a03a:	f107 031c 	add.w	r3, r7, #28
 800a03e:	4619      	mov	r1, r3
 800a040:	68f8      	ldr	r0, [r7, #12]
 800a042:	f7ff fd2f 	bl	8009aa4 <set_ref_spad_map>
 800a046:	4603      	mov	r3, r0
 800a048:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 800a052:	f107 011c 	add.w	r1, r7, #28
 800a056:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a058:	4618      	mov	r0, r3
 800a05a:	f002 ff99 	bl	800cf90 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800a05e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a060:	3b01      	subs	r3, #1
 800a062:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 800a064:	2301      	movs	r3, #1
 800a066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a06a:	e00a      	b.n	800a082 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800a06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a06e:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 800a076:	f107 031c 	add.w	r3, r7, #28
 800a07a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a07c:	4618      	mov	r0, r3
 800a07e:	f002 ff87 	bl	800cf90 <memcpy>
		while (!complete) {
 800a082:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a086:	2b00      	cmp	r3, #0
 800a088:	f43f af74 	beq.w	8009f74 <VL53L0X_perform_ref_spad_management+0x2b8>
 800a08c:	e002      	b.n	800a094 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800a08e:	bf00      	nop
 800a090:	e000      	b.n	800a094 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800a092:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a094:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d115      	bne.n	800a0c8 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a0a0:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800a0a8:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	b2da      	uxtb	r2, r3
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	781a      	ldrb	r2, [r3, #0]
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800a0c8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	375c      	adds	r7, #92	; 0x5c
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd90      	pop	{r4, r7, pc}

0800a0d4 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800a0d4:	b590      	push	{r4, r7, lr}
 800a0d6:	b093      	sub	sp, #76	; 0x4c
 800a0d8:	af06      	add	r7, sp, #24
 800a0da:	60f8      	str	r0, [r7, #12]
 800a0dc:	60b9      	str	r1, [r7, #8]
 800a0de:	4613      	mov	r3, r2
 800a0e0:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 800a0ec:	23b4      	movs	r3, #180	; 0xb4
 800a0ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 800a0f2:	2306      	movs	r3, #6
 800a0f4:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800a0f6:	232c      	movs	r3, #44	; 0x2c
 800a0f8:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a0fa:	2201      	movs	r2, #1
 800a0fc:	21ff      	movs	r1, #255	; 0xff
 800a0fe:	68f8      	ldr	r0, [r7, #12]
 800a100:	f002 fdf2 	bl	800cce8 <VL53L0X_WrByte>
 800a104:	4603      	mov	r3, r0
 800a106:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800a10a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d107      	bne.n	800a122 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800a112:	2200      	movs	r2, #0
 800a114:	214f      	movs	r1, #79	; 0x4f
 800a116:	68f8      	ldr	r0, [r7, #12]
 800a118:	f002 fde6 	bl	800cce8 <VL53L0X_WrByte>
 800a11c:	4603      	mov	r3, r0
 800a11e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800a122:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a126:	2b00      	cmp	r3, #0
 800a128:	d107      	bne.n	800a13a <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800a12a:	222c      	movs	r2, #44	; 0x2c
 800a12c:	214e      	movs	r1, #78	; 0x4e
 800a12e:	68f8      	ldr	r0, [r7, #12]
 800a130:	f002 fdda 	bl	800cce8 <VL53L0X_WrByte>
 800a134:	4603      	mov	r3, r0
 800a136:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800a13a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d107      	bne.n	800a152 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a142:	2200      	movs	r2, #0
 800a144:	21ff      	movs	r1, #255	; 0xff
 800a146:	68f8      	ldr	r0, [r7, #12]
 800a148:	f002 fdce 	bl	800cce8 <VL53L0X_WrByte>
 800a14c:	4603      	mov	r3, r0
 800a14e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800a152:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a156:	2b00      	cmp	r3, #0
 800a158:	d109      	bne.n	800a16e <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800a15a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a15e:	461a      	mov	r2, r3
 800a160:	21b6      	movs	r1, #182	; 0xb6
 800a162:	68f8      	ldr	r0, [r7, #12]
 800a164:	f002 fdc0 	bl	800cce8 <VL53L0X_WrByte>
 800a168:	4603      	mov	r3, r0
 800a16a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800a16e:	2300      	movs	r3, #0
 800a170:	627b      	str	r3, [r7, #36]	; 0x24
 800a172:	e009      	b.n	800a188 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800a174:	68fa      	ldr	r2, [r7, #12]
 800a176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a178:	4413      	add	r3, r2
 800a17a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800a17e:	2200      	movs	r2, #0
 800a180:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800a182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a184:	3301      	adds	r3, #1
 800a186:	627b      	str	r3, [r7, #36]	; 0x24
 800a188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a18a:	69fb      	ldr	r3, [r7, #28]
 800a18c:	429a      	cmp	r2, r3
 800a18e:	d3f1      	bcc.n	800a174 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 800a190:	79fb      	ldrb	r3, [r7, #7]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d011      	beq.n	800a1ba <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800a196:	e002      	b.n	800a19e <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800a198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a19a:	3301      	adds	r3, #1
 800a19c:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800a19e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800a1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1a4:	4413      	add	r3, r2
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f7ff fc2a 	bl	8009a00 <is_aperture>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d103      	bne.n	800a1ba <VL53L0X_set_reference_spads+0xe6>
 800a1b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1b4:	69bb      	ldr	r3, [r7, #24]
 800a1b6:	429a      	cmp	r2, r3
 800a1b8:	d3ee      	bcc.n	800a198 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 800a1c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a1ca:	79f9      	ldrb	r1, [r7, #7]
 800a1cc:	f107 0214 	add.w	r2, r7, #20
 800a1d0:	9204      	str	r2, [sp, #16]
 800a1d2:	68ba      	ldr	r2, [r7, #8]
 800a1d4:	9203      	str	r2, [sp, #12]
 800a1d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1d8:	9202      	str	r2, [sp, #8]
 800a1da:	9301      	str	r3, [sp, #4]
 800a1dc:	69fb      	ldr	r3, [r7, #28]
 800a1de:	9300      	str	r3, [sp, #0]
 800a1e0:	4623      	mov	r3, r4
 800a1e2:	4602      	mov	r2, r0
 800a1e4:	68f8      	ldr	r0, [r7, #12]
 800a1e6:	f7ff fc83 	bl	8009af0 <enable_ref_spads>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800a1f0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d10c      	bne.n	800a212 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	2201      	movs	r2, #1
 800a1fc:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	b2da      	uxtb	r2, r3
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	79fa      	ldrb	r2, [r7, #7]
 800a20e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800a212:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a216:	4618      	mov	r0, r3
 800a218:	3734      	adds	r7, #52	; 0x34
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd90      	pop	{r4, r7, pc}

0800a21e <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800a21e:	b580      	push	{r7, lr}
 800a220:	b084      	sub	sp, #16
 800a222:	af00      	add	r7, sp, #0
 800a224:	6078      	str	r0, [r7, #4]
 800a226:	460b      	mov	r3, r1
 800a228:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a22a:	2300      	movs	r3, #0
 800a22c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800a22e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d10a      	bne.n	800a24c <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800a236:	78fb      	ldrb	r3, [r7, #3]
 800a238:	f043 0301 	orr.w	r3, r3, #1
 800a23c:	b2db      	uxtb	r3, r3
 800a23e:	461a      	mov	r2, r3
 800a240:	2100      	movs	r1, #0
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f002 fd50 	bl	800cce8 <VL53L0X_WrByte>
 800a248:	4603      	mov	r3, r0
 800a24a:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800a24c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d104      	bne.n	800a25e <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f000 f9bf 	bl	800a5d8 <VL53L0X_measurement_poll_for_completion>
 800a25a:	4603      	mov	r3, r0
 800a25c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800a25e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d105      	bne.n	800a272 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800a266:	2100      	movs	r1, #0
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f7ff fab5 	bl	80097d8 <VL53L0X_ClearInterruptMask>
 800a26e:	4603      	mov	r3, r0
 800a270:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800a272:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d106      	bne.n	800a288 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800a27a:	2200      	movs	r2, #0
 800a27c:	2100      	movs	r1, #0
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f002 fd32 	bl	800cce8 <VL53L0X_WrByte>
 800a284:	4603      	mov	r3, r0
 800a286:	73fb      	strb	r3, [r7, #15]

	return Status;
 800a288:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3710      	adds	r7, #16
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}

0800a294 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b084      	sub	sp, #16
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
 800a29c:	4608      	mov	r0, r1
 800a29e:	4611      	mov	r1, r2
 800a2a0:	461a      	mov	r2, r3
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	70fb      	strb	r3, [r7, #3]
 800a2a6:	460b      	mov	r3, r1
 800a2a8:	70bb      	strb	r3, [r7, #2]
 800a2aa:	4613      	mov	r3, r2
 800a2ac:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	21ff      	movs	r1, #255	; 0xff
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f002 fd14 	bl	800cce8 <VL53L0X_WrByte>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	461a      	mov	r2, r3
 800a2c4:	7bfb      	ldrb	r3, [r7, #15]
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	2100      	movs	r1, #0
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f002 fd0a 	bl	800cce8 <VL53L0X_WrByte>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	461a      	mov	r2, r3
 800a2d8:	7bfb      	ldrb	r3, [r7, #15]
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a2de:	2200      	movs	r2, #0
 800a2e0:	21ff      	movs	r1, #255	; 0xff
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f002 fd00 	bl	800cce8 <VL53L0X_WrByte>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	461a      	mov	r2, r3
 800a2ec:	7bfb      	ldrb	r3, [r7, #15]
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800a2f2:	78fb      	ldrb	r3, [r7, #3]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d01e      	beq.n	800a336 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800a2f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d009      	beq.n	800a314 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800a300:	69ba      	ldr	r2, [r7, #24]
 800a302:	21cb      	movs	r1, #203	; 0xcb
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f002 fd71 	bl	800cdec <VL53L0X_RdByte>
 800a30a:	4603      	mov	r3, r0
 800a30c:	461a      	mov	r2, r3
 800a30e:	7bfb      	ldrb	r3, [r7, #15]
 800a310:	4313      	orrs	r3, r2
 800a312:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800a314:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d02a      	beq.n	800a372 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800a31c:	f107 030e 	add.w	r3, r7, #14
 800a320:	461a      	mov	r2, r3
 800a322:	21ee      	movs	r1, #238	; 0xee
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f002 fd61 	bl	800cdec <VL53L0X_RdByte>
 800a32a:	4603      	mov	r3, r0
 800a32c:	461a      	mov	r2, r3
 800a32e:	7bfb      	ldrb	r3, [r7, #15]
 800a330:	4313      	orrs	r3, r2
 800a332:	73fb      	strb	r3, [r7, #15]
 800a334:	e01d      	b.n	800a372 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800a336:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d00a      	beq.n	800a354 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800a33e:	78bb      	ldrb	r3, [r7, #2]
 800a340:	461a      	mov	r2, r3
 800a342:	21cb      	movs	r1, #203	; 0xcb
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f002 fccf 	bl	800cce8 <VL53L0X_WrByte>
 800a34a:	4603      	mov	r3, r0
 800a34c:	461a      	mov	r2, r3
 800a34e:	7bfb      	ldrb	r3, [r7, #15]
 800a350:	4313      	orrs	r3, r2
 800a352:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800a354:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d00a      	beq.n	800a372 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800a35c:	787b      	ldrb	r3, [r7, #1]
 800a35e:	2280      	movs	r2, #128	; 0x80
 800a360:	21ee      	movs	r1, #238	; 0xee
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f002 fd0e 	bl	800cd84 <VL53L0X_UpdateByte>
 800a368:	4603      	mov	r3, r0
 800a36a:	461a      	mov	r2, r3
 800a36c:	7bfb      	ldrb	r3, [r7, #15]
 800a36e:	4313      	orrs	r3, r2
 800a370:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a372:	2201      	movs	r2, #1
 800a374:	21ff      	movs	r1, #255	; 0xff
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f002 fcb6 	bl	800cce8 <VL53L0X_WrByte>
 800a37c:	4603      	mov	r3, r0
 800a37e:	461a      	mov	r2, r3
 800a380:	7bfb      	ldrb	r3, [r7, #15]
 800a382:	4313      	orrs	r3, r2
 800a384:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800a386:	2201      	movs	r2, #1
 800a388:	2100      	movs	r1, #0
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f002 fcac 	bl	800cce8 <VL53L0X_WrByte>
 800a390:	4603      	mov	r3, r0
 800a392:	461a      	mov	r2, r3
 800a394:	7bfb      	ldrb	r3, [r7, #15]
 800a396:	4313      	orrs	r3, r2
 800a398:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a39a:	2200      	movs	r2, #0
 800a39c:	21ff      	movs	r1, #255	; 0xff
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f002 fca2 	bl	800cce8 <VL53L0X_WrByte>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	461a      	mov	r2, r3
 800a3a8:	7bfb      	ldrb	r3, [r7, #15]
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800a3ae:	7bbb      	ldrb	r3, [r7, #14]
 800a3b0:	f023 0310 	bic.w	r3, r3, #16
 800a3b4:	b2da      	uxtb	r2, r3
 800a3b6:	69fb      	ldr	r3, [r7, #28]
 800a3b8:	701a      	strb	r2, [r3, #0]

	return Status;
 800a3ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3710      	adds	r7, #16
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}

0800a3c6 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800a3c6:	b580      	push	{r7, lr}
 800a3c8:	b08a      	sub	sp, #40	; 0x28
 800a3ca:	af04      	add	r7, sp, #16
 800a3cc:	60f8      	str	r0, [r7, #12]
 800a3ce:	60b9      	str	r1, [r7, #8]
 800a3d0:	4611      	mov	r1, r2
 800a3d2:	461a      	mov	r2, r3
 800a3d4:	460b      	mov	r3, r1
 800a3d6:	71fb      	strb	r3, [r7, #7]
 800a3d8:	4613      	mov	r3, r2
 800a3da:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800a3f0:	79bb      	ldrb	r3, [r7, #6]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d003      	beq.n	800a3fe <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800a3fc:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800a3fe:	2201      	movs	r2, #1
 800a400:	2101      	movs	r1, #1
 800a402:	68f8      	ldr	r0, [r7, #12]
 800a404:	f002 fc70 	bl	800cce8 <VL53L0X_WrByte>
 800a408:	4603      	mov	r3, r0
 800a40a:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800a40c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d105      	bne.n	800a420 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800a414:	2140      	movs	r1, #64	; 0x40
 800a416:	68f8      	ldr	r0, [r7, #12]
 800a418:	f7ff ff01 	bl	800a21e <VL53L0X_perform_single_ref_calibration>
 800a41c:	4603      	mov	r3, r0
 800a41e:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800a420:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d115      	bne.n	800a454 <VL53L0X_perform_vhv_calibration+0x8e>
 800a428:	79fb      	ldrb	r3, [r7, #7]
 800a42a:	2b01      	cmp	r3, #1
 800a42c:	d112      	bne.n	800a454 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800a42e:	7d39      	ldrb	r1, [r7, #20]
 800a430:	7d7a      	ldrb	r2, [r7, #21]
 800a432:	2300      	movs	r3, #0
 800a434:	9303      	str	r3, [sp, #12]
 800a436:	2301      	movs	r3, #1
 800a438:	9302      	str	r3, [sp, #8]
 800a43a:	f107 0313 	add.w	r3, r7, #19
 800a43e:	9301      	str	r3, [sp, #4]
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	9300      	str	r3, [sp, #0]
 800a444:	460b      	mov	r3, r1
 800a446:	2101      	movs	r1, #1
 800a448:	68f8      	ldr	r0, [r7, #12]
 800a44a:	f7ff ff23 	bl	800a294 <VL53L0X_ref_calibration_io>
 800a44e:	4603      	mov	r3, r0
 800a450:	75fb      	strb	r3, [r7, #23]
 800a452:	e002      	b.n	800a45a <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	2200      	movs	r2, #0
 800a458:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800a45a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d112      	bne.n	800a488 <VL53L0X_perform_vhv_calibration+0xc2>
 800a462:	79bb      	ldrb	r3, [r7, #6]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d00f      	beq.n	800a488 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a468:	7dbb      	ldrb	r3, [r7, #22]
 800a46a:	461a      	mov	r2, r3
 800a46c:	2101      	movs	r1, #1
 800a46e:	68f8      	ldr	r0, [r7, #12]
 800a470:	f002 fc3a 	bl	800cce8 <VL53L0X_WrByte>
 800a474:	4603      	mov	r3, r0
 800a476:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800a478:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d103      	bne.n	800a488 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	7dba      	ldrb	r2, [r7, #22]
 800a484:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800a488:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	3718      	adds	r7, #24
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}

0800a494 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b08a      	sub	sp, #40	; 0x28
 800a498:	af04      	add	r7, sp, #16
 800a49a:	60f8      	str	r0, [r7, #12]
 800a49c:	60b9      	str	r1, [r7, #8]
 800a49e:	4611      	mov	r1, r2
 800a4a0:	461a      	mov	r2, r3
 800a4a2:	460b      	mov	r3, r1
 800a4a4:	71fb      	strb	r3, [r7, #7]
 800a4a6:	4613      	mov	r3, r2
 800a4a8:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800a4ba:	79bb      	ldrb	r3, [r7, #6]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d003      	beq.n	800a4c8 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800a4c6:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800a4c8:	2202      	movs	r2, #2
 800a4ca:	2101      	movs	r1, #1
 800a4cc:	68f8      	ldr	r0, [r7, #12]
 800a4ce:	f002 fc0b 	bl	800cce8 <VL53L0X_WrByte>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800a4d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d105      	bne.n	800a4ea <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800a4de:	2100      	movs	r1, #0
 800a4e0:	68f8      	ldr	r0, [r7, #12]
 800a4e2:	f7ff fe9c 	bl	800a21e <VL53L0X_perform_single_ref_calibration>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800a4ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d115      	bne.n	800a51e <VL53L0X_perform_phase_calibration+0x8a>
 800a4f2:	79fb      	ldrb	r3, [r7, #7]
 800a4f4:	2b01      	cmp	r3, #1
 800a4f6:	d112      	bne.n	800a51e <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800a4f8:	7d39      	ldrb	r1, [r7, #20]
 800a4fa:	7d7a      	ldrb	r2, [r7, #21]
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	9303      	str	r3, [sp, #12]
 800a500:	2300      	movs	r3, #0
 800a502:	9302      	str	r3, [sp, #8]
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	9301      	str	r3, [sp, #4]
 800a508:	f107 0313 	add.w	r3, r7, #19
 800a50c:	9300      	str	r3, [sp, #0]
 800a50e:	460b      	mov	r3, r1
 800a510:	2101      	movs	r1, #1
 800a512:	68f8      	ldr	r0, [r7, #12]
 800a514:	f7ff febe 	bl	800a294 <VL53L0X_ref_calibration_io>
 800a518:	4603      	mov	r3, r0
 800a51a:	75fb      	strb	r3, [r7, #23]
 800a51c:	e002      	b.n	800a524 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	2200      	movs	r2, #0
 800a522:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800a524:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d112      	bne.n	800a552 <VL53L0X_perform_phase_calibration+0xbe>
 800a52c:	79bb      	ldrb	r3, [r7, #6]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d00f      	beq.n	800a552 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a532:	7dbb      	ldrb	r3, [r7, #22]
 800a534:	461a      	mov	r2, r3
 800a536:	2101      	movs	r1, #1
 800a538:	68f8      	ldr	r0, [r7, #12]
 800a53a:	f002 fbd5 	bl	800cce8 <VL53L0X_WrByte>
 800a53e:	4603      	mov	r3, r0
 800a540:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800a542:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d103      	bne.n	800a552 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	7dba      	ldrb	r2, [r7, #22]
 800a54e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800a552:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a556:	4618      	mov	r0, r3
 800a558:	3718      	adds	r7, #24
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}

0800a55e <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800a55e:	b580      	push	{r7, lr}
 800a560:	b086      	sub	sp, #24
 800a562:	af00      	add	r7, sp, #0
 800a564:	60f8      	str	r0, [r7, #12]
 800a566:	60b9      	str	r1, [r7, #8]
 800a568:	607a      	str	r2, [r7, #4]
 800a56a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a56c:	2300      	movs	r3, #0
 800a56e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800a570:	2300      	movs	r3, #0
 800a572:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800a57a:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800a57c:	78fa      	ldrb	r2, [r7, #3]
 800a57e:	2300      	movs	r3, #0
 800a580:	68b9      	ldr	r1, [r7, #8]
 800a582:	68f8      	ldr	r0, [r7, #12]
 800a584:	f7ff ff1f 	bl	800a3c6 <VL53L0X_perform_vhv_calibration>
 800a588:	4603      	mov	r3, r0
 800a58a:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800a58c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d107      	bne.n	800a5a4 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800a594:	78fa      	ldrb	r2, [r7, #3]
 800a596:	2300      	movs	r3, #0
 800a598:	6879      	ldr	r1, [r7, #4]
 800a59a:	68f8      	ldr	r0, [r7, #12]
 800a59c:	f7ff ff7a 	bl	800a494 <VL53L0X_perform_phase_calibration>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800a5a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d10f      	bne.n	800a5cc <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a5ac:	7dbb      	ldrb	r3, [r7, #22]
 800a5ae:	461a      	mov	r2, r3
 800a5b0:	2101      	movs	r1, #1
 800a5b2:	68f8      	ldr	r0, [r7, #12]
 800a5b4:	f002 fb98 	bl	800cce8 <VL53L0X_WrByte>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800a5bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d103      	bne.n	800a5cc <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	7dba      	ldrb	r2, [r7, #22]
 800a5c8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800a5cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3718      	adds	r7, #24
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}

0800a5d8 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b086      	sub	sp, #24
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800a5ec:	f107 030f 	add.w	r3, r7, #15
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f7fe fe02 	bl	80091fc <VL53L0X_GetMeasurementDataReady>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800a5fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d110      	bne.n	800a626 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800a604:	7bfb      	ldrb	r3, [r7, #15]
 800a606:	2b01      	cmp	r3, #1
 800a608:	d00f      	beq.n	800a62a <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800a60a:	693b      	ldr	r3, [r7, #16]
 800a60c:	3301      	adds	r3, #1
 800a60e:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a616:	d302      	bcc.n	800a61e <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800a618:	23f9      	movs	r3, #249	; 0xf9
 800a61a:	75fb      	strb	r3, [r7, #23]
			break;
 800a61c:	e006      	b.n	800a62c <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f002 fc82 	bl	800cf28 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800a624:	e7e2      	b.n	800a5ec <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800a626:	bf00      	nop
 800a628:	e000      	b.n	800a62c <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800a62a:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800a62c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a630:	4618      	mov	r0, r3
 800a632:	3718      	adds	r7, #24
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}

0800a638 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800a638:	b480      	push	{r7}
 800a63a:	b085      	sub	sp, #20
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	4603      	mov	r3, r0
 800a640:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800a642:	2300      	movs	r3, #0
 800a644:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800a646:	79fb      	ldrb	r3, [r7, #7]
 800a648:	3301      	adds	r3, #1
 800a64a:	b2db      	uxtb	r3, r3
 800a64c:	005b      	lsls	r3, r3, #1
 800a64e:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800a650:	7bfb      	ldrb	r3, [r7, #15]
}
 800a652:	4618      	mov	r0, r3
 800a654:	3714      	adds	r7, #20
 800a656:	46bd      	mov	sp, r7
 800a658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65c:	4770      	bx	lr

0800a65e <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800a65e:	b480      	push	{r7}
 800a660:	b085      	sub	sp, #20
 800a662:	af00      	add	r7, sp, #0
 800a664:	4603      	mov	r3, r0
 800a666:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 800a668:	2300      	movs	r3, #0
 800a66a:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 800a66c:	79fb      	ldrb	r3, [r7, #7]
 800a66e:	085b      	lsrs	r3, r3, #1
 800a670:	b2db      	uxtb	r3, r3
 800a672:	3b01      	subs	r3, #1
 800a674:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800a676:	7bfb      	ldrb	r3, [r7, #15]
}
 800a678:	4618      	mov	r0, r3
 800a67a:	3714      	adds	r7, #20
 800a67c:	46bd      	mov	sp, r7
 800a67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a682:	4770      	bx	lr

0800a684 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800a684:	b480      	push	{r7}
 800a686:	b085      	sub	sp, #20
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800a68c:	2300      	movs	r3, #0
 800a68e:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800a690:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a694:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800a696:	e002      	b.n	800a69e <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	089b      	lsrs	r3, r3, #2
 800a69c:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800a69e:	68ba      	ldr	r2, [r7, #8]
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	d8f8      	bhi.n	800a698 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800a6a6:	e017      	b.n	800a6d8 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800a6a8:	68fa      	ldr	r2, [r7, #12]
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	4413      	add	r3, r2
 800a6ae:	687a      	ldr	r2, [r7, #4]
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	d30b      	bcc.n	800a6cc <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800a6b4:	68fa      	ldr	r2, [r7, #12]
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	4413      	add	r3, r2
 800a6ba:	687a      	ldr	r2, [r7, #4]
 800a6bc:	1ad3      	subs	r3, r2, r3
 800a6be:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	085b      	lsrs	r3, r3, #1
 800a6c4:	68ba      	ldr	r2, [r7, #8]
 800a6c6:	4413      	add	r3, r2
 800a6c8:	60fb      	str	r3, [r7, #12]
 800a6ca:	e002      	b.n	800a6d2 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	085b      	lsrs	r3, r3, #1
 800a6d0:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	089b      	lsrs	r3, r3, #2
 800a6d6:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d1e4      	bne.n	800a6a8 <VL53L0X_isqrt+0x24>
	}

	return res;
 800a6de:	68fb      	ldr	r3, [r7, #12]
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3714      	adds	r7, #20
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ea:	4770      	bx	lr

0800a6ec <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b086      	sub	sp, #24
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	2183      	movs	r1, #131	; 0x83
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f002 faf3 	bl	800cce8 <VL53L0X_WrByte>
 800a702:	4603      	mov	r3, r0
 800a704:	461a      	mov	r2, r3
 800a706:	7dfb      	ldrb	r3, [r7, #23]
 800a708:	4313      	orrs	r3, r2
 800a70a:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800a70c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d11e      	bne.n	800a752 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 800a714:	2300      	movs	r3, #0
 800a716:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800a718:	f107 030f 	add.w	r3, r7, #15
 800a71c:	461a      	mov	r2, r3
 800a71e:	2183      	movs	r1, #131	; 0x83
 800a720:	6878      	ldr	r0, [r7, #4]
 800a722:	f002 fb63 	bl	800cdec <VL53L0X_RdByte>
 800a726:	4603      	mov	r3, r0
 800a728:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800a72a:	7bfb      	ldrb	r3, [r7, #15]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d10a      	bne.n	800a746 <VL53L0X_device_read_strobe+0x5a>
 800a730:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d106      	bne.n	800a746 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 800a738:	693b      	ldr	r3, [r7, #16]
 800a73a:	3301      	adds	r3, #1
 800a73c:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a744:	d3e8      	bcc.n	800a718 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a74c:	d301      	bcc.n	800a752 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800a74e:	23f9      	movs	r3, #249	; 0xf9
 800a750:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800a752:	2201      	movs	r2, #1
 800a754:	2183      	movs	r1, #131	; 0x83
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f002 fac6 	bl	800cce8 <VL53L0X_WrByte>
 800a75c:	4603      	mov	r3, r0
 800a75e:	461a      	mov	r2, r3
 800a760:	7dfb      	ldrb	r3, [r7, #23]
 800a762:	4313      	orrs	r3, r2
 800a764:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800a766:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3718      	adds	r7, #24
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}

0800a772 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800a772:	b580      	push	{r7, lr}
 800a774:	b098      	sub	sp, #96	; 0x60
 800a776:	af00      	add	r7, sp, #0
 800a778:	6078      	str	r0, [r7, #4]
 800a77a:	460b      	mov	r3, r1
 800a77c:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a77e:	2300      	movs	r3, #0
 800a780:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800a784:	2300      	movs	r3, #0
 800a786:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800a78a:	2300      	movs	r3, #0
 800a78c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800a790:	2300      	movs	r3, #0
 800a792:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800a794:	2300      	movs	r3, #0
 800a796:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800a798:	2300      	movs	r3, #0
 800a79a:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800a79c:	2300      	movs	r3, #0
 800a79e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800a7a2:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800a7a6:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800a7ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800a7be:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a7c2:	2b07      	cmp	r3, #7
 800a7c4:	f000 8408 	beq.w	800afd8 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800a7c8:	2201      	movs	r2, #1
 800a7ca:	2180      	movs	r1, #128	; 0x80
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f002 fa8b 	bl	800cce8 <VL53L0X_WrByte>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	461a      	mov	r2, r3
 800a7d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a7da:	4313      	orrs	r3, r2
 800a7dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a7e0:	2201      	movs	r2, #1
 800a7e2:	21ff      	movs	r1, #255	; 0xff
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f002 fa7f 	bl	800cce8 <VL53L0X_WrByte>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	461a      	mov	r2, r3
 800a7ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a7f2:	4313      	orrs	r3, r2
 800a7f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	2100      	movs	r1, #0
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f002 fa73 	bl	800cce8 <VL53L0X_WrByte>
 800a802:	4603      	mov	r3, r0
 800a804:	461a      	mov	r2, r3
 800a806:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a80a:	4313      	orrs	r3, r2
 800a80c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800a810:	2206      	movs	r2, #6
 800a812:	21ff      	movs	r1, #255	; 0xff
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f002 fa67 	bl	800cce8 <VL53L0X_WrByte>
 800a81a:	4603      	mov	r3, r0
 800a81c:	461a      	mov	r2, r3
 800a81e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a822:	4313      	orrs	r3, r2
 800a824:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800a828:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800a82c:	461a      	mov	r2, r3
 800a82e:	2183      	movs	r1, #131	; 0x83
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f002 fadb 	bl	800cdec <VL53L0X_RdByte>
 800a836:	4603      	mov	r3, r0
 800a838:	461a      	mov	r2, r3
 800a83a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a83e:	4313      	orrs	r3, r2
 800a840:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800a844:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a848:	f043 0304 	orr.w	r3, r3, #4
 800a84c:	b2db      	uxtb	r3, r3
 800a84e:	461a      	mov	r2, r3
 800a850:	2183      	movs	r1, #131	; 0x83
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f002 fa48 	bl	800cce8 <VL53L0X_WrByte>
 800a858:	4603      	mov	r3, r0
 800a85a:	461a      	mov	r2, r3
 800a85c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a860:	4313      	orrs	r3, r2
 800a862:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800a866:	2207      	movs	r2, #7
 800a868:	21ff      	movs	r1, #255	; 0xff
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f002 fa3c 	bl	800cce8 <VL53L0X_WrByte>
 800a870:	4603      	mov	r3, r0
 800a872:	461a      	mov	r2, r3
 800a874:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a878:	4313      	orrs	r3, r2
 800a87a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800a87e:	2201      	movs	r2, #1
 800a880:	2181      	movs	r1, #129	; 0x81
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f002 fa30 	bl	800cce8 <VL53L0X_WrByte>
 800a888:	4603      	mov	r3, r0
 800a88a:	461a      	mov	r2, r3
 800a88c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a890:	4313      	orrs	r3, r2
 800a892:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f002 fb46 	bl	800cf28 <VL53L0X_PollingDelay>
 800a89c:	4603      	mov	r3, r0
 800a89e:	461a      	mov	r2, r3
 800a8a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8a4:	4313      	orrs	r3, r2
 800a8a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800a8aa:	2201      	movs	r2, #1
 800a8ac:	2180      	movs	r1, #128	; 0x80
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f002 fa1a 	bl	800cce8 <VL53L0X_WrByte>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	461a      	mov	r2, r3
 800a8b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8bc:	4313      	orrs	r3, r2
 800a8be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800a8c2:	78fb      	ldrb	r3, [r7, #3]
 800a8c4:	f003 0301 	and.w	r3, r3, #1
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	f000 8098 	beq.w	800a9fe <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800a8ce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a8d2:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	f040 8091 	bne.w	800a9fe <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800a8dc:	226b      	movs	r2, #107	; 0x6b
 800a8de:	2194      	movs	r1, #148	; 0x94
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f002 fa01 	bl	800cce8 <VL53L0X_WrByte>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	461a      	mov	r2, r3
 800a8ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8ee:	4313      	orrs	r3, r2
 800a8f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	f7ff fef9 	bl	800a6ec <VL53L0X_device_read_strobe>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	461a      	mov	r2, r3
 800a8fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a902:	4313      	orrs	r3, r2
 800a904:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a908:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a90c:	461a      	mov	r2, r3
 800a90e:	2190      	movs	r1, #144	; 0x90
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f002 facd 	bl	800ceb0 <VL53L0X_RdDWord>
 800a916:	4603      	mov	r3, r0
 800a918:	461a      	mov	r2, r3
 800a91a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a91e:	4313      	orrs	r3, r2
 800a920:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800a924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a926:	0a1b      	lsrs	r3, r3, #8
 800a928:	b2db      	uxtb	r3, r3
 800a92a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a92e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800a932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a934:	0bdb      	lsrs	r3, r3, #15
 800a936:	b2db      	uxtb	r3, r3
 800a938:	f003 0301 	and.w	r3, r3, #1
 800a93c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800a940:	2224      	movs	r2, #36	; 0x24
 800a942:	2194      	movs	r1, #148	; 0x94
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f002 f9cf 	bl	800cce8 <VL53L0X_WrByte>
 800a94a:	4603      	mov	r3, r0
 800a94c:	461a      	mov	r2, r3
 800a94e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a952:	4313      	orrs	r3, r2
 800a954:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f7ff fec7 	bl	800a6ec <VL53L0X_device_read_strobe>
 800a95e:	4603      	mov	r3, r0
 800a960:	461a      	mov	r2, r3
 800a962:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a966:	4313      	orrs	r3, r2
 800a968:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a96c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a970:	461a      	mov	r2, r3
 800a972:	2190      	movs	r1, #144	; 0x90
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	f002 fa9b 	bl	800ceb0 <VL53L0X_RdDWord>
 800a97a:	4603      	mov	r3, r0
 800a97c:	461a      	mov	r2, r3
 800a97e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a982:	4313      	orrs	r3, r2
 800a984:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800a988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a98a:	0e1b      	lsrs	r3, r3, #24
 800a98c:	b2db      	uxtb	r3, r3
 800a98e:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800a990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a992:	0c1b      	lsrs	r3, r3, #16
 800a994:	b2db      	uxtb	r3, r3
 800a996:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800a998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a99a:	0a1b      	lsrs	r3, r3, #8
 800a99c:	b2db      	uxtb	r3, r3
 800a99e:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800a9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a2:	b2db      	uxtb	r3, r3
 800a9a4:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800a9a6:	2225      	movs	r2, #37	; 0x25
 800a9a8:	2194      	movs	r1, #148	; 0x94
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f002 f99c 	bl	800cce8 <VL53L0X_WrByte>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	461a      	mov	r2, r3
 800a9b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a9b8:	4313      	orrs	r3, r2
 800a9ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f7ff fe94 	bl	800a6ec <VL53L0X_device_read_strobe>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	461a      	mov	r2, r3
 800a9c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a9cc:	4313      	orrs	r3, r2
 800a9ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a9d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a9d6:	461a      	mov	r2, r3
 800a9d8:	2190      	movs	r1, #144	; 0x90
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f002 fa68 	bl	800ceb0 <VL53L0X_RdDWord>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	461a      	mov	r2, r3
 800a9e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a9e8:	4313      	orrs	r3, r2
 800a9ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800a9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f0:	0e1b      	lsrs	r3, r3, #24
 800a9f2:	b2db      	uxtb	r3, r3
 800a9f4:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800a9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f8:	0c1b      	lsrs	r3, r3, #16
 800a9fa:	b2db      	uxtb	r3, r3
 800a9fc:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800a9fe:	78fb      	ldrb	r3, [r7, #3]
 800aa00:	f003 0302 	and.w	r3, r3, #2
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	f000 8189 	beq.w	800ad1c <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800aa0a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800aa0e:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	f040 8182 	bne.w	800ad1c <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800aa18:	2202      	movs	r2, #2
 800aa1a:	2194      	movs	r1, #148	; 0x94
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f002 f963 	bl	800cce8 <VL53L0X_WrByte>
 800aa22:	4603      	mov	r3, r0
 800aa24:	461a      	mov	r2, r3
 800aa26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa2a:	4313      	orrs	r3, r2
 800aa2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f7ff fe5b 	bl	800a6ec <VL53L0X_device_read_strobe>
 800aa36:	4603      	mov	r3, r0
 800aa38:	461a      	mov	r2, r3
 800aa3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa3e:	4313      	orrs	r3, r2
 800aa40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800aa44:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800aa48:	461a      	mov	r2, r3
 800aa4a:	2190      	movs	r1, #144	; 0x90
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f002 f9cd 	bl	800cdec <VL53L0X_RdByte>
 800aa52:	4603      	mov	r3, r0
 800aa54:	461a      	mov	r2, r3
 800aa56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa5a:	4313      	orrs	r3, r2
 800aa5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800aa60:	227b      	movs	r2, #123	; 0x7b
 800aa62:	2194      	movs	r1, #148	; 0x94
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f002 f93f 	bl	800cce8 <VL53L0X_WrByte>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	461a      	mov	r2, r3
 800aa6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa72:	4313      	orrs	r3, r2
 800aa74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f7ff fe37 	bl	800a6ec <VL53L0X_device_read_strobe>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	461a      	mov	r2, r3
 800aa82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa86:	4313      	orrs	r3, r2
 800aa88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800aa8c:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800aa90:	461a      	mov	r2, r3
 800aa92:	2190      	movs	r1, #144	; 0x90
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f002 f9a9 	bl	800cdec <VL53L0X_RdByte>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	461a      	mov	r2, r3
 800aa9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aaa2:	4313      	orrs	r3, r2
 800aaa4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800aaa8:	2277      	movs	r2, #119	; 0x77
 800aaaa:	2194      	movs	r1, #148	; 0x94
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f002 f91b 	bl	800cce8 <VL53L0X_WrByte>
 800aab2:	4603      	mov	r3, r0
 800aab4:	461a      	mov	r2, r3
 800aab6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aaba:	4313      	orrs	r3, r2
 800aabc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f7ff fe13 	bl	800a6ec <VL53L0X_device_read_strobe>
 800aac6:	4603      	mov	r3, r0
 800aac8:	461a      	mov	r2, r3
 800aaca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aace:	4313      	orrs	r3, r2
 800aad0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800aad4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800aad8:	461a      	mov	r2, r3
 800aada:	2190      	movs	r1, #144	; 0x90
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f002 f9e7 	bl	800ceb0 <VL53L0X_RdDWord>
 800aae2:	4603      	mov	r3, r0
 800aae4:	461a      	mov	r2, r3
 800aae6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aaea:	4313      	orrs	r3, r2
 800aaec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800aaf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf2:	0e5b      	lsrs	r3, r3, #25
 800aaf4:	b2db      	uxtb	r3, r3
 800aaf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aafa:	b2db      	uxtb	r3, r3
 800aafc:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800aafe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab00:	0c9b      	lsrs	r3, r3, #18
 800ab02:	b2db      	uxtb	r3, r3
 800ab04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab08:	b2db      	uxtb	r3, r3
 800ab0a:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800ab0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab0e:	0adb      	lsrs	r3, r3, #11
 800ab10:	b2db      	uxtb	r3, r3
 800ab12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab16:	b2db      	uxtb	r3, r3
 800ab18:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800ab1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab1c:	091b      	lsrs	r3, r3, #4
 800ab1e:	b2db      	uxtb	r3, r3
 800ab20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab24:	b2db      	uxtb	r3, r3
 800ab26:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800ab28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab2a:	b2db      	uxtb	r3, r3
 800ab2c:	00db      	lsls	r3, r3, #3
 800ab2e:	b2db      	uxtb	r3, r3
 800ab30:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800ab34:	b2db      	uxtb	r3, r3
 800ab36:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800ab3a:	2278      	movs	r2, #120	; 0x78
 800ab3c:	2194      	movs	r1, #148	; 0x94
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f002 f8d2 	bl	800cce8 <VL53L0X_WrByte>
 800ab44:	4603      	mov	r3, r0
 800ab46:	461a      	mov	r2, r3
 800ab48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab4c:	4313      	orrs	r3, r2
 800ab4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f7ff fdca 	bl	800a6ec <VL53L0X_device_read_strobe>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab60:	4313      	orrs	r3, r2
 800ab62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ab66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ab6a:	461a      	mov	r2, r3
 800ab6c:	2190      	movs	r1, #144	; 0x90
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f002 f99e 	bl	800ceb0 <VL53L0X_RdDWord>
 800ab74:	4603      	mov	r3, r0
 800ab76:	461a      	mov	r2, r3
 800ab78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab7c:	4313      	orrs	r3, r2
 800ab7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800ab82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab84:	0f5b      	lsrs	r3, r3, #29
 800ab86:	b2db      	uxtb	r3, r3
 800ab88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab8c:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800ab8e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ab92:	4413      	add	r3, r2
 800ab94:	b2db      	uxtb	r3, r3
 800ab96:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800ab98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab9a:	0d9b      	lsrs	r3, r3, #22
 800ab9c:	b2db      	uxtb	r3, r3
 800ab9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aba2:	b2db      	uxtb	r3, r3
 800aba4:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800aba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aba8:	0bdb      	lsrs	r3, r3, #15
 800abaa:	b2db      	uxtb	r3, r3
 800abac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abb0:	b2db      	uxtb	r3, r3
 800abb2:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800abb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abb6:	0a1b      	lsrs	r3, r3, #8
 800abb8:	b2db      	uxtb	r3, r3
 800abba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abbe:	b2db      	uxtb	r3, r3
 800abc0:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800abc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abc4:	085b      	lsrs	r3, r3, #1
 800abc6:	b2db      	uxtb	r3, r3
 800abc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abcc:	b2db      	uxtb	r3, r3
 800abce:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800abd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abd2:	b2db      	uxtb	r3, r3
 800abd4:	019b      	lsls	r3, r3, #6
 800abd6:	b2db      	uxtb	r3, r3
 800abd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abdc:	b2db      	uxtb	r3, r3
 800abde:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800abe2:	2279      	movs	r2, #121	; 0x79
 800abe4:	2194      	movs	r1, #148	; 0x94
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f002 f87e 	bl	800cce8 <VL53L0X_WrByte>
 800abec:	4603      	mov	r3, r0
 800abee:	461a      	mov	r2, r3
 800abf0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800abf4:	4313      	orrs	r3, r2
 800abf6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f7ff fd76 	bl	800a6ec <VL53L0X_device_read_strobe>
 800ac00:	4603      	mov	r3, r0
 800ac02:	461a      	mov	r2, r3
 800ac04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ac0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ac12:	461a      	mov	r2, r3
 800ac14:	2190      	movs	r1, #144	; 0x90
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f002 f94a 	bl	800ceb0 <VL53L0X_RdDWord>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	461a      	mov	r2, r3
 800ac20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac24:	4313      	orrs	r3, r2
 800ac26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800ac2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac2c:	0e9b      	lsrs	r3, r3, #26
 800ac2e:	b2db      	uxtb	r3, r3
 800ac30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac34:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800ac36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ac3a:	4413      	add	r3, r2
 800ac3c:	b2db      	uxtb	r3, r3
 800ac3e:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800ac40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac42:	0cdb      	lsrs	r3, r3, #19
 800ac44:	b2db      	uxtb	r3, r3
 800ac46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac4a:	b2db      	uxtb	r3, r3
 800ac4c:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800ac4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac50:	0b1b      	lsrs	r3, r3, #12
 800ac52:	b2db      	uxtb	r3, r3
 800ac54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac58:	b2db      	uxtb	r3, r3
 800ac5a:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800ac5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac5e:	095b      	lsrs	r3, r3, #5
 800ac60:	b2db      	uxtb	r3, r3
 800ac62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac66:	b2db      	uxtb	r3, r3
 800ac68:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800ac6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac6c:	b2db      	uxtb	r3, r3
 800ac6e:	009b      	lsls	r3, r3, #2
 800ac70:	b2db      	uxtb	r3, r3
 800ac72:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800ac76:	b2db      	uxtb	r3, r3
 800ac78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800ac7c:	227a      	movs	r2, #122	; 0x7a
 800ac7e:	2194      	movs	r1, #148	; 0x94
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f002 f831 	bl	800cce8 <VL53L0X_WrByte>
 800ac86:	4603      	mov	r3, r0
 800ac88:	461a      	mov	r2, r3
 800ac8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f7ff fd29 	bl	800a6ec <VL53L0X_device_read_strobe>
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	461a      	mov	r2, r3
 800ac9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aca2:	4313      	orrs	r3, r2
 800aca4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800aca8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800acac:	461a      	mov	r2, r3
 800acae:	2190      	movs	r1, #144	; 0x90
 800acb0:	6878      	ldr	r0, [r7, #4]
 800acb2:	f002 f8fd 	bl	800ceb0 <VL53L0X_RdDWord>
 800acb6:	4603      	mov	r3, r0
 800acb8:	461a      	mov	r2, r3
 800acba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800acbe:	4313      	orrs	r3, r2
 800acc0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800acc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acc6:	0f9b      	lsrs	r3, r3, #30
 800acc8:	b2db      	uxtb	r3, r3
 800acca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acce:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800acd0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800acd4:	4413      	add	r3, r2
 800acd6:	b2db      	uxtb	r3, r3
 800acd8:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800acda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acdc:	0ddb      	lsrs	r3, r3, #23
 800acde:	b2db      	uxtb	r3, r3
 800ace0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ace4:	b2db      	uxtb	r3, r3
 800ace6:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800ace8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acea:	0c1b      	lsrs	r3, r3, #16
 800acec:	b2db      	uxtb	r3, r3
 800acee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acf2:	b2db      	uxtb	r3, r3
 800acf4:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800acf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf8:	0a5b      	lsrs	r3, r3, #9
 800acfa:	b2db      	uxtb	r3, r3
 800acfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad00:	b2db      	uxtb	r3, r3
 800ad02:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800ad06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad08:	089b      	lsrs	r3, r3, #2
 800ad0a:	b2db      	uxtb	r3, r3
 800ad0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad10:	b2db      	uxtb	r3, r3
 800ad12:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800ad16:	2300      	movs	r3, #0
 800ad18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800ad1c:	78fb      	ldrb	r3, [r7, #3]
 800ad1e:	f003 0304 	and.w	r3, r3, #4
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	f000 80f1 	beq.w	800af0a <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800ad28:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ad2c:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	f040 80ea 	bne.w	800af0a <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800ad36:	227b      	movs	r2, #123	; 0x7b
 800ad38:	2194      	movs	r1, #148	; 0x94
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f001 ffd4 	bl	800cce8 <VL53L0X_WrByte>
 800ad40:	4603      	mov	r3, r0
 800ad42:	461a      	mov	r2, r3
 800ad44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad48:	4313      	orrs	r3, r2
 800ad4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f7ff fccc 	bl	800a6ec <VL53L0X_device_read_strobe>
 800ad54:	4603      	mov	r3, r0
 800ad56:	461a      	mov	r2, r3
 800ad58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad5c:	4313      	orrs	r3, r2
 800ad5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800ad62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ad66:	461a      	mov	r2, r3
 800ad68:	2190      	movs	r1, #144	; 0x90
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f002 f8a0 	bl	800ceb0 <VL53L0X_RdDWord>
 800ad70:	4603      	mov	r3, r0
 800ad72:	461a      	mov	r2, r3
 800ad74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad78:	4313      	orrs	r3, r2
 800ad7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800ad7e:	227c      	movs	r2, #124	; 0x7c
 800ad80:	2194      	movs	r1, #148	; 0x94
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f001 ffb0 	bl	800cce8 <VL53L0X_WrByte>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	461a      	mov	r2, r3
 800ad8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad90:	4313      	orrs	r3, r2
 800ad92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f7ff fca8 	bl	800a6ec <VL53L0X_device_read_strobe>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	461a      	mov	r2, r3
 800ada0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ada4:	4313      	orrs	r3, r2
 800ada6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800adaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800adae:	461a      	mov	r2, r3
 800adb0:	2190      	movs	r1, #144	; 0x90
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f002 f87c 	bl	800ceb0 <VL53L0X_RdDWord>
 800adb8:	4603      	mov	r3, r0
 800adba:	461a      	mov	r2, r3
 800adbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800adc0:	4313      	orrs	r3, r2
 800adc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800adc6:	2273      	movs	r2, #115	; 0x73
 800adc8:	2194      	movs	r1, #148	; 0x94
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f001 ff8c 	bl	800cce8 <VL53L0X_WrByte>
 800add0:	4603      	mov	r3, r0
 800add2:	461a      	mov	r2, r3
 800add4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800add8:	4313      	orrs	r3, r2
 800adda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f7ff fc84 	bl	800a6ec <VL53L0X_device_read_strobe>
 800ade4:	4603      	mov	r3, r0
 800ade6:	461a      	mov	r2, r3
 800ade8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800adec:	4313      	orrs	r3, r2
 800adee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800adf2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800adf6:	461a      	mov	r2, r3
 800adf8:	2190      	movs	r1, #144	; 0x90
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f002 f858 	bl	800ceb0 <VL53L0X_RdDWord>
 800ae00:	4603      	mov	r3, r0
 800ae02:	461a      	mov	r2, r3
 800ae04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae08:	4313      	orrs	r3, r2
 800ae0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800ae0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae10:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800ae12:	b29b      	uxth	r3, r3
 800ae14:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800ae16:	2274      	movs	r2, #116	; 0x74
 800ae18:	2194      	movs	r1, #148	; 0x94
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f001 ff64 	bl	800cce8 <VL53L0X_WrByte>
 800ae20:	4603      	mov	r3, r0
 800ae22:	461a      	mov	r2, r3
 800ae24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae28:	4313      	orrs	r3, r2
 800ae2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f7ff fc5c 	bl	800a6ec <VL53L0X_device_read_strobe>
 800ae34:	4603      	mov	r3, r0
 800ae36:	461a      	mov	r2, r3
 800ae38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae3c:	4313      	orrs	r3, r2
 800ae3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ae42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ae46:	461a      	mov	r2, r3
 800ae48:	2190      	movs	r1, #144	; 0x90
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f002 f830 	bl	800ceb0 <VL53L0X_RdDWord>
 800ae50:	4603      	mov	r3, r0
 800ae52:	461a      	mov	r2, r3
 800ae54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae58:	4313      	orrs	r3, r2
 800ae5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800ae5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae60:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800ae62:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ae64:	4313      	orrs	r3, r2
 800ae66:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800ae68:	2275      	movs	r2, #117	; 0x75
 800ae6a:	2194      	movs	r1, #148	; 0x94
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f001 ff3b 	bl	800cce8 <VL53L0X_WrByte>
 800ae72:	4603      	mov	r3, r0
 800ae74:	461a      	mov	r2, r3
 800ae76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae7a:	4313      	orrs	r3, r2
 800ae7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f7ff fc33 	bl	800a6ec <VL53L0X_device_read_strobe>
 800ae86:	4603      	mov	r3, r0
 800ae88:	461a      	mov	r2, r3
 800ae8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae8e:	4313      	orrs	r3, r2
 800ae90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ae94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ae98:	461a      	mov	r2, r3
 800ae9a:	2190      	movs	r1, #144	; 0x90
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f002 f807 	bl	800ceb0 <VL53L0X_RdDWord>
 800aea2:	4603      	mov	r3, r0
 800aea4:	461a      	mov	r2, r3
 800aea6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aeaa:	4313      	orrs	r3, r2
 800aeac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800aeb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb2:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800aeb4:	b29b      	uxth	r3, r3
 800aeb6:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800aeb8:	2276      	movs	r2, #118	; 0x76
 800aeba:	2194      	movs	r1, #148	; 0x94
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f001 ff13 	bl	800cce8 <VL53L0X_WrByte>
 800aec2:	4603      	mov	r3, r0
 800aec4:	461a      	mov	r2, r3
 800aec6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aeca:	4313      	orrs	r3, r2
 800aecc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f7ff fc0b 	bl	800a6ec <VL53L0X_device_read_strobe>
 800aed6:	4603      	mov	r3, r0
 800aed8:	461a      	mov	r2, r3
 800aeda:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aede:	4313      	orrs	r3, r2
 800aee0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800aee4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800aee8:	461a      	mov	r2, r3
 800aeea:	2190      	movs	r1, #144	; 0x90
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f001 ffdf 	bl	800ceb0 <VL53L0X_RdDWord>
 800aef2:	4603      	mov	r3, r0
 800aef4:	461a      	mov	r2, r3
 800aef6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aefa:	4313      	orrs	r3, r2
 800aefc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800af00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af02:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800af04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800af06:	4313      	orrs	r3, r2
 800af08:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800af0a:	2200      	movs	r2, #0
 800af0c:	2181      	movs	r1, #129	; 0x81
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f001 feea 	bl	800cce8 <VL53L0X_WrByte>
 800af14:	4603      	mov	r3, r0
 800af16:	461a      	mov	r2, r3
 800af18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800af1c:	4313      	orrs	r3, r2
 800af1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800af22:	2206      	movs	r2, #6
 800af24:	21ff      	movs	r1, #255	; 0xff
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f001 fede 	bl	800cce8 <VL53L0X_WrByte>
 800af2c:	4603      	mov	r3, r0
 800af2e:	461a      	mov	r2, r3
 800af30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800af34:	4313      	orrs	r3, r2
 800af36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800af3a:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800af3e:	461a      	mov	r2, r3
 800af40:	2183      	movs	r1, #131	; 0x83
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f001 ff52 	bl	800cdec <VL53L0X_RdByte>
 800af48:	4603      	mov	r3, r0
 800af4a:	461a      	mov	r2, r3
 800af4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800af50:	4313      	orrs	r3, r2
 800af52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800af56:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800af5a:	f023 0304 	bic.w	r3, r3, #4
 800af5e:	b2db      	uxtb	r3, r3
 800af60:	461a      	mov	r2, r3
 800af62:	2183      	movs	r1, #131	; 0x83
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f001 febf 	bl	800cce8 <VL53L0X_WrByte>
 800af6a:	4603      	mov	r3, r0
 800af6c:	461a      	mov	r2, r3
 800af6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800af72:	4313      	orrs	r3, r2
 800af74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800af78:	2201      	movs	r2, #1
 800af7a:	21ff      	movs	r1, #255	; 0xff
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f001 feb3 	bl	800cce8 <VL53L0X_WrByte>
 800af82:	4603      	mov	r3, r0
 800af84:	461a      	mov	r2, r3
 800af86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800af8a:	4313      	orrs	r3, r2
 800af8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800af90:	2201      	movs	r2, #1
 800af92:	2100      	movs	r1, #0
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f001 fea7 	bl	800cce8 <VL53L0X_WrByte>
 800af9a:	4603      	mov	r3, r0
 800af9c:	461a      	mov	r2, r3
 800af9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800afa2:	4313      	orrs	r3, r2
 800afa4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800afa8:	2200      	movs	r2, #0
 800afaa:	21ff      	movs	r1, #255	; 0xff
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f001 fe9b 	bl	800cce8 <VL53L0X_WrByte>
 800afb2:	4603      	mov	r3, r0
 800afb4:	461a      	mov	r2, r3
 800afb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800afba:	4313      	orrs	r3, r2
 800afbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800afc0:	2200      	movs	r2, #0
 800afc2:	2180      	movs	r1, #128	; 0x80
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f001 fe8f 	bl	800cce8 <VL53L0X_WrByte>
 800afca:	4603      	mov	r3, r0
 800afcc:	461a      	mov	r2, r3
 800afce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800afd2:	4313      	orrs	r3, r2
 800afd4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800afd8:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800afdc:	2b00      	cmp	r3, #0
 800afde:	f040 808f 	bne.w	800b100 <VL53L0X_get_info_from_device+0x98e>
 800afe2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800afe6:	2b07      	cmp	r3, #7
 800afe8:	f000 808a 	beq.w	800b100 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800afec:	78fb      	ldrb	r3, [r7, #3]
 800afee:	f003 0301 	and.w	r3, r3, #1
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d024      	beq.n	800b040 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800aff6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800affa:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800affe:	2b00      	cmp	r3, #0
 800b000:	d11e      	bne.n	800b040 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800b008:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800b012:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800b016:	2300      	movs	r3, #0
 800b018:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b01a:	e00e      	b.n	800b03a <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800b01c:	f107 0208 	add.w	r2, r7, #8
 800b020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b022:	4413      	add	r3, r2
 800b024:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800b026:	687a      	ldr	r2, [r7, #4]
 800b028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b02a:	4413      	add	r3, r2
 800b02c:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800b030:	460a      	mov	r2, r1
 800b032:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800b034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b036:	3301      	adds	r3, #1
 800b038:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b03a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b03c:	2b05      	cmp	r3, #5
 800b03e:	dded      	ble.n	800b01c <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800b040:	78fb      	ldrb	r3, [r7, #3]
 800b042:	f003 0302 	and.w	r3, r3, #2
 800b046:	2b00      	cmp	r3, #0
 800b048:	d018      	beq.n	800b07c <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800b04a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b04e:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800b052:	2b00      	cmp	r3, #0
 800b054:	d112      	bne.n	800b07c <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b056:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b060:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	33f3      	adds	r3, #243	; 0xf3
 800b06e:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800b070:	f107 0310 	add.w	r3, r7, #16
 800b074:	4619      	mov	r1, r3
 800b076:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b078:	f001 ffa0 	bl	800cfbc <strcpy>

		}

		if (((option & 4) == 4) &&
 800b07c:	78fb      	ldrb	r3, [r7, #3]
 800b07e:	f003 0304 	and.w	r3, r3, #4
 800b082:	2b00      	cmp	r3, #0
 800b084:	d030      	beq.n	800b0e8 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800b086:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b08a:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d12a      	bne.n	800b0e8 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b092:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b09a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800b0a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0a4:	025b      	lsls	r3, r3, #9
 800b0a6:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b0ac:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800b0b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d011      	beq.n	800b0e0 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800b0bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b0be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0c0:	1ad3      	subs	r3, r2, r3
 800b0c2:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800b0c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b0c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b0ca:	fb02 f303 	mul.w	r3, r2, r3
 800b0ce:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800b0d0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800b0d4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800b0d8:	425b      	negs	r3, r3
 800b0da:	b29b      	uxth	r3, r3
 800b0dc:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800b0e0:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800b0e8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800b0ec:	78fb      	ldrb	r3, [r7, #3]
 800b0ee:	4313      	orrs	r3, r2
 800b0f0:	b2db      	uxtb	r3, r3
 800b0f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800b0f6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b100:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800b104:	4618      	mov	r0, r3
 800b106:	3760      	adds	r7, #96	; 0x60
 800b108:	46bd      	mov	sp, r7
 800b10a:	bd80      	pop	{r7, pc}

0800b10c <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800b10c:	b480      	push	{r7}
 800b10e:	b087      	sub	sp, #28
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
 800b114:	460b      	mov	r3, r1
 800b116:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800b118:	f240 6277 	movw	r2, #1655	; 0x677
 800b11c:	f04f 0300 	mov.w	r3, #0
 800b120:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800b124:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800b128:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800b12a:	78fb      	ldrb	r3, [r7, #3]
 800b12c:	68fa      	ldr	r2, [r7, #12]
 800b12e:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800b132:	693a      	ldr	r2, [r7, #16]
 800b134:	fb02 f303 	mul.w	r3, r2, r3
 800b138:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800b13a:	68bb      	ldr	r3, [r7, #8]
}
 800b13c:	4618      	mov	r0, r3
 800b13e:	371c      	adds	r7, #28
 800b140:	46bd      	mov	sp, r7
 800b142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b146:	4770      	bx	lr

0800b148 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800b148:	b480      	push	{r7}
 800b14a:	b087      	sub	sp, #28
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800b150:	2300      	movs	r3, #0
 800b152:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800b154:	2300      	movs	r3, #0
 800b156:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800b158:	2300      	movs	r3, #0
 800b15a:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d017      	beq.n	800b192 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	3b01      	subs	r3, #1
 800b166:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800b168:	e005      	b.n	800b176 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800b16a:	693b      	ldr	r3, [r7, #16]
 800b16c:	085b      	lsrs	r3, r3, #1
 800b16e:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800b170:	89fb      	ldrh	r3, [r7, #14]
 800b172:	3301      	adds	r3, #1
 800b174:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800b176:	693b      	ldr	r3, [r7, #16]
 800b178:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d1f4      	bne.n	800b16a <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800b180:	89fb      	ldrh	r3, [r7, #14]
 800b182:	021b      	lsls	r3, r3, #8
 800b184:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800b186:	693b      	ldr	r3, [r7, #16]
 800b188:	b29b      	uxth	r3, r3
 800b18a:	b2db      	uxtb	r3, r3
 800b18c:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800b18e:	4413      	add	r3, r2
 800b190:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800b192:	8afb      	ldrh	r3, [r7, #22]

}
 800b194:	4618      	mov	r0, r3
 800b196:	371c      	adds	r7, #28
 800b198:	46bd      	mov	sp, r7
 800b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19e:	4770      	bx	lr

0800b1a0 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800b1a0:	b480      	push	{r7}
 800b1a2:	b085      	sub	sp, #20
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800b1ae:	88fb      	ldrh	r3, [r7, #6]
 800b1b0:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800b1b2:	88fa      	ldrh	r2, [r7, #6]
 800b1b4:	0a12      	lsrs	r2, r2, #8
 800b1b6:	b292      	uxth	r2, r2
 800b1b8:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800b1ba:	3301      	adds	r3, #1
 800b1bc:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800b1be:	68fb      	ldr	r3, [r7, #12]
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	3714      	adds	r7, #20
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ca:	4770      	bx	lr

0800b1cc <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b088      	sub	sp, #32
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	60f8      	str	r0, [r7, #12]
 800b1d4:	60b9      	str	r1, [r7, #8]
 800b1d6:	4613      	mov	r3, r2
 800b1d8:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800b1de:	79fb      	ldrb	r3, [r7, #7]
 800b1e0:	4619      	mov	r1, r3
 800b1e2:	68f8      	ldr	r0, [r7, #12]
 800b1e4:	f7ff ff92 	bl	800b10c <VL53L0X_calc_macro_period_ps>
 800b1e8:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800b1ea:	69bb      	ldr	r3, [r7, #24]
 800b1ec:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b1f0:	4a0a      	ldr	r2, [pc, #40]	; (800b21c <VL53L0X_calc_timeout_mclks+0x50>)
 800b1f2:	fba2 2303 	umull	r2, r3, r2, r3
 800b1f6:	099b      	lsrs	r3, r3, #6
 800b1f8:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800b1fa:	68bb      	ldr	r3, [r7, #8]
 800b1fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b200:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800b204:	697b      	ldr	r3, [r7, #20]
 800b206:	085b      	lsrs	r3, r3, #1
 800b208:	441a      	add	r2, r3
	timeout_period_mclks =
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b210:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800b212:	69fb      	ldr	r3, [r7, #28]
}
 800b214:	4618      	mov	r0, r3
 800b216:	3720      	adds	r7, #32
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}
 800b21c:	10624dd3 	.word	0x10624dd3

0800b220 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b086      	sub	sp, #24
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
 800b228:	460b      	mov	r3, r1
 800b22a:	807b      	strh	r3, [r7, #2]
 800b22c:	4613      	mov	r3, r2
 800b22e:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800b230:	2300      	movs	r3, #0
 800b232:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800b234:	787b      	ldrb	r3, [r7, #1]
 800b236:	4619      	mov	r1, r3
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f7ff ff67 	bl	800b10c <VL53L0X_calc_macro_period_ps>
 800b23e:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800b240:	693b      	ldr	r3, [r7, #16]
 800b242:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b246:	4a0a      	ldr	r2, [pc, #40]	; (800b270 <VL53L0X_calc_timeout_us+0x50>)
 800b248:	fba2 2303 	umull	r2, r3, r2, r3
 800b24c:	099b      	lsrs	r3, r3, #6
 800b24e:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800b250:	887b      	ldrh	r3, [r7, #2]
 800b252:	68fa      	ldr	r2, [r7, #12]
 800b254:	fb02 f303 	mul.w	r3, r2, r3
 800b258:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800b25c:	4a04      	ldr	r2, [pc, #16]	; (800b270 <VL53L0X_calc_timeout_us+0x50>)
 800b25e:	fba2 2303 	umull	r2, r3, r2, r3
 800b262:	099b      	lsrs	r3, r3, #6
 800b264:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800b266:	697b      	ldr	r3, [r7, #20]
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3718      	adds	r7, #24
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}
 800b270:	10624dd3 	.word	0x10624dd3

0800b274 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b08c      	sub	sp, #48	; 0x30
 800b278:	af00      	add	r7, sp, #0
 800b27a:	60f8      	str	r0, [r7, #12]
 800b27c:	460b      	mov	r3, r1
 800b27e:	607a      	str	r2, [r7, #4]
 800b280:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b282:	2300      	movs	r3, #0
 800b284:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800b288:	2300      	movs	r3, #0
 800b28a:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800b28e:	2300      	movs	r3, #0
 800b290:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800b292:	2300      	movs	r3, #0
 800b294:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800b296:	2300      	movs	r3, #0
 800b298:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800b29a:	7afb      	ldrb	r3, [r7, #11]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d005      	beq.n	800b2ac <get_sequence_step_timeout+0x38>
 800b2a0:	7afb      	ldrb	r3, [r7, #11]
 800b2a2:	2b01      	cmp	r3, #1
 800b2a4:	d002      	beq.n	800b2ac <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800b2a6:	7afb      	ldrb	r3, [r7, #11]
 800b2a8:	2b02      	cmp	r3, #2
 800b2aa:	d128      	bne.n	800b2fe <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b2ac:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800b2b0:	461a      	mov	r2, r3
 800b2b2:	2100      	movs	r1, #0
 800b2b4:	68f8      	ldr	r0, [r7, #12]
 800b2b6:	f7fd fa7d 	bl	80087b4 <VL53L0X_GetVcselPulsePeriod>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800b2c0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d109      	bne.n	800b2dc <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800b2c8:	f107 0320 	add.w	r3, r7, #32
 800b2cc:	461a      	mov	r2, r3
 800b2ce:	2146      	movs	r1, #70	; 0x46
 800b2d0:	68f8      	ldr	r0, [r7, #12]
 800b2d2:	f001 fd8b 	bl	800cdec <VL53L0X_RdByte>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800b2dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b2e0:	b29b      	uxth	r3, r3
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f7ff ff5c 	bl	800b1a0 <VL53L0X_decode_timeout>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800b2ec:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b2f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b2f2:	4619      	mov	r1, r3
 800b2f4:	68f8      	ldr	r0, [r7, #12]
 800b2f6:	f7ff ff93 	bl	800b220 <VL53L0X_calc_timeout_us>
 800b2fa:	62b8      	str	r0, [r7, #40]	; 0x28
 800b2fc:	e092      	b.n	800b424 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800b2fe:	7afb      	ldrb	r3, [r7, #11]
 800b300:	2b03      	cmp	r3, #3
 800b302:	d135      	bne.n	800b370 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b304:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800b308:	461a      	mov	r2, r3
 800b30a:	2100      	movs	r1, #0
 800b30c:	68f8      	ldr	r0, [r7, #12]
 800b30e:	f7fd fa51 	bl	80087b4 <VL53L0X_GetVcselPulsePeriod>
 800b312:	4603      	mov	r3, r0
 800b314:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800b318:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	f040 8081 	bne.w	800b424 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b322:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800b326:	461a      	mov	r2, r3
 800b328:	2100      	movs	r1, #0
 800b32a:	68f8      	ldr	r0, [r7, #12]
 800b32c:	f7fd fa42 	bl	80087b4 <VL53L0X_GetVcselPulsePeriod>
 800b330:	4603      	mov	r3, r0
 800b332:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800b336:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d109      	bne.n	800b352 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800b33e:	f107 031e 	add.w	r3, r7, #30
 800b342:	461a      	mov	r2, r3
 800b344:	2151      	movs	r1, #81	; 0x51
 800b346:	68f8      	ldr	r0, [r7, #12]
 800b348:	f001 fd7a 	bl	800ce40 <VL53L0X_RdWord>
 800b34c:	4603      	mov	r3, r0
 800b34e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800b352:	8bfb      	ldrh	r3, [r7, #30]
 800b354:	4618      	mov	r0, r3
 800b356:	f7ff ff23 	bl	800b1a0 <VL53L0X_decode_timeout>
 800b35a:	4603      	mov	r3, r0
 800b35c:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800b35e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b362:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b364:	4619      	mov	r1, r3
 800b366:	68f8      	ldr	r0, [r7, #12]
 800b368:	f7ff ff5a 	bl	800b220 <VL53L0X_calc_timeout_us>
 800b36c:	62b8      	str	r0, [r7, #40]	; 0x28
 800b36e:	e059      	b.n	800b424 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800b370:	7afb      	ldrb	r3, [r7, #11]
 800b372:	2b04      	cmp	r3, #4
 800b374:	d156      	bne.n	800b424 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800b376:	f107 0314 	add.w	r3, r7, #20
 800b37a:	4619      	mov	r1, r3
 800b37c:	68f8      	ldr	r0, [r7, #12]
 800b37e:	f7fd fb25 	bl	80089cc <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800b382:	2300      	movs	r3, #0
 800b384:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800b386:	7dfb      	ldrb	r3, [r7, #23]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d01d      	beq.n	800b3c8 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b38c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800b390:	461a      	mov	r2, r3
 800b392:	2100      	movs	r1, #0
 800b394:	68f8      	ldr	r0, [r7, #12]
 800b396:	f7fd fa0d 	bl	80087b4 <VL53L0X_GetVcselPulsePeriod>
 800b39a:	4603      	mov	r3, r0
 800b39c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800b3a0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d10f      	bne.n	800b3c8 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800b3a8:	f107 031e 	add.w	r3, r7, #30
 800b3ac:	461a      	mov	r2, r3
 800b3ae:	2151      	movs	r1, #81	; 0x51
 800b3b0:	68f8      	ldr	r0, [r7, #12]
 800b3b2:	f001 fd45 	bl	800ce40 <VL53L0X_RdWord>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800b3bc:	8bfb      	ldrh	r3, [r7, #30]
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f7ff feee 	bl	800b1a0 <VL53L0X_decode_timeout>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800b3c8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d109      	bne.n	800b3e4 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b3d0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800b3d4:	461a      	mov	r2, r3
 800b3d6:	2101      	movs	r1, #1
 800b3d8:	68f8      	ldr	r0, [r7, #12]
 800b3da:	f7fd f9eb 	bl	80087b4 <VL53L0X_GetVcselPulsePeriod>
 800b3de:	4603      	mov	r3, r0
 800b3e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800b3e4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d10f      	bne.n	800b40c <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800b3ec:	f107 031c 	add.w	r3, r7, #28
 800b3f0:	461a      	mov	r2, r3
 800b3f2:	2171      	movs	r1, #113	; 0x71
 800b3f4:	68f8      	ldr	r0, [r7, #12]
 800b3f6:	f001 fd23 	bl	800ce40 <VL53L0X_RdWord>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800b400:	8bbb      	ldrh	r3, [r7, #28]
 800b402:	4618      	mov	r0, r3
 800b404:	f7ff fecc 	bl	800b1a0 <VL53L0X_decode_timeout>
 800b408:	4603      	mov	r3, r0
 800b40a:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800b40c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b40e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b410:	1ad3      	subs	r3, r2, r3
 800b412:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800b414:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b418:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b41a:	4619      	mov	r1, r3
 800b41c:	68f8      	ldr	r0, [r7, #12]
 800b41e:	f7ff feff 	bl	800b220 <VL53L0X_calc_timeout_us>
 800b422:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b428:	601a      	str	r2, [r3, #0]

	return Status;
 800b42a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b42e:	4618      	mov	r0, r3
 800b430:	3730      	adds	r7, #48	; 0x30
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}

0800b436 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800b436:	b580      	push	{r7, lr}
 800b438:	b08a      	sub	sp, #40	; 0x28
 800b43a:	af00      	add	r7, sp, #0
 800b43c:	60f8      	str	r0, [r7, #12]
 800b43e:	460b      	mov	r3, r1
 800b440:	607a      	str	r2, [r7, #4]
 800b442:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b444:	2300      	movs	r3, #0
 800b446:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800b44a:	7afb      	ldrb	r3, [r7, #11]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d005      	beq.n	800b45c <set_sequence_step_timeout+0x26>
 800b450:	7afb      	ldrb	r3, [r7, #11]
 800b452:	2b01      	cmp	r3, #1
 800b454:	d002      	beq.n	800b45c <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800b456:	7afb      	ldrb	r3, [r7, #11]
 800b458:	2b02      	cmp	r3, #2
 800b45a:	d138      	bne.n	800b4ce <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b45c:	f107 031b 	add.w	r3, r7, #27
 800b460:	461a      	mov	r2, r3
 800b462:	2100      	movs	r1, #0
 800b464:	68f8      	ldr	r0, [r7, #12]
 800b466:	f7fd f9a5 	bl	80087b4 <VL53L0X_GetVcselPulsePeriod>
 800b46a:	4603      	mov	r3, r0
 800b46c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800b470:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b474:	2b00      	cmp	r3, #0
 800b476:	d11a      	bne.n	800b4ae <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800b478:	7efb      	ldrb	r3, [r7, #27]
 800b47a:	461a      	mov	r2, r3
 800b47c:	6879      	ldr	r1, [r7, #4]
 800b47e:	68f8      	ldr	r0, [r7, #12]
 800b480:	f7ff fea4 	bl	800b1cc <VL53L0X_calc_timeout_mclks>
 800b484:	4603      	mov	r3, r0
 800b486:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800b488:	8bbb      	ldrh	r3, [r7, #28]
 800b48a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b48e:	d903      	bls.n	800b498 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800b490:	23ff      	movs	r3, #255	; 0xff
 800b492:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b496:	e004      	b.n	800b4a2 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800b498:	8bbb      	ldrh	r3, [r7, #28]
 800b49a:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800b49c:	3b01      	subs	r3, #1
 800b49e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b4a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b4a6:	b29a      	uxth	r2, r3
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800b4ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	f040 80ab 	bne.w	800b60e <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800b4b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b4bc:	461a      	mov	r2, r3
 800b4be:	2146      	movs	r1, #70	; 0x46
 800b4c0:	68f8      	ldr	r0, [r7, #12]
 800b4c2:	f001 fc11 	bl	800cce8 <VL53L0X_WrByte>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800b4cc:	e09f      	b.n	800b60e <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800b4ce:	7afb      	ldrb	r3, [r7, #11]
 800b4d0:	2b03      	cmp	r3, #3
 800b4d2:	d135      	bne.n	800b540 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800b4d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d11b      	bne.n	800b514 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b4dc:	f107 031b 	add.w	r3, r7, #27
 800b4e0:	461a      	mov	r2, r3
 800b4e2:	2100      	movs	r1, #0
 800b4e4:	68f8      	ldr	r0, [r7, #12]
 800b4e6:	f7fd f965 	bl	80087b4 <VL53L0X_GetVcselPulsePeriod>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800b4f0:	7efb      	ldrb	r3, [r7, #27]
 800b4f2:	461a      	mov	r2, r3
 800b4f4:	6879      	ldr	r1, [r7, #4]
 800b4f6:	68f8      	ldr	r0, [r7, #12]
 800b4f8:	f7ff fe68 	bl	800b1cc <VL53L0X_calc_timeout_mclks>
 800b4fc:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800b4fe:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800b500:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b502:	4618      	mov	r0, r3
 800b504:	f7ff fe20 	bl	800b148 <VL53L0X_encode_timeout>
 800b508:	4603      	mov	r3, r0
 800b50a:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b50c:	8b3a      	ldrh	r2, [r7, #24]
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800b514:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d108      	bne.n	800b52e <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800b51c:	8b3b      	ldrh	r3, [r7, #24]
 800b51e:	461a      	mov	r2, r3
 800b520:	2151      	movs	r1, #81	; 0x51
 800b522:	68f8      	ldr	r0, [r7, #12]
 800b524:	f001 fc04 	bl	800cd30 <VL53L0X_WrWord>
 800b528:	4603      	mov	r3, r0
 800b52a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800b52e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b532:	2b00      	cmp	r3, #0
 800b534:	d16b      	bne.n	800b60e <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	687a      	ldr	r2, [r7, #4]
 800b53a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800b53e:	e066      	b.n	800b60e <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800b540:	7afb      	ldrb	r3, [r7, #11]
 800b542:	2b04      	cmp	r3, #4
 800b544:	d160      	bne.n	800b608 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800b546:	f107 0310 	add.w	r3, r7, #16
 800b54a:	4619      	mov	r1, r3
 800b54c:	68f8      	ldr	r0, [r7, #12]
 800b54e:	f7fd fa3d 	bl	80089cc <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800b552:	2300      	movs	r3, #0
 800b554:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800b556:	7cfb      	ldrb	r3, [r7, #19]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d01d      	beq.n	800b598 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b55c:	f107 031b 	add.w	r3, r7, #27
 800b560:	461a      	mov	r2, r3
 800b562:	2100      	movs	r1, #0
 800b564:	68f8      	ldr	r0, [r7, #12]
 800b566:	f7fd f925 	bl	80087b4 <VL53L0X_GetVcselPulsePeriod>
 800b56a:	4603      	mov	r3, r0
 800b56c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800b570:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b574:	2b00      	cmp	r3, #0
 800b576:	d10f      	bne.n	800b598 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800b578:	f107 0318 	add.w	r3, r7, #24
 800b57c:	461a      	mov	r2, r3
 800b57e:	2151      	movs	r1, #81	; 0x51
 800b580:	68f8      	ldr	r0, [r7, #12]
 800b582:	f001 fc5d 	bl	800ce40 <VL53L0X_RdWord>
 800b586:	4603      	mov	r3, r0
 800b588:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800b58c:	8b3b      	ldrh	r3, [r7, #24]
 800b58e:	4618      	mov	r0, r3
 800b590:	f7ff fe06 	bl	800b1a0 <VL53L0X_decode_timeout>
 800b594:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800b596:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800b598:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d109      	bne.n	800b5b4 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b5a0:	f107 031b 	add.w	r3, r7, #27
 800b5a4:	461a      	mov	r2, r3
 800b5a6:	2101      	movs	r1, #1
 800b5a8:	68f8      	ldr	r0, [r7, #12]
 800b5aa:	f7fd f903 	bl	80087b4 <VL53L0X_GetVcselPulsePeriod>
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800b5b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d128      	bne.n	800b60e <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800b5bc:	7efb      	ldrb	r3, [r7, #27]
 800b5be:	461a      	mov	r2, r3
 800b5c0:	6879      	ldr	r1, [r7, #4]
 800b5c2:	68f8      	ldr	r0, [r7, #12]
 800b5c4:	f7ff fe02 	bl	800b1cc <VL53L0X_calc_timeout_mclks>
 800b5c8:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800b5ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b5cc:	6a3a      	ldr	r2, [r7, #32]
 800b5ce:	4413      	add	r3, r2
 800b5d0:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800b5d2:	6a38      	ldr	r0, [r7, #32]
 800b5d4:	f7ff fdb8 	bl	800b148 <VL53L0X_encode_timeout>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800b5dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d108      	bne.n	800b5f6 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800b5e4:	8bfb      	ldrh	r3, [r7, #30]
 800b5e6:	461a      	mov	r2, r3
 800b5e8:	2171      	movs	r1, #113	; 0x71
 800b5ea:	68f8      	ldr	r0, [r7, #12]
 800b5ec:	f001 fba0 	bl	800cd30 <VL53L0X_WrWord>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800b5f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d107      	bne.n	800b60e <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	687a      	ldr	r2, [r7, #4]
 800b602:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800b606:	e002      	b.n	800b60e <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b608:	23fc      	movs	r3, #252	; 0xfc
 800b60a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800b60e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800b612:	4618      	mov	r0, r3
 800b614:	3728      	adds	r7, #40	; 0x28
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}

0800b61a <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800b61a:	b580      	push	{r7, lr}
 800b61c:	b08a      	sub	sp, #40	; 0x28
 800b61e:	af00      	add	r7, sp, #0
 800b620:	6078      	str	r0, [r7, #4]
 800b622:	460b      	mov	r3, r1
 800b624:	70fb      	strb	r3, [r7, #3]
 800b626:	4613      	mov	r3, r2
 800b628:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b62a:	2300      	movs	r3, #0
 800b62c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800b630:	230c      	movs	r3, #12
 800b632:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800b636:	2312      	movs	r3, #18
 800b638:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800b63c:	2308      	movs	r3, #8
 800b63e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800b642:	230e      	movs	r3, #14
 800b644:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800b648:	2300      	movs	r3, #0
 800b64a:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800b64c:	78bb      	ldrb	r3, [r7, #2]
 800b64e:	f003 0301 	and.w	r3, r3, #1
 800b652:	b2db      	uxtb	r3, r3
 800b654:	2b00      	cmp	r3, #0
 800b656:	d003      	beq.n	800b660 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b658:	23fc      	movs	r3, #252	; 0xfc
 800b65a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b65e:	e020      	b.n	800b6a2 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800b660:	78fb      	ldrb	r3, [r7, #3]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d10d      	bne.n	800b682 <VL53L0X_set_vcsel_pulse_period+0x68>
 800b666:	78ba      	ldrb	r2, [r7, #2]
 800b668:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b66c:	429a      	cmp	r2, r3
 800b66e:	d304      	bcc.n	800b67a <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800b670:	78ba      	ldrb	r2, [r7, #2]
 800b672:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b676:	429a      	cmp	r2, r3
 800b678:	d903      	bls.n	800b682 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b67a:	23fc      	movs	r3, #252	; 0xfc
 800b67c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b680:	e00f      	b.n	800b6a2 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800b682:	78fb      	ldrb	r3, [r7, #3]
 800b684:	2b01      	cmp	r3, #1
 800b686:	d10c      	bne.n	800b6a2 <VL53L0X_set_vcsel_pulse_period+0x88>
 800b688:	78ba      	ldrb	r2, [r7, #2]
 800b68a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b68e:	429a      	cmp	r2, r3
 800b690:	d304      	bcc.n	800b69c <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800b692:	78ba      	ldrb	r2, [r7, #2]
 800b694:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b698:	429a      	cmp	r2, r3
 800b69a:	d902      	bls.n	800b6a2 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b69c:	23fc      	movs	r3, #252	; 0xfc
 800b69e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800b6a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d002      	beq.n	800b6b0 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800b6aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b6ae:	e239      	b.n	800bb24 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800b6b0:	78fb      	ldrb	r3, [r7, #3]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d150      	bne.n	800b758 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800b6b6:	78bb      	ldrb	r3, [r7, #2]
 800b6b8:	2b0c      	cmp	r3, #12
 800b6ba:	d110      	bne.n	800b6de <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800b6bc:	2218      	movs	r2, #24
 800b6be:	2157      	movs	r1, #87	; 0x57
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f001 fb11 	bl	800cce8 <VL53L0X_WrByte>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800b6cc:	2208      	movs	r2, #8
 800b6ce:	2156      	movs	r1, #86	; 0x56
 800b6d0:	6878      	ldr	r0, [r7, #4]
 800b6d2:	f001 fb09 	bl	800cce8 <VL53L0X_WrByte>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b6dc:	e17f      	b.n	800b9de <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800b6de:	78bb      	ldrb	r3, [r7, #2]
 800b6e0:	2b0e      	cmp	r3, #14
 800b6e2:	d110      	bne.n	800b706 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800b6e4:	2230      	movs	r2, #48	; 0x30
 800b6e6:	2157      	movs	r1, #87	; 0x57
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	f001 fafd 	bl	800cce8 <VL53L0X_WrByte>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800b6f4:	2208      	movs	r2, #8
 800b6f6:	2156      	movs	r1, #86	; 0x56
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	f001 faf5 	bl	800cce8 <VL53L0X_WrByte>
 800b6fe:	4603      	mov	r3, r0
 800b700:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b704:	e16b      	b.n	800b9de <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800b706:	78bb      	ldrb	r3, [r7, #2]
 800b708:	2b10      	cmp	r3, #16
 800b70a:	d110      	bne.n	800b72e <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800b70c:	2240      	movs	r2, #64	; 0x40
 800b70e:	2157      	movs	r1, #87	; 0x57
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	f001 fae9 	bl	800cce8 <VL53L0X_WrByte>
 800b716:	4603      	mov	r3, r0
 800b718:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800b71c:	2208      	movs	r2, #8
 800b71e:	2156      	movs	r1, #86	; 0x56
 800b720:	6878      	ldr	r0, [r7, #4]
 800b722:	f001 fae1 	bl	800cce8 <VL53L0X_WrByte>
 800b726:	4603      	mov	r3, r0
 800b728:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b72c:	e157      	b.n	800b9de <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800b72e:	78bb      	ldrb	r3, [r7, #2]
 800b730:	2b12      	cmp	r3, #18
 800b732:	f040 8154 	bne.w	800b9de <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800b736:	2250      	movs	r2, #80	; 0x50
 800b738:	2157      	movs	r1, #87	; 0x57
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f001 fad4 	bl	800cce8 <VL53L0X_WrByte>
 800b740:	4603      	mov	r3, r0
 800b742:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800b746:	2208      	movs	r2, #8
 800b748:	2156      	movs	r1, #86	; 0x56
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f001 facc 	bl	800cce8 <VL53L0X_WrByte>
 800b750:	4603      	mov	r3, r0
 800b752:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b756:	e142      	b.n	800b9de <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800b758:	78fb      	ldrb	r3, [r7, #3]
 800b75a:	2b01      	cmp	r3, #1
 800b75c:	f040 813f 	bne.w	800b9de <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800b760:	78bb      	ldrb	r3, [r7, #2]
 800b762:	2b08      	cmp	r3, #8
 800b764:	d14c      	bne.n	800b800 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800b766:	2210      	movs	r2, #16
 800b768:	2148      	movs	r1, #72	; 0x48
 800b76a:	6878      	ldr	r0, [r7, #4]
 800b76c:	f001 fabc 	bl	800cce8 <VL53L0X_WrByte>
 800b770:	4603      	mov	r3, r0
 800b772:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800b776:	2208      	movs	r2, #8
 800b778:	2147      	movs	r1, #71	; 0x47
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f001 fab4 	bl	800cce8 <VL53L0X_WrByte>
 800b780:	4603      	mov	r3, r0
 800b782:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800b786:	2202      	movs	r2, #2
 800b788:	2132      	movs	r1, #50	; 0x32
 800b78a:	6878      	ldr	r0, [r7, #4]
 800b78c:	f001 faac 	bl	800cce8 <VL53L0X_WrByte>
 800b790:	4603      	mov	r3, r0
 800b792:	461a      	mov	r2, r3
 800b794:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b798:	4313      	orrs	r3, r2
 800b79a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800b79e:	220c      	movs	r2, #12
 800b7a0:	2130      	movs	r1, #48	; 0x30
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f001 faa0 	bl	800cce8 <VL53L0X_WrByte>
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	461a      	mov	r2, r3
 800b7ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7b0:	4313      	orrs	r3, r2
 800b7b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800b7b6:	2201      	movs	r2, #1
 800b7b8:	21ff      	movs	r1, #255	; 0xff
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f001 fa94 	bl	800cce8 <VL53L0X_WrByte>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	461a      	mov	r2, r3
 800b7c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7c8:	4313      	orrs	r3, r2
 800b7ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800b7ce:	2230      	movs	r2, #48	; 0x30
 800b7d0:	2130      	movs	r1, #48	; 0x30
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f001 fa88 	bl	800cce8 <VL53L0X_WrByte>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	461a      	mov	r2, r3
 800b7dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7e0:	4313      	orrs	r3, r2
 800b7e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	21ff      	movs	r1, #255	; 0xff
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	f001 fa7c 	bl	800cce8 <VL53L0X_WrByte>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	461a      	mov	r2, r3
 800b7f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7f8:	4313      	orrs	r3, r2
 800b7fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b7fe:	e0ee      	b.n	800b9de <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800b800:	78bb      	ldrb	r3, [r7, #2]
 800b802:	2b0a      	cmp	r3, #10
 800b804:	d14c      	bne.n	800b8a0 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800b806:	2228      	movs	r2, #40	; 0x28
 800b808:	2148      	movs	r1, #72	; 0x48
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	f001 fa6c 	bl	800cce8 <VL53L0X_WrByte>
 800b810:	4603      	mov	r3, r0
 800b812:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800b816:	2208      	movs	r2, #8
 800b818:	2147      	movs	r1, #71	; 0x47
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	f001 fa64 	bl	800cce8 <VL53L0X_WrByte>
 800b820:	4603      	mov	r3, r0
 800b822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800b826:	2203      	movs	r2, #3
 800b828:	2132      	movs	r1, #50	; 0x32
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f001 fa5c 	bl	800cce8 <VL53L0X_WrByte>
 800b830:	4603      	mov	r3, r0
 800b832:	461a      	mov	r2, r3
 800b834:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b838:	4313      	orrs	r3, r2
 800b83a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800b83e:	2209      	movs	r2, #9
 800b840:	2130      	movs	r1, #48	; 0x30
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f001 fa50 	bl	800cce8 <VL53L0X_WrByte>
 800b848:	4603      	mov	r3, r0
 800b84a:	461a      	mov	r2, r3
 800b84c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b850:	4313      	orrs	r3, r2
 800b852:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800b856:	2201      	movs	r2, #1
 800b858:	21ff      	movs	r1, #255	; 0xff
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f001 fa44 	bl	800cce8 <VL53L0X_WrByte>
 800b860:	4603      	mov	r3, r0
 800b862:	461a      	mov	r2, r3
 800b864:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b868:	4313      	orrs	r3, r2
 800b86a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800b86e:	2220      	movs	r2, #32
 800b870:	2130      	movs	r1, #48	; 0x30
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f001 fa38 	bl	800cce8 <VL53L0X_WrByte>
 800b878:	4603      	mov	r3, r0
 800b87a:	461a      	mov	r2, r3
 800b87c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b880:	4313      	orrs	r3, r2
 800b882:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800b886:	2200      	movs	r2, #0
 800b888:	21ff      	movs	r1, #255	; 0xff
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	f001 fa2c 	bl	800cce8 <VL53L0X_WrByte>
 800b890:	4603      	mov	r3, r0
 800b892:	461a      	mov	r2, r3
 800b894:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b898:	4313      	orrs	r3, r2
 800b89a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b89e:	e09e      	b.n	800b9de <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800b8a0:	78bb      	ldrb	r3, [r7, #2]
 800b8a2:	2b0c      	cmp	r3, #12
 800b8a4:	d14c      	bne.n	800b940 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800b8a6:	2238      	movs	r2, #56	; 0x38
 800b8a8:	2148      	movs	r1, #72	; 0x48
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f001 fa1c 	bl	800cce8 <VL53L0X_WrByte>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800b8b6:	2208      	movs	r2, #8
 800b8b8:	2147      	movs	r1, #71	; 0x47
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f001 fa14 	bl	800cce8 <VL53L0X_WrByte>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800b8c6:	2203      	movs	r2, #3
 800b8c8:	2132      	movs	r1, #50	; 0x32
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f001 fa0c 	bl	800cce8 <VL53L0X_WrByte>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	461a      	mov	r2, r3
 800b8d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8d8:	4313      	orrs	r3, r2
 800b8da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800b8de:	2208      	movs	r2, #8
 800b8e0:	2130      	movs	r1, #48	; 0x30
 800b8e2:	6878      	ldr	r0, [r7, #4]
 800b8e4:	f001 fa00 	bl	800cce8 <VL53L0X_WrByte>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	461a      	mov	r2, r3
 800b8ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8f0:	4313      	orrs	r3, r2
 800b8f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800b8f6:	2201      	movs	r2, #1
 800b8f8:	21ff      	movs	r1, #255	; 0xff
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	f001 f9f4 	bl	800cce8 <VL53L0X_WrByte>
 800b900:	4603      	mov	r3, r0
 800b902:	461a      	mov	r2, r3
 800b904:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b908:	4313      	orrs	r3, r2
 800b90a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800b90e:	2220      	movs	r2, #32
 800b910:	2130      	movs	r1, #48	; 0x30
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f001 f9e8 	bl	800cce8 <VL53L0X_WrByte>
 800b918:	4603      	mov	r3, r0
 800b91a:	461a      	mov	r2, r3
 800b91c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b920:	4313      	orrs	r3, r2
 800b922:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800b926:	2200      	movs	r2, #0
 800b928:	21ff      	movs	r1, #255	; 0xff
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f001 f9dc 	bl	800cce8 <VL53L0X_WrByte>
 800b930:	4603      	mov	r3, r0
 800b932:	461a      	mov	r2, r3
 800b934:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b938:	4313      	orrs	r3, r2
 800b93a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b93e:	e04e      	b.n	800b9de <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800b940:	78bb      	ldrb	r3, [r7, #2]
 800b942:	2b0e      	cmp	r3, #14
 800b944:	d14b      	bne.n	800b9de <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800b946:	2248      	movs	r2, #72	; 0x48
 800b948:	2148      	movs	r1, #72	; 0x48
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	f001 f9cc 	bl	800cce8 <VL53L0X_WrByte>
 800b950:	4603      	mov	r3, r0
 800b952:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800b956:	2208      	movs	r2, #8
 800b958:	2147      	movs	r1, #71	; 0x47
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	f001 f9c4 	bl	800cce8 <VL53L0X_WrByte>
 800b960:	4603      	mov	r3, r0
 800b962:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800b966:	2203      	movs	r2, #3
 800b968:	2132      	movs	r1, #50	; 0x32
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f001 f9bc 	bl	800cce8 <VL53L0X_WrByte>
 800b970:	4603      	mov	r3, r0
 800b972:	461a      	mov	r2, r3
 800b974:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b978:	4313      	orrs	r3, r2
 800b97a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800b97e:	2207      	movs	r2, #7
 800b980:	2130      	movs	r1, #48	; 0x30
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f001 f9b0 	bl	800cce8 <VL53L0X_WrByte>
 800b988:	4603      	mov	r3, r0
 800b98a:	461a      	mov	r2, r3
 800b98c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b990:	4313      	orrs	r3, r2
 800b992:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800b996:	2201      	movs	r2, #1
 800b998:	21ff      	movs	r1, #255	; 0xff
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f001 f9a4 	bl	800cce8 <VL53L0X_WrByte>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	461a      	mov	r2, r3
 800b9a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9a8:	4313      	orrs	r3, r2
 800b9aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800b9ae:	2220      	movs	r2, #32
 800b9b0:	2130      	movs	r1, #48	; 0x30
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f001 f998 	bl	800cce8 <VL53L0X_WrByte>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	461a      	mov	r2, r3
 800b9bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9c0:	4313      	orrs	r3, r2
 800b9c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	21ff      	movs	r1, #255	; 0xff
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f001 f98c 	bl	800cce8 <VL53L0X_WrByte>
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	461a      	mov	r2, r3
 800b9d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9d8:	4313      	orrs	r3, r2
 800b9da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800b9de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d17f      	bne.n	800bae6 <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800b9e6:	78bb      	ldrb	r3, [r7, #2]
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f7fe fe38 	bl	800a65e <VL53L0X_encode_vcsel_period>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800b9f4:	78fb      	ldrb	r3, [r7, #3]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d002      	beq.n	800ba00 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800b9fa:	2b01      	cmp	r3, #1
 800b9fc:	d045      	beq.n	800ba8a <VL53L0X_set_vcsel_pulse_period+0x470>
 800b9fe:	e06e      	b.n	800bade <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800ba00:	f107 0314 	add.w	r3, r7, #20
 800ba04:	461a      	mov	r2, r3
 800ba06:	2103      	movs	r1, #3
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	f7ff fc33 	bl	800b274 <get_sequence_step_timeout>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800ba14:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d109      	bne.n	800ba30 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800ba1c:	f107 0310 	add.w	r3, r7, #16
 800ba20:	461a      	mov	r2, r3
 800ba22:	2102      	movs	r1, #2
 800ba24:	6878      	ldr	r0, [r7, #4]
 800ba26:	f7ff fc25 	bl	800b274 <get_sequence_step_timeout>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800ba30:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d109      	bne.n	800ba4c <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800ba38:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ba3c:	461a      	mov	r2, r3
 800ba3e:	2150      	movs	r1, #80	; 0x50
 800ba40:	6878      	ldr	r0, [r7, #4]
 800ba42:	f001 f951 	bl	800cce8 <VL53L0X_WrByte>
 800ba46:	4603      	mov	r3, r0
 800ba48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800ba4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d108      	bne.n	800ba66 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800ba54:	697b      	ldr	r3, [r7, #20]
 800ba56:	461a      	mov	r2, r3
 800ba58:	2103      	movs	r1, #3
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	f7ff fceb 	bl	800b436 <set_sequence_step_timeout>
 800ba60:	4603      	mov	r3, r0
 800ba62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800ba66:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d108      	bne.n	800ba80 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800ba6e:	693b      	ldr	r3, [r7, #16]
 800ba70:	461a      	mov	r2, r3
 800ba72:	2102      	movs	r1, #2
 800ba74:	6878      	ldr	r0, [r7, #4]
 800ba76:	f7ff fcde 	bl	800b436 <set_sequence_step_timeout>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	78ba      	ldrb	r2, [r7, #2]
 800ba84:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800ba88:	e02e      	b.n	800bae8 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800ba8a:	f107 0318 	add.w	r3, r7, #24
 800ba8e:	461a      	mov	r2, r3
 800ba90:	2104      	movs	r1, #4
 800ba92:	6878      	ldr	r0, [r7, #4]
 800ba94:	f7ff fbee 	bl	800b274 <get_sequence_step_timeout>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800ba9e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d109      	bne.n	800baba <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800baa6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800baaa:	461a      	mov	r2, r3
 800baac:	2170      	movs	r1, #112	; 0x70
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	f001 f91a 	bl	800cce8 <VL53L0X_WrByte>
 800bab4:	4603      	mov	r3, r0
 800bab6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800baba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d108      	bne.n	800bad4 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800bac2:	69bb      	ldr	r3, [r7, #24]
 800bac4:	461a      	mov	r2, r3
 800bac6:	2104      	movs	r1, #4
 800bac8:	6878      	ldr	r0, [r7, #4]
 800baca:	f7ff fcb4 	bl	800b436 <set_sequence_step_timeout>
 800bace:	4603      	mov	r3, r0
 800bad0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	78ba      	ldrb	r2, [r7, #2]
 800bad8:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800badc:	e004      	b.n	800bae8 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bade:	23fc      	movs	r3, #252	; 0xfc
 800bae0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bae4:	e000      	b.n	800bae8 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 800bae6:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800bae8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800baec:	2b00      	cmp	r3, #0
 800baee:	d109      	bne.n	800bb04 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	695b      	ldr	r3, [r3, #20]
 800baf4:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800baf6:	69f9      	ldr	r1, [r7, #28]
 800baf8:	6878      	ldr	r0, [r7, #4]
 800bafa:	f7fc fe1d 	bl	8008738 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800bafe:	4603      	mov	r3, r0
 800bb00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800bb04:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d109      	bne.n	800bb20 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 800bb0c:	f107 010f 	add.w	r1, r7, #15
 800bb10:	2301      	movs	r3, #1
 800bb12:	2200      	movs	r2, #0
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	f7fe fcbd 	bl	800a494 <VL53L0X_perform_phase_calibration>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800bb20:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800bb24:	4618      	mov	r0, r3
 800bb26:	3728      	adds	r7, #40	; 0x28
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bd80      	pop	{r7, pc}

0800bb2c <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b086      	sub	sp, #24
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	60f8      	str	r0, [r7, #12]
 800bb34:	460b      	mov	r3, r1
 800bb36:	607a      	str	r2, [r7, #4]
 800bb38:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800bb3e:	7afb      	ldrb	r3, [r7, #11]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d002      	beq.n	800bb4a <VL53L0X_get_vcsel_pulse_period+0x1e>
 800bb44:	2b01      	cmp	r3, #1
 800bb46:	d00a      	beq.n	800bb5e <VL53L0X_get_vcsel_pulse_period+0x32>
 800bb48:	e013      	b.n	800bb72 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800bb4a:	f107 0316 	add.w	r3, r7, #22
 800bb4e:	461a      	mov	r2, r3
 800bb50:	2150      	movs	r1, #80	; 0x50
 800bb52:	68f8      	ldr	r0, [r7, #12]
 800bb54:	f001 f94a 	bl	800cdec <VL53L0X_RdByte>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800bb5c:	e00b      	b.n	800bb76 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800bb5e:	f107 0316 	add.w	r3, r7, #22
 800bb62:	461a      	mov	r2, r3
 800bb64:	2170      	movs	r1, #112	; 0x70
 800bb66:	68f8      	ldr	r0, [r7, #12]
 800bb68:	f001 f940 	bl	800cdec <VL53L0X_RdByte>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800bb70:	e001      	b.n	800bb76 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bb72:	23fc      	movs	r3, #252	; 0xfc
 800bb74:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800bb76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d107      	bne.n	800bb8e <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800bb7e:	7dbb      	ldrb	r3, [r7, #22]
 800bb80:	4618      	mov	r0, r3
 800bb82:	f7fe fd59 	bl	800a638 <VL53L0X_decode_vcsel_period>
 800bb86:	4603      	mov	r3, r0
 800bb88:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	701a      	strb	r2, [r3, #0]

	return Status;
 800bb8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bb92:	4618      	mov	r0, r3
 800bb94:	3718      	adds	r7, #24
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}

0800bb9a <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800bb9a:	b580      	push	{r7, lr}
 800bb9c:	b092      	sub	sp, #72	; 0x48
 800bb9e:	af00      	add	r7, sp, #0
 800bba0:	6078      	str	r0, [r7, #4]
 800bba2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bba4:	2300      	movs	r3, #0
 800bba6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800bbaa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800bbae:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800bbb0:	f240 7376 	movw	r3, #1910	; 0x776
 800bbb4:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800bbb6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800bbba:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800bbbc:	f44f 7325 	mov.w	r3, #660	; 0x294
 800bbc0:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800bbc2:	f240 234e 	movw	r3, #590	; 0x24e
 800bbc6:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800bbc8:	f240 23b2 	movw	r3, #690	; 0x2b2
 800bbcc:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800bbce:	f44f 7325 	mov.w	r3, #660	; 0x294
 800bbd2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800bbd4:	f240 2326 	movw	r3, #550	; 0x226
 800bbd8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800bbda:	2300      	movs	r3, #0
 800bbdc:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800bbde:	f644 6320 	movw	r3, #20000	; 0x4e20
 800bbe2:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800bbe8:	683a      	ldr	r2, [r7, #0]
 800bbea:	6a3b      	ldr	r3, [r7, #32]
 800bbec:	429a      	cmp	r2, r3
 800bbee:	d205      	bcs.n	800bbfc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bbf0:	23fc      	movs	r3, #252	; 0xfc
 800bbf2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800bbf6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800bbfa:	e0aa      	b.n	800bd52 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800bbfc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bbfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc00:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800bc02:	683a      	ldr	r2, [r7, #0]
 800bc04:	1ad3      	subs	r3, r2, r3
 800bc06:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800bc08:	f107 0314 	add.w	r3, r7, #20
 800bc0c:	4619      	mov	r1, r3
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f7fc fedc 	bl	80089cc <VL53L0X_GetSequenceStepEnables>
 800bc14:	4603      	mov	r3, r0
 800bc16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800bc1a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d15b      	bne.n	800bcda <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800bc22:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d105      	bne.n	800bc34 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800bc28:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d102      	bne.n	800bc34 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800bc2e:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d052      	beq.n	800bcda <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800bc34:	f107 0310 	add.w	r3, r7, #16
 800bc38:	461a      	mov	r2, r3
 800bc3a:	2102      	movs	r1, #2
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f7ff fb19 	bl	800b274 <get_sequence_step_timeout>
 800bc42:	4603      	mov	r3, r0
 800bc44:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800bc48:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d002      	beq.n	800bc56 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800bc50:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800bc54:	e07d      	b.n	800bd52 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800bc56:	7d3b      	ldrb	r3, [r7, #20]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d00f      	beq.n	800bc7c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800bc5c:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800bc5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc60:	4413      	add	r3, r2
 800bc62:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800bc64:	69fa      	ldr	r2, [r7, #28]
 800bc66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc68:	429a      	cmp	r2, r3
 800bc6a:	d204      	bcs.n	800bc76 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800bc6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bc6e:	69fb      	ldr	r3, [r7, #28]
 800bc70:	1ad3      	subs	r3, r2, r3
 800bc72:	643b      	str	r3, [r7, #64]	; 0x40
 800bc74:	e002      	b.n	800bc7c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bc76:	23fc      	movs	r3, #252	; 0xfc
 800bc78:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800bc7c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d002      	beq.n	800bc8a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800bc84:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800bc88:	e063      	b.n	800bd52 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800bc8a:	7dbb      	ldrb	r3, [r7, #22]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d011      	beq.n	800bcb4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800bc90:	693a      	ldr	r2, [r7, #16]
 800bc92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc94:	4413      	add	r3, r2
 800bc96:	005b      	lsls	r3, r3, #1
 800bc98:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800bc9a:	69fa      	ldr	r2, [r7, #28]
 800bc9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc9e:	429a      	cmp	r2, r3
 800bca0:	d204      	bcs.n	800bcac <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800bca2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bca4:	69fb      	ldr	r3, [r7, #28]
 800bca6:	1ad3      	subs	r3, r2, r3
 800bca8:	643b      	str	r3, [r7, #64]	; 0x40
 800bcaa:	e016      	b.n	800bcda <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bcac:	23fc      	movs	r3, #252	; 0xfc
 800bcae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800bcb2:	e012      	b.n	800bcda <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800bcb4:	7d7b      	ldrb	r3, [r7, #21]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d00f      	beq.n	800bcda <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800bcba:	693b      	ldr	r3, [r7, #16]
 800bcbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bcbe:	4413      	add	r3, r2
 800bcc0:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800bcc2:	69fa      	ldr	r2, [r7, #28]
 800bcc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcc6:	429a      	cmp	r2, r3
 800bcc8:	d204      	bcs.n	800bcd4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800bcca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bccc:	69fb      	ldr	r3, [r7, #28]
 800bcce:	1ad3      	subs	r3, r2, r3
 800bcd0:	643b      	str	r3, [r7, #64]	; 0x40
 800bcd2:	e002      	b.n	800bcda <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bcd4:	23fc      	movs	r3, #252	; 0xfc
 800bcd6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800bcda:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d002      	beq.n	800bce8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800bce2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800bce6:	e034      	b.n	800bd52 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800bce8:	7dfb      	ldrb	r3, [r7, #23]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d019      	beq.n	800bd22 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800bcee:	f107 030c 	add.w	r3, r7, #12
 800bcf2:	461a      	mov	r2, r3
 800bcf4:	2103      	movs	r1, #3
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f7ff fabc 	bl	800b274 <get_sequence_step_timeout>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd06:	4413      	add	r3, r2
 800bd08:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800bd0a:	69fa      	ldr	r2, [r7, #28]
 800bd0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd0e:	429a      	cmp	r2, r3
 800bd10:	d204      	bcs.n	800bd1c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800bd12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bd14:	69fb      	ldr	r3, [r7, #28]
 800bd16:	1ad3      	subs	r3, r2, r3
 800bd18:	643b      	str	r3, [r7, #64]	; 0x40
 800bd1a:	e002      	b.n	800bd22 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bd1c:	23fc      	movs	r3, #252	; 0xfc
 800bd1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800bd22:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d111      	bne.n	800bd4e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800bd2a:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d00e      	beq.n	800bd4e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800bd30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bd32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd34:	1ad3      	subs	r3, r2, r3
 800bd36:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800bd38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bd3a:	2104      	movs	r1, #4
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	f7ff fb7a 	bl	800b436 <set_sequence_step_timeout>
 800bd42:	4603      	mov	r3, r0
 800bd44:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	683a      	ldr	r2, [r7, #0]
 800bd4c:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800bd4e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800bd52:	4618      	mov	r0, r3
 800bd54:	3748      	adds	r7, #72	; 0x48
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}

0800bd5a <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800bd5a:	b580      	push	{r7, lr}
 800bd5c:	b090      	sub	sp, #64	; 0x40
 800bd5e:	af00      	add	r7, sp, #0
 800bd60:	6078      	str	r0, [r7, #4]
 800bd62:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bd64:	2300      	movs	r3, #0
 800bd66:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800bd6a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800bd6e:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800bd70:	f240 7376 	movw	r3, #1910	; 0x776
 800bd74:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800bd76:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800bd7a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800bd7c:	f44f 7325 	mov.w	r3, #660	; 0x294
 800bd80:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800bd82:	f240 234e 	movw	r3, #590	; 0x24e
 800bd86:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800bd88:	f240 23b2 	movw	r3, #690	; 0x2b2
 800bd8c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800bd8e:	f44f 7325 	mov.w	r3, #660	; 0x294
 800bd92:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800bd94:	f240 2326 	movw	r3, #550	; 0x226
 800bd98:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800bd9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bda0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bda2:	441a      	add	r2, r3
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800bda8:	f107 0318 	add.w	r3, r7, #24
 800bdac:	4619      	mov	r1, r3
 800bdae:	6878      	ldr	r0, [r7, #4]
 800bdb0:	f7fc fe0c 	bl	80089cc <VL53L0X_GetSequenceStepEnables>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800bdba:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d002      	beq.n	800bdc8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800bdc2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bdc6:	e075      	b.n	800beb4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800bdc8:	7e3b      	ldrb	r3, [r7, #24]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d105      	bne.n	800bdda <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800bdce:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d102      	bne.n	800bdda <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800bdd4:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d030      	beq.n	800be3c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800bdda:	f107 0310 	add.w	r3, r7, #16
 800bdde:	461a      	mov	r2, r3
 800bde0:	2102      	movs	r1, #2
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f7ff fa46 	bl	800b274 <get_sequence_step_timeout>
 800bde8:	4603      	mov	r3, r0
 800bdea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800bdee:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d122      	bne.n	800be3c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800bdf6:	7e3b      	ldrb	r3, [r7, #24]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d007      	beq.n	800be0c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800be00:	6939      	ldr	r1, [r7, #16]
 800be02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be04:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800be06:	441a      	add	r2, r3
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800be0c:	7ebb      	ldrb	r3, [r7, #26]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d009      	beq.n	800be26 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800be16:	6939      	ldr	r1, [r7, #16]
 800be18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be1a:	440b      	add	r3, r1
 800be1c:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800be1e:	441a      	add	r2, r3
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	601a      	str	r2, [r3, #0]
 800be24:	e00a      	b.n	800be3c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800be26:	7e7b      	ldrb	r3, [r7, #25]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d007      	beq.n	800be3c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800be30:	6939      	ldr	r1, [r7, #16]
 800be32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be34:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800be36:	441a      	add	r2, r3
 800be38:	683b      	ldr	r3, [r7, #0]
 800be3a:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800be3c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800be40:	2b00      	cmp	r3, #0
 800be42:	d114      	bne.n	800be6e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800be44:	7efb      	ldrb	r3, [r7, #27]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d011      	beq.n	800be6e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800be4a:	f107 030c 	add.w	r3, r7, #12
 800be4e:	461a      	mov	r2, r3
 800be50:	2103      	movs	r1, #3
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f7ff fa0e 	bl	800b274 <get_sequence_step_timeout>
 800be58:	4603      	mov	r3, r0
 800be5a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800be62:	68f9      	ldr	r1, [r7, #12]
 800be64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be66:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800be68:	441a      	add	r2, r3
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800be6e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800be72:	2b00      	cmp	r3, #0
 800be74:	d114      	bne.n	800bea0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800be76:	7f3b      	ldrb	r3, [r7, #28]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d011      	beq.n	800bea0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800be7c:	f107 0314 	add.w	r3, r7, #20
 800be80:	461a      	mov	r2, r3
 800be82:	2104      	movs	r1, #4
 800be84:	6878      	ldr	r0, [r7, #4]
 800be86:	f7ff f9f5 	bl	800b274 <get_sequence_step_timeout>
 800be8a:	4603      	mov	r3, r0
 800be8c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800be94:	6979      	ldr	r1, [r7, #20]
 800be96:	6a3b      	ldr	r3, [r7, #32]
 800be98:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800be9a:	441a      	add	r2, r3
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800bea0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d103      	bne.n	800beb0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	681a      	ldr	r2, [r3, #0]
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800beb0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800beb4:	4618      	mov	r0, r3
 800beb6:	3740      	adds	r7, #64	; 0x40
 800beb8:	46bd      	mov	sp, r7
 800beba:	bd80      	pop	{r7, pc}

0800bebc <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b088      	sub	sp, #32
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
 800bec4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bec6:	2300      	movs	r3, #0
 800bec8:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800beca:	2300      	movs	r3, #0
 800becc:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800bece:	e0c6      	b.n	800c05e <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800bed0:	697b      	ldr	r3, [r7, #20]
 800bed2:	683a      	ldr	r2, [r7, #0]
 800bed4:	4413      	add	r3, r2
 800bed6:	781b      	ldrb	r3, [r3, #0]
 800bed8:	74fb      	strb	r3, [r7, #19]
		Index++;
 800beda:	697b      	ldr	r3, [r7, #20]
 800bedc:	3301      	adds	r3, #1
 800bede:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800bee0:	7cfb      	ldrb	r3, [r7, #19]
 800bee2:	2bff      	cmp	r3, #255	; 0xff
 800bee4:	f040 808d 	bne.w	800c002 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800bee8:	697b      	ldr	r3, [r7, #20]
 800beea:	683a      	ldr	r2, [r7, #0]
 800beec:	4413      	add	r3, r2
 800beee:	781b      	ldrb	r3, [r3, #0]
 800bef0:	747b      	strb	r3, [r7, #17]
			Index++;
 800bef2:	697b      	ldr	r3, [r7, #20]
 800bef4:	3301      	adds	r3, #1
 800bef6:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800bef8:	7c7b      	ldrb	r3, [r7, #17]
 800befa:	2b03      	cmp	r3, #3
 800befc:	d87e      	bhi.n	800bffc <VL53L0X_load_tuning_settings+0x140>
 800befe:	a201      	add	r2, pc, #4	; (adr r2, 800bf04 <VL53L0X_load_tuning_settings+0x48>)
 800bf00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf04:	0800bf15 	.word	0x0800bf15
 800bf08:	0800bf4f 	.word	0x0800bf4f
 800bf0c:	0800bf89 	.word	0x0800bf89
 800bf10:	0800bfc3 	.word	0x0800bfc3
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800bf14:	697b      	ldr	r3, [r7, #20]
 800bf16:	683a      	ldr	r2, [r7, #0]
 800bf18:	4413      	add	r3, r2
 800bf1a:	781b      	ldrb	r3, [r3, #0]
 800bf1c:	743b      	strb	r3, [r7, #16]
				Index++;
 800bf1e:	697b      	ldr	r3, [r7, #20]
 800bf20:	3301      	adds	r3, #1
 800bf22:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800bf24:	697b      	ldr	r3, [r7, #20]
 800bf26:	683a      	ldr	r2, [r7, #0]
 800bf28:	4413      	add	r3, r2
 800bf2a:	781b      	ldrb	r3, [r3, #0]
 800bf2c:	73fb      	strb	r3, [r7, #15]
				Index++;
 800bf2e:	697b      	ldr	r3, [r7, #20]
 800bf30:	3301      	adds	r3, #1
 800bf32:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800bf34:	7c3b      	ldrb	r3, [r7, #16]
 800bf36:	b29b      	uxth	r3, r3
 800bf38:	021b      	lsls	r3, r3, #8
 800bf3a:	b29a      	uxth	r2, r3
 800bf3c:	7bfb      	ldrb	r3, [r7, #15]
 800bf3e:	b29b      	uxth	r3, r3
 800bf40:	4413      	add	r3, r2
 800bf42:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	89ba      	ldrh	r2, [r7, #12]
 800bf48:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800bf4c:	e087      	b.n	800c05e <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800bf4e:	697b      	ldr	r3, [r7, #20]
 800bf50:	683a      	ldr	r2, [r7, #0]
 800bf52:	4413      	add	r3, r2
 800bf54:	781b      	ldrb	r3, [r3, #0]
 800bf56:	743b      	strb	r3, [r7, #16]
				Index++;
 800bf58:	697b      	ldr	r3, [r7, #20]
 800bf5a:	3301      	adds	r3, #1
 800bf5c:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800bf5e:	697b      	ldr	r3, [r7, #20]
 800bf60:	683a      	ldr	r2, [r7, #0]
 800bf62:	4413      	add	r3, r2
 800bf64:	781b      	ldrb	r3, [r3, #0]
 800bf66:	73fb      	strb	r3, [r7, #15]
				Index++;
 800bf68:	697b      	ldr	r3, [r7, #20]
 800bf6a:	3301      	adds	r3, #1
 800bf6c:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800bf6e:	7c3b      	ldrb	r3, [r7, #16]
 800bf70:	b29b      	uxth	r3, r3
 800bf72:	021b      	lsls	r3, r3, #8
 800bf74:	b29a      	uxth	r2, r3
 800bf76:	7bfb      	ldrb	r3, [r7, #15]
 800bf78:	b29b      	uxth	r3, r3
 800bf7a:	4413      	add	r3, r2
 800bf7c:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	89ba      	ldrh	r2, [r7, #12]
 800bf82:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800bf86:	e06a      	b.n	800c05e <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800bf88:	697b      	ldr	r3, [r7, #20]
 800bf8a:	683a      	ldr	r2, [r7, #0]
 800bf8c:	4413      	add	r3, r2
 800bf8e:	781b      	ldrb	r3, [r3, #0]
 800bf90:	743b      	strb	r3, [r7, #16]
				Index++;
 800bf92:	697b      	ldr	r3, [r7, #20]
 800bf94:	3301      	adds	r3, #1
 800bf96:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800bf98:	697b      	ldr	r3, [r7, #20]
 800bf9a:	683a      	ldr	r2, [r7, #0]
 800bf9c:	4413      	add	r3, r2
 800bf9e:	781b      	ldrb	r3, [r3, #0]
 800bfa0:	73fb      	strb	r3, [r7, #15]
				Index++;
 800bfa2:	697b      	ldr	r3, [r7, #20]
 800bfa4:	3301      	adds	r3, #1
 800bfa6:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800bfa8:	7c3b      	ldrb	r3, [r7, #16]
 800bfaa:	b29b      	uxth	r3, r3
 800bfac:	021b      	lsls	r3, r3, #8
 800bfae:	b29a      	uxth	r2, r3
 800bfb0:	7bfb      	ldrb	r3, [r7, #15]
 800bfb2:	b29b      	uxth	r3, r3
 800bfb4:	4413      	add	r3, r2
 800bfb6:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	89ba      	ldrh	r2, [r7, #12]
 800bfbc:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800bfc0:	e04d      	b.n	800c05e <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800bfc2:	697b      	ldr	r3, [r7, #20]
 800bfc4:	683a      	ldr	r2, [r7, #0]
 800bfc6:	4413      	add	r3, r2
 800bfc8:	781b      	ldrb	r3, [r3, #0]
 800bfca:	743b      	strb	r3, [r7, #16]
				Index++;
 800bfcc:	697b      	ldr	r3, [r7, #20]
 800bfce:	3301      	adds	r3, #1
 800bfd0:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800bfd2:	697b      	ldr	r3, [r7, #20]
 800bfd4:	683a      	ldr	r2, [r7, #0]
 800bfd6:	4413      	add	r3, r2
 800bfd8:	781b      	ldrb	r3, [r3, #0]
 800bfda:	73fb      	strb	r3, [r7, #15]
				Index++;
 800bfdc:	697b      	ldr	r3, [r7, #20]
 800bfde:	3301      	adds	r3, #1
 800bfe0:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800bfe2:	7c3b      	ldrb	r3, [r7, #16]
 800bfe4:	b29b      	uxth	r3, r3
 800bfe6:	021b      	lsls	r3, r3, #8
 800bfe8:	b29a      	uxth	r2, r3
 800bfea:	7bfb      	ldrb	r3, [r7, #15]
 800bfec:	b29b      	uxth	r3, r3
 800bfee:	4413      	add	r3, r2
 800bff0:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	89ba      	ldrh	r2, [r7, #12]
 800bff6:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800bffa:	e030      	b.n	800c05e <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bffc:	23fc      	movs	r3, #252	; 0xfc
 800bffe:	77fb      	strb	r3, [r7, #31]
 800c000:	e02d      	b.n	800c05e <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800c002:	7cfb      	ldrb	r3, [r7, #19]
 800c004:	2b04      	cmp	r3, #4
 800c006:	d828      	bhi.n	800c05a <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800c008:	697b      	ldr	r3, [r7, #20]
 800c00a:	683a      	ldr	r2, [r7, #0]
 800c00c:	4413      	add	r3, r2
 800c00e:	781b      	ldrb	r3, [r3, #0]
 800c010:	74bb      	strb	r3, [r7, #18]
			Index++;
 800c012:	697b      	ldr	r3, [r7, #20]
 800c014:	3301      	adds	r3, #1
 800c016:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800c018:	2300      	movs	r3, #0
 800c01a:	61bb      	str	r3, [r7, #24]
 800c01c:	e00f      	b.n	800c03e <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800c01e:	697b      	ldr	r3, [r7, #20]
 800c020:	683a      	ldr	r2, [r7, #0]
 800c022:	4413      	add	r3, r2
 800c024:	7819      	ldrb	r1, [r3, #0]
 800c026:	f107 0208 	add.w	r2, r7, #8
 800c02a:	69bb      	ldr	r3, [r7, #24]
 800c02c:	4413      	add	r3, r2
 800c02e:	460a      	mov	r2, r1
 800c030:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800c032:	697b      	ldr	r3, [r7, #20]
 800c034:	3301      	adds	r3, #1
 800c036:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800c038:	69bb      	ldr	r3, [r7, #24]
 800c03a:	3301      	adds	r3, #1
 800c03c:	61bb      	str	r3, [r7, #24]
 800c03e:	7cfb      	ldrb	r3, [r7, #19]
 800c040:	69ba      	ldr	r2, [r7, #24]
 800c042:	429a      	cmp	r2, r3
 800c044:	dbeb      	blt.n	800c01e <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800c046:	7cfb      	ldrb	r3, [r7, #19]
 800c048:	f107 0208 	add.w	r2, r7, #8
 800c04c:	7cb9      	ldrb	r1, [r7, #18]
 800c04e:	6878      	ldr	r0, [r7, #4]
 800c050:	f000 fdee 	bl	800cc30 <VL53L0X_WriteMulti>
 800c054:	4603      	mov	r3, r0
 800c056:	77fb      	strb	r3, [r7, #31]
 800c058:	e001      	b.n	800c05e <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c05a:	23fc      	movs	r3, #252	; 0xfc
 800c05c:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800c05e:	697b      	ldr	r3, [r7, #20]
 800c060:	683a      	ldr	r2, [r7, #0]
 800c062:	4413      	add	r3, r2
 800c064:	781b      	ldrb	r3, [r3, #0]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d004      	beq.n	800c074 <VL53L0X_load_tuning_settings+0x1b8>
 800c06a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	f43f af2e 	beq.w	800bed0 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c074:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c078:	4618      	mov	r0, r3
 800c07a:	3720      	adds	r7, #32
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}

0800c080 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b088      	sub	sp, #32
 800c084:	af00      	add	r7, sp, #0
 800c086:	60f8      	str	r0, [r7, #12]
 800c088:	60b9      	str	r1, [r7, #8]
 800c08a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c08c:	2300      	movs	r3, #0
 800c08e:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2200      	movs	r2, #0
 800c094:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800c096:	f107 0313 	add.w	r3, r7, #19
 800c09a:	4619      	mov	r1, r3
 800c09c:	68f8      	ldr	r0, [r7, #12]
 800c09e:	f7fc fd21 	bl	8008ae4 <VL53L0X_GetXTalkCompensationEnable>
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800c0a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d111      	bne.n	800c0d2 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800c0ae:	7cfb      	ldrb	r3, [r7, #19]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d00e      	beq.n	800c0d2 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	6a1b      	ldr	r3, [r3, #32]
 800c0b8:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	8a9b      	ldrh	r3, [r3, #20]
 800c0be:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800c0c0:	69bb      	ldr	r3, [r7, #24]
 800c0c2:	fb02 f303 	mul.w	r3, r2, r3
 800c0c6:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800c0c8:	697b      	ldr	r3, [r7, #20]
 800c0ca:	3380      	adds	r3, #128	; 0x80
 800c0cc:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800c0d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	3720      	adds	r7, #32
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}

0800c0de <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800c0de:	b580      	push	{r7, lr}
 800c0e0:	b086      	sub	sp, #24
 800c0e2:	af00      	add	r7, sp, #0
 800c0e4:	60f8      	str	r0, [r7, #12]
 800c0e6:	60b9      	str	r1, [r7, #8]
 800c0e8:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800c0ee:	68bb      	ldr	r3, [r7, #8]
 800c0f0:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800c0f6:	f107 0310 	add.w	r3, r7, #16
 800c0fa:	461a      	mov	r2, r3
 800c0fc:	68b9      	ldr	r1, [r7, #8]
 800c0fe:	68f8      	ldr	r0, [r7, #12]
 800c100:	f7ff ffbe 	bl	800c080 <VL53L0X_get_total_xtalk_rate>
 800c104:	4603      	mov	r3, r0
 800c106:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800c108:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d105      	bne.n	800c11c <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681a      	ldr	r2, [r3, #0]
 800c114:	693b      	ldr	r3, [r7, #16]
 800c116:	441a      	add	r2, r3
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	601a      	str	r2, [r3, #0]

	return Status;
 800c11c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c120:	4618      	mov	r0, r3
 800c122:	3718      	adds	r7, #24
 800c124:	46bd      	mov	sp, r7
 800c126:	bd80      	pop	{r7, pc}

0800c128 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b09a      	sub	sp, #104	; 0x68
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	60f8      	str	r0, [r7, #12]
 800c130:	60b9      	str	r1, [r7, #8]
 800c132:	607a      	str	r2, [r7, #4]
 800c134:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800c136:	2312      	movs	r3, #18
 800c138:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800c13a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c13e:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800c140:	2342      	movs	r3, #66	; 0x42
 800c142:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800c144:	2306      	movs	r3, #6
 800c146:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800c148:	2307      	movs	r3, #7
 800c14a:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c14c:	2300      	movs	r3, #0
 800c14e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800c158:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800c160:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800c162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c164:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c166:	fb02 f303 	mul.w	r3, r2, r3
 800c16a:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800c16c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c16e:	3380      	adds	r3, #128	; 0x80
 800c170:	0a1b      	lsrs	r3, r3, #8
 800c172:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800c174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c176:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c178:	fb02 f303 	mul.w	r3, r2, r3
 800c17c:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800c17e:	2300      	movs	r3, #0
 800c180:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d01a      	beq.n	800c1be <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	029b      	lsls	r3, r3, #10
 800c18c:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800c192:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c194:	4413      	add	r3, r2
 800c196:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800c198:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1a0:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800c1a2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c1a4:	4613      	mov	r3, r2
 800c1a6:	005b      	lsls	r3, r3, #1
 800c1a8:	4413      	add	r3, r2
 800c1aa:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800c1ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c1ae:	fb03 f303 	mul.w	r3, r3, r3
 800c1b2:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800c1b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c1b6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c1ba:	0c1b      	lsrs	r3, r3, #16
 800c1bc:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c1c2:	fb02 f303 	mul.w	r3, r2, r3
 800c1c6:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800c1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ca:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c1ce:	0c1b      	lsrs	r3, r3, #16
 800c1d0:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800c1d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1d4:	fb03 f303 	mul.w	r3, r3, r3
 800c1d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800c1da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c1dc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c1e0:	0c1b      	lsrs	r3, r3, #16
 800c1e2:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800c1e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1e6:	085a      	lsrs	r2, r3, #1
 800c1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ea:	441a      	add	r2, r3
 800c1ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1f2:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800c1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c1f8:	fb02 f303 	mul.w	r3, r2, r3
 800c1fc:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800c1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c204:	d302      	bcc.n	800c20c <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800c206:	4b54      	ldr	r3, [pc, #336]	; (800c358 <VL53L0X_calc_dmax+0x230>)
 800c208:	663b      	str	r3, [r7, #96]	; 0x60
 800c20a:	e015      	b.n	800c238 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800c20c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c20e:	085a      	lsrs	r2, r3, #1
 800c210:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c212:	441a      	add	r2, r3
 800c214:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c216:	fbb2 f3f3 	udiv	r3, r2, r3
 800c21a:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800c21c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c21e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c220:	fb02 f303 	mul.w	r3, r2, r3
 800c224:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800c226:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c228:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c22c:	0c1b      	lsrs	r3, r3, #16
 800c22e:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800c230:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c232:	fb03 f303 	mul.w	r3, r3, r3
 800c236:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800c238:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c23a:	039b      	lsls	r3, r3, #14
 800c23c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c240:	4a46      	ldr	r2, [pc, #280]	; (800c35c <VL53L0X_calc_dmax+0x234>)
 800c242:	fba2 2303 	umull	r2, r3, r2, r3
 800c246:	099b      	lsrs	r3, r3, #6
 800c248:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800c24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c24c:	fb03 f303 	mul.w	r3, r3, r3
 800c250:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800c252:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c254:	fb03 f303 	mul.w	r3, r3, r3
 800c258:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800c25a:	6a3b      	ldr	r3, [r7, #32]
 800c25c:	3308      	adds	r3, #8
 800c25e:	091b      	lsrs	r3, r3, #4
 800c260:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800c262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c264:	6a3b      	ldr	r3, [r7, #32]
 800c266:	1ad3      	subs	r3, r2, r3
 800c268:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800c26a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c26c:	4613      	mov	r3, r2
 800c26e:	005b      	lsls	r3, r3, #1
 800c270:	4413      	add	r3, r2
 800c272:	011b      	lsls	r3, r3, #4
 800c274:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800c276:	69fb      	ldr	r3, [r7, #28]
 800c278:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800c27c:	0b9b      	lsrs	r3, r3, #14
 800c27e:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800c280:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c282:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c284:	4413      	add	r3, r2
 800c286:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800c288:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c28a:	085b      	lsrs	r3, r3, #1
 800c28c:	69ba      	ldr	r2, [r7, #24]
 800c28e:	4413      	add	r3, r2
 800c290:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800c292:	69ba      	ldr	r2, [r7, #24]
 800c294:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c296:	fbb2 f3f3 	udiv	r3, r2, r3
 800c29a:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800c29c:	69bb      	ldr	r3, [r7, #24]
 800c29e:	039b      	lsls	r3, r3, #14
 800c2a0:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800c2a2:	69fb      	ldr	r3, [r7, #28]
 800c2a4:	085b      	lsrs	r3, r3, #1
 800c2a6:	69ba      	ldr	r2, [r7, #24]
 800c2a8:	4413      	add	r3, r2
 800c2aa:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800c2ac:	69ba      	ldr	r2, [r7, #24]
 800c2ae:	69fb      	ldr	r3, [r7, #28]
 800c2b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2b4:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800c2b6:	69bb      	ldr	r3, [r7, #24]
 800c2b8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c2ba:	fb02 f303 	mul.w	r3, r2, r3
 800c2be:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800c2c0:	69bb      	ldr	r3, [r7, #24]
 800c2c2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c2c6:	4a25      	ldr	r2, [pc, #148]	; (800c35c <VL53L0X_calc_dmax+0x234>)
 800c2c8:	fba2 2303 	umull	r2, r3, r2, r3
 800c2cc:	099b      	lsrs	r3, r3, #6
 800c2ce:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800c2d0:	69bb      	ldr	r3, [r7, #24]
 800c2d2:	011b      	lsls	r3, r3, #4
 800c2d4:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800c2d6:	69bb      	ldr	r3, [r7, #24]
 800c2d8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c2dc:	4a1f      	ldr	r2, [pc, #124]	; (800c35c <VL53L0X_calc_dmax+0x234>)
 800c2de:	fba2 2303 	umull	r2, r3, r2, r3
 800c2e2:	099b      	lsrs	r3, r3, #6
 800c2e4:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800c2e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2e8:	3380      	adds	r3, #128	; 0x80
 800c2ea:	0a1b      	lsrs	r3, r3, #8
 800c2ec:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800c2ee:	697b      	ldr	r3, [r7, #20]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d008      	beq.n	800c306 <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800c2f4:	697b      	ldr	r3, [r7, #20]
 800c2f6:	085a      	lsrs	r2, r3, #1
 800c2f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2fa:	441a      	add	r2, r3
 800c2fc:	697b      	ldr	r3, [r7, #20]
 800c2fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800c302:	65bb      	str	r3, [r7, #88]	; 0x58
 800c304:	e001      	b.n	800c30a <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800c306:	2300      	movs	r3, #0
 800c308:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800c30a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800c30c:	f7fe f9ba 	bl	800a684 <VL53L0X_isqrt>
 800c310:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800c312:	69bb      	ldr	r3, [r7, #24]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d008      	beq.n	800c32a <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800c318:	69bb      	ldr	r3, [r7, #24]
 800c31a:	085a      	lsrs	r2, r3, #1
 800c31c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c31e:	441a      	add	r2, r3
 800c320:	69bb      	ldr	r3, [r7, #24]
 800c322:	fbb2 f3f3 	udiv	r3, r2, r3
 800c326:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c328:	e001      	b.n	800c32e <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800c32a:	2300      	movs	r3, #0
 800c32c:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800c32e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800c330:	f7fe f9a8 	bl	800a684 <VL53L0X_isqrt>
 800c334:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800c336:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c338:	693a      	ldr	r2, [r7, #16]
 800c33a:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800c33c:	693a      	ldr	r2, [r7, #16]
 800c33e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c340:	429a      	cmp	r2, r3
 800c342:	d902      	bls.n	800c34a <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800c344:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c346:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c348:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800c34a:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800c34e:	4618      	mov	r0, r3
 800c350:	3768      	adds	r7, #104	; 0x68
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}
 800c356:	bf00      	nop
 800c358:	fff00000 	.word	0xfff00000
 800c35c:	10624dd3 	.word	0x10624dd3

0800c360 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b0b4      	sub	sp, #208	; 0xd0
 800c364:	af04      	add	r7, sp, #16
 800c366:	60f8      	str	r0, [r7, #12]
 800c368:	60b9      	str	r1, [r7, #8]
 800c36a:	607a      	str	r2, [r7, #4]
 800c36c:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800c36e:	f44f 7348 	mov.w	r3, #800	; 0x320
 800c372:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800c376:	f44f 7316 	mov.w	r3, #600	; 0x258
 800c37a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800c37e:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800c382:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800c386:	f241 235c 	movw	r3, #4700	; 0x125c
 800c38a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800c38e:	4b9e      	ldr	r3, [pc, #632]	; (800c608 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800c390:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800c394:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800c398:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800c39a:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800c39e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c3a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3a6:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800c3a8:	4b98      	ldr	r3, [pc, #608]	; (800c60c <VL53L0X_calc_sigma_estimate+0x2ac>)
 800c3aa:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800c3ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c3b0:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800c3b2:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800c3b6:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800c3b8:	f240 6377 	movw	r3, #1655	; 0x677
 800c3bc:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c3be:	2300      	movs	r3, #0
 800c3c0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	6a1b      	ldr	r3, [r3, #32]
 800c3c8:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800c3ca:	68bb      	ldr	r3, [r7, #8]
 800c3cc:	691b      	ldr	r3, [r3, #16]
 800c3ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c3d2:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800c3d6:	0c1b      	lsrs	r3, r3, #16
 800c3d8:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800c3da:	68bb      	ldr	r3, [r7, #8]
 800c3dc:	68db      	ldr	r3, [r3, #12]
 800c3de:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800c3e0:	f107 0310 	add.w	r3, r7, #16
 800c3e4:	461a      	mov	r2, r3
 800c3e6:	68b9      	ldr	r1, [r7, #8]
 800c3e8:	68f8      	ldr	r0, [r7, #12]
 800c3ea:	f7ff fe78 	bl	800c0de <VL53L0X_get_total_signal_rate>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800c3f4:	f107 0314 	add.w	r3, r7, #20
 800c3f8:	461a      	mov	r2, r3
 800c3fa:	68b9      	ldr	r1, [r7, #8]
 800c3fc:	68f8      	ldr	r0, [r7, #12]
 800c3fe:	f7ff fe3f 	bl	800c080 <VL53L0X_get_total_xtalk_rate>
 800c402:	4603      	mov	r3, r0
 800c404:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800c408:	693b      	ldr	r3, [r7, #16]
 800c40a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c40e:	fb02 f303 	mul.w	r3, r2, r3
 800c412:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800c414:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c416:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c41a:	0c1b      	lsrs	r3, r3, #16
 800c41c:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800c41e:	697b      	ldr	r3, [r7, #20]
 800c420:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c424:	fb02 f303 	mul.w	r3, r2, r3
 800c428:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800c42c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800c430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c432:	429a      	cmp	r2, r3
 800c434:	d902      	bls.n	800c43c <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800c436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c438:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800c43c:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800c440:	2b00      	cmp	r3, #0
 800c442:	d168      	bne.n	800c516 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800c44a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800c454:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800c458:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800c45c:	461a      	mov	r2, r3
 800c45e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800c462:	68f8      	ldr	r0, [r7, #12]
 800c464:	f7fe feb2 	bl	800b1cc <VL53L0X_calc_timeout_mclks>
 800c468:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c470:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800c47a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800c47e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800c482:	461a      	mov	r2, r3
 800c484:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800c488:	68f8      	ldr	r0, [r7, #12]
 800c48a:	f7fe fe9f 	bl	800b1cc <VL53L0X_calc_timeout_mclks>
 800c48e:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800c490:	2303      	movs	r3, #3
 800c492:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800c496:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800c49a:	2b08      	cmp	r3, #8
 800c49c:	d102      	bne.n	800c4a4 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800c49e:	2302      	movs	r3, #2
 800c4a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800c4a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c4a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c4a8:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800c4aa:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800c4ae:	fb02 f303 	mul.w	r3, r2, r3
 800c4b2:	02db      	lsls	r3, r3, #11
 800c4b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800c4b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c4bc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c4c0:	4a53      	ldr	r2, [pc, #332]	; (800c610 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800c4c2:	fba2 2303 	umull	r2, r3, r2, r3
 800c4c6:	099b      	lsrs	r3, r3, #6
 800c4c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800c4cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c4d0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c4d2:	fb02 f303 	mul.w	r3, r2, r3
 800c4d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800c4da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c4de:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c4e2:	4a4b      	ldr	r2, [pc, #300]	; (800c610 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800c4e4:	fba2 2303 	umull	r2, r3, r2, r3
 800c4e8:	099b      	lsrs	r3, r3, #6
 800c4ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800c4ee:	693b      	ldr	r3, [r7, #16]
 800c4f0:	3380      	adds	r3, #128	; 0x80
 800c4f2:	0a1b      	lsrs	r3, r3, #8
 800c4f4:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800c4f6:	693a      	ldr	r2, [r7, #16]
 800c4f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c4fc:	fb02 f303 	mul.w	r3, r2, r3
 800c500:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800c504:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c508:	3380      	adds	r3, #128	; 0x80
 800c50a:	0a1b      	lsrs	r3, r3, #8
 800c50c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800c510:	693b      	ldr	r3, [r7, #16]
 800c512:	021b      	lsls	r3, r3, #8
 800c514:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800c516:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d002      	beq.n	800c524 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800c51e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800c522:	e15e      	b.n	800c7e2 <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800c524:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c526:	2b00      	cmp	r3, #0
 800c528:	d10c      	bne.n	800c544 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c530:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c538:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	2200      	movs	r2, #0
 800c540:	601a      	str	r2, [r3, #0]
 800c542:	e14c      	b.n	800c7de <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800c544:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d102      	bne.n	800c552 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800c54c:	2301      	movs	r3, #1
 800c54e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800c552:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c556:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800c558:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c55a:	041a      	lsls	r2, r3, #16
 800c55c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c55e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c562:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800c566:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c56a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c56c:	429a      	cmp	r2, r3
 800c56e:	d902      	bls.n	800c576 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800c570:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c572:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800c576:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c57a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800c57e:	fb02 f303 	mul.w	r3, r2, r3
 800c582:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800c586:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800c58a:	4613      	mov	r3, r2
 800c58c:	005b      	lsls	r3, r3, #1
 800c58e:	4413      	add	r3, r2
 800c590:	009b      	lsls	r3, r3, #2
 800c592:	4618      	mov	r0, r3
 800c594:	f7fe f876 	bl	800a684 <VL53L0X_isqrt>
 800c598:	4603      	mov	r3, r0
 800c59a:	005b      	lsls	r3, r3, #1
 800c59c:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800c59e:	68bb      	ldr	r3, [r7, #8]
 800c5a0:	891b      	ldrh	r3, [r3, #8]
 800c5a2:	461a      	mov	r2, r3
 800c5a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c5a6:	fb02 f303 	mul.w	r3, r2, r3
 800c5aa:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800c5ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c5ae:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800c5b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c5b4:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800c5b6:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800c5b8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800c5bc:	4a14      	ldr	r2, [pc, #80]	; (800c610 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800c5be:	fba2 2303 	umull	r2, r3, r2, r3
 800c5c2:	099b      	lsrs	r3, r3, #6
 800c5c4:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800c5c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c5c8:	041b      	lsls	r3, r3, #16
 800c5ca:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c5ce:	4a10      	ldr	r2, [pc, #64]	; (800c610 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800c5d0:	fba2 2303 	umull	r2, r3, r2, r3
 800c5d4:	099b      	lsrs	r3, r3, #6
 800c5d6:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800c5d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5da:	021b      	lsls	r3, r3, #8
 800c5dc:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800c5de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c5e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	bfb8      	it	lt
 800c5ea:	425b      	neglt	r3, r3
 800c5ec:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800c5ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5f0:	021b      	lsls	r3, r3, #8
 800c5f2:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	7e1b      	ldrb	r3, [r3, #24]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d00b      	beq.n	800c614 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800c5fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c600:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c604:	e033      	b.n	800c66e <VL53L0X_calc_sigma_estimate+0x30e>
 800c606:	bf00      	nop
 800c608:	028f87ae 	.word	0x028f87ae
 800c60c:	0006999a 	.word	0x0006999a
 800c610:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800c614:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c616:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c61a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c61e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800c622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c624:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800c628:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c62c:	fb02 f303 	mul.w	r3, r2, r3
 800c630:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800c634:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c638:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c63a:	4413      	add	r3, r2
 800c63c:	0c1b      	lsrs	r3, r3, #16
 800c63e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800c642:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c646:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c64a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800c64e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c652:	085b      	lsrs	r3, r3, #1
 800c654:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800c658:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c65c:	fb03 f303 	mul.w	r3, r3, r3
 800c660:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800c664:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c668:	0b9b      	lsrs	r3, r3, #14
 800c66a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800c66e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c672:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c674:	fb02 f303 	mul.w	r3, r2, r3
 800c678:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800c67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c67c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c680:	0c1b      	lsrs	r3, r3, #16
 800c682:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800c684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c686:	fb03 f303 	mul.w	r3, r3, r3
 800c68a:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800c68c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c690:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800c692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c694:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c698:	0c1b      	lsrs	r3, r3, #16
 800c69a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800c69c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c69e:	fb03 f303 	mul.w	r3, r3, r3
 800c6a2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800c6a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6a8:	4413      	add	r3, r2
 800c6aa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800c6ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6ae:	f7fd ffe9 	bl	800a684 <VL53L0X_isqrt>
 800c6b2:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800c6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b6:	041b      	lsls	r3, r3, #16
 800c6b8:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800c6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6bc:	3332      	adds	r3, #50	; 0x32
 800c6be:	4a4b      	ldr	r2, [pc, #300]	; (800c7ec <VL53L0X_calc_sigma_estimate+0x48c>)
 800c6c0:	fba2 2303 	umull	r2, r3, r2, r3
 800c6c4:	095a      	lsrs	r2, r3, #5
 800c6c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c6c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800c6d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c6d4:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800c6d8:	fb02 f303 	mul.w	r3, r2, r3
 800c6dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800c6e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c6e4:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800c6e8:	3308      	adds	r3, #8
 800c6ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800c6ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c6f2:	4a3f      	ldr	r2, [pc, #252]	; (800c7f0 <VL53L0X_calc_sigma_estimate+0x490>)
 800c6f4:	fba2 2303 	umull	r2, r3, r2, r3
 800c6f8:	0b5b      	lsrs	r3, r3, #13
 800c6fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800c6fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c702:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c704:	429a      	cmp	r2, r3
 800c706:	d902      	bls.n	800c70e <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800c708:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c70a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800c70e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c712:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c716:	4413      	add	r3, r2
 800c718:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800c71c:	4a35      	ldr	r2, [pc, #212]	; (800c7f4 <VL53L0X_calc_sigma_estimate+0x494>)
 800c71e:	fba2 2303 	umull	r2, r3, r2, r3
 800c722:	099b      	lsrs	r3, r3, #6
 800c724:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800c726:	6a3b      	ldr	r3, [r7, #32]
 800c728:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800c72a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c72e:	441a      	add	r2, r3
 800c730:	6a3b      	ldr	r3, [r7, #32]
 800c732:	fbb2 f3f3 	udiv	r3, r2, r3
 800c736:	4618      	mov	r0, r3
 800c738:	f7fd ffa4 	bl	800a684 <VL53L0X_isqrt>
 800c73c:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800c73e:	69fb      	ldr	r3, [r7, #28]
 800c740:	021b      	lsls	r3, r3, #8
 800c742:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800c744:	69fb      	ldr	r3, [r7, #28]
 800c746:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c74a:	4a2a      	ldr	r2, [pc, #168]	; (800c7f4 <VL53L0X_calc_sigma_estimate+0x494>)
 800c74c:	fba2 2303 	umull	r2, r3, r2, r3
 800c750:	099b      	lsrs	r3, r3, #6
 800c752:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800c754:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c758:	fb03 f303 	mul.w	r3, r3, r3
 800c75c:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800c75e:	69fb      	ldr	r3, [r7, #28]
 800c760:	fb03 f303 	mul.w	r3, r3, r3
 800c764:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800c766:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c76a:	4413      	add	r3, r2
 800c76c:	4618      	mov	r0, r3
 800c76e:	f7fd ff89 	bl	800a684 <VL53L0X_isqrt>
 800c772:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800c774:	69bb      	ldr	r3, [r7, #24]
 800c776:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c77a:	fb02 f303 	mul.w	r3, r2, r3
 800c77e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800c782:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c784:	2b00      	cmp	r3, #0
 800c786:	d009      	beq.n	800c79c <VL53L0X_calc_sigma_estimate+0x43c>
 800c788:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d005      	beq.n	800c79c <VL53L0X_calc_sigma_estimate+0x43c>
 800c790:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800c794:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c798:	429a      	cmp	r2, r3
 800c79a:	d903      	bls.n	800c7a4 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800c79c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c7a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800c7aa:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681a      	ldr	r2, [r3, #0]
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800c7b6:	6939      	ldr	r1, [r7, #16]
 800c7b8:	683b      	ldr	r3, [r7, #0]
 800c7ba:	9303      	str	r3, [sp, #12]
 800c7bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c7c0:	9302      	str	r3, [sp, #8]
 800c7c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c7c6:	9301      	str	r3, [sp, #4]
 800c7c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c7ca:	9300      	str	r3, [sp, #0]
 800c7cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c7d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c7d2:	68f8      	ldr	r0, [r7, #12]
 800c7d4:	f7ff fca8 	bl	800c128 <VL53L0X_calc_dmax>
 800c7d8:	4603      	mov	r3, r0
 800c7da:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c7de:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	37c0      	adds	r7, #192	; 0xc0
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}
 800c7ea:	bf00      	nop
 800c7ec:	51eb851f 	.word	0x51eb851f
 800c7f0:	d1b71759 	.word	0xd1b71759
 800c7f4:	10624dd3 	.word	0x10624dd3

0800c7f8 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b090      	sub	sp, #64	; 0x40
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	60f8      	str	r0, [r7, #12]
 800c800:	607a      	str	r2, [r7, #4]
 800c802:	461a      	mov	r2, r3
 800c804:	460b      	mov	r3, r1
 800c806:	72fb      	strb	r3, [r7, #11]
 800c808:	4613      	mov	r3, r2
 800c80a:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c80c:	2300      	movs	r3, #0
 800c80e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800c812:	2300      	movs	r3, #0
 800c814:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800c818:	2300      	movs	r3, #0
 800c81a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800c81e:	2300      	movs	r3, #0
 800c820:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800c824:	2300      	movs	r3, #0
 800c826:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800c82a:	2300      	movs	r3, #0
 800c82c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800c830:	2300      	movs	r3, #0
 800c832:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800c836:	2300      	movs	r3, #0
 800c838:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800c83c:	2300      	movs	r3, #0
 800c83e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800c842:	2300      	movs	r3, #0
 800c844:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800c846:	2300      	movs	r3, #0
 800c848:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800c84a:	7afb      	ldrb	r3, [r7, #11]
 800c84c:	10db      	asrs	r3, r3, #3
 800c84e:	b2db      	uxtb	r3, r3
 800c850:	f003 030f 	and.w	r3, r3, #15
 800c854:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800c858:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d017      	beq.n	800c890 <VL53L0X_get_pal_range_status+0x98>
 800c860:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c864:	2b05      	cmp	r3, #5
 800c866:	d013      	beq.n	800c890 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800c868:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c86c:	2b07      	cmp	r3, #7
 800c86e:	d00f      	beq.n	800c890 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800c870:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c874:	2b0c      	cmp	r3, #12
 800c876:	d00b      	beq.n	800c890 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800c878:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c87c:	2b0d      	cmp	r3, #13
 800c87e:	d007      	beq.n	800c890 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800c880:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c884:	2b0e      	cmp	r3, #14
 800c886:	d003      	beq.n	800c890 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800c888:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c88c:	2b0f      	cmp	r3, #15
 800c88e:	d103      	bne.n	800c898 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800c890:	2301      	movs	r3, #1
 800c892:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800c896:	e002      	b.n	800c89e <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800c898:	2300      	movs	r3, #0
 800c89a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800c89e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d109      	bne.n	800c8ba <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800c8a6:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800c8aa:	461a      	mov	r2, r3
 800c8ac:	2100      	movs	r1, #0
 800c8ae:	68f8      	ldr	r0, [r7, #12]
 800c8b0:	f7fc f9ec 	bl	8008c8c <VL53L0X_GetLimitCheckEnable>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800c8ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d02e      	beq.n	800c920 <VL53L0X_get_pal_range_status+0x128>
 800c8c2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d12a      	bne.n	800c920 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800c8ca:	f107 0310 	add.w	r3, r7, #16
 800c8ce:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800c8d2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c8d4:	68f8      	ldr	r0, [r7, #12]
 800c8d6:	f7ff fd43 	bl	800c360 <VL53L0X_calc_sigma_estimate>
 800c8da:	4603      	mov	r3, r0
 800c8dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800c8e0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d103      	bne.n	800c8f0 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800c8e8:	693b      	ldr	r3, [r7, #16]
 800c8ea:	b29a      	uxth	r2, r3
 800c8ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8ee:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800c8f0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d113      	bne.n	800c920 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800c8f8:	f107 0320 	add.w	r3, r7, #32
 800c8fc:	461a      	mov	r2, r3
 800c8fe:	2100      	movs	r1, #0
 800c900:	68f8      	ldr	r0, [r7, #12]
 800c902:	f7fc fa49 	bl	8008d98 <VL53L0X_GetLimitCheckValue>
 800c906:	4603      	mov	r3, r0
 800c908:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800c90c:	6a3b      	ldr	r3, [r7, #32]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d006      	beq.n	800c920 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800c912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c914:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800c916:	429a      	cmp	r2, r3
 800c918:	d902      	bls.n	800c920 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800c91a:	2301      	movs	r3, #1
 800c91c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800c920:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c924:	2b00      	cmp	r3, #0
 800c926:	d109      	bne.n	800c93c <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800c928:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800c92c:	461a      	mov	r2, r3
 800c92e:	2102      	movs	r1, #2
 800c930:	68f8      	ldr	r0, [r7, #12]
 800c932:	f7fc f9ab 	bl	8008c8c <VL53L0X_GetLimitCheckEnable>
 800c936:	4603      	mov	r3, r0
 800c938:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800c93c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800c940:	2b00      	cmp	r3, #0
 800c942:	d044      	beq.n	800c9ce <VL53L0X_get_pal_range_status+0x1d6>
 800c944:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d140      	bne.n	800c9ce <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800c94c:	f107 031c 	add.w	r3, r7, #28
 800c950:	461a      	mov	r2, r3
 800c952:	2102      	movs	r1, #2
 800c954:	68f8      	ldr	r0, [r7, #12]
 800c956:	f7fc fa1f 	bl	8008d98 <VL53L0X_GetLimitCheckValue>
 800c95a:	4603      	mov	r3, r0
 800c95c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800c960:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c964:	2b00      	cmp	r3, #0
 800c966:	d107      	bne.n	800c978 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c968:	2201      	movs	r2, #1
 800c96a:	21ff      	movs	r1, #255	; 0xff
 800c96c:	68f8      	ldr	r0, [r7, #12]
 800c96e:	f000 f9bb 	bl	800cce8 <VL53L0X_WrByte>
 800c972:	4603      	mov	r3, r0
 800c974:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800c978:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d109      	bne.n	800c994 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800c980:	f107 0316 	add.w	r3, r7, #22
 800c984:	461a      	mov	r2, r3
 800c986:	21b6      	movs	r1, #182	; 0xb6
 800c988:	68f8      	ldr	r0, [r7, #12]
 800c98a:	f000 fa59 	bl	800ce40 <VL53L0X_RdWord>
 800c98e:	4603      	mov	r3, r0
 800c990:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800c994:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d107      	bne.n	800c9ac <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c99c:	2200      	movs	r2, #0
 800c99e:	21ff      	movs	r1, #255	; 0xff
 800c9a0:	68f8      	ldr	r0, [r7, #12]
 800c9a2:	f000 f9a1 	bl	800cce8 <VL53L0X_WrByte>
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800c9ac:	8afb      	ldrh	r3, [r7, #22]
 800c9ae:	025b      	lsls	r3, r3, #9
 800c9b0:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9b6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800c9ba:	69fb      	ldr	r3, [r7, #28]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d006      	beq.n	800c9ce <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800c9c0:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800c9c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9c4:	429a      	cmp	r2, r3
 800c9c6:	d902      	bls.n	800c9ce <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800c9c8:	2301      	movs	r3, #1
 800c9ca:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800c9ce:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d109      	bne.n	800c9ea <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800c9d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c9da:	461a      	mov	r2, r3
 800c9dc:	2103      	movs	r1, #3
 800c9de:	68f8      	ldr	r0, [r7, #12]
 800c9e0:	f7fc f954 	bl	8008c8c <VL53L0X_GetLimitCheckEnable>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800c9ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d023      	beq.n	800ca3a <VL53L0X_get_pal_range_status+0x242>
 800c9f2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d11f      	bne.n	800ca3a <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800c9fa:	893b      	ldrh	r3, [r7, #8]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d102      	bne.n	800ca06 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800ca00:	2300      	movs	r3, #0
 800ca02:	637b      	str	r3, [r7, #52]	; 0x34
 800ca04:	e005      	b.n	800ca12 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	021a      	lsls	r2, r3, #8
 800ca0a:	893b      	ldrh	r3, [r7, #8]
 800ca0c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca10:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800ca12:	f107 0318 	add.w	r3, r7, #24
 800ca16:	461a      	mov	r2, r3
 800ca18:	2103      	movs	r1, #3
 800ca1a:	68f8      	ldr	r0, [r7, #12]
 800ca1c:	f7fc f9bc 	bl	8008d98 <VL53L0X_GetLimitCheckValue>
 800ca20:	4603      	mov	r3, r0
 800ca22:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800ca26:	69bb      	ldr	r3, [r7, #24]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d006      	beq.n	800ca3a <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800ca2c:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800ca2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ca30:	429a      	cmp	r2, r3
 800ca32:	d202      	bcs.n	800ca3a <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800ca34:	2301      	movs	r3, #1
 800ca36:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ca3a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d14a      	bne.n	800cad8 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800ca42:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800ca46:	2b01      	cmp	r3, #1
 800ca48:	d103      	bne.n	800ca52 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800ca4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca4c:	22ff      	movs	r2, #255	; 0xff
 800ca4e:	701a      	strb	r2, [r3, #0]
 800ca50:	e042      	b.n	800cad8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800ca52:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ca56:	2b01      	cmp	r3, #1
 800ca58:	d007      	beq.n	800ca6a <VL53L0X_get_pal_range_status+0x272>
 800ca5a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ca5e:	2b02      	cmp	r3, #2
 800ca60:	d003      	beq.n	800ca6a <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800ca62:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ca66:	2b03      	cmp	r3, #3
 800ca68:	d103      	bne.n	800ca72 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800ca6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca6c:	2205      	movs	r2, #5
 800ca6e:	701a      	strb	r2, [r3, #0]
 800ca70:	e032      	b.n	800cad8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800ca72:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ca76:	2b06      	cmp	r3, #6
 800ca78:	d003      	beq.n	800ca82 <VL53L0X_get_pal_range_status+0x28a>
 800ca7a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ca7e:	2b09      	cmp	r3, #9
 800ca80:	d103      	bne.n	800ca8a <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800ca82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca84:	2204      	movs	r2, #4
 800ca86:	701a      	strb	r2, [r3, #0]
 800ca88:	e026      	b.n	800cad8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800ca8a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ca8e:	2b08      	cmp	r3, #8
 800ca90:	d007      	beq.n	800caa2 <VL53L0X_get_pal_range_status+0x2aa>
 800ca92:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ca96:	2b0a      	cmp	r3, #10
 800ca98:	d003      	beq.n	800caa2 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800ca9a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ca9e:	2b01      	cmp	r3, #1
 800caa0:	d103      	bne.n	800caaa <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800caa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800caa4:	2203      	movs	r2, #3
 800caa6:	701a      	strb	r2, [r3, #0]
 800caa8:	e016      	b.n	800cad8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800caaa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800caae:	2b04      	cmp	r3, #4
 800cab0:	d003      	beq.n	800caba <VL53L0X_get_pal_range_status+0x2c2>
 800cab2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800cab6:	2b01      	cmp	r3, #1
 800cab8:	d103      	bne.n	800cac2 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800caba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cabc:	2202      	movs	r2, #2
 800cabe:	701a      	strb	r2, [r3, #0]
 800cac0:	e00a      	b.n	800cad8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800cac2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800cac6:	2b01      	cmp	r3, #1
 800cac8:	d103      	bne.n	800cad2 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800caca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cacc:	2201      	movs	r2, #1
 800cace:	701a      	strb	r2, [r3, #0]
 800cad0:	e002      	b.n	800cad8 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800cad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cad4:	2200      	movs	r2, #0
 800cad6:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800cad8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cada:	781b      	ldrb	r3, [r3, #0]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d102      	bne.n	800cae6 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800cae0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cae2:	2200      	movs	r2, #0
 800cae4:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800cae6:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800caea:	461a      	mov	r2, r3
 800caec:	2101      	movs	r1, #1
 800caee:	68f8      	ldr	r0, [r7, #12]
 800caf0:	f7fc f8cc 	bl	8008c8c <VL53L0X_GetLimitCheckEnable>
 800caf4:	4603      	mov	r3, r0
 800caf6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800cafa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d14f      	bne.n	800cba2 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800cb02:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d003      	beq.n	800cb12 <VL53L0X_get_pal_range_status+0x31a>
 800cb0a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800cb0e:	2b01      	cmp	r3, #1
 800cb10:	d103      	bne.n	800cb1a <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800cb12:	2301      	movs	r3, #1
 800cb14:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb18:	e002      	b.n	800cb20 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800cb26:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800cb2a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800cb2e:	2b04      	cmp	r3, #4
 800cb30:	d003      	beq.n	800cb3a <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800cb32:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d103      	bne.n	800cb42 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800cb3a:	2301      	movs	r3, #1
 800cb3c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb40:	e002      	b.n	800cb48 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800cb42:	2300      	movs	r3, #0
 800cb44:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800cb4e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800cb52:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d003      	beq.n	800cb62 <VL53L0X_get_pal_range_status+0x36a>
 800cb5a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cb5e:	2b01      	cmp	r3, #1
 800cb60:	d103      	bne.n	800cb6a <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800cb62:	2301      	movs	r3, #1
 800cb64:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb68:	e002      	b.n	800cb70 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800cb76:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800cb7a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d003      	beq.n	800cb8a <VL53L0X_get_pal_range_status+0x392>
 800cb82:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800cb86:	2b01      	cmp	r3, #1
 800cb88:	d103      	bne.n	800cb92 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800cb8a:	2301      	movs	r3, #1
 800cb8c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb90:	e002      	b.n	800cb98 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800cb92:	2300      	movs	r3, #0
 800cb94:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800cb9e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800cba2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800cba6:	4618      	mov	r0, r3
 800cba8:	3740      	adds	r7, #64	; 0x40
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	bd80      	pop	{r7, pc}

0800cbae <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800cbae:	b580      	push	{r7, lr}
 800cbb0:	b088      	sub	sp, #32
 800cbb2:	af02      	add	r7, sp, #8
 800cbb4:	60f8      	str	r0, [r7, #12]
 800cbb6:	60b9      	str	r1, [r7, #8]
 800cbb8:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	330a      	adds	r3, #10
 800cbbe:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800cbcc:	b299      	uxth	r1, r3
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	b29a      	uxth	r2, r3
 800cbd2:	697b      	ldr	r3, [r7, #20]
 800cbd4:	9300      	str	r3, [sp, #0]
 800cbd6:	4613      	mov	r3, r2
 800cbd8:	68ba      	ldr	r2, [r7, #8]
 800cbda:	f7f5 fc05 	bl	80023e8 <HAL_I2C_Master_Transmit>
 800cbde:	4603      	mov	r3, r0
 800cbe0:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800cbe2:	693b      	ldr	r3, [r7, #16]
}
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	3718      	adds	r7, #24
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}

0800cbec <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b088      	sub	sp, #32
 800cbf0:	af02      	add	r7, sp, #8
 800cbf2:	60f8      	str	r0, [r7, #12]
 800cbf4:	60b9      	str	r1, [r7, #8]
 800cbf6:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	330a      	adds	r3, #10
 800cbfc:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800cc0a:	f043 0301 	orr.w	r3, r3, #1
 800cc0e:	b2db      	uxtb	r3, r3
 800cc10:	b299      	uxth	r1, r3
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	b29a      	uxth	r2, r3
 800cc16:	697b      	ldr	r3, [r7, #20]
 800cc18:	9300      	str	r3, [sp, #0]
 800cc1a:	4613      	mov	r3, r2
 800cc1c:	68ba      	ldr	r2, [r7, #8]
 800cc1e:	f7f5 fcd7 	bl	80025d0 <HAL_I2C_Master_Receive>
 800cc22:	4603      	mov	r3, r0
 800cc24:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800cc26:	693b      	ldr	r3, [r7, #16]
}
 800cc28:	4618      	mov	r0, r3
 800cc2a:	3718      	adds	r7, #24
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	bd80      	pop	{r7, pc}

0800cc30 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b086      	sub	sp, #24
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	60f8      	str	r0, [r7, #12]
 800cc38:	607a      	str	r2, [r7, #4]
 800cc3a:	603b      	str	r3, [r7, #0]
 800cc3c:	460b      	mov	r3, r1
 800cc3e:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cc40:	2300      	movs	r3, #0
 800cc42:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	2b3f      	cmp	r3, #63	; 0x3f
 800cc48:	d902      	bls.n	800cc50 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800cc4a:	f06f 0303 	mvn.w	r3, #3
 800cc4e:	e016      	b.n	800cc7e <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800cc50:	4a0d      	ldr	r2, [pc, #52]	; (800cc88 <VL53L0X_WriteMulti+0x58>)
 800cc52:	7afb      	ldrb	r3, [r7, #11]
 800cc54:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800cc56:	683a      	ldr	r2, [r7, #0]
 800cc58:	6879      	ldr	r1, [r7, #4]
 800cc5a:	480c      	ldr	r0, [pc, #48]	; (800cc8c <VL53L0X_WriteMulti+0x5c>)
 800cc5c:	f000 f998 	bl	800cf90 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	3301      	adds	r3, #1
 800cc64:	461a      	mov	r2, r3
 800cc66:	4908      	ldr	r1, [pc, #32]	; (800cc88 <VL53L0X_WriteMulti+0x58>)
 800cc68:	68f8      	ldr	r0, [r7, #12]
 800cc6a:	f7ff ffa0 	bl	800cbae <_I2CWrite>
 800cc6e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800cc70:	693b      	ldr	r3, [r7, #16]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d001      	beq.n	800cc7a <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800cc76:	23ec      	movs	r3, #236	; 0xec
 800cc78:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800cc7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cc7e:	4618      	mov	r0, r3
 800cc80:	3718      	adds	r7, #24
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}
 800cc86:	bf00      	nop
 800cc88:	20000784 	.word	0x20000784
 800cc8c:	20000785 	.word	0x20000785

0800cc90 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b086      	sub	sp, #24
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	60f8      	str	r0, [r7, #12]
 800cc98:	607a      	str	r2, [r7, #4]
 800cc9a:	603b      	str	r3, [r7, #0]
 800cc9c:	460b      	mov	r3, r1
 800cc9e:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cca0:	2300      	movs	r3, #0
 800cca2:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800cca4:	f107 030b 	add.w	r3, r7, #11
 800cca8:	2201      	movs	r2, #1
 800ccaa:	4619      	mov	r1, r3
 800ccac:	68f8      	ldr	r0, [r7, #12]
 800ccae:	f7ff ff7e 	bl	800cbae <_I2CWrite>
 800ccb2:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ccb4:	693b      	ldr	r3, [r7, #16]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d002      	beq.n	800ccc0 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ccba:	23ec      	movs	r3, #236	; 0xec
 800ccbc:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ccbe:	e00c      	b.n	800ccda <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800ccc0:	683a      	ldr	r2, [r7, #0]
 800ccc2:	6879      	ldr	r1, [r7, #4]
 800ccc4:	68f8      	ldr	r0, [r7, #12]
 800ccc6:	f7ff ff91 	bl	800cbec <_I2CRead>
 800ccca:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800cccc:	693b      	ldr	r3, [r7, #16]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d002      	beq.n	800ccd8 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ccd2:	23ec      	movs	r3, #236	; 0xec
 800ccd4:	75fb      	strb	r3, [r7, #23]
 800ccd6:	e000      	b.n	800ccda <VL53L0X_ReadMulti+0x4a>
    }
done:
 800ccd8:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800ccda:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ccde:	4618      	mov	r0, r3
 800cce0:	3718      	adds	r7, #24
 800cce2:	46bd      	mov	sp, r7
 800cce4:	bd80      	pop	{r7, pc}
	...

0800cce8 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b084      	sub	sp, #16
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
 800ccf0:	460b      	mov	r3, r1
 800ccf2:	70fb      	strb	r3, [r7, #3]
 800ccf4:	4613      	mov	r3, r2
 800ccf6:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800ccfc:	4a0b      	ldr	r2, [pc, #44]	; (800cd2c <VL53L0X_WrByte+0x44>)
 800ccfe:	78fb      	ldrb	r3, [r7, #3]
 800cd00:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800cd02:	4a0a      	ldr	r2, [pc, #40]	; (800cd2c <VL53L0X_WrByte+0x44>)
 800cd04:	78bb      	ldrb	r3, [r7, #2]
 800cd06:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800cd08:	2202      	movs	r2, #2
 800cd0a:	4908      	ldr	r1, [pc, #32]	; (800cd2c <VL53L0X_WrByte+0x44>)
 800cd0c:	6878      	ldr	r0, [r7, #4]
 800cd0e:	f7ff ff4e 	bl	800cbae <_I2CWrite>
 800cd12:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800cd14:	68bb      	ldr	r3, [r7, #8]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d001      	beq.n	800cd1e <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800cd1a:	23ec      	movs	r3, #236	; 0xec
 800cd1c:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800cd1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cd22:	4618      	mov	r0, r3
 800cd24:	3710      	adds	r7, #16
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bd80      	pop	{r7, pc}
 800cd2a:	bf00      	nop
 800cd2c:	20000784 	.word	0x20000784

0800cd30 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b084      	sub	sp, #16
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
 800cd38:	460b      	mov	r3, r1
 800cd3a:	70fb      	strb	r3, [r7, #3]
 800cd3c:	4613      	mov	r3, r2
 800cd3e:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cd40:	2300      	movs	r3, #0
 800cd42:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800cd44:	4a0e      	ldr	r2, [pc, #56]	; (800cd80 <VL53L0X_WrWord+0x50>)
 800cd46:	78fb      	ldrb	r3, [r7, #3]
 800cd48:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800cd4a:	883b      	ldrh	r3, [r7, #0]
 800cd4c:	0a1b      	lsrs	r3, r3, #8
 800cd4e:	b29b      	uxth	r3, r3
 800cd50:	b2da      	uxtb	r2, r3
 800cd52:	4b0b      	ldr	r3, [pc, #44]	; (800cd80 <VL53L0X_WrWord+0x50>)
 800cd54:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800cd56:	883b      	ldrh	r3, [r7, #0]
 800cd58:	b2da      	uxtb	r2, r3
 800cd5a:	4b09      	ldr	r3, [pc, #36]	; (800cd80 <VL53L0X_WrWord+0x50>)
 800cd5c:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800cd5e:	2203      	movs	r2, #3
 800cd60:	4907      	ldr	r1, [pc, #28]	; (800cd80 <VL53L0X_WrWord+0x50>)
 800cd62:	6878      	ldr	r0, [r7, #4]
 800cd64:	f7ff ff23 	bl	800cbae <_I2CWrite>
 800cd68:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800cd6a:	68bb      	ldr	r3, [r7, #8]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d001      	beq.n	800cd74 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800cd70:	23ec      	movs	r3, #236	; 0xec
 800cd72:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800cd74:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cd78:	4618      	mov	r0, r3
 800cd7a:	3710      	adds	r7, #16
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bd80      	pop	{r7, pc}
 800cd80:	20000784 	.word	0x20000784

0800cd84 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b084      	sub	sp, #16
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
 800cd8c:	4608      	mov	r0, r1
 800cd8e:	4611      	mov	r1, r2
 800cd90:	461a      	mov	r2, r3
 800cd92:	4603      	mov	r3, r0
 800cd94:	70fb      	strb	r3, [r7, #3]
 800cd96:	460b      	mov	r3, r1
 800cd98:	70bb      	strb	r3, [r7, #2]
 800cd9a:	4613      	mov	r3, r2
 800cd9c:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cd9e:	2300      	movs	r3, #0
 800cda0:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800cda2:	f107 020e 	add.w	r2, r7, #14
 800cda6:	78fb      	ldrb	r3, [r7, #3]
 800cda8:	4619      	mov	r1, r3
 800cdaa:	6878      	ldr	r0, [r7, #4]
 800cdac:	f000 f81e 	bl	800cdec <VL53L0X_RdByte>
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800cdb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d110      	bne.n	800cdde <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800cdbc:	7bba      	ldrb	r2, [r7, #14]
 800cdbe:	78bb      	ldrb	r3, [r7, #2]
 800cdc0:	4013      	ands	r3, r2
 800cdc2:	b2da      	uxtb	r2, r3
 800cdc4:	787b      	ldrb	r3, [r7, #1]
 800cdc6:	4313      	orrs	r3, r2
 800cdc8:	b2db      	uxtb	r3, r3
 800cdca:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800cdcc:	7bba      	ldrb	r2, [r7, #14]
 800cdce:	78fb      	ldrb	r3, [r7, #3]
 800cdd0:	4619      	mov	r1, r3
 800cdd2:	6878      	ldr	r0, [r7, #4]
 800cdd4:	f7ff ff88 	bl	800cce8 <VL53L0X_WrByte>
 800cdd8:	4603      	mov	r3, r0
 800cdda:	73fb      	strb	r3, [r7, #15]
 800cddc:	e000      	b.n	800cde0 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800cdde:	bf00      	nop
done:
    return Status;
 800cde0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cde4:	4618      	mov	r0, r3
 800cde6:	3710      	adds	r7, #16
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bd80      	pop	{r7, pc}

0800cdec <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b086      	sub	sp, #24
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	60f8      	str	r0, [r7, #12]
 800cdf4:	460b      	mov	r3, r1
 800cdf6:	607a      	str	r2, [r7, #4]
 800cdf8:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800cdfe:	f107 030b 	add.w	r3, r7, #11
 800ce02:	2201      	movs	r2, #1
 800ce04:	4619      	mov	r1, r3
 800ce06:	68f8      	ldr	r0, [r7, #12]
 800ce08:	f7ff fed1 	bl	800cbae <_I2CWrite>
 800ce0c:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800ce0e:	693b      	ldr	r3, [r7, #16]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d002      	beq.n	800ce1a <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ce14:	23ec      	movs	r3, #236	; 0xec
 800ce16:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ce18:	e00c      	b.n	800ce34 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800ce1a:	2201      	movs	r2, #1
 800ce1c:	6879      	ldr	r1, [r7, #4]
 800ce1e:	68f8      	ldr	r0, [r7, #12]
 800ce20:	f7ff fee4 	bl	800cbec <_I2CRead>
 800ce24:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ce26:	693b      	ldr	r3, [r7, #16]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d002      	beq.n	800ce32 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ce2c:	23ec      	movs	r3, #236	; 0xec
 800ce2e:	75fb      	strb	r3, [r7, #23]
 800ce30:	e000      	b.n	800ce34 <VL53L0X_RdByte+0x48>
    }
done:
 800ce32:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800ce34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ce38:	4618      	mov	r0, r3
 800ce3a:	3718      	adds	r7, #24
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bd80      	pop	{r7, pc}

0800ce40 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b086      	sub	sp, #24
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	60f8      	str	r0, [r7, #12]
 800ce48:	460b      	mov	r3, r1
 800ce4a:	607a      	str	r2, [r7, #4]
 800ce4c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ce4e:	2300      	movs	r3, #0
 800ce50:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800ce52:	f107 030b 	add.w	r3, r7, #11
 800ce56:	2201      	movs	r2, #1
 800ce58:	4619      	mov	r1, r3
 800ce5a:	68f8      	ldr	r0, [r7, #12]
 800ce5c:	f7ff fea7 	bl	800cbae <_I2CWrite>
 800ce60:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800ce62:	693b      	ldr	r3, [r7, #16]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d002      	beq.n	800ce6e <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ce68:	23ec      	movs	r3, #236	; 0xec
 800ce6a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ce6c:	e017      	b.n	800ce9e <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800ce6e:	2202      	movs	r2, #2
 800ce70:	490e      	ldr	r1, [pc, #56]	; (800ceac <VL53L0X_RdWord+0x6c>)
 800ce72:	68f8      	ldr	r0, [r7, #12]
 800ce74:	f7ff feba 	bl	800cbec <_I2CRead>
 800ce78:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ce7a:	693b      	ldr	r3, [r7, #16]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d002      	beq.n	800ce86 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ce80:	23ec      	movs	r3, #236	; 0xec
 800ce82:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ce84:	e00b      	b.n	800ce9e <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800ce86:	4b09      	ldr	r3, [pc, #36]	; (800ceac <VL53L0X_RdWord+0x6c>)
 800ce88:	781b      	ldrb	r3, [r3, #0]
 800ce8a:	b29b      	uxth	r3, r3
 800ce8c:	021b      	lsls	r3, r3, #8
 800ce8e:	b29a      	uxth	r2, r3
 800ce90:	4b06      	ldr	r3, [pc, #24]	; (800ceac <VL53L0X_RdWord+0x6c>)
 800ce92:	785b      	ldrb	r3, [r3, #1]
 800ce94:	b29b      	uxth	r3, r3
 800ce96:	4413      	add	r3, r2
 800ce98:	b29a      	uxth	r2, r3
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800ce9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cea2:	4618      	mov	r0, r3
 800cea4:	3718      	adds	r7, #24
 800cea6:	46bd      	mov	sp, r7
 800cea8:	bd80      	pop	{r7, pc}
 800ceaa:	bf00      	nop
 800ceac:	20000784 	.word	0x20000784

0800ceb0 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b086      	sub	sp, #24
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	60f8      	str	r0, [r7, #12]
 800ceb8:	460b      	mov	r3, r1
 800ceba:	607a      	str	r2, [r7, #4]
 800cebc:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cebe:	2300      	movs	r3, #0
 800cec0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800cec2:	f107 030b 	add.w	r3, r7, #11
 800cec6:	2201      	movs	r2, #1
 800cec8:	4619      	mov	r1, r3
 800ceca:	68f8      	ldr	r0, [r7, #12]
 800cecc:	f7ff fe6f 	bl	800cbae <_I2CWrite>
 800ced0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ced2:	693b      	ldr	r3, [r7, #16]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d002      	beq.n	800cede <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ced8:	23ec      	movs	r3, #236	; 0xec
 800ceda:	75fb      	strb	r3, [r7, #23]
        goto done;
 800cedc:	e01b      	b.n	800cf16 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800cede:	2204      	movs	r2, #4
 800cee0:	4910      	ldr	r1, [pc, #64]	; (800cf24 <VL53L0X_RdDWord+0x74>)
 800cee2:	68f8      	ldr	r0, [r7, #12]
 800cee4:	f7ff fe82 	bl	800cbec <_I2CRead>
 800cee8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ceea:	693b      	ldr	r3, [r7, #16]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d002      	beq.n	800cef6 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800cef0:	23ec      	movs	r3, #236	; 0xec
 800cef2:	75fb      	strb	r3, [r7, #23]
        goto done;
 800cef4:	e00f      	b.n	800cf16 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800cef6:	4b0b      	ldr	r3, [pc, #44]	; (800cf24 <VL53L0X_RdDWord+0x74>)
 800cef8:	781b      	ldrb	r3, [r3, #0]
 800cefa:	061a      	lsls	r2, r3, #24
 800cefc:	4b09      	ldr	r3, [pc, #36]	; (800cf24 <VL53L0X_RdDWord+0x74>)
 800cefe:	785b      	ldrb	r3, [r3, #1]
 800cf00:	041b      	lsls	r3, r3, #16
 800cf02:	441a      	add	r2, r3
 800cf04:	4b07      	ldr	r3, [pc, #28]	; (800cf24 <VL53L0X_RdDWord+0x74>)
 800cf06:	789b      	ldrb	r3, [r3, #2]
 800cf08:	021b      	lsls	r3, r3, #8
 800cf0a:	4413      	add	r3, r2
 800cf0c:	4a05      	ldr	r2, [pc, #20]	; (800cf24 <VL53L0X_RdDWord+0x74>)
 800cf0e:	78d2      	ldrb	r2, [r2, #3]
 800cf10:	441a      	add	r2, r3
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800cf16:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	3718      	adds	r7, #24
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bd80      	pop	{r7, pc}
 800cf22:	bf00      	nop
 800cf24:	20000784 	.word	0x20000784

0800cf28 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b084      	sub	sp, #16
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800cf30:	2300      	movs	r3, #0
 800cf32:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800cf34:	2002      	movs	r0, #2
 800cf36:	f7f4 fe15 	bl	8001b64 <HAL_Delay>
    return status;
 800cf3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cf3e:	4618      	mov	r0, r3
 800cf40:	3710      	adds	r7, #16
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}
	...

0800cf48 <__libc_init_array>:
 800cf48:	b570      	push	{r4, r5, r6, lr}
 800cf4a:	4d0d      	ldr	r5, [pc, #52]	; (800cf80 <__libc_init_array+0x38>)
 800cf4c:	4c0d      	ldr	r4, [pc, #52]	; (800cf84 <__libc_init_array+0x3c>)
 800cf4e:	1b64      	subs	r4, r4, r5
 800cf50:	10a4      	asrs	r4, r4, #2
 800cf52:	2600      	movs	r6, #0
 800cf54:	42a6      	cmp	r6, r4
 800cf56:	d109      	bne.n	800cf6c <__libc_init_array+0x24>
 800cf58:	4d0b      	ldr	r5, [pc, #44]	; (800cf88 <__libc_init_array+0x40>)
 800cf5a:	4c0c      	ldr	r4, [pc, #48]	; (800cf8c <__libc_init_array+0x44>)
 800cf5c:	f000 f836 	bl	800cfcc <_init>
 800cf60:	1b64      	subs	r4, r4, r5
 800cf62:	10a4      	asrs	r4, r4, #2
 800cf64:	2600      	movs	r6, #0
 800cf66:	42a6      	cmp	r6, r4
 800cf68:	d105      	bne.n	800cf76 <__libc_init_array+0x2e>
 800cf6a:	bd70      	pop	{r4, r5, r6, pc}
 800cf6c:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf70:	4798      	blx	r3
 800cf72:	3601      	adds	r6, #1
 800cf74:	e7ee      	b.n	800cf54 <__libc_init_array+0xc>
 800cf76:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf7a:	4798      	blx	r3
 800cf7c:	3601      	adds	r6, #1
 800cf7e:	e7f2      	b.n	800cf66 <__libc_init_array+0x1e>
 800cf80:	0800d05c 	.word	0x0800d05c
 800cf84:	0800d05c 	.word	0x0800d05c
 800cf88:	0800d05c 	.word	0x0800d05c
 800cf8c:	0800d060 	.word	0x0800d060

0800cf90 <memcpy>:
 800cf90:	440a      	add	r2, r1
 800cf92:	4291      	cmp	r1, r2
 800cf94:	f100 33ff 	add.w	r3, r0, #4294967295
 800cf98:	d100      	bne.n	800cf9c <memcpy+0xc>
 800cf9a:	4770      	bx	lr
 800cf9c:	b510      	push	{r4, lr}
 800cf9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cfa2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cfa6:	4291      	cmp	r1, r2
 800cfa8:	d1f9      	bne.n	800cf9e <memcpy+0xe>
 800cfaa:	bd10      	pop	{r4, pc}

0800cfac <memset>:
 800cfac:	4402      	add	r2, r0
 800cfae:	4603      	mov	r3, r0
 800cfb0:	4293      	cmp	r3, r2
 800cfb2:	d100      	bne.n	800cfb6 <memset+0xa>
 800cfb4:	4770      	bx	lr
 800cfb6:	f803 1b01 	strb.w	r1, [r3], #1
 800cfba:	e7f9      	b.n	800cfb0 <memset+0x4>

0800cfbc <strcpy>:
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cfc2:	f803 2b01 	strb.w	r2, [r3], #1
 800cfc6:	2a00      	cmp	r2, #0
 800cfc8:	d1f9      	bne.n	800cfbe <strcpy+0x2>
 800cfca:	4770      	bx	lr

0800cfcc <_init>:
 800cfcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfce:	bf00      	nop
 800cfd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfd2:	bc08      	pop	{r3}
 800cfd4:	469e      	mov	lr, r3
 800cfd6:	4770      	bx	lr

0800cfd8 <_fini>:
 800cfd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfda:	bf00      	nop
 800cfdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfde:	bc08      	pop	{r3}
 800cfe0:	469e      	mov	lr, r3
 800cfe2:	4770      	bx	lr
