
RTPCombined.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc44  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800ce00  0800ce00  0001ce00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce70  0800ce70  000202cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800ce70  0800ce70  0001ce70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ce78  0800ce78  000202cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce78  0800ce78  0001ce78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce7c  0800ce7c  0001ce7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002cc  20000000  0800ce80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000051c  200002d0  0800d14c  000202d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200007ec  0800d14c  000207ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022dcc  00000000  00000000  000202fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036b7  00000000  00000000  000430c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001958  00000000  00000000  00046780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001800  00000000  00000000  000480d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005188  00000000  00000000  000498d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e895  00000000  00000000  0004ea60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a930  00000000  00000000  0006d2f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00187c25  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ca0  00000000  00000000  00187c78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	200002d0 	.word	0x200002d0
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800cde8 	.word	0x0800cde8

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	200002d4 	.word	0x200002d4
 80001f8:	0800cde8 	.word	0x0800cde8

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <modeSwitch>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void modeSwitch(RTP_MODE mode){
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	71fb      	strb	r3, [r7, #7]

}
 800050a:	bf00      	nop
 800050c:	370c      	adds	r7, #12
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr
	...

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051e:	f001 fa50 	bl	80019c2 <HAL_Init>

  /* USER CODE BEGIN Init */

	//Initialize stepper structures
	initStepper(&thetaMotor, &htim3, TIM_CHANNEL_1, thetaDir_GPIO_Port, thetaDir_Pin, 33);
 8000522:	2321      	movs	r3, #33	; 0x21
 8000524:	9301      	str	r3, [sp, #4]
 8000526:	2320      	movs	r3, #32
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800052e:	2200      	movs	r2, #0
 8000530:	499b      	ldr	r1, [pc, #620]	; (80007a0 <main+0x288>)
 8000532:	489c      	ldr	r0, [pc, #624]	; (80007a4 <main+0x28c>)
 8000534:	f000 fe70 	bl	8001218 <initStepper>
	initStepper(&yMotor,&htim2,TIM_CHANNEL_1,yDir_GPIO_Port,yDir_Pin, 400);
 8000538:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800053c:	9301      	str	r3, [sp, #4]
 800053e:	2340      	movs	r3, #64	; 0x40
 8000540:	9300      	str	r3, [sp, #0]
 8000542:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000546:	2200      	movs	r2, #0
 8000548:	4997      	ldr	r1, [pc, #604]	; (80007a8 <main+0x290>)
 800054a:	4898      	ldr	r0, [pc, #608]	; (80007ac <main+0x294>)
 800054c:	f000 fe64 	bl	8001218 <initStepper>
	initStepper(&rMotor, &htim4, TIM_CHANNEL_3, rDir_GPIO_Port, rDir_Pin, 400);
 8000550:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000554:	9301      	str	r3, [sp, #4]
 8000556:	2380      	movs	r3, #128	; 0x80
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800055e:	2208      	movs	r2, #8
 8000560:	4993      	ldr	r1, [pc, #588]	; (80007b0 <main+0x298>)
 8000562:	4894      	ldr	r0, [pc, #592]	; (80007b4 <main+0x29c>)
 8000564:	f000 fe58 	bl	8001218 <initStepper>
	yMotor.PPS_ZeroDefault = 200;
 8000568:	4b90      	ldr	r3, [pc, #576]	; (80007ac <main+0x294>)
 800056a:	22c8      	movs	r2, #200	; 0xc8
 800056c:	615a      	str	r2, [r3, #20]
	thetaMotor.PPS_ZeroDefault = 200;
 800056e:	4b8d      	ldr	r3, [pc, #564]	; (80007a4 <main+0x28c>)
 8000570:	22c8      	movs	r2, #200	; 0xc8
 8000572:	615a      	str	r2, [r3, #20]
	rMotor.PPS_ZeroDefault = 200;
 8000574:	4b8f      	ldr	r3, [pc, #572]	; (80007b4 <main+0x29c>)
 8000576:	22c8      	movs	r2, #200	; 0xc8
 8000578:	615a      	str	r2, [r3, #20]

	InitSerialFromPC(&hlpuart1,rxBuffer);
 800057a:	498f      	ldr	r1, [pc, #572]	; (80007b8 <main+0x2a0>)
 800057c:	488f      	ldr	r0, [pc, #572]	; (80007bc <main+0x2a4>)
 800057e:	f000 fe35 	bl	80011ec <InitSerialFromPC>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f929 	bl	80007d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 fc0f 	bl	8000da8 <MX_GPIO_Init>
  MX_TIM2_Init();
 800058a:	f000 fa57 	bl	8000a3c <MX_TIM2_Init>
  MX_TIM4_Init();
 800058e:	f000 fb45 	bl	8000c1c <MX_TIM4_Init>
  MX_LPUART1_UART_Init();
 8000592:	f000 f9b3 	bl	80008fc <MX_LPUART1_UART_Init>
  MX_I2C2_Init();
 8000596:	f000 f971 	bl	800087c <MX_I2C2_Init>
  MX_TIM3_Init();
 800059a:	f000 fac7 	bl	8000b2c <MX_TIM3_Init>
  MX_TIM5_Init();
 800059e:	f000 fbb5 	bl	8000d0c <MX_TIM5_Init>
  MX_TIM1_Init();
 80005a2:	f000 f9f7 	bl	8000994 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	//Enable Timer Interrupts
	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE);
 80005a6:	4b7e      	ldr	r3, [pc, #504]	; (80007a0 <main+0x288>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	68da      	ldr	r2, [r3, #12]
 80005ac:	4b7c      	ldr	r3, [pc, #496]	; (80007a0 <main+0x288>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f042 0201 	orr.w	r2, r2, #1
 80005b4:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 80005b6:	4b7c      	ldr	r3, [pc, #496]	; (80007a8 <main+0x290>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	68da      	ldr	r2, [r3, #12]
 80005bc:	4b7a      	ldr	r3, [pc, #488]	; (80007a8 <main+0x290>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f042 0201 	orr.w	r2, r2, #1
 80005c4:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_UPDATE);
 80005c6:	4b7a      	ldr	r3, [pc, #488]	; (80007b0 <main+0x298>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	68da      	ldr	r2, [r3, #12]
 80005cc:	4b78      	ldr	r3, [pc, #480]	; (80007b0 <main+0x298>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f042 0201 	orr.w	r2, r2, #1
 80005d4:	60da      	str	r2, [r3, #12]

	Dev->I2cHandle = &hi2c2;
 80005d6:	4b7a      	ldr	r3, [pc, #488]	; (80007c0 <main+0x2a8>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a7a      	ldr	r2, [pc, #488]	; (80007c4 <main+0x2ac>)
 80005dc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	Dev->I2cDevAddr = 0x52;
 80005e0:	4b77      	ldr	r3, [pc, #476]	; (80007c0 <main+0x2a8>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2252      	movs	r2, #82	; 0x52
 80005e6:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

	// VL53L0X init for Single Measurement
	//

	VL53L0X_WaitDeviceBooted( Dev );
 80005ea:	4b75      	ldr	r3, [pc, #468]	; (80007c0 <main+0x2a8>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4618      	mov	r0, r3
 80005f0:	f007 feb4 	bl	800835c <VL53L0X_WaitDeviceBooted>
	VL53L0X_DataInit( Dev );
 80005f4:	4b72      	ldr	r3, [pc, #456]	; (80007c0 <main+0x2a8>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4618      	mov	r0, r3
 80005fa:	f007 fbc9 	bl	8007d90 <VL53L0X_DataInit>
	VL53L0X_StaticInit( Dev );
 80005fe:	4b70      	ldr	r3, [pc, #448]	; (80007c0 <main+0x2a8>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4618      	mov	r0, r3
 8000604:	f007 fd28 	bl	8008058 <VL53L0X_StaticInit>
	VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 8000608:	4b6d      	ldr	r3, [pc, #436]	; (80007c0 <main+0x2a8>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	1c7a      	adds	r2, r7, #1
 800060e:	1cb9      	adds	r1, r7, #2
 8000610:	4618      	mov	r0, r3
 8000612:	f008 fbc3 	bl	8008d9c <VL53L0X_PerformRefCalibration>
	VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 8000616:	4b6a      	ldr	r3, [pc, #424]	; (80007c0 <main+0x2a8>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	1cfa      	adds	r2, r7, #3
 800061c:	1d39      	adds	r1, r7, #4
 800061e:	4618      	mov	r0, r3
 8000620:	f009 f84a 	bl	80096b8 <VL53L0X_PerformRefSpadManagement>
	VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8000624:	4b66      	ldr	r3, [pc, #408]	; (80007c0 <main+0x2a8>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f007 ff34 	bl	8008498 <VL53L0X_SetDeviceMode>

	// Enable/Disable Sigma and Signal check
	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 8000630:	4b63      	ldr	r3, [pc, #396]	; (80007c0 <main+0x2a8>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2201      	movs	r2, #1
 8000636:	2100      	movs	r1, #0
 8000638:	4618      	mov	r0, r3
 800063a:	f008 f9a9 	bl	8008990 <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 800063e:	4b60      	ldr	r3, [pc, #384]	; (80007c0 <main+0x2a8>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	2201      	movs	r2, #1
 8000644:	2101      	movs	r1, #1
 8000646:	4618      	mov	r0, r3
 8000648:	f008 f9a2 	bl	8008990 <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 800064c:	4b5c      	ldr	r3, [pc, #368]	; (80007c0 <main+0x2a8>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f641 1299 	movw	r2, #6553	; 0x1999
 8000654:	2101      	movs	r1, #1
 8000656:	4618      	mov	r0, r3
 8000658:	f008 fa4a 	bl	8008af0 <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 800065c:	4b58      	ldr	r3, [pc, #352]	; (80007c0 <main+0x2a8>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f008 fa42 	bl	8008af0 <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 33000);
 800066c:	4b54      	ldr	r3, [pc, #336]	; (80007c0 <main+0x2a8>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f248 01e8 	movw	r1, #33000	; 0x80e8
 8000674:	4618      	mov	r0, r3
 8000676:	f007 ff6d 	bl	8008554 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 800067a:	4b51      	ldr	r3, [pc, #324]	; (80007c0 <main+0x2a8>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	2212      	movs	r2, #18
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f007 ff8c 	bl	80085a0 <VL53L0X_SetVcselPulsePeriod>
	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8000688:	4b4d      	ldr	r3, [pc, #308]	; (80007c0 <main+0x2a8>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	220e      	movs	r2, #14
 800068e:	2101      	movs	r1, #1
 8000690:	4618      	mov	r0, r3
 8000692:	f007 ff85 	bl	80085a0 <VL53L0X_SetVcselPulsePeriod>

	//Enable UART Enable IT
	HAL_UART_Receive_IT(&hlpuart1, rxBuffer, 6); //receive 6 bytes
 8000696:	2206      	movs	r2, #6
 8000698:	4947      	ldr	r1, [pc, #284]	; (80007b8 <main+0x2a0>)
 800069a:	4848      	ldr	r0, [pc, #288]	; (80007bc <main+0x2a4>)
 800069c:	f005 fbd4 	bl	8005e48 <HAL_UART_Receive_IT>

	//Start timer for uSDelay for HX711
	HAL_TIM_Base_Start(&htim5);
 80006a0:	4849      	ldr	r0, [pc, #292]	; (80007c8 <main+0x2b0>)
 80006a2:	f004 f8f9 	bl	8004898 <HAL_TIM_Base_Start>

	HAL_Delay(1000);
 80006a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006aa:	f001 f9ff 	bl	8001aac <HAL_Delay>
	//	pressureZero = hx711_value_ave(&loadCell, 5);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	timer = HAL_GetTick();
 80006ae:	f001 f9f1 	bl	8001a94 <HAL_GetTick>
 80006b2:	4603      	mov	r3, r0
 80006b4:	4a45      	ldr	r2, [pc, #276]	; (80007cc <main+0x2b4>)
 80006b6:	6013      	str	r3, [r2, #0]

	while (1)
	{
		/*** STANDBY MODE ***/
		if(rtpMode == RTP_STANDBY){
 80006b8:	4b45      	ldr	r3, [pc, #276]	; (80007d0 <main+0x2b8>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d0fb      	beq.n	80006b8 <main+0x1a0>

		}

		/*** ZEROING MODE ***/
		else if(rtpMode == RTP_ZERO){
 80006c0:	4b43      	ldr	r3, [pc, #268]	; (80007d0 <main+0x2b8>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d161      	bne.n	800078c <main+0x274>
			//zeroing FSM
			switch(zeroMode){
 80006c8:	4b42      	ldr	r3, [pc, #264]	; (80007d4 <main+0x2bc>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b06      	cmp	r3, #6
 80006ce:	d8f3      	bhi.n	80006b8 <main+0x1a0>
 80006d0:	a201      	add	r2, pc, #4	; (adr r2, 80006d8 <main+0x1c0>)
 80006d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006d6:	bf00      	nop
 80006d8:	080006f5 	.word	0x080006f5
 80006dc:	08000709 	.word	0x08000709
 80006e0:	08000723 	.word	0x08000723
 80006e4:	08000737 	.word	0x08000737
 80006e8:	08000751 	.word	0x08000751
 80006ec:	08000765 	.word	0x08000765
 80006f0:	0800077f 	.word	0x0800077f
			case 0:
				GoHome(&rMotor);
 80006f4:	482f      	ldr	r0, [pc, #188]	; (80007b4 <main+0x29c>)
 80006f6:	f001 f913 	bl	8001920 <GoHome>
				zeroMode++;
 80006fa:	4b36      	ldr	r3, [pc, #216]	; (80007d4 <main+0x2bc>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	3301      	adds	r3, #1
 8000700:	b2da      	uxtb	r2, r3
 8000702:	4b34      	ldr	r3, [pc, #208]	; (80007d4 <main+0x2bc>)
 8000704:	701a      	strb	r2, [r3, #0]
				break;
 8000706:	e04a      	b.n	800079e <main+0x286>
			case 1:
				if(rMotor.Status == Stopped) zeroMode++;
 8000708:	4b2a      	ldr	r3, [pc, #168]	; (80007b4 <main+0x29c>)
 800070a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800070e:	b2db      	uxtb	r3, r3
 8000710:	2b03      	cmp	r3, #3
 8000712:	d13f      	bne.n	8000794 <main+0x27c>
 8000714:	4b2f      	ldr	r3, [pc, #188]	; (80007d4 <main+0x2bc>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	3301      	adds	r3, #1
 800071a:	b2da      	uxtb	r2, r3
 800071c:	4b2d      	ldr	r3, [pc, #180]	; (80007d4 <main+0x2bc>)
 800071e:	701a      	strb	r2, [r3, #0]
				break;
 8000720:	e038      	b.n	8000794 <main+0x27c>
			case 2:
				GoHome(&thetaMotor);
 8000722:	4820      	ldr	r0, [pc, #128]	; (80007a4 <main+0x28c>)
 8000724:	f001 f8fc 	bl	8001920 <GoHome>
				zeroMode++;
 8000728:	4b2a      	ldr	r3, [pc, #168]	; (80007d4 <main+0x2bc>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	3301      	adds	r3, #1
 800072e:	b2da      	uxtb	r2, r3
 8000730:	4b28      	ldr	r3, [pc, #160]	; (80007d4 <main+0x2bc>)
 8000732:	701a      	strb	r2, [r3, #0]
				break;
 8000734:	e033      	b.n	800079e <main+0x286>
			case 3:
				if(thetaMotor.Status == Stopped) zeroMode++;
 8000736:	4b1b      	ldr	r3, [pc, #108]	; (80007a4 <main+0x28c>)
 8000738:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800073c:	b2db      	uxtb	r3, r3
 800073e:	2b03      	cmp	r3, #3
 8000740:	d12a      	bne.n	8000798 <main+0x280>
 8000742:	4b24      	ldr	r3, [pc, #144]	; (80007d4 <main+0x2bc>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	3301      	adds	r3, #1
 8000748:	b2da      	uxtb	r2, r3
 800074a:	4b22      	ldr	r3, [pc, #136]	; (80007d4 <main+0x2bc>)
 800074c:	701a      	strb	r2, [r3, #0]
				break;
 800074e:	e023      	b.n	8000798 <main+0x280>
			case 4:
				GoHome(&yMotor);
 8000750:	4816      	ldr	r0, [pc, #88]	; (80007ac <main+0x294>)
 8000752:	f001 f8e5 	bl	8001920 <GoHome>
				zeroMode++;
 8000756:	4b1f      	ldr	r3, [pc, #124]	; (80007d4 <main+0x2bc>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	3301      	adds	r3, #1
 800075c:	b2da      	uxtb	r2, r3
 800075e:	4b1d      	ldr	r3, [pc, #116]	; (80007d4 <main+0x2bc>)
 8000760:	701a      	strb	r2, [r3, #0]
				break;
 8000762:	e01c      	b.n	800079e <main+0x286>
			case 5:
				if(yMotor.Status == Stopped) zeroMode++;
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <main+0x294>)
 8000766:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800076a:	b2db      	uxtb	r3, r3
 800076c:	2b03      	cmp	r3, #3
 800076e:	d115      	bne.n	800079c <main+0x284>
 8000770:	4b18      	ldr	r3, [pc, #96]	; (80007d4 <main+0x2bc>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	3301      	adds	r3, #1
 8000776:	b2da      	uxtb	r2, r3
 8000778:	4b16      	ldr	r3, [pc, #88]	; (80007d4 <main+0x2bc>)
 800077a:	701a      	strb	r2, [r3, #0]
				break;
 800077c:	e00e      	b.n	800079c <main+0x284>
			case 6:
				zeroMode = 0;
 800077e:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <main+0x2bc>)
 8000780:	2200      	movs	r2, #0
 8000782:	701a      	strb	r2, [r3, #0]
				modeSwitch(RTP_STANDBY);
 8000784:	2000      	movs	r0, #0
 8000786:	f7ff febb 	bl	8000500 <modeSwitch>
				break;
 800078a:	e008      	b.n	800079e <main+0x286>
			}

		}

		/*** TATTOO MODE ***/
		else if(rtpMode == RTP_TATTOO){
 800078c:	4b10      	ldr	r3, [pc, #64]	; (80007d0 <main+0x2b8>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b02      	cmp	r3, #2
 8000792:	e791      	b.n	80006b8 <main+0x1a0>
				break;
 8000794:	bf00      	nop
 8000796:	e78f      	b.n	80006b8 <main+0x1a0>
				break;
 8000798:	bf00      	nop
 800079a:	e78d      	b.n	80006b8 <main+0x1a0>
				break;
 800079c:	bf00      	nop
		if(rtpMode == RTP_STANDBY){
 800079e:	e78b      	b.n	80006b8 <main+0x1a0>
 80007a0:	20000468 	.word	0x20000468
 80007a4:	20000550 	.word	0x20000550
 80007a8:	2000041c 	.word	0x2000041c
 80007ac:	20000588 	.word	0x20000588
 80007b0:	200004b4 	.word	0x200004b4
 80007b4:	200005c0 	.word	0x200005c0
 80007b8:	2000078c 	.word	0x2000078c
 80007bc:	20000340 	.word	0x20000340
 80007c0:	20000000 	.word	0x20000000
 80007c4:	200002ec 	.word	0x200002ec
 80007c8:	20000500 	.word	0x20000500
 80007cc:	20000788 	.word	0x20000788
 80007d0:	2000054c 	.word	0x2000054c
 80007d4:	2000054d 	.word	0x2000054d

080007d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b098      	sub	sp, #96	; 0x60
 80007dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007de:	f107 0318 	add.w	r3, r7, #24
 80007e2:	2248      	movs	r2, #72	; 0x48
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f00c faee 	bl	800cdc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80007fa:	2000      	movs	r0, #0
 80007fc:	f002 fab2 	bl	8002d64 <HAL_PWREx_ControlVoltageScaling>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000806:	f000 fceb 	bl	80011e0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800080a:	2310      	movs	r3, #16
 800080c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800080e:	2301      	movs	r3, #1
 8000810:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000816:	2360      	movs	r3, #96	; 0x60
 8000818:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081a:	2302      	movs	r3, #2
 800081c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800081e:	2301      	movs	r3, #1
 8000820:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000822:	2301      	movs	r3, #1
 8000824:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000826:	2332      	movs	r3, #50	; 0x32
 8000828:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800082a:	2302      	movs	r3, #2
 800082c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800082e:	2302      	movs	r3, #2
 8000830:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000832:	2302      	movs	r3, #2
 8000834:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000836:	f107 0318 	add.w	r3, r7, #24
 800083a:	4618      	mov	r0, r3
 800083c:	f002 fb46 	bl	8002ecc <HAL_RCC_OscConfig>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000846:	f000 fccb 	bl	80011e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084a:	230f      	movs	r3, #15
 800084c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084e:	2303      	movs	r3, #3
 8000850:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	2104      	movs	r1, #4
 8000862:	4618      	mov	r0, r3
 8000864:	f002 ffae 	bl	80037c4 <HAL_RCC_ClockConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800086e:	f000 fcb7 	bl	80011e0 <Error_Handler>
  }
}
 8000872:	bf00      	nop
 8000874:	3760      	adds	r7, #96	; 0x60
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
	...

0800087c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000880:	4b1b      	ldr	r3, [pc, #108]	; (80008f0 <MX_I2C2_Init+0x74>)
 8000882:	4a1c      	ldr	r2, [pc, #112]	; (80008f4 <MX_I2C2_Init+0x78>)
 8000884:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10C0ECFF;
 8000886:	4b1a      	ldr	r3, [pc, #104]	; (80008f0 <MX_I2C2_Init+0x74>)
 8000888:	4a1b      	ldr	r2, [pc, #108]	; (80008f8 <MX_I2C2_Init+0x7c>)
 800088a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800088c:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <MX_I2C2_Init+0x74>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000892:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <MX_I2C2_Init+0x74>)
 8000894:	2201      	movs	r2, #1
 8000896:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000898:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <MX_I2C2_Init+0x74>)
 800089a:	2200      	movs	r2, #0
 800089c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800089e:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <MX_I2C2_Init+0x74>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008a4:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <MX_I2C2_Init+0x74>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <MX_I2C2_Init+0x74>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <MX_I2C2_Init+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008b6:	480e      	ldr	r0, [pc, #56]	; (80008f0 <MX_I2C2_Init+0x74>)
 80008b8:	f001 fcaa 	bl	8002210 <HAL_I2C_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80008c2:	f000 fc8d 	bl	80011e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008c6:	2100      	movs	r1, #0
 80008c8:	4809      	ldr	r0, [pc, #36]	; (80008f0 <MX_I2C2_Init+0x74>)
 80008ca:	f002 f993 	bl	8002bf4 <HAL_I2CEx_ConfigAnalogFilter>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008d4:	f000 fc84 	bl	80011e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008d8:	2100      	movs	r1, #0
 80008da:	4805      	ldr	r0, [pc, #20]	; (80008f0 <MX_I2C2_Init+0x74>)
 80008dc:	f002 f9d5 	bl	8002c8a <HAL_I2CEx_ConfigDigitalFilter>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008e6:	f000 fc7b 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	200002ec 	.word	0x200002ec
 80008f4:	40005800 	.word	0x40005800
 80008f8:	10c0ecff 	.word	0x10c0ecff

080008fc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000900:	4b22      	ldr	r3, [pc, #136]	; (800098c <MX_LPUART1_UART_Init+0x90>)
 8000902:	4a23      	ldr	r2, [pc, #140]	; (8000990 <MX_LPUART1_UART_Init+0x94>)
 8000904:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000906:	4b21      	ldr	r3, [pc, #132]	; (800098c <MX_LPUART1_UART_Init+0x90>)
 8000908:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800090c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800090e:	4b1f      	ldr	r3, [pc, #124]	; (800098c <MX_LPUART1_UART_Init+0x90>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000914:	4b1d      	ldr	r3, [pc, #116]	; (800098c <MX_LPUART1_UART_Init+0x90>)
 8000916:	2200      	movs	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800091a:	4b1c      	ldr	r3, [pc, #112]	; (800098c <MX_LPUART1_UART_Init+0x90>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000920:	4b1a      	ldr	r3, [pc, #104]	; (800098c <MX_LPUART1_UART_Init+0x90>)
 8000922:	220c      	movs	r2, #12
 8000924:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000926:	4b19      	ldr	r3, [pc, #100]	; (800098c <MX_LPUART1_UART_Init+0x90>)
 8000928:	2200      	movs	r2, #0
 800092a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800092c:	4b17      	ldr	r3, [pc, #92]	; (800098c <MX_LPUART1_UART_Init+0x90>)
 800092e:	2200      	movs	r2, #0
 8000930:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000932:	4b16      	ldr	r3, [pc, #88]	; (800098c <MX_LPUART1_UART_Init+0x90>)
 8000934:	2200      	movs	r2, #0
 8000936:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000938:	4b14      	ldr	r3, [pc, #80]	; (800098c <MX_LPUART1_UART_Init+0x90>)
 800093a:	2200      	movs	r2, #0
 800093c:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800093e:	4b13      	ldr	r3, [pc, #76]	; (800098c <MX_LPUART1_UART_Init+0x90>)
 8000940:	2200      	movs	r2, #0
 8000942:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000944:	4811      	ldr	r0, [pc, #68]	; (800098c <MX_LPUART1_UART_Init+0x90>)
 8000946:	f005 fa2f 	bl	8005da8 <HAL_UART_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000950:	f000 fc46 	bl	80011e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000954:	2100      	movs	r1, #0
 8000956:	480d      	ldr	r0, [pc, #52]	; (800098c <MX_LPUART1_UART_Init+0x90>)
 8000958:	f007 f93b 	bl	8007bd2 <HAL_UARTEx_SetTxFifoThreshold>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000962:	f000 fc3d 	bl	80011e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000966:	2100      	movs	r1, #0
 8000968:	4808      	ldr	r0, [pc, #32]	; (800098c <MX_LPUART1_UART_Init+0x90>)
 800096a:	f007 f970 	bl	8007c4e <HAL_UARTEx_SetRxFifoThreshold>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000974:	f000 fc34 	bl	80011e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000978:	4804      	ldr	r0, [pc, #16]	; (800098c <MX_LPUART1_UART_Init+0x90>)
 800097a:	f007 f8f1 	bl	8007b60 <HAL_UARTEx_DisableFifoMode>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000984:	f000 fc2c 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20000340 	.word	0x20000340
 8000990:	40008000 	.word	0x40008000

08000994 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b088      	sub	sp, #32
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800099a:	f107 0310 	add.w	r3, r7, #16
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009b2:	4b20      	ldr	r3, [pc, #128]	; (8000a34 <MX_TIM1_Init+0xa0>)
 80009b4:	4a20      	ldr	r2, [pc, #128]	; (8000a38 <MX_TIM1_Init+0xa4>)
 80009b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009b8:	4b1e      	ldr	r3, [pc, #120]	; (8000a34 <MX_TIM1_Init+0xa0>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009be:	4b1d      	ldr	r3, [pc, #116]	; (8000a34 <MX_TIM1_Init+0xa0>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009c4:	4b1b      	ldr	r3, [pc, #108]	; (8000a34 <MX_TIM1_Init+0xa0>)
 80009c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009cc:	4b19      	ldr	r3, [pc, #100]	; (8000a34 <MX_TIM1_Init+0xa0>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009d2:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <MX_TIM1_Init+0xa0>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d8:	4b16      	ldr	r3, [pc, #88]	; (8000a34 <MX_TIM1_Init+0xa0>)
 80009da:	2200      	movs	r2, #0
 80009dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009de:	4815      	ldr	r0, [pc, #84]	; (8000a34 <MX_TIM1_Init+0xa0>)
 80009e0:	f003 ff02 	bl	80047e8 <HAL_TIM_Base_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80009ea:	f000 fbf9 	bl	80011e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009f4:	f107 0310 	add.w	r3, r7, #16
 80009f8:	4619      	mov	r1, r3
 80009fa:	480e      	ldr	r0, [pc, #56]	; (8000a34 <MX_TIM1_Init+0xa0>)
 80009fc:	f004 fc0c 	bl	8005218 <HAL_TIM_ConfigClockSource>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000a06:	f000 fbeb 	bl	80011e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4806      	ldr	r0, [pc, #24]	; (8000a34 <MX_TIM1_Init+0xa0>)
 8000a1c:	f005 f91e 	bl	8005c5c <HAL_TIMEx_MasterConfigSynchronization>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000a26:	f000 fbdb 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	3720      	adds	r7, #32
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	200003d0 	.word	0x200003d0
 8000a38:	40012c00 	.word	0x40012c00

08000a3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08e      	sub	sp, #56	; 0x38
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a50:	f107 031c 	add.w	r3, r7, #28
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a5c:	463b      	mov	r3, r7
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
 8000a66:	60da      	str	r2, [r3, #12]
 8000a68:	611a      	str	r2, [r3, #16]
 8000a6a:	615a      	str	r2, [r3, #20]
 8000a6c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a6e:	4b2e      	ldr	r3, [pc, #184]	; (8000b28 <MX_TIM2_Init+0xec>)
 8000a70:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a74:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8000a76:	4b2c      	ldr	r3, [pc, #176]	; (8000b28 <MX_TIM2_Init+0xec>)
 8000a78:	2263      	movs	r2, #99	; 0x63
 8000a7a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a7c:	4b2a      	ldr	r3, [pc, #168]	; (8000b28 <MX_TIM2_Init+0xec>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1250-1;
 8000a82:	4b29      	ldr	r3, [pc, #164]	; (8000b28 <MX_TIM2_Init+0xec>)
 8000a84:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8000a88:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a8a:	4b27      	ldr	r3, [pc, #156]	; (8000b28 <MX_TIM2_Init+0xec>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a90:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <MX_TIM2_Init+0xec>)
 8000a92:	2280      	movs	r2, #128	; 0x80
 8000a94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a96:	4824      	ldr	r0, [pc, #144]	; (8000b28 <MX_TIM2_Init+0xec>)
 8000a98:	f003 fea6 	bl	80047e8 <HAL_TIM_Base_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000aa2:	f000 fb9d 	bl	80011e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aaa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000aac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	481d      	ldr	r0, [pc, #116]	; (8000b28 <MX_TIM2_Init+0xec>)
 8000ab4:	f004 fbb0 	bl	8005218 <HAL_TIM_ConfigClockSource>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000abe:	f000 fb8f 	bl	80011e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ac2:	4819      	ldr	r0, [pc, #100]	; (8000b28 <MX_TIM2_Init+0xec>)
 8000ac4:	f003 ff77 	bl	80049b6 <HAL_TIM_PWM_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000ace:	f000 fb87 	bl	80011e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ada:	f107 031c 	add.w	r3, r7, #28
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4811      	ldr	r0, [pc, #68]	; (8000b28 <MX_TIM2_Init+0xec>)
 8000ae2:	f005 f8bb 	bl	8005c5c <HAL_TIMEx_MasterConfigSynchronization>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000aec:	f000 fb78 	bl	80011e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000af0:	2360      	movs	r3, #96	; 0x60
 8000af2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8000af4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000af8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000afa:	2300      	movs	r3, #0
 8000afc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b02:	463b      	mov	r3, r7
 8000b04:	2200      	movs	r2, #0
 8000b06:	4619      	mov	r1, r3
 8000b08:	4807      	ldr	r0, [pc, #28]	; (8000b28 <MX_TIM2_Init+0xec>)
 8000b0a:	f004 fa71 	bl	8004ff0 <HAL_TIM_PWM_ConfigChannel>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000b14:	f000 fb64 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b18:	4803      	ldr	r0, [pc, #12]	; (8000b28 <MX_TIM2_Init+0xec>)
 8000b1a:	f000 fe01 	bl	8001720 <HAL_TIM_MspPostInit>

}
 8000b1e:	bf00      	nop
 8000b20:	3738      	adds	r7, #56	; 0x38
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	2000041c 	.word	0x2000041c

08000b2c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08e      	sub	sp, #56	; 0x38
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	605a      	str	r2, [r3, #4]
 8000b3c:	609a      	str	r2, [r3, #8]
 8000b3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b40:	f107 031c 	add.w	r3, r7, #28
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b4c:	463b      	mov	r3, r7
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	609a      	str	r2, [r3, #8]
 8000b56:	60da      	str	r2, [r3, #12]
 8000b58:	611a      	str	r2, [r3, #16]
 8000b5a:	615a      	str	r2, [r3, #20]
 8000b5c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b5e:	4b2d      	ldr	r3, [pc, #180]	; (8000c14 <MX_TIM3_Init+0xe8>)
 8000b60:	4a2d      	ldr	r2, [pc, #180]	; (8000c18 <MX_TIM3_Init+0xec>)
 8000b62:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8000b64:	4b2b      	ldr	r3, [pc, #172]	; (8000c14 <MX_TIM3_Init+0xe8>)
 8000b66:	2263      	movs	r2, #99	; 0x63
 8000b68:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b6a:	4b2a      	ldr	r3, [pc, #168]	; (8000c14 <MX_TIM3_Init+0xe8>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1250-1;
 8000b70:	4b28      	ldr	r3, [pc, #160]	; (8000c14 <MX_TIM3_Init+0xe8>)
 8000b72:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8000b76:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b78:	4b26      	ldr	r3, [pc, #152]	; (8000c14 <MX_TIM3_Init+0xe8>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b7e:	4b25      	ldr	r3, [pc, #148]	; (8000c14 <MX_TIM3_Init+0xe8>)
 8000b80:	2280      	movs	r2, #128	; 0x80
 8000b82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b84:	4823      	ldr	r0, [pc, #140]	; (8000c14 <MX_TIM3_Init+0xe8>)
 8000b86:	f003 fe2f 	bl	80047e8 <HAL_TIM_Base_Init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000b90:	f000 fb26 	bl	80011e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b98:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	481c      	ldr	r0, [pc, #112]	; (8000c14 <MX_TIM3_Init+0xe8>)
 8000ba2:	f004 fb39 	bl	8005218 <HAL_TIM_ConfigClockSource>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000bac:	f000 fb18 	bl	80011e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000bb0:	4818      	ldr	r0, [pc, #96]	; (8000c14 <MX_TIM3_Init+0xe8>)
 8000bb2:	f003 ff00 	bl	80049b6 <HAL_TIM_PWM_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000bbc:	f000 fb10 	bl	80011e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bc8:	f107 031c 	add.w	r3, r7, #28
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4811      	ldr	r0, [pc, #68]	; (8000c14 <MX_TIM3_Init+0xe8>)
 8000bd0:	f005 f844 	bl	8005c5c <HAL_TIMEx_MasterConfigSynchronization>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000bda:	f000 fb01 	bl	80011e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bde:	2360      	movs	r3, #96	; 0x60
 8000be0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8000be2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000be6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000be8:	2300      	movs	r3, #0
 8000bea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bec:	2300      	movs	r3, #0
 8000bee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bf0:	463b      	mov	r3, r7
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4807      	ldr	r0, [pc, #28]	; (8000c14 <MX_TIM3_Init+0xe8>)
 8000bf8:	f004 f9fa 	bl	8004ff0 <HAL_TIM_PWM_ConfigChannel>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000c02:	f000 faed 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c06:	4803      	ldr	r0, [pc, #12]	; (8000c14 <MX_TIM3_Init+0xe8>)
 8000c08:	f000 fd8a 	bl	8001720 <HAL_TIM_MspPostInit>

}
 8000c0c:	bf00      	nop
 8000c0e:	3738      	adds	r7, #56	; 0x38
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20000468 	.word	0x20000468
 8000c18:	40000400 	.word	0x40000400

08000c1c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08e      	sub	sp, #56	; 0x38
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c30:	f107 031c 	add.w	r3, r7, #28
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c3c:	463b      	mov	r3, r7
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]
 8000c48:	611a      	str	r2, [r3, #16]
 8000c4a:	615a      	str	r2, [r3, #20]
 8000c4c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c4e:	4b2d      	ldr	r3, [pc, #180]	; (8000d04 <MX_TIM4_Init+0xe8>)
 8000c50:	4a2d      	ldr	r2, [pc, #180]	; (8000d08 <MX_TIM4_Init+0xec>)
 8000c52:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 8000c54:	4b2b      	ldr	r3, [pc, #172]	; (8000d04 <MX_TIM4_Init+0xe8>)
 8000c56:	2263      	movs	r2, #99	; 0x63
 8000c58:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c5a:	4b2a      	ldr	r3, [pc, #168]	; (8000d04 <MX_TIM4_Init+0xe8>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1250-1;
 8000c60:	4b28      	ldr	r3, [pc, #160]	; (8000d04 <MX_TIM4_Init+0xe8>)
 8000c62:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8000c66:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c68:	4b26      	ldr	r3, [pc, #152]	; (8000d04 <MX_TIM4_Init+0xe8>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c6e:	4b25      	ldr	r3, [pc, #148]	; (8000d04 <MX_TIM4_Init+0xe8>)
 8000c70:	2280      	movs	r2, #128	; 0x80
 8000c72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000c74:	4823      	ldr	r0, [pc, #140]	; (8000d04 <MX_TIM4_Init+0xe8>)
 8000c76:	f003 fdb7 	bl	80047e8 <HAL_TIM_Base_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000c80:	f000 faae 	bl	80011e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c88:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000c8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c8e:	4619      	mov	r1, r3
 8000c90:	481c      	ldr	r0, [pc, #112]	; (8000d04 <MX_TIM4_Init+0xe8>)
 8000c92:	f004 fac1 	bl	8005218 <HAL_TIM_ConfigClockSource>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000c9c:	f000 faa0 	bl	80011e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000ca0:	4818      	ldr	r0, [pc, #96]	; (8000d04 <MX_TIM4_Init+0xe8>)
 8000ca2:	f003 fe88 	bl	80049b6 <HAL_TIM_PWM_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000cac:	f000 fa98 	bl	80011e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000cb8:	f107 031c 	add.w	r3, r7, #28
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4811      	ldr	r0, [pc, #68]	; (8000d04 <MX_TIM4_Init+0xe8>)
 8000cc0:	f004 ffcc 	bl	8005c5c <HAL_TIMEx_MasterConfigSynchronization>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000cca:	f000 fa89 	bl	80011e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cce:	2360      	movs	r3, #96	; 0x60
 8000cd0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8000cd2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000cd6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ce0:	463b      	mov	r3, r7
 8000ce2:	2208      	movs	r2, #8
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4807      	ldr	r0, [pc, #28]	; (8000d04 <MX_TIM4_Init+0xe8>)
 8000ce8:	f004 f982 	bl	8004ff0 <HAL_TIM_PWM_ConfigChannel>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000cf2:	f000 fa75 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000cf6:	4803      	ldr	r0, [pc, #12]	; (8000d04 <MX_TIM4_Init+0xe8>)
 8000cf8:	f000 fd12 	bl	8001720 <HAL_TIM_MspPostInit>

}
 8000cfc:	bf00      	nop
 8000cfe:	3738      	adds	r7, #56	; 0x38
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	200004b4 	.word	0x200004b4
 8000d08:	40000800 	.word	0x40000800

08000d0c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b088      	sub	sp, #32
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d12:	f107 0310 	add.w	r3, r7, #16
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
 8000d1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d20:	1d3b      	adds	r3, r7, #4
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000d2a:	4b1d      	ldr	r3, [pc, #116]	; (8000da0 <MX_TIM5_Init+0x94>)
 8000d2c:	4a1d      	ldr	r2, [pc, #116]	; (8000da4 <MX_TIM5_Init+0x98>)
 8000d2e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 100-1;
 8000d30:	4b1b      	ldr	r3, [pc, #108]	; (8000da0 <MX_TIM5_Init+0x94>)
 8000d32:	2263      	movs	r2, #99	; 0x63
 8000d34:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d36:	4b1a      	ldr	r3, [pc, #104]	; (8000da0 <MX_TIM5_Init+0x94>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000d3c:	4b18      	ldr	r3, [pc, #96]	; (8000da0 <MX_TIM5_Init+0x94>)
 8000d3e:	f04f 32ff 	mov.w	r2, #4294967295
 8000d42:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d44:	4b16      	ldr	r3, [pc, #88]	; (8000da0 <MX_TIM5_Init+0x94>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d4a:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <MX_TIM5_Init+0x94>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000d50:	4813      	ldr	r0, [pc, #76]	; (8000da0 <MX_TIM5_Init+0x94>)
 8000d52:	f003 fd49 	bl	80047e8 <HAL_TIM_Base_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000d5c:	f000 fa40 	bl	80011e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d64:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000d66:	f107 0310 	add.w	r3, r7, #16
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	480c      	ldr	r0, [pc, #48]	; (8000da0 <MX_TIM5_Init+0x94>)
 8000d6e:	f004 fa53 	bl	8005218 <HAL_TIM_ConfigClockSource>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000d78:	f000 fa32 	bl	80011e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d80:	2300      	movs	r3, #0
 8000d82:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000d84:	1d3b      	adds	r3, r7, #4
 8000d86:	4619      	mov	r1, r3
 8000d88:	4805      	ldr	r0, [pc, #20]	; (8000da0 <MX_TIM5_Init+0x94>)
 8000d8a:	f004 ff67 	bl	8005c5c <HAL_TIMEx_MasterConfigSynchronization>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000d94:	f000 fa24 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000d98:	bf00      	nop
 8000d9a:	3720      	adds	r7, #32
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000500 	.word	0x20000500
 8000da4:	40000c00 	.word	0x40000c00

08000da8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08c      	sub	sp, #48	; 0x30
 8000dac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dae:	f107 031c 	add.w	r3, r7, #28
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]
 8000dbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dbe:	4b6e      	ldr	r3, [pc, #440]	; (8000f78 <MX_GPIO_Init+0x1d0>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc2:	4a6d      	ldr	r2, [pc, #436]	; (8000f78 <MX_GPIO_Init+0x1d0>)
 8000dc4:	f043 0310 	orr.w	r3, r3, #16
 8000dc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dca:	4b6b      	ldr	r3, [pc, #428]	; (8000f78 <MX_GPIO_Init+0x1d0>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dce:	f003 0310 	and.w	r3, r3, #16
 8000dd2:	61bb      	str	r3, [r7, #24]
 8000dd4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dd6:	4b68      	ldr	r3, [pc, #416]	; (8000f78 <MX_GPIO_Init+0x1d0>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dda:	4a67      	ldr	r2, [pc, #412]	; (8000f78 <MX_GPIO_Init+0x1d0>)
 8000ddc:	f043 0320 	orr.w	r3, r3, #32
 8000de0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de2:	4b65      	ldr	r3, [pc, #404]	; (8000f78 <MX_GPIO_Init+0x1d0>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de6:	f003 0320 	and.w	r3, r3, #32
 8000dea:	617b      	str	r3, [r7, #20]
 8000dec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dee:	4b62      	ldr	r3, [pc, #392]	; (8000f78 <MX_GPIO_Init+0x1d0>)
 8000df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df2:	4a61      	ldr	r2, [pc, #388]	; (8000f78 <MX_GPIO_Init+0x1d0>)
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dfa:	4b5f      	ldr	r3, [pc, #380]	; (8000f78 <MX_GPIO_Init+0x1d0>)
 8000dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e06:	4b5c      	ldr	r3, [pc, #368]	; (8000f78 <MX_GPIO_Init+0x1d0>)
 8000e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0a:	4a5b      	ldr	r2, [pc, #364]	; (8000f78 <MX_GPIO_Init+0x1d0>)
 8000e0c:	f043 0302 	orr.w	r3, r3, #2
 8000e10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e12:	4b59      	ldr	r3, [pc, #356]	; (8000f78 <MX_GPIO_Init+0x1d0>)
 8000e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e16:	f003 0302 	and.w	r3, r3, #2
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e1e:	4b56      	ldr	r3, [pc, #344]	; (8000f78 <MX_GPIO_Init+0x1d0>)
 8000e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e22:	4a55      	ldr	r2, [pc, #340]	; (8000f78 <MX_GPIO_Init+0x1d0>)
 8000e24:	f043 0308 	orr.w	r3, r3, #8
 8000e28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e2a:	4b53      	ldr	r3, [pc, #332]	; (8000f78 <MX_GPIO_Init+0x1d0>)
 8000e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2e:	f003 0308 	and.w	r3, r3, #8
 8000e32:	60bb      	str	r3, [r7, #8]
 8000e34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e36:	4b50      	ldr	r3, [pc, #320]	; (8000f78 <MX_GPIO_Init+0x1d0>)
 8000e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3a:	4a4f      	ldr	r2, [pc, #316]	; (8000f78 <MX_GPIO_Init+0x1d0>)
 8000e3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e42:	4b4d      	ldr	r3, [pc, #308]	; (8000f78 <MX_GPIO_Init+0x1d0>)
 8000e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e4a:	607b      	str	r3, [r7, #4]
 8000e4c:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000e4e:	f002 f82d 	bl	8002eac <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e52:	4b49      	ldr	r3, [pc, #292]	; (8000f78 <MX_GPIO_Init+0x1d0>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e56:	4a48      	ldr	r2, [pc, #288]	; (8000f78 <MX_GPIO_Init+0x1d0>)
 8000e58:	f043 0304 	orr.w	r3, r3, #4
 8000e5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e5e:	4b46      	ldr	r3, [pc, #280]	; (8000f78 <MX_GPIO_Init+0x1d0>)
 8000e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e62:	f003 0304 	and.w	r3, r3, #4
 8000e66:	603b      	str	r3, [r7, #0]
 8000e68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, thetaDir_Pin|yDir_Pin|rDir_Pin, GPIO_PIN_RESET);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	21e0      	movs	r1, #224	; 0xe0
 8000e6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e72:	f001 f99d 	bl	80021b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, state3LED_Pin|state2LED_Pin, GPIO_PIN_RESET);
 8000e76:	2200      	movs	r2, #0
 8000e78:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000e7c:	483f      	ldr	r0, [pc, #252]	; (8000f7c <MX_GPIO_Init+0x1d4>)
 8000e7e:	f001 f997 	bl	80021b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, loadCLK_Pin|tofXSHUT_Pin, GPIO_PIN_RESET);
 8000e82:	2200      	movs	r2, #0
 8000e84:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8000e88:	483d      	ldr	r0, [pc, #244]	; (8000f80 <MX_GPIO_Init+0x1d8>)
 8000e8a:	f001 f991 	bl	80021b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(state1LED_GPIO_Port, state1LED_Pin, GPIO_PIN_RESET);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2180      	movs	r1, #128	; 0x80
 8000e92:	483c      	ldr	r0, [pc, #240]	; (8000f84 <MX_GPIO_Init+0x1dc>)
 8000e94:	f001 f98c 	bl	80021b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : thetaDir_Pin yDir_Pin rDir_Pin */
  GPIO_InitStruct.Pin = thetaDir_Pin|yDir_Pin|rDir_Pin;
 8000e98:	23e0      	movs	r3, #224	; 0xe0
 8000e9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea8:	f107 031c 	add.w	r3, r7, #28
 8000eac:	4619      	mov	r1, r3
 8000eae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb2:	f000 ffeb 	bl	8001e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : thLim_Pin yLim_Pin rLim_Pin */
  GPIO_InitStruct.Pin = thLim_Pin|yLim_Pin|rLim_Pin;
 8000eb6:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000eba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ebc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ec0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ec6:	f107 031c 	add.w	r3, r7, #28
 8000eca:	4619      	mov	r1, r3
 8000ecc:	482e      	ldr	r0, [pc, #184]	; (8000f88 <MX_GPIO_Init+0x1e0>)
 8000ece:	f000 ffdd 	bl	8001e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : state3LED_Pin state2LED_Pin */
  GPIO_InitStruct.Pin = state3LED_Pin|state2LED_Pin;
 8000ed2:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000ed6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee4:	f107 031c 	add.w	r3, r7, #28
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4824      	ldr	r0, [pc, #144]	; (8000f7c <MX_GPIO_Init+0x1d4>)
 8000eec:	f000 ffce 	bl	8001e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : loadCLK_Pin tofXSHUT_Pin */
  GPIO_InitStruct.Pin = loadCLK_Pin|tofXSHUT_Pin;
 8000ef0:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8000ef4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2300      	movs	r3, #0
 8000f00:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f02:	f107 031c 	add.w	r3, r7, #28
 8000f06:	4619      	mov	r1, r3
 8000f08:	481d      	ldr	r0, [pc, #116]	; (8000f80 <MX_GPIO_Init+0x1d8>)
 8000f0a:	f000 ffbf 	bl	8001e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : loadDATA_Pin */
  GPIO_InitStruct.Pin = loadDATA_Pin;
 8000f0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f14:	2300      	movs	r3, #0
 8000f16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(loadDATA_GPIO_Port, &GPIO_InitStruct);
 8000f1c:	f107 031c 	add.w	r3, r7, #28
 8000f20:	4619      	mov	r1, r3
 8000f22:	4817      	ldr	r0, [pc, #92]	; (8000f80 <MX_GPIO_Init+0x1d8>)
 8000f24:	f000 ffb2 	bl	8001e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : state1LED_Pin */
  GPIO_InitStruct.Pin = state1LED_Pin;
 8000f28:	2380      	movs	r3, #128	; 0x80
 8000f2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f34:	2300      	movs	r3, #0
 8000f36:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(state1LED_GPIO_Port, &GPIO_InitStruct);
 8000f38:	f107 031c 	add.w	r3, r7, #28
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4811      	ldr	r0, [pc, #68]	; (8000f84 <MX_GPIO_Init+0x1dc>)
 8000f40:	f000 ffa4 	bl	8001e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : modeStandby_Pin modeZero_Pin modeTattoo_Pin modeScan_Pin */
  GPIO_InitStruct.Pin = modeStandby_Pin|modeZero_Pin|modeTattoo_Pin|modeScan_Pin;
 8000f44:	23f0      	movs	r3, #240	; 0xf0
 8000f46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f48:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f52:	f107 031c 	add.w	r3, r7, #28
 8000f56:	4619      	mov	r1, r3
 8000f58:	4809      	ldr	r0, [pc, #36]	; (8000f80 <MX_GPIO_Init+0x1d8>)
 8000f5a:	f000 ff97 	bl	8001e8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2100      	movs	r1, #0
 8000f62:	2028      	movs	r0, #40	; 0x28
 8000f64:	f000 fea1 	bl	8001caa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f68:	2028      	movs	r0, #40	; 0x28
 8000f6a:	f000 feba 	bl	8001ce2 <HAL_NVIC_EnableIRQ>

}
 8000f6e:	bf00      	nop
 8000f70:	3730      	adds	r7, #48	; 0x30
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	48000400 	.word	0x48000400
 8000f80:	48000c00 	.word	0x48000c00
 8000f84:	48000800 	.word	0x48000800
 8000f88:	48001000 	.word	0x48001000

08000f8c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void  HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim){
 8000f8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f90:	b088      	sub	sp, #32
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	61f8      	str	r0, [r7, #28]
	//Theta Motor interrupts
	if(htim == &htim3){
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	4a5c      	ldr	r2, [pc, #368]	; (800110c <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d13b      	bne.n	8001016 <HAL_TIM_PeriodElapsedCallback+0x8a>
		if(thetaMotor.Status == RunningForward){
 8000f9e:	4b5c      	ldr	r3, [pc, #368]	; (8001110 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000fa0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d10d      	bne.n	8000fc6 <HAL_TIM_PeriodElapsedCallback+0x3a>
			thetaMotor.CurrentPosition++;
 8000faa:	4b59      	ldr	r3, [pc, #356]	; (8001110 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000fac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000fb0:	1c51      	adds	r1, r2, #1
 8000fb2:	6139      	str	r1, [r7, #16]
 8000fb4:	f143 0300 	adc.w	r3, r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
 8000fba:	4b55      	ldr	r3, [pc, #340]	; (8001110 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000fbc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000fc0:	e9c3 1208 	strd	r1, r2, [r3, #32]
 8000fc4:	e012      	b.n	8000fec <HAL_TIM_PeriodElapsedCallback+0x60>
		}
		else if (thetaMotor.Status == RunningBackward){
 8000fc6:	4b52      	ldr	r3, [pc, #328]	; (8001110 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000fc8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d10c      	bne.n	8000fec <HAL_TIM_PeriodElapsedCallback+0x60>
			thetaMotor.CurrentPosition--;
 8000fd2:	4b4f      	ldr	r3, [pc, #316]	; (8001110 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000fd4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000fd8:	1e51      	subs	r1, r2, #1
 8000fda:	60b9      	str	r1, [r7, #8]
 8000fdc:	f143 33ff 	adc.w	r3, r3, #4294967295
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	4b4b      	ldr	r3, [pc, #300]	; (8001110 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000fe4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8000fe8:	e9c3 1208 	strd	r1, r2, [r3, #32]
		}
		if(thetaMotor.CurrentPosition == thetaMotor.TargetPosition){
 8000fec:	4b48      	ldr	r3, [pc, #288]	; (8001110 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000fee:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8000ff2:	4b47      	ldr	r3, [pc, #284]	; (8001110 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000ff4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8000ff8:	4299      	cmp	r1, r3
 8000ffa:	bf08      	it	eq
 8000ffc:	4290      	cmpeq	r0, r2
 8000ffe:	d10a      	bne.n	8001016 <HAL_TIM_PeriodElapsedCallback+0x8a>
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001000:	2100      	movs	r1, #0
 8001002:	4842      	ldr	r0, [pc, #264]	; (800110c <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001004:	f003 fe3e 	bl	8004c84 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop(&htim3);
 8001008:	4840      	ldr	r0, [pc, #256]	; (800110c <HAL_TIM_PeriodElapsedCallback+0x180>)
 800100a:	f003 fcad 	bl	8004968 <HAL_TIM_Base_Stop>
			thetaMotor.Status = Stopped;
 800100e:	4b40      	ldr	r3, [pc, #256]	; (8001110 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001010:	2203      	movs	r2, #3
 8001012:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}
	}
	//yMotor Interrupts
	if(htim == &htim2){
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	4a3e      	ldr	r2, [pc, #248]	; (8001114 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d138      	bne.n	8001090 <HAL_TIM_PeriodElapsedCallback+0x104>
		if(yMotor.Status == RunningForward){
 800101e:	4b3e      	ldr	r3, [pc, #248]	; (8001118 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001020:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b01      	cmp	r3, #1
 8001028:	d10d      	bne.n	8001046 <HAL_TIM_PeriodElapsedCallback+0xba>
			yMotor.CurrentPosition++;
 800102a:	4b3b      	ldr	r3, [pc, #236]	; (8001118 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800102c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001030:	1c51      	adds	r1, r2, #1
 8001032:	6039      	str	r1, [r7, #0]
 8001034:	f143 0300 	adc.w	r3, r3, #0
 8001038:	607b      	str	r3, [r7, #4]
 800103a:	4b37      	ldr	r3, [pc, #220]	; (8001118 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800103c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001040:	e9c3 1208 	strd	r1, r2, [r3, #32]
 8001044:	e00f      	b.n	8001066 <HAL_TIM_PeriodElapsedCallback+0xda>
		}
		else if (yMotor.Status == RunningBackward){
 8001046:	4b34      	ldr	r3, [pc, #208]	; (8001118 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001048:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800104c:	b2db      	uxtb	r3, r3
 800104e:	2b02      	cmp	r3, #2
 8001050:	d109      	bne.n	8001066 <HAL_TIM_PeriodElapsedCallback+0xda>
			yMotor.CurrentPosition--;
 8001052:	4b31      	ldr	r3, [pc, #196]	; (8001118 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001054:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001058:	f112 3aff 	adds.w	sl, r2, #4294967295
 800105c:	f143 3bff 	adc.w	fp, r3, #4294967295
 8001060:	4b2d      	ldr	r3, [pc, #180]	; (8001118 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001062:	e9c3 ab08 	strd	sl, fp, [r3, #32]
		}
		if(yMotor.CurrentPosition == yMotor.TargetPosition){
 8001066:	4b2c      	ldr	r3, [pc, #176]	; (8001118 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001068:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800106c:	4b2a      	ldr	r3, [pc, #168]	; (8001118 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800106e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001072:	4299      	cmp	r1, r3
 8001074:	bf08      	it	eq
 8001076:	4290      	cmpeq	r0, r2
 8001078:	d10a      	bne.n	8001090 <HAL_TIM_PeriodElapsedCallback+0x104>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800107a:	2100      	movs	r1, #0
 800107c:	4825      	ldr	r0, [pc, #148]	; (8001114 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800107e:	f003 fe01 	bl	8004c84 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop(&htim2);
 8001082:	4824      	ldr	r0, [pc, #144]	; (8001114 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001084:	f003 fc70 	bl	8004968 <HAL_TIM_Base_Stop>
			yMotor.Status = Stopped;
 8001088:	4b23      	ldr	r3, [pc, #140]	; (8001118 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800108a:	2203      	movs	r2, #3
 800108c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}
	}
	//rMotor Interrupts
	if(htim == &htim4){
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	4a22      	ldr	r2, [pc, #136]	; (800111c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d134      	bne.n	8001102 <HAL_TIM_PeriodElapsedCallback+0x176>
		if(rMotor.Status == RunningForward){
 8001098:	4b21      	ldr	r3, [pc, #132]	; (8001120 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800109a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d10a      	bne.n	80010ba <HAL_TIM_PeriodElapsedCallback+0x12e>
			rMotor.CurrentPosition++;
 80010a4:	4b1e      	ldr	r3, [pc, #120]	; (8001120 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80010a6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80010aa:	f112 0801 	adds.w	r8, r2, #1
 80010ae:	f143 0900 	adc.w	r9, r3, #0
 80010b2:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80010b4:	e9c3 8908 	strd	r8, r9, [r3, #32]
 80010b8:	e00e      	b.n	80010d8 <HAL_TIM_PeriodElapsedCallback+0x14c>
		}
		else if (rMotor.Status == RunningBackward){
 80010ba:	4b19      	ldr	r3, [pc, #100]	; (8001120 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80010bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d108      	bne.n	80010d8 <HAL_TIM_PeriodElapsedCallback+0x14c>
			rMotor.CurrentPosition--;
 80010c6:	4b16      	ldr	r3, [pc, #88]	; (8001120 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80010c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80010cc:	1e54      	subs	r4, r2, #1
 80010ce:	f143 35ff 	adc.w	r5, r3, #4294967295
 80010d2:	4b13      	ldr	r3, [pc, #76]	; (8001120 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80010d4:	e9c3 4508 	strd	r4, r5, [r3, #32]
		}
		if(rMotor.CurrentPosition == rMotor.TargetPosition){
 80010d8:	4b11      	ldr	r3, [pc, #68]	; (8001120 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80010da:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80010de:	4b10      	ldr	r3, [pc, #64]	; (8001120 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80010e0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80010e4:	4299      	cmp	r1, r3
 80010e6:	bf08      	it	eq
 80010e8:	4290      	cmpeq	r0, r2
 80010ea:	d10a      	bne.n	8001102 <HAL_TIM_PeriodElapsedCallback+0x176>
			HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 80010ec:	2108      	movs	r1, #8
 80010ee:	480b      	ldr	r0, [pc, #44]	; (800111c <HAL_TIM_PeriodElapsedCallback+0x190>)
 80010f0:	f003 fdc8 	bl	8004c84 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop(&htim4);
 80010f4:	4809      	ldr	r0, [pc, #36]	; (800111c <HAL_TIM_PeriodElapsedCallback+0x190>)
 80010f6:	f003 fc37 	bl	8004968 <HAL_TIM_Base_Stop>
			rMotor.Status = Stopped;
 80010fa:	4b09      	ldr	r3, [pc, #36]	; (8001120 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80010fc:	2203      	movs	r2, #3
 80010fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}
	}
}
 8001102:	bf00      	nop
 8001104:	3720      	adds	r7, #32
 8001106:	46bd      	mov	sp, r7
 8001108:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800110c:	20000468 	.word	0x20000468
 8001110:	20000550 	.word	0x20000550
 8001114:	2000041c 	.word	0x2000041c
 8001118:	20000588 	.word	0x20000588
 800111c:	200004b4 	.word	0x200004b4
 8001120:	200005c0 	.word	0x200005c0

08001124 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
	//set flag
	uartRecievedFlag = 1;
 800112c:	4b04      	ldr	r3, [pc, #16]	; (8001140 <HAL_UART_RxCpltCallback+0x1c>)
 800112e:	2201      	movs	r2, #1
 8001130:	701a      	strb	r2, [r3, #0]
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	2000079c 	.word	0x2000079c

08001144 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	80fb      	strh	r3, [r7, #6]

	switch(GPIO_Pin){
 800114e:	88fb      	ldrh	r3, [r7, #6]
 8001150:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001154:	d01b      	beq.n	800118e <HAL_GPIO_EXTI_Callback+0x4a>
 8001156:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800115a:	dc34      	bgt.n	80011c6 <HAL_GPIO_EXTI_Callback+0x82>
 800115c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001160:	d01d      	beq.n	800119e <HAL_GPIO_EXTI_Callback+0x5a>
 8001162:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001166:	dc2e      	bgt.n	80011c6 <HAL_GPIO_EXTI_Callback+0x82>
 8001168:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800116c:	d013      	beq.n	8001196 <HAL_GPIO_EXTI_Callback+0x52>
 800116e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001172:	dc28      	bgt.n	80011c6 <HAL_GPIO_EXTI_Callback+0x82>
 8001174:	2b80      	cmp	r3, #128	; 0x80
 8001176:	d022      	beq.n	80011be <HAL_GPIO_EXTI_Callback+0x7a>
 8001178:	2b80      	cmp	r3, #128	; 0x80
 800117a:	dc24      	bgt.n	80011c6 <HAL_GPIO_EXTI_Callback+0x82>
 800117c:	2b40      	cmp	r3, #64	; 0x40
 800117e:	d01a      	beq.n	80011b6 <HAL_GPIO_EXTI_Callback+0x72>
 8001180:	2b40      	cmp	r3, #64	; 0x40
 8001182:	dc20      	bgt.n	80011c6 <HAL_GPIO_EXTI_Callback+0x82>
 8001184:	2b10      	cmp	r3, #16
 8001186:	d00e      	beq.n	80011a6 <HAL_GPIO_EXTI_Callback+0x62>
 8001188:	2b20      	cmp	r3, #32
 800118a:	d010      	beq.n	80011ae <HAL_GPIO_EXTI_Callback+0x6a>
	case modeScan_Pin:
		rtpMode = RTP_SCAN;
		break;
	}

}
 800118c:	e01b      	b.n	80011c6 <HAL_GPIO_EXTI_Callback+0x82>
		zeroStepper(&rMotor);
 800118e:	4810      	ldr	r0, [pc, #64]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001190:	f000 f936 	bl	8001400 <zeroStepper>
		break;
 8001194:	e017      	b.n	80011c6 <HAL_GPIO_EXTI_Callback+0x82>
		zeroStepper(&thetaMotor);
 8001196:	480f      	ldr	r0, [pc, #60]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x90>)
 8001198:	f000 f932 	bl	8001400 <zeroStepper>
		break;
 800119c:	e013      	b.n	80011c6 <HAL_GPIO_EXTI_Callback+0x82>
		zeroStepper(&yMotor);
 800119e:	480e      	ldr	r0, [pc, #56]	; (80011d8 <HAL_GPIO_EXTI_Callback+0x94>)
 80011a0:	f000 f92e 	bl	8001400 <zeroStepper>
		break;
 80011a4:	e00f      	b.n	80011c6 <HAL_GPIO_EXTI_Callback+0x82>
		rtpMode = RTP_STANDBY;
 80011a6:	4b0d      	ldr	r3, [pc, #52]	; (80011dc <HAL_GPIO_EXTI_Callback+0x98>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	701a      	strb	r2, [r3, #0]
		break;
 80011ac:	e00b      	b.n	80011c6 <HAL_GPIO_EXTI_Callback+0x82>
		rtpMode = RTP_ZERO;
 80011ae:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <HAL_GPIO_EXTI_Callback+0x98>)
 80011b0:	2201      	movs	r2, #1
 80011b2:	701a      	strb	r2, [r3, #0]
		break;
 80011b4:	e007      	b.n	80011c6 <HAL_GPIO_EXTI_Callback+0x82>
		rtpMode = RTP_TATTOO;
 80011b6:	4b09      	ldr	r3, [pc, #36]	; (80011dc <HAL_GPIO_EXTI_Callback+0x98>)
 80011b8:	2202      	movs	r2, #2
 80011ba:	701a      	strb	r2, [r3, #0]
		break;
 80011bc:	e003      	b.n	80011c6 <HAL_GPIO_EXTI_Callback+0x82>
		rtpMode = RTP_SCAN;
 80011be:	4b07      	ldr	r3, [pc, #28]	; (80011dc <HAL_GPIO_EXTI_Callback+0x98>)
 80011c0:	2203      	movs	r2, #3
 80011c2:	701a      	strb	r2, [r3, #0]
		break;
 80011c4:	bf00      	nop
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	200005c0 	.word	0x200005c0
 80011d4:	20000550 	.word	0x20000550
 80011d8:	20000588 	.word	0x20000588
 80011dc:	2000054c 	.word	0x2000054c

080011e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011e4:	b672      	cpsid	i
}
 80011e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80011e8:	e7fe      	b.n	80011e8 <Error_Handler+0x8>
	...

080011ec <InitSerialFromPC>:
uint8_t newLine = '\n';
uint8_t carriageReturn = '\r';

UART_HandleTypeDef* huart;

void InitSerialFromPC(UART_HandleTypeDef* huartHandler, uint8_t* rxBuffer){
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
	huart = huartHandler;
 80011f6:	4a06      	ldr	r2, [pc, #24]	; (8001210 <InitSerialFromPC+0x24>)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6013      	str	r3, [r2, #0]
	//allocate for buffer
	//usartInputBuffer = (uint8_t*)calloc(INPUT_BUFFER_SIZE,sizeof(uint8_t));
	usartOutputBuffer = rxBuffer;
 80011fc:	4a05      	ldr	r2, [pc, #20]	; (8001214 <InitSerialFromPC+0x28>)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	6013      	str	r3, [r2, #0]
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	200007a4 	.word	0x200007a4
 8001214:	200007a0 	.word	0x200007a0

08001218 <initStepper>:
#include "stepperControl.h"

void initStepper(stepper * stepper, TIM_HandleTypeDef * tim, uint32_t  channel, GPIO_TypeDef * dirPort, uint16_t dirPin, uint32_t speed){
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
 8001224:	603b      	str	r3, [r7, #0]

	//Initialize values
	stepper->Timer = tim;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	68ba      	ldr	r2, [r7, #8]
 800122a:	601a      	str	r2, [r3, #0]
	stepper->Channel = channel;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	605a      	str	r2, [r3, #4]
	stepper->DIRPort = dirPort;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	683a      	ldr	r2, [r7, #0]
 8001236:	609a      	str	r2, [r3, #8]
	stepper->DIRPin = dirPin;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	8b3a      	ldrh	r2, [r7, #24]
 800123c:	819a      	strh	r2, [r3, #12]
	stepper->PPS = speed;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	69fa      	ldr	r2, [r7, #28]
 8001242:	611a      	str	r2, [r3, #16]
	stepper->CurrentPosition = 0;
 8001244:	68f9      	ldr	r1, [r7, #12]
 8001246:	f04f 0200 	mov.w	r2, #0
 800124a:	f04f 0300 	mov.w	r3, #0
 800124e:	e9c1 2308 	strd	r2, r3, [r1, #32]
	stepper->TargetPosition =0;
 8001252:	68f9      	ldr	r1, [r7, #12]
 8001254:	f04f 0200 	mov.w	r2, #0
 8001258:	f04f 0300 	mov.w	r3, #0
 800125c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	//Set status
	stepper->Status = Stopped;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2203      	movs	r2, #3
 8001264:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	//update timer to align with speed
	setSpeed(stepper, stepper->PPS);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	691b      	ldr	r3, [r3, #16]
 800126c:	4619      	mov	r1, r3
 800126e:	68f8      	ldr	r0, [r7, #12]
 8001270:	f000 f850 	bl	8001314 <setSpeed>
	//return stepper structure pointer

	//set default speeds
	stepper->PPS_ZeroDefault;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	695b      	ldr	r3, [r3, #20]
	stepper->PPS_TattooDefault;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	699b      	ldr	r3, [r3, #24]
	stepper->PPS_ScanDefault;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	69db      	ldr	r3, [r3, #28]
}
 8001280:	bf00      	nop
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <setTarget>:


void setTarget (stepper * stepper, uint64_t increment, char forward){
 8001288:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800128c:	b084      	sub	sp, #16
 800128e:	af00      	add	r7, sp, #0
 8001290:	60f8      	str	r0, [r7, #12]
 8001292:	e9c7 2300 	strd	r2, r3, [r7]
	//if positive move forward and add to current position
	if(forward){
 8001296:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800129a:	2b00      	cmp	r3, #0
 800129c:	d00c      	beq.n	80012b8 <setTarget+0x30>
		stepper->TargetPosition+= increment;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80012a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012a8:	eb10 0802 	adds.w	r8, r0, r2
 80012ac:	eb41 0903 	adc.w	r9, r1, r3
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	e9c3 890a 	strd	r8, r9, [r3, #40]	; 0x28
 80012b6:	e00a      	b.n	80012ce <setTarget+0x46>
	}
	//if negative move backward and take away from current position
	else{
		stepper->TargetPosition-= increment;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80012be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012c2:	1a84      	subs	r4, r0, r2
 80012c4:	eb61 0503 	sbc.w	r5, r1, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
	}
	//TargetPosition can't be negative
	if(stepper->TargetPosition<0){
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
		stepper->TargetPosition=0;
	}
	//Start timer if it needs to be started
	if (stepper->Status == Stopped && stepper->TargetPosition != stepper->CurrentPosition){
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	2b03      	cmp	r3, #3
 80012de:	d111      	bne.n	8001304 <setTarget+0x7c>
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80012ec:	4299      	cmp	r1, r3
 80012ee:	bf08      	it	eq
 80012f0:	4290      	cmpeq	r0, r2
 80012f2:	d007      	beq.n	8001304 <setTarget+0x7c>
		//start pulses on timer
		HAL_TIM_PWM_Start(stepper->Timer, stepper->Channel);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	4619      	mov	r1, r3
 80012fe:	4610      	mov	r0, r2
 8001300:	f003 fbba 	bl	8004a78 <HAL_TIM_PWM_Start>
	}
	//Set Direction
	setDirection(stepper);
 8001304:	68f8      	ldr	r0, [r7, #12]
 8001306:	f000 f827 	bl	8001358 <setDirection>
}
 800130a:	bf00      	nop
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001314 <setSpeed>:

void setSpeed (stepper * stepper, uint32_t speed){
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
	//update pulse rate of stepper
	stepper->PPS = speed;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	611a      	str	r2, [r3, #16]
	//set duty cycle
	stepper->Timer->Instance->CCR1=1000000/(2*speed);
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	005a      	lsls	r2, r3, #1
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4909      	ldr	r1, [pc, #36]	; (8001354 <setSpeed+0x40>)
 8001330:	fbb1 f2f2 	udiv	r2, r1, r2
 8001334:	635a      	str	r2, [r3, #52]	; 0x34
	//set timer period
	stepper->Timer->Instance->ARR=(1000000/speed)-1;
 8001336:	4a07      	ldr	r2, [pc, #28]	; (8001354 <setSpeed+0x40>)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	fbb2 f2f3 	udiv	r2, r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	3a01      	subs	r2, #1
 8001346:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	000f4240 	.word	0x000f4240

08001358 <setDirection>:
	stepper->PPS_ScanDefault;

}

//set direction
void setDirection(stepper *stepper){
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	if(stepper->CurrentPosition > stepper->TargetPosition){
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001366:	6879      	ldr	r1, [r7, #4]
 8001368:	e9d1 010a 	ldrd	r0, r1, [r1, #40]	; 0x28
 800136c:	4290      	cmp	r0, r2
 800136e:	eb71 0303 	sbcs.w	r3, r1, r3
 8001372:	d20c      	bcs.n	800138e <setDirection+0x36>
		HAL_GPIO_WritePin(stepper->DIRPort, stepper->DIRPin, SET);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6898      	ldr	r0, [r3, #8]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	899b      	ldrh	r3, [r3, #12]
 800137c:	2201      	movs	r2, #1
 800137e:	4619      	mov	r1, r3
 8001380:	f000 ff16 	bl	80021b0 <HAL_GPIO_WritePin>
		stepper->Status = RunningBackward;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2202      	movs	r2, #2
 8001388:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	}
	else if(stepper->CurrentPosition < stepper->TargetPosition){
		HAL_GPIO_WritePin(stepper->DIRPort, stepper->DIRPin, RESET);
		stepper->Status = RunningForward;
	}
}
 800138c:	e015      	b.n	80013ba <setDirection+0x62>
	else if(stepper->CurrentPosition < stepper->TargetPosition){
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800139a:	4290      	cmp	r0, r2
 800139c:	eb71 0303 	sbcs.w	r3, r1, r3
 80013a0:	d20b      	bcs.n	80013ba <setDirection+0x62>
		HAL_GPIO_WritePin(stepper->DIRPort, stepper->DIRPin, RESET);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6898      	ldr	r0, [r3, #8]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	899b      	ldrh	r3, [r3, #12]
 80013aa:	2200      	movs	r2, #0
 80013ac:	4619      	mov	r1, r3
 80013ae:	f000 feff 	bl	80021b0 <HAL_GPIO_WritePin>
		stepper->Status = RunningForward;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2201      	movs	r2, #1
 80013b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <stopStepper>:

void stopStepper(stepper *stepper){
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b082      	sub	sp, #8
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(stepper->Timer, stepper->Channel);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	4619      	mov	r1, r3
 80013d4:	4610      	mov	r0, r2
 80013d6:	f003 fc55 	bl	8004c84 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop(stepper->Timer);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f003 fac2 	bl	8004968 <HAL_TIM_Base_Stop>
	stepper->Status = Stopped;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2203      	movs	r2, #3
 80013e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	stepper->TargetPosition = stepper->CurrentPosition;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80013f2:	6879      	ldr	r1, [r7, #4]
 80013f4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <zeroStepper>:

void zeroStepper(stepper *stepper){
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
	stopStepper(stepper);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff ffda 	bl	80013c2 <stopStepper>
	stepper->CurrentPosition = 0;
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	f04f 0200 	mov.w	r2, #0
 8001414:	f04f 0300 	mov.w	r3, #0
 8001418:	e9c1 2308 	strd	r2, r3, [r1, #32]
	stepper->TargetPosition = 0;
 800141c:	6879      	ldr	r1, [r7, #4]
 800141e:	f04f 0200 	mov.w	r2, #0
 8001422:	f04f 0300 	mov.w	r3, #0
 8001426:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143a:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <HAL_MspInit+0x44>)
 800143c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800143e:	4a0e      	ldr	r2, [pc, #56]	; (8001478 <HAL_MspInit+0x44>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	6613      	str	r3, [r2, #96]	; 0x60
 8001446:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <HAL_MspInit+0x44>)
 8001448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001452:	4b09      	ldr	r3, [pc, #36]	; (8001478 <HAL_MspInit+0x44>)
 8001454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001456:	4a08      	ldr	r2, [pc, #32]	; (8001478 <HAL_MspInit+0x44>)
 8001458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800145c:	6593      	str	r3, [r2, #88]	; 0x58
 800145e:	4b06      	ldr	r3, [pc, #24]	; (8001478 <HAL_MspInit+0x44>)
 8001460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001466:	603b      	str	r3, [r7, #0]
 8001468:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	40021000 	.word	0x40021000

0800147c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b0b0      	sub	sp, #192	; 0xc0
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001484:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001494:	f107 0314 	add.w	r3, r7, #20
 8001498:	2298      	movs	r2, #152	; 0x98
 800149a:	2100      	movs	r1, #0
 800149c:	4618      	mov	r0, r3
 800149e:	f00b fc93 	bl	800cdc8 <memset>
  if(hi2c->Instance==I2C2)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a21      	ldr	r2, [pc, #132]	; (800152c <HAL_I2C_MspInit+0xb0>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d13a      	bne.n	8001522 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80014ac:	2380      	movs	r3, #128	; 0x80
 80014ae:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80014b0:	2300      	movs	r3, #0
 80014b2:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	4618      	mov	r0, r3
 80014ba:	f002 fc41 	bl	8003d40 <HAL_RCCEx_PeriphCLKConfig>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80014c4:	f7ff fe8c 	bl	80011e0 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014c8:	4b19      	ldr	r3, [pc, #100]	; (8001530 <HAL_I2C_MspInit+0xb4>)
 80014ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014cc:	4a18      	ldr	r2, [pc, #96]	; (8001530 <HAL_I2C_MspInit+0xb4>)
 80014ce:	f043 0320 	orr.w	r3, r3, #32
 80014d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014d4:	4b16      	ldr	r3, [pc, #88]	; (8001530 <HAL_I2C_MspInit+0xb4>)
 80014d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d8:	f003 0320 	and.w	r3, r3, #32
 80014dc:	613b      	str	r3, [r7, #16]
 80014de:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014e0:	2303      	movs	r3, #3
 80014e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014e6:	2312      	movs	r3, #18
 80014e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f2:	2303      	movs	r3, #3
 80014f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014f8:	2304      	movs	r3, #4
 80014fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014fe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001502:	4619      	mov	r1, r3
 8001504:	480b      	ldr	r0, [pc, #44]	; (8001534 <HAL_I2C_MspInit+0xb8>)
 8001506:	f000 fcc1 	bl	8001e8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800150a:	4b09      	ldr	r3, [pc, #36]	; (8001530 <HAL_I2C_MspInit+0xb4>)
 800150c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800150e:	4a08      	ldr	r2, [pc, #32]	; (8001530 <HAL_I2C_MspInit+0xb4>)
 8001510:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001514:	6593      	str	r3, [r2, #88]	; 0x58
 8001516:	4b06      	ldr	r3, [pc, #24]	; (8001530 <HAL_I2C_MspInit+0xb4>)
 8001518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800151a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001522:	bf00      	nop
 8001524:	37c0      	adds	r7, #192	; 0xc0
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40005800 	.word	0x40005800
 8001530:	40021000 	.word	0x40021000
 8001534:	48001400 	.word	0x48001400

08001538 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b0b0      	sub	sp, #192	; 0xc0
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	2298      	movs	r2, #152	; 0x98
 8001556:	2100      	movs	r1, #0
 8001558:	4618      	mov	r0, r3
 800155a:	f00b fc35 	bl	800cdc8 <memset>
  if(huart->Instance==LPUART1)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a26      	ldr	r2, [pc, #152]	; (80015fc <HAL_UART_MspInit+0xc4>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d145      	bne.n	80015f4 <HAL_UART_MspInit+0xbc>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001568:	2320      	movs	r3, #32
 800156a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800156c:	2300      	movs	r3, #0
 800156e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	4618      	mov	r0, r3
 8001576:	f002 fbe3 	bl	8003d40 <HAL_RCCEx_PeriphCLKConfig>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001580:	f7ff fe2e 	bl	80011e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001584:	4b1e      	ldr	r3, [pc, #120]	; (8001600 <HAL_UART_MspInit+0xc8>)
 8001586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001588:	4a1d      	ldr	r2, [pc, #116]	; (8001600 <HAL_UART_MspInit+0xc8>)
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001590:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <HAL_UART_MspInit+0xc8>)
 8001592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	613b      	str	r3, [r7, #16]
 800159a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800159c:	4b18      	ldr	r3, [pc, #96]	; (8001600 <HAL_UART_MspInit+0xc8>)
 800159e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a0:	4a17      	ldr	r2, [pc, #92]	; (8001600 <HAL_UART_MspInit+0xc8>)
 80015a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015a8:	4b15      	ldr	r3, [pc, #84]	; (8001600 <HAL_UART_MspInit+0xc8>)
 80015aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 80015b4:	f001 fc7a 	bl	8002eac <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80015b8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80015bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c0:	2302      	movs	r3, #2
 80015c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015cc:	2303      	movs	r3, #3
 80015ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80015d2:	2308      	movs	r3, #8
 80015d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015d8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80015dc:	4619      	mov	r1, r3
 80015de:	4809      	ldr	r0, [pc, #36]	; (8001604 <HAL_UART_MspInit+0xcc>)
 80015e0:	f000 fc54 	bl	8001e8c <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80015e4:	2200      	movs	r2, #0
 80015e6:	2100      	movs	r1, #0
 80015e8:	2046      	movs	r0, #70	; 0x46
 80015ea:	f000 fb5e 	bl	8001caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80015ee:	2046      	movs	r0, #70	; 0x46
 80015f0:	f000 fb77 	bl	8001ce2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80015f4:	bf00      	nop
 80015f6:	37c0      	adds	r7, #192	; 0xc0
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40008000 	.word	0x40008000
 8001600:	40021000 	.word	0x40021000
 8001604:	48001800 	.word	0x48001800

08001608 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b088      	sub	sp, #32
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a3d      	ldr	r2, [pc, #244]	; (800170c <HAL_TIM_Base_MspInit+0x104>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d114      	bne.n	8001644 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800161a:	4b3d      	ldr	r3, [pc, #244]	; (8001710 <HAL_TIM_Base_MspInit+0x108>)
 800161c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800161e:	4a3c      	ldr	r2, [pc, #240]	; (8001710 <HAL_TIM_Base_MspInit+0x108>)
 8001620:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001624:	6613      	str	r3, [r2, #96]	; 0x60
 8001626:	4b3a      	ldr	r3, [pc, #232]	; (8001710 <HAL_TIM_Base_MspInit+0x108>)
 8001628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800162a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800162e:	61fb      	str	r3, [r7, #28]
 8001630:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	2100      	movs	r1, #0
 8001636:	2018      	movs	r0, #24
 8001638:	f000 fb37 	bl	8001caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800163c:	2018      	movs	r0, #24
 800163e:	f000 fb50 	bl	8001ce2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001642:	e05e      	b.n	8001702 <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM2)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800164c:	d114      	bne.n	8001678 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800164e:	4b30      	ldr	r3, [pc, #192]	; (8001710 <HAL_TIM_Base_MspInit+0x108>)
 8001650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001652:	4a2f      	ldr	r2, [pc, #188]	; (8001710 <HAL_TIM_Base_MspInit+0x108>)
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	6593      	str	r3, [r2, #88]	; 0x58
 800165a:	4b2d      	ldr	r3, [pc, #180]	; (8001710 <HAL_TIM_Base_MspInit+0x108>)
 800165c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	61bb      	str	r3, [r7, #24]
 8001664:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001666:	2200      	movs	r2, #0
 8001668:	2100      	movs	r1, #0
 800166a:	201c      	movs	r0, #28
 800166c:	f000 fb1d 	bl	8001caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001670:	201c      	movs	r0, #28
 8001672:	f000 fb36 	bl	8001ce2 <HAL_NVIC_EnableIRQ>
}
 8001676:	e044      	b.n	8001702 <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM3)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a25      	ldr	r2, [pc, #148]	; (8001714 <HAL_TIM_Base_MspInit+0x10c>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d114      	bne.n	80016ac <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001682:	4b23      	ldr	r3, [pc, #140]	; (8001710 <HAL_TIM_Base_MspInit+0x108>)
 8001684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001686:	4a22      	ldr	r2, [pc, #136]	; (8001710 <HAL_TIM_Base_MspInit+0x108>)
 8001688:	f043 0302 	orr.w	r3, r3, #2
 800168c:	6593      	str	r3, [r2, #88]	; 0x58
 800168e:	4b20      	ldr	r3, [pc, #128]	; (8001710 <HAL_TIM_Base_MspInit+0x108>)
 8001690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	617b      	str	r3, [r7, #20]
 8001698:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800169a:	2200      	movs	r2, #0
 800169c:	2100      	movs	r1, #0
 800169e:	201d      	movs	r0, #29
 80016a0:	f000 fb03 	bl	8001caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80016a4:	201d      	movs	r0, #29
 80016a6:	f000 fb1c 	bl	8001ce2 <HAL_NVIC_EnableIRQ>
}
 80016aa:	e02a      	b.n	8001702 <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM4)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a19      	ldr	r2, [pc, #100]	; (8001718 <HAL_TIM_Base_MspInit+0x110>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d114      	bne.n	80016e0 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016b6:	4b16      	ldr	r3, [pc, #88]	; (8001710 <HAL_TIM_Base_MspInit+0x108>)
 80016b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ba:	4a15      	ldr	r2, [pc, #84]	; (8001710 <HAL_TIM_Base_MspInit+0x108>)
 80016bc:	f043 0304 	orr.w	r3, r3, #4
 80016c0:	6593      	str	r3, [r2, #88]	; 0x58
 80016c2:	4b13      	ldr	r3, [pc, #76]	; (8001710 <HAL_TIM_Base_MspInit+0x108>)
 80016c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c6:	f003 0304 	and.w	r3, r3, #4
 80016ca:	613b      	str	r3, [r7, #16]
 80016cc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2100      	movs	r1, #0
 80016d2:	201e      	movs	r0, #30
 80016d4:	f000 fae9 	bl	8001caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80016d8:	201e      	movs	r0, #30
 80016da:	f000 fb02 	bl	8001ce2 <HAL_NVIC_EnableIRQ>
}
 80016de:	e010      	b.n	8001702 <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM5)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a0d      	ldr	r2, [pc, #52]	; (800171c <HAL_TIM_Base_MspInit+0x114>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d10b      	bne.n	8001702 <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80016ea:	4b09      	ldr	r3, [pc, #36]	; (8001710 <HAL_TIM_Base_MspInit+0x108>)
 80016ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ee:	4a08      	ldr	r2, [pc, #32]	; (8001710 <HAL_TIM_Base_MspInit+0x108>)
 80016f0:	f043 0308 	orr.w	r3, r3, #8
 80016f4:	6593      	str	r3, [r2, #88]	; 0x58
 80016f6:	4b06      	ldr	r3, [pc, #24]	; (8001710 <HAL_TIM_Base_MspInit+0x108>)
 80016f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fa:	f003 0308 	and.w	r3, r3, #8
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	68fb      	ldr	r3, [r7, #12]
}
 8001702:	bf00      	nop
 8001704:	3720      	adds	r7, #32
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40012c00 	.word	0x40012c00
 8001710:	40021000 	.word	0x40021000
 8001714:	40000400 	.word	0x40000400
 8001718:	40000800 	.word	0x40000800
 800171c:	40000c00 	.word	0x40000c00

08001720 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b08a      	sub	sp, #40	; 0x28
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001728:	f107 0314 	add.w	r3, r7, #20
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001740:	d11d      	bne.n	800177e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001742:	4b33      	ldr	r3, [pc, #204]	; (8001810 <HAL_TIM_MspPostInit+0xf0>)
 8001744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001746:	4a32      	ldr	r2, [pc, #200]	; (8001810 <HAL_TIM_MspPostInit+0xf0>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800174e:	4b30      	ldr	r3, [pc, #192]	; (8001810 <HAL_TIM_MspPostInit+0xf0>)
 8001750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	613b      	str	r3, [r7, #16]
 8001758:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800175a:	2301      	movs	r3, #1
 800175c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175e:	2302      	movs	r3, #2
 8001760:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001766:	2300      	movs	r3, #0
 8001768:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800176a:	2301      	movs	r3, #1
 800176c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176e:	f107 0314 	add.w	r3, r7, #20
 8001772:	4619      	mov	r1, r3
 8001774:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001778:	f000 fb88 	bl	8001e8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800177c:	e043      	b.n	8001806 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM3)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a24      	ldr	r2, [pc, #144]	; (8001814 <HAL_TIM_MspPostInit+0xf4>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d11c      	bne.n	80017c2 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001788:	4b21      	ldr	r3, [pc, #132]	; (8001810 <HAL_TIM_MspPostInit+0xf0>)
 800178a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178c:	4a20      	ldr	r2, [pc, #128]	; (8001810 <HAL_TIM_MspPostInit+0xf0>)
 800178e:	f043 0310 	orr.w	r3, r3, #16
 8001792:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001794:	4b1e      	ldr	r3, [pc, #120]	; (8001810 <HAL_TIM_MspPostInit+0xf0>)
 8001796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001798:	f003 0310 	and.w	r3, r3, #16
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017a0:	2308      	movs	r3, #8
 80017a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a4:	2302      	movs	r3, #2
 80017a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ac:	2300      	movs	r3, #0
 80017ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017b0:	2302      	movs	r3, #2
 80017b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017b4:	f107 0314 	add.w	r3, r7, #20
 80017b8:	4619      	mov	r1, r3
 80017ba:	4817      	ldr	r0, [pc, #92]	; (8001818 <HAL_TIM_MspPostInit+0xf8>)
 80017bc:	f000 fb66 	bl	8001e8c <HAL_GPIO_Init>
}
 80017c0:	e021      	b.n	8001806 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM4)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a15      	ldr	r2, [pc, #84]	; (800181c <HAL_TIM_MspPostInit+0xfc>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d11c      	bne.n	8001806 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017cc:	4b10      	ldr	r3, [pc, #64]	; (8001810 <HAL_TIM_MspPostInit+0xf0>)
 80017ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d0:	4a0f      	ldr	r2, [pc, #60]	; (8001810 <HAL_TIM_MspPostInit+0xf0>)
 80017d2:	f043 0308 	orr.w	r3, r3, #8
 80017d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017d8:	4b0d      	ldr	r3, [pc, #52]	; (8001810 <HAL_TIM_MspPostInit+0xf0>)
 80017da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017dc:	f003 0308 	and.w	r3, r3, #8
 80017e0:	60bb      	str	r3, [r7, #8]
 80017e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80017e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ea:	2302      	movs	r3, #2
 80017ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f2:	2300      	movs	r3, #0
 80017f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80017f6:	2302      	movs	r3, #2
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017fa:	f107 0314 	add.w	r3, r7, #20
 80017fe:	4619      	mov	r1, r3
 8001800:	4807      	ldr	r0, [pc, #28]	; (8001820 <HAL_TIM_MspPostInit+0x100>)
 8001802:	f000 fb43 	bl	8001e8c <HAL_GPIO_Init>
}
 8001806:	bf00      	nop
 8001808:	3728      	adds	r7, #40	; 0x28
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40021000 	.word	0x40021000
 8001814:	40000400 	.word	0x40000400
 8001818:	48001000 	.word	0x48001000
 800181c:	40000800 	.word	0x40000800
 8001820:	48000c00 	.word	0x48000c00

08001824 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001828:	e7fe      	b.n	8001828 <NMI_Handler+0x4>

0800182a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800182e:	e7fe      	b.n	800182e <HardFault_Handler+0x4>

08001830 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001834:	e7fe      	b.n	8001834 <MemManage_Handler+0x4>

08001836 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001836:	b480      	push	{r7}
 8001838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800183a:	e7fe      	b.n	800183a <BusFault_Handler+0x4>

0800183c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001840:	e7fe      	b.n	8001840 <UsageFault_Handler+0x4>

08001842 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001842:	b480      	push	{r7}
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001870:	f000 f8fc 	bl	8001a6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001874:	bf00      	nop
 8001876:	bd80      	pop	{r7, pc}

08001878 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800187c:	4802      	ldr	r0, [pc, #8]	; (8001888 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800187e:	f003 fa97 	bl	8004db0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	200003d0 	.word	0x200003d0

0800188c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001890:	4802      	ldr	r0, [pc, #8]	; (800189c <TIM2_IRQHandler+0x10>)
 8001892:	f003 fa8d 	bl	8004db0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	2000041c 	.word	0x2000041c

080018a0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80018a4:	4802      	ldr	r0, [pc, #8]	; (80018b0 <TIM3_IRQHandler+0x10>)
 80018a6:	f003 fa83 	bl	8004db0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000468 	.word	0x20000468

080018b4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80018b8:	4802      	ldr	r0, [pc, #8]	; (80018c4 <TIM4_IRQHandler+0x10>)
 80018ba:	f003 fa79 	bl	8004db0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	200004b4 	.word	0x200004b4

080018c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(thLim_Pin);
 80018cc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80018d0:	f000 fc86 	bl	80021e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(yLim_Pin);
 80018d4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80018d8:	f000 fc82 	bl	80021e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(rLim_Pin);
 80018dc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80018e0:	f000 fc7e 	bl	80021e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80018e4:	bf00      	nop
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80018ec:	4802      	ldr	r0, [pc, #8]	; (80018f8 <LPUART1_IRQHandler+0x10>)
 80018ee:	f004 fb01 	bl	8005ef4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000340 	.word	0x20000340

080018fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001900:	4b06      	ldr	r3, [pc, #24]	; (800191c <SystemInit+0x20>)
 8001902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001906:	4a05      	ldr	r2, [pc, #20]	; (800191c <SystemInit+0x20>)
 8001908:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800190c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <GoHome>:
 *      Author: kylei
 */

#include "zeroing.h"

void GoHome(stepper* motor){
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af02      	add	r7, sp, #8
 8001926:	6078      	str	r0, [r7, #4]
	//stop any current motion
	stopStepper(motor);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f7ff fd4a 	bl	80013c2 <stopStepper>
	//make stepper think its far from zero
	motor->CurrentPosition = 0xFFFF;
 800192e:	6879      	ldr	r1, [r7, #4]
 8001930:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001934:	f04f 0300 	mov.w	r3, #0
 8001938:	e9c1 2308 	strd	r2, r3, [r1, #32]
	motor->TargetPosition = 0xFFFF;
 800193c:	6879      	ldr	r1, [r7, #4]
 800193e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001942:	f04f 0300 	mov.w	r3, #0
 8001946:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	/*make motor go backward "forever"
	Note: make sure there is some mechanism in main()
	to stop otherwise this will go until it breaks something*/
	setSpeed(motor,motor->PPS_ZeroDefault);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	695b      	ldr	r3, [r3, #20]
 800194e:	4619      	mov	r1, r3
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f7ff fcdf 	bl	8001314 <setSpeed>
	setTarget(motor, 0xFFFE,0);
 8001956:	2300      	movs	r3, #0
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800195e:	f04f 0300 	mov.w	r3, #0
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7ff fc90 	bl	8001288 <setTarget>
}
 8001968:	bf00      	nop
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <Reset_Handler>:
    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

  ldr   sp, =_estack    /* Set stack pointer */
 8001970:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001974:	f7ff ffc2 	bl	80018fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001978:	480c      	ldr	r0, [pc, #48]	; (80019ac <LoopForever+0x6>)
  ldr r1, =_edata
 800197a:	490d      	ldr	r1, [pc, #52]	; (80019b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800197c:	4a0d      	ldr	r2, [pc, #52]	; (80019b4 <LoopForever+0xe>)
  movs r3, #0
 800197e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001980:	e002      	b.n	8001988 <LoopCopyDataInit>

08001982 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001982:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001984:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001986:	3304      	adds	r3, #4

08001988 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001988:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800198a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800198c:	d3f9      	bcc.n	8001982 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800198e:	4a0a      	ldr	r2, [pc, #40]	; (80019b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001990:	4c0a      	ldr	r4, [pc, #40]	; (80019bc <LoopForever+0x16>)
  movs r3, #0
 8001992:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001994:	e001      	b.n	800199a <LoopFillZerobss>

08001996 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001996:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001998:	3204      	adds	r2, #4

0800199a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800199a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800199c:	d3fb      	bcc.n	8001996 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800199e:	f00b f9e1 	bl	800cd64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019a2:	f7fe fdb9 	bl	8000518 <main>

080019a6 <LoopForever>:

LoopForever:
    b LoopForever
 80019a6:	e7fe      	b.n	80019a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80019a8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80019ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019b0:	200002cc 	.word	0x200002cc
  ldr r2, =_sidata
 80019b4:	0800ce80 	.word	0x0800ce80
  ldr r2, =_sbss
 80019b8:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 80019bc:	200007ec 	.word	0x200007ec

080019c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019c0:	e7fe      	b.n	80019c0 <ADC1_2_IRQHandler>

080019c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019c8:	2300      	movs	r3, #0
 80019ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019cc:	2003      	movs	r0, #3
 80019ce:	f000 f961 	bl	8001c94 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019d2:	200f      	movs	r0, #15
 80019d4:	f000 f80e 	bl	80019f4 <HAL_InitTick>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d002      	beq.n	80019e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	71fb      	strb	r3, [r7, #7]
 80019e2:	e001      	b.n	80019e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019e4:	f7ff fd26 	bl	8001434 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019e8:	79fb      	ldrb	r3, [r7, #7]
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
	...

080019f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019fc:	2300      	movs	r3, #0
 80019fe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a00:	4b17      	ldr	r3, [pc, #92]	; (8001a60 <HAL_InitTick+0x6c>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d023      	beq.n	8001a50 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a08:	4b16      	ldr	r3, [pc, #88]	; (8001a64 <HAL_InitTick+0x70>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	4b14      	ldr	r3, [pc, #80]	; (8001a60 <HAL_InitTick+0x6c>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	4619      	mov	r1, r3
 8001a12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f000 f96d 	bl	8001cfe <HAL_SYSTICK_Config>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d10f      	bne.n	8001a4a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2b0f      	cmp	r3, #15
 8001a2e:	d809      	bhi.n	8001a44 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a30:	2200      	movs	r2, #0
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	f04f 30ff 	mov.w	r0, #4294967295
 8001a38:	f000 f937 	bl	8001caa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a3c:	4a0a      	ldr	r2, [pc, #40]	; (8001a68 <HAL_InitTick+0x74>)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6013      	str	r3, [r2, #0]
 8001a42:	e007      	b.n	8001a54 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	73fb      	strb	r3, [r7, #15]
 8001a48:	e004      	b.n	8001a54 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	73fb      	strb	r3, [r7, #15]
 8001a4e:	e001      	b.n	8001a54 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	2000000c 	.word	0x2000000c
 8001a64:	20000004 	.word	0x20000004
 8001a68:	20000008 	.word	0x20000008

08001a6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a70:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <HAL_IncTick+0x20>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	461a      	mov	r2, r3
 8001a76:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <HAL_IncTick+0x24>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	4a04      	ldr	r2, [pc, #16]	; (8001a90 <HAL_IncTick+0x24>)
 8001a7e:	6013      	str	r3, [r2, #0]
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	2000000c 	.word	0x2000000c
 8001a90:	200007a8 	.word	0x200007a8

08001a94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  return uwTick;
 8001a98:	4b03      	ldr	r3, [pc, #12]	; (8001aa8 <HAL_GetTick+0x14>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	200007a8 	.word	0x200007a8

08001aac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ab4:	f7ff ffee 	bl	8001a94 <HAL_GetTick>
 8001ab8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac4:	d005      	beq.n	8001ad2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001ac6:	4b0a      	ldr	r3, [pc, #40]	; (8001af0 <HAL_Delay+0x44>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	461a      	mov	r2, r3
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	4413      	add	r3, r2
 8001ad0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ad2:	bf00      	nop
 8001ad4:	f7ff ffde 	bl	8001a94 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d8f7      	bhi.n	8001ad4 <HAL_Delay+0x28>
  {
  }
}
 8001ae4:	bf00      	nop
 8001ae6:	bf00      	nop
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	2000000c 	.word	0x2000000c

08001af4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b04:	4b0c      	ldr	r3, [pc, #48]	; (8001b38 <__NVIC_SetPriorityGrouping+0x44>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b0a:	68ba      	ldr	r2, [r7, #8]
 8001b0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b10:	4013      	ands	r3, r2
 8001b12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b26:	4a04      	ldr	r2, [pc, #16]	; (8001b38 <__NVIC_SetPriorityGrouping+0x44>)
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	60d3      	str	r3, [r2, #12]
}
 8001b2c:	bf00      	nop
 8001b2e:	3714      	adds	r7, #20
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b40:	4b04      	ldr	r3, [pc, #16]	; (8001b54 <__NVIC_GetPriorityGrouping+0x18>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	0a1b      	lsrs	r3, r3, #8
 8001b46:	f003 0307 	and.w	r3, r3, #7
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	db0b      	blt.n	8001b82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	f003 021f 	and.w	r2, r3, #31
 8001b70:	4907      	ldr	r1, [pc, #28]	; (8001b90 <__NVIC_EnableIRQ+0x38>)
 8001b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b76:	095b      	lsrs	r3, r3, #5
 8001b78:	2001      	movs	r0, #1
 8001b7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	e000e100 	.word	0xe000e100

08001b94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	6039      	str	r1, [r7, #0]
 8001b9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	db0a      	blt.n	8001bbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	490c      	ldr	r1, [pc, #48]	; (8001be0 <__NVIC_SetPriority+0x4c>)
 8001bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb2:	0112      	lsls	r2, r2, #4
 8001bb4:	b2d2      	uxtb	r2, r2
 8001bb6:	440b      	add	r3, r1
 8001bb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bbc:	e00a      	b.n	8001bd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	4908      	ldr	r1, [pc, #32]	; (8001be4 <__NVIC_SetPriority+0x50>)
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	f003 030f 	and.w	r3, r3, #15
 8001bca:	3b04      	subs	r3, #4
 8001bcc:	0112      	lsls	r2, r2, #4
 8001bce:	b2d2      	uxtb	r2, r2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	761a      	strb	r2, [r3, #24]
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	e000e100 	.word	0xe000e100
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b089      	sub	sp, #36	; 0x24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	f1c3 0307 	rsb	r3, r3, #7
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	bf28      	it	cs
 8001c06:	2304      	movcs	r3, #4
 8001c08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	3304      	adds	r3, #4
 8001c0e:	2b06      	cmp	r3, #6
 8001c10:	d902      	bls.n	8001c18 <NVIC_EncodePriority+0x30>
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	3b03      	subs	r3, #3
 8001c16:	e000      	b.n	8001c1a <NVIC_EncodePriority+0x32>
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43da      	mvns	r2, r3
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	401a      	ands	r2, r3
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c30:	f04f 31ff 	mov.w	r1, #4294967295
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3a:	43d9      	mvns	r1, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c40:	4313      	orrs	r3, r2
         );
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3724      	adds	r7, #36	; 0x24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
	...

08001c50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c60:	d301      	bcc.n	8001c66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c62:	2301      	movs	r3, #1
 8001c64:	e00f      	b.n	8001c86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c66:	4a0a      	ldr	r2, [pc, #40]	; (8001c90 <SysTick_Config+0x40>)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c6e:	210f      	movs	r1, #15
 8001c70:	f04f 30ff 	mov.w	r0, #4294967295
 8001c74:	f7ff ff8e 	bl	8001b94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c78:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <SysTick_Config+0x40>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c7e:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <SysTick_Config+0x40>)
 8001c80:	2207      	movs	r2, #7
 8001c82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	e000e010 	.word	0xe000e010

08001c94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f7ff ff29 	bl	8001af4 <__NVIC_SetPriorityGrouping>
}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b086      	sub	sp, #24
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	60b9      	str	r1, [r7, #8]
 8001cb4:	607a      	str	r2, [r7, #4]
 8001cb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cbc:	f7ff ff3e 	bl	8001b3c <__NVIC_GetPriorityGrouping>
 8001cc0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	68b9      	ldr	r1, [r7, #8]
 8001cc6:	6978      	ldr	r0, [r7, #20]
 8001cc8:	f7ff ff8e 	bl	8001be8 <NVIC_EncodePriority>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd2:	4611      	mov	r1, r2
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff ff5d 	bl	8001b94 <__NVIC_SetPriority>
}
 8001cda:	bf00      	nop
 8001cdc:	3718      	adds	r7, #24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b082      	sub	sp, #8
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	4603      	mov	r3, r0
 8001cea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff ff31 	bl	8001b58 <__NVIC_EnableIRQ>
}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7ff ffa2 	bl	8001c50 <SysTick_Config>
 8001d0c:	4603      	mov	r3, r0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b085      	sub	sp, #20
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d008      	beq.n	8001d40 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2204      	movs	r2, #4
 8001d32:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e040      	b.n	8001dc2 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f022 020e 	bic.w	r2, r2, #14
 8001d4e:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d5e:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f022 0201 	bic.w	r2, r2, #1
 8001d6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d74:	f003 021c 	and.w	r2, r3, #28
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d82:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001d8c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00c      	beq.n	8001db0 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001da4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001dae:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001dc0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3714      	adds	r7, #20
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b084      	sub	sp, #16
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d005      	beq.n	8001df2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2204      	movs	r2, #4
 8001dea:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	73fb      	strb	r3, [r7, #15]
 8001df0:	e047      	b.n	8001e82 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 020e 	bic.w	r2, r2, #14
 8001e00:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f022 0201 	bic.w	r2, r2, #1
 8001e10:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e20:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e26:	f003 021c 	and.w	r2, r3, #28
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	2101      	movs	r1, #1
 8001e30:	fa01 f202 	lsl.w	r2, r1, r2
 8001e34:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001e3e:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d00c      	beq.n	8001e62 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e56:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001e60:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2201      	movs	r2, #1
 8001e66:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	4798      	blx	r3
    }
  }
  return status;
 8001e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b087      	sub	sp, #28
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e96:	2300      	movs	r3, #0
 8001e98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e9a:	e166      	b.n	800216a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	2101      	movs	r1, #1
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 8158 	beq.w	8002164 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f003 0303 	and.w	r3, r3, #3
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d005      	beq.n	8001ecc <HAL_GPIO_Init+0x40>
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f003 0303 	and.w	r3, r3, #3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d130      	bne.n	8001f2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	2203      	movs	r2, #3
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	43db      	mvns	r3, r3
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	68da      	ldr	r2, [r3, #12]
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f02:	2201      	movs	r2, #1
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	091b      	lsrs	r3, r3, #4
 8001f18:	f003 0201 	and.w	r2, r3, #1
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f003 0303 	and.w	r3, r3, #3
 8001f36:	2b03      	cmp	r3, #3
 8001f38:	d017      	beq.n	8001f6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	2203      	movs	r2, #3
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	689a      	ldr	r2, [r3, #8]
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f003 0303 	and.w	r3, r3, #3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d123      	bne.n	8001fbe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	08da      	lsrs	r2, r3, #3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	3208      	adds	r2, #8
 8001f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	220f      	movs	r2, #15
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	43db      	mvns	r3, r3
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	4013      	ands	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	691a      	ldr	r2, [r3, #16]
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	f003 0307 	and.w	r3, r3, #7
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	08da      	lsrs	r2, r3, #3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3208      	adds	r2, #8
 8001fb8:	6939      	ldr	r1, [r7, #16]
 8001fba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	2203      	movs	r2, #3
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	43db      	mvns	r3, r3
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f003 0203 	and.w	r2, r3, #3
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f000 80b2 	beq.w	8002164 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002000:	4b61      	ldr	r3, [pc, #388]	; (8002188 <HAL_GPIO_Init+0x2fc>)
 8002002:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002004:	4a60      	ldr	r2, [pc, #384]	; (8002188 <HAL_GPIO_Init+0x2fc>)
 8002006:	f043 0301 	orr.w	r3, r3, #1
 800200a:	6613      	str	r3, [r2, #96]	; 0x60
 800200c:	4b5e      	ldr	r3, [pc, #376]	; (8002188 <HAL_GPIO_Init+0x2fc>)
 800200e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	60bb      	str	r3, [r7, #8]
 8002016:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002018:	4a5c      	ldr	r2, [pc, #368]	; (800218c <HAL_GPIO_Init+0x300>)
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	089b      	lsrs	r3, r3, #2
 800201e:	3302      	adds	r3, #2
 8002020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002024:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	f003 0303 	and.w	r3, r3, #3
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	220f      	movs	r2, #15
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	4013      	ands	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002042:	d02b      	beq.n	800209c <HAL_GPIO_Init+0x210>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a52      	ldr	r2, [pc, #328]	; (8002190 <HAL_GPIO_Init+0x304>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d025      	beq.n	8002098 <HAL_GPIO_Init+0x20c>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a51      	ldr	r2, [pc, #324]	; (8002194 <HAL_GPIO_Init+0x308>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d01f      	beq.n	8002094 <HAL_GPIO_Init+0x208>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a50      	ldr	r2, [pc, #320]	; (8002198 <HAL_GPIO_Init+0x30c>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d019      	beq.n	8002090 <HAL_GPIO_Init+0x204>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a4f      	ldr	r2, [pc, #316]	; (800219c <HAL_GPIO_Init+0x310>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d013      	beq.n	800208c <HAL_GPIO_Init+0x200>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a4e      	ldr	r2, [pc, #312]	; (80021a0 <HAL_GPIO_Init+0x314>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d00d      	beq.n	8002088 <HAL_GPIO_Init+0x1fc>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a4d      	ldr	r2, [pc, #308]	; (80021a4 <HAL_GPIO_Init+0x318>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d007      	beq.n	8002084 <HAL_GPIO_Init+0x1f8>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a4c      	ldr	r2, [pc, #304]	; (80021a8 <HAL_GPIO_Init+0x31c>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d101      	bne.n	8002080 <HAL_GPIO_Init+0x1f4>
 800207c:	2307      	movs	r3, #7
 800207e:	e00e      	b.n	800209e <HAL_GPIO_Init+0x212>
 8002080:	2308      	movs	r3, #8
 8002082:	e00c      	b.n	800209e <HAL_GPIO_Init+0x212>
 8002084:	2306      	movs	r3, #6
 8002086:	e00a      	b.n	800209e <HAL_GPIO_Init+0x212>
 8002088:	2305      	movs	r3, #5
 800208a:	e008      	b.n	800209e <HAL_GPIO_Init+0x212>
 800208c:	2304      	movs	r3, #4
 800208e:	e006      	b.n	800209e <HAL_GPIO_Init+0x212>
 8002090:	2303      	movs	r3, #3
 8002092:	e004      	b.n	800209e <HAL_GPIO_Init+0x212>
 8002094:	2302      	movs	r3, #2
 8002096:	e002      	b.n	800209e <HAL_GPIO_Init+0x212>
 8002098:	2301      	movs	r3, #1
 800209a:	e000      	b.n	800209e <HAL_GPIO_Init+0x212>
 800209c:	2300      	movs	r3, #0
 800209e:	697a      	ldr	r2, [r7, #20]
 80020a0:	f002 0203 	and.w	r2, r2, #3
 80020a4:	0092      	lsls	r2, r2, #2
 80020a6:	4093      	lsls	r3, r2
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020ae:	4937      	ldr	r1, [pc, #220]	; (800218c <HAL_GPIO_Init+0x300>)
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	089b      	lsrs	r3, r3, #2
 80020b4:	3302      	adds	r3, #2
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020bc:	4b3b      	ldr	r3, [pc, #236]	; (80021ac <HAL_GPIO_Init+0x320>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	43db      	mvns	r3, r3
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	4013      	ands	r3, r2
 80020ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d003      	beq.n	80020e0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	4313      	orrs	r3, r2
 80020de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020e0:	4a32      	ldr	r2, [pc, #200]	; (80021ac <HAL_GPIO_Init+0x320>)
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020e6:	4b31      	ldr	r3, [pc, #196]	; (80021ac <HAL_GPIO_Init+0x320>)
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	43db      	mvns	r3, r3
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	4013      	ands	r3, r2
 80020f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d003      	beq.n	800210a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	4313      	orrs	r3, r2
 8002108:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800210a:	4a28      	ldr	r2, [pc, #160]	; (80021ac <HAL_GPIO_Init+0x320>)
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002110:	4b26      	ldr	r3, [pc, #152]	; (80021ac <HAL_GPIO_Init+0x320>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	43db      	mvns	r3, r3
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	4013      	ands	r3, r2
 800211e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d003      	beq.n	8002134 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	4313      	orrs	r3, r2
 8002132:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002134:	4a1d      	ldr	r2, [pc, #116]	; (80021ac <HAL_GPIO_Init+0x320>)
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800213a:	4b1c      	ldr	r3, [pc, #112]	; (80021ac <HAL_GPIO_Init+0x320>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	43db      	mvns	r3, r3
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	4013      	ands	r3, r2
 8002148:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	4313      	orrs	r3, r2
 800215c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800215e:	4a13      	ldr	r2, [pc, #76]	; (80021ac <HAL_GPIO_Init+0x320>)
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	3301      	adds	r3, #1
 8002168:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	fa22 f303 	lsr.w	r3, r2, r3
 8002174:	2b00      	cmp	r3, #0
 8002176:	f47f ae91 	bne.w	8001e9c <HAL_GPIO_Init+0x10>
  }
}
 800217a:	bf00      	nop
 800217c:	bf00      	nop
 800217e:	371c      	adds	r7, #28
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	40021000 	.word	0x40021000
 800218c:	40010000 	.word	0x40010000
 8002190:	48000400 	.word	0x48000400
 8002194:	48000800 	.word	0x48000800
 8002198:	48000c00 	.word	0x48000c00
 800219c:	48001000 	.word	0x48001000
 80021a0:	48001400 	.word	0x48001400
 80021a4:	48001800 	.word	0x48001800
 80021a8:	48001c00 	.word	0x48001c00
 80021ac:	40010400 	.word	0x40010400

080021b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	460b      	mov	r3, r1
 80021ba:	807b      	strh	r3, [r7, #2]
 80021bc:	4613      	mov	r3, r2
 80021be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021c0:	787b      	ldrb	r3, [r7, #1]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021c6:	887a      	ldrh	r2, [r7, #2]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021cc:	e002      	b.n	80021d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021ce:	887a      	ldrh	r2, [r7, #2]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80021ea:	4b08      	ldr	r3, [pc, #32]	; (800220c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021ec:	695a      	ldr	r2, [r3, #20]
 80021ee:	88fb      	ldrh	r3, [r7, #6]
 80021f0:	4013      	ands	r3, r2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d006      	beq.n	8002204 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021f6:	4a05      	ldr	r2, [pc, #20]	; (800220c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021f8:	88fb      	ldrh	r3, [r7, #6]
 80021fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021fc:	88fb      	ldrh	r3, [r7, #6]
 80021fe:	4618      	mov	r0, r3
 8002200:	f7fe ffa0 	bl	8001144 <HAL_GPIO_EXTI_Callback>
  }
}
 8002204:	bf00      	nop
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40010400 	.word	0x40010400

08002210 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e081      	b.n	8002326 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d106      	bne.n	800223c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7ff f920 	bl	800147c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2224      	movs	r2, #36	; 0x24
 8002240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 0201 	bic.w	r2, r2, #1
 8002252:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685a      	ldr	r2, [r3, #4]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002260:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002270:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d107      	bne.n	800228a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	689a      	ldr	r2, [r3, #8]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	e006      	b.n	8002298 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	689a      	ldr	r2, [r3, #8]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002296:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	2b02      	cmp	r3, #2
 800229e:	d104      	bne.n	80022aa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	6812      	ldr	r2, [r2, #0]
 80022b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68da      	ldr	r2, [r3, #12]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	691a      	ldr	r2, [r3, #16]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	430a      	orrs	r2, r1
 80022e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	69d9      	ldr	r1, [r3, #28]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a1a      	ldr	r2, [r3, #32]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	430a      	orrs	r2, r1
 80022f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f042 0201 	orr.w	r2, r2, #1
 8002306:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2220      	movs	r2, #32
 8002312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
	...

08002330 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b088      	sub	sp, #32
 8002334:	af02      	add	r7, sp, #8
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	607a      	str	r2, [r7, #4]
 800233a:	461a      	mov	r2, r3
 800233c:	460b      	mov	r3, r1
 800233e:	817b      	strh	r3, [r7, #10]
 8002340:	4613      	mov	r3, r2
 8002342:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800234a:	b2db      	uxtb	r3, r3
 800234c:	2b20      	cmp	r3, #32
 800234e:	f040 80da 	bne.w	8002506 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002358:	2b01      	cmp	r3, #1
 800235a:	d101      	bne.n	8002360 <HAL_I2C_Master_Transmit+0x30>
 800235c:	2302      	movs	r3, #2
 800235e:	e0d3      	b.n	8002508 <HAL_I2C_Master_Transmit+0x1d8>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002368:	f7ff fb94 	bl	8001a94 <HAL_GetTick>
 800236c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	9300      	str	r3, [sp, #0]
 8002372:	2319      	movs	r3, #25
 8002374:	2201      	movs	r2, #1
 8002376:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800237a:	68f8      	ldr	r0, [r7, #12]
 800237c:	f000 f9e6 	bl	800274c <I2C_WaitOnFlagUntilTimeout>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e0be      	b.n	8002508 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2221      	movs	r2, #33	; 0x21
 800238e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2210      	movs	r2, #16
 8002396:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2200      	movs	r2, #0
 800239e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	893a      	ldrh	r2, [r7, #8]
 80023aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2200      	movs	r2, #0
 80023b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	2bff      	cmp	r3, #255	; 0xff
 80023ba:	d90e      	bls.n	80023da <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	22ff      	movs	r2, #255	; 0xff
 80023c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	8979      	ldrh	r1, [r7, #10]
 80023ca:	4b51      	ldr	r3, [pc, #324]	; (8002510 <HAL_I2C_Master_Transmit+0x1e0>)
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f000 fbdc 	bl	8002b90 <I2C_TransferConfig>
 80023d8:	e06c      	b.n	80024b4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023de:	b29a      	uxth	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	8979      	ldrh	r1, [r7, #10]
 80023ec:	4b48      	ldr	r3, [pc, #288]	; (8002510 <HAL_I2C_Master_Transmit+0x1e0>)
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f000 fbcb 	bl	8002b90 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80023fa:	e05b      	b.n	80024b4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023fc:	697a      	ldr	r2, [r7, #20]
 80023fe:	6a39      	ldr	r1, [r7, #32]
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	f000 f9e3 	bl	80027cc <I2C_WaitOnTXISFlagUntilTimeout>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e07b      	b.n	8002508 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002414:	781a      	ldrb	r2, [r3, #0]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002420:	1c5a      	adds	r2, r3, #1
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800242a:	b29b      	uxth	r3, r3
 800242c:	3b01      	subs	r3, #1
 800242e:	b29a      	uxth	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002438:	3b01      	subs	r3, #1
 800243a:	b29a      	uxth	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002444:	b29b      	uxth	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d034      	beq.n	80024b4 <HAL_I2C_Master_Transmit+0x184>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800244e:	2b00      	cmp	r3, #0
 8002450:	d130      	bne.n	80024b4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	6a3b      	ldr	r3, [r7, #32]
 8002458:	2200      	movs	r2, #0
 800245a:	2180      	movs	r1, #128	; 0x80
 800245c:	68f8      	ldr	r0, [r7, #12]
 800245e:	f000 f975 	bl	800274c <I2C_WaitOnFlagUntilTimeout>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e04d      	b.n	8002508 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002470:	b29b      	uxth	r3, r3
 8002472:	2bff      	cmp	r3, #255	; 0xff
 8002474:	d90e      	bls.n	8002494 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	22ff      	movs	r2, #255	; 0xff
 800247a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002480:	b2da      	uxtb	r2, r3
 8002482:	8979      	ldrh	r1, [r7, #10]
 8002484:	2300      	movs	r3, #0
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f000 fb7f 	bl	8002b90 <I2C_TransferConfig>
 8002492:	e00f      	b.n	80024b4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002498:	b29a      	uxth	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a2:	b2da      	uxtb	r2, r3
 80024a4:	8979      	ldrh	r1, [r7, #10]
 80024a6:	2300      	movs	r3, #0
 80024a8:	9300      	str	r3, [sp, #0]
 80024aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f000 fb6e 	bl	8002b90 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d19e      	bne.n	80023fc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	6a39      	ldr	r1, [r7, #32]
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f000 f9c2 	bl	800284c <I2C_WaitOnSTOPFlagUntilTimeout>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e01a      	b.n	8002508 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2220      	movs	r2, #32
 80024d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	6859      	ldr	r1, [r3, #4]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <HAL_I2C_Master_Transmit+0x1e4>)
 80024e6:	400b      	ands	r3, r1
 80024e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2220      	movs	r2, #32
 80024ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002502:	2300      	movs	r3, #0
 8002504:	e000      	b.n	8002508 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002506:	2302      	movs	r3, #2
  }
}
 8002508:	4618      	mov	r0, r3
 800250a:	3718      	adds	r7, #24
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	80002000 	.word	0x80002000
 8002514:	fe00e800 	.word	0xfe00e800

08002518 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b088      	sub	sp, #32
 800251c:	af02      	add	r7, sp, #8
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	607a      	str	r2, [r7, #4]
 8002522:	461a      	mov	r2, r3
 8002524:	460b      	mov	r3, r1
 8002526:	817b      	strh	r3, [r7, #10]
 8002528:	4613      	mov	r3, r2
 800252a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b20      	cmp	r3, #32
 8002536:	f040 80db 	bne.w	80026f0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002540:	2b01      	cmp	r3, #1
 8002542:	d101      	bne.n	8002548 <HAL_I2C_Master_Receive+0x30>
 8002544:	2302      	movs	r3, #2
 8002546:	e0d4      	b.n	80026f2 <HAL_I2C_Master_Receive+0x1da>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002550:	f7ff faa0 	bl	8001a94 <HAL_GetTick>
 8002554:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	2319      	movs	r3, #25
 800255c:	2201      	movs	r2, #1
 800255e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002562:	68f8      	ldr	r0, [r7, #12]
 8002564:	f000 f8f2 	bl	800274c <I2C_WaitOnFlagUntilTimeout>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e0bf      	b.n	80026f2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2222      	movs	r2, #34	; 0x22
 8002576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2210      	movs	r2, #16
 800257e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	893a      	ldrh	r2, [r7, #8]
 8002592:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800259e:	b29b      	uxth	r3, r3
 80025a0:	2bff      	cmp	r3, #255	; 0xff
 80025a2:	d90e      	bls.n	80025c2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	22ff      	movs	r2, #255	; 0xff
 80025a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	8979      	ldrh	r1, [r7, #10]
 80025b2:	4b52      	ldr	r3, [pc, #328]	; (80026fc <HAL_I2C_Master_Receive+0x1e4>)
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025ba:	68f8      	ldr	r0, [r7, #12]
 80025bc:	f000 fae8 	bl	8002b90 <I2C_TransferConfig>
 80025c0:	e06d      	b.n	800269e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d0:	b2da      	uxtb	r2, r3
 80025d2:	8979      	ldrh	r1, [r7, #10]
 80025d4:	4b49      	ldr	r3, [pc, #292]	; (80026fc <HAL_I2C_Master_Receive+0x1e4>)
 80025d6:	9300      	str	r3, [sp, #0]
 80025d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f000 fad7 	bl	8002b90 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80025e2:	e05c      	b.n	800269e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025e4:	697a      	ldr	r2, [r7, #20]
 80025e6:	6a39      	ldr	r1, [r7, #32]
 80025e8:	68f8      	ldr	r0, [r7, #12]
 80025ea:	f000 f96b 	bl	80028c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e07c      	b.n	80026f2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260a:	1c5a      	adds	r2, r3, #1
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002614:	3b01      	subs	r3, #1
 8002616:	b29a      	uxth	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002620:	b29b      	uxth	r3, r3
 8002622:	3b01      	subs	r3, #1
 8002624:	b29a      	uxth	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800262e:	b29b      	uxth	r3, r3
 8002630:	2b00      	cmp	r3, #0
 8002632:	d034      	beq.n	800269e <HAL_I2C_Master_Receive+0x186>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002638:	2b00      	cmp	r3, #0
 800263a:	d130      	bne.n	800269e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	6a3b      	ldr	r3, [r7, #32]
 8002642:	2200      	movs	r2, #0
 8002644:	2180      	movs	r1, #128	; 0x80
 8002646:	68f8      	ldr	r0, [r7, #12]
 8002648:	f000 f880 	bl	800274c <I2C_WaitOnFlagUntilTimeout>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e04d      	b.n	80026f2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265a:	b29b      	uxth	r3, r3
 800265c:	2bff      	cmp	r3, #255	; 0xff
 800265e:	d90e      	bls.n	800267e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	22ff      	movs	r2, #255	; 0xff
 8002664:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800266a:	b2da      	uxtb	r2, r3
 800266c:	8979      	ldrh	r1, [r7, #10]
 800266e:	2300      	movs	r3, #0
 8002670:	9300      	str	r3, [sp, #0]
 8002672:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f000 fa8a 	bl	8002b90 <I2C_TransferConfig>
 800267c:	e00f      	b.n	800269e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002682:	b29a      	uxth	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800268c:	b2da      	uxtb	r2, r3
 800268e:	8979      	ldrh	r1, [r7, #10]
 8002690:	2300      	movs	r3, #0
 8002692:	9300      	str	r3, [sp, #0]
 8002694:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f000 fa79 	bl	8002b90 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d19d      	bne.n	80025e4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	6a39      	ldr	r1, [r7, #32]
 80026ac:	68f8      	ldr	r0, [r7, #12]
 80026ae:	f000 f8cd 	bl	800284c <I2C_WaitOnSTOPFlagUntilTimeout>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e01a      	b.n	80026f2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2220      	movs	r2, #32
 80026c2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6859      	ldr	r1, [r3, #4]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	4b0c      	ldr	r3, [pc, #48]	; (8002700 <HAL_I2C_Master_Receive+0x1e8>)
 80026d0:	400b      	ands	r3, r1
 80026d2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2220      	movs	r2, #32
 80026d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026ec:	2300      	movs	r3, #0
 80026ee:	e000      	b.n	80026f2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80026f0:	2302      	movs	r3, #2
  }
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3718      	adds	r7, #24
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	80002400 	.word	0x80002400
 8002700:	fe00e800 	.word	0xfe00e800

08002704 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b02      	cmp	r3, #2
 8002718:	d103      	bne.n	8002722 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2200      	movs	r2, #0
 8002720:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	2b01      	cmp	r3, #1
 800272e:	d007      	beq.n	8002740 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	699a      	ldr	r2, [r3, #24]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f042 0201 	orr.w	r2, r2, #1
 800273e:	619a      	str	r2, [r3, #24]
  }
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	603b      	str	r3, [r7, #0]
 8002758:	4613      	mov	r3, r2
 800275a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800275c:	e022      	b.n	80027a4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002764:	d01e      	beq.n	80027a4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002766:	f7ff f995 	bl	8001a94 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	429a      	cmp	r2, r3
 8002774:	d302      	bcc.n	800277c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d113      	bne.n	80027a4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002780:	f043 0220 	orr.w	r2, r3, #32
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2220      	movs	r2, #32
 800278c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e00f      	b.n	80027c4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	699a      	ldr	r2, [r3, #24]
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	4013      	ands	r3, r2
 80027ae:	68ba      	ldr	r2, [r7, #8]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	bf0c      	ite	eq
 80027b4:	2301      	moveq	r3, #1
 80027b6:	2300      	movne	r3, #0
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	461a      	mov	r2, r3
 80027bc:	79fb      	ldrb	r3, [r7, #7]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d0cd      	beq.n	800275e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80027d8:	e02c      	b.n	8002834 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	68b9      	ldr	r1, [r7, #8]
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f000 f8ea 	bl	80029b8 <I2C_IsErrorOccurred>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e02a      	b.n	8002844 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f4:	d01e      	beq.n	8002834 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027f6:	f7ff f94d 	bl	8001a94 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	68ba      	ldr	r2, [r7, #8]
 8002802:	429a      	cmp	r2, r3
 8002804:	d302      	bcc.n	800280c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d113      	bne.n	8002834 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002810:	f043 0220 	orr.w	r2, r3, #32
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2220      	movs	r2, #32
 800281c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e007      	b.n	8002844 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b02      	cmp	r3, #2
 8002840:	d1cb      	bne.n	80027da <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002858:	e028      	b.n	80028ac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	68b9      	ldr	r1, [r7, #8]
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f000 f8aa 	bl	80029b8 <I2C_IsErrorOccurred>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e026      	b.n	80028bc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800286e:	f7ff f911 	bl	8001a94 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	68ba      	ldr	r2, [r7, #8]
 800287a:	429a      	cmp	r2, r3
 800287c:	d302      	bcc.n	8002884 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d113      	bne.n	80028ac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002888:	f043 0220 	orr.w	r2, r3, #32
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2220      	movs	r2, #32
 8002894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e007      	b.n	80028bc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	f003 0320 	and.w	r3, r3, #32
 80028b6:	2b20      	cmp	r3, #32
 80028b8:	d1cf      	bne.n	800285a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3710      	adds	r7, #16
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80028d0:	e064      	b.n	800299c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	68b9      	ldr	r1, [r7, #8]
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f000 f86e 	bl	80029b8 <I2C_IsErrorOccurred>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e062      	b.n	80029ac <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	f003 0320 	and.w	r3, r3, #32
 80028f0:	2b20      	cmp	r3, #32
 80028f2:	d138      	bne.n	8002966 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	f003 0304 	and.w	r3, r3, #4
 80028fe:	2b04      	cmp	r3, #4
 8002900:	d105      	bne.n	800290e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800290a:	2300      	movs	r3, #0
 800290c:	e04e      	b.n	80029ac <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	f003 0310 	and.w	r3, r3, #16
 8002918:	2b10      	cmp	r3, #16
 800291a:	d107      	bne.n	800292c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2210      	movs	r2, #16
 8002922:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2204      	movs	r2, #4
 8002928:	645a      	str	r2, [r3, #68]	; 0x44
 800292a:	e002      	b.n	8002932 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2220      	movs	r2, #32
 8002938:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	6859      	ldr	r1, [r3, #4]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	4b1b      	ldr	r3, [pc, #108]	; (80029b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8002946:	400b      	ands	r3, r1
 8002948:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2220      	movs	r2, #32
 800294e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e022      	b.n	80029ac <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002966:	f7ff f895 	bl	8001a94 <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	68ba      	ldr	r2, [r7, #8]
 8002972:	429a      	cmp	r2, r3
 8002974:	d302      	bcc.n	800297c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10f      	bne.n	800299c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002980:	f043 0220 	orr.w	r2, r3, #32
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2220      	movs	r2, #32
 800298c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e007      	b.n	80029ac <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	f003 0304 	and.w	r3, r3, #4
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	d193      	bne.n	80028d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	fe00e800 	.word	0xfe00e800

080029b8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b08a      	sub	sp, #40	; 0x28
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029c4:	2300      	movs	r3, #0
 80029c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80029d2:	2300      	movs	r3, #0
 80029d4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	f003 0310 	and.w	r3, r3, #16
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d075      	beq.n	8002ad0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2210      	movs	r2, #16
 80029ea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80029ec:	e056      	b.n	8002a9c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f4:	d052      	beq.n	8002a9c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80029f6:	f7ff f84d 	bl	8001a94 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	68ba      	ldr	r2, [r7, #8]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d302      	bcc.n	8002a0c <I2C_IsErrorOccurred+0x54>
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d147      	bne.n	8002a9c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a16:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002a1e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a2e:	d12e      	bne.n	8002a8e <I2C_IsErrorOccurred+0xd6>
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a36:	d02a      	beq.n	8002a8e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002a38:	7cfb      	ldrb	r3, [r7, #19]
 8002a3a:	2b20      	cmp	r3, #32
 8002a3c:	d027      	beq.n	8002a8e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	685a      	ldr	r2, [r3, #4]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a4c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002a4e:	f7ff f821 	bl	8001a94 <HAL_GetTick>
 8002a52:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a54:	e01b      	b.n	8002a8e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002a56:	f7ff f81d 	bl	8001a94 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b19      	cmp	r3, #25
 8002a62:	d914      	bls.n	8002a8e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a68:	f043 0220 	orr.w	r2, r3, #32
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2220      	movs	r2, #32
 8002a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	f003 0320 	and.w	r3, r3, #32
 8002a98:	2b20      	cmp	r3, #32
 8002a9a:	d1dc      	bne.n	8002a56 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	f003 0320 	and.w	r3, r3, #32
 8002aa6:	2b20      	cmp	r3, #32
 8002aa8:	d003      	beq.n	8002ab2 <I2C_IsErrorOccurred+0xfa>
 8002aaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d09d      	beq.n	80029ee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002ab2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d103      	bne.n	8002ac2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002ac2:	6a3b      	ldr	r3, [r7, #32]
 8002ac4:	f043 0304 	orr.w	r3, r3, #4
 8002ac8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00b      	beq.n	8002afa <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002ae2:	6a3b      	ldr	r3, [r7, #32]
 8002ae4:	f043 0301 	orr.w	r3, r3, #1
 8002ae8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002af2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00b      	beq.n	8002b1c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002b04:	6a3b      	ldr	r3, [r7, #32]
 8002b06:	f043 0308 	orr.w	r3, r3, #8
 8002b0a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b14:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00b      	beq.n	8002b3e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002b26:	6a3b      	ldr	r3, [r7, #32]
 8002b28:	f043 0302 	orr.w	r3, r3, #2
 8002b2c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b36:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002b3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d01c      	beq.n	8002b80 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f7ff fddc 	bl	8002704 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	6859      	ldr	r1, [r3, #4]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	4b0d      	ldr	r3, [pc, #52]	; (8002b8c <I2C_IsErrorOccurred+0x1d4>)
 8002b58:	400b      	ands	r3, r1
 8002b5a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b60:	6a3b      	ldr	r3, [r7, #32]
 8002b62:	431a      	orrs	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002b80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3728      	adds	r7, #40	; 0x28
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	fe00e800 	.word	0xfe00e800

08002b90 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b087      	sub	sp, #28
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	607b      	str	r3, [r7, #4]
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	817b      	strh	r3, [r7, #10]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ba2:	897b      	ldrh	r3, [r7, #10]
 8002ba4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ba8:	7a7b      	ldrb	r3, [r7, #9]
 8002baa:	041b      	lsls	r3, r3, #16
 8002bac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002bb0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002bb6:	6a3b      	ldr	r3, [r7, #32]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002bbe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	685a      	ldr	r2, [r3, #4]
 8002bc6:	6a3b      	ldr	r3, [r7, #32]
 8002bc8:	0d5b      	lsrs	r3, r3, #21
 8002bca:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002bce:	4b08      	ldr	r3, [pc, #32]	; (8002bf0 <I2C_TransferConfig+0x60>)
 8002bd0:	430b      	orrs	r3, r1
 8002bd2:	43db      	mvns	r3, r3
 8002bd4:	ea02 0103 	and.w	r1, r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	430a      	orrs	r2, r1
 8002be0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002be2:	bf00      	nop
 8002be4:	371c      	adds	r7, #28
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	03ff63ff 	.word	0x03ff63ff

08002bf4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b20      	cmp	r3, #32
 8002c08:	d138      	bne.n	8002c7c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d101      	bne.n	8002c18 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002c14:	2302      	movs	r3, #2
 8002c16:	e032      	b.n	8002c7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2224      	movs	r2, #36	; 0x24
 8002c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 0201 	bic.w	r2, r2, #1
 8002c36:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c46:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6819      	ldr	r1, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f042 0201 	orr.w	r2, r2, #1
 8002c66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	e000      	b.n	8002c7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002c7c:	2302      	movs	r3, #2
  }
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	b085      	sub	sp, #20
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
 8002c92:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b20      	cmp	r3, #32
 8002c9e:	d139      	bne.n	8002d14 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d101      	bne.n	8002cae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002caa:	2302      	movs	r3, #2
 8002cac:	e033      	b.n	8002d16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2224      	movs	r2, #36	; 0x24
 8002cba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 0201 	bic.w	r2, r2, #1
 8002ccc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002cdc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	021b      	lsls	r3, r3, #8
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f042 0201 	orr.w	r2, r2, #1
 8002cfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2220      	movs	r2, #32
 8002d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d10:	2300      	movs	r3, #0
 8002d12:	e000      	b.n	8002d16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002d14:	2302      	movs	r3, #2
  }
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3714      	adds	r7, #20
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
	...

08002d24 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d28:	4b0d      	ldr	r3, [pc, #52]	; (8002d60 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d34:	d102      	bne.n	8002d3c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002d36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d3a:	e00b      	b.n	8002d54 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002d3c:	4b08      	ldr	r3, [pc, #32]	; (8002d60 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002d3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d4a:	d102      	bne.n	8002d52 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002d4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d50:	e000      	b.n	8002d54 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002d52:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	40007000 	.word	0x40007000

08002d64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d141      	bne.n	8002df6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d72:	4b4b      	ldr	r3, [pc, #300]	; (8002ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d7e:	d131      	bne.n	8002de4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d80:	4b47      	ldr	r3, [pc, #284]	; (8002ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d86:	4a46      	ldr	r2, [pc, #280]	; (8002ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d90:	4b43      	ldr	r3, [pc, #268]	; (8002ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d98:	4a41      	ldr	r2, [pc, #260]	; (8002ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d9e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002da0:	4b40      	ldr	r3, [pc, #256]	; (8002ea4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2232      	movs	r2, #50	; 0x32
 8002da6:	fb02 f303 	mul.w	r3, r2, r3
 8002daa:	4a3f      	ldr	r2, [pc, #252]	; (8002ea8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002dac:	fba2 2303 	umull	r2, r3, r2, r3
 8002db0:	0c9b      	lsrs	r3, r3, #18
 8002db2:	3301      	adds	r3, #1
 8002db4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002db6:	e002      	b.n	8002dbe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002dbe:	4b38      	ldr	r3, [pc, #224]	; (8002ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dca:	d102      	bne.n	8002dd2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1f2      	bne.n	8002db8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002dd2:	4b33      	ldr	r3, [pc, #204]	; (8002ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dde:	d158      	bne.n	8002e92 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e057      	b.n	8002e94 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002de4:	4b2e      	ldr	r3, [pc, #184]	; (8002ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dea:	4a2d      	ldr	r2, [pc, #180]	; (8002ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002df0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002df4:	e04d      	b.n	8002e92 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dfc:	d141      	bne.n	8002e82 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002dfe:	4b28      	ldr	r3, [pc, #160]	; (8002ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e0a:	d131      	bne.n	8002e70 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e0c:	4b24      	ldr	r3, [pc, #144]	; (8002ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e12:	4a23      	ldr	r2, [pc, #140]	; (8002ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e1c:	4b20      	ldr	r3, [pc, #128]	; (8002ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e24:	4a1e      	ldr	r2, [pc, #120]	; (8002ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e2a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002e2c:	4b1d      	ldr	r3, [pc, #116]	; (8002ea4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2232      	movs	r2, #50	; 0x32
 8002e32:	fb02 f303 	mul.w	r3, r2, r3
 8002e36:	4a1c      	ldr	r2, [pc, #112]	; (8002ea8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002e38:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3c:	0c9b      	lsrs	r3, r3, #18
 8002e3e:	3301      	adds	r3, #1
 8002e40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e42:	e002      	b.n	8002e4a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	3b01      	subs	r3, #1
 8002e48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e4a:	4b15      	ldr	r3, [pc, #84]	; (8002ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e56:	d102      	bne.n	8002e5e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1f2      	bne.n	8002e44 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e5e:	4b10      	ldr	r3, [pc, #64]	; (8002ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e6a:	d112      	bne.n	8002e92 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e011      	b.n	8002e94 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e70:	4b0b      	ldr	r3, [pc, #44]	; (8002ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e76:	4a0a      	ldr	r2, [pc, #40]	; (8002ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e7c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002e80:	e007      	b.n	8002e92 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e82:	4b07      	ldr	r3, [pc, #28]	; (8002ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e8a:	4a05      	ldr	r2, [pc, #20]	; (8002ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e90:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3714      	adds	r7, #20
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	40007000 	.word	0x40007000
 8002ea4:	20000004 	.word	0x20000004
 8002ea8:	431bde83 	.word	0x431bde83

08002eac <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002eb0:	4b05      	ldr	r3, [pc, #20]	; (8002ec8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	4a04      	ldr	r2, [pc, #16]	; (8002ec8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002eb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eba:	6053      	str	r3, [r2, #4]
}
 8002ebc:	bf00      	nop
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	40007000 	.word	0x40007000

08002ecc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b08a      	sub	sp, #40	; 0x28
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d102      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	f000 bc68 	b.w	80037b0 <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ee0:	4b97      	ldr	r3, [pc, #604]	; (8003140 <HAL_RCC_OscConfig+0x274>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f003 030c 	and.w	r3, r3, #12
 8002ee8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002eea:	4b95      	ldr	r3, [pc, #596]	; (8003140 <HAL_RCC_OscConfig+0x274>)
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	f003 0303 	and.w	r3, r3, #3
 8002ef2:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0310 	and.w	r3, r3, #16
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 80e6 	beq.w	80030ce <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f02:	6a3b      	ldr	r3, [r7, #32]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d007      	beq.n	8002f18 <HAL_RCC_OscConfig+0x4c>
 8002f08:	6a3b      	ldr	r3, [r7, #32]
 8002f0a:	2b0c      	cmp	r3, #12
 8002f0c:	f040 808d 	bne.w	800302a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	f040 8089 	bne.w	800302a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f18:	4b89      	ldr	r3, [pc, #548]	; (8003140 <HAL_RCC_OscConfig+0x274>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d006      	beq.n	8002f32 <HAL_RCC_OscConfig+0x66>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	69db      	ldr	r3, [r3, #28]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d102      	bne.n	8002f32 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	f000 bc3f 	b.w	80037b0 <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f36:	4b82      	ldr	r3, [pc, #520]	; (8003140 <HAL_RCC_OscConfig+0x274>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0308 	and.w	r3, r3, #8
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d004      	beq.n	8002f4c <HAL_RCC_OscConfig+0x80>
 8002f42:	4b7f      	ldr	r3, [pc, #508]	; (8003140 <HAL_RCC_OscConfig+0x274>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f4a:	e005      	b.n	8002f58 <HAL_RCC_OscConfig+0x8c>
 8002f4c:	4b7c      	ldr	r3, [pc, #496]	; (8003140 <HAL_RCC_OscConfig+0x274>)
 8002f4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f52:	091b      	lsrs	r3, r3, #4
 8002f54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d224      	bcs.n	8002fa6 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f60:	4618      	mov	r0, r3
 8002f62:	f000 fe2d 	bl	8003bc0 <RCC_SetFlashLatencyFromMSIRange>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d002      	beq.n	8002f72 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	f000 bc1f 	b.w	80037b0 <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f72:	4b73      	ldr	r3, [pc, #460]	; (8003140 <HAL_RCC_OscConfig+0x274>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a72      	ldr	r2, [pc, #456]	; (8003140 <HAL_RCC_OscConfig+0x274>)
 8002f78:	f043 0308 	orr.w	r3, r3, #8
 8002f7c:	6013      	str	r3, [r2, #0]
 8002f7e:	4b70      	ldr	r3, [pc, #448]	; (8003140 <HAL_RCC_OscConfig+0x274>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8a:	496d      	ldr	r1, [pc, #436]	; (8003140 <HAL_RCC_OscConfig+0x274>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f90:	4b6b      	ldr	r3, [pc, #428]	; (8003140 <HAL_RCC_OscConfig+0x274>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a1b      	ldr	r3, [r3, #32]
 8002f9c:	021b      	lsls	r3, r3, #8
 8002f9e:	4968      	ldr	r1, [pc, #416]	; (8003140 <HAL_RCC_OscConfig+0x274>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	604b      	str	r3, [r1, #4]
 8002fa4:	e025      	b.n	8002ff2 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fa6:	4b66      	ldr	r3, [pc, #408]	; (8003140 <HAL_RCC_OscConfig+0x274>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a65      	ldr	r2, [pc, #404]	; (8003140 <HAL_RCC_OscConfig+0x274>)
 8002fac:	f043 0308 	orr.w	r3, r3, #8
 8002fb0:	6013      	str	r3, [r2, #0]
 8002fb2:	4b63      	ldr	r3, [pc, #396]	; (8003140 <HAL_RCC_OscConfig+0x274>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbe:	4960      	ldr	r1, [pc, #384]	; (8003140 <HAL_RCC_OscConfig+0x274>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fc4:	4b5e      	ldr	r3, [pc, #376]	; (8003140 <HAL_RCC_OscConfig+0x274>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	021b      	lsls	r3, r3, #8
 8002fd2:	495b      	ldr	r1, [pc, #364]	; (8003140 <HAL_RCC_OscConfig+0x274>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fd8:	6a3b      	ldr	r3, [r7, #32]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d109      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f000 fdec 	bl	8003bc0 <RCC_SetFlashLatencyFromMSIRange>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e3de      	b.n	80037b0 <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ff2:	f000 fd21 	bl	8003a38 <HAL_RCC_GetSysClockFreq>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	4b51      	ldr	r3, [pc, #324]	; (8003140 <HAL_RCC_OscConfig+0x274>)
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	091b      	lsrs	r3, r3, #4
 8002ffe:	f003 030f 	and.w	r3, r3, #15
 8003002:	4950      	ldr	r1, [pc, #320]	; (8003144 <HAL_RCC_OscConfig+0x278>)
 8003004:	5ccb      	ldrb	r3, [r1, r3]
 8003006:	f003 031f 	and.w	r3, r3, #31
 800300a:	fa22 f303 	lsr.w	r3, r2, r3
 800300e:	4a4e      	ldr	r2, [pc, #312]	; (8003148 <HAL_RCC_OscConfig+0x27c>)
 8003010:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003012:	4b4e      	ldr	r3, [pc, #312]	; (800314c <HAL_RCC_OscConfig+0x280>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4618      	mov	r0, r3
 8003018:	f7fe fcec 	bl	80019f4 <HAL_InitTick>
 800301c:	4603      	mov	r3, r0
 800301e:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8003020:	7dfb      	ldrb	r3, [r7, #23]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d052      	beq.n	80030cc <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8003026:	7dfb      	ldrb	r3, [r7, #23]
 8003028:	e3c2      	b.n	80037b0 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d032      	beq.n	8003098 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003032:	4b43      	ldr	r3, [pc, #268]	; (8003140 <HAL_RCC_OscConfig+0x274>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a42      	ldr	r2, [pc, #264]	; (8003140 <HAL_RCC_OscConfig+0x274>)
 8003038:	f043 0301 	orr.w	r3, r3, #1
 800303c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800303e:	f7fe fd29 	bl	8001a94 <HAL_GetTick>
 8003042:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003044:	e008      	b.n	8003058 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003046:	f7fe fd25 	bl	8001a94 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d901      	bls.n	8003058 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e3ab      	b.n	80037b0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003058:	4b39      	ldr	r3, [pc, #228]	; (8003140 <HAL_RCC_OscConfig+0x274>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0302 	and.w	r3, r3, #2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d0f0      	beq.n	8003046 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003064:	4b36      	ldr	r3, [pc, #216]	; (8003140 <HAL_RCC_OscConfig+0x274>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a35      	ldr	r2, [pc, #212]	; (8003140 <HAL_RCC_OscConfig+0x274>)
 800306a:	f043 0308 	orr.w	r3, r3, #8
 800306e:	6013      	str	r3, [r2, #0]
 8003070:	4b33      	ldr	r3, [pc, #204]	; (8003140 <HAL_RCC_OscConfig+0x274>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307c:	4930      	ldr	r1, [pc, #192]	; (8003140 <HAL_RCC_OscConfig+0x274>)
 800307e:	4313      	orrs	r3, r2
 8003080:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003082:	4b2f      	ldr	r3, [pc, #188]	; (8003140 <HAL_RCC_OscConfig+0x274>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	021b      	lsls	r3, r3, #8
 8003090:	492b      	ldr	r1, [pc, #172]	; (8003140 <HAL_RCC_OscConfig+0x274>)
 8003092:	4313      	orrs	r3, r2
 8003094:	604b      	str	r3, [r1, #4]
 8003096:	e01a      	b.n	80030ce <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003098:	4b29      	ldr	r3, [pc, #164]	; (8003140 <HAL_RCC_OscConfig+0x274>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a28      	ldr	r2, [pc, #160]	; (8003140 <HAL_RCC_OscConfig+0x274>)
 800309e:	f023 0301 	bic.w	r3, r3, #1
 80030a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030a4:	f7fe fcf6 	bl	8001a94 <HAL_GetTick>
 80030a8:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030aa:	e008      	b.n	80030be <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030ac:	f7fe fcf2 	bl	8001a94 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e378      	b.n	80037b0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030be:	4b20      	ldr	r3, [pc, #128]	; (8003140 <HAL_RCC_OscConfig+0x274>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1f0      	bne.n	80030ac <HAL_RCC_OscConfig+0x1e0>
 80030ca:	e000      	b.n	80030ce <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d073      	beq.n	80031c2 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80030da:	6a3b      	ldr	r3, [r7, #32]
 80030dc:	2b08      	cmp	r3, #8
 80030de:	d005      	beq.n	80030ec <HAL_RCC_OscConfig+0x220>
 80030e0:	6a3b      	ldr	r3, [r7, #32]
 80030e2:	2b0c      	cmp	r3, #12
 80030e4:	d10e      	bne.n	8003104 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	2b03      	cmp	r3, #3
 80030ea:	d10b      	bne.n	8003104 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ec:	4b14      	ldr	r3, [pc, #80]	; (8003140 <HAL_RCC_OscConfig+0x274>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d063      	beq.n	80031c0 <HAL_RCC_OscConfig+0x2f4>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d15f      	bne.n	80031c0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e355      	b.n	80037b0 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800310c:	d106      	bne.n	800311c <HAL_RCC_OscConfig+0x250>
 800310e:	4b0c      	ldr	r3, [pc, #48]	; (8003140 <HAL_RCC_OscConfig+0x274>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a0b      	ldr	r2, [pc, #44]	; (8003140 <HAL_RCC_OscConfig+0x274>)
 8003114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003118:	6013      	str	r3, [r2, #0]
 800311a:	e025      	b.n	8003168 <HAL_RCC_OscConfig+0x29c>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003124:	d114      	bne.n	8003150 <HAL_RCC_OscConfig+0x284>
 8003126:	4b06      	ldr	r3, [pc, #24]	; (8003140 <HAL_RCC_OscConfig+0x274>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a05      	ldr	r2, [pc, #20]	; (8003140 <HAL_RCC_OscConfig+0x274>)
 800312c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003130:	6013      	str	r3, [r2, #0]
 8003132:	4b03      	ldr	r3, [pc, #12]	; (8003140 <HAL_RCC_OscConfig+0x274>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a02      	ldr	r2, [pc, #8]	; (8003140 <HAL_RCC_OscConfig+0x274>)
 8003138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800313c:	6013      	str	r3, [r2, #0]
 800313e:	e013      	b.n	8003168 <HAL_RCC_OscConfig+0x29c>
 8003140:	40021000 	.word	0x40021000
 8003144:	0800ce00 	.word	0x0800ce00
 8003148:	20000004 	.word	0x20000004
 800314c:	20000008 	.word	0x20000008
 8003150:	4b8f      	ldr	r3, [pc, #572]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a8e      	ldr	r2, [pc, #568]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 8003156:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800315a:	6013      	str	r3, [r2, #0]
 800315c:	4b8c      	ldr	r3, [pc, #560]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a8b      	ldr	r2, [pc, #556]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 8003162:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003166:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d013      	beq.n	8003198 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003170:	f7fe fc90 	bl	8001a94 <HAL_GetTick>
 8003174:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003176:	e008      	b.n	800318a <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003178:	f7fe fc8c 	bl	8001a94 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b64      	cmp	r3, #100	; 0x64
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e312      	b.n	80037b0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800318a:	4b81      	ldr	r3, [pc, #516]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d0f0      	beq.n	8003178 <HAL_RCC_OscConfig+0x2ac>
 8003196:	e014      	b.n	80031c2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003198:	f7fe fc7c 	bl	8001a94 <HAL_GetTick>
 800319c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800319e:	e008      	b.n	80031b2 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031a0:	f7fe fc78 	bl	8001a94 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b64      	cmp	r3, #100	; 0x64
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e2fe      	b.n	80037b0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031b2:	4b77      	ldr	r3, [pc, #476]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1f0      	bne.n	80031a0 <HAL_RCC_OscConfig+0x2d4>
 80031be:	e000      	b.n	80031c2 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d060      	beq.n	8003290 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80031ce:	6a3b      	ldr	r3, [r7, #32]
 80031d0:	2b04      	cmp	r3, #4
 80031d2:	d005      	beq.n	80031e0 <HAL_RCC_OscConfig+0x314>
 80031d4:	6a3b      	ldr	r3, [r7, #32]
 80031d6:	2b0c      	cmp	r3, #12
 80031d8:	d119      	bne.n	800320e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d116      	bne.n	800320e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031e0:	4b6b      	ldr	r3, [pc, #428]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d005      	beq.n	80031f8 <HAL_RCC_OscConfig+0x32c>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d101      	bne.n	80031f8 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e2db      	b.n	80037b0 <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f8:	4b65      	ldr	r3, [pc, #404]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	061b      	lsls	r3, r3, #24
 8003206:	4962      	ldr	r1, [pc, #392]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 8003208:	4313      	orrs	r3, r2
 800320a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800320c:	e040      	b.n	8003290 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d023      	beq.n	800325e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003216:	4b5e      	ldr	r3, [pc, #376]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a5d      	ldr	r2, [pc, #372]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 800321c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003220:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003222:	f7fe fc37 	bl	8001a94 <HAL_GetTick>
 8003226:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003228:	e008      	b.n	800323c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800322a:	f7fe fc33 	bl	8001a94 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	2b02      	cmp	r3, #2
 8003236:	d901      	bls.n	800323c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e2b9      	b.n	80037b0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800323c:	4b54      	ldr	r3, [pc, #336]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003244:	2b00      	cmp	r3, #0
 8003246:	d0f0      	beq.n	800322a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003248:	4b51      	ldr	r3, [pc, #324]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	061b      	lsls	r3, r3, #24
 8003256:	494e      	ldr	r1, [pc, #312]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 8003258:	4313      	orrs	r3, r2
 800325a:	604b      	str	r3, [r1, #4]
 800325c:	e018      	b.n	8003290 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800325e:	4b4c      	ldr	r3, [pc, #304]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a4b      	ldr	r2, [pc, #300]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 8003264:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003268:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800326a:	f7fe fc13 	bl	8001a94 <HAL_GetTick>
 800326e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003270:	e008      	b.n	8003284 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003272:	f7fe fc0f 	bl	8001a94 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e295      	b.n	80037b0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003284:	4b42      	ldr	r3, [pc, #264]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1f0      	bne.n	8003272 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0308 	and.w	r3, r3, #8
 8003298:	2b00      	cmp	r3, #0
 800329a:	f000 8082 	beq.w	80033a2 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d05f      	beq.n	8003366 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80032a6:	4b3a      	ldr	r3, [pc, #232]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 80032a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032ac:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	699a      	ldr	r2, [r3, #24]
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	f003 0310 	and.w	r3, r3, #16
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d037      	beq.n	800332c <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d006      	beq.n	80032d4 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d101      	bne.n	80032d4 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e26d      	b.n	80037b0 <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d01b      	beq.n	8003316 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 80032de:	4b2c      	ldr	r3, [pc, #176]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 80032e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032e4:	4a2a      	ldr	r2, [pc, #168]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 80032e6:	f023 0301 	bic.w	r3, r3, #1
 80032ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80032ee:	f7fe fbd1 	bl	8001a94 <HAL_GetTick>
 80032f2:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032f4:	e008      	b.n	8003308 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032f6:	f7fe fbcd 	bl	8001a94 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b11      	cmp	r3, #17
 8003302:	d901      	bls.n	8003308 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e253      	b.n	80037b0 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003308:	4b21      	ldr	r3, [pc, #132]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 800330a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1ef      	bne.n	80032f6 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8003316:	4b1e      	ldr	r3, [pc, #120]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 8003318:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800331c:	f023 0210 	bic.w	r2, r3, #16
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	491a      	ldr	r1, [pc, #104]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 8003326:	4313      	orrs	r3, r2
 8003328:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800332c:	4b18      	ldr	r3, [pc, #96]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 800332e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003332:	4a17      	ldr	r2, [pc, #92]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 8003334:	f043 0301 	orr.w	r3, r3, #1
 8003338:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800333c:	f7fe fbaa 	bl	8001a94 <HAL_GetTick>
 8003340:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003344:	f7fe fba6 	bl	8001a94 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b11      	cmp	r3, #17
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e22c      	b.n	80037b0 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003356:	4b0e      	ldr	r3, [pc, #56]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 8003358:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d0ef      	beq.n	8003344 <HAL_RCC_OscConfig+0x478>
 8003364:	e01d      	b.n	80033a2 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003366:	4b0a      	ldr	r3, [pc, #40]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 8003368:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800336c:	4a08      	ldr	r2, [pc, #32]	; (8003390 <HAL_RCC_OscConfig+0x4c4>)
 800336e:	f023 0301 	bic.w	r3, r3, #1
 8003372:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003376:	f7fe fb8d 	bl	8001a94 <HAL_GetTick>
 800337a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800337c:	e00a      	b.n	8003394 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800337e:	f7fe fb89 	bl	8001a94 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b11      	cmp	r3, #17
 800338a:	d903      	bls.n	8003394 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e20f      	b.n	80037b0 <HAL_RCC_OscConfig+0x8e4>
 8003390:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003394:	4b83      	ldr	r3, [pc, #524]	; (80035a4 <HAL_RCC_OscConfig+0x6d8>)
 8003396:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1ed      	bne.n	800337e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0304 	and.w	r3, r3, #4
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f000 80bd 	beq.w	800352a <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033b0:	2300      	movs	r3, #0
 80033b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80033b6:	4b7b      	ldr	r3, [pc, #492]	; (80035a4 <HAL_RCC_OscConfig+0x6d8>)
 80033b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10e      	bne.n	80033e0 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033c2:	4b78      	ldr	r3, [pc, #480]	; (80035a4 <HAL_RCC_OscConfig+0x6d8>)
 80033c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c6:	4a77      	ldr	r2, [pc, #476]	; (80035a4 <HAL_RCC_OscConfig+0x6d8>)
 80033c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033cc:	6593      	str	r3, [r2, #88]	; 0x58
 80033ce:	4b75      	ldr	r3, [pc, #468]	; (80035a4 <HAL_RCC_OscConfig+0x6d8>)
 80033d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d6:	60fb      	str	r3, [r7, #12]
 80033d8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80033da:	2301      	movs	r3, #1
 80033dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033e0:	4b71      	ldr	r3, [pc, #452]	; (80035a8 <HAL_RCC_OscConfig+0x6dc>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d118      	bne.n	800341e <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033ec:	4b6e      	ldr	r3, [pc, #440]	; (80035a8 <HAL_RCC_OscConfig+0x6dc>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a6d      	ldr	r2, [pc, #436]	; (80035a8 <HAL_RCC_OscConfig+0x6dc>)
 80033f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033f8:	f7fe fb4c 	bl	8001a94 <HAL_GetTick>
 80033fc:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003400:	f7fe fb48 	bl	8001a94 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e1ce      	b.n	80037b0 <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003412:	4b65      	ldr	r3, [pc, #404]	; (80035a8 <HAL_RCC_OscConfig+0x6dc>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800341a:	2b00      	cmp	r3, #0
 800341c:	d0f0      	beq.n	8003400 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b00      	cmp	r3, #0
 8003428:	d02c      	beq.n	8003484 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800342a:	4b5e      	ldr	r3, [pc, #376]	; (80035a4 <HAL_RCC_OscConfig+0x6d8>)
 800342c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003430:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800343c:	4959      	ldr	r1, [pc, #356]	; (80035a4 <HAL_RCC_OscConfig+0x6d8>)
 800343e:	4313      	orrs	r3, r2
 8003440:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f003 0304 	and.w	r3, r3, #4
 800344c:	2b00      	cmp	r3, #0
 800344e:	d010      	beq.n	8003472 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003450:	4b54      	ldr	r3, [pc, #336]	; (80035a4 <HAL_RCC_OscConfig+0x6d8>)
 8003452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003456:	4a53      	ldr	r2, [pc, #332]	; (80035a4 <HAL_RCC_OscConfig+0x6d8>)
 8003458:	f043 0304 	orr.w	r3, r3, #4
 800345c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003460:	4b50      	ldr	r3, [pc, #320]	; (80035a4 <HAL_RCC_OscConfig+0x6d8>)
 8003462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003466:	4a4f      	ldr	r2, [pc, #316]	; (80035a4 <HAL_RCC_OscConfig+0x6d8>)
 8003468:	f043 0301 	orr.w	r3, r3, #1
 800346c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003470:	e018      	b.n	80034a4 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003472:	4b4c      	ldr	r3, [pc, #304]	; (80035a4 <HAL_RCC_OscConfig+0x6d8>)
 8003474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003478:	4a4a      	ldr	r2, [pc, #296]	; (80035a4 <HAL_RCC_OscConfig+0x6d8>)
 800347a:	f043 0301 	orr.w	r3, r3, #1
 800347e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003482:	e00f      	b.n	80034a4 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003484:	4b47      	ldr	r3, [pc, #284]	; (80035a4 <HAL_RCC_OscConfig+0x6d8>)
 8003486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800348a:	4a46      	ldr	r2, [pc, #280]	; (80035a4 <HAL_RCC_OscConfig+0x6d8>)
 800348c:	f023 0301 	bic.w	r3, r3, #1
 8003490:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003494:	4b43      	ldr	r3, [pc, #268]	; (80035a4 <HAL_RCC_OscConfig+0x6d8>)
 8003496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800349a:	4a42      	ldr	r2, [pc, #264]	; (80035a4 <HAL_RCC_OscConfig+0x6d8>)
 800349c:	f023 0304 	bic.w	r3, r3, #4
 80034a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d016      	beq.n	80034da <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ac:	f7fe faf2 	bl	8001a94 <HAL_GetTick>
 80034b0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034b2:	e00a      	b.n	80034ca <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034b4:	f7fe faee 	bl	8001a94 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e172      	b.n	80037b0 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034ca:	4b36      	ldr	r3, [pc, #216]	; (80035a4 <HAL_RCC_OscConfig+0x6d8>)
 80034cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0ed      	beq.n	80034b4 <HAL_RCC_OscConfig+0x5e8>
 80034d8:	e01d      	b.n	8003516 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034da:	f7fe fadb 	bl	8001a94 <HAL_GetTick>
 80034de:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034e0:	e00a      	b.n	80034f8 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034e2:	f7fe fad7 	bl	8001a94 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d901      	bls.n	80034f8 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e15b      	b.n	80037b0 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034f8:	4b2a      	ldr	r3, [pc, #168]	; (80035a4 <HAL_RCC_OscConfig+0x6d8>)
 80034fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1ed      	bne.n	80034e2 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8003506:	4b27      	ldr	r3, [pc, #156]	; (80035a4 <HAL_RCC_OscConfig+0x6d8>)
 8003508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800350c:	4a25      	ldr	r2, [pc, #148]	; (80035a4 <HAL_RCC_OscConfig+0x6d8>)
 800350e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003512:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003516:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800351a:	2b01      	cmp	r3, #1
 800351c:	d105      	bne.n	800352a <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800351e:	4b21      	ldr	r3, [pc, #132]	; (80035a4 <HAL_RCC_OscConfig+0x6d8>)
 8003520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003522:	4a20      	ldr	r2, [pc, #128]	; (80035a4 <HAL_RCC_OscConfig+0x6d8>)
 8003524:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003528:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0320 	and.w	r3, r3, #32
 8003532:	2b00      	cmp	r3, #0
 8003534:	d041      	beq.n	80035ba <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353a:	2b00      	cmp	r3, #0
 800353c:	d01c      	beq.n	8003578 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800353e:	4b19      	ldr	r3, [pc, #100]	; (80035a4 <HAL_RCC_OscConfig+0x6d8>)
 8003540:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003544:	4a17      	ldr	r2, [pc, #92]	; (80035a4 <HAL_RCC_OscConfig+0x6d8>)
 8003546:	f043 0301 	orr.w	r3, r3, #1
 800354a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800354e:	f7fe faa1 	bl	8001a94 <HAL_GetTick>
 8003552:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003554:	e008      	b.n	8003568 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003556:	f7fe fa9d 	bl	8001a94 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d901      	bls.n	8003568 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e123      	b.n	80037b0 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003568:	4b0e      	ldr	r3, [pc, #56]	; (80035a4 <HAL_RCC_OscConfig+0x6d8>)
 800356a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d0ef      	beq.n	8003556 <HAL_RCC_OscConfig+0x68a>
 8003576:	e020      	b.n	80035ba <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003578:	4b0a      	ldr	r3, [pc, #40]	; (80035a4 <HAL_RCC_OscConfig+0x6d8>)
 800357a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800357e:	4a09      	ldr	r2, [pc, #36]	; (80035a4 <HAL_RCC_OscConfig+0x6d8>)
 8003580:	f023 0301 	bic.w	r3, r3, #1
 8003584:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003588:	f7fe fa84 	bl	8001a94 <HAL_GetTick>
 800358c:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800358e:	e00d      	b.n	80035ac <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003590:	f7fe fa80 	bl	8001a94 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d906      	bls.n	80035ac <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e106      	b.n	80037b0 <HAL_RCC_OscConfig+0x8e4>
 80035a2:	bf00      	nop
 80035a4:	40021000 	.word	0x40021000
 80035a8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035ac:	4b82      	ldr	r3, [pc, #520]	; (80037b8 <HAL_RCC_OscConfig+0x8ec>)
 80035ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1ea      	bne.n	8003590 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f000 80f5 	beq.w	80037ae <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	f040 80cb 	bne.w	8003764 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80035ce:	4b7a      	ldr	r3, [pc, #488]	; (80037b8 <HAL_RCC_OscConfig+0x8ec>)
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	f003 0203 	and.w	r2, r3, #3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035de:	429a      	cmp	r2, r3
 80035e0:	d12c      	bne.n	800363c <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ec:	3b01      	subs	r3, #1
 80035ee:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d123      	bne.n	800363c <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003600:	429a      	cmp	r2, r3
 8003602:	d11b      	bne.n	800363c <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800360e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003610:	429a      	cmp	r2, r3
 8003612:	d113      	bne.n	800363c <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361e:	085b      	lsrs	r3, r3, #1
 8003620:	3b01      	subs	r3, #1
 8003622:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003624:	429a      	cmp	r2, r3
 8003626:	d109      	bne.n	800363c <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003632:	085b      	lsrs	r3, r3, #1
 8003634:	3b01      	subs	r3, #1
 8003636:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003638:	429a      	cmp	r2, r3
 800363a:	d06d      	beq.n	8003718 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800363c:	6a3b      	ldr	r3, [r7, #32]
 800363e:	2b0c      	cmp	r3, #12
 8003640:	d068      	beq.n	8003714 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003642:	4b5d      	ldr	r3, [pc, #372]	; (80037b8 <HAL_RCC_OscConfig+0x8ec>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d105      	bne.n	800365a <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800364e:	4b5a      	ldr	r3, [pc, #360]	; (80037b8 <HAL_RCC_OscConfig+0x8ec>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e0a8      	b.n	80037b0 <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800365e:	4b56      	ldr	r3, [pc, #344]	; (80037b8 <HAL_RCC_OscConfig+0x8ec>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a55      	ldr	r2, [pc, #340]	; (80037b8 <HAL_RCC_OscConfig+0x8ec>)
 8003664:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003668:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800366a:	f7fe fa13 	bl	8001a94 <HAL_GetTick>
 800366e:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003670:	e008      	b.n	8003684 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003672:	f7fe fa0f 	bl	8001a94 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d901      	bls.n	8003684 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e095      	b.n	80037b0 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003684:	4b4c      	ldr	r3, [pc, #304]	; (80037b8 <HAL_RCC_OscConfig+0x8ec>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1f0      	bne.n	8003672 <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003690:	4b49      	ldr	r3, [pc, #292]	; (80037b8 <HAL_RCC_OscConfig+0x8ec>)
 8003692:	68da      	ldr	r2, [r3, #12]
 8003694:	4b49      	ldr	r3, [pc, #292]	; (80037bc <HAL_RCC_OscConfig+0x8f0>)
 8003696:	4013      	ands	r3, r2
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80036a0:	3a01      	subs	r2, #1
 80036a2:	0112      	lsls	r2, r2, #4
 80036a4:	4311      	orrs	r1, r2
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80036aa:	0212      	lsls	r2, r2, #8
 80036ac:	4311      	orrs	r1, r2
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80036b2:	0852      	lsrs	r2, r2, #1
 80036b4:	3a01      	subs	r2, #1
 80036b6:	0552      	lsls	r2, r2, #21
 80036b8:	4311      	orrs	r1, r2
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80036be:	0852      	lsrs	r2, r2, #1
 80036c0:	3a01      	subs	r2, #1
 80036c2:	0652      	lsls	r2, r2, #25
 80036c4:	4311      	orrs	r1, r2
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80036ca:	06d2      	lsls	r2, r2, #27
 80036cc:	430a      	orrs	r2, r1
 80036ce:	493a      	ldr	r1, [pc, #232]	; (80037b8 <HAL_RCC_OscConfig+0x8ec>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80036d4:	4b38      	ldr	r3, [pc, #224]	; (80037b8 <HAL_RCC_OscConfig+0x8ec>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a37      	ldr	r2, [pc, #220]	; (80037b8 <HAL_RCC_OscConfig+0x8ec>)
 80036da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036de:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036e0:	4b35      	ldr	r3, [pc, #212]	; (80037b8 <HAL_RCC_OscConfig+0x8ec>)
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	4a34      	ldr	r2, [pc, #208]	; (80037b8 <HAL_RCC_OscConfig+0x8ec>)
 80036e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036ec:	f7fe f9d2 	bl	8001a94 <HAL_GetTick>
 80036f0:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036f2:	e008      	b.n	8003706 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036f4:	f7fe f9ce 	bl	8001a94 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e054      	b.n	80037b0 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003706:	4b2c      	ldr	r3, [pc, #176]	; (80037b8 <HAL_RCC_OscConfig+0x8ec>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d0f0      	beq.n	80036f4 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003712:	e04c      	b.n	80037ae <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e04b      	b.n	80037b0 <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003718:	4b27      	ldr	r3, [pc, #156]	; (80037b8 <HAL_RCC_OscConfig+0x8ec>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d144      	bne.n	80037ae <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003724:	4b24      	ldr	r3, [pc, #144]	; (80037b8 <HAL_RCC_OscConfig+0x8ec>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a23      	ldr	r2, [pc, #140]	; (80037b8 <HAL_RCC_OscConfig+0x8ec>)
 800372a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800372e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003730:	4b21      	ldr	r3, [pc, #132]	; (80037b8 <HAL_RCC_OscConfig+0x8ec>)
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	4a20      	ldr	r2, [pc, #128]	; (80037b8 <HAL_RCC_OscConfig+0x8ec>)
 8003736:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800373a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800373c:	f7fe f9aa 	bl	8001a94 <HAL_GetTick>
 8003740:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003742:	e008      	b.n	8003756 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003744:	f7fe f9a6 	bl	8001a94 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e02c      	b.n	80037b0 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003756:	4b18      	ldr	r3, [pc, #96]	; (80037b8 <HAL_RCC_OscConfig+0x8ec>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d0f0      	beq.n	8003744 <HAL_RCC_OscConfig+0x878>
 8003762:	e024      	b.n	80037ae <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003764:	6a3b      	ldr	r3, [r7, #32]
 8003766:	2b0c      	cmp	r3, #12
 8003768:	d01f      	beq.n	80037aa <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800376a:	4b13      	ldr	r3, [pc, #76]	; (80037b8 <HAL_RCC_OscConfig+0x8ec>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a12      	ldr	r2, [pc, #72]	; (80037b8 <HAL_RCC_OscConfig+0x8ec>)
 8003770:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003774:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003776:	f7fe f98d 	bl	8001a94 <HAL_GetTick>
 800377a:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800377c:	e008      	b.n	8003790 <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800377e:	f7fe f989 	bl	8001a94 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	2b02      	cmp	r3, #2
 800378a:	d901      	bls.n	8003790 <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e00f      	b.n	80037b0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003790:	4b09      	ldr	r3, [pc, #36]	; (80037b8 <HAL_RCC_OscConfig+0x8ec>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1f0      	bne.n	800377e <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800379c:	4b06      	ldr	r3, [pc, #24]	; (80037b8 <HAL_RCC_OscConfig+0x8ec>)
 800379e:	68da      	ldr	r2, [r3, #12]
 80037a0:	4905      	ldr	r1, [pc, #20]	; (80037b8 <HAL_RCC_OscConfig+0x8ec>)
 80037a2:	4b07      	ldr	r3, [pc, #28]	; (80037c0 <HAL_RCC_OscConfig+0x8f4>)
 80037a4:	4013      	ands	r3, r2
 80037a6:	60cb      	str	r3, [r1, #12]
 80037a8:	e001      	b.n	80037ae <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e000      	b.n	80037b0 <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3728      	adds	r7, #40	; 0x28
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	40021000 	.word	0x40021000
 80037bc:	019d800c 	.word	0x019d800c
 80037c0:	feeefffc 	.word	0xfeeefffc

080037c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80037ce:	2300      	movs	r3, #0
 80037d0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d101      	bne.n	80037dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e11d      	b.n	8003a18 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037dc:	4b90      	ldr	r3, [pc, #576]	; (8003a20 <HAL_RCC_ClockConfig+0x25c>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 030f 	and.w	r3, r3, #15
 80037e4:	683a      	ldr	r2, [r7, #0]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d910      	bls.n	800380c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ea:	4b8d      	ldr	r3, [pc, #564]	; (8003a20 <HAL_RCC_ClockConfig+0x25c>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f023 020f 	bic.w	r2, r3, #15
 80037f2:	498b      	ldr	r1, [pc, #556]	; (8003a20 <HAL_RCC_ClockConfig+0x25c>)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037fa:	4b89      	ldr	r3, [pc, #548]	; (8003a20 <HAL_RCC_ClockConfig+0x25c>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 030f 	and.w	r3, r3, #15
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	429a      	cmp	r2, r3
 8003806:	d001      	beq.n	800380c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e105      	b.n	8003a18 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d010      	beq.n	800383a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	4b81      	ldr	r3, [pc, #516]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003824:	429a      	cmp	r2, r3
 8003826:	d908      	bls.n	800383a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003828:	4b7e      	ldr	r3, [pc, #504]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	497b      	ldr	r1, [pc, #492]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 8003836:	4313      	orrs	r3, r2
 8003838:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b00      	cmp	r3, #0
 8003844:	d079      	beq.n	800393a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2b03      	cmp	r3, #3
 800384c:	d11e      	bne.n	800388c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800384e:	4b75      	ldr	r3, [pc, #468]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e0dc      	b.n	8003a18 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800385e:	f000 fa09 	bl	8003c74 <RCC_GetSysClockFreqFromPLLSource>
 8003862:	4603      	mov	r3, r0
 8003864:	4a70      	ldr	r2, [pc, #448]	; (8003a28 <HAL_RCC_ClockConfig+0x264>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d946      	bls.n	80038f8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800386a:	4b6e      	ldr	r3, [pc, #440]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d140      	bne.n	80038f8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003876:	4b6b      	ldr	r3, [pc, #428]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800387e:	4a69      	ldr	r2, [pc, #420]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 8003880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003884:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003886:	2380      	movs	r3, #128	; 0x80
 8003888:	617b      	str	r3, [r7, #20]
 800388a:	e035      	b.n	80038f8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	2b02      	cmp	r3, #2
 8003892:	d107      	bne.n	80038a4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003894:	4b63      	ldr	r3, [pc, #396]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d115      	bne.n	80038cc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e0b9      	b.n	8003a18 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d107      	bne.n	80038bc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038ac:	4b5d      	ldr	r3, [pc, #372]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d109      	bne.n	80038cc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e0ad      	b.n	8003a18 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038bc:	4b59      	ldr	r3, [pc, #356]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d101      	bne.n	80038cc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e0a5      	b.n	8003a18 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80038cc:	f000 f8b4 	bl	8003a38 <HAL_RCC_GetSysClockFreq>
 80038d0:	4603      	mov	r3, r0
 80038d2:	4a55      	ldr	r2, [pc, #340]	; (8003a28 <HAL_RCC_ClockConfig+0x264>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d90f      	bls.n	80038f8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80038d8:	4b52      	ldr	r3, [pc, #328]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d109      	bne.n	80038f8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80038e4:	4b4f      	ldr	r3, [pc, #316]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038ec:	4a4d      	ldr	r2, [pc, #308]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 80038ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038f2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80038f4:	2380      	movs	r3, #128	; 0x80
 80038f6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038f8:	4b4a      	ldr	r3, [pc, #296]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f023 0203 	bic.w	r2, r3, #3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	4947      	ldr	r1, [pc, #284]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 8003906:	4313      	orrs	r3, r2
 8003908:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800390a:	f7fe f8c3 	bl	8001a94 <HAL_GetTick>
 800390e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003910:	e00a      	b.n	8003928 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003912:	f7fe f8bf 	bl	8001a94 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003920:	4293      	cmp	r3, r2
 8003922:	d901      	bls.n	8003928 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e077      	b.n	8003a18 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003928:	4b3e      	ldr	r3, [pc, #248]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f003 020c 	and.w	r2, r3, #12
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	429a      	cmp	r2, r3
 8003938:	d1eb      	bne.n	8003912 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	2b80      	cmp	r3, #128	; 0x80
 800393e:	d105      	bne.n	800394c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003940:	4b38      	ldr	r3, [pc, #224]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	4a37      	ldr	r2, [pc, #220]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 8003946:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800394a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d010      	beq.n	800397a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689a      	ldr	r2, [r3, #8]
 800395c:	4b31      	ldr	r3, [pc, #196]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003964:	429a      	cmp	r2, r3
 8003966:	d208      	bcs.n	800397a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003968:	4b2e      	ldr	r3, [pc, #184]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	492b      	ldr	r1, [pc, #172]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 8003976:	4313      	orrs	r3, r2
 8003978:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800397a:	4b29      	ldr	r3, [pc, #164]	; (8003a20 <HAL_RCC_ClockConfig+0x25c>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	683a      	ldr	r2, [r7, #0]
 8003984:	429a      	cmp	r2, r3
 8003986:	d210      	bcs.n	80039aa <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003988:	4b25      	ldr	r3, [pc, #148]	; (8003a20 <HAL_RCC_ClockConfig+0x25c>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f023 020f 	bic.w	r2, r3, #15
 8003990:	4923      	ldr	r1, [pc, #140]	; (8003a20 <HAL_RCC_ClockConfig+0x25c>)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	4313      	orrs	r3, r2
 8003996:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003998:	4b21      	ldr	r3, [pc, #132]	; (8003a20 <HAL_RCC_ClockConfig+0x25c>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 030f 	and.w	r3, r3, #15
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d001      	beq.n	80039aa <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e036      	b.n	8003a18 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0304 	and.w	r3, r3, #4
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d008      	beq.n	80039c8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039b6:	4b1b      	ldr	r3, [pc, #108]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	4918      	ldr	r1, [pc, #96]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0308 	and.w	r3, r3, #8
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d009      	beq.n	80039e8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039d4:	4b13      	ldr	r3, [pc, #76]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	00db      	lsls	r3, r3, #3
 80039e2:	4910      	ldr	r1, [pc, #64]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039e8:	f000 f826 	bl	8003a38 <HAL_RCC_GetSysClockFreq>
 80039ec:	4602      	mov	r2, r0
 80039ee:	4b0d      	ldr	r3, [pc, #52]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	091b      	lsrs	r3, r3, #4
 80039f4:	f003 030f 	and.w	r3, r3, #15
 80039f8:	490c      	ldr	r1, [pc, #48]	; (8003a2c <HAL_RCC_ClockConfig+0x268>)
 80039fa:	5ccb      	ldrb	r3, [r1, r3]
 80039fc:	f003 031f 	and.w	r3, r3, #31
 8003a00:	fa22 f303 	lsr.w	r3, r2, r3
 8003a04:	4a0a      	ldr	r2, [pc, #40]	; (8003a30 <HAL_RCC_ClockConfig+0x26c>)
 8003a06:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003a08:	4b0a      	ldr	r3, [pc, #40]	; (8003a34 <HAL_RCC_ClockConfig+0x270>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7fd fff1 	bl	80019f4 <HAL_InitTick>
 8003a12:	4603      	mov	r3, r0
 8003a14:	73fb      	strb	r3, [r7, #15]

  return status;
 8003a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3718      	adds	r7, #24
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	40022000 	.word	0x40022000
 8003a24:	40021000 	.word	0x40021000
 8003a28:	04c4b400 	.word	0x04c4b400
 8003a2c:	0800ce00 	.word	0x0800ce00
 8003a30:	20000004 	.word	0x20000004
 8003a34:	20000008 	.word	0x20000008

08003a38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b089      	sub	sp, #36	; 0x24
 8003a3c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	61fb      	str	r3, [r7, #28]
 8003a42:	2300      	movs	r3, #0
 8003a44:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a46:	4b3e      	ldr	r3, [pc, #248]	; (8003b40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f003 030c 	and.w	r3, r3, #12
 8003a4e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a50:	4b3b      	ldr	r3, [pc, #236]	; (8003b40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	f003 0303 	and.w	r3, r3, #3
 8003a58:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d005      	beq.n	8003a6c <HAL_RCC_GetSysClockFreq+0x34>
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	2b0c      	cmp	r3, #12
 8003a64:	d121      	bne.n	8003aaa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d11e      	bne.n	8003aaa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a6c:	4b34      	ldr	r3, [pc, #208]	; (8003b40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0308 	and.w	r3, r3, #8
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d107      	bne.n	8003a88 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a78:	4b31      	ldr	r3, [pc, #196]	; (8003b40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a7e:	0a1b      	lsrs	r3, r3, #8
 8003a80:	f003 030f 	and.w	r3, r3, #15
 8003a84:	61fb      	str	r3, [r7, #28]
 8003a86:	e005      	b.n	8003a94 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a88:	4b2d      	ldr	r3, [pc, #180]	; (8003b40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	091b      	lsrs	r3, r3, #4
 8003a8e:	f003 030f 	and.w	r3, r3, #15
 8003a92:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a94:	4a2b      	ldr	r2, [pc, #172]	; (8003b44 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a9c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10d      	bne.n	8003ac0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003aa8:	e00a      	b.n	8003ac0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	2b04      	cmp	r3, #4
 8003aae:	d102      	bne.n	8003ab6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ab0:	4b25      	ldr	r3, [pc, #148]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ab2:	61bb      	str	r3, [r7, #24]
 8003ab4:	e004      	b.n	8003ac0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	2b08      	cmp	r3, #8
 8003aba:	d101      	bne.n	8003ac0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003abc:	4b23      	ldr	r3, [pc, #140]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x114>)
 8003abe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	2b0c      	cmp	r3, #12
 8003ac4:	d134      	bne.n	8003b30 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ac6:	4b1e      	ldr	r3, [pc, #120]	; (8003b40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	f003 0303 	and.w	r3, r3, #3
 8003ace:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d003      	beq.n	8003ade <HAL_RCC_GetSysClockFreq+0xa6>
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	2b03      	cmp	r3, #3
 8003ada:	d003      	beq.n	8003ae4 <HAL_RCC_GetSysClockFreq+0xac>
 8003adc:	e005      	b.n	8003aea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003ade:	4b1a      	ldr	r3, [pc, #104]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ae0:	617b      	str	r3, [r7, #20]
      break;
 8003ae2:	e005      	b.n	8003af0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003ae4:	4b19      	ldr	r3, [pc, #100]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x114>)
 8003ae6:	617b      	str	r3, [r7, #20]
      break;
 8003ae8:	e002      	b.n	8003af0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	617b      	str	r3, [r7, #20]
      break;
 8003aee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003af0:	4b13      	ldr	r3, [pc, #76]	; (8003b40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	091b      	lsrs	r3, r3, #4
 8003af6:	f003 030f 	and.w	r3, r3, #15
 8003afa:	3301      	adds	r3, #1
 8003afc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003afe:	4b10      	ldr	r3, [pc, #64]	; (8003b40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	0a1b      	lsrs	r3, r3, #8
 8003b04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	fb03 f202 	mul.w	r2, r3, r2
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b14:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b16:	4b0a      	ldr	r3, [pc, #40]	; (8003b40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	0e5b      	lsrs	r3, r3, #25
 8003b1c:	f003 0303 	and.w	r3, r3, #3
 8003b20:	3301      	adds	r3, #1
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b2e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003b30:	69bb      	ldr	r3, [r7, #24]
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3724      	adds	r7, #36	; 0x24
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	40021000 	.word	0x40021000
 8003b44:	0800ce18 	.word	0x0800ce18
 8003b48:	00f42400 	.word	0x00f42400
 8003b4c:	007a1200 	.word	0x007a1200

08003b50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b54:	4b03      	ldr	r3, [pc, #12]	; (8003b64 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b56:	681b      	ldr	r3, [r3, #0]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	20000004 	.word	0x20000004

08003b68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b6c:	f7ff fff0 	bl	8003b50 <HAL_RCC_GetHCLKFreq>
 8003b70:	4602      	mov	r2, r0
 8003b72:	4b06      	ldr	r3, [pc, #24]	; (8003b8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	0a1b      	lsrs	r3, r3, #8
 8003b78:	f003 0307 	and.w	r3, r3, #7
 8003b7c:	4904      	ldr	r1, [pc, #16]	; (8003b90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b7e:	5ccb      	ldrb	r3, [r1, r3]
 8003b80:	f003 031f 	and.w	r3, r3, #31
 8003b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	40021000 	.word	0x40021000
 8003b90:	0800ce10 	.word	0x0800ce10

08003b94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b98:	f7ff ffda 	bl	8003b50 <HAL_RCC_GetHCLKFreq>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	4b06      	ldr	r3, [pc, #24]	; (8003bb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	0adb      	lsrs	r3, r3, #11
 8003ba4:	f003 0307 	and.w	r3, r3, #7
 8003ba8:	4904      	ldr	r1, [pc, #16]	; (8003bbc <HAL_RCC_GetPCLK2Freq+0x28>)
 8003baa:	5ccb      	ldrb	r3, [r1, r3]
 8003bac:	f003 031f 	and.w	r3, r3, #31
 8003bb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	40021000 	.word	0x40021000
 8003bbc:	0800ce10 	.word	0x0800ce10

08003bc0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b086      	sub	sp, #24
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003bc8:	2300      	movs	r3, #0
 8003bca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003bcc:	4b27      	ldr	r3, [pc, #156]	; (8003c6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d003      	beq.n	8003be0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003bd8:	f7ff f8a4 	bl	8002d24 <HAL_PWREx_GetVoltageRange>
 8003bdc:	6178      	str	r0, [r7, #20]
 8003bde:	e014      	b.n	8003c0a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003be0:	4b22      	ldr	r3, [pc, #136]	; (8003c6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be4:	4a21      	ldr	r2, [pc, #132]	; (8003c6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bea:	6593      	str	r3, [r2, #88]	; 0x58
 8003bec:	4b1f      	ldr	r3, [pc, #124]	; (8003c6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf4:	60fb      	str	r3, [r7, #12]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003bf8:	f7ff f894 	bl	8002d24 <HAL_PWREx_GetVoltageRange>
 8003bfc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003bfe:	4b1b      	ldr	r3, [pc, #108]	; (8003c6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c02:	4a1a      	ldr	r2, [pc, #104]	; (8003c6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c08:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c10:	d10b      	bne.n	8003c2a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2b80      	cmp	r3, #128	; 0x80
 8003c16:	d913      	bls.n	8003c40 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2ba0      	cmp	r3, #160	; 0xa0
 8003c1c:	d902      	bls.n	8003c24 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c1e:	2302      	movs	r3, #2
 8003c20:	613b      	str	r3, [r7, #16]
 8003c22:	e00d      	b.n	8003c40 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c24:	2301      	movs	r3, #1
 8003c26:	613b      	str	r3, [r7, #16]
 8003c28:	e00a      	b.n	8003c40 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2b7f      	cmp	r3, #127	; 0x7f
 8003c2e:	d902      	bls.n	8003c36 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003c30:	2302      	movs	r3, #2
 8003c32:	613b      	str	r3, [r7, #16]
 8003c34:	e004      	b.n	8003c40 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2b70      	cmp	r3, #112	; 0x70
 8003c3a:	d101      	bne.n	8003c40 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c40:	4b0b      	ldr	r3, [pc, #44]	; (8003c70 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f023 020f 	bic.w	r2, r3, #15
 8003c48:	4909      	ldr	r1, [pc, #36]	; (8003c70 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c50:	4b07      	ldr	r3, [pc, #28]	; (8003c70 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 030f 	and.w	r3, r3, #15
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d001      	beq.n	8003c62 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e000      	b.n	8003c64 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3718      	adds	r7, #24
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	40021000 	.word	0x40021000
 8003c70:	40022000 	.word	0x40022000

08003c74 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b087      	sub	sp, #28
 8003c78:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c7a:	4b2d      	ldr	r3, [pc, #180]	; (8003d30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	f003 0303 	and.w	r3, r3, #3
 8003c82:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2b03      	cmp	r3, #3
 8003c88:	d00b      	beq.n	8003ca2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2b03      	cmp	r3, #3
 8003c8e:	d825      	bhi.n	8003cdc <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d008      	beq.n	8003ca8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d11f      	bne.n	8003cdc <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003c9c:	4b25      	ldr	r3, [pc, #148]	; (8003d34 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003c9e:	613b      	str	r3, [r7, #16]
    break;
 8003ca0:	e01f      	b.n	8003ce2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003ca2:	4b25      	ldr	r3, [pc, #148]	; (8003d38 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003ca4:	613b      	str	r3, [r7, #16]
    break;
 8003ca6:	e01c      	b.n	8003ce2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ca8:	4b21      	ldr	r3, [pc, #132]	; (8003d30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0308 	and.w	r3, r3, #8
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d107      	bne.n	8003cc4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003cb4:	4b1e      	ldr	r3, [pc, #120]	; (8003d30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003cb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cba:	0a1b      	lsrs	r3, r3, #8
 8003cbc:	f003 030f 	and.w	r3, r3, #15
 8003cc0:	617b      	str	r3, [r7, #20]
 8003cc2:	e005      	b.n	8003cd0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003cc4:	4b1a      	ldr	r3, [pc, #104]	; (8003d30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	091b      	lsrs	r3, r3, #4
 8003cca:	f003 030f 	and.w	r3, r3, #15
 8003cce:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003cd0:	4a1a      	ldr	r2, [pc, #104]	; (8003d3c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cd8:	613b      	str	r3, [r7, #16]
    break;
 8003cda:	e002      	b.n	8003ce2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	613b      	str	r3, [r7, #16]
    break;
 8003ce0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ce2:	4b13      	ldr	r3, [pc, #76]	; (8003d30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	091b      	lsrs	r3, r3, #4
 8003ce8:	f003 030f 	and.w	r3, r3, #15
 8003cec:	3301      	adds	r3, #1
 8003cee:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003cf0:	4b0f      	ldr	r3, [pc, #60]	; (8003d30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	0a1b      	lsrs	r3, r3, #8
 8003cf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	fb03 f202 	mul.w	r2, r3, r2
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d06:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d08:	4b09      	ldr	r3, [pc, #36]	; (8003d30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	0e5b      	lsrs	r3, r3, #25
 8003d0e:	f003 0303 	and.w	r3, r3, #3
 8003d12:	3301      	adds	r3, #1
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d20:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003d22:	683b      	ldr	r3, [r7, #0]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	371c      	adds	r7, #28
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr
 8003d30:	40021000 	.word	0x40021000
 8003d34:	00f42400 	.word	0x00f42400
 8003d38:	007a1200 	.word	0x007a1200
 8003d3c:	0800ce18 	.word	0x0800ce18

08003d40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d48:	2300      	movs	r3, #0
 8003d4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d040      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d60:	2b80      	cmp	r3, #128	; 0x80
 8003d62:	d02a      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003d64:	2b80      	cmp	r3, #128	; 0x80
 8003d66:	d825      	bhi.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003d68:	2b60      	cmp	r3, #96	; 0x60
 8003d6a:	d026      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003d6c:	2b60      	cmp	r3, #96	; 0x60
 8003d6e:	d821      	bhi.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003d70:	2b40      	cmp	r3, #64	; 0x40
 8003d72:	d006      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003d74:	2b40      	cmp	r3, #64	; 0x40
 8003d76:	d81d      	bhi.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d009      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003d7c:	2b20      	cmp	r3, #32
 8003d7e:	d010      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003d80:	e018      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d82:	4b89      	ldr	r3, [pc, #548]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	4a88      	ldr	r2, [pc, #544]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d8c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d8e:	e015      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	3304      	adds	r3, #4
 8003d94:	2100      	movs	r1, #0
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 fb3e 	bl	8004418 <RCCEx_PLLSAI1_Config>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003da0:	e00c      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	3320      	adds	r3, #32
 8003da6:	2100      	movs	r1, #0
 8003da8:	4618      	mov	r0, r3
 8003daa:	f000 fc29 	bl	8004600 <RCCEx_PLLSAI2_Config>
 8003dae:	4603      	mov	r3, r0
 8003db0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003db2:	e003      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	74fb      	strb	r3, [r7, #19]
      break;
 8003db8:	e000      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003dba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dbc:	7cfb      	ldrb	r3, [r7, #19]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10b      	bne.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003dc2:	4b79      	ldr	r3, [pc, #484]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003dc4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003dc8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dd0:	4975      	ldr	r1, [pc, #468]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003dd8:	e001      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dda:	7cfb      	ldrb	r3, [r7, #19]
 8003ddc:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d047      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003df2:	d030      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003df8:	d82a      	bhi.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003dfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dfe:	d02a      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003e00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e04:	d824      	bhi.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003e06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e0a:	d008      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003e0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e10:	d81e      	bhi.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00a      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003e16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e1a:	d010      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003e1c:	e018      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e1e:	4b62      	ldr	r3, [pc, #392]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	4a61      	ldr	r2, [pc, #388]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e28:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e2a:	e015      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	3304      	adds	r3, #4
 8003e30:	2100      	movs	r1, #0
 8003e32:	4618      	mov	r0, r3
 8003e34:	f000 faf0 	bl	8004418 <RCCEx_PLLSAI1_Config>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e3c:	e00c      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	3320      	adds	r3, #32
 8003e42:	2100      	movs	r1, #0
 8003e44:	4618      	mov	r0, r3
 8003e46:	f000 fbdb 	bl	8004600 <RCCEx_PLLSAI2_Config>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e4e:	e003      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	74fb      	strb	r3, [r7, #19]
      break;
 8003e54:	e000      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003e56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e58:	7cfb      	ldrb	r3, [r7, #19]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10b      	bne.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e5e:	4b52      	ldr	r3, [pc, #328]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6c:	494e      	ldr	r1, [pc, #312]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003e74:	e001      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e76:	7cfb      	ldrb	r3, [r7, #19]
 8003e78:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f000 809f 	beq.w	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e8c:	4b46      	ldr	r3, [pc, #280]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d101      	bne.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e000      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00d      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ea2:	4b41      	ldr	r3, [pc, #260]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea6:	4a40      	ldr	r2, [pc, #256]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eac:	6593      	str	r3, [r2, #88]	; 0x58
 8003eae:	4b3e      	ldr	r3, [pc, #248]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eb6:	60bb      	str	r3, [r7, #8]
 8003eb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ebe:	4b3b      	ldr	r3, [pc, #236]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a3a      	ldr	r2, [pc, #232]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ec8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003eca:	f7fd fde3 	bl	8001a94 <HAL_GetTick>
 8003ece:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ed0:	e009      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ed2:	f7fd fddf 	bl	8001a94 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d902      	bls.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	74fb      	strb	r3, [r7, #19]
        break;
 8003ee4:	e005      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ee6:	4b31      	ldr	r3, [pc, #196]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d0ef      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003ef2:	7cfb      	ldrb	r3, [r7, #19]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d15b      	bne.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ef8:	4b2b      	ldr	r3, [pc, #172]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003efe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f02:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d01f      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f10:	697a      	ldr	r2, [r7, #20]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d019      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f16:	4b24      	ldr	r3, [pc, #144]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f20:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f22:	4b21      	ldr	r3, [pc, #132]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f28:	4a1f      	ldr	r2, [pc, #124]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f32:	4b1d      	ldr	r3, [pc, #116]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f38:	4a1b      	ldr	r2, [pc, #108]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f42:	4a19      	ldr	r2, [pc, #100]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	f003 0301 	and.w	r3, r3, #1
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d016      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f54:	f7fd fd9e 	bl	8001a94 <HAL_GetTick>
 8003f58:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f5a:	e00b      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f5c:	f7fd fd9a 	bl	8001a94 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d902      	bls.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	74fb      	strb	r3, [r7, #19]
            break;
 8003f72:	e006      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f74:	4b0c      	ldr	r3, [pc, #48]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d0ec      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003f82:	7cfb      	ldrb	r3, [r7, #19]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10c      	bne.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f88:	4b07      	ldr	r3, [pc, #28]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f98:	4903      	ldr	r1, [pc, #12]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003fa0:	e008      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003fa2:	7cfb      	ldrb	r3, [r7, #19]
 8003fa4:	74bb      	strb	r3, [r7, #18]
 8003fa6:	e005      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003fa8:	40021000 	.word	0x40021000
 8003fac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fb0:	7cfb      	ldrb	r3, [r7, #19]
 8003fb2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fb4:	7c7b      	ldrb	r3, [r7, #17]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d105      	bne.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fba:	4ba0      	ldr	r3, [pc, #640]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fbe:	4a9f      	ldr	r2, [pc, #636]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fc4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00a      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fd2:	4b9a      	ldr	r3, [pc, #616]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd8:	f023 0203 	bic.w	r2, r3, #3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe0:	4996      	ldr	r1, [pc, #600]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00a      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ff4:	4b91      	ldr	r3, [pc, #580]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffa:	f023 020c 	bic.w	r2, r3, #12
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004002:	498e      	ldr	r1, [pc, #568]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004004:	4313      	orrs	r3, r2
 8004006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0304 	and.w	r3, r3, #4
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00a      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004016:	4b89      	ldr	r3, [pc, #548]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800401c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004024:	4985      	ldr	r1, [pc, #532]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004026:	4313      	orrs	r3, r2
 8004028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0308 	and.w	r3, r3, #8
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00a      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004038:	4b80      	ldr	r3, [pc, #512]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800403a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800403e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004046:	497d      	ldr	r1, [pc, #500]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004048:	4313      	orrs	r3, r2
 800404a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0310 	and.w	r3, r3, #16
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00a      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800405a:	4b78      	ldr	r3, [pc, #480]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800405c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004060:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004068:	4974      	ldr	r1, [pc, #464]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800406a:	4313      	orrs	r3, r2
 800406c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0320 	and.w	r3, r3, #32
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00a      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800407c:	4b6f      	ldr	r3, [pc, #444]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800407e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004082:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800408a:	496c      	ldr	r1, [pc, #432]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800408c:	4313      	orrs	r3, r2
 800408e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00a      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800409e:	4b67      	ldr	r3, [pc, #412]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040ac:	4963      	ldr	r1, [pc, #396]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00a      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80040c0:	4b5e      	ldr	r3, [pc, #376]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040ce:	495b      	ldr	r1, [pc, #364]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00a      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040e2:	4b56      	ldr	r3, [pc, #344]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f0:	4952      	ldr	r1, [pc, #328]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00a      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004104:	4b4d      	ldr	r3, [pc, #308]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800410a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004112:	494a      	ldr	r1, [pc, #296]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004114:	4313      	orrs	r3, r2
 8004116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00a      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004126:	4b45      	ldr	r3, [pc, #276]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800412c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004134:	4941      	ldr	r1, [pc, #260]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004136:	4313      	orrs	r3, r2
 8004138:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00a      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004148:	4b3c      	ldr	r3, [pc, #240]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800414a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800414e:	f023 0203 	bic.w	r2, r3, #3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004156:	4939      	ldr	r1, [pc, #228]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004158:	4313      	orrs	r3, r2
 800415a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d028      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800416a:	4b34      	ldr	r3, [pc, #208]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800416c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004170:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004178:	4930      	ldr	r1, [pc, #192]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800417a:	4313      	orrs	r3, r2
 800417c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004184:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004188:	d106      	bne.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800418a:	4b2c      	ldr	r3, [pc, #176]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	4a2b      	ldr	r2, [pc, #172]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004190:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004194:	60d3      	str	r3, [r2, #12]
 8004196:	e011      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800419c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041a0:	d10c      	bne.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	3304      	adds	r3, #4
 80041a6:	2101      	movs	r1, #1
 80041a8:	4618      	mov	r0, r3
 80041aa:	f000 f935 	bl	8004418 <RCCEx_PLLSAI1_Config>
 80041ae:	4603      	mov	r3, r0
 80041b0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80041b2:	7cfb      	ldrb	r3, [r7, #19]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d001      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80041b8:	7cfb      	ldrb	r3, [r7, #19]
 80041ba:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d04d      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041d0:	d108      	bne.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80041d2:	4b1a      	ldr	r3, [pc, #104]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041d8:	4a18      	ldr	r2, [pc, #96]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041de:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80041e2:	e012      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80041e4:	4b15      	ldr	r3, [pc, #84]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041ea:	4a14      	ldr	r2, [pc, #80]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041f0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80041f4:	4b11      	ldr	r3, [pc, #68]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004202:	490e      	ldr	r1, [pc, #56]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004204:	4313      	orrs	r3, r2
 8004206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800420e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004212:	d106      	bne.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004214:	4b09      	ldr	r3, [pc, #36]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	4a08      	ldr	r2, [pc, #32]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800421a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800421e:	60d3      	str	r3, [r2, #12]
 8004220:	e020      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004226:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800422a:	d109      	bne.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800422c:	4b03      	ldr	r3, [pc, #12]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	4a02      	ldr	r2, [pc, #8]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004232:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004236:	60d3      	str	r3, [r2, #12]
 8004238:	e014      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800423a:	bf00      	nop
 800423c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004244:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004248:	d10c      	bne.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	3304      	adds	r3, #4
 800424e:	2101      	movs	r1, #1
 8004250:	4618      	mov	r0, r3
 8004252:	f000 f8e1 	bl	8004418 <RCCEx_PLLSAI1_Config>
 8004256:	4603      	mov	r3, r0
 8004258:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800425a:	7cfb      	ldrb	r3, [r7, #19]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d001      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004260:	7cfb      	ldrb	r3, [r7, #19]
 8004262:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d028      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004270:	4b68      	ldr	r3, [pc, #416]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004276:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800427e:	4965      	ldr	r1, [pc, #404]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004280:	4313      	orrs	r3, r2
 8004282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800428a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800428e:	d106      	bne.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004290:	4b60      	ldr	r3, [pc, #384]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	4a5f      	ldr	r2, [pc, #380]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004296:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800429a:	60d3      	str	r3, [r2, #12]
 800429c:	e011      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042a6:	d10c      	bne.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	3304      	adds	r3, #4
 80042ac:	2101      	movs	r1, #1
 80042ae:	4618      	mov	r0, r3
 80042b0:	f000 f8b2 	bl	8004418 <RCCEx_PLLSAI1_Config>
 80042b4:	4603      	mov	r3, r0
 80042b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042b8:	7cfb      	ldrb	r3, [r7, #19]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80042be:	7cfb      	ldrb	r3, [r7, #19]
 80042c0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d01e      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042ce:	4b51      	ldr	r3, [pc, #324]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80042d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042de:	494d      	ldr	r1, [pc, #308]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042f0:	d10c      	bne.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	3304      	adds	r3, #4
 80042f6:	2102      	movs	r1, #2
 80042f8:	4618      	mov	r0, r3
 80042fa:	f000 f88d 	bl	8004418 <RCCEx_PLLSAI1_Config>
 80042fe:	4603      	mov	r3, r0
 8004300:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004302:	7cfb      	ldrb	r3, [r7, #19]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d001      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004308:	7cfb      	ldrb	r3, [r7, #19]
 800430a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00b      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004318:	4b3e      	ldr	r3, [pc, #248]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800431a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800431e:	f023 0204 	bic.w	r2, r3, #4
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004328:	493a      	ldr	r1, [pc, #232]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800432a:	4313      	orrs	r3, r2
 800432c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00b      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800433c:	4b35      	ldr	r3, [pc, #212]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800433e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004342:	f023 0218 	bic.w	r2, r3, #24
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800434c:	4931      	ldr	r1, [pc, #196]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800434e:	4313      	orrs	r3, r2
 8004350:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d035      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004360:	4b2c      	ldr	r3, [pc, #176]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a2b      	ldr	r2, [pc, #172]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004366:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800436a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800436c:	f7fd fb92 	bl	8001a94 <HAL_GetTick>
 8004370:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004372:	e009      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004374:	f7fd fb8e 	bl	8001a94 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b02      	cmp	r3, #2
 8004380:	d902      	bls.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	74fb      	strb	r3, [r7, #19]
        break;
 8004386:	e005      	b.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004388:	4b22      	ldr	r3, [pc, #136]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1ef      	bne.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8004394:	7cfb      	ldrb	r3, [r7, #19]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d113      	bne.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800439a:	4b1e      	ldr	r3, [pc, #120]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800439c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043aa:	491a      	ldr	r1, [pc, #104]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	3320      	adds	r3, #32
 80043b6:	2102      	movs	r1, #2
 80043b8:	4618      	mov	r0, r3
 80043ba:	f000 f921 	bl	8004600 <RCCEx_PLLSAI2_Config>
 80043be:	4603      	mov	r3, r0
 80043c0:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 80043c2:	7cfb      	ldrb	r3, [r7, #19]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d001      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 80043c8:	7cfb      	ldrb	r3, [r7, #19]
 80043ca:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d017      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80043d8:	4b0e      	ldr	r3, [pc, #56]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80043da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e8:	490a      	ldr	r1, [pc, #40]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043fa:	d105      	bne.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043fc:	4b05      	ldr	r3, [pc, #20]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	4a04      	ldr	r2, [pc, #16]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004402:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004406:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004408:	7cbb      	ldrb	r3, [r7, #18]
}
 800440a:	4618      	mov	r0, r3
 800440c:	3718      	adds	r7, #24
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	40021000 	.word	0x40021000

08004418 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004422:	2300      	movs	r3, #0
 8004424:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004426:	4b72      	ldr	r3, [pc, #456]	; (80045f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	f003 0303 	and.w	r3, r3, #3
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00e      	beq.n	8004450 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004432:	4b6f      	ldr	r3, [pc, #444]	; (80045f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	f003 0203 	and.w	r2, r3, #3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	429a      	cmp	r2, r3
 8004440:	d103      	bne.n	800444a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
       ||
 8004446:	2b00      	cmp	r3, #0
 8004448:	d142      	bne.n	80044d0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	73fb      	strb	r3, [r7, #15]
 800444e:	e03f      	b.n	80044d0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2b03      	cmp	r3, #3
 8004456:	d018      	beq.n	800448a <RCCEx_PLLSAI1_Config+0x72>
 8004458:	2b03      	cmp	r3, #3
 800445a:	d825      	bhi.n	80044a8 <RCCEx_PLLSAI1_Config+0x90>
 800445c:	2b01      	cmp	r3, #1
 800445e:	d002      	beq.n	8004466 <RCCEx_PLLSAI1_Config+0x4e>
 8004460:	2b02      	cmp	r3, #2
 8004462:	d009      	beq.n	8004478 <RCCEx_PLLSAI1_Config+0x60>
 8004464:	e020      	b.n	80044a8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004466:	4b62      	ldr	r3, [pc, #392]	; (80045f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d11d      	bne.n	80044ae <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004476:	e01a      	b.n	80044ae <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004478:	4b5d      	ldr	r3, [pc, #372]	; (80045f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004480:	2b00      	cmp	r3, #0
 8004482:	d116      	bne.n	80044b2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004488:	e013      	b.n	80044b2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800448a:	4b59      	ldr	r3, [pc, #356]	; (80045f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10f      	bne.n	80044b6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004496:	4b56      	ldr	r3, [pc, #344]	; (80045f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d109      	bne.n	80044b6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80044a6:	e006      	b.n	80044b6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	73fb      	strb	r3, [r7, #15]
      break;
 80044ac:	e004      	b.n	80044b8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80044ae:	bf00      	nop
 80044b0:	e002      	b.n	80044b8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80044b2:	bf00      	nop
 80044b4:	e000      	b.n	80044b8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80044b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80044b8:	7bfb      	ldrb	r3, [r7, #15]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d108      	bne.n	80044d0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80044be:	4b4c      	ldr	r3, [pc, #304]	; (80045f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	f023 0203 	bic.w	r2, r3, #3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4949      	ldr	r1, [pc, #292]	; (80045f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80044d0:	7bfb      	ldrb	r3, [r7, #15]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f040 8086 	bne.w	80045e4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80044d8:	4b45      	ldr	r3, [pc, #276]	; (80045f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a44      	ldr	r2, [pc, #272]	; (80045f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044e4:	f7fd fad6 	bl	8001a94 <HAL_GetTick>
 80044e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044ea:	e009      	b.n	8004500 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044ec:	f7fd fad2 	bl	8001a94 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d902      	bls.n	8004500 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	73fb      	strb	r3, [r7, #15]
        break;
 80044fe:	e005      	b.n	800450c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004500:	4b3b      	ldr	r3, [pc, #236]	; (80045f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1ef      	bne.n	80044ec <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800450c:	7bfb      	ldrb	r3, [r7, #15]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d168      	bne.n	80045e4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d113      	bne.n	8004540 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004518:	4b35      	ldr	r3, [pc, #212]	; (80045f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800451a:	691a      	ldr	r2, [r3, #16]
 800451c:	4b35      	ldr	r3, [pc, #212]	; (80045f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800451e:	4013      	ands	r3, r2
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	6892      	ldr	r2, [r2, #8]
 8004524:	0211      	lsls	r1, r2, #8
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	68d2      	ldr	r2, [r2, #12]
 800452a:	06d2      	lsls	r2, r2, #27
 800452c:	4311      	orrs	r1, r2
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	6852      	ldr	r2, [r2, #4]
 8004532:	3a01      	subs	r2, #1
 8004534:	0112      	lsls	r2, r2, #4
 8004536:	430a      	orrs	r2, r1
 8004538:	492d      	ldr	r1, [pc, #180]	; (80045f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800453a:	4313      	orrs	r3, r2
 800453c:	610b      	str	r3, [r1, #16]
 800453e:	e02d      	b.n	800459c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d115      	bne.n	8004572 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004546:	4b2a      	ldr	r3, [pc, #168]	; (80045f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004548:	691a      	ldr	r2, [r3, #16]
 800454a:	4b2b      	ldr	r3, [pc, #172]	; (80045f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800454c:	4013      	ands	r3, r2
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	6892      	ldr	r2, [r2, #8]
 8004552:	0211      	lsls	r1, r2, #8
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	6912      	ldr	r2, [r2, #16]
 8004558:	0852      	lsrs	r2, r2, #1
 800455a:	3a01      	subs	r2, #1
 800455c:	0552      	lsls	r2, r2, #21
 800455e:	4311      	orrs	r1, r2
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	6852      	ldr	r2, [r2, #4]
 8004564:	3a01      	subs	r2, #1
 8004566:	0112      	lsls	r2, r2, #4
 8004568:	430a      	orrs	r2, r1
 800456a:	4921      	ldr	r1, [pc, #132]	; (80045f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800456c:	4313      	orrs	r3, r2
 800456e:	610b      	str	r3, [r1, #16]
 8004570:	e014      	b.n	800459c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004572:	4b1f      	ldr	r3, [pc, #124]	; (80045f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004574:	691a      	ldr	r2, [r3, #16]
 8004576:	4b21      	ldr	r3, [pc, #132]	; (80045fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004578:	4013      	ands	r3, r2
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	6892      	ldr	r2, [r2, #8]
 800457e:	0211      	lsls	r1, r2, #8
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	6952      	ldr	r2, [r2, #20]
 8004584:	0852      	lsrs	r2, r2, #1
 8004586:	3a01      	subs	r2, #1
 8004588:	0652      	lsls	r2, r2, #25
 800458a:	4311      	orrs	r1, r2
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	6852      	ldr	r2, [r2, #4]
 8004590:	3a01      	subs	r2, #1
 8004592:	0112      	lsls	r2, r2, #4
 8004594:	430a      	orrs	r2, r1
 8004596:	4916      	ldr	r1, [pc, #88]	; (80045f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004598:	4313      	orrs	r3, r2
 800459a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800459c:	4b14      	ldr	r3, [pc, #80]	; (80045f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a13      	ldr	r2, [pc, #76]	; (80045f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a8:	f7fd fa74 	bl	8001a94 <HAL_GetTick>
 80045ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045ae:	e009      	b.n	80045c4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045b0:	f7fd fa70 	bl	8001a94 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d902      	bls.n	80045c4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	73fb      	strb	r3, [r7, #15]
          break;
 80045c2:	e005      	b.n	80045d0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045c4:	4b0a      	ldr	r3, [pc, #40]	; (80045f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d0ef      	beq.n	80045b0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80045d0:	7bfb      	ldrb	r3, [r7, #15]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d106      	bne.n	80045e4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80045d6:	4b06      	ldr	r3, [pc, #24]	; (80045f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045d8:	691a      	ldr	r2, [r3, #16]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	4904      	ldr	r1, [pc, #16]	; (80045f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80045e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	40021000 	.word	0x40021000
 80045f4:	07ff800f 	.word	0x07ff800f
 80045f8:	ff9f800f 	.word	0xff9f800f
 80045fc:	f9ff800f 	.word	0xf9ff800f

08004600 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800460a:	2300      	movs	r3, #0
 800460c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800460e:	4b72      	ldr	r3, [pc, #456]	; (80047d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	f003 0303 	and.w	r3, r3, #3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00e      	beq.n	8004638 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800461a:	4b6f      	ldr	r3, [pc, #444]	; (80047d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	f003 0203 	and.w	r2, r3, #3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	429a      	cmp	r2, r3
 8004628:	d103      	bne.n	8004632 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
       ||
 800462e:	2b00      	cmp	r3, #0
 8004630:	d142      	bne.n	80046b8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	73fb      	strb	r3, [r7, #15]
 8004636:	e03f      	b.n	80046b8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2b03      	cmp	r3, #3
 800463e:	d018      	beq.n	8004672 <RCCEx_PLLSAI2_Config+0x72>
 8004640:	2b03      	cmp	r3, #3
 8004642:	d825      	bhi.n	8004690 <RCCEx_PLLSAI2_Config+0x90>
 8004644:	2b01      	cmp	r3, #1
 8004646:	d002      	beq.n	800464e <RCCEx_PLLSAI2_Config+0x4e>
 8004648:	2b02      	cmp	r3, #2
 800464a:	d009      	beq.n	8004660 <RCCEx_PLLSAI2_Config+0x60>
 800464c:	e020      	b.n	8004690 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800464e:	4b62      	ldr	r3, [pc, #392]	; (80047d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d11d      	bne.n	8004696 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800465e:	e01a      	b.n	8004696 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004660:	4b5d      	ldr	r3, [pc, #372]	; (80047d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004668:	2b00      	cmp	r3, #0
 800466a:	d116      	bne.n	800469a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004670:	e013      	b.n	800469a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004672:	4b59      	ldr	r3, [pc, #356]	; (80047d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d10f      	bne.n	800469e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800467e:	4b56      	ldr	r3, [pc, #344]	; (80047d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d109      	bne.n	800469e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800468e:	e006      	b.n	800469e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	73fb      	strb	r3, [r7, #15]
      break;
 8004694:	e004      	b.n	80046a0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004696:	bf00      	nop
 8004698:	e002      	b.n	80046a0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800469a:	bf00      	nop
 800469c:	e000      	b.n	80046a0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800469e:	bf00      	nop
    }

    if(status == HAL_OK)
 80046a0:	7bfb      	ldrb	r3, [r7, #15]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d108      	bne.n	80046b8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80046a6:	4b4c      	ldr	r3, [pc, #304]	; (80047d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	f023 0203 	bic.w	r2, r3, #3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4949      	ldr	r1, [pc, #292]	; (80047d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80046b8:	7bfb      	ldrb	r3, [r7, #15]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f040 8086 	bne.w	80047cc <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80046c0:	4b45      	ldr	r3, [pc, #276]	; (80047d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a44      	ldr	r2, [pc, #272]	; (80047d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046cc:	f7fd f9e2 	bl	8001a94 <HAL_GetTick>
 80046d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80046d2:	e009      	b.n	80046e8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80046d4:	f7fd f9de 	bl	8001a94 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d902      	bls.n	80046e8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	73fb      	strb	r3, [r7, #15]
        break;
 80046e6:	e005      	b.n	80046f4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80046e8:	4b3b      	ldr	r3, [pc, #236]	; (80047d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1ef      	bne.n	80046d4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80046f4:	7bfb      	ldrb	r3, [r7, #15]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d168      	bne.n	80047cc <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d113      	bne.n	8004728 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004700:	4b35      	ldr	r3, [pc, #212]	; (80047d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004702:	695a      	ldr	r2, [r3, #20]
 8004704:	4b35      	ldr	r3, [pc, #212]	; (80047dc <RCCEx_PLLSAI2_Config+0x1dc>)
 8004706:	4013      	ands	r3, r2
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	6892      	ldr	r2, [r2, #8]
 800470c:	0211      	lsls	r1, r2, #8
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	68d2      	ldr	r2, [r2, #12]
 8004712:	06d2      	lsls	r2, r2, #27
 8004714:	4311      	orrs	r1, r2
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	6852      	ldr	r2, [r2, #4]
 800471a:	3a01      	subs	r2, #1
 800471c:	0112      	lsls	r2, r2, #4
 800471e:	430a      	orrs	r2, r1
 8004720:	492d      	ldr	r1, [pc, #180]	; (80047d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004722:	4313      	orrs	r3, r2
 8004724:	614b      	str	r3, [r1, #20]
 8004726:	e02d      	b.n	8004784 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	2b01      	cmp	r3, #1
 800472c:	d115      	bne.n	800475a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800472e:	4b2a      	ldr	r3, [pc, #168]	; (80047d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004730:	695a      	ldr	r2, [r3, #20]
 8004732:	4b2b      	ldr	r3, [pc, #172]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004734:	4013      	ands	r3, r2
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	6892      	ldr	r2, [r2, #8]
 800473a:	0211      	lsls	r1, r2, #8
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	6912      	ldr	r2, [r2, #16]
 8004740:	0852      	lsrs	r2, r2, #1
 8004742:	3a01      	subs	r2, #1
 8004744:	0552      	lsls	r2, r2, #21
 8004746:	4311      	orrs	r1, r2
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	6852      	ldr	r2, [r2, #4]
 800474c:	3a01      	subs	r2, #1
 800474e:	0112      	lsls	r2, r2, #4
 8004750:	430a      	orrs	r2, r1
 8004752:	4921      	ldr	r1, [pc, #132]	; (80047d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004754:	4313      	orrs	r3, r2
 8004756:	614b      	str	r3, [r1, #20]
 8004758:	e014      	b.n	8004784 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800475a:	4b1f      	ldr	r3, [pc, #124]	; (80047d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800475c:	695a      	ldr	r2, [r3, #20]
 800475e:	4b21      	ldr	r3, [pc, #132]	; (80047e4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004760:	4013      	ands	r3, r2
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	6892      	ldr	r2, [r2, #8]
 8004766:	0211      	lsls	r1, r2, #8
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	6952      	ldr	r2, [r2, #20]
 800476c:	0852      	lsrs	r2, r2, #1
 800476e:	3a01      	subs	r2, #1
 8004770:	0652      	lsls	r2, r2, #25
 8004772:	4311      	orrs	r1, r2
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	6852      	ldr	r2, [r2, #4]
 8004778:	3a01      	subs	r2, #1
 800477a:	0112      	lsls	r2, r2, #4
 800477c:	430a      	orrs	r2, r1
 800477e:	4916      	ldr	r1, [pc, #88]	; (80047d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004780:	4313      	orrs	r3, r2
 8004782:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004784:	4b14      	ldr	r3, [pc, #80]	; (80047d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a13      	ldr	r2, [pc, #76]	; (80047d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800478a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800478e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004790:	f7fd f980 	bl	8001a94 <HAL_GetTick>
 8004794:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004796:	e009      	b.n	80047ac <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004798:	f7fd f97c 	bl	8001a94 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d902      	bls.n	80047ac <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	73fb      	strb	r3, [r7, #15]
          break;
 80047aa:	e005      	b.n	80047b8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047ac:	4b0a      	ldr	r3, [pc, #40]	; (80047d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d0ef      	beq.n	8004798 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80047b8:	7bfb      	ldrb	r3, [r7, #15]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d106      	bne.n	80047cc <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80047be:	4b06      	ldr	r3, [pc, #24]	; (80047d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047c0:	695a      	ldr	r2, [r3, #20]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	4904      	ldr	r1, [pc, #16]	; (80047d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80047cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	40021000 	.word	0x40021000
 80047dc:	07ff800f 	.word	0x07ff800f
 80047e0:	ff9f800f 	.word	0xff9f800f
 80047e4:	f9ff800f 	.word	0xf9ff800f

080047e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d101      	bne.n	80047fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e049      	b.n	800488e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d106      	bne.n	8004814 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f7fc fefa 	bl	8001608 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2202      	movs	r2, #2
 8004818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	3304      	adds	r3, #4
 8004824:	4619      	mov	r1, r3
 8004826:	4610      	mov	r0, r2
 8004828:	f000 fde8 	bl	80053fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3708      	adds	r7, #8
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
	...

08004898 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004898:	b480      	push	{r7}
 800489a:	b085      	sub	sp, #20
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d001      	beq.n	80048b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e047      	b.n	8004940 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2202      	movs	r2, #2
 80048b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a23      	ldr	r2, [pc, #140]	; (800494c <HAL_TIM_Base_Start+0xb4>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d01d      	beq.n	80048fe <HAL_TIM_Base_Start+0x66>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ca:	d018      	beq.n	80048fe <HAL_TIM_Base_Start+0x66>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a1f      	ldr	r2, [pc, #124]	; (8004950 <HAL_TIM_Base_Start+0xb8>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d013      	beq.n	80048fe <HAL_TIM_Base_Start+0x66>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a1e      	ldr	r2, [pc, #120]	; (8004954 <HAL_TIM_Base_Start+0xbc>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d00e      	beq.n	80048fe <HAL_TIM_Base_Start+0x66>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a1c      	ldr	r2, [pc, #112]	; (8004958 <HAL_TIM_Base_Start+0xc0>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d009      	beq.n	80048fe <HAL_TIM_Base_Start+0x66>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a1b      	ldr	r2, [pc, #108]	; (800495c <HAL_TIM_Base_Start+0xc4>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d004      	beq.n	80048fe <HAL_TIM_Base_Start+0x66>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a19      	ldr	r2, [pc, #100]	; (8004960 <HAL_TIM_Base_Start+0xc8>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d115      	bne.n	800492a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	689a      	ldr	r2, [r3, #8]
 8004904:	4b17      	ldr	r3, [pc, #92]	; (8004964 <HAL_TIM_Base_Start+0xcc>)
 8004906:	4013      	ands	r3, r2
 8004908:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2b06      	cmp	r3, #6
 800490e:	d015      	beq.n	800493c <HAL_TIM_Base_Start+0xa4>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004916:	d011      	beq.n	800493c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f042 0201 	orr.w	r2, r2, #1
 8004926:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004928:	e008      	b.n	800493c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f042 0201 	orr.w	r2, r2, #1
 8004938:	601a      	str	r2, [r3, #0]
 800493a:	e000      	b.n	800493e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800493c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3714      	adds	r7, #20
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr
 800494c:	40012c00 	.word	0x40012c00
 8004950:	40000400 	.word	0x40000400
 8004954:	40000800 	.word	0x40000800
 8004958:	40000c00 	.word	0x40000c00
 800495c:	40013400 	.word	0x40013400
 8004960:	40014000 	.word	0x40014000
 8004964:	00010007 	.word	0x00010007

08004968 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	6a1a      	ldr	r2, [r3, #32]
 8004976:	f241 1311 	movw	r3, #4369	; 0x1111
 800497a:	4013      	ands	r3, r2
 800497c:	2b00      	cmp	r3, #0
 800497e:	d10f      	bne.n	80049a0 <HAL_TIM_Base_Stop+0x38>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	6a1a      	ldr	r2, [r3, #32]
 8004986:	f240 4344 	movw	r3, #1092	; 0x444
 800498a:	4013      	ands	r3, r2
 800498c:	2b00      	cmp	r3, #0
 800498e:	d107      	bne.n	80049a0 <HAL_TIM_Base_Stop+0x38>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f022 0201 	bic.w	r2, r2, #1
 800499e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	370c      	adds	r7, #12
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr

080049b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b082      	sub	sp, #8
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d101      	bne.n	80049c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e049      	b.n	8004a5c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d106      	bne.n	80049e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 f841 	bl	8004a64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2202      	movs	r2, #2
 80049e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	3304      	adds	r3, #4
 80049f2:	4619      	mov	r1, r3
 80049f4:	4610      	mov	r0, r2
 80049f6:	f000 fd01 	bl	80053fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3708      	adds	r7, #8
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d109      	bne.n	8004a9c <HAL_TIM_PWM_Start+0x24>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	bf14      	ite	ne
 8004a94:	2301      	movne	r3, #1
 8004a96:	2300      	moveq	r3, #0
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	e03c      	b.n	8004b16 <HAL_TIM_PWM_Start+0x9e>
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	2b04      	cmp	r3, #4
 8004aa0:	d109      	bne.n	8004ab6 <HAL_TIM_PWM_Start+0x3e>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	bf14      	ite	ne
 8004aae:	2301      	movne	r3, #1
 8004ab0:	2300      	moveq	r3, #0
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	e02f      	b.n	8004b16 <HAL_TIM_PWM_Start+0x9e>
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	2b08      	cmp	r3, #8
 8004aba:	d109      	bne.n	8004ad0 <HAL_TIM_PWM_Start+0x58>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	bf14      	ite	ne
 8004ac8:	2301      	movne	r3, #1
 8004aca:	2300      	moveq	r3, #0
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	e022      	b.n	8004b16 <HAL_TIM_PWM_Start+0x9e>
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	2b0c      	cmp	r3, #12
 8004ad4:	d109      	bne.n	8004aea <HAL_TIM_PWM_Start+0x72>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	bf14      	ite	ne
 8004ae2:	2301      	movne	r3, #1
 8004ae4:	2300      	moveq	r3, #0
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	e015      	b.n	8004b16 <HAL_TIM_PWM_Start+0x9e>
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	2b10      	cmp	r3, #16
 8004aee:	d109      	bne.n	8004b04 <HAL_TIM_PWM_Start+0x8c>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	bf14      	ite	ne
 8004afc:	2301      	movne	r3, #1
 8004afe:	2300      	moveq	r3, #0
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	e008      	b.n	8004b16 <HAL_TIM_PWM_Start+0x9e>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	bf14      	ite	ne
 8004b10:	2301      	movne	r3, #1
 8004b12:	2300      	moveq	r3, #0
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d001      	beq.n	8004b1e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e09c      	b.n	8004c58 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d104      	bne.n	8004b2e <HAL_TIM_PWM_Start+0xb6>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2202      	movs	r2, #2
 8004b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b2c:	e023      	b.n	8004b76 <HAL_TIM_PWM_Start+0xfe>
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	2b04      	cmp	r3, #4
 8004b32:	d104      	bne.n	8004b3e <HAL_TIM_PWM_Start+0xc6>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2202      	movs	r2, #2
 8004b38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b3c:	e01b      	b.n	8004b76 <HAL_TIM_PWM_Start+0xfe>
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	2b08      	cmp	r3, #8
 8004b42:	d104      	bne.n	8004b4e <HAL_TIM_PWM_Start+0xd6>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2202      	movs	r2, #2
 8004b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b4c:	e013      	b.n	8004b76 <HAL_TIM_PWM_Start+0xfe>
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	2b0c      	cmp	r3, #12
 8004b52:	d104      	bne.n	8004b5e <HAL_TIM_PWM_Start+0xe6>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2202      	movs	r2, #2
 8004b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b5c:	e00b      	b.n	8004b76 <HAL_TIM_PWM_Start+0xfe>
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	2b10      	cmp	r3, #16
 8004b62:	d104      	bne.n	8004b6e <HAL_TIM_PWM_Start+0xf6>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2202      	movs	r2, #2
 8004b68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b6c:	e003      	b.n	8004b76 <HAL_TIM_PWM_Start+0xfe>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2202      	movs	r2, #2
 8004b72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	6839      	ldr	r1, [r7, #0]
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f001 f846 	bl	8005c10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a35      	ldr	r2, [pc, #212]	; (8004c60 <HAL_TIM_PWM_Start+0x1e8>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d013      	beq.n	8004bb6 <HAL_TIM_PWM_Start+0x13e>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a34      	ldr	r2, [pc, #208]	; (8004c64 <HAL_TIM_PWM_Start+0x1ec>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d00e      	beq.n	8004bb6 <HAL_TIM_PWM_Start+0x13e>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a32      	ldr	r2, [pc, #200]	; (8004c68 <HAL_TIM_PWM_Start+0x1f0>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d009      	beq.n	8004bb6 <HAL_TIM_PWM_Start+0x13e>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a31      	ldr	r2, [pc, #196]	; (8004c6c <HAL_TIM_PWM_Start+0x1f4>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d004      	beq.n	8004bb6 <HAL_TIM_PWM_Start+0x13e>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a2f      	ldr	r2, [pc, #188]	; (8004c70 <HAL_TIM_PWM_Start+0x1f8>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d101      	bne.n	8004bba <HAL_TIM_PWM_Start+0x142>
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e000      	b.n	8004bbc <HAL_TIM_PWM_Start+0x144>
 8004bba:	2300      	movs	r3, #0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d007      	beq.n	8004bd0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bce:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a22      	ldr	r2, [pc, #136]	; (8004c60 <HAL_TIM_PWM_Start+0x1e8>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d01d      	beq.n	8004c16 <HAL_TIM_PWM_Start+0x19e>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004be2:	d018      	beq.n	8004c16 <HAL_TIM_PWM_Start+0x19e>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a22      	ldr	r2, [pc, #136]	; (8004c74 <HAL_TIM_PWM_Start+0x1fc>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d013      	beq.n	8004c16 <HAL_TIM_PWM_Start+0x19e>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a21      	ldr	r2, [pc, #132]	; (8004c78 <HAL_TIM_PWM_Start+0x200>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d00e      	beq.n	8004c16 <HAL_TIM_PWM_Start+0x19e>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a1f      	ldr	r2, [pc, #124]	; (8004c7c <HAL_TIM_PWM_Start+0x204>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d009      	beq.n	8004c16 <HAL_TIM_PWM_Start+0x19e>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a17      	ldr	r2, [pc, #92]	; (8004c64 <HAL_TIM_PWM_Start+0x1ec>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d004      	beq.n	8004c16 <HAL_TIM_PWM_Start+0x19e>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a15      	ldr	r2, [pc, #84]	; (8004c68 <HAL_TIM_PWM_Start+0x1f0>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d115      	bne.n	8004c42 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	689a      	ldr	r2, [r3, #8]
 8004c1c:	4b18      	ldr	r3, [pc, #96]	; (8004c80 <HAL_TIM_PWM_Start+0x208>)
 8004c1e:	4013      	ands	r3, r2
 8004c20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2b06      	cmp	r3, #6
 8004c26:	d015      	beq.n	8004c54 <HAL_TIM_PWM_Start+0x1dc>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c2e:	d011      	beq.n	8004c54 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f042 0201 	orr.w	r2, r2, #1
 8004c3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c40:	e008      	b.n	8004c54 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f042 0201 	orr.w	r2, r2, #1
 8004c50:	601a      	str	r2, [r3, #0]
 8004c52:	e000      	b.n	8004c56 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c54:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3710      	adds	r7, #16
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	40012c00 	.word	0x40012c00
 8004c64:	40013400 	.word	0x40013400
 8004c68:	40014000 	.word	0x40014000
 8004c6c:	40014400 	.word	0x40014400
 8004c70:	40014800 	.word	0x40014800
 8004c74:	40000400 	.word	0x40000400
 8004c78:	40000800 	.word	0x40000800
 8004c7c:	40000c00 	.word	0x40000c00
 8004c80:	00010007 	.word	0x00010007

08004c84 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2200      	movs	r2, #0
 8004c94:	6839      	ldr	r1, [r7, #0]
 8004c96:	4618      	mov	r0, r3
 8004c98:	f000 ffba 	bl	8005c10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a3e      	ldr	r2, [pc, #248]	; (8004d9c <HAL_TIM_PWM_Stop+0x118>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d013      	beq.n	8004cce <HAL_TIM_PWM_Stop+0x4a>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a3d      	ldr	r2, [pc, #244]	; (8004da0 <HAL_TIM_PWM_Stop+0x11c>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d00e      	beq.n	8004cce <HAL_TIM_PWM_Stop+0x4a>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a3b      	ldr	r2, [pc, #236]	; (8004da4 <HAL_TIM_PWM_Stop+0x120>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d009      	beq.n	8004cce <HAL_TIM_PWM_Stop+0x4a>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a3a      	ldr	r2, [pc, #232]	; (8004da8 <HAL_TIM_PWM_Stop+0x124>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d004      	beq.n	8004cce <HAL_TIM_PWM_Stop+0x4a>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a38      	ldr	r2, [pc, #224]	; (8004dac <HAL_TIM_PWM_Stop+0x128>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d101      	bne.n	8004cd2 <HAL_TIM_PWM_Stop+0x4e>
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e000      	b.n	8004cd4 <HAL_TIM_PWM_Stop+0x50>
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d017      	beq.n	8004d08 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	6a1a      	ldr	r2, [r3, #32]
 8004cde:	f241 1311 	movw	r3, #4369	; 0x1111
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10f      	bne.n	8004d08 <HAL_TIM_PWM_Stop+0x84>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	6a1a      	ldr	r2, [r3, #32]
 8004cee:	f240 4344 	movw	r3, #1092	; 0x444
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d107      	bne.n	8004d08 <HAL_TIM_PWM_Stop+0x84>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d06:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	6a1a      	ldr	r2, [r3, #32]
 8004d0e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004d12:	4013      	ands	r3, r2
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10f      	bne.n	8004d38 <HAL_TIM_PWM_Stop+0xb4>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	6a1a      	ldr	r2, [r3, #32]
 8004d1e:	f240 4344 	movw	r3, #1092	; 0x444
 8004d22:	4013      	ands	r3, r2
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d107      	bne.n	8004d38 <HAL_TIM_PWM_Stop+0xb4>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f022 0201 	bic.w	r2, r2, #1
 8004d36:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d104      	bne.n	8004d48 <HAL_TIM_PWM_Stop+0xc4>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d46:	e023      	b.n	8004d90 <HAL_TIM_PWM_Stop+0x10c>
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	2b04      	cmp	r3, #4
 8004d4c:	d104      	bne.n	8004d58 <HAL_TIM_PWM_Stop+0xd4>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d56:	e01b      	b.n	8004d90 <HAL_TIM_PWM_Stop+0x10c>
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	2b08      	cmp	r3, #8
 8004d5c:	d104      	bne.n	8004d68 <HAL_TIM_PWM_Stop+0xe4>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2201      	movs	r2, #1
 8004d62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d66:	e013      	b.n	8004d90 <HAL_TIM_PWM_Stop+0x10c>
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	2b0c      	cmp	r3, #12
 8004d6c:	d104      	bne.n	8004d78 <HAL_TIM_PWM_Stop+0xf4>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d76:	e00b      	b.n	8004d90 <HAL_TIM_PWM_Stop+0x10c>
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	2b10      	cmp	r3, #16
 8004d7c:	d104      	bne.n	8004d88 <HAL_TIM_PWM_Stop+0x104>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d86:	e003      	b.n	8004d90 <HAL_TIM_PWM_Stop+0x10c>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3708      	adds	r7, #8
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	40012c00 	.word	0x40012c00
 8004da0:	40013400 	.word	0x40013400
 8004da4:	40014000 	.word	0x40014000
 8004da8:	40014400 	.word	0x40014400
 8004dac:	40014800 	.word	0x40014800

08004db0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	f003 0302 	and.w	r3, r3, #2
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d122      	bne.n	8004e0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	f003 0302 	and.w	r3, r3, #2
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d11b      	bne.n	8004e0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f06f 0202 	mvn.w	r2, #2
 8004ddc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2201      	movs	r2, #1
 8004de2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	f003 0303 	and.w	r3, r3, #3
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d003      	beq.n	8004dfa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 fae3 	bl	80053be <HAL_TIM_IC_CaptureCallback>
 8004df8:	e005      	b.n	8004e06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 fad5 	bl	80053aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 fae6 	bl	80053d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	f003 0304 	and.w	r3, r3, #4
 8004e16:	2b04      	cmp	r3, #4
 8004e18:	d122      	bne.n	8004e60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	f003 0304 	and.w	r3, r3, #4
 8004e24:	2b04      	cmp	r3, #4
 8004e26:	d11b      	bne.n	8004e60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f06f 0204 	mvn.w	r2, #4
 8004e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2202      	movs	r2, #2
 8004e36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d003      	beq.n	8004e4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 fab9 	bl	80053be <HAL_TIM_IC_CaptureCallback>
 8004e4c:	e005      	b.n	8004e5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 faab 	bl	80053aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 fabc 	bl	80053d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	f003 0308 	and.w	r3, r3, #8
 8004e6a:	2b08      	cmp	r3, #8
 8004e6c:	d122      	bne.n	8004eb4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	f003 0308 	and.w	r3, r3, #8
 8004e78:	2b08      	cmp	r3, #8
 8004e7a:	d11b      	bne.n	8004eb4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f06f 0208 	mvn.w	r2, #8
 8004e84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2204      	movs	r2, #4
 8004e8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	69db      	ldr	r3, [r3, #28]
 8004e92:	f003 0303 	and.w	r3, r3, #3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d003      	beq.n	8004ea2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 fa8f 	bl	80053be <HAL_TIM_IC_CaptureCallback>
 8004ea0:	e005      	b.n	8004eae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 fa81 	bl	80053aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 fa92 	bl	80053d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	f003 0310 	and.w	r3, r3, #16
 8004ebe:	2b10      	cmp	r3, #16
 8004ec0:	d122      	bne.n	8004f08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	f003 0310 	and.w	r3, r3, #16
 8004ecc:	2b10      	cmp	r3, #16
 8004ece:	d11b      	bne.n	8004f08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f06f 0210 	mvn.w	r2, #16
 8004ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2208      	movs	r2, #8
 8004ede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	69db      	ldr	r3, [r3, #28]
 8004ee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d003      	beq.n	8004ef6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 fa65 	bl	80053be <HAL_TIM_IC_CaptureCallback>
 8004ef4:	e005      	b.n	8004f02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 fa57 	bl	80053aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 fa68 	bl	80053d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d10e      	bne.n	8004f34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	f003 0301 	and.w	r3, r3, #1
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d107      	bne.n	8004f34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f06f 0201 	mvn.w	r2, #1
 8004f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f7fc f82c 	bl	8000f8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f3e:	2b80      	cmp	r3, #128	; 0x80
 8004f40:	d10e      	bne.n	8004f60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f4c:	2b80      	cmp	r3, #128	; 0x80
 8004f4e:	d107      	bne.n	8004f60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 ff10 	bl	8005d80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f6e:	d10e      	bne.n	8004f8e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f7a:	2b80      	cmp	r3, #128	; 0x80
 8004f7c:	d107      	bne.n	8004f8e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004f86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 ff03 	bl	8005d94 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f98:	2b40      	cmp	r3, #64	; 0x40
 8004f9a:	d10e      	bne.n	8004fba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa6:	2b40      	cmp	r3, #64	; 0x40
 8004fa8:	d107      	bne.n	8004fba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004fb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 fa16 	bl	80053e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	f003 0320 	and.w	r3, r3, #32
 8004fc4:	2b20      	cmp	r3, #32
 8004fc6:	d10e      	bne.n	8004fe6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	f003 0320 	and.w	r3, r3, #32
 8004fd2:	2b20      	cmp	r3, #32
 8004fd4:	d107      	bne.n	8004fe6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f06f 0220 	mvn.w	r2, #32
 8004fde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 fec3 	bl	8005d6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fe6:	bf00      	nop
 8004fe8:	3708      	adds	r7, #8
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
	...

08004ff0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b086      	sub	sp, #24
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005006:	2b01      	cmp	r3, #1
 8005008:	d101      	bne.n	800500e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800500a:	2302      	movs	r3, #2
 800500c:	e0ff      	b.n	800520e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2201      	movs	r2, #1
 8005012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b14      	cmp	r3, #20
 800501a:	f200 80f0 	bhi.w	80051fe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800501e:	a201      	add	r2, pc, #4	; (adr r2, 8005024 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005024:	08005079 	.word	0x08005079
 8005028:	080051ff 	.word	0x080051ff
 800502c:	080051ff 	.word	0x080051ff
 8005030:	080051ff 	.word	0x080051ff
 8005034:	080050b9 	.word	0x080050b9
 8005038:	080051ff 	.word	0x080051ff
 800503c:	080051ff 	.word	0x080051ff
 8005040:	080051ff 	.word	0x080051ff
 8005044:	080050fb 	.word	0x080050fb
 8005048:	080051ff 	.word	0x080051ff
 800504c:	080051ff 	.word	0x080051ff
 8005050:	080051ff 	.word	0x080051ff
 8005054:	0800513b 	.word	0x0800513b
 8005058:	080051ff 	.word	0x080051ff
 800505c:	080051ff 	.word	0x080051ff
 8005060:	080051ff 	.word	0x080051ff
 8005064:	0800517d 	.word	0x0800517d
 8005068:	080051ff 	.word	0x080051ff
 800506c:	080051ff 	.word	0x080051ff
 8005070:	080051ff 	.word	0x080051ff
 8005074:	080051bd 	.word	0x080051bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68b9      	ldr	r1, [r7, #8]
 800507e:	4618      	mov	r0, r3
 8005080:	f000 fa56 	bl	8005530 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	699a      	ldr	r2, [r3, #24]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f042 0208 	orr.w	r2, r2, #8
 8005092:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	699a      	ldr	r2, [r3, #24]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f022 0204 	bic.w	r2, r2, #4
 80050a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	6999      	ldr	r1, [r3, #24]
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	691a      	ldr	r2, [r3, #16]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	430a      	orrs	r2, r1
 80050b4:	619a      	str	r2, [r3, #24]
      break;
 80050b6:	e0a5      	b.n	8005204 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68b9      	ldr	r1, [r7, #8]
 80050be:	4618      	mov	r0, r3
 80050c0:	f000 fac6 	bl	8005650 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	699a      	ldr	r2, [r3, #24]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	699a      	ldr	r2, [r3, #24]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	6999      	ldr	r1, [r3, #24]
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	021a      	lsls	r2, r3, #8
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	430a      	orrs	r2, r1
 80050f6:	619a      	str	r2, [r3, #24]
      break;
 80050f8:	e084      	b.n	8005204 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68b9      	ldr	r1, [r7, #8]
 8005100:	4618      	mov	r0, r3
 8005102:	f000 fb2f 	bl	8005764 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	69da      	ldr	r2, [r3, #28]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f042 0208 	orr.w	r2, r2, #8
 8005114:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	69da      	ldr	r2, [r3, #28]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f022 0204 	bic.w	r2, r2, #4
 8005124:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	69d9      	ldr	r1, [r3, #28]
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	691a      	ldr	r2, [r3, #16]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	430a      	orrs	r2, r1
 8005136:	61da      	str	r2, [r3, #28]
      break;
 8005138:	e064      	b.n	8005204 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68b9      	ldr	r1, [r7, #8]
 8005140:	4618      	mov	r0, r3
 8005142:	f000 fb97 	bl	8005874 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	69da      	ldr	r2, [r3, #28]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005154:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	69da      	ldr	r2, [r3, #28]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005164:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	69d9      	ldr	r1, [r3, #28]
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	021a      	lsls	r2, r3, #8
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	430a      	orrs	r2, r1
 8005178:	61da      	str	r2, [r3, #28]
      break;
 800517a:	e043      	b.n	8005204 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68b9      	ldr	r1, [r7, #8]
 8005182:	4618      	mov	r0, r3
 8005184:	f000 fbe0 	bl	8005948 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f042 0208 	orr.w	r2, r2, #8
 8005196:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f022 0204 	bic.w	r2, r2, #4
 80051a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	691a      	ldr	r2, [r3, #16]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	430a      	orrs	r2, r1
 80051b8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80051ba:	e023      	b.n	8005204 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68b9      	ldr	r1, [r7, #8]
 80051c2:	4618      	mov	r0, r3
 80051c4:	f000 fc24 	bl	8005a10 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	021a      	lsls	r2, r3, #8
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	430a      	orrs	r2, r1
 80051fa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80051fc:	e002      	b.n	8005204 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	75fb      	strb	r3, [r7, #23]
      break;
 8005202:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2200      	movs	r2, #0
 8005208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800520c:	7dfb      	ldrb	r3, [r7, #23]
}
 800520e:	4618      	mov	r0, r3
 8005210:	3718      	adds	r7, #24
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop

08005218 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005222:	2300      	movs	r3, #0
 8005224:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800522c:	2b01      	cmp	r3, #1
 800522e:	d101      	bne.n	8005234 <HAL_TIM_ConfigClockSource+0x1c>
 8005230:	2302      	movs	r3, #2
 8005232:	e0b6      	b.n	80053a2 <HAL_TIM_ConfigClockSource+0x18a>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2202      	movs	r2, #2
 8005240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005252:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005256:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800525e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68ba      	ldr	r2, [r7, #8]
 8005266:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005270:	d03e      	beq.n	80052f0 <HAL_TIM_ConfigClockSource+0xd8>
 8005272:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005276:	f200 8087 	bhi.w	8005388 <HAL_TIM_ConfigClockSource+0x170>
 800527a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800527e:	f000 8086 	beq.w	800538e <HAL_TIM_ConfigClockSource+0x176>
 8005282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005286:	d87f      	bhi.n	8005388 <HAL_TIM_ConfigClockSource+0x170>
 8005288:	2b70      	cmp	r3, #112	; 0x70
 800528a:	d01a      	beq.n	80052c2 <HAL_TIM_ConfigClockSource+0xaa>
 800528c:	2b70      	cmp	r3, #112	; 0x70
 800528e:	d87b      	bhi.n	8005388 <HAL_TIM_ConfigClockSource+0x170>
 8005290:	2b60      	cmp	r3, #96	; 0x60
 8005292:	d050      	beq.n	8005336 <HAL_TIM_ConfigClockSource+0x11e>
 8005294:	2b60      	cmp	r3, #96	; 0x60
 8005296:	d877      	bhi.n	8005388 <HAL_TIM_ConfigClockSource+0x170>
 8005298:	2b50      	cmp	r3, #80	; 0x50
 800529a:	d03c      	beq.n	8005316 <HAL_TIM_ConfigClockSource+0xfe>
 800529c:	2b50      	cmp	r3, #80	; 0x50
 800529e:	d873      	bhi.n	8005388 <HAL_TIM_ConfigClockSource+0x170>
 80052a0:	2b40      	cmp	r3, #64	; 0x40
 80052a2:	d058      	beq.n	8005356 <HAL_TIM_ConfigClockSource+0x13e>
 80052a4:	2b40      	cmp	r3, #64	; 0x40
 80052a6:	d86f      	bhi.n	8005388 <HAL_TIM_ConfigClockSource+0x170>
 80052a8:	2b30      	cmp	r3, #48	; 0x30
 80052aa:	d064      	beq.n	8005376 <HAL_TIM_ConfigClockSource+0x15e>
 80052ac:	2b30      	cmp	r3, #48	; 0x30
 80052ae:	d86b      	bhi.n	8005388 <HAL_TIM_ConfigClockSource+0x170>
 80052b0:	2b20      	cmp	r3, #32
 80052b2:	d060      	beq.n	8005376 <HAL_TIM_ConfigClockSource+0x15e>
 80052b4:	2b20      	cmp	r3, #32
 80052b6:	d867      	bhi.n	8005388 <HAL_TIM_ConfigClockSource+0x170>
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d05c      	beq.n	8005376 <HAL_TIM_ConfigClockSource+0x15e>
 80052bc:	2b10      	cmp	r3, #16
 80052be:	d05a      	beq.n	8005376 <HAL_TIM_ConfigClockSource+0x15e>
 80052c0:	e062      	b.n	8005388 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6818      	ldr	r0, [r3, #0]
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	6899      	ldr	r1, [r3, #8]
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	685a      	ldr	r2, [r3, #4]
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	f000 fc7d 	bl	8005bd0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68ba      	ldr	r2, [r7, #8]
 80052ec:	609a      	str	r2, [r3, #8]
      break;
 80052ee:	e04f      	b.n	8005390 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6818      	ldr	r0, [r3, #0]
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	6899      	ldr	r1, [r3, #8]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	685a      	ldr	r2, [r3, #4]
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	f000 fc66 	bl	8005bd0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	689a      	ldr	r2, [r3, #8]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005312:	609a      	str	r2, [r3, #8]
      break;
 8005314:	e03c      	b.n	8005390 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6818      	ldr	r0, [r3, #0]
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	6859      	ldr	r1, [r3, #4]
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	461a      	mov	r2, r3
 8005324:	f000 fbda 	bl	8005adc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2150      	movs	r1, #80	; 0x50
 800532e:	4618      	mov	r0, r3
 8005330:	f000 fc33 	bl	8005b9a <TIM_ITRx_SetConfig>
      break;
 8005334:	e02c      	b.n	8005390 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6818      	ldr	r0, [r3, #0]
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	6859      	ldr	r1, [r3, #4]
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	461a      	mov	r2, r3
 8005344:	f000 fbf9 	bl	8005b3a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2160      	movs	r1, #96	; 0x60
 800534e:	4618      	mov	r0, r3
 8005350:	f000 fc23 	bl	8005b9a <TIM_ITRx_SetConfig>
      break;
 8005354:	e01c      	b.n	8005390 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6818      	ldr	r0, [r3, #0]
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	6859      	ldr	r1, [r3, #4]
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	461a      	mov	r2, r3
 8005364:	f000 fbba 	bl	8005adc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2140      	movs	r1, #64	; 0x40
 800536e:	4618      	mov	r0, r3
 8005370:	f000 fc13 	bl	8005b9a <TIM_ITRx_SetConfig>
      break;
 8005374:	e00c      	b.n	8005390 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4619      	mov	r1, r3
 8005380:	4610      	mov	r0, r2
 8005382:	f000 fc0a 	bl	8005b9a <TIM_ITRx_SetConfig>
      break;
 8005386:	e003      	b.n	8005390 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	73fb      	strb	r3, [r7, #15]
      break;
 800538c:	e000      	b.n	8005390 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800538e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80053a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053aa:	b480      	push	{r7}
 80053ac:	b083      	sub	sp, #12
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053b2:	bf00      	nop
 80053b4:	370c      	adds	r7, #12
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr

080053be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053be:	b480      	push	{r7}
 80053c0:	b083      	sub	sp, #12
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053c6:	bf00      	nop
 80053c8:	370c      	adds	r7, #12
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr

080053d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b083      	sub	sp, #12
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053da:	bf00      	nop
 80053dc:	370c      	adds	r7, #12
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr

080053e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053e6:	b480      	push	{r7}
 80053e8:	b083      	sub	sp, #12
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053ee:	bf00      	nop
 80053f0:	370c      	adds	r7, #12
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
	...

080053fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a40      	ldr	r2, [pc, #256]	; (8005510 <TIM_Base_SetConfig+0x114>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d013      	beq.n	800543c <TIM_Base_SetConfig+0x40>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800541a:	d00f      	beq.n	800543c <TIM_Base_SetConfig+0x40>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a3d      	ldr	r2, [pc, #244]	; (8005514 <TIM_Base_SetConfig+0x118>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d00b      	beq.n	800543c <TIM_Base_SetConfig+0x40>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a3c      	ldr	r2, [pc, #240]	; (8005518 <TIM_Base_SetConfig+0x11c>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d007      	beq.n	800543c <TIM_Base_SetConfig+0x40>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a3b      	ldr	r2, [pc, #236]	; (800551c <TIM_Base_SetConfig+0x120>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d003      	beq.n	800543c <TIM_Base_SetConfig+0x40>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a3a      	ldr	r2, [pc, #232]	; (8005520 <TIM_Base_SetConfig+0x124>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d108      	bne.n	800544e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005442:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	4313      	orrs	r3, r2
 800544c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a2f      	ldr	r2, [pc, #188]	; (8005510 <TIM_Base_SetConfig+0x114>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d01f      	beq.n	8005496 <TIM_Base_SetConfig+0x9a>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800545c:	d01b      	beq.n	8005496 <TIM_Base_SetConfig+0x9a>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a2c      	ldr	r2, [pc, #176]	; (8005514 <TIM_Base_SetConfig+0x118>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d017      	beq.n	8005496 <TIM_Base_SetConfig+0x9a>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a2b      	ldr	r2, [pc, #172]	; (8005518 <TIM_Base_SetConfig+0x11c>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d013      	beq.n	8005496 <TIM_Base_SetConfig+0x9a>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a2a      	ldr	r2, [pc, #168]	; (800551c <TIM_Base_SetConfig+0x120>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d00f      	beq.n	8005496 <TIM_Base_SetConfig+0x9a>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a29      	ldr	r2, [pc, #164]	; (8005520 <TIM_Base_SetConfig+0x124>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d00b      	beq.n	8005496 <TIM_Base_SetConfig+0x9a>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a28      	ldr	r2, [pc, #160]	; (8005524 <TIM_Base_SetConfig+0x128>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d007      	beq.n	8005496 <TIM_Base_SetConfig+0x9a>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a27      	ldr	r2, [pc, #156]	; (8005528 <TIM_Base_SetConfig+0x12c>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d003      	beq.n	8005496 <TIM_Base_SetConfig+0x9a>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a26      	ldr	r2, [pc, #152]	; (800552c <TIM_Base_SetConfig+0x130>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d108      	bne.n	80054a8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800549c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	689a      	ldr	r2, [r3, #8]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a10      	ldr	r2, [pc, #64]	; (8005510 <TIM_Base_SetConfig+0x114>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d00f      	beq.n	80054f4 <TIM_Base_SetConfig+0xf8>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a12      	ldr	r2, [pc, #72]	; (8005520 <TIM_Base_SetConfig+0x124>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d00b      	beq.n	80054f4 <TIM_Base_SetConfig+0xf8>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a11      	ldr	r2, [pc, #68]	; (8005524 <TIM_Base_SetConfig+0x128>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d007      	beq.n	80054f4 <TIM_Base_SetConfig+0xf8>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a10      	ldr	r2, [pc, #64]	; (8005528 <TIM_Base_SetConfig+0x12c>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d003      	beq.n	80054f4 <TIM_Base_SetConfig+0xf8>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a0f      	ldr	r2, [pc, #60]	; (800552c <TIM_Base_SetConfig+0x130>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d103      	bne.n	80054fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	691a      	ldr	r2, [r3, #16]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	615a      	str	r2, [r3, #20]
}
 8005502:	bf00      	nop
 8005504:	3714      	adds	r7, #20
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	40012c00 	.word	0x40012c00
 8005514:	40000400 	.word	0x40000400
 8005518:	40000800 	.word	0x40000800
 800551c:	40000c00 	.word	0x40000c00
 8005520:	40013400 	.word	0x40013400
 8005524:	40014000 	.word	0x40014000
 8005528:	40014400 	.word	0x40014400
 800552c:	40014800 	.word	0x40014800

08005530 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005530:	b480      	push	{r7}
 8005532:	b087      	sub	sp, #28
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a1b      	ldr	r3, [r3, #32]
 800553e:	f023 0201 	bic.w	r2, r3, #1
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a1b      	ldr	r3, [r3, #32]
 800554a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800555e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f023 0303 	bic.w	r3, r3, #3
 800556a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	4313      	orrs	r3, r2
 8005574:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	f023 0302 	bic.w	r3, r3, #2
 800557c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	4313      	orrs	r3, r2
 8005586:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a2c      	ldr	r2, [pc, #176]	; (800563c <TIM_OC1_SetConfig+0x10c>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d00f      	beq.n	80055b0 <TIM_OC1_SetConfig+0x80>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a2b      	ldr	r2, [pc, #172]	; (8005640 <TIM_OC1_SetConfig+0x110>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d00b      	beq.n	80055b0 <TIM_OC1_SetConfig+0x80>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a2a      	ldr	r2, [pc, #168]	; (8005644 <TIM_OC1_SetConfig+0x114>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d007      	beq.n	80055b0 <TIM_OC1_SetConfig+0x80>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a29      	ldr	r2, [pc, #164]	; (8005648 <TIM_OC1_SetConfig+0x118>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d003      	beq.n	80055b0 <TIM_OC1_SetConfig+0x80>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a28      	ldr	r2, [pc, #160]	; (800564c <TIM_OC1_SetConfig+0x11c>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d10c      	bne.n	80055ca <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	f023 0308 	bic.w	r3, r3, #8
 80055b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	697a      	ldr	r2, [r7, #20]
 80055be:	4313      	orrs	r3, r2
 80055c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	f023 0304 	bic.w	r3, r3, #4
 80055c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a1b      	ldr	r2, [pc, #108]	; (800563c <TIM_OC1_SetConfig+0x10c>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d00f      	beq.n	80055f2 <TIM_OC1_SetConfig+0xc2>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a1a      	ldr	r2, [pc, #104]	; (8005640 <TIM_OC1_SetConfig+0x110>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d00b      	beq.n	80055f2 <TIM_OC1_SetConfig+0xc2>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a19      	ldr	r2, [pc, #100]	; (8005644 <TIM_OC1_SetConfig+0x114>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d007      	beq.n	80055f2 <TIM_OC1_SetConfig+0xc2>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a18      	ldr	r2, [pc, #96]	; (8005648 <TIM_OC1_SetConfig+0x118>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d003      	beq.n	80055f2 <TIM_OC1_SetConfig+0xc2>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a17      	ldr	r2, [pc, #92]	; (800564c <TIM_OC1_SetConfig+0x11c>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d111      	bne.n	8005616 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005600:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	695b      	ldr	r3, [r3, #20]
 8005606:	693a      	ldr	r2, [r7, #16]
 8005608:	4313      	orrs	r3, r2
 800560a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	699b      	ldr	r3, [r3, #24]
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	4313      	orrs	r3, r2
 8005614:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	693a      	ldr	r2, [r7, #16]
 800561a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	685a      	ldr	r2, [r3, #4]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	697a      	ldr	r2, [r7, #20]
 800562e:	621a      	str	r2, [r3, #32]
}
 8005630:	bf00      	nop
 8005632:	371c      	adds	r7, #28
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr
 800563c:	40012c00 	.word	0x40012c00
 8005640:	40013400 	.word	0x40013400
 8005644:	40014000 	.word	0x40014000
 8005648:	40014400 	.word	0x40014400
 800564c:	40014800 	.word	0x40014800

08005650 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005650:	b480      	push	{r7}
 8005652:	b087      	sub	sp, #28
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a1b      	ldr	r3, [r3, #32]
 800565e:	f023 0210 	bic.w	r2, r3, #16
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a1b      	ldr	r3, [r3, #32]
 800566a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	699b      	ldr	r3, [r3, #24]
 8005676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800567e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800568a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	021b      	lsls	r3, r3, #8
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	4313      	orrs	r3, r2
 8005696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	f023 0320 	bic.w	r3, r3, #32
 800569e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	011b      	lsls	r3, r3, #4
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a28      	ldr	r2, [pc, #160]	; (8005750 <TIM_OC2_SetConfig+0x100>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d003      	beq.n	80056bc <TIM_OC2_SetConfig+0x6c>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a27      	ldr	r2, [pc, #156]	; (8005754 <TIM_OC2_SetConfig+0x104>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d10d      	bne.n	80056d8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	011b      	lsls	r3, r3, #4
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a1d      	ldr	r2, [pc, #116]	; (8005750 <TIM_OC2_SetConfig+0x100>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d00f      	beq.n	8005700 <TIM_OC2_SetConfig+0xb0>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a1c      	ldr	r2, [pc, #112]	; (8005754 <TIM_OC2_SetConfig+0x104>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d00b      	beq.n	8005700 <TIM_OC2_SetConfig+0xb0>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a1b      	ldr	r2, [pc, #108]	; (8005758 <TIM_OC2_SetConfig+0x108>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d007      	beq.n	8005700 <TIM_OC2_SetConfig+0xb0>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a1a      	ldr	r2, [pc, #104]	; (800575c <TIM_OC2_SetConfig+0x10c>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d003      	beq.n	8005700 <TIM_OC2_SetConfig+0xb0>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a19      	ldr	r2, [pc, #100]	; (8005760 <TIM_OC2_SetConfig+0x110>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d113      	bne.n	8005728 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005706:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800570e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	695b      	ldr	r3, [r3, #20]
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	4313      	orrs	r3, r2
 800571a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	693a      	ldr	r2, [r7, #16]
 8005724:	4313      	orrs	r3, r2
 8005726:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	693a      	ldr	r2, [r7, #16]
 800572c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	685a      	ldr	r2, [r3, #4]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	697a      	ldr	r2, [r7, #20]
 8005740:	621a      	str	r2, [r3, #32]
}
 8005742:	bf00      	nop
 8005744:	371c      	adds	r7, #28
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop
 8005750:	40012c00 	.word	0x40012c00
 8005754:	40013400 	.word	0x40013400
 8005758:	40014000 	.word	0x40014000
 800575c:	40014400 	.word	0x40014400
 8005760:	40014800 	.word	0x40014800

08005764 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005764:	b480      	push	{r7}
 8005766:	b087      	sub	sp, #28
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a1b      	ldr	r3, [r3, #32]
 800577e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	69db      	ldr	r3, [r3, #28]
 800578a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f023 0303 	bic.w	r3, r3, #3
 800579e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	021b      	lsls	r3, r3, #8
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a27      	ldr	r2, [pc, #156]	; (8005860 <TIM_OC3_SetConfig+0xfc>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d003      	beq.n	80057ce <TIM_OC3_SetConfig+0x6a>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a26      	ldr	r2, [pc, #152]	; (8005864 <TIM_OC3_SetConfig+0x100>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d10d      	bne.n	80057ea <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	021b      	lsls	r3, r3, #8
 80057dc:	697a      	ldr	r2, [r7, #20]
 80057de:	4313      	orrs	r3, r2
 80057e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a1c      	ldr	r2, [pc, #112]	; (8005860 <TIM_OC3_SetConfig+0xfc>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d00f      	beq.n	8005812 <TIM_OC3_SetConfig+0xae>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a1b      	ldr	r2, [pc, #108]	; (8005864 <TIM_OC3_SetConfig+0x100>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d00b      	beq.n	8005812 <TIM_OC3_SetConfig+0xae>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a1a      	ldr	r2, [pc, #104]	; (8005868 <TIM_OC3_SetConfig+0x104>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d007      	beq.n	8005812 <TIM_OC3_SetConfig+0xae>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a19      	ldr	r2, [pc, #100]	; (800586c <TIM_OC3_SetConfig+0x108>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d003      	beq.n	8005812 <TIM_OC3_SetConfig+0xae>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a18      	ldr	r2, [pc, #96]	; (8005870 <TIM_OC3_SetConfig+0x10c>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d113      	bne.n	800583a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005818:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005820:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	011b      	lsls	r3, r3, #4
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	4313      	orrs	r3, r2
 800582c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	011b      	lsls	r3, r3, #4
 8005834:	693a      	ldr	r2, [r7, #16]
 8005836:	4313      	orrs	r3, r2
 8005838:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	693a      	ldr	r2, [r7, #16]
 800583e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	685a      	ldr	r2, [r3, #4]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	697a      	ldr	r2, [r7, #20]
 8005852:	621a      	str	r2, [r3, #32]
}
 8005854:	bf00      	nop
 8005856:	371c      	adds	r7, #28
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr
 8005860:	40012c00 	.word	0x40012c00
 8005864:	40013400 	.word	0x40013400
 8005868:	40014000 	.word	0x40014000
 800586c:	40014400 	.word	0x40014400
 8005870:	40014800 	.word	0x40014800

08005874 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005874:	b480      	push	{r7}
 8005876:	b087      	sub	sp, #28
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	69db      	ldr	r3, [r3, #28]
 800589a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	021b      	lsls	r3, r3, #8
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	031b      	lsls	r3, r3, #12
 80058ca:	693a      	ldr	r2, [r7, #16]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a18      	ldr	r2, [pc, #96]	; (8005934 <TIM_OC4_SetConfig+0xc0>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d00f      	beq.n	80058f8 <TIM_OC4_SetConfig+0x84>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a17      	ldr	r2, [pc, #92]	; (8005938 <TIM_OC4_SetConfig+0xc4>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d00b      	beq.n	80058f8 <TIM_OC4_SetConfig+0x84>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a16      	ldr	r2, [pc, #88]	; (800593c <TIM_OC4_SetConfig+0xc8>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d007      	beq.n	80058f8 <TIM_OC4_SetConfig+0x84>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a15      	ldr	r2, [pc, #84]	; (8005940 <TIM_OC4_SetConfig+0xcc>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d003      	beq.n	80058f8 <TIM_OC4_SetConfig+0x84>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a14      	ldr	r2, [pc, #80]	; (8005944 <TIM_OC4_SetConfig+0xd0>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d109      	bne.n	800590c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	695b      	ldr	r3, [r3, #20]
 8005904:	019b      	lsls	r3, r3, #6
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	4313      	orrs	r3, r2
 800590a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	697a      	ldr	r2, [r7, #20]
 8005910:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	685a      	ldr	r2, [r3, #4]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	621a      	str	r2, [r3, #32]
}
 8005926:	bf00      	nop
 8005928:	371c      	adds	r7, #28
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	40012c00 	.word	0x40012c00
 8005938:	40013400 	.word	0x40013400
 800593c:	40014000 	.word	0x40014000
 8005940:	40014400 	.word	0x40014400
 8005944:	40014800 	.word	0x40014800

08005948 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005948:	b480      	push	{r7}
 800594a:	b087      	sub	sp, #28
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800596e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800597a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	4313      	orrs	r3, r2
 8005984:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800598c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	041b      	lsls	r3, r3, #16
 8005994:	693a      	ldr	r2, [r7, #16]
 8005996:	4313      	orrs	r3, r2
 8005998:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a17      	ldr	r2, [pc, #92]	; (80059fc <TIM_OC5_SetConfig+0xb4>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d00f      	beq.n	80059c2 <TIM_OC5_SetConfig+0x7a>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a16      	ldr	r2, [pc, #88]	; (8005a00 <TIM_OC5_SetConfig+0xb8>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d00b      	beq.n	80059c2 <TIM_OC5_SetConfig+0x7a>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a15      	ldr	r2, [pc, #84]	; (8005a04 <TIM_OC5_SetConfig+0xbc>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d007      	beq.n	80059c2 <TIM_OC5_SetConfig+0x7a>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a14      	ldr	r2, [pc, #80]	; (8005a08 <TIM_OC5_SetConfig+0xc0>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d003      	beq.n	80059c2 <TIM_OC5_SetConfig+0x7a>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a13      	ldr	r2, [pc, #76]	; (8005a0c <TIM_OC5_SetConfig+0xc4>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d109      	bne.n	80059d6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	695b      	ldr	r3, [r3, #20]
 80059ce:	021b      	lsls	r3, r3, #8
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	685a      	ldr	r2, [r3, #4]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	621a      	str	r2, [r3, #32]
}
 80059f0:	bf00      	nop
 80059f2:	371c      	adds	r7, #28
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr
 80059fc:	40012c00 	.word	0x40012c00
 8005a00:	40013400 	.word	0x40013400
 8005a04:	40014000 	.word	0x40014000
 8005a08:	40014400 	.word	0x40014400
 8005a0c:	40014800 	.word	0x40014800

08005a10 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b087      	sub	sp, #28
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a1b      	ldr	r3, [r3, #32]
 8005a1e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a1b      	ldr	r3, [r3, #32]
 8005a2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	021b      	lsls	r3, r3, #8
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	051b      	lsls	r3, r3, #20
 8005a5e:	693a      	ldr	r2, [r7, #16]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a18      	ldr	r2, [pc, #96]	; (8005ac8 <TIM_OC6_SetConfig+0xb8>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d00f      	beq.n	8005a8c <TIM_OC6_SetConfig+0x7c>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a17      	ldr	r2, [pc, #92]	; (8005acc <TIM_OC6_SetConfig+0xbc>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d00b      	beq.n	8005a8c <TIM_OC6_SetConfig+0x7c>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a16      	ldr	r2, [pc, #88]	; (8005ad0 <TIM_OC6_SetConfig+0xc0>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d007      	beq.n	8005a8c <TIM_OC6_SetConfig+0x7c>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4a15      	ldr	r2, [pc, #84]	; (8005ad4 <TIM_OC6_SetConfig+0xc4>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d003      	beq.n	8005a8c <TIM_OC6_SetConfig+0x7c>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a14      	ldr	r2, [pc, #80]	; (8005ad8 <TIM_OC6_SetConfig+0xc8>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d109      	bne.n	8005aa0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a92:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	695b      	ldr	r3, [r3, #20]
 8005a98:	029b      	lsls	r3, r3, #10
 8005a9a:	697a      	ldr	r2, [r7, #20]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	697a      	ldr	r2, [r7, #20]
 8005aa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	685a      	ldr	r2, [r3, #4]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	693a      	ldr	r2, [r7, #16]
 8005ab8:	621a      	str	r2, [r3, #32]
}
 8005aba:	bf00      	nop
 8005abc:	371c      	adds	r7, #28
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	40012c00 	.word	0x40012c00
 8005acc:	40013400 	.word	0x40013400
 8005ad0:	40014000 	.word	0x40014000
 8005ad4:	40014400 	.word	0x40014400
 8005ad8:	40014800 	.word	0x40014800

08005adc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b087      	sub	sp, #28
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6a1b      	ldr	r3, [r3, #32]
 8005aec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	f023 0201 	bic.w	r2, r3, #1
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	011b      	lsls	r3, r3, #4
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	f023 030a 	bic.w	r3, r3, #10
 8005b18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	621a      	str	r2, [r3, #32]
}
 8005b2e:	bf00      	nop
 8005b30:	371c      	adds	r7, #28
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr

08005b3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b3a:	b480      	push	{r7}
 8005b3c:	b087      	sub	sp, #28
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	60f8      	str	r0, [r7, #12]
 8005b42:	60b9      	str	r1, [r7, #8]
 8005b44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	f023 0210 	bic.w	r2, r3, #16
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6a1b      	ldr	r3, [r3, #32]
 8005b5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	031b      	lsls	r3, r3, #12
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	011b      	lsls	r3, r3, #4
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	621a      	str	r2, [r3, #32]
}
 8005b8e:	bf00      	nop
 8005b90:	371c      	adds	r7, #28
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr

08005b9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b9a:	b480      	push	{r7}
 8005b9c:	b085      	sub	sp, #20
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
 8005ba2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bb2:	683a      	ldr	r2, [r7, #0]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	f043 0307 	orr.w	r3, r3, #7
 8005bbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	609a      	str	r2, [r3, #8]
}
 8005bc4:	bf00      	nop
 8005bc6:	3714      	adds	r7, #20
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b087      	sub	sp, #28
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	607a      	str	r2, [r7, #4]
 8005bdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	021a      	lsls	r2, r3, #8
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	431a      	orrs	r2, r3
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	697a      	ldr	r2, [r7, #20]
 8005c02:	609a      	str	r2, [r3, #8]
}
 8005c04:	bf00      	nop
 8005c06:	371c      	adds	r7, #28
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b087      	sub	sp, #28
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	f003 031f 	and.w	r3, r3, #31
 8005c22:	2201      	movs	r2, #1
 8005c24:	fa02 f303 	lsl.w	r3, r2, r3
 8005c28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6a1a      	ldr	r2, [r3, #32]
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	43db      	mvns	r3, r3
 8005c32:	401a      	ands	r2, r3
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6a1a      	ldr	r2, [r3, #32]
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	f003 031f 	and.w	r3, r3, #31
 8005c42:	6879      	ldr	r1, [r7, #4]
 8005c44:	fa01 f303 	lsl.w	r3, r1, r3
 8005c48:	431a      	orrs	r2, r3
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	621a      	str	r2, [r3, #32]
}
 8005c4e:	bf00      	nop
 8005c50:	371c      	adds	r7, #28
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
	...

08005c5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d101      	bne.n	8005c74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c70:	2302      	movs	r3, #2
 8005c72:	e068      	b.n	8005d46 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2202      	movs	r2, #2
 8005c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a2e      	ldr	r2, [pc, #184]	; (8005d54 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d004      	beq.n	8005ca8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a2d      	ldr	r2, [pc, #180]	; (8005d58 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d108      	bne.n	8005cba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005cae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cc0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a1e      	ldr	r2, [pc, #120]	; (8005d54 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d01d      	beq.n	8005d1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ce6:	d018      	beq.n	8005d1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a1b      	ldr	r2, [pc, #108]	; (8005d5c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d013      	beq.n	8005d1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a1a      	ldr	r2, [pc, #104]	; (8005d60 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d00e      	beq.n	8005d1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a18      	ldr	r2, [pc, #96]	; (8005d64 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d009      	beq.n	8005d1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a13      	ldr	r2, [pc, #76]	; (8005d58 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d004      	beq.n	8005d1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a14      	ldr	r2, [pc, #80]	; (8005d68 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d10c      	bne.n	8005d34 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	68ba      	ldr	r2, [r7, #8]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68ba      	ldr	r2, [r7, #8]
 8005d32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3714      	adds	r7, #20
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr
 8005d52:	bf00      	nop
 8005d54:	40012c00 	.word	0x40012c00
 8005d58:	40013400 	.word	0x40013400
 8005d5c:	40000400 	.word	0x40000400
 8005d60:	40000800 	.word	0x40000800
 8005d64:	40000c00 	.word	0x40000c00
 8005d68:	40014000 	.word	0x40014000

08005d6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d74:	bf00      	nop
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d88:	bf00      	nop
 8005d8a:	370c      	adds	r7, #12
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005d9c:	bf00      	nop
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d101      	bne.n	8005dba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e042      	b.n	8005e40 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d106      	bne.n	8005dd2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f7fb fbb3 	bl	8001538 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2224      	movs	r2, #36	; 0x24
 8005dd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f022 0201 	bic.w	r2, r2, #1
 8005de8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 fbba 	bl	8006564 <UART_SetConfig>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d101      	bne.n	8005dfa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e022      	b.n	8005e40 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d002      	beq.n	8005e08 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 feaa 	bl	8006b5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	685a      	ldr	r2, [r3, #4]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	689a      	ldr	r2, [r3, #8]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f042 0201 	orr.w	r2, r2, #1
 8005e36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 ff31 	bl	8006ca0 <UART_CheckIdleState>
 8005e3e:	4603      	mov	r3, r0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3708      	adds	r7, #8
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b08a      	sub	sp, #40	; 0x28
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	4613      	mov	r3, r2
 8005e54:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e5c:	2b20      	cmp	r3, #32
 8005e5e:	d142      	bne.n	8005ee6 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d002      	beq.n	8005e6c <HAL_UART_Receive_IT+0x24>
 8005e66:	88fb      	ldrh	r3, [r7, #6]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d101      	bne.n	8005e70 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e03b      	b.n	8005ee8 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d101      	bne.n	8005e7e <HAL_UART_Receive_IT+0x36>
 8005e7a:	2302      	movs	r3, #2
 8005e7c:	e034      	b.n	8005ee8 <HAL_UART_Receive_IT+0xa0>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2201      	movs	r2, #1
 8005e82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a17      	ldr	r2, [pc, #92]	; (8005ef0 <HAL_UART_Receive_IT+0xa8>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d01f      	beq.n	8005ed6 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d018      	beq.n	8005ed6 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	e853 3f00 	ldrex	r3, [r3]
 8005eb0:	613b      	str	r3, [r7, #16]
   return(result);
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec2:	623b      	str	r3, [r7, #32]
 8005ec4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec6:	69f9      	ldr	r1, [r7, #28]
 8005ec8:	6a3a      	ldr	r2, [r7, #32]
 8005eca:	e841 2300 	strex	r3, r2, [r1]
 8005ece:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d1e6      	bne.n	8005ea4 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005ed6:	88fb      	ldrh	r3, [r7, #6]
 8005ed8:	461a      	mov	r2, r3
 8005eda:	68b9      	ldr	r1, [r7, #8]
 8005edc:	68f8      	ldr	r0, [r7, #12]
 8005ede:	f000 fff3 	bl	8006ec8 <UART_Start_Receive_IT>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	e000      	b.n	8005ee8 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005ee6:	2302      	movs	r3, #2
  }
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3728      	adds	r7, #40	; 0x28
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	40008000 	.word	0x40008000

08005ef4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b0ba      	sub	sp, #232	; 0xe8
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	69db      	ldr	r3, [r3, #28]
 8005f02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005f1a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005f1e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005f22:	4013      	ands	r3, r2
 8005f24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005f28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d11b      	bne.n	8005f68 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f34:	f003 0320 	and.w	r3, r3, #32
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d015      	beq.n	8005f68 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f40:	f003 0320 	and.w	r3, r3, #32
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d105      	bne.n	8005f54 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005f48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d009      	beq.n	8005f68 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	f000 82d6 	beq.w	800650a <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	4798      	blx	r3
      }
      return;
 8005f66:	e2d0      	b.n	800650a <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8005f68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f000 811f 	beq.w	80061b0 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005f72:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005f76:	4b8b      	ldr	r3, [pc, #556]	; (80061a4 <HAL_UART_IRQHandler+0x2b0>)
 8005f78:	4013      	ands	r3, r2
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d106      	bne.n	8005f8c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005f7e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005f82:	4b89      	ldr	r3, [pc, #548]	; (80061a8 <HAL_UART_IRQHandler+0x2b4>)
 8005f84:	4013      	ands	r3, r2
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	f000 8112 	beq.w	80061b0 <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f90:	f003 0301 	and.w	r3, r3, #1
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d011      	beq.n	8005fbc <HAL_UART_IRQHandler+0xc8>
 8005f98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d00b      	beq.n	8005fbc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fb2:	f043 0201 	orr.w	r2, r3, #1
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005fbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fc0:	f003 0302 	and.w	r3, r3, #2
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d011      	beq.n	8005fec <HAL_UART_IRQHandler+0xf8>
 8005fc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fcc:	f003 0301 	and.w	r3, r3, #1
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d00b      	beq.n	8005fec <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2202      	movs	r2, #2
 8005fda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fe2:	f043 0204 	orr.w	r2, r3, #4
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005fec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ff0:	f003 0304 	and.w	r3, r3, #4
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d011      	beq.n	800601c <HAL_UART_IRQHandler+0x128>
 8005ff8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ffc:	f003 0301 	and.w	r3, r3, #1
 8006000:	2b00      	cmp	r3, #0
 8006002:	d00b      	beq.n	800601c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2204      	movs	r2, #4
 800600a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006012:	f043 0202 	orr.w	r2, r3, #2
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 800601c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006020:	f003 0308 	and.w	r3, r3, #8
 8006024:	2b00      	cmp	r3, #0
 8006026:	d017      	beq.n	8006058 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800602c:	f003 0320 	and.w	r3, r3, #32
 8006030:	2b00      	cmp	r3, #0
 8006032:	d105      	bne.n	8006040 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006034:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006038:	4b5a      	ldr	r3, [pc, #360]	; (80061a4 <HAL_UART_IRQHandler+0x2b0>)
 800603a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00b      	beq.n	8006058 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2208      	movs	r2, #8
 8006046:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800604e:	f043 0208 	orr.w	r2, r3, #8
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800605c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006060:	2b00      	cmp	r3, #0
 8006062:	d012      	beq.n	800608a <HAL_UART_IRQHandler+0x196>
 8006064:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006068:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800606c:	2b00      	cmp	r3, #0
 800606e:	d00c      	beq.n	800608a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006078:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006080:	f043 0220 	orr.w	r2, r3, #32
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006090:	2b00      	cmp	r3, #0
 8006092:	f000 823c 	beq.w	800650e <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800609a:	f003 0320 	and.w	r3, r3, #32
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d013      	beq.n	80060ca <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80060a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060a6:	f003 0320 	and.w	r3, r3, #32
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d105      	bne.n	80060ba <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80060ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d007      	beq.n	80060ca <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d003      	beq.n	80060ca <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060de:	2b40      	cmp	r3, #64	; 0x40
 80060e0:	d005      	beq.n	80060ee <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80060e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d04f      	beq.n	800618e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f001 f814 	bl	800711c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060fe:	2b40      	cmp	r3, #64	; 0x40
 8006100:	d141      	bne.n	8006186 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	3308      	adds	r3, #8
 8006108:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006110:	e853 3f00 	ldrex	r3, [r3]
 8006114:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006118:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800611c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006120:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	3308      	adds	r3, #8
 800612a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800612e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006132:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006136:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800613a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800613e:	e841 2300 	strex	r3, r2, [r1]
 8006142:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006146:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1d9      	bne.n	8006102 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006152:	2b00      	cmp	r3, #0
 8006154:	d013      	beq.n	800617e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800615a:	4a14      	ldr	r2, [pc, #80]	; (80061ac <HAL_UART_IRQHandler+0x2b8>)
 800615c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006162:	4618      	mov	r0, r3
 8006164:	f7fb fe33 	bl	8001dce <HAL_DMA_Abort_IT>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d017      	beq.n	800619e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006178:	4610      	mov	r0, r2
 800617a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800617c:	e00f      	b.n	800619e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 f9da 	bl	8006538 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006184:	e00b      	b.n	800619e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f000 f9d6 	bl	8006538 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800618c:	e007      	b.n	800619e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 f9d2 	bl	8006538 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800619c:	e1b7      	b.n	800650e <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800619e:	bf00      	nop
    return;
 80061a0:	e1b5      	b.n	800650e <HAL_UART_IRQHandler+0x61a>
 80061a2:	bf00      	nop
 80061a4:	10000001 	.word	0x10000001
 80061a8:	04000120 	.word	0x04000120
 80061ac:	080071e9 	.word	0x080071e9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	f040 814a 	bne.w	800644e <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80061ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061be:	f003 0310 	and.w	r3, r3, #16
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	f000 8143 	beq.w	800644e <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80061c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061cc:	f003 0310 	and.w	r3, r3, #16
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	f000 813c 	beq.w	800644e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	2210      	movs	r2, #16
 80061dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061e8:	2b40      	cmp	r3, #64	; 0x40
 80061ea:	f040 80b5 	bne.w	8006358 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80061fa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80061fe:	2b00      	cmp	r3, #0
 8006200:	f000 8187 	beq.w	8006512 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800620a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800620e:	429a      	cmp	r2, r3
 8006210:	f080 817f 	bcs.w	8006512 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800621a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f003 0320 	and.w	r3, r3, #32
 800622a:	2b00      	cmp	r3, #0
 800622c:	f040 8086 	bne.w	800633c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006238:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800623c:	e853 3f00 	ldrex	r3, [r3]
 8006240:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006244:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006248:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800624c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	461a      	mov	r2, r3
 8006256:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800625a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800625e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006262:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006266:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800626a:	e841 2300 	strex	r3, r2, [r1]
 800626e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006272:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006276:	2b00      	cmp	r3, #0
 8006278:	d1da      	bne.n	8006230 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	3308      	adds	r3, #8
 8006280:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006282:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006284:	e853 3f00 	ldrex	r3, [r3]
 8006288:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800628a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800628c:	f023 0301 	bic.w	r3, r3, #1
 8006290:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	3308      	adds	r3, #8
 800629a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800629e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80062a2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80062a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80062aa:	e841 2300 	strex	r3, r2, [r1]
 80062ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80062b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d1e1      	bne.n	800627a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	3308      	adds	r3, #8
 80062bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062c0:	e853 3f00 	ldrex	r3, [r3]
 80062c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80062c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	3308      	adds	r3, #8
 80062d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80062da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80062dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80062e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80062e2:	e841 2300 	strex	r3, r2, [r1]
 80062e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80062e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d1e3      	bne.n	80062b6 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2220      	movs	r2, #32
 80062f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006304:	e853 3f00 	ldrex	r3, [r3]
 8006308:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800630a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800630c:	f023 0310 	bic.w	r3, r3, #16
 8006310:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	461a      	mov	r2, r3
 800631a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800631e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006320:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006322:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006324:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006326:	e841 2300 	strex	r3, r2, [r1]
 800632a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800632c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800632e:	2b00      	cmp	r3, #0
 8006330:	d1e4      	bne.n	80062fc <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006336:	4618      	mov	r0, r3
 8006338:	f7fb fced 	bl	8001d16 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006348:	b29b      	uxth	r3, r3
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	b29b      	uxth	r3, r3
 800634e:	4619      	mov	r1, r3
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 f8fb 	bl	800654c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006356:	e0dc      	b.n	8006512 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006364:	b29b      	uxth	r3, r3
 8006366:	1ad3      	subs	r3, r2, r3
 8006368:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006372:	b29b      	uxth	r3, r3
 8006374:	2b00      	cmp	r3, #0
 8006376:	f000 80ce 	beq.w	8006516 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800637a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800637e:	2b00      	cmp	r3, #0
 8006380:	f000 80c9 	beq.w	8006516 <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800638a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800638c:	e853 3f00 	ldrex	r3, [r3]
 8006390:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006394:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006398:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	461a      	mov	r2, r3
 80063a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80063a6:	647b      	str	r3, [r7, #68]	; 0x44
 80063a8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80063ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063ae:	e841 2300 	strex	r3, r2, [r1]
 80063b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80063b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d1e4      	bne.n	8006384 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	3308      	adds	r3, #8
 80063c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c4:	e853 3f00 	ldrex	r3, [r3]
 80063c8:	623b      	str	r3, [r7, #32]
   return(result);
 80063ca:	6a3b      	ldr	r3, [r7, #32]
 80063cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063d0:	f023 0301 	bic.w	r3, r3, #1
 80063d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	3308      	adds	r3, #8
 80063de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80063e2:	633a      	str	r2, [r7, #48]	; 0x30
 80063e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063ea:	e841 2300 	strex	r3, r2, [r1]
 80063ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d1e1      	bne.n	80063ba <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2220      	movs	r2, #32
 80063fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	e853 3f00 	ldrex	r3, [r3]
 8006416:	60fb      	str	r3, [r7, #12]
   return(result);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f023 0310 	bic.w	r3, r3, #16
 800641e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	461a      	mov	r2, r3
 8006428:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800642c:	61fb      	str	r3, [r7, #28]
 800642e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006430:	69b9      	ldr	r1, [r7, #24]
 8006432:	69fa      	ldr	r2, [r7, #28]
 8006434:	e841 2300 	strex	r3, r2, [r1]
 8006438:	617b      	str	r3, [r7, #20]
   return(result);
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1e4      	bne.n	800640a <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006440:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006444:	4619      	mov	r1, r3
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 f880 	bl	800654c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800644c:	e063      	b.n	8006516 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800644e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006452:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00e      	beq.n	8006478 <HAL_UART_IRQHandler+0x584>
 800645a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800645e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d008      	beq.n	8006478 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800646e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f001 fb57 	bl	8007b24 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006476:	e051      	b.n	800651c <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800647c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006480:	2b00      	cmp	r3, #0
 8006482:	d014      	beq.n	80064ae <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800648c:	2b00      	cmp	r3, #0
 800648e:	d105      	bne.n	800649c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006490:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006494:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006498:	2b00      	cmp	r3, #0
 800649a:	d008      	beq.n	80064ae <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d03a      	beq.n	800651a <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	4798      	blx	r3
    }
    return;
 80064ac:	e035      	b.n	800651a <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80064ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d009      	beq.n	80064ce <HAL_UART_IRQHandler+0x5da>
 80064ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d003      	beq.n	80064ce <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 fea4 	bl	8007214 <UART_EndTransmit_IT>
    return;
 80064cc:	e026      	b.n	800651c <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80064ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d009      	beq.n	80064ee <HAL_UART_IRQHandler+0x5fa>
 80064da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064de:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d003      	beq.n	80064ee <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f001 fb30 	bl	8007b4c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80064ec:	e016      	b.n	800651c <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80064ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d010      	beq.n	800651c <HAL_UART_IRQHandler+0x628>
 80064fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	da0c      	bge.n	800651c <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f001 fb18 	bl	8007b38 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006508:	e008      	b.n	800651c <HAL_UART_IRQHandler+0x628>
      return;
 800650a:	bf00      	nop
 800650c:	e006      	b.n	800651c <HAL_UART_IRQHandler+0x628>
    return;
 800650e:	bf00      	nop
 8006510:	e004      	b.n	800651c <HAL_UART_IRQHandler+0x628>
      return;
 8006512:	bf00      	nop
 8006514:	e002      	b.n	800651c <HAL_UART_IRQHandler+0x628>
      return;
 8006516:	bf00      	nop
 8006518:	e000      	b.n	800651c <HAL_UART_IRQHandler+0x628>
    return;
 800651a:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 800651c:	37e8      	adds	r7, #232	; 0xe8
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop

08006524 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800652c:	bf00      	nop
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006540:	bf00      	nop
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	460b      	mov	r3, r1
 8006556:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006558:	bf00      	nop
 800655a:	370c      	adds	r7, #12
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006564:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006568:	b08c      	sub	sp, #48	; 0x30
 800656a:	af00      	add	r7, sp, #0
 800656c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800656e:	2300      	movs	r3, #0
 8006570:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	689a      	ldr	r2, [r3, #8]
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	691b      	ldr	r3, [r3, #16]
 800657c:	431a      	orrs	r2, r3
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	695b      	ldr	r3, [r3, #20]
 8006582:	431a      	orrs	r2, r3
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	69db      	ldr	r3, [r3, #28]
 8006588:	4313      	orrs	r3, r2
 800658a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	4baa      	ldr	r3, [pc, #680]	; (800683c <UART_SetConfig+0x2d8>)
 8006594:	4013      	ands	r3, r2
 8006596:	697a      	ldr	r2, [r7, #20]
 8006598:	6812      	ldr	r2, [r2, #0]
 800659a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800659c:	430b      	orrs	r3, r1
 800659e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	68da      	ldr	r2, [r3, #12]
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	430a      	orrs	r2, r1
 80065b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	699b      	ldr	r3, [r3, #24]
 80065ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a9f      	ldr	r2, [pc, #636]	; (8006840 <UART_SetConfig+0x2dc>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d004      	beq.n	80065d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	6a1b      	ldr	r3, [r3, #32]
 80065ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065cc:	4313      	orrs	r3, r2
 80065ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80065da:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80065de:	697a      	ldr	r2, [r7, #20]
 80065e0:	6812      	ldr	r2, [r2, #0]
 80065e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065e4:	430b      	orrs	r3, r1
 80065e6:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ee:	f023 010f 	bic.w	r1, r3, #15
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	430a      	orrs	r2, r1
 80065fc:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a90      	ldr	r2, [pc, #576]	; (8006844 <UART_SetConfig+0x2e0>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d125      	bne.n	8006654 <UART_SetConfig+0xf0>
 8006608:	4b8f      	ldr	r3, [pc, #572]	; (8006848 <UART_SetConfig+0x2e4>)
 800660a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800660e:	f003 0303 	and.w	r3, r3, #3
 8006612:	2b03      	cmp	r3, #3
 8006614:	d81a      	bhi.n	800664c <UART_SetConfig+0xe8>
 8006616:	a201      	add	r2, pc, #4	; (adr r2, 800661c <UART_SetConfig+0xb8>)
 8006618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800661c:	0800662d 	.word	0x0800662d
 8006620:	0800663d 	.word	0x0800663d
 8006624:	08006635 	.word	0x08006635
 8006628:	08006645 	.word	0x08006645
 800662c:	2301      	movs	r3, #1
 800662e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006632:	e116      	b.n	8006862 <UART_SetConfig+0x2fe>
 8006634:	2302      	movs	r3, #2
 8006636:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800663a:	e112      	b.n	8006862 <UART_SetConfig+0x2fe>
 800663c:	2304      	movs	r3, #4
 800663e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006642:	e10e      	b.n	8006862 <UART_SetConfig+0x2fe>
 8006644:	2308      	movs	r3, #8
 8006646:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800664a:	e10a      	b.n	8006862 <UART_SetConfig+0x2fe>
 800664c:	2310      	movs	r3, #16
 800664e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006652:	e106      	b.n	8006862 <UART_SetConfig+0x2fe>
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a7c      	ldr	r2, [pc, #496]	; (800684c <UART_SetConfig+0x2e8>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d138      	bne.n	80066d0 <UART_SetConfig+0x16c>
 800665e:	4b7a      	ldr	r3, [pc, #488]	; (8006848 <UART_SetConfig+0x2e4>)
 8006660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006664:	f003 030c 	and.w	r3, r3, #12
 8006668:	2b0c      	cmp	r3, #12
 800666a:	d82d      	bhi.n	80066c8 <UART_SetConfig+0x164>
 800666c:	a201      	add	r2, pc, #4	; (adr r2, 8006674 <UART_SetConfig+0x110>)
 800666e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006672:	bf00      	nop
 8006674:	080066a9 	.word	0x080066a9
 8006678:	080066c9 	.word	0x080066c9
 800667c:	080066c9 	.word	0x080066c9
 8006680:	080066c9 	.word	0x080066c9
 8006684:	080066b9 	.word	0x080066b9
 8006688:	080066c9 	.word	0x080066c9
 800668c:	080066c9 	.word	0x080066c9
 8006690:	080066c9 	.word	0x080066c9
 8006694:	080066b1 	.word	0x080066b1
 8006698:	080066c9 	.word	0x080066c9
 800669c:	080066c9 	.word	0x080066c9
 80066a0:	080066c9 	.word	0x080066c9
 80066a4:	080066c1 	.word	0x080066c1
 80066a8:	2300      	movs	r3, #0
 80066aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066ae:	e0d8      	b.n	8006862 <UART_SetConfig+0x2fe>
 80066b0:	2302      	movs	r3, #2
 80066b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066b6:	e0d4      	b.n	8006862 <UART_SetConfig+0x2fe>
 80066b8:	2304      	movs	r3, #4
 80066ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066be:	e0d0      	b.n	8006862 <UART_SetConfig+0x2fe>
 80066c0:	2308      	movs	r3, #8
 80066c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066c6:	e0cc      	b.n	8006862 <UART_SetConfig+0x2fe>
 80066c8:	2310      	movs	r3, #16
 80066ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066ce:	e0c8      	b.n	8006862 <UART_SetConfig+0x2fe>
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a5e      	ldr	r2, [pc, #376]	; (8006850 <UART_SetConfig+0x2ec>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d125      	bne.n	8006726 <UART_SetConfig+0x1c2>
 80066da:	4b5b      	ldr	r3, [pc, #364]	; (8006848 <UART_SetConfig+0x2e4>)
 80066dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066e0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80066e4:	2b30      	cmp	r3, #48	; 0x30
 80066e6:	d016      	beq.n	8006716 <UART_SetConfig+0x1b2>
 80066e8:	2b30      	cmp	r3, #48	; 0x30
 80066ea:	d818      	bhi.n	800671e <UART_SetConfig+0x1ba>
 80066ec:	2b20      	cmp	r3, #32
 80066ee:	d00a      	beq.n	8006706 <UART_SetConfig+0x1a2>
 80066f0:	2b20      	cmp	r3, #32
 80066f2:	d814      	bhi.n	800671e <UART_SetConfig+0x1ba>
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d002      	beq.n	80066fe <UART_SetConfig+0x19a>
 80066f8:	2b10      	cmp	r3, #16
 80066fa:	d008      	beq.n	800670e <UART_SetConfig+0x1aa>
 80066fc:	e00f      	b.n	800671e <UART_SetConfig+0x1ba>
 80066fe:	2300      	movs	r3, #0
 8006700:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006704:	e0ad      	b.n	8006862 <UART_SetConfig+0x2fe>
 8006706:	2302      	movs	r3, #2
 8006708:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800670c:	e0a9      	b.n	8006862 <UART_SetConfig+0x2fe>
 800670e:	2304      	movs	r3, #4
 8006710:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006714:	e0a5      	b.n	8006862 <UART_SetConfig+0x2fe>
 8006716:	2308      	movs	r3, #8
 8006718:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800671c:	e0a1      	b.n	8006862 <UART_SetConfig+0x2fe>
 800671e:	2310      	movs	r3, #16
 8006720:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006724:	e09d      	b.n	8006862 <UART_SetConfig+0x2fe>
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a4a      	ldr	r2, [pc, #296]	; (8006854 <UART_SetConfig+0x2f0>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d125      	bne.n	800677c <UART_SetConfig+0x218>
 8006730:	4b45      	ldr	r3, [pc, #276]	; (8006848 <UART_SetConfig+0x2e4>)
 8006732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006736:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800673a:	2bc0      	cmp	r3, #192	; 0xc0
 800673c:	d016      	beq.n	800676c <UART_SetConfig+0x208>
 800673e:	2bc0      	cmp	r3, #192	; 0xc0
 8006740:	d818      	bhi.n	8006774 <UART_SetConfig+0x210>
 8006742:	2b80      	cmp	r3, #128	; 0x80
 8006744:	d00a      	beq.n	800675c <UART_SetConfig+0x1f8>
 8006746:	2b80      	cmp	r3, #128	; 0x80
 8006748:	d814      	bhi.n	8006774 <UART_SetConfig+0x210>
 800674a:	2b00      	cmp	r3, #0
 800674c:	d002      	beq.n	8006754 <UART_SetConfig+0x1f0>
 800674e:	2b40      	cmp	r3, #64	; 0x40
 8006750:	d008      	beq.n	8006764 <UART_SetConfig+0x200>
 8006752:	e00f      	b.n	8006774 <UART_SetConfig+0x210>
 8006754:	2300      	movs	r3, #0
 8006756:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800675a:	e082      	b.n	8006862 <UART_SetConfig+0x2fe>
 800675c:	2302      	movs	r3, #2
 800675e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006762:	e07e      	b.n	8006862 <UART_SetConfig+0x2fe>
 8006764:	2304      	movs	r3, #4
 8006766:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800676a:	e07a      	b.n	8006862 <UART_SetConfig+0x2fe>
 800676c:	2308      	movs	r3, #8
 800676e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006772:	e076      	b.n	8006862 <UART_SetConfig+0x2fe>
 8006774:	2310      	movs	r3, #16
 8006776:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800677a:	e072      	b.n	8006862 <UART_SetConfig+0x2fe>
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a35      	ldr	r2, [pc, #212]	; (8006858 <UART_SetConfig+0x2f4>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d12a      	bne.n	80067dc <UART_SetConfig+0x278>
 8006786:	4b30      	ldr	r3, [pc, #192]	; (8006848 <UART_SetConfig+0x2e4>)
 8006788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800678c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006790:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006794:	d01a      	beq.n	80067cc <UART_SetConfig+0x268>
 8006796:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800679a:	d81b      	bhi.n	80067d4 <UART_SetConfig+0x270>
 800679c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067a0:	d00c      	beq.n	80067bc <UART_SetConfig+0x258>
 80067a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067a6:	d815      	bhi.n	80067d4 <UART_SetConfig+0x270>
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d003      	beq.n	80067b4 <UART_SetConfig+0x250>
 80067ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067b0:	d008      	beq.n	80067c4 <UART_SetConfig+0x260>
 80067b2:	e00f      	b.n	80067d4 <UART_SetConfig+0x270>
 80067b4:	2300      	movs	r3, #0
 80067b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067ba:	e052      	b.n	8006862 <UART_SetConfig+0x2fe>
 80067bc:	2302      	movs	r3, #2
 80067be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067c2:	e04e      	b.n	8006862 <UART_SetConfig+0x2fe>
 80067c4:	2304      	movs	r3, #4
 80067c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067ca:	e04a      	b.n	8006862 <UART_SetConfig+0x2fe>
 80067cc:	2308      	movs	r3, #8
 80067ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067d2:	e046      	b.n	8006862 <UART_SetConfig+0x2fe>
 80067d4:	2310      	movs	r3, #16
 80067d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067da:	e042      	b.n	8006862 <UART_SetConfig+0x2fe>
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a17      	ldr	r2, [pc, #92]	; (8006840 <UART_SetConfig+0x2dc>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d13a      	bne.n	800685c <UART_SetConfig+0x2f8>
 80067e6:	4b18      	ldr	r3, [pc, #96]	; (8006848 <UART_SetConfig+0x2e4>)
 80067e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80067f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80067f4:	d01a      	beq.n	800682c <UART_SetConfig+0x2c8>
 80067f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80067fa:	d81b      	bhi.n	8006834 <UART_SetConfig+0x2d0>
 80067fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006800:	d00c      	beq.n	800681c <UART_SetConfig+0x2b8>
 8006802:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006806:	d815      	bhi.n	8006834 <UART_SetConfig+0x2d0>
 8006808:	2b00      	cmp	r3, #0
 800680a:	d003      	beq.n	8006814 <UART_SetConfig+0x2b0>
 800680c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006810:	d008      	beq.n	8006824 <UART_SetConfig+0x2c0>
 8006812:	e00f      	b.n	8006834 <UART_SetConfig+0x2d0>
 8006814:	2300      	movs	r3, #0
 8006816:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800681a:	e022      	b.n	8006862 <UART_SetConfig+0x2fe>
 800681c:	2302      	movs	r3, #2
 800681e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006822:	e01e      	b.n	8006862 <UART_SetConfig+0x2fe>
 8006824:	2304      	movs	r3, #4
 8006826:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800682a:	e01a      	b.n	8006862 <UART_SetConfig+0x2fe>
 800682c:	2308      	movs	r3, #8
 800682e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006832:	e016      	b.n	8006862 <UART_SetConfig+0x2fe>
 8006834:	2310      	movs	r3, #16
 8006836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800683a:	e012      	b.n	8006862 <UART_SetConfig+0x2fe>
 800683c:	cfff69f3 	.word	0xcfff69f3
 8006840:	40008000 	.word	0x40008000
 8006844:	40013800 	.word	0x40013800
 8006848:	40021000 	.word	0x40021000
 800684c:	40004400 	.word	0x40004400
 8006850:	40004800 	.word	0x40004800
 8006854:	40004c00 	.word	0x40004c00
 8006858:	40005000 	.word	0x40005000
 800685c:	2310      	movs	r3, #16
 800685e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4aae      	ldr	r2, [pc, #696]	; (8006b20 <UART_SetConfig+0x5bc>)
 8006868:	4293      	cmp	r3, r2
 800686a:	f040 8097 	bne.w	800699c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800686e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006872:	2b08      	cmp	r3, #8
 8006874:	d823      	bhi.n	80068be <UART_SetConfig+0x35a>
 8006876:	a201      	add	r2, pc, #4	; (adr r2, 800687c <UART_SetConfig+0x318>)
 8006878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800687c:	080068a1 	.word	0x080068a1
 8006880:	080068bf 	.word	0x080068bf
 8006884:	080068a9 	.word	0x080068a9
 8006888:	080068bf 	.word	0x080068bf
 800688c:	080068af 	.word	0x080068af
 8006890:	080068bf 	.word	0x080068bf
 8006894:	080068bf 	.word	0x080068bf
 8006898:	080068bf 	.word	0x080068bf
 800689c:	080068b7 	.word	0x080068b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068a0:	f7fd f962 	bl	8003b68 <HAL_RCC_GetPCLK1Freq>
 80068a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80068a6:	e010      	b.n	80068ca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068a8:	4b9e      	ldr	r3, [pc, #632]	; (8006b24 <UART_SetConfig+0x5c0>)
 80068aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80068ac:	e00d      	b.n	80068ca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068ae:	f7fd f8c3 	bl	8003a38 <HAL_RCC_GetSysClockFreq>
 80068b2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80068b4:	e009      	b.n	80068ca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80068bc:	e005      	b.n	80068ca <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80068be:	2300      	movs	r3, #0
 80068c0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80068c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80068ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f000 8130 	beq.w	8006b32 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d6:	4a94      	ldr	r2, [pc, #592]	; (8006b28 <UART_SetConfig+0x5c4>)
 80068d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068dc:	461a      	mov	r2, r3
 80068de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80068e4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	685a      	ldr	r2, [r3, #4]
 80068ea:	4613      	mov	r3, r2
 80068ec:	005b      	lsls	r3, r3, #1
 80068ee:	4413      	add	r3, r2
 80068f0:	69ba      	ldr	r2, [r7, #24]
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d305      	bcc.n	8006902 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80068fc:	69ba      	ldr	r2, [r7, #24]
 80068fe:	429a      	cmp	r2, r3
 8006900:	d903      	bls.n	800690a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006908:	e113      	b.n	8006b32 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800690a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690c:	2200      	movs	r2, #0
 800690e:	60bb      	str	r3, [r7, #8]
 8006910:	60fa      	str	r2, [r7, #12]
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006916:	4a84      	ldr	r2, [pc, #528]	; (8006b28 <UART_SetConfig+0x5c4>)
 8006918:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800691c:	b29b      	uxth	r3, r3
 800691e:	2200      	movs	r2, #0
 8006920:	603b      	str	r3, [r7, #0]
 8006922:	607a      	str	r2, [r7, #4]
 8006924:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006928:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800692c:	f7f9 fc66 	bl	80001fc <__aeabi_uldivmod>
 8006930:	4602      	mov	r2, r0
 8006932:	460b      	mov	r3, r1
 8006934:	4610      	mov	r0, r2
 8006936:	4619      	mov	r1, r3
 8006938:	f04f 0200 	mov.w	r2, #0
 800693c:	f04f 0300 	mov.w	r3, #0
 8006940:	020b      	lsls	r3, r1, #8
 8006942:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006946:	0202      	lsls	r2, r0, #8
 8006948:	6979      	ldr	r1, [r7, #20]
 800694a:	6849      	ldr	r1, [r1, #4]
 800694c:	0849      	lsrs	r1, r1, #1
 800694e:	2000      	movs	r0, #0
 8006950:	460c      	mov	r4, r1
 8006952:	4605      	mov	r5, r0
 8006954:	eb12 0804 	adds.w	r8, r2, r4
 8006958:	eb43 0905 	adc.w	r9, r3, r5
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	469a      	mov	sl, r3
 8006964:	4693      	mov	fp, r2
 8006966:	4652      	mov	r2, sl
 8006968:	465b      	mov	r3, fp
 800696a:	4640      	mov	r0, r8
 800696c:	4649      	mov	r1, r9
 800696e:	f7f9 fc45 	bl	80001fc <__aeabi_uldivmod>
 8006972:	4602      	mov	r2, r0
 8006974:	460b      	mov	r3, r1
 8006976:	4613      	mov	r3, r2
 8006978:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800697a:	6a3b      	ldr	r3, [r7, #32]
 800697c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006980:	d308      	bcc.n	8006994 <UART_SetConfig+0x430>
 8006982:	6a3b      	ldr	r3, [r7, #32]
 8006984:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006988:	d204      	bcs.n	8006994 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	6a3a      	ldr	r2, [r7, #32]
 8006990:	60da      	str	r2, [r3, #12]
 8006992:	e0ce      	b.n	8006b32 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800699a:	e0ca      	b.n	8006b32 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	69db      	ldr	r3, [r3, #28]
 80069a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069a4:	d166      	bne.n	8006a74 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80069a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80069aa:	2b08      	cmp	r3, #8
 80069ac:	d827      	bhi.n	80069fe <UART_SetConfig+0x49a>
 80069ae:	a201      	add	r2, pc, #4	; (adr r2, 80069b4 <UART_SetConfig+0x450>)
 80069b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b4:	080069d9 	.word	0x080069d9
 80069b8:	080069e1 	.word	0x080069e1
 80069bc:	080069e9 	.word	0x080069e9
 80069c0:	080069ff 	.word	0x080069ff
 80069c4:	080069ef 	.word	0x080069ef
 80069c8:	080069ff 	.word	0x080069ff
 80069cc:	080069ff 	.word	0x080069ff
 80069d0:	080069ff 	.word	0x080069ff
 80069d4:	080069f7 	.word	0x080069f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069d8:	f7fd f8c6 	bl	8003b68 <HAL_RCC_GetPCLK1Freq>
 80069dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80069de:	e014      	b.n	8006a0a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069e0:	f7fd f8d8 	bl	8003b94 <HAL_RCC_GetPCLK2Freq>
 80069e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80069e6:	e010      	b.n	8006a0a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069e8:	4b4e      	ldr	r3, [pc, #312]	; (8006b24 <UART_SetConfig+0x5c0>)
 80069ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80069ec:	e00d      	b.n	8006a0a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069ee:	f7fd f823 	bl	8003a38 <HAL_RCC_GetSysClockFreq>
 80069f2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80069f4:	e009      	b.n	8006a0a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80069fc:	e005      	b.n	8006a0a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80069fe:	2300      	movs	r3, #0
 8006a00:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006a08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	f000 8090 	beq.w	8006b32 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a16:	4a44      	ldr	r2, [pc, #272]	; (8006b28 <UART_SetConfig+0x5c4>)
 8006a18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a20:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a24:	005a      	lsls	r2, r3, #1
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	085b      	lsrs	r3, r3, #1
 8006a2c:	441a      	add	r2, r3
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a36:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a38:	6a3b      	ldr	r3, [r7, #32]
 8006a3a:	2b0f      	cmp	r3, #15
 8006a3c:	d916      	bls.n	8006a6c <UART_SetConfig+0x508>
 8006a3e:	6a3b      	ldr	r3, [r7, #32]
 8006a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a44:	d212      	bcs.n	8006a6c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a46:	6a3b      	ldr	r3, [r7, #32]
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	f023 030f 	bic.w	r3, r3, #15
 8006a4e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a50:	6a3b      	ldr	r3, [r7, #32]
 8006a52:	085b      	lsrs	r3, r3, #1
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	f003 0307 	and.w	r3, r3, #7
 8006a5a:	b29a      	uxth	r2, r3
 8006a5c:	8bfb      	ldrh	r3, [r7, #30]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	8bfa      	ldrh	r2, [r7, #30]
 8006a68:	60da      	str	r2, [r3, #12]
 8006a6a:	e062      	b.n	8006b32 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006a72:	e05e      	b.n	8006b32 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a74:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006a78:	2b08      	cmp	r3, #8
 8006a7a:	d828      	bhi.n	8006ace <UART_SetConfig+0x56a>
 8006a7c:	a201      	add	r2, pc, #4	; (adr r2, 8006a84 <UART_SetConfig+0x520>)
 8006a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a82:	bf00      	nop
 8006a84:	08006aa9 	.word	0x08006aa9
 8006a88:	08006ab1 	.word	0x08006ab1
 8006a8c:	08006ab9 	.word	0x08006ab9
 8006a90:	08006acf 	.word	0x08006acf
 8006a94:	08006abf 	.word	0x08006abf
 8006a98:	08006acf 	.word	0x08006acf
 8006a9c:	08006acf 	.word	0x08006acf
 8006aa0:	08006acf 	.word	0x08006acf
 8006aa4:	08006ac7 	.word	0x08006ac7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006aa8:	f7fd f85e 	bl	8003b68 <HAL_RCC_GetPCLK1Freq>
 8006aac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006aae:	e014      	b.n	8006ada <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ab0:	f7fd f870 	bl	8003b94 <HAL_RCC_GetPCLK2Freq>
 8006ab4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ab6:	e010      	b.n	8006ada <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ab8:	4b1a      	ldr	r3, [pc, #104]	; (8006b24 <UART_SetConfig+0x5c0>)
 8006aba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006abc:	e00d      	b.n	8006ada <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006abe:	f7fc ffbb 	bl	8003a38 <HAL_RCC_GetSysClockFreq>
 8006ac2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ac4:	e009      	b.n	8006ada <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ac6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006aca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006acc:	e005      	b.n	8006ada <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006ad8:	bf00      	nop
    }

    if (pclk != 0U)
 8006ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d028      	beq.n	8006b32 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae4:	4a10      	ldr	r2, [pc, #64]	; (8006b28 <UART_SetConfig+0x5c4>)
 8006ae6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006aea:	461a      	mov	r2, r3
 8006aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aee:	fbb3 f2f2 	udiv	r2, r3, r2
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	085b      	lsrs	r3, r3, #1
 8006af8:	441a      	add	r2, r3
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b02:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b04:	6a3b      	ldr	r3, [r7, #32]
 8006b06:	2b0f      	cmp	r3, #15
 8006b08:	d910      	bls.n	8006b2c <UART_SetConfig+0x5c8>
 8006b0a:	6a3b      	ldr	r3, [r7, #32]
 8006b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b10:	d20c      	bcs.n	8006b2c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b12:	6a3b      	ldr	r3, [r7, #32]
 8006b14:	b29a      	uxth	r2, r3
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	60da      	str	r2, [r3, #12]
 8006b1c:	e009      	b.n	8006b32 <UART_SetConfig+0x5ce>
 8006b1e:	bf00      	nop
 8006b20:	40008000 	.word	0x40008000
 8006b24:	00f42400 	.word	0x00f42400
 8006b28:	0800ce48 	.word	0x0800ce48
      }
      else
      {
        ret = HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	2201      	movs	r2, #1
 8006b36:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	2200      	movs	r2, #0
 8006b46:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006b4e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3730      	adds	r7, #48	; 0x30
 8006b56:	46bd      	mov	sp, r7
 8006b58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006b5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b68:	f003 0301 	and.w	r3, r3, #1
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d00a      	beq.n	8006b86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	430a      	orrs	r2, r1
 8006b84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b8a:	f003 0302 	and.w	r3, r3, #2
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00a      	beq.n	8006ba8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	430a      	orrs	r2, r1
 8006ba6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bac:	f003 0304 	and.w	r3, r3, #4
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00a      	beq.n	8006bca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	430a      	orrs	r2, r1
 8006bc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bce:	f003 0308 	and.w	r3, r3, #8
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d00a      	beq.n	8006bec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	430a      	orrs	r2, r1
 8006bea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bf0:	f003 0310 	and.w	r3, r3, #16
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d00a      	beq.n	8006c0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	430a      	orrs	r2, r1
 8006c0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c12:	f003 0320 	and.w	r3, r3, #32
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d00a      	beq.n	8006c30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	430a      	orrs	r2, r1
 8006c2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d01a      	beq.n	8006c72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	430a      	orrs	r2, r1
 8006c50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c5a:	d10a      	bne.n	8006c72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	430a      	orrs	r2, r1
 8006c70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00a      	beq.n	8006c94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	430a      	orrs	r2, r1
 8006c92:	605a      	str	r2, [r3, #4]
  }
}
 8006c94:	bf00      	nop
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b086      	sub	sp, #24
 8006ca4:	af02      	add	r7, sp, #8
 8006ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006cb0:	f7fa fef0 	bl	8001a94 <HAL_GetTick>
 8006cb4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f003 0308 	and.w	r3, r3, #8
 8006cc0:	2b08      	cmp	r3, #8
 8006cc2:	d10e      	bne.n	8006ce2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006cc8:	9300      	str	r3, [sp, #0]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 f82f 	bl	8006d36 <UART_WaitOnFlagUntilTimeout>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d001      	beq.n	8006ce2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cde:	2303      	movs	r3, #3
 8006ce0:	e025      	b.n	8006d2e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f003 0304 	and.w	r3, r3, #4
 8006cec:	2b04      	cmp	r3, #4
 8006cee:	d10e      	bne.n	8006d0e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cf0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006cf4:	9300      	str	r3, [sp, #0]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 f819 	bl	8006d36 <UART_WaitOnFlagUntilTimeout>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d001      	beq.n	8006d0e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	e00f      	b.n	8006d2e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2220      	movs	r2, #32
 8006d12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2220      	movs	r2, #32
 8006d1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3710      	adds	r7, #16
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}

08006d36 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d36:	b580      	push	{r7, lr}
 8006d38:	b09c      	sub	sp, #112	; 0x70
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	60f8      	str	r0, [r7, #12]
 8006d3e:	60b9      	str	r1, [r7, #8]
 8006d40:	603b      	str	r3, [r7, #0]
 8006d42:	4613      	mov	r3, r2
 8006d44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d46:	e0a9      	b.n	8006e9c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d4e:	f000 80a5 	beq.w	8006e9c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d52:	f7fa fe9f 	bl	8001a94 <HAL_GetTick>
 8006d56:	4602      	mov	r2, r0
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	1ad3      	subs	r3, r2, r3
 8006d5c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d302      	bcc.n	8006d68 <UART_WaitOnFlagUntilTimeout+0x32>
 8006d62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d140      	bne.n	8006dea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d70:	e853 3f00 	ldrex	r3, [r3]
 8006d74:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006d76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d78:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d7c:	667b      	str	r3, [r7, #100]	; 0x64
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	461a      	mov	r2, r3
 8006d84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d88:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d8a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006d8c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006d8e:	e841 2300 	strex	r3, r2, [r1]
 8006d92:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006d94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d1e6      	bne.n	8006d68 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	3308      	adds	r3, #8
 8006da0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006da4:	e853 3f00 	ldrex	r3, [r3]
 8006da8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dac:	f023 0301 	bic.w	r3, r3, #1
 8006db0:	663b      	str	r3, [r7, #96]	; 0x60
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	3308      	adds	r3, #8
 8006db8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006dba:	64ba      	str	r2, [r7, #72]	; 0x48
 8006dbc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dbe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006dc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006dc2:	e841 2300 	strex	r3, r2, [r1]
 8006dc6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006dc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1e5      	bne.n	8006d9a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2220      	movs	r2, #32
 8006dd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2220      	movs	r2, #32
 8006dda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006de6:	2303      	movs	r3, #3
 8006de8:	e069      	b.n	8006ebe <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 0304 	and.w	r3, r3, #4
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d051      	beq.n	8006e9c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	69db      	ldr	r3, [r3, #28]
 8006dfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e06:	d149      	bne.n	8006e9c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e10:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1a:	e853 3f00 	ldrex	r3, [r3]
 8006e1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e22:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e26:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e30:	637b      	str	r3, [r7, #52]	; 0x34
 8006e32:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e38:	e841 2300 	strex	r3, r2, [r1]
 8006e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d1e6      	bne.n	8006e12 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	3308      	adds	r3, #8
 8006e4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	e853 3f00 	ldrex	r3, [r3]
 8006e52:	613b      	str	r3, [r7, #16]
   return(result);
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	f023 0301 	bic.w	r3, r3, #1
 8006e5a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	3308      	adds	r3, #8
 8006e62:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006e64:	623a      	str	r2, [r7, #32]
 8006e66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e68:	69f9      	ldr	r1, [r7, #28]
 8006e6a:	6a3a      	ldr	r2, [r7, #32]
 8006e6c:	e841 2300 	strex	r3, r2, [r1]
 8006e70:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d1e5      	bne.n	8006e44 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2220      	movs	r2, #32
 8006e7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2220      	movs	r2, #32
 8006e84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2220      	movs	r2, #32
 8006e8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2200      	movs	r2, #0
 8006e94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006e98:	2303      	movs	r3, #3
 8006e9a:	e010      	b.n	8006ebe <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	69da      	ldr	r2, [r3, #28]
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	4013      	ands	r3, r2
 8006ea6:	68ba      	ldr	r2, [r7, #8]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	bf0c      	ite	eq
 8006eac:	2301      	moveq	r3, #1
 8006eae:	2300      	movne	r3, #0
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	79fb      	ldrb	r3, [r7, #7]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	f43f af46 	beq.w	8006d48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3770      	adds	r7, #112	; 0x70
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
	...

08006ec8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b0a3      	sub	sp, #140	; 0x8c
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	60b9      	str	r1, [r7, #8]
 8006ed2:	4613      	mov	r3, r2
 8006ed4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	68ba      	ldr	r2, [r7, #8]
 8006eda:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	88fa      	ldrh	r2, [r7, #6]
 8006ee0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	88fa      	ldrh	r2, [r7, #6]
 8006ee8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006efa:	d10e      	bne.n	8006f1a <UART_Start_Receive_IT+0x52>
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d105      	bne.n	8006f10 <UART_Start_Receive_IT+0x48>
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006f0a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006f0e:	e02d      	b.n	8006f6c <UART_Start_Receive_IT+0xa4>
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	22ff      	movs	r2, #255	; 0xff
 8006f14:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006f18:	e028      	b.n	8006f6c <UART_Start_Receive_IT+0xa4>
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d10d      	bne.n	8006f3e <UART_Start_Receive_IT+0x76>
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	691b      	ldr	r3, [r3, #16]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d104      	bne.n	8006f34 <UART_Start_Receive_IT+0x6c>
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	22ff      	movs	r2, #255	; 0xff
 8006f2e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006f32:	e01b      	b.n	8006f6c <UART_Start_Receive_IT+0xa4>
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	227f      	movs	r2, #127	; 0x7f
 8006f38:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006f3c:	e016      	b.n	8006f6c <UART_Start_Receive_IT+0xa4>
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f46:	d10d      	bne.n	8006f64 <UART_Start_Receive_IT+0x9c>
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	691b      	ldr	r3, [r3, #16]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d104      	bne.n	8006f5a <UART_Start_Receive_IT+0x92>
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	227f      	movs	r2, #127	; 0x7f
 8006f54:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006f58:	e008      	b.n	8006f6c <UART_Start_Receive_IT+0xa4>
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	223f      	movs	r2, #63	; 0x3f
 8006f5e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006f62:	e003      	b.n	8006f6c <UART_Start_Receive_IT+0xa4>
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2222      	movs	r2, #34	; 0x22
 8006f78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	3308      	adds	r3, #8
 8006f82:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f86:	e853 3f00 	ldrex	r3, [r3]
 8006f8a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006f8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f8e:	f043 0301 	orr.w	r3, r3, #1
 8006f92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	3308      	adds	r3, #8
 8006f9c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006fa0:	673a      	str	r2, [r7, #112]	; 0x70
 8006fa2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006fa6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006fa8:	e841 2300 	strex	r3, r2, [r1]
 8006fac:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8006fae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d1e3      	bne.n	8006f7c <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fbc:	d153      	bne.n	8007066 <UART_Start_Receive_IT+0x19e>
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006fc4:	88fa      	ldrh	r2, [r7, #6]
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d34d      	bcc.n	8007066 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fd2:	d107      	bne.n	8006fe4 <UART_Start_Receive_IT+0x11c>
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d103      	bne.n	8006fe4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	4a4b      	ldr	r2, [pc, #300]	; (800710c <UART_Start_Receive_IT+0x244>)
 8006fe0:	671a      	str	r2, [r3, #112]	; 0x70
 8006fe2:	e002      	b.n	8006fea <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	4a4a      	ldr	r2, [pc, #296]	; (8007110 <UART_Start_Receive_IT+0x248>)
 8006fe8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d01a      	beq.n	8007030 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007000:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007002:	e853 3f00 	ldrex	r3, [r3]
 8007006:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800700a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800700e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	461a      	mov	r2, r3
 8007018:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800701c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800701e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007020:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007022:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007024:	e841 2300 	strex	r3, r2, [r1]
 8007028:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800702a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800702c:	2b00      	cmp	r3, #0
 800702e:	d1e4      	bne.n	8006ffa <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	3308      	adds	r3, #8
 8007036:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800703a:	e853 3f00 	ldrex	r3, [r3]
 800703e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007042:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007046:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	3308      	adds	r3, #8
 800704e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007050:	64ba      	str	r2, [r7, #72]	; 0x48
 8007052:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007054:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007056:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007058:	e841 2300 	strex	r3, r2, [r1]
 800705c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800705e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007060:	2b00      	cmp	r3, #0
 8007062:	d1e5      	bne.n	8007030 <UART_Start_Receive_IT+0x168>
 8007064:	e04a      	b.n	80070fc <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800706e:	d107      	bne.n	8007080 <UART_Start_Receive_IT+0x1b8>
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d103      	bne.n	8007080 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	4a26      	ldr	r2, [pc, #152]	; (8007114 <UART_Start_Receive_IT+0x24c>)
 800707c:	671a      	str	r2, [r3, #112]	; 0x70
 800707e:	e002      	b.n	8007086 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	4a25      	ldr	r2, [pc, #148]	; (8007118 <UART_Start_Receive_IT+0x250>)
 8007084:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2200      	movs	r2, #0
 800708a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	691b      	ldr	r3, [r3, #16]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d019      	beq.n	80070ca <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800709e:	e853 3f00 	ldrex	r3, [r3]
 80070a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80070aa:	677b      	str	r3, [r7, #116]	; 0x74
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	461a      	mov	r2, r3
 80070b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070b4:	637b      	str	r3, [r7, #52]	; 0x34
 80070b6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070bc:	e841 2300 	strex	r3, r2, [r1]
 80070c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80070c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d1e6      	bne.n	8007096 <UART_Start_Receive_IT+0x1ce>
 80070c8:	e018      	b.n	80070fc <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	e853 3f00 	ldrex	r3, [r3]
 80070d6:	613b      	str	r3, [r7, #16]
   return(result);
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	f043 0320 	orr.w	r3, r3, #32
 80070de:	67bb      	str	r3, [r7, #120]	; 0x78
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	461a      	mov	r2, r3
 80070e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070e8:	623b      	str	r3, [r7, #32]
 80070ea:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ec:	69f9      	ldr	r1, [r7, #28]
 80070ee:	6a3a      	ldr	r2, [r7, #32]
 80070f0:	e841 2300 	strex	r3, r2, [r1]
 80070f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d1e6      	bne.n	80070ca <UART_Start_Receive_IT+0x202>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80070fc:	2300      	movs	r3, #0
}
 80070fe:	4618      	mov	r0, r3
 8007100:	378c      	adds	r7, #140	; 0x8c
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr
 800710a:	bf00      	nop
 800710c:	08007825 	.word	0x08007825
 8007110:	0800752d 	.word	0x0800752d
 8007114:	080073cb 	.word	0x080073cb
 8007118:	0800726b 	.word	0x0800726b

0800711c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800711c:	b480      	push	{r7}
 800711e:	b095      	sub	sp, #84	; 0x54
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800712a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800712c:	e853 3f00 	ldrex	r3, [r3]
 8007130:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007134:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007138:	64fb      	str	r3, [r7, #76]	; 0x4c
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	461a      	mov	r2, r3
 8007140:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007142:	643b      	str	r3, [r7, #64]	; 0x40
 8007144:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007146:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007148:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800714a:	e841 2300 	strex	r3, r2, [r1]
 800714e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007152:	2b00      	cmp	r3, #0
 8007154:	d1e6      	bne.n	8007124 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	3308      	adds	r3, #8
 800715c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800715e:	6a3b      	ldr	r3, [r7, #32]
 8007160:	e853 3f00 	ldrex	r3, [r3]
 8007164:	61fb      	str	r3, [r7, #28]
   return(result);
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800716c:	f023 0301 	bic.w	r3, r3, #1
 8007170:	64bb      	str	r3, [r7, #72]	; 0x48
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	3308      	adds	r3, #8
 8007178:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800717a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800717c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007180:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007182:	e841 2300 	strex	r3, r2, [r1]
 8007186:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718a:	2b00      	cmp	r3, #0
 800718c:	d1e3      	bne.n	8007156 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007192:	2b01      	cmp	r3, #1
 8007194:	d118      	bne.n	80071c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	e853 3f00 	ldrex	r3, [r3]
 80071a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	f023 0310 	bic.w	r3, r3, #16
 80071aa:	647b      	str	r3, [r7, #68]	; 0x44
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	461a      	mov	r2, r3
 80071b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071b4:	61bb      	str	r3, [r7, #24]
 80071b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b8:	6979      	ldr	r1, [r7, #20]
 80071ba:	69ba      	ldr	r2, [r7, #24]
 80071bc:	e841 2300 	strex	r3, r2, [r1]
 80071c0:	613b      	str	r3, [r7, #16]
   return(result);
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d1e6      	bne.n	8007196 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2220      	movs	r2, #32
 80071cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	671a      	str	r2, [r3, #112]	; 0x70
}
 80071dc:	bf00      	nop
 80071de:	3754      	adds	r7, #84	; 0x54
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr

080071e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2200      	movs	r2, #0
 80071fa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2200      	movs	r2, #0
 8007202:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007206:	68f8      	ldr	r0, [r7, #12]
 8007208:	f7ff f996 	bl	8006538 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800720c:	bf00      	nop
 800720e:	3710      	adds	r7, #16
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b088      	sub	sp, #32
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	e853 3f00 	ldrex	r3, [r3]
 8007228:	60bb      	str	r3, [r7, #8]
   return(result);
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007230:	61fb      	str	r3, [r7, #28]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	461a      	mov	r2, r3
 8007238:	69fb      	ldr	r3, [r7, #28]
 800723a:	61bb      	str	r3, [r7, #24]
 800723c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800723e:	6979      	ldr	r1, [r7, #20]
 8007240:	69ba      	ldr	r2, [r7, #24]
 8007242:	e841 2300 	strex	r3, r2, [r1]
 8007246:	613b      	str	r3, [r7, #16]
   return(result);
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d1e6      	bne.n	800721c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2220      	movs	r2, #32
 8007252:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f7ff f961 	bl	8006524 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007262:	bf00      	nop
 8007264:	3720      	adds	r7, #32
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}

0800726a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800726a:	b580      	push	{r7, lr}
 800726c:	b096      	sub	sp, #88	; 0x58
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007278:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007282:	2b22      	cmp	r3, #34	; 0x22
 8007284:	f040 8095 	bne.w	80073b2 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007292:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007296:	b2d9      	uxtb	r1, r3
 8007298:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800729c:	b2da      	uxtb	r2, r3
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072a2:	400a      	ands	r2, r1
 80072a4:	b2d2      	uxtb	r2, r2
 80072a6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072ac:	1c5a      	adds	r2, r3, #1
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	3b01      	subs	r3, #1
 80072bc:	b29a      	uxth	r2, r3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d178      	bne.n	80073c2 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d8:	e853 3f00 	ldrex	r3, [r3]
 80072dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80072de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80072e4:	653b      	str	r3, [r7, #80]	; 0x50
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	461a      	mov	r2, r3
 80072ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072ee:	647b      	str	r3, [r7, #68]	; 0x44
 80072f0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80072f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072f6:	e841 2300 	strex	r3, r2, [r1]
 80072fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80072fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d1e6      	bne.n	80072d0 <UART_RxISR_8BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	3308      	adds	r3, #8
 8007308:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730c:	e853 3f00 	ldrex	r3, [r3]
 8007310:	623b      	str	r3, [r7, #32]
   return(result);
 8007312:	6a3b      	ldr	r3, [r7, #32]
 8007314:	f023 0301 	bic.w	r3, r3, #1
 8007318:	64fb      	str	r3, [r7, #76]	; 0x4c
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	3308      	adds	r3, #8
 8007320:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007322:	633a      	str	r2, [r7, #48]	; 0x30
 8007324:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007326:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007328:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800732a:	e841 2300 	strex	r3, r2, [r1]
 800732e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007332:	2b00      	cmp	r3, #0
 8007334:	d1e5      	bne.n	8007302 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2220      	movs	r2, #32
 800733a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007348:	2b01      	cmp	r3, #1
 800734a:	d12e      	bne.n	80073aa <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	e853 3f00 	ldrex	r3, [r3]
 800735e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f023 0310 	bic.w	r3, r3, #16
 8007366:	64bb      	str	r3, [r7, #72]	; 0x48
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	461a      	mov	r2, r3
 800736e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007370:	61fb      	str	r3, [r7, #28]
 8007372:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007374:	69b9      	ldr	r1, [r7, #24]
 8007376:	69fa      	ldr	r2, [r7, #28]
 8007378:	e841 2300 	strex	r3, r2, [r1]
 800737c:	617b      	str	r3, [r7, #20]
   return(result);
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d1e6      	bne.n	8007352 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	69db      	ldr	r3, [r3, #28]
 800738a:	f003 0310 	and.w	r3, r3, #16
 800738e:	2b10      	cmp	r3, #16
 8007390:	d103      	bne.n	800739a <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2210      	movs	r2, #16
 8007398:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80073a0:	4619      	mov	r1, r3
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f7ff f8d2 	bl	800654c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80073a8:	e00b      	b.n	80073c2 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f7f9 feba 	bl	8001124 <HAL_UART_RxCpltCallback>
}
 80073b0:	e007      	b.n	80073c2 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	699a      	ldr	r2, [r3, #24]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f042 0208 	orr.w	r2, r2, #8
 80073c0:	619a      	str	r2, [r3, #24]
}
 80073c2:	bf00      	nop
 80073c4:	3758      	adds	r7, #88	; 0x58
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}

080073ca <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b096      	sub	sp, #88	; 0x58
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80073d8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073e2:	2b22      	cmp	r3, #34	; 0x22
 80073e4:	f040 8095 	bne.w	8007512 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ee:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073f6:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80073f8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80073fc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007400:	4013      	ands	r3, r2
 8007402:	b29a      	uxth	r2, r3
 8007404:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007406:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800740c:	1c9a      	adds	r2, r3, #2
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007418:	b29b      	uxth	r3, r3
 800741a:	3b01      	subs	r3, #1
 800741c:	b29a      	uxth	r2, r3
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800742a:	b29b      	uxth	r3, r3
 800742c:	2b00      	cmp	r3, #0
 800742e:	d178      	bne.n	8007522 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007438:	e853 3f00 	ldrex	r3, [r3]
 800743c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800743e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007440:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007444:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	461a      	mov	r2, r3
 800744c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800744e:	643b      	str	r3, [r7, #64]	; 0x40
 8007450:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007452:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007454:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007456:	e841 2300 	strex	r3, r2, [r1]
 800745a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800745c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800745e:	2b00      	cmp	r3, #0
 8007460:	d1e6      	bne.n	8007430 <UART_RxISR_16BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	3308      	adds	r3, #8
 8007468:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800746a:	6a3b      	ldr	r3, [r7, #32]
 800746c:	e853 3f00 	ldrex	r3, [r3]
 8007470:	61fb      	str	r3, [r7, #28]
   return(result);
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	f023 0301 	bic.w	r3, r3, #1
 8007478:	64bb      	str	r3, [r7, #72]	; 0x48
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	3308      	adds	r3, #8
 8007480:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007482:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007484:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007486:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007488:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800748a:	e841 2300 	strex	r3, r2, [r1]
 800748e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007492:	2b00      	cmp	r3, #0
 8007494:	d1e5      	bne.n	8007462 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2220      	movs	r2, #32
 800749a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d12e      	bne.n	800750a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	e853 3f00 	ldrex	r3, [r3]
 80074be:	60bb      	str	r3, [r7, #8]
   return(result);
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	f023 0310 	bic.w	r3, r3, #16
 80074c6:	647b      	str	r3, [r7, #68]	; 0x44
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	461a      	mov	r2, r3
 80074ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074d0:	61bb      	str	r3, [r7, #24]
 80074d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d4:	6979      	ldr	r1, [r7, #20]
 80074d6:	69ba      	ldr	r2, [r7, #24]
 80074d8:	e841 2300 	strex	r3, r2, [r1]
 80074dc:	613b      	str	r3, [r7, #16]
   return(result);
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d1e6      	bne.n	80074b2 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	69db      	ldr	r3, [r3, #28]
 80074ea:	f003 0310 	and.w	r3, r3, #16
 80074ee:	2b10      	cmp	r3, #16
 80074f0:	d103      	bne.n	80074fa <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	2210      	movs	r2, #16
 80074f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007500:	4619      	mov	r1, r3
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f7ff f822 	bl	800654c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007508:	e00b      	b.n	8007522 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f7f9 fe0a 	bl	8001124 <HAL_UART_RxCpltCallback>
}
 8007510:	e007      	b.n	8007522 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	699a      	ldr	r2, [r3, #24]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f042 0208 	orr.w	r2, r2, #8
 8007520:	619a      	str	r2, [r3, #24]
}
 8007522:	bf00      	nop
 8007524:	3758      	adds	r7, #88	; 0x58
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}
	...

0800752c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b0a6      	sub	sp, #152	; 0x98
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800753a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	69db      	ldr	r3, [r3, #28]
 8007544:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007562:	2b22      	cmp	r3, #34	; 0x22
 8007564:	f040 814f 	bne.w	8007806 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800756e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007572:	e0f6      	b.n	8007762 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800757e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8007582:	b2d9      	uxtb	r1, r3
 8007584:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8007588:	b2da      	uxtb	r2, r3
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800758e:	400a      	ands	r2, r1
 8007590:	b2d2      	uxtb	r2, r2
 8007592:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007598:	1c5a      	adds	r2, r3, #1
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	3b01      	subs	r3, #1
 80075a8:	b29a      	uxth	r2, r3
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	69db      	ldr	r3, [r3, #28]
 80075b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80075ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80075be:	f003 0307 	and.w	r3, r3, #7
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d053      	beq.n	800766e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80075c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80075ca:	f003 0301 	and.w	r3, r3, #1
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d011      	beq.n	80075f6 <UART_RxISR_8BIT_FIFOEN+0xca>
 80075d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80075d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d00b      	beq.n	80075f6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	2201      	movs	r2, #1
 80075e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075ec:	f043 0201 	orr.w	r2, r3, #1
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80075fa:	f003 0302 	and.w	r3, r3, #2
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d011      	beq.n	8007626 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007602:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007606:	f003 0301 	and.w	r3, r3, #1
 800760a:	2b00      	cmp	r3, #0
 800760c:	d00b      	beq.n	8007626 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2202      	movs	r2, #2
 8007614:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800761c:	f043 0204 	orr.w	r2, r3, #4
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007626:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800762a:	f003 0304 	and.w	r3, r3, #4
 800762e:	2b00      	cmp	r3, #0
 8007630:	d011      	beq.n	8007656 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007632:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007636:	f003 0301 	and.w	r3, r3, #1
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00b      	beq.n	8007656 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	2204      	movs	r2, #4
 8007644:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800764c:	f043 0202 	orr.w	r2, r3, #2
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800765c:	2b00      	cmp	r3, #0
 800765e:	d006      	beq.n	800766e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f7fe ff69 	bl	8006538 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007674:	b29b      	uxth	r3, r3
 8007676:	2b00      	cmp	r3, #0
 8007678:	d173      	bne.n	8007762 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007680:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007682:	e853 3f00 	ldrex	r3, [r3]
 8007686:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8007688:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800768a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800768e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	461a      	mov	r2, r3
 8007698:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800769c:	66bb      	str	r3, [r7, #104]	; 0x68
 800769e:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80076a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80076a4:	e841 2300 	strex	r3, r2, [r1]
 80076a8:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80076aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d1e4      	bne.n	800767a <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	3308      	adds	r3, #8
 80076b6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076ba:	e853 3f00 	ldrex	r3, [r3]
 80076be:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80076c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076c6:	f023 0301 	bic.w	r3, r3, #1
 80076ca:	67fb      	str	r3, [r7, #124]	; 0x7c
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	3308      	adds	r3, #8
 80076d2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80076d4:	657a      	str	r2, [r7, #84]	; 0x54
 80076d6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80076da:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80076dc:	e841 2300 	strex	r3, r2, [r1]
 80076e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80076e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d1e3      	bne.n	80076b0 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2220      	movs	r2, #32
 80076ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d12e      	bne.n	800775c <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800770a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800770c:	e853 3f00 	ldrex	r3, [r3]
 8007710:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007714:	f023 0310 	bic.w	r3, r3, #16
 8007718:	67bb      	str	r3, [r7, #120]	; 0x78
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	461a      	mov	r2, r3
 8007720:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007722:	643b      	str	r3, [r7, #64]	; 0x40
 8007724:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007726:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007728:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800772a:	e841 2300 	strex	r3, r2, [r1]
 800772e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007732:	2b00      	cmp	r3, #0
 8007734:	d1e6      	bne.n	8007704 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	69db      	ldr	r3, [r3, #28]
 800773c:	f003 0310 	and.w	r3, r3, #16
 8007740:	2b10      	cmp	r3, #16
 8007742:	d103      	bne.n	800774c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	2210      	movs	r2, #16
 800774a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007752:	4619      	mov	r1, r3
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f7fe fef9 	bl	800654c <HAL_UARTEx_RxEventCallback>
 800775a:	e002      	b.n	8007762 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f7f9 fce1 	bl	8001124 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007762:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007766:	2b00      	cmp	r3, #0
 8007768:	d006      	beq.n	8007778 <UART_RxISR_8BIT_FIFOEN+0x24c>
 800776a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800776e:	f003 0320 	and.w	r3, r3, #32
 8007772:	2b00      	cmp	r3, #0
 8007774:	f47f aefe 	bne.w	8007574 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800777e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007782:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8007786:	2b00      	cmp	r3, #0
 8007788:	d045      	beq.n	8007816 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007790:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007794:	429a      	cmp	r2, r3
 8007796:	d23e      	bcs.n	8007816 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	3308      	adds	r3, #8
 800779e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a0:	6a3b      	ldr	r3, [r7, #32]
 80077a2:	e853 3f00 	ldrex	r3, [r3]
 80077a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077ae:	673b      	str	r3, [r7, #112]	; 0x70
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	3308      	adds	r3, #8
 80077b6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80077b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80077ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077c0:	e841 2300 	strex	r3, r2, [r1]
 80077c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d1e5      	bne.n	8007798 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	4a14      	ldr	r2, [pc, #80]	; (8007820 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80077d0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	e853 3f00 	ldrex	r3, [r3]
 80077de:	60bb      	str	r3, [r7, #8]
   return(result);
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	f043 0320 	orr.w	r3, r3, #32
 80077e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	461a      	mov	r2, r3
 80077ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077f0:	61bb      	str	r3, [r7, #24]
 80077f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f4:	6979      	ldr	r1, [r7, #20]
 80077f6:	69ba      	ldr	r2, [r7, #24]
 80077f8:	e841 2300 	strex	r3, r2, [r1]
 80077fc:	613b      	str	r3, [r7, #16]
   return(result);
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d1e6      	bne.n	80077d2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007804:	e007      	b.n	8007816 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	699a      	ldr	r2, [r3, #24]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f042 0208 	orr.w	r2, r2, #8
 8007814:	619a      	str	r2, [r3, #24]
}
 8007816:	bf00      	nop
 8007818:	3798      	adds	r7, #152	; 0x98
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	0800726b 	.word	0x0800726b

08007824 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b0a8      	sub	sp, #160	; 0xa0
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007832:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	69db      	ldr	r3, [r3, #28]
 800783c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800785a:	2b22      	cmp	r3, #34	; 0x22
 800785c:	f040 8153 	bne.w	8007b06 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007866:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800786a:	e0fa      	b.n	8007a62 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007872:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800787a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800787e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8007882:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007886:	4013      	ands	r3, r2
 8007888:	b29a      	uxth	r2, r3
 800788a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800788e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007894:	1c9a      	adds	r2, r3, #2
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	3b01      	subs	r3, #1
 80078a4:	b29a      	uxth	r2, r3
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	69db      	ldr	r3, [r3, #28]
 80078b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80078b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80078ba:	f003 0307 	and.w	r3, r3, #7
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d053      	beq.n	800796a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80078c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80078c6:	f003 0301 	and.w	r3, r3, #1
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d011      	beq.n	80078f2 <UART_RxISR_16BIT_FIFOEN+0xce>
 80078ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80078d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d00b      	beq.n	80078f2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	2201      	movs	r2, #1
 80078e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078e8:	f043 0201 	orr.w	r2, r3, #1
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80078f6:	f003 0302 	and.w	r3, r3, #2
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d011      	beq.n	8007922 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80078fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007902:	f003 0301 	and.w	r3, r3, #1
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00b      	beq.n	8007922 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	2202      	movs	r2, #2
 8007910:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007918:	f043 0204 	orr.w	r2, r3, #4
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007922:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007926:	f003 0304 	and.w	r3, r3, #4
 800792a:	2b00      	cmp	r3, #0
 800792c:	d011      	beq.n	8007952 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800792e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007932:	f003 0301 	and.w	r3, r3, #1
 8007936:	2b00      	cmp	r3, #0
 8007938:	d00b      	beq.n	8007952 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	2204      	movs	r2, #4
 8007940:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007948:	f043 0202 	orr.w	r2, r3, #2
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007958:	2b00      	cmp	r3, #0
 800795a:	d006      	beq.n	800796a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f7fe fdeb 	bl	8006538 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2200      	movs	r2, #0
 8007966:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007970:	b29b      	uxth	r3, r3
 8007972:	2b00      	cmp	r3, #0
 8007974:	d175      	bne.n	8007a62 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800797c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800797e:	e853 3f00 	ldrex	r3, [r3]
 8007982:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007984:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007986:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800798a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	461a      	mov	r2, r3
 8007994:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007998:	66fb      	str	r3, [r7, #108]	; 0x6c
 800799a:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800799c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800799e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80079a0:	e841 2300 	strex	r3, r2, [r1]
 80079a4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80079a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d1e4      	bne.n	8007976 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	3308      	adds	r3, #8
 80079b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079b6:	e853 3f00 	ldrex	r3, [r3]
 80079ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80079bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079c2:	f023 0301 	bic.w	r3, r3, #1
 80079c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	3308      	adds	r3, #8
 80079d0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80079d4:	65ba      	str	r2, [r7, #88]	; 0x58
 80079d6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80079da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80079dc:	e841 2300 	strex	r3, r2, [r1]
 80079e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80079e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d1e1      	bne.n	80079ac <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2220      	movs	r2, #32
 80079ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d12e      	bne.n	8007a5c <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a0c:	e853 3f00 	ldrex	r3, [r3]
 8007a10:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a14:	f023 0310 	bic.w	r3, r3, #16
 8007a18:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	461a      	mov	r2, r3
 8007a20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007a22:	647b      	str	r3, [r7, #68]	; 0x44
 8007a24:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a2a:	e841 2300 	strex	r3, r2, [r1]
 8007a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d1e6      	bne.n	8007a04 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	69db      	ldr	r3, [r3, #28]
 8007a3c:	f003 0310 	and.w	r3, r3, #16
 8007a40:	2b10      	cmp	r3, #16
 8007a42:	d103      	bne.n	8007a4c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	2210      	movs	r2, #16
 8007a4a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007a52:	4619      	mov	r1, r3
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f7fe fd79 	bl	800654c <HAL_UARTEx_RxEventCallback>
 8007a5a:	e002      	b.n	8007a62 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f7f9 fb61 	bl	8001124 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007a62:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d006      	beq.n	8007a78 <UART_RxISR_16BIT_FIFOEN+0x254>
 8007a6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007a6e:	f003 0320 	and.w	r3, r3, #32
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	f47f aefa 	bne.w	800786c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a7e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007a82:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d045      	beq.n	8007b16 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007a90:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d23e      	bcs.n	8007b16 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	3308      	adds	r3, #8
 8007a9e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa2:	e853 3f00 	ldrex	r3, [r3]
 8007aa6:	623b      	str	r3, [r7, #32]
   return(result);
 8007aa8:	6a3b      	ldr	r3, [r7, #32]
 8007aaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007aae:	677b      	str	r3, [r7, #116]	; 0x74
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	3308      	adds	r3, #8
 8007ab6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007ab8:	633a      	str	r2, [r7, #48]	; 0x30
 8007aba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007abc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007abe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ac0:	e841 2300 	strex	r3, r2, [r1]
 8007ac4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d1e5      	bne.n	8007a98 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	4a14      	ldr	r2, [pc, #80]	; (8007b20 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8007ad0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	e853 3f00 	ldrex	r3, [r3]
 8007ade:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f043 0320 	orr.w	r3, r3, #32
 8007ae6:	673b      	str	r3, [r7, #112]	; 0x70
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	461a      	mov	r2, r3
 8007aee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007af0:	61fb      	str	r3, [r7, #28]
 8007af2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af4:	69b9      	ldr	r1, [r7, #24]
 8007af6:	69fa      	ldr	r2, [r7, #28]
 8007af8:	e841 2300 	strex	r3, r2, [r1]
 8007afc:	617b      	str	r3, [r7, #20]
   return(result);
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d1e6      	bne.n	8007ad2 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007b04:	e007      	b.n	8007b16 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	699a      	ldr	r2, [r3, #24]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f042 0208 	orr.w	r2, r2, #8
 8007b14:	619a      	str	r2, [r3, #24]
}
 8007b16:	bf00      	nop
 8007b18:	37a0      	adds	r7, #160	; 0xa0
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	080073cb 	.word	0x080073cb

08007b24 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007b2c:	bf00      	nop
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007b40:	bf00      	nop
 8007b42:	370c      	adds	r7, #12
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007b54:	bf00      	nop
 8007b56:	370c      	adds	r7, #12
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b085      	sub	sp, #20
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d101      	bne.n	8007b76 <HAL_UARTEx_DisableFifoMode+0x16>
 8007b72:	2302      	movs	r3, #2
 8007b74:	e027      	b.n	8007bc6 <HAL_UARTEx_DisableFifoMode+0x66>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2224      	movs	r2, #36	; 0x24
 8007b82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f022 0201 	bic.w	r2, r2, #1
 8007b9c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007ba4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	68fa      	ldr	r2, [r7, #12]
 8007bb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2220      	movs	r2, #32
 8007bb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007bc4:	2300      	movs	r3, #0
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3714      	adds	r7, #20
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr

08007bd2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007bd2:	b580      	push	{r7, lr}
 8007bd4:	b084      	sub	sp, #16
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
 8007bda:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	d101      	bne.n	8007bea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007be6:	2302      	movs	r3, #2
 8007be8:	e02d      	b.n	8007c46 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2201      	movs	r2, #1
 8007bee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2224      	movs	r2, #36	; 0x24
 8007bf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f022 0201 	bic.w	r2, r2, #1
 8007c10:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	683a      	ldr	r2, [r7, #0]
 8007c22:	430a      	orrs	r2, r1
 8007c24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 f850 	bl	8007ccc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	68fa      	ldr	r2, [r7, #12]
 8007c32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2220      	movs	r2, #32
 8007c38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3710      	adds	r7, #16
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b084      	sub	sp, #16
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
 8007c56:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d101      	bne.n	8007c66 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007c62:	2302      	movs	r3, #2
 8007c64:	e02d      	b.n	8007cc2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2201      	movs	r2, #1
 8007c6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2224      	movs	r2, #36	; 0x24
 8007c72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f022 0201 	bic.w	r2, r2, #1
 8007c8c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	683a      	ldr	r2, [r7, #0]
 8007c9e:	430a      	orrs	r2, r1
 8007ca0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f812 	bl	8007ccc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2220      	movs	r2, #32
 8007cb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3710      	adds	r7, #16
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
	...

08007ccc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b085      	sub	sp, #20
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d108      	bne.n	8007cee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007cec:	e031      	b.n	8007d52 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007cee:	2308      	movs	r3, #8
 8007cf0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007cf2:	2308      	movs	r3, #8
 8007cf4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	0e5b      	lsrs	r3, r3, #25
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	f003 0307 	and.w	r3, r3, #7
 8007d04:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	0f5b      	lsrs	r3, r3, #29
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	f003 0307 	and.w	r3, r3, #7
 8007d14:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007d16:	7bbb      	ldrb	r3, [r7, #14]
 8007d18:	7b3a      	ldrb	r2, [r7, #12]
 8007d1a:	4911      	ldr	r1, [pc, #68]	; (8007d60 <UARTEx_SetNbDataToProcess+0x94>)
 8007d1c:	5c8a      	ldrb	r2, [r1, r2]
 8007d1e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007d22:	7b3a      	ldrb	r2, [r7, #12]
 8007d24:	490f      	ldr	r1, [pc, #60]	; (8007d64 <UARTEx_SetNbDataToProcess+0x98>)
 8007d26:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007d28:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d2c:	b29a      	uxth	r2, r3
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d34:	7bfb      	ldrb	r3, [r7, #15]
 8007d36:	7b7a      	ldrb	r2, [r7, #13]
 8007d38:	4909      	ldr	r1, [pc, #36]	; (8007d60 <UARTEx_SetNbDataToProcess+0x94>)
 8007d3a:	5c8a      	ldrb	r2, [r1, r2]
 8007d3c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007d40:	7b7a      	ldrb	r2, [r7, #13]
 8007d42:	4908      	ldr	r1, [pc, #32]	; (8007d64 <UARTEx_SetNbDataToProcess+0x98>)
 8007d44:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d46:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d4a:	b29a      	uxth	r2, r3
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007d52:	bf00      	nop
 8007d54:	3714      	adds	r7, #20
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr
 8007d5e:	bf00      	nop
 8007d60:	0800ce60 	.word	0x0800ce60
 8007d64:	0800ce68 	.word	0x0800ce68

08007d68 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b084      	sub	sp, #16
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007d72:	2300      	movs	r3, #0
 8007d74:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8007d76:	6839      	ldr	r1, [r7, #0]
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f001 fcb2 	bl	80096e2 <VL53L0X_get_offset_calibration_data_micro_meter>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8007d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3710      	adds	r7, #16
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}
	...

08007d90 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8007d90:	b5b0      	push	{r4, r5, r7, lr}
 8007d92:	b096      	sub	sp, #88	; 0x58
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8007d9e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d107      	bne.n	8007db6 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8007da6:	2200      	movs	r2, #0
 8007da8:	2188      	movs	r1, #136	; 0x88
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f004 feaa 	bl	800cb04 <VL53L0X_WrByte>
 8007db0:	4603      	mov	r3, r0
 8007db2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007dc4:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007dce:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	4a9e      	ldr	r2, [pc, #632]	; (8008050 <VL53L0X_DataInit+0x2c0>)
 8007dd6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4a9d      	ldr	r2, [pc, #628]	; (8008054 <VL53L0X_DataInit+0x2c4>)
 8007dde:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8007de8:	f107 0310 	add.w	r3, r7, #16
 8007dec:	4619      	mov	r1, r3
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 fac2 	bl	8008378 <VL53L0X_GetDeviceParameters>
 8007df4:	4603      	mov	r3, r0
 8007df6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8007dfa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d112      	bne.n	8007e28 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8007e02:	2300      	movs	r3, #0
 8007e04:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8007e06:	2300      	movs	r3, #0
 8007e08:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f103 0410 	add.w	r4, r3, #16
 8007e10:	f107 0510 	add.w	r5, r7, #16
 8007e14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e20:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007e24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2264      	movs	r2, #100	; 0x64
 8007e2c:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f44f 7261 	mov.w	r2, #900	; 0x384
 8007e36:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8007e40:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8007e4a:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2201      	movs	r2, #1
 8007e52:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8007e56:	2201      	movs	r2, #1
 8007e58:	2180      	movs	r1, #128	; 0x80
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f004 fe52 	bl	800cb04 <VL53L0X_WrByte>
 8007e60:	4603      	mov	r3, r0
 8007e62:	461a      	mov	r2, r3
 8007e64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007e6e:	2201      	movs	r2, #1
 8007e70:	21ff      	movs	r1, #255	; 0xff
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f004 fe46 	bl	800cb04 <VL53L0X_WrByte>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e80:	4313      	orrs	r3, r2
 8007e82:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007e86:	2200      	movs	r2, #0
 8007e88:	2100      	movs	r1, #0
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f004 fe3a 	bl	800cb04 <VL53L0X_WrByte>
 8007e90:	4603      	mov	r3, r0
 8007e92:	461a      	mov	r2, r3
 8007e94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8007e9e:	f107 030f 	add.w	r3, r7, #15
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	2191      	movs	r1, #145	; 0x91
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f004 feae 	bl	800cc08 <VL53L0X_RdByte>
 8007eac:	4603      	mov	r3, r0
 8007eae:	461a      	mov	r2, r3
 8007eb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8007eba:	7bfa      	ldrb	r2, [r7, #15]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	2100      	movs	r1, #0
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f004 fe1c 	bl	800cb04 <VL53L0X_WrByte>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	461a      	mov	r2, r3
 8007ed0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007eda:	2200      	movs	r2, #0
 8007edc:	21ff      	movs	r1, #255	; 0xff
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f004 fe10 	bl	800cb04 <VL53L0X_WrByte>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007eec:	4313      	orrs	r3, r2
 8007eee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	2180      	movs	r1, #128	; 0x80
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f004 fe04 	bl	800cb04 <VL53L0X_WrByte>
 8007efc:	4603      	mov	r3, r0
 8007efe:	461a      	mov	r2, r3
 8007f00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007f04:	4313      	orrs	r3, r2
 8007f06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	653b      	str	r3, [r7, #80]	; 0x50
 8007f0e:	e014      	b.n	8007f3a <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8007f10:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d114      	bne.n	8007f42 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8007f18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	4619      	mov	r1, r3
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 fd35 	bl	8008990 <VL53L0X_SetLimitCheckEnable>
 8007f26:	4603      	mov	r3, r0
 8007f28:	461a      	mov	r2, r3
 8007f2a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8007f34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f36:	3301      	adds	r3, #1
 8007f38:	653b      	str	r3, [r7, #80]	; 0x50
 8007f3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f3c:	2b05      	cmp	r3, #5
 8007f3e:	dde7      	ble.n	8007f10 <VL53L0X_DataInit+0x180>
 8007f40:	e000      	b.n	8007f44 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8007f42:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8007f44:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d107      	bne.n	8007f5c <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	2102      	movs	r1, #2
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f000 fd1d 	bl	8008990 <VL53L0X_SetLimitCheckEnable>
 8007f56:	4603      	mov	r3, r0
 8007f58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8007f5c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d107      	bne.n	8007f74 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8007f64:	2200      	movs	r2, #0
 8007f66:	2103      	movs	r1, #3
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 fd11 	bl	8008990 <VL53L0X_SetLimitCheckEnable>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8007f74:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d107      	bne.n	8007f8c <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	2104      	movs	r1, #4
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 fd05 	bl	8008990 <VL53L0X_SetLimitCheckEnable>
 8007f86:	4603      	mov	r3, r0
 8007f88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8007f8c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d107      	bne.n	8007fa4 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8007f94:	2200      	movs	r2, #0
 8007f96:	2105      	movs	r1, #5
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 fcf9 	bl	8008990 <VL53L0X_SetLimitCheckEnable>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8007fa4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d108      	bne.n	8007fbe <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8007fac:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8007fb0:	2100      	movs	r1, #0
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 fd9c 	bl	8008af0 <VL53L0X_SetLimitCheckValue>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007fbe:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d108      	bne.n	8007fd8 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8007fc6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007fca:	2101      	movs	r1, #1
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 fd8f 	bl	8008af0 <VL53L0X_SetLimitCheckValue>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007fd8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d108      	bne.n	8007ff2 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8007fe0:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8007fe4:	2102      	movs	r1, #2
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 fd82 	bl	8008af0 <VL53L0X_SetLimitCheckValue>
 8007fec:	4603      	mov	r3, r0
 8007fee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007ff2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d107      	bne.n	800800a <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	2103      	movs	r1, #3
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 fd76 	bl	8008af0 <VL53L0X_SetLimitCheckValue>
 8008004:	4603      	mov	r3, r0
 8008006:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800800a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800800e:	2b00      	cmp	r3, #0
 8008010:	d10f      	bne.n	8008032 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	22ff      	movs	r2, #255	; 0xff
 8008016:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800801a:	22ff      	movs	r2, #255	; 0xff
 800801c:	2101      	movs	r1, #1
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f004 fd70 	bl	800cb04 <VL53L0X_WrByte>
 8008024:	4603      	mov	r3, r0
 8008026:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2201      	movs	r2, #1
 800802e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8008032:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008036:	2b00      	cmp	r3, #0
 8008038:	d103      	bne.n	8008042 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2200      	movs	r2, #0
 800803e:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8008042:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8008046:	4618      	mov	r0, r3
 8008048:	3758      	adds	r7, #88	; 0x58
 800804a:	46bd      	mov	sp, r7
 800804c:	bdb0      	pop	{r4, r5, r7, pc}
 800804e:	bf00      	nop
 8008050:	00016b85 	.word	0x00016b85
 8008054:	000970a4 	.word	0x000970a4

08008058 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8008058:	b5b0      	push	{r4, r5, r7, lr}
 800805a:	b09e      	sub	sp, #120	; 0x78
 800805c:	af02      	add	r7, sp, #8
 800805e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008060:	2300      	movs	r3, #0
 8008062:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8008066:	f107 031c 	add.w	r3, r7, #28
 800806a:	2240      	movs	r2, #64	; 0x40
 800806c:	2100      	movs	r1, #0
 800806e:	4618      	mov	r0, r3
 8008070:	f004 feaa 	bl	800cdc8 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8008074:	2300      	movs	r3, #0
 8008076:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8008078:	2300      	movs	r3, #0
 800807a:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 800807c:	2300      	movs	r3, #0
 800807e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8008082:	2300      	movs	r3, #0
 8008084:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8008086:	2300      	movs	r3, #0
 8008088:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 800808a:	2300      	movs	r3, #0
 800808c:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 800808e:	2300      	movs	r3, #0
 8008090:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8008094:	2101      	movs	r1, #1
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f002 fa79 	bl	800a58e <VL53L0X_get_info_from_device>
 800809c:	4603      	mov	r3, r0
 800809e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 80080a8:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80080b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 80080b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d80d      	bhi.n	80080d8 <VL53L0X_StaticInit+0x80>
 80080bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d102      	bne.n	80080ca <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 80080c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080c6:	2b20      	cmp	r3, #32
 80080c8:	d806      	bhi.n	80080d8 <VL53L0X_StaticInit+0x80>
 80080ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d10e      	bne.n	80080f0 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 80080d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080d4:	2b0c      	cmp	r3, #12
 80080d6:	d90b      	bls.n	80080f0 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 80080d8:	f107 0218 	add.w	r2, r7, #24
 80080dc:	f107 0314 	add.w	r3, r7, #20
 80080e0:	4619      	mov	r1, r3
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f001 fcf8 	bl	8009ad8 <VL53L0X_perform_ref_spad_management>
 80080e8:	4603      	mov	r3, r0
 80080ea:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80080ee:	e009      	b.n	8008104 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 80080f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80080f4:	461a      	mov	r2, r3
 80080f6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f001 fef9 	bl	8009ef0 <VL53L0X_set_reference_spads>
 80080fe:	4603      	mov	r3, r0
 8008100:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8008104:	4b94      	ldr	r3, [pc, #592]	; (8008358 <VL53L0X_StaticInit+0x300>)
 8008106:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8008108:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800810c:	2b00      	cmp	r3, #0
 800810e:	d10f      	bne.n	8008130 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8008116:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 800811a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800811e:	2b00      	cmp	r3, #0
 8008120:	d104      	bne.n	800812c <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8008128:	66bb      	str	r3, [r7, #104]	; 0x68
 800812a:	e001      	b.n	8008130 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 800812c:	4b8a      	ldr	r3, [pc, #552]	; (8008358 <VL53L0X_StaticInit+0x300>)
 800812e:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8008130:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008134:	2b00      	cmp	r3, #0
 8008136:	d106      	bne.n	8008146 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8008138:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f003 fdcc 	bl	800bcd8 <VL53L0X_load_tuning_settings>
 8008140:	4603      	mov	r3, r0
 8008142:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8008146:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800814a:	2b00      	cmp	r3, #0
 800814c:	d10a      	bne.n	8008164 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 800814e:	2300      	movs	r3, #0
 8008150:	9300      	str	r3, [sp, #0]
 8008152:	2304      	movs	r3, #4
 8008154:	2200      	movs	r2, #0
 8008156:	2100      	movs	r1, #0
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f001 f8f1 	bl	8009340 <VL53L0X_SetGpioConfig>
 800815e:	4603      	mov	r3, r0
 8008160:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008164:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008168:	2b00      	cmp	r3, #0
 800816a:	d121      	bne.n	80081b0 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800816c:	2201      	movs	r2, #1
 800816e:	21ff      	movs	r1, #255	; 0xff
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f004 fcc7 	bl	800cb04 <VL53L0X_WrByte>
 8008176:	4603      	mov	r3, r0
 8008178:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 800817c:	f107 031a 	add.w	r3, r7, #26
 8008180:	461a      	mov	r2, r3
 8008182:	2184      	movs	r1, #132	; 0x84
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f004 fd69 	bl	800cc5c <VL53L0X_RdWord>
 800818a:	4603      	mov	r3, r0
 800818c:	461a      	mov	r2, r3
 800818e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008192:	4313      	orrs	r3, r2
 8008194:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008198:	2200      	movs	r2, #0
 800819a:	21ff      	movs	r1, #255	; 0xff
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f004 fcb1 	bl	800cb04 <VL53L0X_WrByte>
 80081a2:	4603      	mov	r3, r0
 80081a4:	461a      	mov	r2, r3
 80081a6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80081aa:	4313      	orrs	r3, r2
 80081ac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80081b0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d105      	bne.n	80081c4 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 80081b8:	8b7b      	ldrh	r3, [r7, #26]
 80081ba:	011b      	lsls	r3, r3, #4
 80081bc:	461a      	mov	r2, r3
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 80081c4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d108      	bne.n	80081de <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80081cc:	f107 031c 	add.w	r3, r7, #28
 80081d0:	4619      	mov	r1, r3
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 f8d0 	bl	8008378 <VL53L0X_GetDeviceParameters>
 80081d8:	4603      	mov	r3, r0
 80081da:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 80081de:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d110      	bne.n	8008208 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 80081e6:	f107 0319 	add.w	r3, r7, #25
 80081ea:	4619      	mov	r1, r3
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 f992 	bl	8008516 <VL53L0X_GetFractionEnable>
 80081f2:	4603      	mov	r3, r0
 80081f4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 80081f8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d103      	bne.n	8008208 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8008200:	7e7a      	ldrb	r2, [r7, #25]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8008208:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800820c:	2b00      	cmp	r3, #0
 800820e:	d10e      	bne.n	800822e <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f103 0410 	add.w	r4, r3, #16
 8008216:	f107 051c 	add.w	r5, r7, #28
 800821a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800821c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800821e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008220:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008222:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008224:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008226:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800822a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 800822e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008232:	2b00      	cmp	r3, #0
 8008234:	d111      	bne.n	800825a <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8008236:	f107 0319 	add.w	r3, r7, #25
 800823a:	461a      	mov	r2, r3
 800823c:	2101      	movs	r1, #1
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f004 fce2 	bl	800cc08 <VL53L0X_RdByte>
 8008244:	4603      	mov	r3, r0
 8008246:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 800824a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800824e:	2b00      	cmp	r3, #0
 8008250:	d103      	bne.n	800825a <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8008252:	7e7a      	ldrb	r2, [r7, #25]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 800825a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800825e:	2b00      	cmp	r3, #0
 8008260:	d107      	bne.n	8008272 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8008262:	2200      	movs	r2, #0
 8008264:	2100      	movs	r1, #0
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 f9ca 	bl	8008600 <VL53L0X_SetSequenceStepEnable>
 800826c:	4603      	mov	r3, r0
 800826e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8008272:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008276:	2b00      	cmp	r3, #0
 8008278:	d107      	bne.n	800828a <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800827a:	2200      	movs	r2, #0
 800827c:	2102      	movs	r1, #2
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 f9be 	bl	8008600 <VL53L0X_SetSequenceStepEnable>
 8008284:	4603      	mov	r3, r0
 8008286:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 800828a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800828e:	2b00      	cmp	r3, #0
 8008290:	d103      	bne.n	800829a <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2203      	movs	r2, #3
 8008296:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800829a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d109      	bne.n	80082b6 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 80082a2:	f107 0313 	add.w	r3, r7, #19
 80082a6:	461a      	mov	r2, r3
 80082a8:	2100      	movs	r1, #0
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 f990 	bl	80085d0 <VL53L0X_GetVcselPulsePeriod>
 80082b0:	4603      	mov	r3, r0
 80082b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80082b6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d103      	bne.n	80082c6 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80082be:	7cfa      	ldrb	r2, [r7, #19]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80082c6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d109      	bne.n	80082e2 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 80082ce:	f107 0313 	add.w	r3, r7, #19
 80082d2:	461a      	mov	r2, r3
 80082d4:	2101      	movs	r1, #1
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 f97a 	bl	80085d0 <VL53L0X_GetVcselPulsePeriod>
 80082dc:	4603      	mov	r3, r0
 80082de:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80082e2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d103      	bne.n	80082f2 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80082ea:	7cfa      	ldrb	r2, [r7, #19]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80082f2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d109      	bne.n	800830e <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 80082fa:	f107 030c 	add.w	r3, r7, #12
 80082fe:	461a      	mov	r2, r3
 8008300:	2103      	movs	r1, #3
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f002 fec4 	bl	800b090 <get_sequence_step_timeout>
 8008308:	4603      	mov	r3, r0
 800830a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800830e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008312:	2b00      	cmp	r3, #0
 8008314:	d103      	bne.n	800831e <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008316:	68fa      	ldr	r2, [r7, #12]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800831e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008322:	2b00      	cmp	r3, #0
 8008324:	d109      	bne.n	800833a <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8008326:	f107 030c 	add.w	r3, r7, #12
 800832a:	461a      	mov	r2, r3
 800832c:	2104      	movs	r1, #4
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f002 feae 	bl	800b090 <get_sequence_step_timeout>
 8008334:	4603      	mov	r3, r0
 8008336:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800833a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800833e:	2b00      	cmp	r3, #0
 8008340:	d103      	bne.n	800834a <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008342:	68fa      	ldr	r2, [r7, #12]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800834a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800834e:	4618      	mov	r0, r3
 8008350:	3770      	adds	r7, #112	; 0x70
 8008352:	46bd      	mov	sp, r7
 8008354:	bdb0      	pop	{r4, r5, r7, pc}
 8008356:	bf00      	nop
 8008358:	20000010 	.word	0x20000010

0800835c <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 800835c:	b480      	push	{r7}
 800835e:	b085      	sub	sp, #20
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8008364:	239d      	movs	r3, #157	; 0x9d
 8008366:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 8008368:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800836c:	4618      	mov	r0, r3
 800836e:	3714      	adds	r7, #20
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008382:	2300      	movs	r3, #0
 8008384:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	4619      	mov	r1, r3
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 f8b0 	bl	80084f0 <VL53L0X_GetDeviceMode>
 8008390:	4603      	mov	r3, r0
 8008392:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008394:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d107      	bne.n	80083ac <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	3308      	adds	r3, #8
 80083a0:	4619      	mov	r1, r3
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 fa78 	bl	8008898 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 80083a8:	4603      	mov	r3, r0
 80083aa:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 80083ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d102      	bne.n	80083ba <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	2200      	movs	r2, #0
 80083b8:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 80083ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d107      	bne.n	80083d2 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	3310      	adds	r3, #16
 80083c6:	4619      	mov	r1, r3
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f000 faae 	bl	800892a <VL53L0X_GetXTalkCompensationRateMegaCps>
 80083ce:	4603      	mov	r3, r0
 80083d0:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 80083d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d107      	bne.n	80083ea <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	3314      	adds	r3, #20
 80083de:	4619      	mov	r1, r3
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f7ff fcc1 	bl	8007d68 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 80083e6:	4603      	mov	r3, r0
 80083e8:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 80083ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d134      	bne.n	800845c <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80083f2:	2300      	movs	r3, #0
 80083f4:	60bb      	str	r3, [r7, #8]
 80083f6:	e02a      	b.n	800844e <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80083f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d12a      	bne.n	8008456 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	b299      	uxth	r1, r3
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	3308      	adds	r3, #8
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	683a      	ldr	r2, [r7, #0]
 800840c:	4413      	add	r3, r2
 800840e:	3304      	adds	r3, #4
 8008410:	461a      	mov	r2, r3
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 fbce 	bl	8008bb4 <VL53L0X_GetLimitCheckValue>
 8008418:	4603      	mov	r3, r0
 800841a:	461a      	mov	r2, r3
 800841c:	7bfb      	ldrb	r3, [r7, #15]
 800841e:	4313      	orrs	r3, r2
 8008420:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8008422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d117      	bne.n	800845a <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	b299      	uxth	r1, r3
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	3318      	adds	r3, #24
 8008432:	683a      	ldr	r2, [r7, #0]
 8008434:	4413      	add	r3, r2
 8008436:	461a      	mov	r2, r3
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 fb35 	bl	8008aa8 <VL53L0X_GetLimitCheckEnable>
 800843e:	4603      	mov	r3, r0
 8008440:	461a      	mov	r2, r3
 8008442:	7bfb      	ldrb	r3, [r7, #15]
 8008444:	4313      	orrs	r3, r2
 8008446:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	3301      	adds	r3, #1
 800844c:	60bb      	str	r3, [r7, #8]
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	2b05      	cmp	r3, #5
 8008452:	ddd1      	ble.n	80083f8 <VL53L0X_GetDeviceParameters+0x80>
 8008454:	e002      	b.n	800845c <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8008456:	bf00      	nop
 8008458:	e000      	b.n	800845c <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 800845a:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800845c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d107      	bne.n	8008474 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	333c      	adds	r3, #60	; 0x3c
 8008468:	4619      	mov	r1, r3
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 fc30 	bl	8008cd0 <VL53L0X_GetWrapAroundCheckEnable>
 8008470:	4603      	mov	r3, r0
 8008472:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8008474:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d107      	bne.n	800848c <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	3304      	adds	r3, #4
 8008480:	4619      	mov	r1, r3
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 f879 	bl	800857a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8008488:	4603      	mov	r3, r0
 800848a:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800848c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008490:	4618      	mov	r0, r3
 8008492:	3710      	adds	r7, #16
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8008498:	b480      	push	{r7}
 800849a:	b085      	sub	sp, #20
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	460b      	mov	r3, r1
 80084a2:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80084a4:	2300      	movs	r3, #0
 80084a6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 80084a8:	78fb      	ldrb	r3, [r7, #3]
 80084aa:	2b15      	cmp	r3, #21
 80084ac:	bf8c      	ite	hi
 80084ae:	2201      	movhi	r2, #1
 80084b0:	2200      	movls	r2, #0
 80084b2:	b2d2      	uxtb	r2, r2
 80084b4:	2a00      	cmp	r2, #0
 80084b6:	d10e      	bne.n	80084d6 <VL53L0X_SetDeviceMode+0x3e>
 80084b8:	2201      	movs	r2, #1
 80084ba:	409a      	lsls	r2, r3
 80084bc:	4b0b      	ldr	r3, [pc, #44]	; (80084ec <VL53L0X_SetDeviceMode+0x54>)
 80084be:	4013      	ands	r3, r2
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	bf14      	ite	ne
 80084c4:	2301      	movne	r3, #1
 80084c6:	2300      	moveq	r3, #0
 80084c8:	b2db      	uxtb	r3, r3
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d003      	beq.n	80084d6 <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	78fa      	ldrb	r2, [r7, #3]
 80084d2:	741a      	strb	r2, [r3, #16]
		break;
 80084d4:	e001      	b.n	80084da <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80084d6:	23f8      	movs	r3, #248	; 0xf8
 80084d8:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80084da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3714      	adds	r7, #20
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr
 80084ea:	bf00      	nop
 80084ec:	0030000b 	.word	0x0030000b

080084f0 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b085      	sub	sp, #20
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80084fa:	2300      	movs	r3, #0
 80084fc:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	7c1a      	ldrb	r2, [r3, #16]
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8008506:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800850a:	4618      	mov	r0, r3
 800850c:	3714      	adds	r7, #20
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr

08008516 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8008516:	b580      	push	{r7, lr}
 8008518:	b084      	sub	sp, #16
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
 800851e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008520:	2300      	movs	r3, #0
 8008522:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8008524:	683a      	ldr	r2, [r7, #0]
 8008526:	2109      	movs	r1, #9
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f004 fb6d 	bl	800cc08 <VL53L0X_RdByte>
 800852e:	4603      	mov	r3, r0
 8008530:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d106      	bne.n	8008548 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	781b      	ldrb	r3, [r3, #0]
 800853e:	f003 0301 	and.w	r3, r3, #1
 8008542:	b2da      	uxtb	r2, r3
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8008548:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800854c:	4618      	mov	r0, r3
 800854e:	3710      	adds	r7, #16
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800855e:	2300      	movs	r3, #0
 8008560:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8008562:	6839      	ldr	r1, [r7, #0]
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f003 fa26 	bl	800b9b6 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800856a:	4603      	mov	r3, r0
 800856c:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800856e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008572:	4618      	mov	r0, r3
 8008574:	3710      	adds	r7, #16
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}

0800857a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800857a:	b580      	push	{r7, lr}
 800857c:	b084      	sub	sp, #16
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
 8008582:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008584:	2300      	movs	r3, #0
 8008586:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8008588:	6839      	ldr	r1, [r7, #0]
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f003 faf3 	bl	800bb76 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8008590:	4603      	mov	r3, r0
 8008592:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8008594:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008598:	4618      	mov	r0, r3
 800859a:	3710      	adds	r7, #16
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	460b      	mov	r3, r1
 80085aa:	70fb      	strb	r3, [r7, #3]
 80085ac:	4613      	mov	r3, r2
 80085ae:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80085b0:	2300      	movs	r3, #0
 80085b2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 80085b4:	78ba      	ldrb	r2, [r7, #2]
 80085b6:	78fb      	ldrb	r3, [r7, #3]
 80085b8:	4619      	mov	r1, r3
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f002 ff3b 	bl	800b436 <VL53L0X_set_vcsel_pulse_period>
 80085c0:	4603      	mov	r3, r0
 80085c2:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80085c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3710      	adds	r7, #16
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}

080085d0 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b086      	sub	sp, #24
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	60f8      	str	r0, [r7, #12]
 80085d8:	460b      	mov	r3, r1
 80085da:	607a      	str	r2, [r7, #4]
 80085dc:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80085de:	2300      	movs	r3, #0
 80085e0:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80085e2:	7afb      	ldrb	r3, [r7, #11]
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	4619      	mov	r1, r3
 80085e8:	68f8      	ldr	r0, [r7, #12]
 80085ea:	f003 f9ad 	bl	800b948 <VL53L0X_get_vcsel_pulse_period>
 80085ee:	4603      	mov	r3, r0
 80085f0:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80085f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3718      	adds	r7, #24
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
	...

08008600 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b086      	sub	sp, #24
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	460b      	mov	r3, r1
 800860a:	70fb      	strb	r3, [r7, #3]
 800860c:	4613      	mov	r3, r2
 800860e:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008610:	2300      	movs	r3, #0
 8008612:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8008614:	2300      	movs	r3, #0
 8008616:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8008618:	2300      	movs	r3, #0
 800861a:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800861c:	f107 030f 	add.w	r3, r7, #15
 8008620:	461a      	mov	r2, r3
 8008622:	2101      	movs	r1, #1
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f004 faef 	bl	800cc08 <VL53L0X_RdByte>
 800862a:	4603      	mov	r3, r0
 800862c:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800862e:	7bfb      	ldrb	r3, [r7, #15]
 8008630:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8008632:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d15a      	bne.n	80086f0 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 800863a:	78bb      	ldrb	r3, [r7, #2]
 800863c:	2b01      	cmp	r3, #1
 800863e:	d12b      	bne.n	8008698 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8008640:	78fb      	ldrb	r3, [r7, #3]
 8008642:	2b04      	cmp	r3, #4
 8008644:	d825      	bhi.n	8008692 <VL53L0X_SetSequenceStepEnable+0x92>
 8008646:	a201      	add	r2, pc, #4	; (adr r2, 800864c <VL53L0X_SetSequenceStepEnable+0x4c>)
 8008648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800864c:	08008661 	.word	0x08008661
 8008650:	0800866b 	.word	0x0800866b
 8008654:	08008675 	.word	0x08008675
 8008658:	0800867f 	.word	0x0800867f
 800865c:	08008689 	.word	0x08008689
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8008660:	7dbb      	ldrb	r3, [r7, #22]
 8008662:	f043 0310 	orr.w	r3, r3, #16
 8008666:	75bb      	strb	r3, [r7, #22]
				break;
 8008668:	e043      	b.n	80086f2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800866a:	7dbb      	ldrb	r3, [r7, #22]
 800866c:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8008670:	75bb      	strb	r3, [r7, #22]
				break;
 8008672:	e03e      	b.n	80086f2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8008674:	7dbb      	ldrb	r3, [r7, #22]
 8008676:	f043 0304 	orr.w	r3, r3, #4
 800867a:	75bb      	strb	r3, [r7, #22]
				break;
 800867c:	e039      	b.n	80086f2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800867e:	7dbb      	ldrb	r3, [r7, #22]
 8008680:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008684:	75bb      	strb	r3, [r7, #22]
				break;
 8008686:	e034      	b.n	80086f2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8008688:	7dbb      	ldrb	r3, [r7, #22]
 800868a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800868e:	75bb      	strb	r3, [r7, #22]
				break;
 8008690:	e02f      	b.n	80086f2 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008692:	23fc      	movs	r3, #252	; 0xfc
 8008694:	75fb      	strb	r3, [r7, #23]
 8008696:	e02c      	b.n	80086f2 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8008698:	78fb      	ldrb	r3, [r7, #3]
 800869a:	2b04      	cmp	r3, #4
 800869c:	d825      	bhi.n	80086ea <VL53L0X_SetSequenceStepEnable+0xea>
 800869e:	a201      	add	r2, pc, #4	; (adr r2, 80086a4 <VL53L0X_SetSequenceStepEnable+0xa4>)
 80086a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086a4:	080086b9 	.word	0x080086b9
 80086a8:	080086c3 	.word	0x080086c3
 80086ac:	080086cd 	.word	0x080086cd
 80086b0:	080086d7 	.word	0x080086d7
 80086b4:	080086e1 	.word	0x080086e1
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 80086b8:	7dbb      	ldrb	r3, [r7, #22]
 80086ba:	f023 0310 	bic.w	r3, r3, #16
 80086be:	75bb      	strb	r3, [r7, #22]
				break;
 80086c0:	e017      	b.n	80086f2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 80086c2:	7dbb      	ldrb	r3, [r7, #22]
 80086c4:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80086c8:	75bb      	strb	r3, [r7, #22]
				break;
 80086ca:	e012      	b.n	80086f2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 80086cc:	7dbb      	ldrb	r3, [r7, #22]
 80086ce:	f023 0304 	bic.w	r3, r3, #4
 80086d2:	75bb      	strb	r3, [r7, #22]
				break;
 80086d4:	e00d      	b.n	80086f2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 80086d6:	7dbb      	ldrb	r3, [r7, #22]
 80086d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086dc:	75bb      	strb	r3, [r7, #22]
				break;
 80086de:	e008      	b.n	80086f2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 80086e0:	7dbb      	ldrb	r3, [r7, #22]
 80086e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086e6:	75bb      	strb	r3, [r7, #22]
				break;
 80086e8:	e003      	b.n	80086f2 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80086ea:	23fc      	movs	r3, #252	; 0xfc
 80086ec:	75fb      	strb	r3, [r7, #23]
 80086ee:	e000      	b.n	80086f2 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 80086f0:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 80086f2:	7bfb      	ldrb	r3, [r7, #15]
 80086f4:	7dba      	ldrb	r2, [r7, #22]
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d01e      	beq.n	8008738 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 80086fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d107      	bne.n	8008712 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8008702:	7dbb      	ldrb	r3, [r7, #22]
 8008704:	461a      	mov	r2, r3
 8008706:	2101      	movs	r1, #1
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f004 f9fb 	bl	800cb04 <VL53L0X_WrByte>
 800870e:	4603      	mov	r3, r0
 8008710:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8008712:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d103      	bne.n	8008722 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	7dba      	ldrb	r2, [r7, #22]
 800871e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8008722:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d106      	bne.n	8008738 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	695b      	ldr	r3, [r3, #20]
 800872e:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8008730:	6939      	ldr	r1, [r7, #16]
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f7ff ff0e 	bl	8008554 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8008738:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800873c:	4618      	mov	r0, r3
 800873e:	3718      	adds	r7, #24
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}

08008744 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8008744:	b480      	push	{r7}
 8008746:	b087      	sub	sp, #28
 8008748:	af00      	add	r7, sp, #0
 800874a:	60f8      	str	r0, [r7, #12]
 800874c:	607b      	str	r3, [r7, #4]
 800874e:	460b      	mov	r3, r1
 8008750:	72fb      	strb	r3, [r7, #11]
 8008752:	4613      	mov	r3, r2
 8008754:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008756:	2300      	movs	r3, #0
 8008758:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2200      	movs	r2, #0
 800875e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8008760:	7afb      	ldrb	r3, [r7, #11]
 8008762:	2b04      	cmp	r3, #4
 8008764:	d836      	bhi.n	80087d4 <sequence_step_enabled+0x90>
 8008766:	a201      	add	r2, pc, #4	; (adr r2, 800876c <sequence_step_enabled+0x28>)
 8008768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800876c:	08008781 	.word	0x08008781
 8008770:	08008793 	.word	0x08008793
 8008774:	080087a5 	.word	0x080087a5
 8008778:	080087b7 	.word	0x080087b7
 800877c:	080087c9 	.word	0x080087c9
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8008780:	7abb      	ldrb	r3, [r7, #10]
 8008782:	111b      	asrs	r3, r3, #4
 8008784:	b2db      	uxtb	r3, r3
 8008786:	f003 0301 	and.w	r3, r3, #1
 800878a:	b2da      	uxtb	r2, r3
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	701a      	strb	r2, [r3, #0]
		break;
 8008790:	e022      	b.n	80087d8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8008792:	7abb      	ldrb	r3, [r7, #10]
 8008794:	10db      	asrs	r3, r3, #3
 8008796:	b2db      	uxtb	r3, r3
 8008798:	f003 0301 	and.w	r3, r3, #1
 800879c:	b2da      	uxtb	r2, r3
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	701a      	strb	r2, [r3, #0]
		break;
 80087a2:	e019      	b.n	80087d8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 80087a4:	7abb      	ldrb	r3, [r7, #10]
 80087a6:	109b      	asrs	r3, r3, #2
 80087a8:	b2db      	uxtb	r3, r3
 80087aa:	f003 0301 	and.w	r3, r3, #1
 80087ae:	b2da      	uxtb	r2, r3
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	701a      	strb	r2, [r3, #0]
		break;
 80087b4:	e010      	b.n	80087d8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 80087b6:	7abb      	ldrb	r3, [r7, #10]
 80087b8:	119b      	asrs	r3, r3, #6
 80087ba:	b2db      	uxtb	r3, r3
 80087bc:	f003 0301 	and.w	r3, r3, #1
 80087c0:	b2da      	uxtb	r2, r3
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	701a      	strb	r2, [r3, #0]
		break;
 80087c6:	e007      	b.n	80087d8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80087c8:	7abb      	ldrb	r3, [r7, #10]
 80087ca:	09db      	lsrs	r3, r3, #7
 80087cc:	b2da      	uxtb	r2, r3
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	701a      	strb	r2, [r3, #0]
		break;
 80087d2:	e001      	b.n	80087d8 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80087d4:	23fc      	movs	r3, #252	; 0xfc
 80087d6:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80087d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80087dc:	4618      	mov	r0, r3
 80087de:	371c      	adds	r7, #28
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr

080087e8 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80087f2:	2300      	movs	r3, #0
 80087f4:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 80087f6:	2300      	movs	r3, #0
 80087f8:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80087fa:	f107 030e 	add.w	r3, r7, #14
 80087fe:	461a      	mov	r2, r3
 8008800:	2101      	movs	r1, #1
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f004 fa00 	bl	800cc08 <VL53L0X_RdByte>
 8008808:	4603      	mov	r3, r0
 800880a:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 800880c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d107      	bne.n	8008824 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8008814:	7bba      	ldrb	r2, [r7, #14]
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	2100      	movs	r1, #0
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f7ff ff92 	bl	8008744 <sequence_step_enabled>
 8008820:	4603      	mov	r3, r0
 8008822:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008824:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d108      	bne.n	800883e <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 800882c:	7bba      	ldrb	r2, [r7, #14]
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	3302      	adds	r3, #2
 8008832:	2101      	movs	r1, #1
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f7ff ff85 	bl	8008744 <sequence_step_enabled>
 800883a:	4603      	mov	r3, r0
 800883c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800883e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d108      	bne.n	8008858 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8008846:	7bba      	ldrb	r2, [r7, #14]
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	3301      	adds	r3, #1
 800884c:	2102      	movs	r1, #2
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f7ff ff78 	bl	8008744 <sequence_step_enabled>
 8008854:	4603      	mov	r3, r0
 8008856:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008858:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d108      	bne.n	8008872 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8008860:	7bba      	ldrb	r2, [r7, #14]
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	3303      	adds	r3, #3
 8008866:	2103      	movs	r1, #3
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f7ff ff6b 	bl	8008744 <sequence_step_enabled>
 800886e:	4603      	mov	r3, r0
 8008870:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d108      	bne.n	800888c <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800887a:	7bba      	ldrb	r2, [r7, #14]
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	3304      	adds	r3, #4
 8008880:	2104      	movs	r1, #4
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f7ff ff5e 	bl	8008744 <sequence_step_enabled>
 8008888:	4603      	mov	r3, r0
 800888a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800888c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008890:	4618      	mov	r0, r3
 8008892:	3710      	adds	r7, #16
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80088a2:	2300      	movs	r3, #0
 80088a4:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 80088a6:	f107 030c 	add.w	r3, r7, #12
 80088aa:	461a      	mov	r2, r3
 80088ac:	21f8      	movs	r1, #248	; 0xf8
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f004 f9d4 	bl	800cc5c <VL53L0X_RdWord>
 80088b4:	4603      	mov	r3, r0
 80088b6:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 80088b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d108      	bne.n	80088d2 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 80088c0:	f107 0308 	add.w	r3, r7, #8
 80088c4:	461a      	mov	r2, r3
 80088c6:	2104      	movs	r1, #4
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f004 f9ff 	bl	800cccc <VL53L0X_RdDWord>
 80088ce:	4603      	mov	r3, r0
 80088d0:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80088d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d10c      	bne.n	80088f4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 80088da:	89bb      	ldrh	r3, [r7, #12]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d005      	beq.n	80088ec <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	89ba      	ldrh	r2, [r7, #12]
 80088e4:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	681a      	ldr	r2, [r3, #0]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80088f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3710      	adds	r7, #16
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8008900:	b480      	push	{r7}
 8008902:	b085      	sub	sp, #20
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800890a:	2300      	movs	r3, #0
 800890c:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	7f1b      	ldrb	r3, [r3, #28]
 8008912:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	7bba      	ldrb	r2, [r7, #14]
 8008918:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800891a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800891e:	4618      	mov	r0, r3
 8008920:	3714      	adds	r7, #20
 8008922:	46bd      	mov	sp, r7
 8008924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008928:	4770      	bx	lr

0800892a <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800892a:	b580      	push	{r7, lr}
 800892c:	b086      	sub	sp, #24
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
 8008932:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008934:	2300      	movs	r3, #0
 8008936:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8008938:	f107 030e 	add.w	r3, r7, #14
 800893c:	461a      	mov	r2, r3
 800893e:	2120      	movs	r1, #32
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f004 f98b 	bl	800cc5c <VL53L0X_RdWord>
 8008946:	4603      	mov	r3, r0
 8008948:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800894a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d118      	bne.n	8008984 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8008952:	89fb      	ldrh	r3, [r7, #14]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d109      	bne.n	800896c <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6a1b      	ldr	r3, [r3, #32]
 800895c:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	693a      	ldr	r2, [r7, #16]
 8008962:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	771a      	strb	r2, [r3, #28]
 800896a:	e00b      	b.n	8008984 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 800896c:	89fb      	ldrh	r3, [r7, #14]
 800896e:	00db      	lsls	r3, r3, #3
 8008970:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	693a      	ldr	r2, [r7, #16]
 8008976:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	693a      	ldr	r2, [r7, #16]
 800897c:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2201      	movs	r2, #1
 8008982:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008984:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008988:	4618      	mov	r0, r3
 800898a:	3718      	adds	r7, #24
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b086      	sub	sp, #24
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	460b      	mov	r3, r1
 800899a:	807b      	strh	r3, [r7, #2]
 800899c:	4613      	mov	r3, r2
 800899e:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80089a0:	2300      	movs	r3, #0
 80089a2:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 80089a4:	2300      	movs	r3, #0
 80089a6:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 80089a8:	2300      	movs	r3, #0
 80089aa:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 80089ac:	2300      	movs	r3, #0
 80089ae:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80089b0:	887b      	ldrh	r3, [r7, #2]
 80089b2:	2b05      	cmp	r3, #5
 80089b4:	d902      	bls.n	80089bc <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80089b6:	23fc      	movs	r3, #252	; 0xfc
 80089b8:	75fb      	strb	r3, [r7, #23]
 80089ba:	e05b      	b.n	8008a74 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 80089bc:	787b      	ldrb	r3, [r7, #1]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d106      	bne.n	80089d0 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 80089c2:	2300      	movs	r3, #0
 80089c4:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 80089c6:	2300      	movs	r3, #0
 80089c8:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 80089ca:	2301      	movs	r3, #1
 80089cc:	73bb      	strb	r3, [r7, #14]
 80089ce:	e00a      	b.n	80089e6 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80089d0:	887b      	ldrh	r3, [r7, #2]
 80089d2:	687a      	ldr	r2, [r7, #4]
 80089d4:	330c      	adds	r3, #12
 80089d6:	009b      	lsls	r3, r3, #2
 80089d8:	4413      	add	r3, r2
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 80089de:	2300      	movs	r3, #0
 80089e0:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 80089e2:	2301      	movs	r3, #1
 80089e4:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 80089e6:	887b      	ldrh	r3, [r7, #2]
 80089e8:	2b05      	cmp	r3, #5
 80089ea:	d841      	bhi.n	8008a70 <VL53L0X_SetLimitCheckEnable+0xe0>
 80089ec:	a201      	add	r2, pc, #4	; (adr r2, 80089f4 <VL53L0X_SetLimitCheckEnable+0x64>)
 80089ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089f2:	bf00      	nop
 80089f4:	08008a0d 	.word	0x08008a0d
 80089f8:	08008a17 	.word	0x08008a17
 80089fc:	08008a2d 	.word	0x08008a2d
 8008a00:	08008a37 	.word	0x08008a37
 8008a04:	08008a41 	.word	0x08008a41
 8008a08:	08008a59 	.word	0x08008a59

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	7bfa      	ldrb	r2, [r7, #15]
 8008a10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8008a14:	e02e      	b.n	8008a74 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	461a      	mov	r2, r3
 8008a1e:	2144      	movs	r1, #68	; 0x44
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f004 f893 	bl	800cb4c <VL53L0X_WrWord>
 8008a26:	4603      	mov	r3, r0
 8008a28:	75fb      	strb	r3, [r7, #23]

			break;
 8008a2a:	e023      	b.n	8008a74 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	7bfa      	ldrb	r2, [r7, #15]
 8008a30:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8008a34:	e01e      	b.n	8008a74 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	7bfa      	ldrb	r2, [r7, #15]
 8008a3a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8008a3e:	e019      	b.n	8008a74 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8008a40:	7bbb      	ldrb	r3, [r7, #14]
 8008a42:	005b      	lsls	r3, r3, #1
 8008a44:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8008a46:	7b7b      	ldrb	r3, [r7, #13]
 8008a48:	22fe      	movs	r2, #254	; 0xfe
 8008a4a:	2160      	movs	r1, #96	; 0x60
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f004 f8a7 	bl	800cba0 <VL53L0X_UpdateByte>
 8008a52:	4603      	mov	r3, r0
 8008a54:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8008a56:	e00d      	b.n	8008a74 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8008a58:	7bbb      	ldrb	r3, [r7, #14]
 8008a5a:	011b      	lsls	r3, r3, #4
 8008a5c:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8008a5e:	7b7b      	ldrb	r3, [r7, #13]
 8008a60:	22ef      	movs	r2, #239	; 0xef
 8008a62:	2160      	movs	r1, #96	; 0x60
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f004 f89b 	bl	800cba0 <VL53L0X_UpdateByte>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8008a6e:	e001      	b.n	8008a74 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008a70:	23fc      	movs	r3, #252	; 0xfc
 8008a72:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008a74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d10f      	bne.n	8008a9c <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8008a7c:	787b      	ldrb	r3, [r7, #1]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d106      	bne.n	8008a90 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008a82:	887b      	ldrh	r3, [r7, #2]
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	4413      	add	r3, r2
 8008a88:	2200      	movs	r2, #0
 8008a8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8008a8e:	e005      	b.n	8008a9c <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008a90:	887b      	ldrh	r3, [r7, #2]
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	4413      	add	r3, r2
 8008a96:	2201      	movs	r2, #1
 8008a98:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008a9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3718      	adds	r7, #24
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b087      	sub	sp, #28
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	60f8      	str	r0, [r7, #12]
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	607a      	str	r2, [r7, #4]
 8008ab4:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8008aba:	897b      	ldrh	r3, [r7, #10]
 8008abc:	2b05      	cmp	r3, #5
 8008abe:	d905      	bls.n	8008acc <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008ac0:	23fc      	movs	r3, #252	; 0xfc
 8008ac2:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	701a      	strb	r2, [r3, #0]
 8008aca:	e008      	b.n	8008ade <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008acc:	897b      	ldrh	r3, [r7, #10]
 8008ace:	68fa      	ldr	r2, [r7, #12]
 8008ad0:	4413      	add	r3, r2
 8008ad2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ad6:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	7dba      	ldrb	r2, [r7, #22]
 8008adc:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008ade:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	371c      	adds	r7, #28
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr
	...

08008af0 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b086      	sub	sp, #24
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	60f8      	str	r0, [r7, #12]
 8008af8:	460b      	mov	r3, r1
 8008afa:	607a      	str	r2, [r7, #4]
 8008afc:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008afe:	2300      	movs	r3, #0
 8008b00:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8008b02:	897b      	ldrh	r3, [r7, #10]
 8008b04:	68fa      	ldr	r2, [r7, #12]
 8008b06:	4413      	add	r3, r2
 8008b08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b0c:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8008b0e:	7dbb      	ldrb	r3, [r7, #22]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d107      	bne.n	8008b24 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008b14:	897b      	ldrh	r3, [r7, #10]
 8008b16:	68fa      	ldr	r2, [r7, #12]
 8008b18:	330c      	adds	r3, #12
 8008b1a:	009b      	lsls	r3, r3, #2
 8008b1c:	4413      	add	r3, r2
 8008b1e:	687a      	ldr	r2, [r7, #4]
 8008b20:	605a      	str	r2, [r3, #4]
 8008b22:	e040      	b.n	8008ba6 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8008b24:	897b      	ldrh	r3, [r7, #10]
 8008b26:	2b05      	cmp	r3, #5
 8008b28:	d830      	bhi.n	8008b8c <VL53L0X_SetLimitCheckValue+0x9c>
 8008b2a:	a201      	add	r2, pc, #4	; (adr r2, 8008b30 <VL53L0X_SetLimitCheckValue+0x40>)
 8008b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b30:	08008b49 	.word	0x08008b49
 8008b34:	08008b51 	.word	0x08008b51
 8008b38:	08008b67 	.word	0x08008b67
 8008b3c:	08008b6f 	.word	0x08008b6f
 8008b40:	08008b77 	.word	0x08008b77
 8008b44:	08008b77 	.word	0x08008b77

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8008b4e:	e01f      	b.n	8008b90 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8008b54:	b29b      	uxth	r3, r3
 8008b56:	461a      	mov	r2, r3
 8008b58:	2144      	movs	r1, #68	; 0x44
 8008b5a:	68f8      	ldr	r0, [r7, #12]
 8008b5c:	f003 fff6 	bl	800cb4c <VL53L0X_WrWord>
 8008b60:	4603      	mov	r3, r0
 8008b62:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8008b64:	e014      	b.n	8008b90 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	687a      	ldr	r2, [r7, #4]
 8008b6a:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8008b6c:	e010      	b.n	8008b90 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	687a      	ldr	r2, [r7, #4]
 8008b72:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8008b74:	e00c      	b.n	8008b90 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8008b7a:	b29b      	uxth	r3, r3
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	2164      	movs	r1, #100	; 0x64
 8008b80:	68f8      	ldr	r0, [r7, #12]
 8008b82:	f003 ffe3 	bl	800cb4c <VL53L0X_WrWord>
 8008b86:	4603      	mov	r3, r0
 8008b88:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8008b8a:	e001      	b.n	8008b90 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008b8c:	23fc      	movs	r3, #252	; 0xfc
 8008b8e:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8008b90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d106      	bne.n	8008ba6 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008b98:	897b      	ldrh	r3, [r7, #10]
 8008b9a:	68fa      	ldr	r2, [r7, #12]
 8008b9c:	330c      	adds	r3, #12
 8008b9e:	009b      	lsls	r3, r3, #2
 8008ba0:	4413      	add	r3, r2
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008ba6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3718      	adds	r7, #24
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}
 8008bb2:	bf00      	nop

08008bb4 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b088      	sub	sp, #32
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	460b      	mov	r3, r1
 8008bbe:	607a      	str	r2, [r7, #4]
 8008bc0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8008bca:	897b      	ldrh	r3, [r7, #10]
 8008bcc:	2b05      	cmp	r3, #5
 8008bce:	d847      	bhi.n	8008c60 <VL53L0X_GetLimitCheckValue+0xac>
 8008bd0:	a201      	add	r2, pc, #4	; (adr r2, 8008bd8 <VL53L0X_GetLimitCheckValue+0x24>)
 8008bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bd6:	bf00      	nop
 8008bd8:	08008bf1 	.word	0x08008bf1
 8008bdc:	08008bfd 	.word	0x08008bfd
 8008be0:	08008c23 	.word	0x08008c23
 8008be4:	08008c2f 	.word	0x08008c2f
 8008be8:	08008c3b 	.word	0x08008c3b
 8008bec:	08008c3b 	.word	0x08008c3b

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bf4:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	77bb      	strb	r3, [r7, #30]
		break;
 8008bfa:	e033      	b.n	8008c64 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8008bfc:	f107 0316 	add.w	r3, r7, #22
 8008c00:	461a      	mov	r2, r3
 8008c02:	2144      	movs	r1, #68	; 0x44
 8008c04:	68f8      	ldr	r0, [r7, #12]
 8008c06:	f004 f829 	bl	800cc5c <VL53L0X_RdWord>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8008c0e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d102      	bne.n	8008c1c <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8008c16:	8afb      	ldrh	r3, [r7, #22]
 8008c18:	025b      	lsls	r3, r3, #9
 8008c1a:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	77bb      	strb	r3, [r7, #30]
		break;
 8008c20:	e020      	b.n	8008c64 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c26:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	77bb      	strb	r3, [r7, #30]
		break;
 8008c2c:	e01a      	b.n	8008c64 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c32:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8008c34:	2300      	movs	r3, #0
 8008c36:	77bb      	strb	r3, [r7, #30]
		break;
 8008c38:	e014      	b.n	8008c64 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8008c3a:	f107 0316 	add.w	r3, r7, #22
 8008c3e:	461a      	mov	r2, r3
 8008c40:	2164      	movs	r1, #100	; 0x64
 8008c42:	68f8      	ldr	r0, [r7, #12]
 8008c44:	f004 f80a 	bl	800cc5c <VL53L0X_RdWord>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8008c4c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d102      	bne.n	8008c5a <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8008c54:	8afb      	ldrh	r3, [r7, #22]
 8008c56:	025b      	lsls	r3, r3, #9
 8008c58:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	77bb      	strb	r3, [r7, #30]
		break;
 8008c5e:	e001      	b.n	8008c64 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008c60:	23fc      	movs	r3, #252	; 0xfc
 8008c62:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008c64:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d12a      	bne.n	8008cc2 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8008c6c:	7fbb      	ldrb	r3, [r7, #30]
 8008c6e:	2b01      	cmp	r3, #1
 8008c70:	d124      	bne.n	8008cbc <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8008c72:	69bb      	ldr	r3, [r7, #24]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d110      	bne.n	8008c9a <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8008c78:	897b      	ldrh	r3, [r7, #10]
 8008c7a:	68fa      	ldr	r2, [r7, #12]
 8008c7c:	330c      	adds	r3, #12
 8008c7e:	009b      	lsls	r3, r3, #2
 8008c80:	4413      	add	r3, r2
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	69ba      	ldr	r2, [r7, #24]
 8008c8a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8008c8c:	897b      	ldrh	r3, [r7, #10]
 8008c8e:	68fa      	ldr	r2, [r7, #12]
 8008c90:	4413      	add	r3, r2
 8008c92:	2200      	movs	r2, #0
 8008c94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8008c98:	e013      	b.n	8008cc2 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	69ba      	ldr	r2, [r7, #24]
 8008c9e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8008ca0:	897b      	ldrh	r3, [r7, #10]
 8008ca2:	68fa      	ldr	r2, [r7, #12]
 8008ca4:	330c      	adds	r3, #12
 8008ca6:	009b      	lsls	r3, r3, #2
 8008ca8:	4413      	add	r3, r2
 8008caa:	69ba      	ldr	r2, [r7, #24]
 8008cac:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8008cae:	897b      	ldrh	r3, [r7, #10]
 8008cb0:	68fa      	ldr	r2, [r7, #12]
 8008cb2:	4413      	add	r3, r2
 8008cb4:	2201      	movs	r2, #1
 8008cb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8008cba:	e002      	b.n	8008cc2 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	69ba      	ldr	r2, [r7, #24]
 8008cc0:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008cc2:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3720      	adds	r7, #32
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
 8008cce:	bf00      	nop

08008cd0 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b084      	sub	sp, #16
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8008cde:	f107 030e 	add.w	r3, r7, #14
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	2101      	movs	r1, #1
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f003 ff8e 	bl	800cc08 <VL53L0X_RdByte>
 8008cec:	4603      	mov	r3, r0
 8008cee:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8008cf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d10e      	bne.n	8008d16 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8008cf8:	7bba      	ldrb	r2, [r7, #14]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8008d00:	7bbb      	ldrb	r3, [r7, #14]
 8008d02:	b25b      	sxtb	r3, r3
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	da03      	bge.n	8008d10 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	701a      	strb	r2, [r3, #0]
 8008d0e:	e002      	b.n	8008d16 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	2200      	movs	r2, #0
 8008d14:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d104      	bne.n	8008d28 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	781a      	ldrb	r2, [r3, #0]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008d28:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3710      	adds	r7, #16
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}

08008d34 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b084      	sub	sp, #16
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8008d40:	f107 030e 	add.w	r3, r7, #14
 8008d44:	4619      	mov	r1, r3
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f7ff fbd2 	bl	80084f0 <VL53L0X_GetDeviceMode>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8008d50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d107      	bne.n	8008d68 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8008d58:	7bbb      	ldrb	r3, [r7, #14]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d104      	bne.n	8008d68 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 f898 	bl	8008e94 <VL53L0X_StartMeasurement>
 8008d64:	4603      	mov	r3, r0
 8008d66:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8008d68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d104      	bne.n	8008d7a <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f001 fb3f 	bl	800a3f4 <VL53L0X_measurement_poll_for_completion>
 8008d76:	4603      	mov	r3, r0
 8008d78:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8008d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d106      	bne.n	8008d90 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8008d82:	7bbb      	ldrb	r3, [r7, #14]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d103      	bne.n	8008d90 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2203      	movs	r2, #3
 8008d8c:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8008d90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3710      	adds	r7, #16
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b086      	sub	sp, #24
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	60f8      	str	r0, [r7, #12]
 8008da4:	60b9      	str	r1, [r7, #8]
 8008da6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008da8:	2300      	movs	r3, #0
 8008daa:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8008dac:	2301      	movs	r3, #1
 8008dae:	687a      	ldr	r2, [r7, #4]
 8008db0:	68b9      	ldr	r1, [r7, #8]
 8008db2:	68f8      	ldr	r0, [r7, #12]
 8008db4:	f001 fae1 	bl	800a37a <VL53L0X_perform_ref_calibration>
 8008db8:	4603      	mov	r3, r0
 8008dba:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8008dbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3718      	adds	r7, #24
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b086      	sub	sp, #24
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	460b      	mov	r3, r1
 8008dd2:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8008dde:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8008de0:	7dbb      	ldrb	r3, [r7, #22]
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	d005      	beq.n	8008df2 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8008de6:	7dbb      	ldrb	r3, [r7, #22]
 8008de8:	2b02      	cmp	r3, #2
 8008dea:	d002      	beq.n	8008df2 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8008dec:	7dbb      	ldrb	r3, [r7, #22]
 8008dee:	2b03      	cmp	r3, #3
 8008df0:	d147      	bne.n	8008e82 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8008df2:	f107 030c 	add.w	r3, r7, #12
 8008df6:	f107 0210 	add.w	r2, r7, #16
 8008dfa:	2101      	movs	r1, #1
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 fbc3 	bl	8009588 <VL53L0X_GetInterruptThresholds>
 8008e02:	4603      	mov	r3, r0
 8008e04:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8008e0c:	d803      	bhi.n	8008e16 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8008e0e:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8008e10:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8008e14:	d935      	bls.n	8008e82 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8008e16:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d131      	bne.n	8008e82 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8008e1e:	78fb      	ldrb	r3, [r7, #3]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d006      	beq.n	8008e32 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8008e24:	491a      	ldr	r1, [pc, #104]	; (8008e90 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f002 ff56 	bl	800bcd8 <VL53L0X_load_tuning_settings>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	75fb      	strb	r3, [r7, #23]
 8008e30:	e027      	b.n	8008e82 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8008e32:	2204      	movs	r2, #4
 8008e34:	21ff      	movs	r1, #255	; 0xff
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f003 fe64 	bl	800cb04 <VL53L0X_WrByte>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	461a      	mov	r2, r3
 8008e40:	7dfb      	ldrb	r3, [r7, #23]
 8008e42:	4313      	orrs	r3, r2
 8008e44:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8008e46:	2200      	movs	r2, #0
 8008e48:	2170      	movs	r1, #112	; 0x70
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f003 fe5a 	bl	800cb04 <VL53L0X_WrByte>
 8008e50:	4603      	mov	r3, r0
 8008e52:	461a      	mov	r2, r3
 8008e54:	7dfb      	ldrb	r3, [r7, #23]
 8008e56:	4313      	orrs	r3, r2
 8008e58:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	21ff      	movs	r1, #255	; 0xff
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f003 fe50 	bl	800cb04 <VL53L0X_WrByte>
 8008e64:	4603      	mov	r3, r0
 8008e66:	461a      	mov	r2, r3
 8008e68:	7dfb      	ldrb	r3, [r7, #23]
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8008e6e:	2200      	movs	r2, #0
 8008e70:	2180      	movs	r1, #128	; 0x80
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f003 fe46 	bl	800cb04 <VL53L0X_WrByte>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	7dfb      	ldrb	r3, [r7, #23]
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8008e82:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3718      	adds	r7, #24
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}
 8008e8e:	bf00      	nop
 8008e90:	20000104 	.word	0x20000104

08008e94 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b086      	sub	sp, #24
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8008ea4:	f107 030e 	add.w	r3, r7, #14
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f7ff fb20 	bl	80084f0 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	2180      	movs	r1, #128	; 0x80
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f003 fe25 	bl	800cb04 <VL53L0X_WrByte>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	21ff      	movs	r1, #255	; 0xff
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f003 fe1e 	bl	800cb04 <VL53L0X_WrByte>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008ecc:	2200      	movs	r2, #0
 8008ece:	2100      	movs	r1, #0
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f003 fe17 	bl	800cb04 <VL53L0X_WrByte>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	2191      	movs	r1, #145	; 0x91
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f003 fe0d 	bl	800cb04 <VL53L0X_WrByte>
 8008eea:	4603      	mov	r3, r0
 8008eec:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8008eee:	2201      	movs	r2, #1
 8008ef0:	2100      	movs	r1, #0
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f003 fe06 	bl	800cb04 <VL53L0X_WrByte>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008efc:	2200      	movs	r2, #0
 8008efe:	21ff      	movs	r1, #255	; 0xff
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f003 fdff 	bl	800cb04 <VL53L0X_WrByte>
 8008f06:	4603      	mov	r3, r0
 8008f08:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	2180      	movs	r1, #128	; 0x80
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f003 fdf8 	bl	800cb04 <VL53L0X_WrByte>
 8008f14:	4603      	mov	r3, r0
 8008f16:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8008f18:	7bbb      	ldrb	r3, [r7, #14]
 8008f1a:	2b03      	cmp	r3, #3
 8008f1c:	d054      	beq.n	8008fc8 <VL53L0X_StartMeasurement+0x134>
 8008f1e:	2b03      	cmp	r3, #3
 8008f20:	dc6c      	bgt.n	8008ffc <VL53L0X_StartMeasurement+0x168>
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d002      	beq.n	8008f2c <VL53L0X_StartMeasurement+0x98>
 8008f26:	2b01      	cmp	r3, #1
 8008f28:	d034      	beq.n	8008f94 <VL53L0X_StartMeasurement+0x100>
 8008f2a:	e067      	b.n	8008ffc <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8008f2c:	2201      	movs	r2, #1
 8008f2e:	2100      	movs	r1, #0
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f003 fde7 	bl	800cb04 <VL53L0X_WrByte>
 8008f36:	4603      	mov	r3, r0
 8008f38:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8008f3a:	7bfb      	ldrb	r3, [r7, #15]
 8008f3c:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8008f3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d15d      	bne.n	8009002 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8008f46:	2300      	movs	r3, #0
 8008f48:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d008      	beq.n	8008f62 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8008f50:	f107 030d 	add.w	r3, r7, #13
 8008f54:	461a      	mov	r2, r3
 8008f56:	2100      	movs	r1, #0
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f003 fe55 	bl	800cc08 <VL53L0X_RdByte>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	3301      	adds	r3, #1
 8008f66:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8008f68:	7b7a      	ldrb	r2, [r7, #13]
 8008f6a:	7bfb      	ldrb	r3, [r7, #15]
 8008f6c:	4013      	ands	r3, r2
 8008f6e:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8008f70:	7bfa      	ldrb	r2, [r7, #15]
 8008f72:	429a      	cmp	r2, r3
 8008f74:	d107      	bne.n	8008f86 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 8008f76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d103      	bne.n	8008f86 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008f84:	d3e1      	bcc.n	8008f4a <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008f8c:	d339      	bcc.n	8009002 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 8008f8e:	23f9      	movs	r3, #249	; 0xf9
 8008f90:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8008f92:	e036      	b.n	8009002 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8008f94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d105      	bne.n	8008fa8 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8008f9c:	2101      	movs	r1, #1
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f7ff ff12 	bl	8008dc8 <VL53L0X_CheckAndLoadInterruptSettings>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8008fa8:	2202      	movs	r2, #2
 8008faa:	2100      	movs	r1, #0
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f003 fda9 	bl	800cb04 <VL53L0X_WrByte>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8008fb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d123      	bne.n	8009006 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2204      	movs	r2, #4
 8008fc2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8008fc6:	e01e      	b.n	8009006 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8008fc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d105      	bne.n	8008fdc <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8008fd0:	2101      	movs	r1, #1
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f7ff fef8 	bl	8008dc8 <VL53L0X_CheckAndLoadInterruptSettings>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8008fdc:	2204      	movs	r2, #4
 8008fde:	2100      	movs	r1, #0
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f003 fd8f 	bl	800cb04 <VL53L0X_WrByte>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8008fea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d10b      	bne.n	800900a <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2204      	movs	r2, #4
 8008ff6:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8008ffa:	e006      	b.n	800900a <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8008ffc:	23f8      	movs	r3, #248	; 0xf8
 8008ffe:	75fb      	strb	r3, [r7, #23]
 8009000:	e004      	b.n	800900c <VL53L0X_StartMeasurement+0x178>
		break;
 8009002:	bf00      	nop
 8009004:	e002      	b.n	800900c <VL53L0X_StartMeasurement+0x178>
		break;
 8009006:	bf00      	nop
 8009008:	e000      	b.n	800900c <VL53L0X_StartMeasurement+0x178>
		break;
 800900a:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800900c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009010:	4618      	mov	r0, r3
 8009012:	3718      	adds	r7, #24
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}

08009018 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009022:	2300      	movs	r3, #0
 8009024:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800902c:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800902e:	7bbb      	ldrb	r3, [r7, #14]
 8009030:	2b04      	cmp	r3, #4
 8009032:	d112      	bne.n	800905a <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8009034:	f107 0308 	add.w	r3, r7, #8
 8009038:	4619      	mov	r1, r3
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 fb1a 	bl	8009674 <VL53L0X_GetInterruptMaskStatus>
 8009040:	4603      	mov	r3, r0
 8009042:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	2b04      	cmp	r3, #4
 8009048:	d103      	bne.n	8009052 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	2201      	movs	r2, #1
 800904e:	701a      	strb	r2, [r3, #0]
 8009050:	e01c      	b.n	800908c <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	2200      	movs	r2, #0
 8009056:	701a      	strb	r2, [r3, #0]
 8009058:	e018      	b.n	800908c <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800905a:	f107 030d 	add.w	r3, r7, #13
 800905e:	461a      	mov	r2, r3
 8009060:	2114      	movs	r1, #20
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f003 fdd0 	bl	800cc08 <VL53L0X_RdByte>
 8009068:	4603      	mov	r3, r0
 800906a:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800906c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d10b      	bne.n	800908c <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8009074:	7b7b      	ldrb	r3, [r7, #13]
 8009076:	f003 0301 	and.w	r3, r3, #1
 800907a:	2b00      	cmp	r3, #0
 800907c:	d003      	beq.n	8009086 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	2201      	movs	r2, #1
 8009082:	701a      	strb	r2, [r3, #0]
 8009084:	e002      	b.n	800908c <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	2200      	movs	r2, #0
 800908a:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800908c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009090:	4618      	mov	r0, r3
 8009092:	3710      	adds	r7, #16
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}

08009098 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8009098:	b5b0      	push	{r4, r5, r7, lr}
 800909a:	b096      	sub	sp, #88	; 0x58
 800909c:	af02      	add	r7, sp, #8
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80090a2:	2300      	movs	r3, #0
 80090a4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 80090a8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80090ac:	230c      	movs	r3, #12
 80090ae:	2114      	movs	r1, #20
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f003 fcfb 	bl	800caac <VL53L0X_ReadMulti>
 80090b6:	4603      	mov	r3, r0
 80090b8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 80090bc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	f040 80d1 	bne.w	8009268 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	2200      	movs	r2, #0
 80090ca:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	2200      	movs	r2, #0
 80090d0:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 80090d2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	021b      	lsls	r3, r3, #8
 80090da:	b29a      	uxth	r2, r3
 80090dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80090e0:	b29b      	uxth	r3, r3
 80090e2:	4413      	add	r3, r2
 80090e4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	2200      	movs	r2, #0
 80090ec:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 80090ee:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80090f2:	b29b      	uxth	r3, r3
 80090f4:	021b      	lsls	r3, r3, #8
 80090f6:	b29a      	uxth	r2, r3
 80090f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80090fc:	b29b      	uxth	r3, r3
 80090fe:	4413      	add	r3, r2
 8009100:	b29b      	uxth	r3, r3
 8009102:	025b      	lsls	r3, r3, #9
 8009104:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800910a:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 800910c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8009110:	b29b      	uxth	r3, r3
 8009112:	021b      	lsls	r3, r3, #8
 8009114:	b29a      	uxth	r2, r3
 8009116:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800911a:	b29b      	uxth	r3, r3
 800911c:	4413      	add	r3, r2
 800911e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8009122:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009126:	025b      	lsls	r3, r3, #9
 8009128:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800912e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8009132:	b29b      	uxth	r3, r3
 8009134:	021b      	lsls	r3, r3, #8
 8009136:	b29a      	uxth	r2, r3
 8009138:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800913c:	b29b      	uxth	r3, r3
 800913e:	4413      	add	r3, r2
 8009140:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800914a:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 800914c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009150:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 800915a:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8009162:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8009166:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009168:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800916c:	d046      	beq.n	80091fc <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800916e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009170:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8009174:	fb02 f303 	mul.w	r3, r2, r3
 8009178:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800917c:	4a57      	ldr	r2, [pc, #348]	; (80092dc <VL53L0X_GetRangingMeasurementData+0x244>)
 800917e:	fb82 1203 	smull	r1, r2, r2, r3
 8009182:	1192      	asrs	r2, r2, #6
 8009184:	17db      	asrs	r3, r3, #31
 8009186:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8009188:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6a1b      	ldr	r3, [r3, #32]
 8009190:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	7f1b      	ldrb	r3, [r3, #28]
 8009196:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800919a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d02c      	beq.n	80091fc <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 80091a2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80091a4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80091a8:	fb02 f303 	mul.w	r3, r2, r3
 80091ac:	121a      	asrs	r2, r3, #8
					<= 0) {
 80091ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 80091b0:	429a      	cmp	r2, r3
 80091b2:	d10d      	bne.n	80091d0 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 80091b4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d004      	beq.n	80091c6 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 80091bc:	f242 23b8 	movw	r3, #8888	; 0x22b8
 80091c0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80091c4:	e016      	b.n	80091f4 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 80091c6:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 80091ca:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80091ce:	e011      	b.n	80091f4 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 80091d0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80091d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80091d6:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 80091da:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80091dc:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 80091e0:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 80091e4:	121b      	asrs	r3, r3, #8
 80091e6:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 80091e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091ea:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 80091ec:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 80091f0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 80091f4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80091f8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 80091fc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009200:	2b00      	cmp	r3, #0
 8009202:	d00d      	beq.n	8009220 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8009204:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009208:	089b      	lsrs	r3, r3, #2
 800920a:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8009210:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009214:	b2db      	uxtb	r3, r3
 8009216:	019b      	lsls	r3, r3, #6
 8009218:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	75da      	strb	r2, [r3, #23]
 800921e:	e006      	b.n	800922e <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8009226:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	2200      	movs	r2, #0
 800922c:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800922e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8009232:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8009236:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800923a:	9301      	str	r3, [sp, #4]
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	9300      	str	r3, [sp, #0]
 8009240:	4613      	mov	r3, r2
 8009242:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f003 f9e5 	bl	800c614 <VL53L0X_get_pal_range_status>
 800924a:	4603      	mov	r3, r0
 800924c:	461a      	mov	r2, r3
 800924e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009252:	4313      	orrs	r3, r2
 8009254:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8009258:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800925c:	2b00      	cmp	r3, #0
 800925e:	d103      	bne.n	8009268 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8009260:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009268:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800926c:	2b00      	cmp	r3, #0
 800926e:	d12f      	bne.n	80092d0 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f107 040c 	add.w	r4, r7, #12
 8009276:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800927a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800927c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800927e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009282:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800928a:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8009290:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8009298:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800929e:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 80092a4:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 80092aa:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 80092b0:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 80092b6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f103 0450 	add.w	r4, r3, #80	; 0x50
 80092c0:	f107 050c 	add.w	r5, r7, #12
 80092c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80092c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80092c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80092cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80092d0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3750      	adds	r7, #80	; 0x50
 80092d8:	46bd      	mov	sp, r7
 80092da:	bdb0      	pop	{r4, r5, r7, pc}
 80092dc:	10624dd3 	.word	0x10624dd3

080092e0 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b084      	sub	sp, #16
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80092ea:	2300      	movs	r3, #0
 80092ec:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80092ee:	2100      	movs	r1, #0
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f7ff f8d1 	bl	8008498 <VL53L0X_SetDeviceMode>
 80092f6:	4603      	mov	r3, r0
 80092f8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80092fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d104      	bne.n	800930c <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f7ff fd16 	bl	8008d34 <VL53L0X_PerformSingleMeasurement>
 8009308:	4603      	mov	r3, r0
 800930a:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800930c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d105      	bne.n	8009320 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8009314:	6839      	ldr	r1, [r7, #0]
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f7ff febe 	bl	8009098 <VL53L0X_GetRangingMeasurementData>
 800931c:	4603      	mov	r3, r0
 800931e:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8009320:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d105      	bne.n	8009334 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8009328:	2100      	movs	r1, #0
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f000 f962 	bl	80095f4 <VL53L0X_ClearInterruptMask>
 8009330:	4603      	mov	r3, r0
 8009332:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8009334:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009338:	4618      	mov	r0, r3
 800933a:	3710      	adds	r7, #16
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b084      	sub	sp, #16
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	4608      	mov	r0, r1
 800934a:	4611      	mov	r1, r2
 800934c:	461a      	mov	r2, r3
 800934e:	4603      	mov	r3, r0
 8009350:	70fb      	strb	r3, [r7, #3]
 8009352:	460b      	mov	r3, r1
 8009354:	70bb      	strb	r3, [r7, #2]
 8009356:	4613      	mov	r3, r2
 8009358:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800935a:	2300      	movs	r3, #0
 800935c:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800935e:	78fb      	ldrb	r3, [r7, #3]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d002      	beq.n	800936a <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8009364:	23f6      	movs	r3, #246	; 0xf6
 8009366:	73fb      	strb	r3, [r7, #15]
 8009368:	e107      	b.n	800957a <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800936a:	78bb      	ldrb	r3, [r7, #2]
 800936c:	2b14      	cmp	r3, #20
 800936e:	d110      	bne.n	8009392 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8009370:	7e3b      	ldrb	r3, [r7, #24]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d102      	bne.n	800937c <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8009376:	2310      	movs	r3, #16
 8009378:	73bb      	strb	r3, [r7, #14]
 800937a:	e001      	b.n	8009380 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 800937c:	2301      	movs	r3, #1
 800937e:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8009380:	7bbb      	ldrb	r3, [r7, #14]
 8009382:	461a      	mov	r2, r3
 8009384:	2184      	movs	r1, #132	; 0x84
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f003 fbbc 	bl	800cb04 <VL53L0X_WrByte>
 800938c:	4603      	mov	r3, r0
 800938e:	73fb      	strb	r3, [r7, #15]
 8009390:	e0f3      	b.n	800957a <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8009392:	78bb      	ldrb	r3, [r7, #2]
 8009394:	2b15      	cmp	r3, #21
 8009396:	f040 8097 	bne.w	80094c8 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800939a:	2201      	movs	r2, #1
 800939c:	21ff      	movs	r1, #255	; 0xff
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f003 fbb0 	bl	800cb04 <VL53L0X_WrByte>
 80093a4:	4603      	mov	r3, r0
 80093a6:	461a      	mov	r2, r3
 80093a8:	7bfb      	ldrb	r3, [r7, #15]
 80093aa:	4313      	orrs	r3, r2
 80093ac:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80093ae:	2200      	movs	r2, #0
 80093b0:	2100      	movs	r1, #0
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f003 fba6 	bl	800cb04 <VL53L0X_WrByte>
 80093b8:	4603      	mov	r3, r0
 80093ba:	461a      	mov	r2, r3
 80093bc:	7bfb      	ldrb	r3, [r7, #15]
 80093be:	4313      	orrs	r3, r2
 80093c0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80093c2:	2200      	movs	r2, #0
 80093c4:	21ff      	movs	r1, #255	; 0xff
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f003 fb9c 	bl	800cb04 <VL53L0X_WrByte>
 80093cc:	4603      	mov	r3, r0
 80093ce:	461a      	mov	r2, r3
 80093d0:	7bfb      	ldrb	r3, [r7, #15]
 80093d2:	4313      	orrs	r3, r2
 80093d4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80093d6:	2201      	movs	r2, #1
 80093d8:	2180      	movs	r1, #128	; 0x80
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f003 fb92 	bl	800cb04 <VL53L0X_WrByte>
 80093e0:	4603      	mov	r3, r0
 80093e2:	461a      	mov	r2, r3
 80093e4:	7bfb      	ldrb	r3, [r7, #15]
 80093e6:	4313      	orrs	r3, r2
 80093e8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 80093ea:	2202      	movs	r2, #2
 80093ec:	2185      	movs	r1, #133	; 0x85
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f003 fb88 	bl	800cb04 <VL53L0X_WrByte>
 80093f4:	4603      	mov	r3, r0
 80093f6:	461a      	mov	r2, r3
 80093f8:	7bfb      	ldrb	r3, [r7, #15]
 80093fa:	4313      	orrs	r3, r2
 80093fc:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 80093fe:	2204      	movs	r2, #4
 8009400:	21ff      	movs	r1, #255	; 0xff
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f003 fb7e 	bl	800cb04 <VL53L0X_WrByte>
 8009408:	4603      	mov	r3, r0
 800940a:	461a      	mov	r2, r3
 800940c:	7bfb      	ldrb	r3, [r7, #15]
 800940e:	4313      	orrs	r3, r2
 8009410:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8009412:	2200      	movs	r2, #0
 8009414:	21cd      	movs	r1, #205	; 0xcd
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f003 fb74 	bl	800cb04 <VL53L0X_WrByte>
 800941c:	4603      	mov	r3, r0
 800941e:	461a      	mov	r2, r3
 8009420:	7bfb      	ldrb	r3, [r7, #15]
 8009422:	4313      	orrs	r3, r2
 8009424:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8009426:	2211      	movs	r2, #17
 8009428:	21cc      	movs	r1, #204	; 0xcc
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f003 fb6a 	bl	800cb04 <VL53L0X_WrByte>
 8009430:	4603      	mov	r3, r0
 8009432:	461a      	mov	r2, r3
 8009434:	7bfb      	ldrb	r3, [r7, #15]
 8009436:	4313      	orrs	r3, r2
 8009438:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800943a:	2207      	movs	r2, #7
 800943c:	21ff      	movs	r1, #255	; 0xff
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f003 fb60 	bl	800cb04 <VL53L0X_WrByte>
 8009444:	4603      	mov	r3, r0
 8009446:	461a      	mov	r2, r3
 8009448:	7bfb      	ldrb	r3, [r7, #15]
 800944a:	4313      	orrs	r3, r2
 800944c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800944e:	2200      	movs	r2, #0
 8009450:	21be      	movs	r1, #190	; 0xbe
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f003 fb56 	bl	800cb04 <VL53L0X_WrByte>
 8009458:	4603      	mov	r3, r0
 800945a:	461a      	mov	r2, r3
 800945c:	7bfb      	ldrb	r3, [r7, #15]
 800945e:	4313      	orrs	r3, r2
 8009460:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8009462:	2206      	movs	r2, #6
 8009464:	21ff      	movs	r1, #255	; 0xff
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f003 fb4c 	bl	800cb04 <VL53L0X_WrByte>
 800946c:	4603      	mov	r3, r0
 800946e:	461a      	mov	r2, r3
 8009470:	7bfb      	ldrb	r3, [r7, #15]
 8009472:	4313      	orrs	r3, r2
 8009474:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8009476:	2209      	movs	r2, #9
 8009478:	21cc      	movs	r1, #204	; 0xcc
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f003 fb42 	bl	800cb04 <VL53L0X_WrByte>
 8009480:	4603      	mov	r3, r0
 8009482:	461a      	mov	r2, r3
 8009484:	7bfb      	ldrb	r3, [r7, #15]
 8009486:	4313      	orrs	r3, r2
 8009488:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800948a:	2200      	movs	r2, #0
 800948c:	21ff      	movs	r1, #255	; 0xff
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f003 fb38 	bl	800cb04 <VL53L0X_WrByte>
 8009494:	4603      	mov	r3, r0
 8009496:	461a      	mov	r2, r3
 8009498:	7bfb      	ldrb	r3, [r7, #15]
 800949a:	4313      	orrs	r3, r2
 800949c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800949e:	2201      	movs	r2, #1
 80094a0:	21ff      	movs	r1, #255	; 0xff
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f003 fb2e 	bl	800cb04 <VL53L0X_WrByte>
 80094a8:	4603      	mov	r3, r0
 80094aa:	461a      	mov	r2, r3
 80094ac:	7bfb      	ldrb	r3, [r7, #15]
 80094ae:	4313      	orrs	r3, r2
 80094b0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80094b2:	2200      	movs	r2, #0
 80094b4:	2100      	movs	r1, #0
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f003 fb24 	bl	800cb04 <VL53L0X_WrByte>
 80094bc:	4603      	mov	r3, r0
 80094be:	461a      	mov	r2, r3
 80094c0:	7bfb      	ldrb	r3, [r7, #15]
 80094c2:	4313      	orrs	r3, r2
 80094c4:	73fb      	strb	r3, [r7, #15]
 80094c6:	e058      	b.n	800957a <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 80094c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d121      	bne.n	8009514 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 80094d0:	787b      	ldrb	r3, [r7, #1]
 80094d2:	2b04      	cmp	r3, #4
 80094d4:	d81b      	bhi.n	800950e <VL53L0X_SetGpioConfig+0x1ce>
 80094d6:	a201      	add	r2, pc, #4	; (adr r2, 80094dc <VL53L0X_SetGpioConfig+0x19c>)
 80094d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094dc:	080094f1 	.word	0x080094f1
 80094e0:	080094f7 	.word	0x080094f7
 80094e4:	080094fd 	.word	0x080094fd
 80094e8:	08009503 	.word	0x08009503
 80094ec:	08009509 	.word	0x08009509
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 80094f0:	2300      	movs	r3, #0
 80094f2:	73bb      	strb	r3, [r7, #14]
				break;
 80094f4:	e00f      	b.n	8009516 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 80094f6:	2301      	movs	r3, #1
 80094f8:	73bb      	strb	r3, [r7, #14]
				break;
 80094fa:	e00c      	b.n	8009516 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 80094fc:	2302      	movs	r3, #2
 80094fe:	73bb      	strb	r3, [r7, #14]
				break;
 8009500:	e009      	b.n	8009516 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8009502:	2303      	movs	r3, #3
 8009504:	73bb      	strb	r3, [r7, #14]
				break;
 8009506:	e006      	b.n	8009516 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8009508:	2304      	movs	r3, #4
 800950a:	73bb      	strb	r3, [r7, #14]
				break;
 800950c:	e003      	b.n	8009516 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 800950e:	23f5      	movs	r3, #245	; 0xf5
 8009510:	73fb      	strb	r3, [r7, #15]
 8009512:	e000      	b.n	8009516 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8009514:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 8009516:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d107      	bne.n	800952e <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 800951e:	7bbb      	ldrb	r3, [r7, #14]
 8009520:	461a      	mov	r2, r3
 8009522:	210a      	movs	r1, #10
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f003 faed 	bl	800cb04 <VL53L0X_WrByte>
 800952a:	4603      	mov	r3, r0
 800952c:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800952e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d10f      	bne.n	8009556 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8009536:	7e3b      	ldrb	r3, [r7, #24]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d102      	bne.n	8009542 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 800953c:	2300      	movs	r3, #0
 800953e:	73bb      	strb	r3, [r7, #14]
 8009540:	e001      	b.n	8009546 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 8009542:	2310      	movs	r3, #16
 8009544:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8009546:	7bbb      	ldrb	r3, [r7, #14]
 8009548:	22ef      	movs	r2, #239	; 0xef
 800954a:	2184      	movs	r1, #132	; 0x84
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f003 fb27 	bl	800cba0 <VL53L0X_UpdateByte>
 8009552:	4603      	mov	r3, r0
 8009554:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8009556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d103      	bne.n	8009566 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	787a      	ldrb	r2, [r7, #1]
 8009562:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8009566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d105      	bne.n	800957a <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800956e:	2100      	movs	r1, #0
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f000 f83f 	bl	80095f4 <VL53L0X_ClearInterruptMask>
 8009576:	4603      	mov	r3, r0
 8009578:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800957a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800957e:	4618      	mov	r0, r3
 8009580:	3710      	adds	r7, #16
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}
 8009586:	bf00      	nop

08009588 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b086      	sub	sp, #24
 800958c:	af00      	add	r7, sp, #0
 800958e:	60f8      	str	r0, [r7, #12]
 8009590:	607a      	str	r2, [r7, #4]
 8009592:	603b      	str	r3, [r7, #0]
 8009594:	460b      	mov	r3, r1
 8009596:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009598:	2300      	movs	r3, #0
 800959a:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800959c:	f107 0314 	add.w	r3, r7, #20
 80095a0:	461a      	mov	r2, r3
 80095a2:	210e      	movs	r1, #14
 80095a4:	68f8      	ldr	r0, [r7, #12]
 80095a6:	f003 fb59 	bl	800cc5c <VL53L0X_RdWord>
 80095aa:	4603      	mov	r3, r0
 80095ac:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80095ae:	8abb      	ldrh	r3, [r7, #20]
 80095b0:	045b      	lsls	r3, r3, #17
 80095b2:	461a      	mov	r2, r3
 80095b4:	4b0e      	ldr	r3, [pc, #56]	; (80095f0 <VL53L0X_GetInterruptThresholds+0x68>)
 80095b6:	4013      	ands	r3, r2
 80095b8:	687a      	ldr	r2, [r7, #4]
 80095ba:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 80095bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d10f      	bne.n	80095e4 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 80095c4:	f107 0314 	add.w	r3, r7, #20
 80095c8:	461a      	mov	r2, r3
 80095ca:	210c      	movs	r1, #12
 80095cc:	68f8      	ldr	r0, [r7, #12]
 80095ce:	f003 fb45 	bl	800cc5c <VL53L0X_RdWord>
 80095d2:	4603      	mov	r3, r0
 80095d4:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80095d6:	8abb      	ldrh	r3, [r7, #20]
 80095d8:	045b      	lsls	r3, r3, #17
 80095da:	461a      	mov	r2, r3
 80095dc:	4b04      	ldr	r3, [pc, #16]	; (80095f0 <VL53L0X_GetInterruptThresholds+0x68>)
 80095de:	4013      	ands	r3, r2
		*pThresholdHigh =
 80095e0:	683a      	ldr	r2, [r7, #0]
 80095e2:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80095e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3718      	adds	r7, #24
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}
 80095f0:	1ffe0000 	.word	0x1ffe0000

080095f4 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b084      	sub	sp, #16
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80095fe:	2300      	movs	r3, #0
 8009600:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8009602:	2300      	movs	r3, #0
 8009604:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8009606:	2201      	movs	r2, #1
 8009608:	210b      	movs	r1, #11
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f003 fa7a 	bl	800cb04 <VL53L0X_WrByte>
 8009610:	4603      	mov	r3, r0
 8009612:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8009614:	2200      	movs	r2, #0
 8009616:	210b      	movs	r1, #11
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f003 fa73 	bl	800cb04 <VL53L0X_WrByte>
 800961e:	4603      	mov	r3, r0
 8009620:	461a      	mov	r2, r3
 8009622:	7bfb      	ldrb	r3, [r7, #15]
 8009624:	4313      	orrs	r3, r2
 8009626:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8009628:	f107 030d 	add.w	r3, r7, #13
 800962c:	461a      	mov	r2, r3
 800962e:	2113      	movs	r1, #19
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f003 fae9 	bl	800cc08 <VL53L0X_RdByte>
 8009636:	4603      	mov	r3, r0
 8009638:	461a      	mov	r2, r3
 800963a:	7bfb      	ldrb	r3, [r7, #15]
 800963c:	4313      	orrs	r3, r2
 800963e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8009640:	7bbb      	ldrb	r3, [r7, #14]
 8009642:	3301      	adds	r3, #1
 8009644:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8009646:	7b7b      	ldrb	r3, [r7, #13]
 8009648:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800964c:	2b00      	cmp	r3, #0
 800964e:	d006      	beq.n	800965e <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8009650:	7bbb      	ldrb	r3, [r7, #14]
 8009652:	2b02      	cmp	r3, #2
 8009654:	d803      	bhi.n	800965e <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8009656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d0d3      	beq.n	8009606 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800965e:	7bbb      	ldrb	r3, [r7, #14]
 8009660:	2b02      	cmp	r3, #2
 8009662:	d901      	bls.n	8009668 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8009664:	23f4      	movs	r3, #244	; 0xf4
 8009666:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8009668:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800966c:	4618      	mov	r0, r3
 800966e:	3710      	adds	r7, #16
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}

08009674 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b084      	sub	sp, #16
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800967e:	2300      	movs	r3, #0
 8009680:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8009682:	f107 030e 	add.w	r3, r7, #14
 8009686:	461a      	mov	r2, r3
 8009688:	2113      	movs	r1, #19
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f003 fabc 	bl	800cc08 <VL53L0X_RdByte>
 8009690:	4603      	mov	r3, r0
 8009692:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8009694:	7bbb      	ldrb	r3, [r7, #14]
 8009696:	f003 0207 	and.w	r2, r3, #7
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800969e:	7bbb      	ldrb	r3, [r7, #14]
 80096a0:	f003 0318 	and.w	r3, r3, #24
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d001      	beq.n	80096ac <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 80096a8:	23fa      	movs	r3, #250	; 0xfa
 80096aa:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80096ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3710      	adds	r7, #16
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b086      	sub	sp, #24
 80096bc:	af00      	add	r7, sp, #0
 80096be:	60f8      	str	r0, [r7, #12]
 80096c0:	60b9      	str	r1, [r7, #8]
 80096c2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80096c4:	2300      	movs	r3, #0
 80096c6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 80096c8:	687a      	ldr	r2, [r7, #4]
 80096ca:	68b9      	ldr	r1, [r7, #8]
 80096cc:	68f8      	ldr	r0, [r7, #12]
 80096ce:	f000 fa03 	bl	8009ad8 <VL53L0X_perform_ref_spad_management>
 80096d2:	4603      	mov	r3, r0
 80096d4:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 80096d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3718      	adds	r7, #24
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}

080096e2 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 80096e2:	b580      	push	{r7, lr}
 80096e4:	b084      	sub	sp, #16
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	6078      	str	r0, [r7, #4]
 80096ea:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80096ec:	2300      	movs	r3, #0
 80096ee:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 80096f0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80096f4:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 80096f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80096fa:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 80096fc:	f107 0308 	add.w	r3, r7, #8
 8009700:	461a      	mov	r2, r3
 8009702:	2128      	movs	r1, #40	; 0x28
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f003 faa9 	bl	800cc5c <VL53L0X_RdWord>
 800970a:	4603      	mov	r3, r0
 800970c:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800970e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d11e      	bne.n	8009754 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8009716:	893b      	ldrh	r3, [r7, #8]
 8009718:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800971c:	b29b      	uxth	r3, r3
 800971e:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8009720:	893b      	ldrh	r3, [r7, #8]
 8009722:	461a      	mov	r2, r3
 8009724:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009728:	429a      	cmp	r2, r3
 800972a:	dd0b      	ble.n	8009744 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800972c:	893a      	ldrh	r2, [r7, #8]
 800972e:	897b      	ldrh	r3, [r7, #10]
 8009730:	1ad3      	subs	r3, r2, r3
 8009732:	b29b      	uxth	r3, r3
 8009734:	b21b      	sxth	r3, r3
 8009736:	461a      	mov	r2, r3
					* 250;
 8009738:	23fa      	movs	r3, #250	; 0xfa
 800973a:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	601a      	str	r2, [r3, #0]
 8009742:	e007      	b.n	8009754 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8009744:	893b      	ldrh	r3, [r7, #8]
 8009746:	b21b      	sxth	r3, r3
 8009748:	461a      	mov	r2, r3
 800974a:	23fa      	movs	r3, #250	; 0xfa
 800974c:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8009754:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009758:	4618      	mov	r0, r3
 800975a:	3710      	adds	r7, #16
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}

08009760 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8009760:	b480      	push	{r7}
 8009762:	b08b      	sub	sp, #44	; 0x2c
 8009764:	af00      	add	r7, sp, #0
 8009766:	60f8      	str	r0, [r7, #12]
 8009768:	60b9      	str	r1, [r7, #8]
 800976a:	607a      	str	r2, [r7, #4]
 800976c:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800976e:	2308      	movs	r3, #8
 8009770:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8009772:	2300      	movs	r3, #0
 8009774:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	f04f 32ff 	mov.w	r2, #4294967295
 800977c:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800977e:	687a      	ldr	r2, [r7, #4]
 8009780:	69bb      	ldr	r3, [r7, #24]
 8009782:	fbb2 f3f3 	udiv	r3, r2, r3
 8009786:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	69ba      	ldr	r2, [r7, #24]
 800978c:	fbb3 f2f2 	udiv	r2, r3, r2
 8009790:	69b9      	ldr	r1, [r7, #24]
 8009792:	fb01 f202 	mul.w	r2, r1, r2
 8009796:	1a9b      	subs	r3, r3, r2
 8009798:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	627b      	str	r3, [r7, #36]	; 0x24
 800979e:	e030      	b.n	8009802 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 80097a0:	2300      	movs	r3, #0
 80097a2:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 80097a4:	68fa      	ldr	r2, [r7, #12]
 80097a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a8:	4413      	add	r3, r2
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 80097ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	429a      	cmp	r2, r3
 80097b4:	d11e      	bne.n	80097f4 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 80097b6:	7ffa      	ldrb	r2, [r7, #31]
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	fa42 f303 	asr.w	r3, r2, r3
 80097be:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 80097c4:	e016      	b.n	80097f4 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 80097c6:	7ffb      	ldrb	r3, [r7, #31]
 80097c8:	f003 0301 	and.w	r3, r3, #1
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d00b      	beq.n	80097e8 <get_next_good_spad+0x88>
				success = 1;
 80097d0:	2301      	movs	r3, #1
 80097d2:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 80097d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d6:	69ba      	ldr	r2, [r7, #24]
 80097d8:	fb03 f202 	mul.w	r2, r3, r2
 80097dc:	6a3b      	ldr	r3, [r7, #32]
 80097de:	4413      	add	r3, r2
 80097e0:	461a      	mov	r2, r3
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	601a      	str	r2, [r3, #0]
				break;
 80097e6:	e009      	b.n	80097fc <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 80097e8:	7ffb      	ldrb	r3, [r7, #31]
 80097ea:	085b      	lsrs	r3, r3, #1
 80097ec:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 80097ee:	6a3b      	ldr	r3, [r7, #32]
 80097f0:	3301      	adds	r3, #1
 80097f2:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 80097f4:	6a3a      	ldr	r2, [r7, #32]
 80097f6:	69bb      	ldr	r3, [r7, #24]
 80097f8:	429a      	cmp	r2, r3
 80097fa:	d3e4      	bcc.n	80097c6 <get_next_good_spad+0x66>
				coarseIndex++) {
 80097fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097fe:	3301      	adds	r3, #1
 8009800:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8009802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	429a      	cmp	r2, r3
 8009808:	d202      	bcs.n	8009810 <get_next_good_spad+0xb0>
 800980a:	7fbb      	ldrb	r3, [r7, #30]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d0c7      	beq.n	80097a0 <get_next_good_spad+0x40>
		}
	}
}
 8009810:	bf00      	nop
 8009812:	372c      	adds	r7, #44	; 0x2c
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr

0800981c <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 800981c:	b480      	push	{r7}
 800981e:	b085      	sub	sp, #20
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8009824:	2301      	movs	r3, #1
 8009826:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	099b      	lsrs	r3, r3, #6
 800982c:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800982e:	4a07      	ldr	r2, [pc, #28]	; (800984c <is_aperture+0x30>)
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d101      	bne.n	800983e <is_aperture+0x22>
		isAperture = 0;
 800983a:	2300      	movs	r3, #0
 800983c:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800983e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009840:	4618      	mov	r0, r3
 8009842:	3714      	adds	r7, #20
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr
 800984c:	200002bc 	.word	0x200002bc

08009850 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8009850:	b480      	push	{r7}
 8009852:	b089      	sub	sp, #36	; 0x24
 8009854:	af00      	add	r7, sp, #0
 8009856:	60f8      	str	r0, [r7, #12]
 8009858:	60b9      	str	r1, [r7, #8]
 800985a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800985c:	2300      	movs	r3, #0
 800985e:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8009860:	2308      	movs	r3, #8
 8009862:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	69bb      	ldr	r3, [r7, #24]
 8009868:	fbb2 f3f3 	udiv	r3, r2, r3
 800986c:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	69ba      	ldr	r2, [r7, #24]
 8009872:	fbb3 f2f2 	udiv	r2, r3, r2
 8009876:	69b9      	ldr	r1, [r7, #24]
 8009878:	fb01 f202 	mul.w	r2, r1, r2
 800987c:	1a9b      	subs	r3, r3, r2
 800987e:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8009880:	697a      	ldr	r2, [r7, #20]
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	429a      	cmp	r2, r3
 8009886:	d302      	bcc.n	800988e <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8009888:	23ce      	movs	r3, #206	; 0xce
 800988a:	77fb      	strb	r3, [r7, #31]
 800988c:	e010      	b.n	80098b0 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800988e:	68fa      	ldr	r2, [r7, #12]
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	4413      	add	r3, r2
 8009894:	781b      	ldrb	r3, [r3, #0]
 8009896:	b25a      	sxtb	r2, r3
 8009898:	2101      	movs	r1, #1
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	fa01 f303 	lsl.w	r3, r1, r3
 80098a0:	b25b      	sxtb	r3, r3
 80098a2:	4313      	orrs	r3, r2
 80098a4:	b259      	sxtb	r1, r3
 80098a6:	68fa      	ldr	r2, [r7, #12]
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	4413      	add	r3, r2
 80098ac:	b2ca      	uxtb	r2, r1
 80098ae:	701a      	strb	r2, [r3, #0]

	return status;
 80098b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3724      	adds	r7, #36	; 0x24
 80098b8:	46bd      	mov	sp, r7
 80098ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098be:	4770      	bx	lr

080098c0 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b084      	sub	sp, #16
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 80098ca:	2306      	movs	r3, #6
 80098cc:	683a      	ldr	r2, [r7, #0]
 80098ce:	21b0      	movs	r1, #176	; 0xb0
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f003 f8bb 	bl	800ca4c <VL53L0X_WriteMulti>
 80098d6:	4603      	mov	r3, r0
 80098d8:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 80098da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3710      	adds	r7, #16
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}

080098e6 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80098e6:	b580      	push	{r7, lr}
 80098e8:	b084      	sub	sp, #16
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	6078      	str	r0, [r7, #4]
 80098ee:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 80098f0:	2306      	movs	r3, #6
 80098f2:	683a      	ldr	r2, [r7, #0]
 80098f4:	21b0      	movs	r1, #176	; 0xb0
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f003 f8d8 	bl	800caac <VL53L0X_ReadMulti>
 80098fc:	4603      	mov	r3, r0
 80098fe:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8009900:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009904:	4618      	mov	r0, r3
 8009906:	3710      	adds	r7, #16
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}

0800990c <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b08c      	sub	sp, #48	; 0x30
 8009910:	af00      	add	r7, sp, #0
 8009912:	60f8      	str	r0, [r7, #12]
 8009914:	607a      	str	r2, [r7, #4]
 8009916:	603b      	str	r3, [r7, #0]
 8009918:	460b      	mov	r3, r1
 800991a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800991c:	2300      	movs	r3, #0
 800991e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8009922:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009924:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8009926:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009928:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800992a:	2300      	movs	r3, #0
 800992c:	62bb      	str	r3, [r7, #40]	; 0x28
 800992e:	e02b      	b.n	8009988 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8009930:	f107 031c 	add.w	r3, r7, #28
 8009934:	6a3a      	ldr	r2, [r7, #32]
 8009936:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f7ff ff11 	bl	8009760 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800993e:	69fb      	ldr	r3, [r7, #28]
 8009940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009944:	d103      	bne.n	800994e <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8009946:	23ce      	movs	r3, #206	; 0xce
 8009948:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800994c:	e020      	b.n	8009990 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800994e:	69fb      	ldr	r3, [r7, #28]
 8009950:	461a      	mov	r2, r3
 8009952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009954:	4413      	add	r3, r2
 8009956:	4618      	mov	r0, r3
 8009958:	f7ff ff60 	bl	800981c <is_aperture>
 800995c:	4603      	mov	r3, r0
 800995e:	461a      	mov	r2, r3
 8009960:	7afb      	ldrb	r3, [r7, #11]
 8009962:	4293      	cmp	r3, r2
 8009964:	d003      	beq.n	800996e <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8009966:	23ce      	movs	r3, #206	; 0xce
 8009968:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800996c:	e010      	b.n	8009990 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800996e:	69fb      	ldr	r3, [r7, #28]
 8009970:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8009972:	6a3a      	ldr	r2, [r7, #32]
 8009974:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009976:	6838      	ldr	r0, [r7, #0]
 8009978:	f7ff ff6a 	bl	8009850 <enable_spad_bit>
		currentSpad++;
 800997c:	6a3b      	ldr	r3, [r7, #32]
 800997e:	3301      	adds	r3, #1
 8009980:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8009982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009984:	3301      	adds	r3, #1
 8009986:	62bb      	str	r3, [r7, #40]	; 0x28
 8009988:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800998a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800998c:	429a      	cmp	r2, r3
 800998e:	d3cf      	bcc.n	8009930 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8009990:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009992:	6a3a      	ldr	r2, [r7, #32]
 8009994:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8009996:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800999a:	2b00      	cmp	r3, #0
 800999c:	d106      	bne.n	80099ac <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800999e:	6839      	ldr	r1, [r7, #0]
 80099a0:	68f8      	ldr	r0, [r7, #12]
 80099a2:	f7ff ff8d 	bl	80098c0 <set_ref_spad_map>
 80099a6:	4603      	mov	r3, r0
 80099a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 80099ac:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d121      	bne.n	80099f8 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 80099b4:	f107 0314 	add.w	r3, r7, #20
 80099b8:	4619      	mov	r1, r3
 80099ba:	68f8      	ldr	r0, [r7, #12]
 80099bc:	f7ff ff93 	bl	80098e6 <get_ref_spad_map>
 80099c0:	4603      	mov	r3, r0
 80099c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 80099c6:	2300      	movs	r3, #0
 80099c8:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 80099ca:	e011      	b.n	80099f0 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 80099cc:	683a      	ldr	r2, [r7, #0]
 80099ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d0:	4413      	add	r3, r2
 80099d2:	781a      	ldrb	r2, [r3, #0]
 80099d4:	f107 0114 	add.w	r1, r7, #20
 80099d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099da:	440b      	add	r3, r1
 80099dc:	781b      	ldrb	r3, [r3, #0]
 80099de:	429a      	cmp	r2, r3
 80099e0:	d003      	beq.n	80099ea <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 80099e2:	23ce      	movs	r3, #206	; 0xce
 80099e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 80099e8:	e006      	b.n	80099f8 <enable_ref_spads+0xec>
			}
			i++;
 80099ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ec:	3301      	adds	r3, #1
 80099ee:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 80099f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099f4:	429a      	cmp	r2, r3
 80099f6:	d3e9      	bcc.n	80099cc <enable_ref_spads+0xc0>
		}
	}
	return status;
 80099f8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	3730      	adds	r7, #48	; 0x30
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}

08009a04 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b08a      	sub	sp, #40	; 0x28
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8009a14:	2300      	movs	r3, #0
 8009a16:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8009a20:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8009a24:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d107      	bne.n	8009a3c <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8009a2c:	22c0      	movs	r2, #192	; 0xc0
 8009a2e:	2101      	movs	r1, #1
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f003 f867 	bl	800cb04 <VL53L0X_WrByte>
 8009a36:	4603      	mov	r3, r0
 8009a38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8009a3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d108      	bne.n	8009a56 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8009a44:	f107 0308 	add.w	r3, r7, #8
 8009a48:	4619      	mov	r1, r3
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f7ff fc48 	bl	80092e0 <VL53L0X_PerformSingleRangingMeasurement>
 8009a50:	4603      	mov	r3, r0
 8009a52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8009a56:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d107      	bne.n	8009a6e <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009a5e:	2201      	movs	r2, #1
 8009a60:	21ff      	movs	r1, #255	; 0xff
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f003 f84e 	bl	800cb04 <VL53L0X_WrByte>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8009a6e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d107      	bne.n	8009a86 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8009a76:	683a      	ldr	r2, [r7, #0]
 8009a78:	21b6      	movs	r1, #182	; 0xb6
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f003 f8ee 	bl	800cc5c <VL53L0X_RdWord>
 8009a80:	4603      	mov	r3, r0
 8009a82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8009a86:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d107      	bne.n	8009a9e <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009a8e:	2200      	movs	r2, #0
 8009a90:	21ff      	movs	r1, #255	; 0xff
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f003 f836 	bl	800cb04 <VL53L0X_WrByte>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8009a9e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d112      	bne.n	8009acc <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009aa6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009aaa:	461a      	mov	r2, r3
 8009aac:	2101      	movs	r1, #1
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f003 f828 	bl	800cb04 <VL53L0X_WrByte>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8009aba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d104      	bne.n	8009acc <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009ac8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8009acc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3728      	adds	r7, #40	; 0x28
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}

08009ad8 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8009ad8:	b590      	push	{r4, r7, lr}
 8009ada:	b09d      	sub	sp, #116	; 0x74
 8009adc:	af06      	add	r7, sp, #24
 8009ade:	60f8      	str	r0, [r7, #12]
 8009ae0:	60b9      	str	r1, [r7, #8]
 8009ae2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8009aea:	23b4      	movs	r3, #180	; 0xb4
 8009aec:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8009af0:	2303      	movs	r3, #3
 8009af2:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8009af4:	232c      	movs	r3, #44	; 0x2c
 8009af6:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8009af8:	2300      	movs	r3, #0
 8009afa:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8009afc:	2300      	movs	r3, #0
 8009afe:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8009b00:	2300      	movs	r3, #0
 8009b02:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8009b04:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8009b08:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8009b12:	2306      	movs	r3, #6
 8009b14:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8009b16:	2300      	movs	r3, #0
 8009b18:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8009b24:	2300      	movs	r3, #0
 8009b26:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8009b30:	2300      	movs	r3, #0
 8009b32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8009b3c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8009b3e:	2300      	movs	r3, #0
 8009b40:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b42:	e009      	b.n	8009b58 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8009b44:	68fa      	ldr	r2, [r7, #12]
 8009b46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b48:	4413      	add	r3, r2
 8009b4a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8009b4e:	2200      	movs	r2, #0
 8009b50:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8009b52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b54:	3301      	adds	r3, #1
 8009b56:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	d3f1      	bcc.n	8009b44 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009b60:	2201      	movs	r2, #1
 8009b62:	21ff      	movs	r1, #255	; 0xff
 8009b64:	68f8      	ldr	r0, [r7, #12]
 8009b66:	f002 ffcd 	bl	800cb04 <VL53L0X_WrByte>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8009b70:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d107      	bne.n	8009b88 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8009b78:	2200      	movs	r2, #0
 8009b7a:	214f      	movs	r1, #79	; 0x4f
 8009b7c:	68f8      	ldr	r0, [r7, #12]
 8009b7e:	f002 ffc1 	bl	800cb04 <VL53L0X_WrByte>
 8009b82:	4603      	mov	r3, r0
 8009b84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8009b88:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d107      	bne.n	8009ba0 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8009b90:	222c      	movs	r2, #44	; 0x2c
 8009b92:	214e      	movs	r1, #78	; 0x4e
 8009b94:	68f8      	ldr	r0, [r7, #12]
 8009b96:	f002 ffb5 	bl	800cb04 <VL53L0X_WrByte>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8009ba0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d107      	bne.n	8009bb8 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009ba8:	2200      	movs	r2, #0
 8009baa:	21ff      	movs	r1, #255	; 0xff
 8009bac:	68f8      	ldr	r0, [r7, #12]
 8009bae:	f002 ffa9 	bl	800cb04 <VL53L0X_WrByte>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8009bb8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d109      	bne.n	8009bd4 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8009bc0:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	21b6      	movs	r1, #182	; 0xb6
 8009bc8:	68f8      	ldr	r0, [r7, #12]
 8009bca:	f002 ff9b 	bl	800cb04 <VL53L0X_WrByte>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8009bd4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d107      	bne.n	8009bec <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8009bdc:	2200      	movs	r2, #0
 8009bde:	2180      	movs	r1, #128	; 0x80
 8009be0:	68f8      	ldr	r0, [r7, #12]
 8009be2:	f002 ff8f 	bl	800cb04 <VL53L0X_WrByte>
 8009be6:	4603      	mov	r3, r0
 8009be8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8009bec:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d10a      	bne.n	8009c0a <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8009bf4:	f107 0210 	add.w	r2, r7, #16
 8009bf8:	f107 0111 	add.w	r1, r7, #17
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	68f8      	ldr	r0, [r7, #12]
 8009c00:	f000 fbbb 	bl	800a37a <VL53L0X_perform_ref_calibration>
 8009c04:	4603      	mov	r3, r0
 8009c06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8009c0a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d121      	bne.n	8009c56 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8009c12:	2300      	movs	r3, #0
 8009c14:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8009c16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c18:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8009c1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c20:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8009c2e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8009c32:	f107 0218 	add.w	r2, r7, #24
 8009c36:	9204      	str	r2, [sp, #16]
 8009c38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c3a:	9203      	str	r2, [sp, #12]
 8009c3c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009c3e:	9202      	str	r2, [sp, #8]
 8009c40:	9301      	str	r3, [sp, #4]
 8009c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c44:	9300      	str	r3, [sp, #0]
 8009c46:	4623      	mov	r3, r4
 8009c48:	4602      	mov	r2, r0
 8009c4a:	68f8      	ldr	r0, [r7, #12]
 8009c4c:	f7ff fe5e 	bl	800990c <enable_ref_spads>
 8009c50:	4603      	mov	r3, r0
 8009c52:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009c56:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d174      	bne.n	8009d48 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8009c5e:	69bb      	ldr	r3, [r7, #24]
 8009c60:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8009c62:	f107 0312 	add.w	r3, r7, #18
 8009c66:	4619      	mov	r1, r3
 8009c68:	68f8      	ldr	r0, [r7, #12]
 8009c6a:	f7ff fecb 	bl	8009a04 <perform_ref_signal_measurement>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8009c74:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d161      	bne.n	8009d40 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8009c7c:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8009c7e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009c80:	429a      	cmp	r2, r3
 8009c82:	d25d      	bcs.n	8009d40 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8009c84:	2300      	movs	r3, #0
 8009c86:	64bb      	str	r3, [r7, #72]	; 0x48
 8009c88:	e009      	b.n	8009c9e <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8009c8a:	68fa      	ldr	r2, [r7, #12]
 8009c8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c8e:	4413      	add	r3, r2
 8009c90:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8009c94:	2200      	movs	r2, #0
 8009c96:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8009c98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8009c9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d3f1      	bcc.n	8009c8a <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8009ca6:	e002      	b.n	8009cae <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8009ca8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009caa:	3301      	adds	r3, #1
 8009cac:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8009cae:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8009cb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009cb4:	4413      	add	r3, r2
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f7ff fdb0 	bl	800981c <is_aperture>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d103      	bne.n	8009cca <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8009cc2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d3ee      	bcc.n	8009ca8 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8009cca:	2301      	movs	r3, #1
 8009ccc:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8009cce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cd0:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8009cde:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8009ce2:	f107 0218 	add.w	r2, r7, #24
 8009ce6:	9204      	str	r2, [sp, #16]
 8009ce8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009cea:	9203      	str	r2, [sp, #12]
 8009cec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009cee:	9202      	str	r2, [sp, #8]
 8009cf0:	9301      	str	r3, [sp, #4]
 8009cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cf4:	9300      	str	r3, [sp, #0]
 8009cf6:	4623      	mov	r3, r4
 8009cf8:	4602      	mov	r2, r0
 8009cfa:	68f8      	ldr	r0, [r7, #12]
 8009cfc:	f7ff fe06 	bl	800990c <enable_ref_spads>
 8009d00:	4603      	mov	r3, r0
 8009d02:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8009d06:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d11b      	bne.n	8009d46 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8009d0e:	69bb      	ldr	r3, [r7, #24]
 8009d10:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8009d12:	f107 0312 	add.w	r3, r7, #18
 8009d16:	4619      	mov	r1, r3
 8009d18:	68f8      	ldr	r0, [r7, #12]
 8009d1a:	f7ff fe73 	bl	8009a04 <perform_ref_signal_measurement>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8009d24:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d10c      	bne.n	8009d46 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8009d2c:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8009d2e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009d30:	429a      	cmp	r2, r3
 8009d32:	d208      	bcs.n	8009d46 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8009d34:	2301      	movs	r3, #1
 8009d36:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8009d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8009d3e:	e002      	b.n	8009d46 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8009d40:	2300      	movs	r3, #0
 8009d42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009d44:	e000      	b.n	8009d48 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8009d46:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8009d48:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	f040 80af 	bne.w	8009eb0 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8009d52:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8009d54:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009d56:	429a      	cmp	r2, r3
 8009d58:	f240 80aa 	bls.w	8009eb0 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8009d5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d5e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8009d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d64:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8009d6c:	f107 031c 	add.w	r3, r7, #28
 8009d70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d72:	4618      	mov	r0, r3
 8009d74:	f003 f81a 	bl	800cdac <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8009d78:	8a7b      	ldrh	r3, [r7, #18]
 8009d7a:	461a      	mov	r2, r3
 8009d7c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009d7e:	1ad3      	subs	r3, r2, r3
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	bfb8      	it	lt
 8009d84:	425b      	neglt	r3, r3
 8009d86:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8009d8e:	e086      	b.n	8009e9e <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8009d96:	f107 0314 	add.w	r3, r7, #20
 8009d9a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009d9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009d9e:	f7ff fcdf 	bl	8009760 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009da8:	d103      	bne.n	8009db2 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8009daa:	23ce      	movs	r3, #206	; 0xce
 8009dac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8009db0:	e07e      	b.n	8009eb0 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8009db2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8009db6:	697a      	ldr	r2, [r7, #20]
 8009db8:	4413      	add	r3, r2
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f7ff fd2e 	bl	800981c <is_aperture>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	461a      	mov	r2, r3
 8009dc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d003      	beq.n	8009dd2 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8009dca:	2301      	movs	r3, #1
 8009dcc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8009dd0:	e06e      	b.n	8009eb0 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8009dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8009dd8:	697b      	ldr	r3, [r7, #20]
 8009dda:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8009de2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009de4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009de6:	4618      	mov	r0, r3
 8009de8:	f7ff fd32 	bl	8009850 <enable_spad_bit>
 8009dec:	4603      	mov	r3, r0
 8009dee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8009df2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d10c      	bne.n	8009e14 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8009dfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8009e06:	4619      	mov	r1, r3
 8009e08:	68f8      	ldr	r0, [r7, #12]
 8009e0a:	f7ff fd59 	bl	80098c0 <set_ref_spad_map>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8009e14:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d146      	bne.n	8009eaa <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8009e1c:	f107 0312 	add.w	r3, r7, #18
 8009e20:	4619      	mov	r1, r3
 8009e22:	68f8      	ldr	r0, [r7, #12]
 8009e24:	f7ff fdee 	bl	8009a04 <perform_ref_signal_measurement>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8009e2e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d13b      	bne.n	8009eae <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8009e36:	8a7b      	ldrh	r3, [r7, #18]
 8009e38:	461a      	mov	r2, r3
 8009e3a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009e3c:	1ad3      	subs	r3, r2, r3
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	bfb8      	it	lt
 8009e42:	425b      	neglt	r3, r3
 8009e44:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8009e46:	8a7b      	ldrh	r3, [r7, #18]
 8009e48:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	d21c      	bcs.n	8009e88 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8009e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e52:	429a      	cmp	r2, r3
 8009e54:	d914      	bls.n	8009e80 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8009e56:	f107 031c 	add.w	r3, r7, #28
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	68f8      	ldr	r0, [r7, #12]
 8009e5e:	f7ff fd2f 	bl	80098c0 <set_ref_spad_map>
 8009e62:	4603      	mov	r3, r0
 8009e64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8009e6e:	f107 011c 	add.w	r1, r7, #28
 8009e72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e74:	4618      	mov	r0, r3
 8009e76:	f002 ff99 	bl	800cdac <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8009e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e7c:	3b01      	subs	r3, #1
 8009e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8009e80:	2301      	movs	r3, #1
 8009e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e86:	e00a      	b.n	8009e9e <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8009e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e8a:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8009e92:	f107 031c 	add.w	r3, r7, #28
 8009e96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f002 ff87 	bl	800cdac <memcpy>
		while (!complete) {
 8009e9e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	f43f af74 	beq.w	8009d90 <VL53L0X_perform_ref_spad_management+0x2b8>
 8009ea8:	e002      	b.n	8009eb0 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8009eaa:	bf00      	nop
 8009eac:	e000      	b.n	8009eb0 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8009eae:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009eb0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d115      	bne.n	8009ee4 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009ebc:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8009ec4:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	2201      	movs	r2, #1
 8009eca:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	b2da      	uxtb	r2, r3
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	781a      	ldrb	r2, [r3, #0]
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8009ee4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	375c      	adds	r7, #92	; 0x5c
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd90      	pop	{r4, r7, pc}

08009ef0 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8009ef0:	b590      	push	{r4, r7, lr}
 8009ef2:	b093      	sub	sp, #76	; 0x4c
 8009ef4:	af06      	add	r7, sp, #24
 8009ef6:	60f8      	str	r0, [r7, #12]
 8009ef8:	60b9      	str	r1, [r7, #8]
 8009efa:	4613      	mov	r3, r2
 8009efc:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009efe:	2300      	movs	r3, #0
 8009f00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8009f04:	2300      	movs	r3, #0
 8009f06:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8009f08:	23b4      	movs	r3, #180	; 0xb4
 8009f0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8009f0e:	2306      	movs	r3, #6
 8009f10:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8009f12:	232c      	movs	r3, #44	; 0x2c
 8009f14:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009f16:	2201      	movs	r2, #1
 8009f18:	21ff      	movs	r1, #255	; 0xff
 8009f1a:	68f8      	ldr	r0, [r7, #12]
 8009f1c:	f002 fdf2 	bl	800cb04 <VL53L0X_WrByte>
 8009f20:	4603      	mov	r3, r0
 8009f22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8009f26:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d107      	bne.n	8009f3e <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8009f2e:	2200      	movs	r2, #0
 8009f30:	214f      	movs	r1, #79	; 0x4f
 8009f32:	68f8      	ldr	r0, [r7, #12]
 8009f34:	f002 fde6 	bl	800cb04 <VL53L0X_WrByte>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8009f3e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d107      	bne.n	8009f56 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8009f46:	222c      	movs	r2, #44	; 0x2c
 8009f48:	214e      	movs	r1, #78	; 0x4e
 8009f4a:	68f8      	ldr	r0, [r7, #12]
 8009f4c:	f002 fdda 	bl	800cb04 <VL53L0X_WrByte>
 8009f50:	4603      	mov	r3, r0
 8009f52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8009f56:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d107      	bne.n	8009f6e <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009f5e:	2200      	movs	r2, #0
 8009f60:	21ff      	movs	r1, #255	; 0xff
 8009f62:	68f8      	ldr	r0, [r7, #12]
 8009f64:	f002 fdce 	bl	800cb04 <VL53L0X_WrByte>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8009f6e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d109      	bne.n	8009f8a <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8009f76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	21b6      	movs	r1, #182	; 0xb6
 8009f7e:	68f8      	ldr	r0, [r7, #12]
 8009f80:	f002 fdc0 	bl	800cb04 <VL53L0X_WrByte>
 8009f84:	4603      	mov	r3, r0
 8009f86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	627b      	str	r3, [r7, #36]	; 0x24
 8009f8e:	e009      	b.n	8009fa4 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8009f90:	68fa      	ldr	r2, [r7, #12]
 8009f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f94:	4413      	add	r3, r2
 8009f96:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8009f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa0:	3301      	adds	r3, #1
 8009fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8009fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fa6:	69fb      	ldr	r3, [r7, #28]
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d3f1      	bcc.n	8009f90 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8009fac:	79fb      	ldrb	r3, [r7, #7]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d011      	beq.n	8009fd6 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8009fb2:	e002      	b.n	8009fba <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8009fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb6:	3301      	adds	r3, #1
 8009fb8:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8009fba:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8009fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc0:	4413      	add	r3, r2
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f7ff fc2a 	bl	800981c <is_aperture>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d103      	bne.n	8009fd6 <VL53L0X_set_reference_spads+0xe6>
 8009fce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fd0:	69bb      	ldr	r3, [r7, #24]
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d3ee      	bcc.n	8009fb4 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8009fe2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009fe6:	79f9      	ldrb	r1, [r7, #7]
 8009fe8:	f107 0214 	add.w	r2, r7, #20
 8009fec:	9204      	str	r2, [sp, #16]
 8009fee:	68ba      	ldr	r2, [r7, #8]
 8009ff0:	9203      	str	r2, [sp, #12]
 8009ff2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ff4:	9202      	str	r2, [sp, #8]
 8009ff6:	9301      	str	r3, [sp, #4]
 8009ff8:	69fb      	ldr	r3, [r7, #28]
 8009ffa:	9300      	str	r3, [sp, #0]
 8009ffc:	4623      	mov	r3, r4
 8009ffe:	4602      	mov	r2, r0
 800a000:	68f8      	ldr	r0, [r7, #12]
 800a002:	f7ff fc83 	bl	800990c <enable_ref_spads>
 800a006:	4603      	mov	r3, r0
 800a008:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800a00c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a010:	2b00      	cmp	r3, #0
 800a012:	d10c      	bne.n	800a02e <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2201      	movs	r2, #1
 800a018:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	b2da      	uxtb	r2, r3
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	79fa      	ldrb	r2, [r7, #7]
 800a02a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800a02e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a032:	4618      	mov	r0, r3
 800a034:	3734      	adds	r7, #52	; 0x34
 800a036:	46bd      	mov	sp, r7
 800a038:	bd90      	pop	{r4, r7, pc}

0800a03a <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800a03a:	b580      	push	{r7, lr}
 800a03c:	b084      	sub	sp, #16
 800a03e:	af00      	add	r7, sp, #0
 800a040:	6078      	str	r0, [r7, #4]
 800a042:	460b      	mov	r3, r1
 800a044:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a046:	2300      	movs	r3, #0
 800a048:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800a04a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d10a      	bne.n	800a068 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800a052:	78fb      	ldrb	r3, [r7, #3]
 800a054:	f043 0301 	orr.w	r3, r3, #1
 800a058:	b2db      	uxtb	r3, r3
 800a05a:	461a      	mov	r2, r3
 800a05c:	2100      	movs	r1, #0
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f002 fd50 	bl	800cb04 <VL53L0X_WrByte>
 800a064:	4603      	mov	r3, r0
 800a066:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800a068:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d104      	bne.n	800a07a <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f000 f9bf 	bl	800a3f4 <VL53L0X_measurement_poll_for_completion>
 800a076:	4603      	mov	r3, r0
 800a078:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800a07a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d105      	bne.n	800a08e <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800a082:	2100      	movs	r1, #0
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f7ff fab5 	bl	80095f4 <VL53L0X_ClearInterruptMask>
 800a08a:	4603      	mov	r3, r0
 800a08c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800a08e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d106      	bne.n	800a0a4 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800a096:	2200      	movs	r2, #0
 800a098:	2100      	movs	r1, #0
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f002 fd32 	bl	800cb04 <VL53L0X_WrByte>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	73fb      	strb	r3, [r7, #15]

	return Status;
 800a0a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3710      	adds	r7, #16
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}

0800a0b0 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b084      	sub	sp, #16
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
 800a0b8:	4608      	mov	r0, r1
 800a0ba:	4611      	mov	r1, r2
 800a0bc:	461a      	mov	r2, r3
 800a0be:	4603      	mov	r3, r0
 800a0c0:	70fb      	strb	r3, [r7, #3]
 800a0c2:	460b      	mov	r3, r1
 800a0c4:	70bb      	strb	r3, [r7, #2]
 800a0c6:	4613      	mov	r3, r2
 800a0c8:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	21ff      	movs	r1, #255	; 0xff
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f002 fd14 	bl	800cb04 <VL53L0X_WrByte>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	461a      	mov	r2, r3
 800a0e0:	7bfb      	ldrb	r3, [r7, #15]
 800a0e2:	4313      	orrs	r3, r2
 800a0e4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	2100      	movs	r1, #0
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f002 fd0a 	bl	800cb04 <VL53L0X_WrByte>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	461a      	mov	r2, r3
 800a0f4:	7bfb      	ldrb	r3, [r7, #15]
 800a0f6:	4313      	orrs	r3, r2
 800a0f8:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	21ff      	movs	r1, #255	; 0xff
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f002 fd00 	bl	800cb04 <VL53L0X_WrByte>
 800a104:	4603      	mov	r3, r0
 800a106:	461a      	mov	r2, r3
 800a108:	7bfb      	ldrb	r3, [r7, #15]
 800a10a:	4313      	orrs	r3, r2
 800a10c:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800a10e:	78fb      	ldrb	r3, [r7, #3]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d01e      	beq.n	800a152 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800a114:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d009      	beq.n	800a130 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800a11c:	69ba      	ldr	r2, [r7, #24]
 800a11e:	21cb      	movs	r1, #203	; 0xcb
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f002 fd71 	bl	800cc08 <VL53L0X_RdByte>
 800a126:	4603      	mov	r3, r0
 800a128:	461a      	mov	r2, r3
 800a12a:	7bfb      	ldrb	r3, [r7, #15]
 800a12c:	4313      	orrs	r3, r2
 800a12e:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800a130:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a134:	2b00      	cmp	r3, #0
 800a136:	d02a      	beq.n	800a18e <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800a138:	f107 030e 	add.w	r3, r7, #14
 800a13c:	461a      	mov	r2, r3
 800a13e:	21ee      	movs	r1, #238	; 0xee
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f002 fd61 	bl	800cc08 <VL53L0X_RdByte>
 800a146:	4603      	mov	r3, r0
 800a148:	461a      	mov	r2, r3
 800a14a:	7bfb      	ldrb	r3, [r7, #15]
 800a14c:	4313      	orrs	r3, r2
 800a14e:	73fb      	strb	r3, [r7, #15]
 800a150:	e01d      	b.n	800a18e <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800a152:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d00a      	beq.n	800a170 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800a15a:	78bb      	ldrb	r3, [r7, #2]
 800a15c:	461a      	mov	r2, r3
 800a15e:	21cb      	movs	r1, #203	; 0xcb
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f002 fccf 	bl	800cb04 <VL53L0X_WrByte>
 800a166:	4603      	mov	r3, r0
 800a168:	461a      	mov	r2, r3
 800a16a:	7bfb      	ldrb	r3, [r7, #15]
 800a16c:	4313      	orrs	r3, r2
 800a16e:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800a170:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a174:	2b00      	cmp	r3, #0
 800a176:	d00a      	beq.n	800a18e <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800a178:	787b      	ldrb	r3, [r7, #1]
 800a17a:	2280      	movs	r2, #128	; 0x80
 800a17c:	21ee      	movs	r1, #238	; 0xee
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f002 fd0e 	bl	800cba0 <VL53L0X_UpdateByte>
 800a184:	4603      	mov	r3, r0
 800a186:	461a      	mov	r2, r3
 800a188:	7bfb      	ldrb	r3, [r7, #15]
 800a18a:	4313      	orrs	r3, r2
 800a18c:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a18e:	2201      	movs	r2, #1
 800a190:	21ff      	movs	r1, #255	; 0xff
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f002 fcb6 	bl	800cb04 <VL53L0X_WrByte>
 800a198:	4603      	mov	r3, r0
 800a19a:	461a      	mov	r2, r3
 800a19c:	7bfb      	ldrb	r3, [r7, #15]
 800a19e:	4313      	orrs	r3, r2
 800a1a0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800a1a2:	2201      	movs	r2, #1
 800a1a4:	2100      	movs	r1, #0
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f002 fcac 	bl	800cb04 <VL53L0X_WrByte>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	461a      	mov	r2, r3
 800a1b0:	7bfb      	ldrb	r3, [r7, #15]
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	21ff      	movs	r1, #255	; 0xff
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f002 fca2 	bl	800cb04 <VL53L0X_WrByte>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	461a      	mov	r2, r3
 800a1c4:	7bfb      	ldrb	r3, [r7, #15]
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800a1ca:	7bbb      	ldrb	r3, [r7, #14]
 800a1cc:	f023 0310 	bic.w	r3, r3, #16
 800a1d0:	b2da      	uxtb	r2, r3
 800a1d2:	69fb      	ldr	r3, [r7, #28]
 800a1d4:	701a      	strb	r2, [r3, #0]

	return Status;
 800a1d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3710      	adds	r7, #16
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}

0800a1e2 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800a1e2:	b580      	push	{r7, lr}
 800a1e4:	b08a      	sub	sp, #40	; 0x28
 800a1e6:	af04      	add	r7, sp, #16
 800a1e8:	60f8      	str	r0, [r7, #12]
 800a1ea:	60b9      	str	r1, [r7, #8]
 800a1ec:	4611      	mov	r1, r2
 800a1ee:	461a      	mov	r2, r3
 800a1f0:	460b      	mov	r3, r1
 800a1f2:	71fb      	strb	r3, [r7, #7]
 800a1f4:	4613      	mov	r3, r2
 800a1f6:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800a200:	2300      	movs	r3, #0
 800a202:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800a204:	2300      	movs	r3, #0
 800a206:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800a208:	2300      	movs	r3, #0
 800a20a:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800a20c:	79bb      	ldrb	r3, [r7, #6]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d003      	beq.n	800a21a <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800a218:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800a21a:	2201      	movs	r2, #1
 800a21c:	2101      	movs	r1, #1
 800a21e:	68f8      	ldr	r0, [r7, #12]
 800a220:	f002 fc70 	bl	800cb04 <VL53L0X_WrByte>
 800a224:	4603      	mov	r3, r0
 800a226:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800a228:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d105      	bne.n	800a23c <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800a230:	2140      	movs	r1, #64	; 0x40
 800a232:	68f8      	ldr	r0, [r7, #12]
 800a234:	f7ff ff01 	bl	800a03a <VL53L0X_perform_single_ref_calibration>
 800a238:	4603      	mov	r3, r0
 800a23a:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800a23c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d115      	bne.n	800a270 <VL53L0X_perform_vhv_calibration+0x8e>
 800a244:	79fb      	ldrb	r3, [r7, #7]
 800a246:	2b01      	cmp	r3, #1
 800a248:	d112      	bne.n	800a270 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800a24a:	7d39      	ldrb	r1, [r7, #20]
 800a24c:	7d7a      	ldrb	r2, [r7, #21]
 800a24e:	2300      	movs	r3, #0
 800a250:	9303      	str	r3, [sp, #12]
 800a252:	2301      	movs	r3, #1
 800a254:	9302      	str	r3, [sp, #8]
 800a256:	f107 0313 	add.w	r3, r7, #19
 800a25a:	9301      	str	r3, [sp, #4]
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	9300      	str	r3, [sp, #0]
 800a260:	460b      	mov	r3, r1
 800a262:	2101      	movs	r1, #1
 800a264:	68f8      	ldr	r0, [r7, #12]
 800a266:	f7ff ff23 	bl	800a0b0 <VL53L0X_ref_calibration_io>
 800a26a:	4603      	mov	r3, r0
 800a26c:	75fb      	strb	r3, [r7, #23]
 800a26e:	e002      	b.n	800a276 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	2200      	movs	r2, #0
 800a274:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800a276:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d112      	bne.n	800a2a4 <VL53L0X_perform_vhv_calibration+0xc2>
 800a27e:	79bb      	ldrb	r3, [r7, #6]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d00f      	beq.n	800a2a4 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a284:	7dbb      	ldrb	r3, [r7, #22]
 800a286:	461a      	mov	r2, r3
 800a288:	2101      	movs	r1, #1
 800a28a:	68f8      	ldr	r0, [r7, #12]
 800a28c:	f002 fc3a 	bl	800cb04 <VL53L0X_WrByte>
 800a290:	4603      	mov	r3, r0
 800a292:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800a294:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d103      	bne.n	800a2a4 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	7dba      	ldrb	r2, [r7, #22]
 800a2a0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800a2a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3718      	adds	r7, #24
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}

0800a2b0 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b08a      	sub	sp, #40	; 0x28
 800a2b4:	af04      	add	r7, sp, #16
 800a2b6:	60f8      	str	r0, [r7, #12]
 800a2b8:	60b9      	str	r1, [r7, #8]
 800a2ba:	4611      	mov	r1, r2
 800a2bc:	461a      	mov	r2, r3
 800a2be:	460b      	mov	r3, r1
 800a2c0:	71fb      	strb	r3, [r7, #7]
 800a2c2:	4613      	mov	r3, r2
 800a2c4:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800a2d6:	79bb      	ldrb	r3, [r7, #6]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d003      	beq.n	800a2e4 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800a2e2:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800a2e4:	2202      	movs	r2, #2
 800a2e6:	2101      	movs	r1, #1
 800a2e8:	68f8      	ldr	r0, [r7, #12]
 800a2ea:	f002 fc0b 	bl	800cb04 <VL53L0X_WrByte>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800a2f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d105      	bne.n	800a306 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800a2fa:	2100      	movs	r1, #0
 800a2fc:	68f8      	ldr	r0, [r7, #12]
 800a2fe:	f7ff fe9c 	bl	800a03a <VL53L0X_perform_single_ref_calibration>
 800a302:	4603      	mov	r3, r0
 800a304:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800a306:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d115      	bne.n	800a33a <VL53L0X_perform_phase_calibration+0x8a>
 800a30e:	79fb      	ldrb	r3, [r7, #7]
 800a310:	2b01      	cmp	r3, #1
 800a312:	d112      	bne.n	800a33a <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800a314:	7d39      	ldrb	r1, [r7, #20]
 800a316:	7d7a      	ldrb	r2, [r7, #21]
 800a318:	2301      	movs	r3, #1
 800a31a:	9303      	str	r3, [sp, #12]
 800a31c:	2300      	movs	r3, #0
 800a31e:	9302      	str	r3, [sp, #8]
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	9301      	str	r3, [sp, #4]
 800a324:	f107 0313 	add.w	r3, r7, #19
 800a328:	9300      	str	r3, [sp, #0]
 800a32a:	460b      	mov	r3, r1
 800a32c:	2101      	movs	r1, #1
 800a32e:	68f8      	ldr	r0, [r7, #12]
 800a330:	f7ff febe 	bl	800a0b0 <VL53L0X_ref_calibration_io>
 800a334:	4603      	mov	r3, r0
 800a336:	75fb      	strb	r3, [r7, #23]
 800a338:	e002      	b.n	800a340 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	2200      	movs	r2, #0
 800a33e:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800a340:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d112      	bne.n	800a36e <VL53L0X_perform_phase_calibration+0xbe>
 800a348:	79bb      	ldrb	r3, [r7, #6]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d00f      	beq.n	800a36e <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a34e:	7dbb      	ldrb	r3, [r7, #22]
 800a350:	461a      	mov	r2, r3
 800a352:	2101      	movs	r1, #1
 800a354:	68f8      	ldr	r0, [r7, #12]
 800a356:	f002 fbd5 	bl	800cb04 <VL53L0X_WrByte>
 800a35a:	4603      	mov	r3, r0
 800a35c:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800a35e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d103      	bne.n	800a36e <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	7dba      	ldrb	r2, [r7, #22]
 800a36a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800a36e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a372:	4618      	mov	r0, r3
 800a374:	3718      	adds	r7, #24
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}

0800a37a <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800a37a:	b580      	push	{r7, lr}
 800a37c:	b086      	sub	sp, #24
 800a37e:	af00      	add	r7, sp, #0
 800a380:	60f8      	str	r0, [r7, #12]
 800a382:	60b9      	str	r1, [r7, #8]
 800a384:	607a      	str	r2, [r7, #4]
 800a386:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a388:	2300      	movs	r3, #0
 800a38a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800a38c:	2300      	movs	r3, #0
 800a38e:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800a396:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800a398:	78fa      	ldrb	r2, [r7, #3]
 800a39a:	2300      	movs	r3, #0
 800a39c:	68b9      	ldr	r1, [r7, #8]
 800a39e:	68f8      	ldr	r0, [r7, #12]
 800a3a0:	f7ff ff1f 	bl	800a1e2 <VL53L0X_perform_vhv_calibration>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800a3a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d107      	bne.n	800a3c0 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800a3b0:	78fa      	ldrb	r2, [r7, #3]
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	6879      	ldr	r1, [r7, #4]
 800a3b6:	68f8      	ldr	r0, [r7, #12]
 800a3b8:	f7ff ff7a 	bl	800a2b0 <VL53L0X_perform_phase_calibration>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800a3c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d10f      	bne.n	800a3e8 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a3c8:	7dbb      	ldrb	r3, [r7, #22]
 800a3ca:	461a      	mov	r2, r3
 800a3cc:	2101      	movs	r1, #1
 800a3ce:	68f8      	ldr	r0, [r7, #12]
 800a3d0:	f002 fb98 	bl	800cb04 <VL53L0X_WrByte>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800a3d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d103      	bne.n	800a3e8 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	7dba      	ldrb	r2, [r7, #22]
 800a3e4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800a3e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3718      	adds	r7, #24
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}

0800a3f4 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b086      	sub	sp, #24
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800a400:	2300      	movs	r3, #0
 800a402:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800a404:	2300      	movs	r3, #0
 800a406:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800a408:	f107 030f 	add.w	r3, r7, #15
 800a40c:	4619      	mov	r1, r3
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f7fe fe02 	bl	8009018 <VL53L0X_GetMeasurementDataReady>
 800a414:	4603      	mov	r3, r0
 800a416:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800a418:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d110      	bne.n	800a442 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800a420:	7bfb      	ldrb	r3, [r7, #15]
 800a422:	2b01      	cmp	r3, #1
 800a424:	d00f      	beq.n	800a446 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	3301      	adds	r3, #1
 800a42a:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a432:	d302      	bcc.n	800a43a <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800a434:	23f9      	movs	r3, #249	; 0xf9
 800a436:	75fb      	strb	r3, [r7, #23]
			break;
 800a438:	e006      	b.n	800a448 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f002 fc82 	bl	800cd44 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800a440:	e7e2      	b.n	800a408 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800a442:	bf00      	nop
 800a444:	e000      	b.n	800a448 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800a446:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800a448:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3718      	adds	r7, #24
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}

0800a454 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800a454:	b480      	push	{r7}
 800a456:	b085      	sub	sp, #20
 800a458:	af00      	add	r7, sp, #0
 800a45a:	4603      	mov	r3, r0
 800a45c:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800a45e:	2300      	movs	r3, #0
 800a460:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800a462:	79fb      	ldrb	r3, [r7, #7]
 800a464:	3301      	adds	r3, #1
 800a466:	b2db      	uxtb	r3, r3
 800a468:	005b      	lsls	r3, r3, #1
 800a46a:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800a46c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3714      	adds	r7, #20
 800a472:	46bd      	mov	sp, r7
 800a474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a478:	4770      	bx	lr

0800a47a <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800a47a:	b480      	push	{r7}
 800a47c:	b085      	sub	sp, #20
 800a47e:	af00      	add	r7, sp, #0
 800a480:	4603      	mov	r3, r0
 800a482:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 800a484:	2300      	movs	r3, #0
 800a486:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 800a488:	79fb      	ldrb	r3, [r7, #7]
 800a48a:	085b      	lsrs	r3, r3, #1
 800a48c:	b2db      	uxtb	r3, r3
 800a48e:	3b01      	subs	r3, #1
 800a490:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800a492:	7bfb      	ldrb	r3, [r7, #15]
}
 800a494:	4618      	mov	r0, r3
 800a496:	3714      	adds	r7, #20
 800a498:	46bd      	mov	sp, r7
 800a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49e:	4770      	bx	lr

0800a4a0 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b085      	sub	sp, #20
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800a4ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a4b0:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800a4b2:	e002      	b.n	800a4ba <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	089b      	lsrs	r3, r3, #2
 800a4b8:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800a4ba:	68ba      	ldr	r2, [r7, #8]
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	429a      	cmp	r2, r3
 800a4c0:	d8f8      	bhi.n	800a4b4 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800a4c2:	e017      	b.n	800a4f4 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800a4c4:	68fa      	ldr	r2, [r7, #12]
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	4413      	add	r3, r2
 800a4ca:	687a      	ldr	r2, [r7, #4]
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	d30b      	bcc.n	800a4e8 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800a4d0:	68fa      	ldr	r2, [r7, #12]
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	4413      	add	r3, r2
 800a4d6:	687a      	ldr	r2, [r7, #4]
 800a4d8:	1ad3      	subs	r3, r2, r3
 800a4da:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	085b      	lsrs	r3, r3, #1
 800a4e0:	68ba      	ldr	r2, [r7, #8]
 800a4e2:	4413      	add	r3, r2
 800a4e4:	60fb      	str	r3, [r7, #12]
 800a4e6:	e002      	b.n	800a4ee <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	085b      	lsrs	r3, r3, #1
 800a4ec:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	089b      	lsrs	r3, r3, #2
 800a4f2:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d1e4      	bne.n	800a4c4 <VL53L0X_isqrt+0x24>
	}

	return res;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3714      	adds	r7, #20
 800a500:	46bd      	mov	sp, r7
 800a502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a506:	4770      	bx	lr

0800a508 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b086      	sub	sp, #24
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a510:	2300      	movs	r3, #0
 800a512:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800a514:	2200      	movs	r2, #0
 800a516:	2183      	movs	r1, #131	; 0x83
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f002 faf3 	bl	800cb04 <VL53L0X_WrByte>
 800a51e:	4603      	mov	r3, r0
 800a520:	461a      	mov	r2, r3
 800a522:	7dfb      	ldrb	r3, [r7, #23]
 800a524:	4313      	orrs	r3, r2
 800a526:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800a528:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d11e      	bne.n	800a56e <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 800a530:	2300      	movs	r3, #0
 800a532:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800a534:	f107 030f 	add.w	r3, r7, #15
 800a538:	461a      	mov	r2, r3
 800a53a:	2183      	movs	r1, #131	; 0x83
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f002 fb63 	bl	800cc08 <VL53L0X_RdByte>
 800a542:	4603      	mov	r3, r0
 800a544:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800a546:	7bfb      	ldrb	r3, [r7, #15]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d10a      	bne.n	800a562 <VL53L0X_device_read_strobe+0x5a>
 800a54c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d106      	bne.n	800a562 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	3301      	adds	r3, #1
 800a558:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a560:	d3e8      	bcc.n	800a534 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a568:	d301      	bcc.n	800a56e <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800a56a:	23f9      	movs	r3, #249	; 0xf9
 800a56c:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800a56e:	2201      	movs	r2, #1
 800a570:	2183      	movs	r1, #131	; 0x83
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f002 fac6 	bl	800cb04 <VL53L0X_WrByte>
 800a578:	4603      	mov	r3, r0
 800a57a:	461a      	mov	r2, r3
 800a57c:	7dfb      	ldrb	r3, [r7, #23]
 800a57e:	4313      	orrs	r3, r2
 800a580:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800a582:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800a586:	4618      	mov	r0, r3
 800a588:	3718      	adds	r7, #24
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}

0800a58e <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800a58e:	b580      	push	{r7, lr}
 800a590:	b098      	sub	sp, #96	; 0x60
 800a592:	af00      	add	r7, sp, #0
 800a594:	6078      	str	r0, [r7, #4]
 800a596:	460b      	mov	r3, r1
 800a598:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a59a:	2300      	movs	r3, #0
 800a59c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800a5be:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800a5c2:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800a5d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800a5da:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a5de:	2b07      	cmp	r3, #7
 800a5e0:	f000 8408 	beq.w	800adf4 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800a5e4:	2201      	movs	r2, #1
 800a5e6:	2180      	movs	r1, #128	; 0x80
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f002 fa8b 	bl	800cb04 <VL53L0X_WrByte>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	461a      	mov	r2, r3
 800a5f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a5f6:	4313      	orrs	r3, r2
 800a5f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a5fc:	2201      	movs	r2, #1
 800a5fe:	21ff      	movs	r1, #255	; 0xff
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f002 fa7f 	bl	800cb04 <VL53L0X_WrByte>
 800a606:	4603      	mov	r3, r0
 800a608:	461a      	mov	r2, r3
 800a60a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a60e:	4313      	orrs	r3, r2
 800a610:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a614:	2200      	movs	r2, #0
 800a616:	2100      	movs	r1, #0
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f002 fa73 	bl	800cb04 <VL53L0X_WrByte>
 800a61e:	4603      	mov	r3, r0
 800a620:	461a      	mov	r2, r3
 800a622:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a626:	4313      	orrs	r3, r2
 800a628:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800a62c:	2206      	movs	r2, #6
 800a62e:	21ff      	movs	r1, #255	; 0xff
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f002 fa67 	bl	800cb04 <VL53L0X_WrByte>
 800a636:	4603      	mov	r3, r0
 800a638:	461a      	mov	r2, r3
 800a63a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a63e:	4313      	orrs	r3, r2
 800a640:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800a644:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800a648:	461a      	mov	r2, r3
 800a64a:	2183      	movs	r1, #131	; 0x83
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	f002 fadb 	bl	800cc08 <VL53L0X_RdByte>
 800a652:	4603      	mov	r3, r0
 800a654:	461a      	mov	r2, r3
 800a656:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a65a:	4313      	orrs	r3, r2
 800a65c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800a660:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a664:	f043 0304 	orr.w	r3, r3, #4
 800a668:	b2db      	uxtb	r3, r3
 800a66a:	461a      	mov	r2, r3
 800a66c:	2183      	movs	r1, #131	; 0x83
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f002 fa48 	bl	800cb04 <VL53L0X_WrByte>
 800a674:	4603      	mov	r3, r0
 800a676:	461a      	mov	r2, r3
 800a678:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a67c:	4313      	orrs	r3, r2
 800a67e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800a682:	2207      	movs	r2, #7
 800a684:	21ff      	movs	r1, #255	; 0xff
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f002 fa3c 	bl	800cb04 <VL53L0X_WrByte>
 800a68c:	4603      	mov	r3, r0
 800a68e:	461a      	mov	r2, r3
 800a690:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a694:	4313      	orrs	r3, r2
 800a696:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800a69a:	2201      	movs	r2, #1
 800a69c:	2181      	movs	r1, #129	; 0x81
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	f002 fa30 	bl	800cb04 <VL53L0X_WrByte>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a6ac:	4313      	orrs	r3, r2
 800a6ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f002 fb46 	bl	800cd44 <VL53L0X_PollingDelay>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	461a      	mov	r2, r3
 800a6bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a6c0:	4313      	orrs	r3, r2
 800a6c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800a6c6:	2201      	movs	r2, #1
 800a6c8:	2180      	movs	r1, #128	; 0x80
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f002 fa1a 	bl	800cb04 <VL53L0X_WrByte>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	461a      	mov	r2, r3
 800a6d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a6d8:	4313      	orrs	r3, r2
 800a6da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800a6de:	78fb      	ldrb	r3, [r7, #3]
 800a6e0:	f003 0301 	and.w	r3, r3, #1
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	f000 8098 	beq.w	800a81a <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800a6ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a6ee:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	f040 8091 	bne.w	800a81a <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800a6f8:	226b      	movs	r2, #107	; 0x6b
 800a6fa:	2194      	movs	r1, #148	; 0x94
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f002 fa01 	bl	800cb04 <VL53L0X_WrByte>
 800a702:	4603      	mov	r3, r0
 800a704:	461a      	mov	r2, r3
 800a706:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a70a:	4313      	orrs	r3, r2
 800a70c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f7ff fef9 	bl	800a508 <VL53L0X_device_read_strobe>
 800a716:	4603      	mov	r3, r0
 800a718:	461a      	mov	r2, r3
 800a71a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a71e:	4313      	orrs	r3, r2
 800a720:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a724:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a728:	461a      	mov	r2, r3
 800a72a:	2190      	movs	r1, #144	; 0x90
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f002 facd 	bl	800cccc <VL53L0X_RdDWord>
 800a732:	4603      	mov	r3, r0
 800a734:	461a      	mov	r2, r3
 800a736:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a73a:	4313      	orrs	r3, r2
 800a73c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800a740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a742:	0a1b      	lsrs	r3, r3, #8
 800a744:	b2db      	uxtb	r3, r3
 800a746:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a74a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800a74e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a750:	0bdb      	lsrs	r3, r3, #15
 800a752:	b2db      	uxtb	r3, r3
 800a754:	f003 0301 	and.w	r3, r3, #1
 800a758:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800a75c:	2224      	movs	r2, #36	; 0x24
 800a75e:	2194      	movs	r1, #148	; 0x94
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f002 f9cf 	bl	800cb04 <VL53L0X_WrByte>
 800a766:	4603      	mov	r3, r0
 800a768:	461a      	mov	r2, r3
 800a76a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a76e:	4313      	orrs	r3, r2
 800a770:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f7ff fec7 	bl	800a508 <VL53L0X_device_read_strobe>
 800a77a:	4603      	mov	r3, r0
 800a77c:	461a      	mov	r2, r3
 800a77e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a782:	4313      	orrs	r3, r2
 800a784:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a788:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a78c:	461a      	mov	r2, r3
 800a78e:	2190      	movs	r1, #144	; 0x90
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f002 fa9b 	bl	800cccc <VL53L0X_RdDWord>
 800a796:	4603      	mov	r3, r0
 800a798:	461a      	mov	r2, r3
 800a79a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a79e:	4313      	orrs	r3, r2
 800a7a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800a7a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a6:	0e1b      	lsrs	r3, r3, #24
 800a7a8:	b2db      	uxtb	r3, r3
 800a7aa:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800a7ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ae:	0c1b      	lsrs	r3, r3, #16
 800a7b0:	b2db      	uxtb	r3, r3
 800a7b2:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800a7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b6:	0a1b      	lsrs	r3, r3, #8
 800a7b8:	b2db      	uxtb	r3, r3
 800a7ba:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800a7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7be:	b2db      	uxtb	r3, r3
 800a7c0:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800a7c2:	2225      	movs	r2, #37	; 0x25
 800a7c4:	2194      	movs	r1, #148	; 0x94
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f002 f99c 	bl	800cb04 <VL53L0X_WrByte>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	461a      	mov	r2, r3
 800a7d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a7d4:	4313      	orrs	r3, r2
 800a7d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f7ff fe94 	bl	800a508 <VL53L0X_device_read_strobe>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	461a      	mov	r2, r3
 800a7e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a7e8:	4313      	orrs	r3, r2
 800a7ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a7ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a7f2:	461a      	mov	r2, r3
 800a7f4:	2190      	movs	r1, #144	; 0x90
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f002 fa68 	bl	800cccc <VL53L0X_RdDWord>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	461a      	mov	r2, r3
 800a800:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a804:	4313      	orrs	r3, r2
 800a806:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800a80a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a80c:	0e1b      	lsrs	r3, r3, #24
 800a80e:	b2db      	uxtb	r3, r3
 800a810:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800a812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a814:	0c1b      	lsrs	r3, r3, #16
 800a816:	b2db      	uxtb	r3, r3
 800a818:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800a81a:	78fb      	ldrb	r3, [r7, #3]
 800a81c:	f003 0302 	and.w	r3, r3, #2
 800a820:	2b00      	cmp	r3, #0
 800a822:	f000 8189 	beq.w	800ab38 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800a826:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a82a:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800a82e:	2b00      	cmp	r3, #0
 800a830:	f040 8182 	bne.w	800ab38 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800a834:	2202      	movs	r2, #2
 800a836:	2194      	movs	r1, #148	; 0x94
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f002 f963 	bl	800cb04 <VL53L0X_WrByte>
 800a83e:	4603      	mov	r3, r0
 800a840:	461a      	mov	r2, r3
 800a842:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a846:	4313      	orrs	r3, r2
 800a848:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f7ff fe5b 	bl	800a508 <VL53L0X_device_read_strobe>
 800a852:	4603      	mov	r3, r0
 800a854:	461a      	mov	r2, r3
 800a856:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a85a:	4313      	orrs	r3, r2
 800a85c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800a860:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800a864:	461a      	mov	r2, r3
 800a866:	2190      	movs	r1, #144	; 0x90
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f002 f9cd 	bl	800cc08 <VL53L0X_RdByte>
 800a86e:	4603      	mov	r3, r0
 800a870:	461a      	mov	r2, r3
 800a872:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a876:	4313      	orrs	r3, r2
 800a878:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800a87c:	227b      	movs	r2, #123	; 0x7b
 800a87e:	2194      	movs	r1, #148	; 0x94
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f002 f93f 	bl	800cb04 <VL53L0X_WrByte>
 800a886:	4603      	mov	r3, r0
 800a888:	461a      	mov	r2, r3
 800a88a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a88e:	4313      	orrs	r3, r2
 800a890:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f7ff fe37 	bl	800a508 <VL53L0X_device_read_strobe>
 800a89a:	4603      	mov	r3, r0
 800a89c:	461a      	mov	r2, r3
 800a89e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8a2:	4313      	orrs	r3, r2
 800a8a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800a8a8:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800a8ac:	461a      	mov	r2, r3
 800a8ae:	2190      	movs	r1, #144	; 0x90
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f002 f9a9 	bl	800cc08 <VL53L0X_RdByte>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	461a      	mov	r2, r3
 800a8ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8be:	4313      	orrs	r3, r2
 800a8c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800a8c4:	2277      	movs	r2, #119	; 0x77
 800a8c6:	2194      	movs	r1, #148	; 0x94
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f002 f91b 	bl	800cb04 <VL53L0X_WrByte>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	461a      	mov	r2, r3
 800a8d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8d6:	4313      	orrs	r3, r2
 800a8d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f7ff fe13 	bl	800a508 <VL53L0X_device_read_strobe>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	461a      	mov	r2, r3
 800a8e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8ea:	4313      	orrs	r3, r2
 800a8ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a8f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a8f4:	461a      	mov	r2, r3
 800a8f6:	2190      	movs	r1, #144	; 0x90
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f002 f9e7 	bl	800cccc <VL53L0X_RdDWord>
 800a8fe:	4603      	mov	r3, r0
 800a900:	461a      	mov	r2, r3
 800a902:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a906:	4313      	orrs	r3, r2
 800a908:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800a90c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a90e:	0e5b      	lsrs	r3, r3, #25
 800a910:	b2db      	uxtb	r3, r3
 800a912:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a916:	b2db      	uxtb	r3, r3
 800a918:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800a91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a91c:	0c9b      	lsrs	r3, r3, #18
 800a91e:	b2db      	uxtb	r3, r3
 800a920:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a924:	b2db      	uxtb	r3, r3
 800a926:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800a928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a92a:	0adb      	lsrs	r3, r3, #11
 800a92c:	b2db      	uxtb	r3, r3
 800a92e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a932:	b2db      	uxtb	r3, r3
 800a934:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800a936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a938:	091b      	lsrs	r3, r3, #4
 800a93a:	b2db      	uxtb	r3, r3
 800a93c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a940:	b2db      	uxtb	r3, r3
 800a942:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800a944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a946:	b2db      	uxtb	r3, r3
 800a948:	00db      	lsls	r3, r3, #3
 800a94a:	b2db      	uxtb	r3, r3
 800a94c:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800a950:	b2db      	uxtb	r3, r3
 800a952:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800a956:	2278      	movs	r2, #120	; 0x78
 800a958:	2194      	movs	r1, #148	; 0x94
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f002 f8d2 	bl	800cb04 <VL53L0X_WrByte>
 800a960:	4603      	mov	r3, r0
 800a962:	461a      	mov	r2, r3
 800a964:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a968:	4313      	orrs	r3, r2
 800a96a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f7ff fdca 	bl	800a508 <VL53L0X_device_read_strobe>
 800a974:	4603      	mov	r3, r0
 800a976:	461a      	mov	r2, r3
 800a978:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a97c:	4313      	orrs	r3, r2
 800a97e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a982:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a986:	461a      	mov	r2, r3
 800a988:	2190      	movs	r1, #144	; 0x90
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f002 f99e 	bl	800cccc <VL53L0X_RdDWord>
 800a990:	4603      	mov	r3, r0
 800a992:	461a      	mov	r2, r3
 800a994:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a998:	4313      	orrs	r3, r2
 800a99a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800a99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a0:	0f5b      	lsrs	r3, r3, #29
 800a9a2:	b2db      	uxtb	r3, r3
 800a9a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9a8:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800a9aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a9ae:	4413      	add	r3, r2
 800a9b0:	b2db      	uxtb	r3, r3
 800a9b2:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800a9b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b6:	0d9b      	lsrs	r3, r3, #22
 800a9b8:	b2db      	uxtb	r3, r3
 800a9ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9be:	b2db      	uxtb	r3, r3
 800a9c0:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800a9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9c4:	0bdb      	lsrs	r3, r3, #15
 800a9c6:	b2db      	uxtb	r3, r3
 800a9c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9cc:	b2db      	uxtb	r3, r3
 800a9ce:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800a9d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9d2:	0a1b      	lsrs	r3, r3, #8
 800a9d4:	b2db      	uxtb	r3, r3
 800a9d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9da:	b2db      	uxtb	r3, r3
 800a9dc:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800a9de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e0:	085b      	lsrs	r3, r3, #1
 800a9e2:	b2db      	uxtb	r3, r3
 800a9e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9e8:	b2db      	uxtb	r3, r3
 800a9ea:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800a9ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ee:	b2db      	uxtb	r3, r3
 800a9f0:	019b      	lsls	r3, r3, #6
 800a9f2:	b2db      	uxtb	r3, r3
 800a9f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9f8:	b2db      	uxtb	r3, r3
 800a9fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800a9fe:	2279      	movs	r2, #121	; 0x79
 800aa00:	2194      	movs	r1, #148	; 0x94
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f002 f87e 	bl	800cb04 <VL53L0X_WrByte>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	461a      	mov	r2, r3
 800aa0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa10:	4313      	orrs	r3, r2
 800aa12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f7ff fd76 	bl	800a508 <VL53L0X_device_read_strobe>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	461a      	mov	r2, r3
 800aa20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa24:	4313      	orrs	r3, r2
 800aa26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800aa2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800aa2e:	461a      	mov	r2, r3
 800aa30:	2190      	movs	r1, #144	; 0x90
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f002 f94a 	bl	800cccc <VL53L0X_RdDWord>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	461a      	mov	r2, r3
 800aa3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa40:	4313      	orrs	r3, r2
 800aa42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800aa46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa48:	0e9b      	lsrs	r3, r3, #26
 800aa4a:	b2db      	uxtb	r3, r3
 800aa4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa50:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800aa52:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aa56:	4413      	add	r3, r2
 800aa58:	b2db      	uxtb	r3, r3
 800aa5a:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800aa5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa5e:	0cdb      	lsrs	r3, r3, #19
 800aa60:	b2db      	uxtb	r3, r3
 800aa62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa66:	b2db      	uxtb	r3, r3
 800aa68:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800aa6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa6c:	0b1b      	lsrs	r3, r3, #12
 800aa6e:	b2db      	uxtb	r3, r3
 800aa70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa74:	b2db      	uxtb	r3, r3
 800aa76:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800aa78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa7a:	095b      	lsrs	r3, r3, #5
 800aa7c:	b2db      	uxtb	r3, r3
 800aa7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa82:	b2db      	uxtb	r3, r3
 800aa84:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800aa86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa88:	b2db      	uxtb	r3, r3
 800aa8a:	009b      	lsls	r3, r3, #2
 800aa8c:	b2db      	uxtb	r3, r3
 800aa8e:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800aa92:	b2db      	uxtb	r3, r3
 800aa94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800aa98:	227a      	movs	r2, #122	; 0x7a
 800aa9a:	2194      	movs	r1, #148	; 0x94
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f002 f831 	bl	800cb04 <VL53L0X_WrByte>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	461a      	mov	r2, r3
 800aaa6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aaaa:	4313      	orrs	r3, r2
 800aaac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f7ff fd29 	bl	800a508 <VL53L0X_device_read_strobe>
 800aab6:	4603      	mov	r3, r0
 800aab8:	461a      	mov	r2, r3
 800aaba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aabe:	4313      	orrs	r3, r2
 800aac0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800aac4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800aac8:	461a      	mov	r2, r3
 800aaca:	2190      	movs	r1, #144	; 0x90
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f002 f8fd 	bl	800cccc <VL53L0X_RdDWord>
 800aad2:	4603      	mov	r3, r0
 800aad4:	461a      	mov	r2, r3
 800aad6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aada:	4313      	orrs	r3, r2
 800aadc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800aae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae2:	0f9b      	lsrs	r3, r3, #30
 800aae4:	b2db      	uxtb	r3, r3
 800aae6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aaea:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800aaec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aaf0:	4413      	add	r3, r2
 800aaf2:	b2db      	uxtb	r3, r3
 800aaf4:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800aaf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf8:	0ddb      	lsrs	r3, r3, #23
 800aafa:	b2db      	uxtb	r3, r3
 800aafc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab00:	b2db      	uxtb	r3, r3
 800ab02:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800ab04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab06:	0c1b      	lsrs	r3, r3, #16
 800ab08:	b2db      	uxtb	r3, r3
 800ab0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab0e:	b2db      	uxtb	r3, r3
 800ab10:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800ab12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab14:	0a5b      	lsrs	r3, r3, #9
 800ab16:	b2db      	uxtb	r3, r3
 800ab18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab1c:	b2db      	uxtb	r3, r3
 800ab1e:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800ab22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab24:	089b      	lsrs	r3, r3, #2
 800ab26:	b2db      	uxtb	r3, r3
 800ab28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab2c:	b2db      	uxtb	r3, r3
 800ab2e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800ab32:	2300      	movs	r3, #0
 800ab34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800ab38:	78fb      	ldrb	r3, [r7, #3]
 800ab3a:	f003 0304 	and.w	r3, r3, #4
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	f000 80f1 	beq.w	800ad26 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800ab44:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ab48:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	f040 80ea 	bne.w	800ad26 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800ab52:	227b      	movs	r2, #123	; 0x7b
 800ab54:	2194      	movs	r1, #148	; 0x94
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f001 ffd4 	bl	800cb04 <VL53L0X_WrByte>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	461a      	mov	r2, r3
 800ab60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab64:	4313      	orrs	r3, r2
 800ab66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f7ff fccc 	bl	800a508 <VL53L0X_device_read_strobe>
 800ab70:	4603      	mov	r3, r0
 800ab72:	461a      	mov	r2, r3
 800ab74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab78:	4313      	orrs	r3, r2
 800ab7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800ab7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ab82:	461a      	mov	r2, r3
 800ab84:	2190      	movs	r1, #144	; 0x90
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f002 f8a0 	bl	800cccc <VL53L0X_RdDWord>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	461a      	mov	r2, r3
 800ab90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab94:	4313      	orrs	r3, r2
 800ab96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800ab9a:	227c      	movs	r2, #124	; 0x7c
 800ab9c:	2194      	movs	r1, #148	; 0x94
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f001 ffb0 	bl	800cb04 <VL53L0X_WrByte>
 800aba4:	4603      	mov	r3, r0
 800aba6:	461a      	mov	r2, r3
 800aba8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800abac:	4313      	orrs	r3, r2
 800abae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f7ff fca8 	bl	800a508 <VL53L0X_device_read_strobe>
 800abb8:	4603      	mov	r3, r0
 800abba:	461a      	mov	r2, r3
 800abbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800abc0:	4313      	orrs	r3, r2
 800abc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800abc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800abca:	461a      	mov	r2, r3
 800abcc:	2190      	movs	r1, #144	; 0x90
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	f002 f87c 	bl	800cccc <VL53L0X_RdDWord>
 800abd4:	4603      	mov	r3, r0
 800abd6:	461a      	mov	r2, r3
 800abd8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800abdc:	4313      	orrs	r3, r2
 800abde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800abe2:	2273      	movs	r2, #115	; 0x73
 800abe4:	2194      	movs	r1, #148	; 0x94
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f001 ff8c 	bl	800cb04 <VL53L0X_WrByte>
 800abec:	4603      	mov	r3, r0
 800abee:	461a      	mov	r2, r3
 800abf0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800abf4:	4313      	orrs	r3, r2
 800abf6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f7ff fc84 	bl	800a508 <VL53L0X_device_read_strobe>
 800ac00:	4603      	mov	r3, r0
 800ac02:	461a      	mov	r2, r3
 800ac04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ac0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ac12:	461a      	mov	r2, r3
 800ac14:	2190      	movs	r1, #144	; 0x90
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f002 f858 	bl	800cccc <VL53L0X_RdDWord>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	461a      	mov	r2, r3
 800ac20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac24:	4313      	orrs	r3, r2
 800ac26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800ac2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac2c:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800ac2e:	b29b      	uxth	r3, r3
 800ac30:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800ac32:	2274      	movs	r2, #116	; 0x74
 800ac34:	2194      	movs	r1, #148	; 0x94
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f001 ff64 	bl	800cb04 <VL53L0X_WrByte>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	461a      	mov	r2, r3
 800ac40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac44:	4313      	orrs	r3, r2
 800ac46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f7ff fc5c 	bl	800a508 <VL53L0X_device_read_strobe>
 800ac50:	4603      	mov	r3, r0
 800ac52:	461a      	mov	r2, r3
 800ac54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac58:	4313      	orrs	r3, r2
 800ac5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ac5e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ac62:	461a      	mov	r2, r3
 800ac64:	2190      	movs	r1, #144	; 0x90
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f002 f830 	bl	800cccc <VL53L0X_RdDWord>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	461a      	mov	r2, r3
 800ac70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac74:	4313      	orrs	r3, r2
 800ac76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800ac7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac7c:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800ac7e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ac80:	4313      	orrs	r3, r2
 800ac82:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800ac84:	2275      	movs	r2, #117	; 0x75
 800ac86:	2194      	movs	r1, #148	; 0x94
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f001 ff3b 	bl	800cb04 <VL53L0X_WrByte>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	461a      	mov	r2, r3
 800ac92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac96:	4313      	orrs	r3, r2
 800ac98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f7ff fc33 	bl	800a508 <VL53L0X_device_read_strobe>
 800aca2:	4603      	mov	r3, r0
 800aca4:	461a      	mov	r2, r3
 800aca6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800acaa:	4313      	orrs	r3, r2
 800acac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800acb0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800acb4:	461a      	mov	r2, r3
 800acb6:	2190      	movs	r1, #144	; 0x90
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f002 f807 	bl	800cccc <VL53L0X_RdDWord>
 800acbe:	4603      	mov	r3, r0
 800acc0:	461a      	mov	r2, r3
 800acc2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800acc6:	4313      	orrs	r3, r2
 800acc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800accc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acce:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800acd0:	b29b      	uxth	r3, r3
 800acd2:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800acd4:	2276      	movs	r2, #118	; 0x76
 800acd6:	2194      	movs	r1, #148	; 0x94
 800acd8:	6878      	ldr	r0, [r7, #4]
 800acda:	f001 ff13 	bl	800cb04 <VL53L0X_WrByte>
 800acde:	4603      	mov	r3, r0
 800ace0:	461a      	mov	r2, r3
 800ace2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ace6:	4313      	orrs	r3, r2
 800ace8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f7ff fc0b 	bl	800a508 <VL53L0X_device_read_strobe>
 800acf2:	4603      	mov	r3, r0
 800acf4:	461a      	mov	r2, r3
 800acf6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800acfa:	4313      	orrs	r3, r2
 800acfc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ad00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ad04:	461a      	mov	r2, r3
 800ad06:	2190      	movs	r1, #144	; 0x90
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f001 ffdf 	bl	800cccc <VL53L0X_RdDWord>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	461a      	mov	r2, r3
 800ad12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad16:	4313      	orrs	r3, r2
 800ad18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800ad1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad1e:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800ad20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ad22:	4313      	orrs	r3, r2
 800ad24:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800ad26:	2200      	movs	r2, #0
 800ad28:	2181      	movs	r1, #129	; 0x81
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f001 feea 	bl	800cb04 <VL53L0X_WrByte>
 800ad30:	4603      	mov	r3, r0
 800ad32:	461a      	mov	r2, r3
 800ad34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad38:	4313      	orrs	r3, r2
 800ad3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800ad3e:	2206      	movs	r2, #6
 800ad40:	21ff      	movs	r1, #255	; 0xff
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f001 fede 	bl	800cb04 <VL53L0X_WrByte>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	461a      	mov	r2, r3
 800ad4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad50:	4313      	orrs	r3, r2
 800ad52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800ad56:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800ad5a:	461a      	mov	r2, r3
 800ad5c:	2183      	movs	r1, #131	; 0x83
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f001 ff52 	bl	800cc08 <VL53L0X_RdByte>
 800ad64:	4603      	mov	r3, r0
 800ad66:	461a      	mov	r2, r3
 800ad68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad6c:	4313      	orrs	r3, r2
 800ad6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800ad72:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ad76:	f023 0304 	bic.w	r3, r3, #4
 800ad7a:	b2db      	uxtb	r3, r3
 800ad7c:	461a      	mov	r2, r3
 800ad7e:	2183      	movs	r1, #131	; 0x83
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f001 febf 	bl	800cb04 <VL53L0X_WrByte>
 800ad86:	4603      	mov	r3, r0
 800ad88:	461a      	mov	r2, r3
 800ad8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad8e:	4313      	orrs	r3, r2
 800ad90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800ad94:	2201      	movs	r2, #1
 800ad96:	21ff      	movs	r1, #255	; 0xff
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f001 feb3 	bl	800cb04 <VL53L0X_WrByte>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	461a      	mov	r2, r3
 800ada2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ada6:	4313      	orrs	r3, r2
 800ada8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800adac:	2201      	movs	r2, #1
 800adae:	2100      	movs	r1, #0
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f001 fea7 	bl	800cb04 <VL53L0X_WrByte>
 800adb6:	4603      	mov	r3, r0
 800adb8:	461a      	mov	r2, r3
 800adba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800adbe:	4313      	orrs	r3, r2
 800adc0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800adc4:	2200      	movs	r2, #0
 800adc6:	21ff      	movs	r1, #255	; 0xff
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f001 fe9b 	bl	800cb04 <VL53L0X_WrByte>
 800adce:	4603      	mov	r3, r0
 800add0:	461a      	mov	r2, r3
 800add2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800add6:	4313      	orrs	r3, r2
 800add8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800addc:	2200      	movs	r2, #0
 800adde:	2180      	movs	r1, #128	; 0x80
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f001 fe8f 	bl	800cb04 <VL53L0X_WrByte>
 800ade6:	4603      	mov	r3, r0
 800ade8:	461a      	mov	r2, r3
 800adea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800adee:	4313      	orrs	r3, r2
 800adf0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800adf4:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	f040 808f 	bne.w	800af1c <VL53L0X_get_info_from_device+0x98e>
 800adfe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ae02:	2b07      	cmp	r3, #7
 800ae04:	f000 808a 	beq.w	800af1c <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800ae08:	78fb      	ldrb	r3, [r7, #3]
 800ae0a:	f003 0301 	and.w	r3, r3, #1
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d024      	beq.n	800ae5c <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800ae12:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ae16:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d11e      	bne.n	800ae5c <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800ae24:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800ae2e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800ae32:	2300      	movs	r3, #0
 800ae34:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae36:	e00e      	b.n	800ae56 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800ae38:	f107 0208 	add.w	r2, r7, #8
 800ae3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae3e:	4413      	add	r3, r2
 800ae40:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800ae42:	687a      	ldr	r2, [r7, #4]
 800ae44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae46:	4413      	add	r3, r2
 800ae48:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800ae4c:	460a      	mov	r2, r1
 800ae4e:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800ae50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae52:	3301      	adds	r3, #1
 800ae54:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae58:	2b05      	cmp	r3, #5
 800ae5a:	dded      	ble.n	800ae38 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800ae5c:	78fb      	ldrb	r3, [r7, #3]
 800ae5e:	f003 0302 	and.w	r3, r3, #2
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d018      	beq.n	800ae98 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800ae66:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ae6a:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d112      	bne.n	800ae98 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800ae72:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800ae7c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	33f3      	adds	r3, #243	; 0xf3
 800ae8a:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800ae8c:	f107 0310 	add.w	r3, r7, #16
 800ae90:	4619      	mov	r1, r3
 800ae92:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ae94:	f001 ffa0 	bl	800cdd8 <strcpy>

		}

		if (((option & 4) == 4) &&
 800ae98:	78fb      	ldrb	r3, [r7, #3]
 800ae9a:	f003 0304 	and.w	r3, r3, #4
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d030      	beq.n	800af04 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800aea2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800aea6:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d12a      	bne.n	800af04 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800aeae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800aeb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800aebe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aec0:	025b      	lsls	r3, r3, #9
 800aec2:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aec8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800aecc:	2300      	movs	r3, #0
 800aece:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800aed2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d011      	beq.n	800aefc <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800aed8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aeda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aedc:	1ad3      	subs	r3, r2, r3
 800aede:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800aee0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aee2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800aee6:	fb02 f303 	mul.w	r3, r2, r3
 800aeea:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800aeec:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800aef0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800aef4:	425b      	negs	r3, r3
 800aef6:	b29b      	uxth	r3, r3
 800aef8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800aefc:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800af04:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800af08:	78fb      	ldrb	r3, [r7, #3]
 800af0a:	4313      	orrs	r3, r2
 800af0c:	b2db      	uxtb	r3, r3
 800af0e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800af12:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800af1c:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800af20:	4618      	mov	r0, r3
 800af22:	3760      	adds	r7, #96	; 0x60
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}

0800af28 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800af28:	b480      	push	{r7}
 800af2a:	b087      	sub	sp, #28
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	460b      	mov	r3, r1
 800af32:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800af34:	f240 6277 	movw	r2, #1655	; 0x677
 800af38:	f04f 0300 	mov.w	r3, #0
 800af3c:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800af40:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800af44:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800af46:	78fb      	ldrb	r3, [r7, #3]
 800af48:	68fa      	ldr	r2, [r7, #12]
 800af4a:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800af4e:	693a      	ldr	r2, [r7, #16]
 800af50:	fb02 f303 	mul.w	r3, r2, r3
 800af54:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800af56:	68bb      	ldr	r3, [r7, #8]
}
 800af58:	4618      	mov	r0, r3
 800af5a:	371c      	adds	r7, #28
 800af5c:	46bd      	mov	sp, r7
 800af5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af62:	4770      	bx	lr

0800af64 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800af64:	b480      	push	{r7}
 800af66:	b087      	sub	sp, #28
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800af6c:	2300      	movs	r3, #0
 800af6e:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800af70:	2300      	movs	r3, #0
 800af72:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800af74:	2300      	movs	r3, #0
 800af76:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d017      	beq.n	800afae <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	3b01      	subs	r3, #1
 800af82:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800af84:	e005      	b.n	800af92 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800af86:	693b      	ldr	r3, [r7, #16]
 800af88:	085b      	lsrs	r3, r3, #1
 800af8a:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800af8c:	89fb      	ldrh	r3, [r7, #14]
 800af8e:	3301      	adds	r3, #1
 800af90:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800af92:	693b      	ldr	r3, [r7, #16]
 800af94:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d1f4      	bne.n	800af86 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800af9c:	89fb      	ldrh	r3, [r7, #14]
 800af9e:	021b      	lsls	r3, r3, #8
 800afa0:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	b29b      	uxth	r3, r3
 800afa6:	b2db      	uxtb	r3, r3
 800afa8:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800afaa:	4413      	add	r3, r2
 800afac:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800afae:	8afb      	ldrh	r3, [r7, #22]

}
 800afb0:	4618      	mov	r0, r3
 800afb2:	371c      	adds	r7, #28
 800afb4:	46bd      	mov	sp, r7
 800afb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afba:	4770      	bx	lr

0800afbc <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800afbc:	b480      	push	{r7}
 800afbe:	b085      	sub	sp, #20
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	4603      	mov	r3, r0
 800afc4:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800afc6:	2300      	movs	r3, #0
 800afc8:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800afca:	88fb      	ldrh	r3, [r7, #6]
 800afcc:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800afce:	88fa      	ldrh	r2, [r7, #6]
 800afd0:	0a12      	lsrs	r2, r2, #8
 800afd2:	b292      	uxth	r2, r2
 800afd4:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800afd6:	3301      	adds	r3, #1
 800afd8:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800afda:	68fb      	ldr	r3, [r7, #12]
}
 800afdc:	4618      	mov	r0, r3
 800afde:	3714      	adds	r7, #20
 800afe0:	46bd      	mov	sp, r7
 800afe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe6:	4770      	bx	lr

0800afe8 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b088      	sub	sp, #32
 800afec:	af00      	add	r7, sp, #0
 800afee:	60f8      	str	r0, [r7, #12]
 800aff0:	60b9      	str	r1, [r7, #8]
 800aff2:	4613      	mov	r3, r2
 800aff4:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800aff6:	2300      	movs	r3, #0
 800aff8:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800affa:	79fb      	ldrb	r3, [r7, #7]
 800affc:	4619      	mov	r1, r3
 800affe:	68f8      	ldr	r0, [r7, #12]
 800b000:	f7ff ff92 	bl	800af28 <VL53L0X_calc_macro_period_ps>
 800b004:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800b006:	69bb      	ldr	r3, [r7, #24]
 800b008:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b00c:	4a0a      	ldr	r2, [pc, #40]	; (800b038 <VL53L0X_calc_timeout_mclks+0x50>)
 800b00e:	fba2 2303 	umull	r2, r3, r2, r3
 800b012:	099b      	lsrs	r3, r3, #6
 800b014:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b01c:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	085b      	lsrs	r3, r3, #1
 800b024:	441a      	add	r2, r3
	timeout_period_mclks =
 800b026:	697b      	ldr	r3, [r7, #20]
 800b028:	fbb2 f3f3 	udiv	r3, r2, r3
 800b02c:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800b02e:	69fb      	ldr	r3, [r7, #28]
}
 800b030:	4618      	mov	r0, r3
 800b032:	3720      	adds	r7, #32
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}
 800b038:	10624dd3 	.word	0x10624dd3

0800b03c <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b086      	sub	sp, #24
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
 800b044:	460b      	mov	r3, r1
 800b046:	807b      	strh	r3, [r7, #2]
 800b048:	4613      	mov	r3, r2
 800b04a:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800b04c:	2300      	movs	r3, #0
 800b04e:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800b050:	787b      	ldrb	r3, [r7, #1]
 800b052:	4619      	mov	r1, r3
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f7ff ff67 	bl	800af28 <VL53L0X_calc_macro_period_ps>
 800b05a:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800b05c:	693b      	ldr	r3, [r7, #16]
 800b05e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b062:	4a0a      	ldr	r2, [pc, #40]	; (800b08c <VL53L0X_calc_timeout_us+0x50>)
 800b064:	fba2 2303 	umull	r2, r3, r2, r3
 800b068:	099b      	lsrs	r3, r3, #6
 800b06a:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800b06c:	887b      	ldrh	r3, [r7, #2]
 800b06e:	68fa      	ldr	r2, [r7, #12]
 800b070:	fb02 f303 	mul.w	r3, r2, r3
 800b074:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800b078:	4a04      	ldr	r2, [pc, #16]	; (800b08c <VL53L0X_calc_timeout_us+0x50>)
 800b07a:	fba2 2303 	umull	r2, r3, r2, r3
 800b07e:	099b      	lsrs	r3, r3, #6
 800b080:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800b082:	697b      	ldr	r3, [r7, #20]
}
 800b084:	4618      	mov	r0, r3
 800b086:	3718      	adds	r7, #24
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}
 800b08c:	10624dd3 	.word	0x10624dd3

0800b090 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b08c      	sub	sp, #48	; 0x30
 800b094:	af00      	add	r7, sp, #0
 800b096:	60f8      	str	r0, [r7, #12]
 800b098:	460b      	mov	r3, r1
 800b09a:	607a      	str	r2, [r7, #4]
 800b09c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800b0b6:	7afb      	ldrb	r3, [r7, #11]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d005      	beq.n	800b0c8 <get_sequence_step_timeout+0x38>
 800b0bc:	7afb      	ldrb	r3, [r7, #11]
 800b0be:	2b01      	cmp	r3, #1
 800b0c0:	d002      	beq.n	800b0c8 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800b0c2:	7afb      	ldrb	r3, [r7, #11]
 800b0c4:	2b02      	cmp	r3, #2
 800b0c6:	d128      	bne.n	800b11a <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b0c8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800b0cc:	461a      	mov	r2, r3
 800b0ce:	2100      	movs	r1, #0
 800b0d0:	68f8      	ldr	r0, [r7, #12]
 800b0d2:	f7fd fa7d 	bl	80085d0 <VL53L0X_GetVcselPulsePeriod>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800b0dc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d109      	bne.n	800b0f8 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800b0e4:	f107 0320 	add.w	r3, r7, #32
 800b0e8:	461a      	mov	r2, r3
 800b0ea:	2146      	movs	r1, #70	; 0x46
 800b0ec:	68f8      	ldr	r0, [r7, #12]
 800b0ee:	f001 fd8b 	bl	800cc08 <VL53L0X_RdByte>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800b0f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b0fc:	b29b      	uxth	r3, r3
 800b0fe:	4618      	mov	r0, r3
 800b100:	f7ff ff5c 	bl	800afbc <VL53L0X_decode_timeout>
 800b104:	4603      	mov	r3, r0
 800b106:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800b108:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b10c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b10e:	4619      	mov	r1, r3
 800b110:	68f8      	ldr	r0, [r7, #12]
 800b112:	f7ff ff93 	bl	800b03c <VL53L0X_calc_timeout_us>
 800b116:	62b8      	str	r0, [r7, #40]	; 0x28
 800b118:	e092      	b.n	800b240 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800b11a:	7afb      	ldrb	r3, [r7, #11]
 800b11c:	2b03      	cmp	r3, #3
 800b11e:	d135      	bne.n	800b18c <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b120:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800b124:	461a      	mov	r2, r3
 800b126:	2100      	movs	r1, #0
 800b128:	68f8      	ldr	r0, [r7, #12]
 800b12a:	f7fd fa51 	bl	80085d0 <VL53L0X_GetVcselPulsePeriod>
 800b12e:	4603      	mov	r3, r0
 800b130:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800b134:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b138:	2b00      	cmp	r3, #0
 800b13a:	f040 8081 	bne.w	800b240 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b13e:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800b142:	461a      	mov	r2, r3
 800b144:	2100      	movs	r1, #0
 800b146:	68f8      	ldr	r0, [r7, #12]
 800b148:	f7fd fa42 	bl	80085d0 <VL53L0X_GetVcselPulsePeriod>
 800b14c:	4603      	mov	r3, r0
 800b14e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800b152:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b156:	2b00      	cmp	r3, #0
 800b158:	d109      	bne.n	800b16e <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800b15a:	f107 031e 	add.w	r3, r7, #30
 800b15e:	461a      	mov	r2, r3
 800b160:	2151      	movs	r1, #81	; 0x51
 800b162:	68f8      	ldr	r0, [r7, #12]
 800b164:	f001 fd7a 	bl	800cc5c <VL53L0X_RdWord>
 800b168:	4603      	mov	r3, r0
 800b16a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800b16e:	8bfb      	ldrh	r3, [r7, #30]
 800b170:	4618      	mov	r0, r3
 800b172:	f7ff ff23 	bl	800afbc <VL53L0X_decode_timeout>
 800b176:	4603      	mov	r3, r0
 800b178:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800b17a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b17e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b180:	4619      	mov	r1, r3
 800b182:	68f8      	ldr	r0, [r7, #12]
 800b184:	f7ff ff5a 	bl	800b03c <VL53L0X_calc_timeout_us>
 800b188:	62b8      	str	r0, [r7, #40]	; 0x28
 800b18a:	e059      	b.n	800b240 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800b18c:	7afb      	ldrb	r3, [r7, #11]
 800b18e:	2b04      	cmp	r3, #4
 800b190:	d156      	bne.n	800b240 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800b192:	f107 0314 	add.w	r3, r7, #20
 800b196:	4619      	mov	r1, r3
 800b198:	68f8      	ldr	r0, [r7, #12]
 800b19a:	f7fd fb25 	bl	80087e8 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800b19e:	2300      	movs	r3, #0
 800b1a0:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800b1a2:	7dfb      	ldrb	r3, [r7, #23]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d01d      	beq.n	800b1e4 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b1a8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800b1ac:	461a      	mov	r2, r3
 800b1ae:	2100      	movs	r1, #0
 800b1b0:	68f8      	ldr	r0, [r7, #12]
 800b1b2:	f7fd fa0d 	bl	80085d0 <VL53L0X_GetVcselPulsePeriod>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800b1bc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d10f      	bne.n	800b1e4 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800b1c4:	f107 031e 	add.w	r3, r7, #30
 800b1c8:	461a      	mov	r2, r3
 800b1ca:	2151      	movs	r1, #81	; 0x51
 800b1cc:	68f8      	ldr	r0, [r7, #12]
 800b1ce:	f001 fd45 	bl	800cc5c <VL53L0X_RdWord>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800b1d8:	8bfb      	ldrh	r3, [r7, #30]
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f7ff feee 	bl	800afbc <VL53L0X_decode_timeout>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800b1e4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d109      	bne.n	800b200 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b1ec:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800b1f0:	461a      	mov	r2, r3
 800b1f2:	2101      	movs	r1, #1
 800b1f4:	68f8      	ldr	r0, [r7, #12]
 800b1f6:	f7fd f9eb 	bl	80085d0 <VL53L0X_GetVcselPulsePeriod>
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800b200:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b204:	2b00      	cmp	r3, #0
 800b206:	d10f      	bne.n	800b228 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800b208:	f107 031c 	add.w	r3, r7, #28
 800b20c:	461a      	mov	r2, r3
 800b20e:	2171      	movs	r1, #113	; 0x71
 800b210:	68f8      	ldr	r0, [r7, #12]
 800b212:	f001 fd23 	bl	800cc5c <VL53L0X_RdWord>
 800b216:	4603      	mov	r3, r0
 800b218:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800b21c:	8bbb      	ldrh	r3, [r7, #28]
 800b21e:	4618      	mov	r0, r3
 800b220:	f7ff fecc 	bl	800afbc <VL53L0X_decode_timeout>
 800b224:	4603      	mov	r3, r0
 800b226:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800b228:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b22a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b22c:	1ad3      	subs	r3, r2, r3
 800b22e:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800b230:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b234:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b236:	4619      	mov	r1, r3
 800b238:	68f8      	ldr	r0, [r7, #12]
 800b23a:	f7ff feff 	bl	800b03c <VL53L0X_calc_timeout_us>
 800b23e:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b244:	601a      	str	r2, [r3, #0]

	return Status;
 800b246:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	3730      	adds	r7, #48	; 0x30
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}

0800b252 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800b252:	b580      	push	{r7, lr}
 800b254:	b08a      	sub	sp, #40	; 0x28
 800b256:	af00      	add	r7, sp, #0
 800b258:	60f8      	str	r0, [r7, #12]
 800b25a:	460b      	mov	r3, r1
 800b25c:	607a      	str	r2, [r7, #4]
 800b25e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b260:	2300      	movs	r3, #0
 800b262:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800b266:	7afb      	ldrb	r3, [r7, #11]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d005      	beq.n	800b278 <set_sequence_step_timeout+0x26>
 800b26c:	7afb      	ldrb	r3, [r7, #11]
 800b26e:	2b01      	cmp	r3, #1
 800b270:	d002      	beq.n	800b278 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800b272:	7afb      	ldrb	r3, [r7, #11]
 800b274:	2b02      	cmp	r3, #2
 800b276:	d138      	bne.n	800b2ea <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b278:	f107 031b 	add.w	r3, r7, #27
 800b27c:	461a      	mov	r2, r3
 800b27e:	2100      	movs	r1, #0
 800b280:	68f8      	ldr	r0, [r7, #12]
 800b282:	f7fd f9a5 	bl	80085d0 <VL53L0X_GetVcselPulsePeriod>
 800b286:	4603      	mov	r3, r0
 800b288:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800b28c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b290:	2b00      	cmp	r3, #0
 800b292:	d11a      	bne.n	800b2ca <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800b294:	7efb      	ldrb	r3, [r7, #27]
 800b296:	461a      	mov	r2, r3
 800b298:	6879      	ldr	r1, [r7, #4]
 800b29a:	68f8      	ldr	r0, [r7, #12]
 800b29c:	f7ff fea4 	bl	800afe8 <VL53L0X_calc_timeout_mclks>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800b2a4:	8bbb      	ldrh	r3, [r7, #28]
 800b2a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2aa:	d903      	bls.n	800b2b4 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800b2ac:	23ff      	movs	r3, #255	; 0xff
 800b2ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b2b2:	e004      	b.n	800b2be <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800b2b4:	8bbb      	ldrh	r3, [r7, #28]
 800b2b6:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800b2b8:	3b01      	subs	r3, #1
 800b2ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b2be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b2c2:	b29a      	uxth	r2, r3
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800b2ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	f040 80ab 	bne.w	800b42a <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800b2d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b2d8:	461a      	mov	r2, r3
 800b2da:	2146      	movs	r1, #70	; 0x46
 800b2dc:	68f8      	ldr	r0, [r7, #12]
 800b2de:	f001 fc11 	bl	800cb04 <VL53L0X_WrByte>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800b2e8:	e09f      	b.n	800b42a <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800b2ea:	7afb      	ldrb	r3, [r7, #11]
 800b2ec:	2b03      	cmp	r3, #3
 800b2ee:	d135      	bne.n	800b35c <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800b2f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d11b      	bne.n	800b330 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b2f8:	f107 031b 	add.w	r3, r7, #27
 800b2fc:	461a      	mov	r2, r3
 800b2fe:	2100      	movs	r1, #0
 800b300:	68f8      	ldr	r0, [r7, #12]
 800b302:	f7fd f965 	bl	80085d0 <VL53L0X_GetVcselPulsePeriod>
 800b306:	4603      	mov	r3, r0
 800b308:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800b30c:	7efb      	ldrb	r3, [r7, #27]
 800b30e:	461a      	mov	r2, r3
 800b310:	6879      	ldr	r1, [r7, #4]
 800b312:	68f8      	ldr	r0, [r7, #12]
 800b314:	f7ff fe68 	bl	800afe8 <VL53L0X_calc_timeout_mclks>
 800b318:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800b31a:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800b31c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b31e:	4618      	mov	r0, r3
 800b320:	f7ff fe20 	bl	800af64 <VL53L0X_encode_timeout>
 800b324:	4603      	mov	r3, r0
 800b326:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b328:	8b3a      	ldrh	r2, [r7, #24]
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800b330:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b334:	2b00      	cmp	r3, #0
 800b336:	d108      	bne.n	800b34a <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800b338:	8b3b      	ldrh	r3, [r7, #24]
 800b33a:	461a      	mov	r2, r3
 800b33c:	2151      	movs	r1, #81	; 0x51
 800b33e:	68f8      	ldr	r0, [r7, #12]
 800b340:	f001 fc04 	bl	800cb4c <VL53L0X_WrWord>
 800b344:	4603      	mov	r3, r0
 800b346:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800b34a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d16b      	bne.n	800b42a <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	687a      	ldr	r2, [r7, #4]
 800b356:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800b35a:	e066      	b.n	800b42a <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800b35c:	7afb      	ldrb	r3, [r7, #11]
 800b35e:	2b04      	cmp	r3, #4
 800b360:	d160      	bne.n	800b424 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800b362:	f107 0310 	add.w	r3, r7, #16
 800b366:	4619      	mov	r1, r3
 800b368:	68f8      	ldr	r0, [r7, #12]
 800b36a:	f7fd fa3d 	bl	80087e8 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800b36e:	2300      	movs	r3, #0
 800b370:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800b372:	7cfb      	ldrb	r3, [r7, #19]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d01d      	beq.n	800b3b4 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b378:	f107 031b 	add.w	r3, r7, #27
 800b37c:	461a      	mov	r2, r3
 800b37e:	2100      	movs	r1, #0
 800b380:	68f8      	ldr	r0, [r7, #12]
 800b382:	f7fd f925 	bl	80085d0 <VL53L0X_GetVcselPulsePeriod>
 800b386:	4603      	mov	r3, r0
 800b388:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800b38c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b390:	2b00      	cmp	r3, #0
 800b392:	d10f      	bne.n	800b3b4 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800b394:	f107 0318 	add.w	r3, r7, #24
 800b398:	461a      	mov	r2, r3
 800b39a:	2151      	movs	r1, #81	; 0x51
 800b39c:	68f8      	ldr	r0, [r7, #12]
 800b39e:	f001 fc5d 	bl	800cc5c <VL53L0X_RdWord>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800b3a8:	8b3b      	ldrh	r3, [r7, #24]
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f7ff fe06 	bl	800afbc <VL53L0X_decode_timeout>
 800b3b0:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800b3b2:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800b3b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d109      	bne.n	800b3d0 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b3bc:	f107 031b 	add.w	r3, r7, #27
 800b3c0:	461a      	mov	r2, r3
 800b3c2:	2101      	movs	r1, #1
 800b3c4:	68f8      	ldr	r0, [r7, #12]
 800b3c6:	f7fd f903 	bl	80085d0 <VL53L0X_GetVcselPulsePeriod>
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800b3d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d128      	bne.n	800b42a <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800b3d8:	7efb      	ldrb	r3, [r7, #27]
 800b3da:	461a      	mov	r2, r3
 800b3dc:	6879      	ldr	r1, [r7, #4]
 800b3de:	68f8      	ldr	r0, [r7, #12]
 800b3e0:	f7ff fe02 	bl	800afe8 <VL53L0X_calc_timeout_mclks>
 800b3e4:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800b3e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3e8:	6a3a      	ldr	r2, [r7, #32]
 800b3ea:	4413      	add	r3, r2
 800b3ec:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800b3ee:	6a38      	ldr	r0, [r7, #32]
 800b3f0:	f7ff fdb8 	bl	800af64 <VL53L0X_encode_timeout>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800b3f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d108      	bne.n	800b412 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800b400:	8bfb      	ldrh	r3, [r7, #30]
 800b402:	461a      	mov	r2, r3
 800b404:	2171      	movs	r1, #113	; 0x71
 800b406:	68f8      	ldr	r0, [r7, #12]
 800b408:	f001 fba0 	bl	800cb4c <VL53L0X_WrWord>
 800b40c:	4603      	mov	r3, r0
 800b40e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800b412:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b416:	2b00      	cmp	r3, #0
 800b418:	d107      	bne.n	800b42a <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	687a      	ldr	r2, [r7, #4]
 800b41e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800b422:	e002      	b.n	800b42a <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b424:	23fc      	movs	r3, #252	; 0xfc
 800b426:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800b42a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800b42e:	4618      	mov	r0, r3
 800b430:	3728      	adds	r7, #40	; 0x28
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}

0800b436 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800b436:	b580      	push	{r7, lr}
 800b438:	b08a      	sub	sp, #40	; 0x28
 800b43a:	af00      	add	r7, sp, #0
 800b43c:	6078      	str	r0, [r7, #4]
 800b43e:	460b      	mov	r3, r1
 800b440:	70fb      	strb	r3, [r7, #3]
 800b442:	4613      	mov	r3, r2
 800b444:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b446:	2300      	movs	r3, #0
 800b448:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800b44c:	230c      	movs	r3, #12
 800b44e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800b452:	2312      	movs	r3, #18
 800b454:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800b458:	2308      	movs	r3, #8
 800b45a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800b45e:	230e      	movs	r3, #14
 800b460:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800b464:	2300      	movs	r3, #0
 800b466:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800b468:	78bb      	ldrb	r3, [r7, #2]
 800b46a:	f003 0301 	and.w	r3, r3, #1
 800b46e:	b2db      	uxtb	r3, r3
 800b470:	2b00      	cmp	r3, #0
 800b472:	d003      	beq.n	800b47c <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b474:	23fc      	movs	r3, #252	; 0xfc
 800b476:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b47a:	e020      	b.n	800b4be <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800b47c:	78fb      	ldrb	r3, [r7, #3]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d10d      	bne.n	800b49e <VL53L0X_set_vcsel_pulse_period+0x68>
 800b482:	78ba      	ldrb	r2, [r7, #2]
 800b484:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b488:	429a      	cmp	r2, r3
 800b48a:	d304      	bcc.n	800b496 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800b48c:	78ba      	ldrb	r2, [r7, #2]
 800b48e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b492:	429a      	cmp	r2, r3
 800b494:	d903      	bls.n	800b49e <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b496:	23fc      	movs	r3, #252	; 0xfc
 800b498:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b49c:	e00f      	b.n	800b4be <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800b49e:	78fb      	ldrb	r3, [r7, #3]
 800b4a0:	2b01      	cmp	r3, #1
 800b4a2:	d10c      	bne.n	800b4be <VL53L0X_set_vcsel_pulse_period+0x88>
 800b4a4:	78ba      	ldrb	r2, [r7, #2]
 800b4a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b4aa:	429a      	cmp	r2, r3
 800b4ac:	d304      	bcc.n	800b4b8 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800b4ae:	78ba      	ldrb	r2, [r7, #2]
 800b4b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	d902      	bls.n	800b4be <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b4b8:	23fc      	movs	r3, #252	; 0xfc
 800b4ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800b4be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d002      	beq.n	800b4cc <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800b4c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b4ca:	e239      	b.n	800b940 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800b4cc:	78fb      	ldrb	r3, [r7, #3]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d150      	bne.n	800b574 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800b4d2:	78bb      	ldrb	r3, [r7, #2]
 800b4d4:	2b0c      	cmp	r3, #12
 800b4d6:	d110      	bne.n	800b4fa <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800b4d8:	2218      	movs	r2, #24
 800b4da:	2157      	movs	r1, #87	; 0x57
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f001 fb11 	bl	800cb04 <VL53L0X_WrByte>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800b4e8:	2208      	movs	r2, #8
 800b4ea:	2156      	movs	r1, #86	; 0x56
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f001 fb09 	bl	800cb04 <VL53L0X_WrByte>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b4f8:	e17f      	b.n	800b7fa <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800b4fa:	78bb      	ldrb	r3, [r7, #2]
 800b4fc:	2b0e      	cmp	r3, #14
 800b4fe:	d110      	bne.n	800b522 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800b500:	2230      	movs	r2, #48	; 0x30
 800b502:	2157      	movs	r1, #87	; 0x57
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f001 fafd 	bl	800cb04 <VL53L0X_WrByte>
 800b50a:	4603      	mov	r3, r0
 800b50c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800b510:	2208      	movs	r2, #8
 800b512:	2156      	movs	r1, #86	; 0x56
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f001 faf5 	bl	800cb04 <VL53L0X_WrByte>
 800b51a:	4603      	mov	r3, r0
 800b51c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b520:	e16b      	b.n	800b7fa <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800b522:	78bb      	ldrb	r3, [r7, #2]
 800b524:	2b10      	cmp	r3, #16
 800b526:	d110      	bne.n	800b54a <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800b528:	2240      	movs	r2, #64	; 0x40
 800b52a:	2157      	movs	r1, #87	; 0x57
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f001 fae9 	bl	800cb04 <VL53L0X_WrByte>
 800b532:	4603      	mov	r3, r0
 800b534:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800b538:	2208      	movs	r2, #8
 800b53a:	2156      	movs	r1, #86	; 0x56
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f001 fae1 	bl	800cb04 <VL53L0X_WrByte>
 800b542:	4603      	mov	r3, r0
 800b544:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b548:	e157      	b.n	800b7fa <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800b54a:	78bb      	ldrb	r3, [r7, #2]
 800b54c:	2b12      	cmp	r3, #18
 800b54e:	f040 8154 	bne.w	800b7fa <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800b552:	2250      	movs	r2, #80	; 0x50
 800b554:	2157      	movs	r1, #87	; 0x57
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f001 fad4 	bl	800cb04 <VL53L0X_WrByte>
 800b55c:	4603      	mov	r3, r0
 800b55e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800b562:	2208      	movs	r2, #8
 800b564:	2156      	movs	r1, #86	; 0x56
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f001 facc 	bl	800cb04 <VL53L0X_WrByte>
 800b56c:	4603      	mov	r3, r0
 800b56e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b572:	e142      	b.n	800b7fa <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800b574:	78fb      	ldrb	r3, [r7, #3]
 800b576:	2b01      	cmp	r3, #1
 800b578:	f040 813f 	bne.w	800b7fa <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800b57c:	78bb      	ldrb	r3, [r7, #2]
 800b57e:	2b08      	cmp	r3, #8
 800b580:	d14c      	bne.n	800b61c <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800b582:	2210      	movs	r2, #16
 800b584:	2148      	movs	r1, #72	; 0x48
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f001 fabc 	bl	800cb04 <VL53L0X_WrByte>
 800b58c:	4603      	mov	r3, r0
 800b58e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800b592:	2208      	movs	r2, #8
 800b594:	2147      	movs	r1, #71	; 0x47
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f001 fab4 	bl	800cb04 <VL53L0X_WrByte>
 800b59c:	4603      	mov	r3, r0
 800b59e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800b5a2:	2202      	movs	r2, #2
 800b5a4:	2132      	movs	r1, #50	; 0x32
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f001 faac 	bl	800cb04 <VL53L0X_WrByte>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	461a      	mov	r2, r3
 800b5b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5b4:	4313      	orrs	r3, r2
 800b5b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800b5ba:	220c      	movs	r2, #12
 800b5bc:	2130      	movs	r1, #48	; 0x30
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f001 faa0 	bl	800cb04 <VL53L0X_WrByte>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	461a      	mov	r2, r3
 800b5c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5cc:	4313      	orrs	r3, r2
 800b5ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800b5d2:	2201      	movs	r2, #1
 800b5d4:	21ff      	movs	r1, #255	; 0xff
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f001 fa94 	bl	800cb04 <VL53L0X_WrByte>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	461a      	mov	r2, r3
 800b5e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5e4:	4313      	orrs	r3, r2
 800b5e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800b5ea:	2230      	movs	r2, #48	; 0x30
 800b5ec:	2130      	movs	r1, #48	; 0x30
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	f001 fa88 	bl	800cb04 <VL53L0X_WrByte>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	461a      	mov	r2, r3
 800b5f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5fc:	4313      	orrs	r3, r2
 800b5fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800b602:	2200      	movs	r2, #0
 800b604:	21ff      	movs	r1, #255	; 0xff
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f001 fa7c 	bl	800cb04 <VL53L0X_WrByte>
 800b60c:	4603      	mov	r3, r0
 800b60e:	461a      	mov	r2, r3
 800b610:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b614:	4313      	orrs	r3, r2
 800b616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b61a:	e0ee      	b.n	800b7fa <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800b61c:	78bb      	ldrb	r3, [r7, #2]
 800b61e:	2b0a      	cmp	r3, #10
 800b620:	d14c      	bne.n	800b6bc <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800b622:	2228      	movs	r2, #40	; 0x28
 800b624:	2148      	movs	r1, #72	; 0x48
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f001 fa6c 	bl	800cb04 <VL53L0X_WrByte>
 800b62c:	4603      	mov	r3, r0
 800b62e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800b632:	2208      	movs	r2, #8
 800b634:	2147      	movs	r1, #71	; 0x47
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f001 fa64 	bl	800cb04 <VL53L0X_WrByte>
 800b63c:	4603      	mov	r3, r0
 800b63e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800b642:	2203      	movs	r2, #3
 800b644:	2132      	movs	r1, #50	; 0x32
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f001 fa5c 	bl	800cb04 <VL53L0X_WrByte>
 800b64c:	4603      	mov	r3, r0
 800b64e:	461a      	mov	r2, r3
 800b650:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b654:	4313      	orrs	r3, r2
 800b656:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800b65a:	2209      	movs	r2, #9
 800b65c:	2130      	movs	r1, #48	; 0x30
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	f001 fa50 	bl	800cb04 <VL53L0X_WrByte>
 800b664:	4603      	mov	r3, r0
 800b666:	461a      	mov	r2, r3
 800b668:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b66c:	4313      	orrs	r3, r2
 800b66e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800b672:	2201      	movs	r2, #1
 800b674:	21ff      	movs	r1, #255	; 0xff
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	f001 fa44 	bl	800cb04 <VL53L0X_WrByte>
 800b67c:	4603      	mov	r3, r0
 800b67e:	461a      	mov	r2, r3
 800b680:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b684:	4313      	orrs	r3, r2
 800b686:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800b68a:	2220      	movs	r2, #32
 800b68c:	2130      	movs	r1, #48	; 0x30
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f001 fa38 	bl	800cb04 <VL53L0X_WrByte>
 800b694:	4603      	mov	r3, r0
 800b696:	461a      	mov	r2, r3
 800b698:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b69c:	4313      	orrs	r3, r2
 800b69e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	21ff      	movs	r1, #255	; 0xff
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f001 fa2c 	bl	800cb04 <VL53L0X_WrByte>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	461a      	mov	r2, r3
 800b6b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6b4:	4313      	orrs	r3, r2
 800b6b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b6ba:	e09e      	b.n	800b7fa <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800b6bc:	78bb      	ldrb	r3, [r7, #2]
 800b6be:	2b0c      	cmp	r3, #12
 800b6c0:	d14c      	bne.n	800b75c <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800b6c2:	2238      	movs	r2, #56	; 0x38
 800b6c4:	2148      	movs	r1, #72	; 0x48
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	f001 fa1c 	bl	800cb04 <VL53L0X_WrByte>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800b6d2:	2208      	movs	r2, #8
 800b6d4:	2147      	movs	r1, #71	; 0x47
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f001 fa14 	bl	800cb04 <VL53L0X_WrByte>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800b6e2:	2203      	movs	r2, #3
 800b6e4:	2132      	movs	r1, #50	; 0x32
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f001 fa0c 	bl	800cb04 <VL53L0X_WrByte>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	461a      	mov	r2, r3
 800b6f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6f4:	4313      	orrs	r3, r2
 800b6f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800b6fa:	2208      	movs	r2, #8
 800b6fc:	2130      	movs	r1, #48	; 0x30
 800b6fe:	6878      	ldr	r0, [r7, #4]
 800b700:	f001 fa00 	bl	800cb04 <VL53L0X_WrByte>
 800b704:	4603      	mov	r3, r0
 800b706:	461a      	mov	r2, r3
 800b708:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b70c:	4313      	orrs	r3, r2
 800b70e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800b712:	2201      	movs	r2, #1
 800b714:	21ff      	movs	r1, #255	; 0xff
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	f001 f9f4 	bl	800cb04 <VL53L0X_WrByte>
 800b71c:	4603      	mov	r3, r0
 800b71e:	461a      	mov	r2, r3
 800b720:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b724:	4313      	orrs	r3, r2
 800b726:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800b72a:	2220      	movs	r2, #32
 800b72c:	2130      	movs	r1, #48	; 0x30
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f001 f9e8 	bl	800cb04 <VL53L0X_WrByte>
 800b734:	4603      	mov	r3, r0
 800b736:	461a      	mov	r2, r3
 800b738:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b73c:	4313      	orrs	r3, r2
 800b73e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800b742:	2200      	movs	r2, #0
 800b744:	21ff      	movs	r1, #255	; 0xff
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f001 f9dc 	bl	800cb04 <VL53L0X_WrByte>
 800b74c:	4603      	mov	r3, r0
 800b74e:	461a      	mov	r2, r3
 800b750:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b754:	4313      	orrs	r3, r2
 800b756:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b75a:	e04e      	b.n	800b7fa <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800b75c:	78bb      	ldrb	r3, [r7, #2]
 800b75e:	2b0e      	cmp	r3, #14
 800b760:	d14b      	bne.n	800b7fa <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800b762:	2248      	movs	r2, #72	; 0x48
 800b764:	2148      	movs	r1, #72	; 0x48
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f001 f9cc 	bl	800cb04 <VL53L0X_WrByte>
 800b76c:	4603      	mov	r3, r0
 800b76e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800b772:	2208      	movs	r2, #8
 800b774:	2147      	movs	r1, #71	; 0x47
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	f001 f9c4 	bl	800cb04 <VL53L0X_WrByte>
 800b77c:	4603      	mov	r3, r0
 800b77e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800b782:	2203      	movs	r2, #3
 800b784:	2132      	movs	r1, #50	; 0x32
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f001 f9bc 	bl	800cb04 <VL53L0X_WrByte>
 800b78c:	4603      	mov	r3, r0
 800b78e:	461a      	mov	r2, r3
 800b790:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b794:	4313      	orrs	r3, r2
 800b796:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800b79a:	2207      	movs	r2, #7
 800b79c:	2130      	movs	r1, #48	; 0x30
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	f001 f9b0 	bl	800cb04 <VL53L0X_WrByte>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	461a      	mov	r2, r3
 800b7a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7ac:	4313      	orrs	r3, r2
 800b7ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800b7b2:	2201      	movs	r2, #1
 800b7b4:	21ff      	movs	r1, #255	; 0xff
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	f001 f9a4 	bl	800cb04 <VL53L0X_WrByte>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	461a      	mov	r2, r3
 800b7c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7c4:	4313      	orrs	r3, r2
 800b7c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800b7ca:	2220      	movs	r2, #32
 800b7cc:	2130      	movs	r1, #48	; 0x30
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f001 f998 	bl	800cb04 <VL53L0X_WrByte>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	461a      	mov	r2, r3
 800b7d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7dc:	4313      	orrs	r3, r2
 800b7de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	21ff      	movs	r1, #255	; 0xff
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f001 f98c 	bl	800cb04 <VL53L0X_WrByte>
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	461a      	mov	r2, r3
 800b7f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7f4:	4313      	orrs	r3, r2
 800b7f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800b7fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d17f      	bne.n	800b902 <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800b802:	78bb      	ldrb	r3, [r7, #2]
 800b804:	4618      	mov	r0, r3
 800b806:	f7fe fe38 	bl	800a47a <VL53L0X_encode_vcsel_period>
 800b80a:	4603      	mov	r3, r0
 800b80c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800b810:	78fb      	ldrb	r3, [r7, #3]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d002      	beq.n	800b81c <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800b816:	2b01      	cmp	r3, #1
 800b818:	d045      	beq.n	800b8a6 <VL53L0X_set_vcsel_pulse_period+0x470>
 800b81a:	e06e      	b.n	800b8fa <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800b81c:	f107 0314 	add.w	r3, r7, #20
 800b820:	461a      	mov	r2, r3
 800b822:	2103      	movs	r1, #3
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f7ff fc33 	bl	800b090 <get_sequence_step_timeout>
 800b82a:	4603      	mov	r3, r0
 800b82c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800b830:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b834:	2b00      	cmp	r3, #0
 800b836:	d109      	bne.n	800b84c <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800b838:	f107 0310 	add.w	r3, r7, #16
 800b83c:	461a      	mov	r2, r3
 800b83e:	2102      	movs	r1, #2
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	f7ff fc25 	bl	800b090 <get_sequence_step_timeout>
 800b846:	4603      	mov	r3, r0
 800b848:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800b84c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b850:	2b00      	cmp	r3, #0
 800b852:	d109      	bne.n	800b868 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800b854:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b858:	461a      	mov	r2, r3
 800b85a:	2150      	movs	r1, #80	; 0x50
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f001 f951 	bl	800cb04 <VL53L0X_WrByte>
 800b862:	4603      	mov	r3, r0
 800b864:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800b868:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d108      	bne.n	800b882 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800b870:	697b      	ldr	r3, [r7, #20]
 800b872:	461a      	mov	r2, r3
 800b874:	2103      	movs	r1, #3
 800b876:	6878      	ldr	r0, [r7, #4]
 800b878:	f7ff fceb 	bl	800b252 <set_sequence_step_timeout>
 800b87c:	4603      	mov	r3, r0
 800b87e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800b882:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b886:	2b00      	cmp	r3, #0
 800b888:	d108      	bne.n	800b89c <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	461a      	mov	r2, r3
 800b88e:	2102      	movs	r1, #2
 800b890:	6878      	ldr	r0, [r7, #4]
 800b892:	f7ff fcde 	bl	800b252 <set_sequence_step_timeout>
 800b896:	4603      	mov	r3, r0
 800b898:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	78ba      	ldrb	r2, [r7, #2]
 800b8a0:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800b8a4:	e02e      	b.n	800b904 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800b8a6:	f107 0318 	add.w	r3, r7, #24
 800b8aa:	461a      	mov	r2, r3
 800b8ac:	2104      	movs	r1, #4
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	f7ff fbee 	bl	800b090 <get_sequence_step_timeout>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800b8ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d109      	bne.n	800b8d6 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800b8c2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b8c6:	461a      	mov	r2, r3
 800b8c8:	2170      	movs	r1, #112	; 0x70
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f001 f91a 	bl	800cb04 <VL53L0X_WrByte>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800b8d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d108      	bne.n	800b8f0 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800b8de:	69bb      	ldr	r3, [r7, #24]
 800b8e0:	461a      	mov	r2, r3
 800b8e2:	2104      	movs	r1, #4
 800b8e4:	6878      	ldr	r0, [r7, #4]
 800b8e6:	f7ff fcb4 	bl	800b252 <set_sequence_step_timeout>
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	78ba      	ldrb	r2, [r7, #2]
 800b8f4:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800b8f8:	e004      	b.n	800b904 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b8fa:	23fc      	movs	r3, #252	; 0xfc
 800b8fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b900:	e000      	b.n	800b904 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 800b902:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800b904:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d109      	bne.n	800b920 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	695b      	ldr	r3, [r3, #20]
 800b910:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800b912:	69f9      	ldr	r1, [r7, #28]
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	f7fc fe1d 	bl	8008554 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800b91a:	4603      	mov	r3, r0
 800b91c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800b920:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b924:	2b00      	cmp	r3, #0
 800b926:	d109      	bne.n	800b93c <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 800b928:	f107 010f 	add.w	r1, r7, #15
 800b92c:	2301      	movs	r3, #1
 800b92e:	2200      	movs	r2, #0
 800b930:	6878      	ldr	r0, [r7, #4]
 800b932:	f7fe fcbd 	bl	800a2b0 <VL53L0X_perform_phase_calibration>
 800b936:	4603      	mov	r3, r0
 800b938:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800b93c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800b940:	4618      	mov	r0, r3
 800b942:	3728      	adds	r7, #40	; 0x28
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}

0800b948 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b086      	sub	sp, #24
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	60f8      	str	r0, [r7, #12]
 800b950:	460b      	mov	r3, r1
 800b952:	607a      	str	r2, [r7, #4]
 800b954:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b956:	2300      	movs	r3, #0
 800b958:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800b95a:	7afb      	ldrb	r3, [r7, #11]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d002      	beq.n	800b966 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800b960:	2b01      	cmp	r3, #1
 800b962:	d00a      	beq.n	800b97a <VL53L0X_get_vcsel_pulse_period+0x32>
 800b964:	e013      	b.n	800b98e <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800b966:	f107 0316 	add.w	r3, r7, #22
 800b96a:	461a      	mov	r2, r3
 800b96c:	2150      	movs	r1, #80	; 0x50
 800b96e:	68f8      	ldr	r0, [r7, #12]
 800b970:	f001 f94a 	bl	800cc08 <VL53L0X_RdByte>
 800b974:	4603      	mov	r3, r0
 800b976:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800b978:	e00b      	b.n	800b992 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800b97a:	f107 0316 	add.w	r3, r7, #22
 800b97e:	461a      	mov	r2, r3
 800b980:	2170      	movs	r1, #112	; 0x70
 800b982:	68f8      	ldr	r0, [r7, #12]
 800b984:	f001 f940 	bl	800cc08 <VL53L0X_RdByte>
 800b988:	4603      	mov	r3, r0
 800b98a:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800b98c:	e001      	b.n	800b992 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b98e:	23fc      	movs	r3, #252	; 0xfc
 800b990:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800b992:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d107      	bne.n	800b9aa <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800b99a:	7dbb      	ldrb	r3, [r7, #22]
 800b99c:	4618      	mov	r0, r3
 800b99e:	f7fe fd59 	bl	800a454 <VL53L0X_decode_vcsel_period>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	701a      	strb	r2, [r3, #0]

	return Status;
 800b9aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3718      	adds	r7, #24
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}

0800b9b6 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800b9b6:	b580      	push	{r7, lr}
 800b9b8:	b092      	sub	sp, #72	; 0x48
 800b9ba:	af00      	add	r7, sp, #0
 800b9bc:	6078      	str	r0, [r7, #4]
 800b9be:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800b9c6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800b9ca:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800b9cc:	f240 7376 	movw	r3, #1910	; 0x776
 800b9d0:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800b9d2:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800b9d6:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800b9d8:	f44f 7325 	mov.w	r3, #660	; 0x294
 800b9dc:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800b9de:	f240 234e 	movw	r3, #590	; 0x24e
 800b9e2:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800b9e4:	f240 23b2 	movw	r3, #690	; 0x2b2
 800b9e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800b9ea:	f44f 7325 	mov.w	r3, #660	; 0x294
 800b9ee:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800b9f0:	f240 2326 	movw	r3, #550	; 0x226
 800b9f4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800b9fa:	f644 6320 	movw	r3, #20000	; 0x4e20
 800b9fe:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800ba00:	2300      	movs	r3, #0
 800ba02:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800ba04:	683a      	ldr	r2, [r7, #0]
 800ba06:	6a3b      	ldr	r3, [r7, #32]
 800ba08:	429a      	cmp	r2, r3
 800ba0a:	d205      	bcs.n	800ba18 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ba0c:	23fc      	movs	r3, #252	; 0xfc
 800ba0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800ba12:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ba16:	e0aa      	b.n	800bb6e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800ba18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ba1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba1c:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800ba1e:	683a      	ldr	r2, [r7, #0]
 800ba20:	1ad3      	subs	r3, r2, r3
 800ba22:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800ba24:	f107 0314 	add.w	r3, r7, #20
 800ba28:	4619      	mov	r1, r3
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f7fc fedc 	bl	80087e8 <VL53L0X_GetSequenceStepEnables>
 800ba30:	4603      	mov	r3, r0
 800ba32:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800ba36:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d15b      	bne.n	800baf6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800ba3e:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d105      	bne.n	800ba50 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800ba44:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d102      	bne.n	800ba50 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800ba4a:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d052      	beq.n	800baf6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800ba50:	f107 0310 	add.w	r3, r7, #16
 800ba54:	461a      	mov	r2, r3
 800ba56:	2102      	movs	r1, #2
 800ba58:	6878      	ldr	r0, [r7, #4]
 800ba5a:	f7ff fb19 	bl	800b090 <get_sequence_step_timeout>
 800ba5e:	4603      	mov	r3, r0
 800ba60:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800ba64:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d002      	beq.n	800ba72 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800ba6c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ba70:	e07d      	b.n	800bb6e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800ba72:	7d3b      	ldrb	r3, [r7, #20]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d00f      	beq.n	800ba98 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800ba78:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800ba7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba7c:	4413      	add	r3, r2
 800ba7e:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800ba80:	69fa      	ldr	r2, [r7, #28]
 800ba82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba84:	429a      	cmp	r2, r3
 800ba86:	d204      	bcs.n	800ba92 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800ba88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ba8a:	69fb      	ldr	r3, [r7, #28]
 800ba8c:	1ad3      	subs	r3, r2, r3
 800ba8e:	643b      	str	r3, [r7, #64]	; 0x40
 800ba90:	e002      	b.n	800ba98 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ba92:	23fc      	movs	r3, #252	; 0xfc
 800ba94:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800ba98:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d002      	beq.n	800baa6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800baa0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800baa4:	e063      	b.n	800bb6e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800baa6:	7dbb      	ldrb	r3, [r7, #22]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d011      	beq.n	800bad0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800baac:	693a      	ldr	r2, [r7, #16]
 800baae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bab0:	4413      	add	r3, r2
 800bab2:	005b      	lsls	r3, r3, #1
 800bab4:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800bab6:	69fa      	ldr	r2, [r7, #28]
 800bab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800baba:	429a      	cmp	r2, r3
 800babc:	d204      	bcs.n	800bac8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800babe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bac0:	69fb      	ldr	r3, [r7, #28]
 800bac2:	1ad3      	subs	r3, r2, r3
 800bac4:	643b      	str	r3, [r7, #64]	; 0x40
 800bac6:	e016      	b.n	800baf6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bac8:	23fc      	movs	r3, #252	; 0xfc
 800baca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800bace:	e012      	b.n	800baf6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800bad0:	7d7b      	ldrb	r3, [r7, #21]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d00f      	beq.n	800baf6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800bad6:	693b      	ldr	r3, [r7, #16]
 800bad8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bada:	4413      	add	r3, r2
 800badc:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800bade:	69fa      	ldr	r2, [r7, #28]
 800bae0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bae2:	429a      	cmp	r2, r3
 800bae4:	d204      	bcs.n	800baf0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800bae6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bae8:	69fb      	ldr	r3, [r7, #28]
 800baea:	1ad3      	subs	r3, r2, r3
 800baec:	643b      	str	r3, [r7, #64]	; 0x40
 800baee:	e002      	b.n	800baf6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800baf0:	23fc      	movs	r3, #252	; 0xfc
 800baf2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800baf6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d002      	beq.n	800bb04 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800bafe:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800bb02:	e034      	b.n	800bb6e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800bb04:	7dfb      	ldrb	r3, [r7, #23]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d019      	beq.n	800bb3e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800bb0a:	f107 030c 	add.w	r3, r7, #12
 800bb0e:	461a      	mov	r2, r3
 800bb10:	2103      	movs	r1, #3
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f7ff fabc 	bl	800b090 <get_sequence_step_timeout>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb22:	4413      	add	r3, r2
 800bb24:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800bb26:	69fa      	ldr	r2, [r7, #28]
 800bb28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb2a:	429a      	cmp	r2, r3
 800bb2c:	d204      	bcs.n	800bb38 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800bb2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bb30:	69fb      	ldr	r3, [r7, #28]
 800bb32:	1ad3      	subs	r3, r2, r3
 800bb34:	643b      	str	r3, [r7, #64]	; 0x40
 800bb36:	e002      	b.n	800bb3e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bb38:	23fc      	movs	r3, #252	; 0xfc
 800bb3a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800bb3e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d111      	bne.n	800bb6a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800bb46:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d00e      	beq.n	800bb6a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800bb4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bb4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb50:	1ad3      	subs	r3, r2, r3
 800bb52:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800bb54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bb56:	2104      	movs	r1, #4
 800bb58:	6878      	ldr	r0, [r7, #4]
 800bb5a:	f7ff fb7a 	bl	800b252 <set_sequence_step_timeout>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	683a      	ldr	r2, [r7, #0]
 800bb68:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800bb6a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	3748      	adds	r7, #72	; 0x48
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}

0800bb76 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800bb76:	b580      	push	{r7, lr}
 800bb78:	b090      	sub	sp, #64	; 0x40
 800bb7a:	af00      	add	r7, sp, #0
 800bb7c:	6078      	str	r0, [r7, #4]
 800bb7e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bb80:	2300      	movs	r3, #0
 800bb82:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800bb86:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800bb8a:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800bb8c:	f240 7376 	movw	r3, #1910	; 0x776
 800bb90:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800bb92:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800bb96:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800bb98:	f44f 7325 	mov.w	r3, #660	; 0x294
 800bb9c:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800bb9e:	f240 234e 	movw	r3, #590	; 0x24e
 800bba2:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800bba4:	f240 23b2 	movw	r3, #690	; 0x2b2
 800bba8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800bbaa:	f44f 7325 	mov.w	r3, #660	; 0x294
 800bbae:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800bbb0:	f240 2326 	movw	r3, #550	; 0x226
 800bbb4:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800bbba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbbe:	441a      	add	r2, r3
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800bbc4:	f107 0318 	add.w	r3, r7, #24
 800bbc8:	4619      	mov	r1, r3
 800bbca:	6878      	ldr	r0, [r7, #4]
 800bbcc:	f7fc fe0c 	bl	80087e8 <VL53L0X_GetSequenceStepEnables>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800bbd6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d002      	beq.n	800bbe4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800bbde:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bbe2:	e075      	b.n	800bcd0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800bbe4:	7e3b      	ldrb	r3, [r7, #24]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d105      	bne.n	800bbf6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800bbea:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d102      	bne.n	800bbf6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800bbf0:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d030      	beq.n	800bc58 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800bbf6:	f107 0310 	add.w	r3, r7, #16
 800bbfa:	461a      	mov	r2, r3
 800bbfc:	2102      	movs	r1, #2
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f7ff fa46 	bl	800b090 <get_sequence_step_timeout>
 800bc04:	4603      	mov	r3, r0
 800bc06:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800bc0a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d122      	bne.n	800bc58 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800bc12:	7e3b      	ldrb	r3, [r7, #24]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d007      	beq.n	800bc28 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800bc1c:	6939      	ldr	r1, [r7, #16]
 800bc1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc20:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800bc22:	441a      	add	r2, r3
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800bc28:	7ebb      	ldrb	r3, [r7, #26]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d009      	beq.n	800bc42 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800bc32:	6939      	ldr	r1, [r7, #16]
 800bc34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc36:	440b      	add	r3, r1
 800bc38:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800bc3a:	441a      	add	r2, r3
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	601a      	str	r2, [r3, #0]
 800bc40:	e00a      	b.n	800bc58 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800bc42:	7e7b      	ldrb	r3, [r7, #25]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d007      	beq.n	800bc58 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800bc48:	683b      	ldr	r3, [r7, #0]
 800bc4a:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800bc4c:	6939      	ldr	r1, [r7, #16]
 800bc4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc50:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800bc52:	441a      	add	r2, r3
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800bc58:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d114      	bne.n	800bc8a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800bc60:	7efb      	ldrb	r3, [r7, #27]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d011      	beq.n	800bc8a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800bc66:	f107 030c 	add.w	r3, r7, #12
 800bc6a:	461a      	mov	r2, r3
 800bc6c:	2103      	movs	r1, #3
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	f7ff fa0e 	bl	800b090 <get_sequence_step_timeout>
 800bc74:	4603      	mov	r3, r0
 800bc76:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800bc7e:	68f9      	ldr	r1, [r7, #12]
 800bc80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc82:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800bc84:	441a      	add	r2, r3
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800bc8a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d114      	bne.n	800bcbc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800bc92:	7f3b      	ldrb	r3, [r7, #28]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d011      	beq.n	800bcbc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800bc98:	f107 0314 	add.w	r3, r7, #20
 800bc9c:	461a      	mov	r2, r3
 800bc9e:	2104      	movs	r1, #4
 800bca0:	6878      	ldr	r0, [r7, #4]
 800bca2:	f7ff f9f5 	bl	800b090 <get_sequence_step_timeout>
 800bca6:	4603      	mov	r3, r0
 800bca8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800bcb0:	6979      	ldr	r1, [r7, #20]
 800bcb2:	6a3b      	ldr	r3, [r7, #32]
 800bcb4:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800bcb6:	441a      	add	r2, r3
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800bcbc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d103      	bne.n	800bccc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	681a      	ldr	r2, [r3, #0]
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bccc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	3740      	adds	r7, #64	; 0x40
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bd80      	pop	{r7, pc}

0800bcd8 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b088      	sub	sp, #32
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
 800bce0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bce2:	2300      	movs	r3, #0
 800bce4:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800bce6:	2300      	movs	r3, #0
 800bce8:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800bcea:	e0c6      	b.n	800be7a <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800bcec:	697b      	ldr	r3, [r7, #20]
 800bcee:	683a      	ldr	r2, [r7, #0]
 800bcf0:	4413      	add	r3, r2
 800bcf2:	781b      	ldrb	r3, [r3, #0]
 800bcf4:	74fb      	strb	r3, [r7, #19]
		Index++;
 800bcf6:	697b      	ldr	r3, [r7, #20]
 800bcf8:	3301      	adds	r3, #1
 800bcfa:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800bcfc:	7cfb      	ldrb	r3, [r7, #19]
 800bcfe:	2bff      	cmp	r3, #255	; 0xff
 800bd00:	f040 808d 	bne.w	800be1e <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800bd04:	697b      	ldr	r3, [r7, #20]
 800bd06:	683a      	ldr	r2, [r7, #0]
 800bd08:	4413      	add	r3, r2
 800bd0a:	781b      	ldrb	r3, [r3, #0]
 800bd0c:	747b      	strb	r3, [r7, #17]
			Index++;
 800bd0e:	697b      	ldr	r3, [r7, #20]
 800bd10:	3301      	adds	r3, #1
 800bd12:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800bd14:	7c7b      	ldrb	r3, [r7, #17]
 800bd16:	2b03      	cmp	r3, #3
 800bd18:	d87e      	bhi.n	800be18 <VL53L0X_load_tuning_settings+0x140>
 800bd1a:	a201      	add	r2, pc, #4	; (adr r2, 800bd20 <VL53L0X_load_tuning_settings+0x48>)
 800bd1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd20:	0800bd31 	.word	0x0800bd31
 800bd24:	0800bd6b 	.word	0x0800bd6b
 800bd28:	0800bda5 	.word	0x0800bda5
 800bd2c:	0800bddf 	.word	0x0800bddf
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800bd30:	697b      	ldr	r3, [r7, #20]
 800bd32:	683a      	ldr	r2, [r7, #0]
 800bd34:	4413      	add	r3, r2
 800bd36:	781b      	ldrb	r3, [r3, #0]
 800bd38:	743b      	strb	r3, [r7, #16]
				Index++;
 800bd3a:	697b      	ldr	r3, [r7, #20]
 800bd3c:	3301      	adds	r3, #1
 800bd3e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	683a      	ldr	r2, [r7, #0]
 800bd44:	4413      	add	r3, r2
 800bd46:	781b      	ldrb	r3, [r3, #0]
 800bd48:	73fb      	strb	r3, [r7, #15]
				Index++;
 800bd4a:	697b      	ldr	r3, [r7, #20]
 800bd4c:	3301      	adds	r3, #1
 800bd4e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800bd50:	7c3b      	ldrb	r3, [r7, #16]
 800bd52:	b29b      	uxth	r3, r3
 800bd54:	021b      	lsls	r3, r3, #8
 800bd56:	b29a      	uxth	r2, r3
 800bd58:	7bfb      	ldrb	r3, [r7, #15]
 800bd5a:	b29b      	uxth	r3, r3
 800bd5c:	4413      	add	r3, r2
 800bd5e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	89ba      	ldrh	r2, [r7, #12]
 800bd64:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800bd68:	e087      	b.n	800be7a <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800bd6a:	697b      	ldr	r3, [r7, #20]
 800bd6c:	683a      	ldr	r2, [r7, #0]
 800bd6e:	4413      	add	r3, r2
 800bd70:	781b      	ldrb	r3, [r3, #0]
 800bd72:	743b      	strb	r3, [r7, #16]
				Index++;
 800bd74:	697b      	ldr	r3, [r7, #20]
 800bd76:	3301      	adds	r3, #1
 800bd78:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800bd7a:	697b      	ldr	r3, [r7, #20]
 800bd7c:	683a      	ldr	r2, [r7, #0]
 800bd7e:	4413      	add	r3, r2
 800bd80:	781b      	ldrb	r3, [r3, #0]
 800bd82:	73fb      	strb	r3, [r7, #15]
				Index++;
 800bd84:	697b      	ldr	r3, [r7, #20]
 800bd86:	3301      	adds	r3, #1
 800bd88:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800bd8a:	7c3b      	ldrb	r3, [r7, #16]
 800bd8c:	b29b      	uxth	r3, r3
 800bd8e:	021b      	lsls	r3, r3, #8
 800bd90:	b29a      	uxth	r2, r3
 800bd92:	7bfb      	ldrb	r3, [r7, #15]
 800bd94:	b29b      	uxth	r3, r3
 800bd96:	4413      	add	r3, r2
 800bd98:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	89ba      	ldrh	r2, [r7, #12]
 800bd9e:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800bda2:	e06a      	b.n	800be7a <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800bda4:	697b      	ldr	r3, [r7, #20]
 800bda6:	683a      	ldr	r2, [r7, #0]
 800bda8:	4413      	add	r3, r2
 800bdaa:	781b      	ldrb	r3, [r3, #0]
 800bdac:	743b      	strb	r3, [r7, #16]
				Index++;
 800bdae:	697b      	ldr	r3, [r7, #20]
 800bdb0:	3301      	adds	r3, #1
 800bdb2:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	683a      	ldr	r2, [r7, #0]
 800bdb8:	4413      	add	r3, r2
 800bdba:	781b      	ldrb	r3, [r3, #0]
 800bdbc:	73fb      	strb	r3, [r7, #15]
				Index++;
 800bdbe:	697b      	ldr	r3, [r7, #20]
 800bdc0:	3301      	adds	r3, #1
 800bdc2:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800bdc4:	7c3b      	ldrb	r3, [r7, #16]
 800bdc6:	b29b      	uxth	r3, r3
 800bdc8:	021b      	lsls	r3, r3, #8
 800bdca:	b29a      	uxth	r2, r3
 800bdcc:	7bfb      	ldrb	r3, [r7, #15]
 800bdce:	b29b      	uxth	r3, r3
 800bdd0:	4413      	add	r3, r2
 800bdd2:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	89ba      	ldrh	r2, [r7, #12]
 800bdd8:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800bddc:	e04d      	b.n	800be7a <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800bdde:	697b      	ldr	r3, [r7, #20]
 800bde0:	683a      	ldr	r2, [r7, #0]
 800bde2:	4413      	add	r3, r2
 800bde4:	781b      	ldrb	r3, [r3, #0]
 800bde6:	743b      	strb	r3, [r7, #16]
				Index++;
 800bde8:	697b      	ldr	r3, [r7, #20]
 800bdea:	3301      	adds	r3, #1
 800bdec:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800bdee:	697b      	ldr	r3, [r7, #20]
 800bdf0:	683a      	ldr	r2, [r7, #0]
 800bdf2:	4413      	add	r3, r2
 800bdf4:	781b      	ldrb	r3, [r3, #0]
 800bdf6:	73fb      	strb	r3, [r7, #15]
				Index++;
 800bdf8:	697b      	ldr	r3, [r7, #20]
 800bdfa:	3301      	adds	r3, #1
 800bdfc:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800bdfe:	7c3b      	ldrb	r3, [r7, #16]
 800be00:	b29b      	uxth	r3, r3
 800be02:	021b      	lsls	r3, r3, #8
 800be04:	b29a      	uxth	r2, r3
 800be06:	7bfb      	ldrb	r3, [r7, #15]
 800be08:	b29b      	uxth	r3, r3
 800be0a:	4413      	add	r3, r2
 800be0c:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	89ba      	ldrh	r2, [r7, #12]
 800be12:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800be16:	e030      	b.n	800be7a <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800be18:	23fc      	movs	r3, #252	; 0xfc
 800be1a:	77fb      	strb	r3, [r7, #31]
 800be1c:	e02d      	b.n	800be7a <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800be1e:	7cfb      	ldrb	r3, [r7, #19]
 800be20:	2b04      	cmp	r3, #4
 800be22:	d828      	bhi.n	800be76 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800be24:	697b      	ldr	r3, [r7, #20]
 800be26:	683a      	ldr	r2, [r7, #0]
 800be28:	4413      	add	r3, r2
 800be2a:	781b      	ldrb	r3, [r3, #0]
 800be2c:	74bb      	strb	r3, [r7, #18]
			Index++;
 800be2e:	697b      	ldr	r3, [r7, #20]
 800be30:	3301      	adds	r3, #1
 800be32:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800be34:	2300      	movs	r3, #0
 800be36:	61bb      	str	r3, [r7, #24]
 800be38:	e00f      	b.n	800be5a <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800be3a:	697b      	ldr	r3, [r7, #20]
 800be3c:	683a      	ldr	r2, [r7, #0]
 800be3e:	4413      	add	r3, r2
 800be40:	7819      	ldrb	r1, [r3, #0]
 800be42:	f107 0208 	add.w	r2, r7, #8
 800be46:	69bb      	ldr	r3, [r7, #24]
 800be48:	4413      	add	r3, r2
 800be4a:	460a      	mov	r2, r1
 800be4c:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800be4e:	697b      	ldr	r3, [r7, #20]
 800be50:	3301      	adds	r3, #1
 800be52:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800be54:	69bb      	ldr	r3, [r7, #24]
 800be56:	3301      	adds	r3, #1
 800be58:	61bb      	str	r3, [r7, #24]
 800be5a:	7cfb      	ldrb	r3, [r7, #19]
 800be5c:	69ba      	ldr	r2, [r7, #24]
 800be5e:	429a      	cmp	r2, r3
 800be60:	dbeb      	blt.n	800be3a <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800be62:	7cfb      	ldrb	r3, [r7, #19]
 800be64:	f107 0208 	add.w	r2, r7, #8
 800be68:	7cb9      	ldrb	r1, [r7, #18]
 800be6a:	6878      	ldr	r0, [r7, #4]
 800be6c:	f000 fdee 	bl	800ca4c <VL53L0X_WriteMulti>
 800be70:	4603      	mov	r3, r0
 800be72:	77fb      	strb	r3, [r7, #31]
 800be74:	e001      	b.n	800be7a <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800be76:	23fc      	movs	r3, #252	; 0xfc
 800be78:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800be7a:	697b      	ldr	r3, [r7, #20]
 800be7c:	683a      	ldr	r2, [r7, #0]
 800be7e:	4413      	add	r3, r2
 800be80:	781b      	ldrb	r3, [r3, #0]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d004      	beq.n	800be90 <VL53L0X_load_tuning_settings+0x1b8>
 800be86:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	f43f af2e 	beq.w	800bcec <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800be90:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800be94:	4618      	mov	r0, r3
 800be96:	3720      	adds	r7, #32
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}

0800be9c <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b088      	sub	sp, #32
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	60f8      	str	r0, [r7, #12]
 800bea4:	60b9      	str	r1, [r7, #8]
 800bea6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bea8:	2300      	movs	r3, #0
 800beaa:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2200      	movs	r2, #0
 800beb0:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800beb2:	f107 0313 	add.w	r3, r7, #19
 800beb6:	4619      	mov	r1, r3
 800beb8:	68f8      	ldr	r0, [r7, #12]
 800beba:	f7fc fd21 	bl	8008900 <VL53L0X_GetXTalkCompensationEnable>
 800bebe:	4603      	mov	r3, r0
 800bec0:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800bec2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d111      	bne.n	800beee <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800beca:	7cfb      	ldrb	r3, [r7, #19]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d00e      	beq.n	800beee <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	6a1b      	ldr	r3, [r3, #32]
 800bed4:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	8a9b      	ldrh	r3, [r3, #20]
 800beda:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800bedc:	69bb      	ldr	r3, [r7, #24]
 800bede:	fb02 f303 	mul.w	r3, r2, r3
 800bee2:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800bee4:	697b      	ldr	r3, [r7, #20]
 800bee6:	3380      	adds	r3, #128	; 0x80
 800bee8:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800beee:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	3720      	adds	r7, #32
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}

0800befa <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800befa:	b580      	push	{r7, lr}
 800befc:	b086      	sub	sp, #24
 800befe:	af00      	add	r7, sp, #0
 800bf00:	60f8      	str	r0, [r7, #12]
 800bf02:	60b9      	str	r1, [r7, #8]
 800bf04:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bf06:	2300      	movs	r3, #0
 800bf08:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800bf12:	f107 0310 	add.w	r3, r7, #16
 800bf16:	461a      	mov	r2, r3
 800bf18:	68b9      	ldr	r1, [r7, #8]
 800bf1a:	68f8      	ldr	r0, [r7, #12]
 800bf1c:	f7ff ffbe 	bl	800be9c <VL53L0X_get_total_xtalk_rate>
 800bf20:	4603      	mov	r3, r0
 800bf22:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800bf24:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d105      	bne.n	800bf38 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681a      	ldr	r2, [r3, #0]
 800bf30:	693b      	ldr	r3, [r7, #16]
 800bf32:	441a      	add	r2, r3
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	601a      	str	r2, [r3, #0]

	return Status;
 800bf38:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	3718      	adds	r7, #24
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}

0800bf44 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b09a      	sub	sp, #104	; 0x68
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	60f8      	str	r0, [r7, #12]
 800bf4c:	60b9      	str	r1, [r7, #8]
 800bf4e:	607a      	str	r2, [r7, #4]
 800bf50:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800bf52:	2312      	movs	r3, #18
 800bf54:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800bf56:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bf5a:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800bf5c:	2342      	movs	r3, #66	; 0x42
 800bf5e:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800bf60:	2306      	movs	r3, #6
 800bf62:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800bf64:	2307      	movs	r3, #7
 800bf66:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bf68:	2300      	movs	r3, #0
 800bf6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800bf74:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800bf7c:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800bf7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf82:	fb02 f303 	mul.w	r3, r2, r3
 800bf86:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800bf88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf8a:	3380      	adds	r3, #128	; 0x80
 800bf8c:	0a1b      	lsrs	r3, r3, #8
 800bf8e:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800bf90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bf94:	fb02 f303 	mul.w	r3, r2, r3
 800bf98:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d01a      	beq.n	800bfda <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	029b      	lsls	r3, r3, #10
 800bfa8:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800bfae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfb0:	4413      	add	r3, r2
 800bfb2:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800bfb4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfbc:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800bfbe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bfc0:	4613      	mov	r3, r2
 800bfc2:	005b      	lsls	r3, r3, #1
 800bfc4:	4413      	add	r3, r2
 800bfc6:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800bfc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bfca:	fb03 f303 	mul.w	r3, r3, r3
 800bfce:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800bfd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bfd2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800bfd6:	0c1b      	lsrs	r3, r3, #16
 800bfd8:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800bfde:	fb02 f303 	mul.w	r3, r2, r3
 800bfe2:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800bfe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfe6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800bfea:	0c1b      	lsrs	r3, r3, #16
 800bfec:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800bfee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bff0:	fb03 f303 	mul.w	r3, r3, r3
 800bff4:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800bff6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bff8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800bffc:	0c1b      	lsrs	r3, r3, #16
 800bffe:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800c000:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c002:	085a      	lsrs	r2, r3, #1
 800c004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c006:	441a      	add	r2, r3
 800c008:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c00a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c00e:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800c010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c012:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c014:	fb02 f303 	mul.w	r3, r2, r3
 800c018:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800c01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c01c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c020:	d302      	bcc.n	800c028 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800c022:	4b54      	ldr	r3, [pc, #336]	; (800c174 <VL53L0X_calc_dmax+0x230>)
 800c024:	663b      	str	r3, [r7, #96]	; 0x60
 800c026:	e015      	b.n	800c054 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800c028:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c02a:	085a      	lsrs	r2, r3, #1
 800c02c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c02e:	441a      	add	r2, r3
 800c030:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c032:	fbb2 f3f3 	udiv	r3, r2, r3
 800c036:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800c038:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c03a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c03c:	fb02 f303 	mul.w	r3, r2, r3
 800c040:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800c042:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c044:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c048:	0c1b      	lsrs	r3, r3, #16
 800c04a:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800c04c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c04e:	fb03 f303 	mul.w	r3, r3, r3
 800c052:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800c054:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c056:	039b      	lsls	r3, r3, #14
 800c058:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c05c:	4a46      	ldr	r2, [pc, #280]	; (800c178 <VL53L0X_calc_dmax+0x234>)
 800c05e:	fba2 2303 	umull	r2, r3, r2, r3
 800c062:	099b      	lsrs	r3, r3, #6
 800c064:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800c066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c068:	fb03 f303 	mul.w	r3, r3, r3
 800c06c:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800c06e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c070:	fb03 f303 	mul.w	r3, r3, r3
 800c074:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800c076:	6a3b      	ldr	r3, [r7, #32]
 800c078:	3308      	adds	r3, #8
 800c07a:	091b      	lsrs	r3, r3, #4
 800c07c:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800c07e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c080:	6a3b      	ldr	r3, [r7, #32]
 800c082:	1ad3      	subs	r3, r2, r3
 800c084:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800c086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c088:	4613      	mov	r3, r2
 800c08a:	005b      	lsls	r3, r3, #1
 800c08c:	4413      	add	r3, r2
 800c08e:	011b      	lsls	r3, r3, #4
 800c090:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800c092:	69fb      	ldr	r3, [r7, #28]
 800c094:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800c098:	0b9b      	lsrs	r3, r3, #14
 800c09a:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800c09c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c09e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c0a0:	4413      	add	r3, r2
 800c0a2:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800c0a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0a6:	085b      	lsrs	r3, r3, #1
 800c0a8:	69ba      	ldr	r2, [r7, #24]
 800c0aa:	4413      	add	r3, r2
 800c0ac:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800c0ae:	69ba      	ldr	r2, [r7, #24]
 800c0b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0b6:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800c0b8:	69bb      	ldr	r3, [r7, #24]
 800c0ba:	039b      	lsls	r3, r3, #14
 800c0bc:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800c0be:	69fb      	ldr	r3, [r7, #28]
 800c0c0:	085b      	lsrs	r3, r3, #1
 800c0c2:	69ba      	ldr	r2, [r7, #24]
 800c0c4:	4413      	add	r3, r2
 800c0c6:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800c0c8:	69ba      	ldr	r2, [r7, #24]
 800c0ca:	69fb      	ldr	r3, [r7, #28]
 800c0cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0d0:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800c0d2:	69bb      	ldr	r3, [r7, #24]
 800c0d4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c0d6:	fb02 f303 	mul.w	r3, r2, r3
 800c0da:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800c0dc:	69bb      	ldr	r3, [r7, #24]
 800c0de:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c0e2:	4a25      	ldr	r2, [pc, #148]	; (800c178 <VL53L0X_calc_dmax+0x234>)
 800c0e4:	fba2 2303 	umull	r2, r3, r2, r3
 800c0e8:	099b      	lsrs	r3, r3, #6
 800c0ea:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800c0ec:	69bb      	ldr	r3, [r7, #24]
 800c0ee:	011b      	lsls	r3, r3, #4
 800c0f0:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800c0f2:	69bb      	ldr	r3, [r7, #24]
 800c0f4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c0f8:	4a1f      	ldr	r2, [pc, #124]	; (800c178 <VL53L0X_calc_dmax+0x234>)
 800c0fa:	fba2 2303 	umull	r2, r3, r2, r3
 800c0fe:	099b      	lsrs	r3, r3, #6
 800c100:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800c102:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c104:	3380      	adds	r3, #128	; 0x80
 800c106:	0a1b      	lsrs	r3, r3, #8
 800c108:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800c10a:	697b      	ldr	r3, [r7, #20]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d008      	beq.n	800c122 <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800c110:	697b      	ldr	r3, [r7, #20]
 800c112:	085a      	lsrs	r2, r3, #1
 800c114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c116:	441a      	add	r2, r3
 800c118:	697b      	ldr	r3, [r7, #20]
 800c11a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c11e:	65bb      	str	r3, [r7, #88]	; 0x58
 800c120:	e001      	b.n	800c126 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800c122:	2300      	movs	r3, #0
 800c124:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800c126:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800c128:	f7fe f9ba 	bl	800a4a0 <VL53L0X_isqrt>
 800c12c:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800c12e:	69bb      	ldr	r3, [r7, #24]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d008      	beq.n	800c146 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800c134:	69bb      	ldr	r3, [r7, #24]
 800c136:	085a      	lsrs	r2, r3, #1
 800c138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c13a:	441a      	add	r2, r3
 800c13c:	69bb      	ldr	r3, [r7, #24]
 800c13e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c142:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c144:	e001      	b.n	800c14a <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800c146:	2300      	movs	r3, #0
 800c148:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800c14a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800c14c:	f7fe f9a8 	bl	800a4a0 <VL53L0X_isqrt>
 800c150:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800c152:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c154:	693a      	ldr	r2, [r7, #16]
 800c156:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800c158:	693a      	ldr	r2, [r7, #16]
 800c15a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c15c:	429a      	cmp	r2, r3
 800c15e:	d902      	bls.n	800c166 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800c160:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c162:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c164:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800c166:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800c16a:	4618      	mov	r0, r3
 800c16c:	3768      	adds	r7, #104	; 0x68
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd80      	pop	{r7, pc}
 800c172:	bf00      	nop
 800c174:	fff00000 	.word	0xfff00000
 800c178:	10624dd3 	.word	0x10624dd3

0800c17c <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b0b4      	sub	sp, #208	; 0xd0
 800c180:	af04      	add	r7, sp, #16
 800c182:	60f8      	str	r0, [r7, #12]
 800c184:	60b9      	str	r1, [r7, #8]
 800c186:	607a      	str	r2, [r7, #4]
 800c188:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800c18a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800c18e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800c192:	f44f 7316 	mov.w	r3, #600	; 0x258
 800c196:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800c19a:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800c19e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800c1a2:	f241 235c 	movw	r3, #4700	; 0x125c
 800c1a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800c1aa:	4b9e      	ldr	r3, [pc, #632]	; (800c424 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800c1ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800c1b0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800c1b4:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800c1b6:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800c1ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c1be:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1c2:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800c1c4:	4b98      	ldr	r3, [pc, #608]	; (800c428 <VL53L0X_calc_sigma_estimate+0x2ac>)
 800c1c6:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800c1c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c1cc:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800c1ce:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800c1d2:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800c1d4:	f240 6377 	movw	r3, #1655	; 0x677
 800c1d8:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	6a1b      	ldr	r3, [r3, #32]
 800c1e4:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800c1e6:	68bb      	ldr	r3, [r7, #8]
 800c1e8:	691b      	ldr	r3, [r3, #16]
 800c1ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c1ee:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800c1f2:	0c1b      	lsrs	r3, r3, #16
 800c1f4:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800c1f6:	68bb      	ldr	r3, [r7, #8]
 800c1f8:	68db      	ldr	r3, [r3, #12]
 800c1fa:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800c1fc:	f107 0310 	add.w	r3, r7, #16
 800c200:	461a      	mov	r2, r3
 800c202:	68b9      	ldr	r1, [r7, #8]
 800c204:	68f8      	ldr	r0, [r7, #12]
 800c206:	f7ff fe78 	bl	800befa <VL53L0X_get_total_signal_rate>
 800c20a:	4603      	mov	r3, r0
 800c20c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800c210:	f107 0314 	add.w	r3, r7, #20
 800c214:	461a      	mov	r2, r3
 800c216:	68b9      	ldr	r1, [r7, #8]
 800c218:	68f8      	ldr	r0, [r7, #12]
 800c21a:	f7ff fe3f 	bl	800be9c <VL53L0X_get_total_xtalk_rate>
 800c21e:	4603      	mov	r3, r0
 800c220:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800c224:	693b      	ldr	r3, [r7, #16]
 800c226:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c22a:	fb02 f303 	mul.w	r3, r2, r3
 800c22e:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800c230:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c232:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c236:	0c1b      	lsrs	r3, r3, #16
 800c238:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800c23a:	697b      	ldr	r3, [r7, #20]
 800c23c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c240:	fb02 f303 	mul.w	r3, r2, r3
 800c244:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800c248:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800c24c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c24e:	429a      	cmp	r2, r3
 800c250:	d902      	bls.n	800c258 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800c252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c254:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800c258:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d168      	bne.n	800c332 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800c266:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800c270:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800c274:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800c278:	461a      	mov	r2, r3
 800c27a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800c27e:	68f8      	ldr	r0, [r7, #12]
 800c280:	f7fe feb2 	bl	800afe8 <VL53L0X_calc_timeout_mclks>
 800c284:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c28c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800c296:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800c29a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800c29e:	461a      	mov	r2, r3
 800c2a0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800c2a4:	68f8      	ldr	r0, [r7, #12]
 800c2a6:	f7fe fe9f 	bl	800afe8 <VL53L0X_calc_timeout_mclks>
 800c2aa:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800c2ac:	2303      	movs	r3, #3
 800c2ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800c2b2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800c2b6:	2b08      	cmp	r3, #8
 800c2b8:	d102      	bne.n	800c2c0 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800c2ba:	2302      	movs	r3, #2
 800c2bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800c2c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c2c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c2c4:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800c2c6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800c2ca:	fb02 f303 	mul.w	r3, r2, r3
 800c2ce:	02db      	lsls	r3, r3, #11
 800c2d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800c2d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c2d8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c2dc:	4a53      	ldr	r2, [pc, #332]	; (800c42c <VL53L0X_calc_sigma_estimate+0x2b0>)
 800c2de:	fba2 2303 	umull	r2, r3, r2, r3
 800c2e2:	099b      	lsrs	r3, r3, #6
 800c2e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800c2e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c2ec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c2ee:	fb02 f303 	mul.w	r3, r2, r3
 800c2f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800c2f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c2fa:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c2fe:	4a4b      	ldr	r2, [pc, #300]	; (800c42c <VL53L0X_calc_sigma_estimate+0x2b0>)
 800c300:	fba2 2303 	umull	r2, r3, r2, r3
 800c304:	099b      	lsrs	r3, r3, #6
 800c306:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800c30a:	693b      	ldr	r3, [r7, #16]
 800c30c:	3380      	adds	r3, #128	; 0x80
 800c30e:	0a1b      	lsrs	r3, r3, #8
 800c310:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800c312:	693a      	ldr	r2, [r7, #16]
 800c314:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c318:	fb02 f303 	mul.w	r3, r2, r3
 800c31c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800c320:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c324:	3380      	adds	r3, #128	; 0x80
 800c326:	0a1b      	lsrs	r3, r3, #8
 800c328:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800c32c:	693b      	ldr	r3, [r7, #16]
 800c32e:	021b      	lsls	r3, r3, #8
 800c330:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800c332:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800c336:	2b00      	cmp	r3, #0
 800c338:	d002      	beq.n	800c340 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800c33a:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800c33e:	e15e      	b.n	800c5fe <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800c340:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c342:	2b00      	cmp	r3, #0
 800c344:	d10c      	bne.n	800c360 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c34c:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c354:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	2200      	movs	r2, #0
 800c35c:	601a      	str	r2, [r3, #0]
 800c35e:	e14c      	b.n	800c5fa <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800c360:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c364:	2b00      	cmp	r3, #0
 800c366:	d102      	bne.n	800c36e <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800c368:	2301      	movs	r3, #1
 800c36a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800c36e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c372:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800c374:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c376:	041a      	lsls	r2, r3, #16
 800c378:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c37a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c37e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800c382:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c386:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c388:	429a      	cmp	r2, r3
 800c38a:	d902      	bls.n	800c392 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800c38c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c38e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800c392:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c396:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800c39a:	fb02 f303 	mul.w	r3, r2, r3
 800c39e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800c3a2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800c3a6:	4613      	mov	r3, r2
 800c3a8:	005b      	lsls	r3, r3, #1
 800c3aa:	4413      	add	r3, r2
 800c3ac:	009b      	lsls	r3, r3, #2
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f7fe f876 	bl	800a4a0 <VL53L0X_isqrt>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	005b      	lsls	r3, r3, #1
 800c3b8:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800c3ba:	68bb      	ldr	r3, [r7, #8]
 800c3bc:	891b      	ldrh	r3, [r3, #8]
 800c3be:	461a      	mov	r2, r3
 800c3c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c3c2:	fb02 f303 	mul.w	r3, r2, r3
 800c3c6:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800c3c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c3ca:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800c3cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c3d0:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800c3d2:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800c3d4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800c3d8:	4a14      	ldr	r2, [pc, #80]	; (800c42c <VL53L0X_calc_sigma_estimate+0x2b0>)
 800c3da:	fba2 2303 	umull	r2, r3, r2, r3
 800c3de:	099b      	lsrs	r3, r3, #6
 800c3e0:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800c3e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c3e4:	041b      	lsls	r3, r3, #16
 800c3e6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c3ea:	4a10      	ldr	r2, [pc, #64]	; (800c42c <VL53L0X_calc_sigma_estimate+0x2b0>)
 800c3ec:	fba2 2303 	umull	r2, r3, r2, r3
 800c3f0:	099b      	lsrs	r3, r3, #6
 800c3f2:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800c3f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3f6:	021b      	lsls	r3, r3, #8
 800c3f8:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800c3fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c3fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800c402:	2b00      	cmp	r3, #0
 800c404:	bfb8      	it	lt
 800c406:	425b      	neglt	r3, r3
 800c408:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800c40a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c40c:	021b      	lsls	r3, r3, #8
 800c40e:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	7e1b      	ldrb	r3, [r3, #24]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d00b      	beq.n	800c430 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800c418:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c41c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c420:	e033      	b.n	800c48a <VL53L0X_calc_sigma_estimate+0x30e>
 800c422:	bf00      	nop
 800c424:	028f87ae 	.word	0x028f87ae
 800c428:	0006999a 	.word	0x0006999a
 800c42c:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800c430:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c432:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c436:	fbb2 f3f3 	udiv	r3, r2, r3
 800c43a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800c43e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c440:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800c444:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c448:	fb02 f303 	mul.w	r3, r2, r3
 800c44c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800c450:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c454:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c456:	4413      	add	r3, r2
 800c458:	0c1b      	lsrs	r3, r3, #16
 800c45a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800c45e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c462:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c466:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800c46a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c46e:	085b      	lsrs	r3, r3, #1
 800c470:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800c474:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c478:	fb03 f303 	mul.w	r3, r3, r3
 800c47c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800c480:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c484:	0b9b      	lsrs	r3, r3, #14
 800c486:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800c48a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c48e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c490:	fb02 f303 	mul.w	r3, r2, r3
 800c494:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800c496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c498:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c49c:	0c1b      	lsrs	r3, r3, #16
 800c49e:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800c4a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4a2:	fb03 f303 	mul.w	r3, r3, r3
 800c4a6:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800c4a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c4ac:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800c4ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4b0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c4b4:	0c1b      	lsrs	r3, r3, #16
 800c4b6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800c4b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4ba:	fb03 f303 	mul.w	r3, r3, r3
 800c4be:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800c4c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4c4:	4413      	add	r3, r2
 800c4c6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800c4c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4ca:	f7fd ffe9 	bl	800a4a0 <VL53L0X_isqrt>
 800c4ce:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800c4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4d2:	041b      	lsls	r3, r3, #16
 800c4d4:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800c4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4d8:	3332      	adds	r3, #50	; 0x32
 800c4da:	4a4b      	ldr	r2, [pc, #300]	; (800c608 <VL53L0X_calc_sigma_estimate+0x48c>)
 800c4dc:	fba2 2303 	umull	r2, r3, r2, r3
 800c4e0:	095a      	lsrs	r2, r3, #5
 800c4e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c4e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800c4ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c4f0:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800c4f4:	fb02 f303 	mul.w	r3, r2, r3
 800c4f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800c4fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c500:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800c504:	3308      	adds	r3, #8
 800c506:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800c50a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c50e:	4a3f      	ldr	r2, [pc, #252]	; (800c60c <VL53L0X_calc_sigma_estimate+0x490>)
 800c510:	fba2 2303 	umull	r2, r3, r2, r3
 800c514:	0b5b      	lsrs	r3, r3, #13
 800c516:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800c51a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c51e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c520:	429a      	cmp	r2, r3
 800c522:	d902      	bls.n	800c52a <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800c524:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c526:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800c52a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c52e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c532:	4413      	add	r3, r2
 800c534:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800c538:	4a35      	ldr	r2, [pc, #212]	; (800c610 <VL53L0X_calc_sigma_estimate+0x494>)
 800c53a:	fba2 2303 	umull	r2, r3, r2, r3
 800c53e:	099b      	lsrs	r3, r3, #6
 800c540:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800c542:	6a3b      	ldr	r3, [r7, #32]
 800c544:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800c546:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c54a:	441a      	add	r2, r3
 800c54c:	6a3b      	ldr	r3, [r7, #32]
 800c54e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c552:	4618      	mov	r0, r3
 800c554:	f7fd ffa4 	bl	800a4a0 <VL53L0X_isqrt>
 800c558:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800c55a:	69fb      	ldr	r3, [r7, #28]
 800c55c:	021b      	lsls	r3, r3, #8
 800c55e:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800c560:	69fb      	ldr	r3, [r7, #28]
 800c562:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c566:	4a2a      	ldr	r2, [pc, #168]	; (800c610 <VL53L0X_calc_sigma_estimate+0x494>)
 800c568:	fba2 2303 	umull	r2, r3, r2, r3
 800c56c:	099b      	lsrs	r3, r3, #6
 800c56e:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800c570:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c574:	fb03 f303 	mul.w	r3, r3, r3
 800c578:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800c57a:	69fb      	ldr	r3, [r7, #28]
 800c57c:	fb03 f303 	mul.w	r3, r3, r3
 800c580:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800c582:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c586:	4413      	add	r3, r2
 800c588:	4618      	mov	r0, r3
 800c58a:	f7fd ff89 	bl	800a4a0 <VL53L0X_isqrt>
 800c58e:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800c590:	69bb      	ldr	r3, [r7, #24]
 800c592:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c596:	fb02 f303 	mul.w	r3, r2, r3
 800c59a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800c59e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d009      	beq.n	800c5b8 <VL53L0X_calc_sigma_estimate+0x43c>
 800c5a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d005      	beq.n	800c5b8 <VL53L0X_calc_sigma_estimate+0x43c>
 800c5ac:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800c5b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c5b4:	429a      	cmp	r2, r3
 800c5b6:	d903      	bls.n	800c5c0 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800c5b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c5bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800c5c6:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681a      	ldr	r2, [r3, #0]
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800c5d2:	6939      	ldr	r1, [r7, #16]
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	9303      	str	r3, [sp, #12]
 800c5d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c5dc:	9302      	str	r3, [sp, #8]
 800c5de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c5e2:	9301      	str	r3, [sp, #4]
 800c5e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c5e6:	9300      	str	r3, [sp, #0]
 800c5e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c5ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c5ee:	68f8      	ldr	r0, [r7, #12]
 800c5f0:	f7ff fca8 	bl	800bf44 <VL53L0X_calc_dmax>
 800c5f4:	4603      	mov	r3, r0
 800c5f6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c5fa:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800c5fe:	4618      	mov	r0, r3
 800c600:	37c0      	adds	r7, #192	; 0xc0
 800c602:	46bd      	mov	sp, r7
 800c604:	bd80      	pop	{r7, pc}
 800c606:	bf00      	nop
 800c608:	51eb851f 	.word	0x51eb851f
 800c60c:	d1b71759 	.word	0xd1b71759
 800c610:	10624dd3 	.word	0x10624dd3

0800c614 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b090      	sub	sp, #64	; 0x40
 800c618:	af00      	add	r7, sp, #0
 800c61a:	60f8      	str	r0, [r7, #12]
 800c61c:	607a      	str	r2, [r7, #4]
 800c61e:	461a      	mov	r2, r3
 800c620:	460b      	mov	r3, r1
 800c622:	72fb      	strb	r3, [r7, #11]
 800c624:	4613      	mov	r3, r2
 800c626:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c628:	2300      	movs	r3, #0
 800c62a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800c62e:	2300      	movs	r3, #0
 800c630:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800c634:	2300      	movs	r3, #0
 800c636:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800c63a:	2300      	movs	r3, #0
 800c63c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800c640:	2300      	movs	r3, #0
 800c642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800c646:	2300      	movs	r3, #0
 800c648:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800c64c:	2300      	movs	r3, #0
 800c64e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800c652:	2300      	movs	r3, #0
 800c654:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800c658:	2300      	movs	r3, #0
 800c65a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800c65e:	2300      	movs	r3, #0
 800c660:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800c662:	2300      	movs	r3, #0
 800c664:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800c666:	7afb      	ldrb	r3, [r7, #11]
 800c668:	10db      	asrs	r3, r3, #3
 800c66a:	b2db      	uxtb	r3, r3
 800c66c:	f003 030f 	and.w	r3, r3, #15
 800c670:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800c674:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d017      	beq.n	800c6ac <VL53L0X_get_pal_range_status+0x98>
 800c67c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c680:	2b05      	cmp	r3, #5
 800c682:	d013      	beq.n	800c6ac <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800c684:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c688:	2b07      	cmp	r3, #7
 800c68a:	d00f      	beq.n	800c6ac <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800c68c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c690:	2b0c      	cmp	r3, #12
 800c692:	d00b      	beq.n	800c6ac <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800c694:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c698:	2b0d      	cmp	r3, #13
 800c69a:	d007      	beq.n	800c6ac <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800c69c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c6a0:	2b0e      	cmp	r3, #14
 800c6a2:	d003      	beq.n	800c6ac <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800c6a4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c6a8:	2b0f      	cmp	r3, #15
 800c6aa:	d103      	bne.n	800c6b4 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800c6ac:	2301      	movs	r3, #1
 800c6ae:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800c6b2:	e002      	b.n	800c6ba <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800c6ba:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d109      	bne.n	800c6d6 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800c6c2:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800c6c6:	461a      	mov	r2, r3
 800c6c8:	2100      	movs	r1, #0
 800c6ca:	68f8      	ldr	r0, [r7, #12]
 800c6cc:	f7fc f9ec 	bl	8008aa8 <VL53L0X_GetLimitCheckEnable>
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800c6d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d02e      	beq.n	800c73c <VL53L0X_get_pal_range_status+0x128>
 800c6de:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d12a      	bne.n	800c73c <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800c6e6:	f107 0310 	add.w	r3, r7, #16
 800c6ea:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800c6ee:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c6f0:	68f8      	ldr	r0, [r7, #12]
 800c6f2:	f7ff fd43 	bl	800c17c <VL53L0X_calc_sigma_estimate>
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800c6fc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c700:	2b00      	cmp	r3, #0
 800c702:	d103      	bne.n	800c70c <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800c704:	693b      	ldr	r3, [r7, #16]
 800c706:	b29a      	uxth	r2, r3
 800c708:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c70a:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800c70c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c710:	2b00      	cmp	r3, #0
 800c712:	d113      	bne.n	800c73c <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800c714:	f107 0320 	add.w	r3, r7, #32
 800c718:	461a      	mov	r2, r3
 800c71a:	2100      	movs	r1, #0
 800c71c:	68f8      	ldr	r0, [r7, #12]
 800c71e:	f7fc fa49 	bl	8008bb4 <VL53L0X_GetLimitCheckValue>
 800c722:	4603      	mov	r3, r0
 800c724:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800c728:	6a3b      	ldr	r3, [r7, #32]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d006      	beq.n	800c73c <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800c72e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c730:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800c732:	429a      	cmp	r2, r3
 800c734:	d902      	bls.n	800c73c <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800c736:	2301      	movs	r3, #1
 800c738:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800c73c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c740:	2b00      	cmp	r3, #0
 800c742:	d109      	bne.n	800c758 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800c744:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800c748:	461a      	mov	r2, r3
 800c74a:	2102      	movs	r1, #2
 800c74c:	68f8      	ldr	r0, [r7, #12]
 800c74e:	f7fc f9ab 	bl	8008aa8 <VL53L0X_GetLimitCheckEnable>
 800c752:	4603      	mov	r3, r0
 800c754:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800c758:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d044      	beq.n	800c7ea <VL53L0X_get_pal_range_status+0x1d6>
 800c760:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c764:	2b00      	cmp	r3, #0
 800c766:	d140      	bne.n	800c7ea <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800c768:	f107 031c 	add.w	r3, r7, #28
 800c76c:	461a      	mov	r2, r3
 800c76e:	2102      	movs	r1, #2
 800c770:	68f8      	ldr	r0, [r7, #12]
 800c772:	f7fc fa1f 	bl	8008bb4 <VL53L0X_GetLimitCheckValue>
 800c776:	4603      	mov	r3, r0
 800c778:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800c77c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c780:	2b00      	cmp	r3, #0
 800c782:	d107      	bne.n	800c794 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c784:	2201      	movs	r2, #1
 800c786:	21ff      	movs	r1, #255	; 0xff
 800c788:	68f8      	ldr	r0, [r7, #12]
 800c78a:	f000 f9bb 	bl	800cb04 <VL53L0X_WrByte>
 800c78e:	4603      	mov	r3, r0
 800c790:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800c794:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d109      	bne.n	800c7b0 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800c79c:	f107 0316 	add.w	r3, r7, #22
 800c7a0:	461a      	mov	r2, r3
 800c7a2:	21b6      	movs	r1, #182	; 0xb6
 800c7a4:	68f8      	ldr	r0, [r7, #12]
 800c7a6:	f000 fa59 	bl	800cc5c <VL53L0X_RdWord>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800c7b0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d107      	bne.n	800c7c8 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	21ff      	movs	r1, #255	; 0xff
 800c7bc:	68f8      	ldr	r0, [r7, #12]
 800c7be:	f000 f9a1 	bl	800cb04 <VL53L0X_WrByte>
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800c7c8:	8afb      	ldrh	r3, [r7, #22]
 800c7ca:	025b      	lsls	r3, r3, #9
 800c7cc:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7d2:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800c7d6:	69fb      	ldr	r3, [r7, #28]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d006      	beq.n	800c7ea <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800c7dc:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800c7de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7e0:	429a      	cmp	r2, r3
 800c7e2:	d902      	bls.n	800c7ea <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800c7e4:	2301      	movs	r3, #1
 800c7e6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800c7ea:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d109      	bne.n	800c806 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800c7f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c7f6:	461a      	mov	r2, r3
 800c7f8:	2103      	movs	r1, #3
 800c7fa:	68f8      	ldr	r0, [r7, #12]
 800c7fc:	f7fc f954 	bl	8008aa8 <VL53L0X_GetLimitCheckEnable>
 800c800:	4603      	mov	r3, r0
 800c802:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800c806:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d023      	beq.n	800c856 <VL53L0X_get_pal_range_status+0x242>
 800c80e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c812:	2b00      	cmp	r3, #0
 800c814:	d11f      	bne.n	800c856 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800c816:	893b      	ldrh	r3, [r7, #8]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d102      	bne.n	800c822 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800c81c:	2300      	movs	r3, #0
 800c81e:	637b      	str	r3, [r7, #52]	; 0x34
 800c820:	e005      	b.n	800c82e <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	021a      	lsls	r2, r3, #8
 800c826:	893b      	ldrh	r3, [r7, #8]
 800c828:	fbb2 f3f3 	udiv	r3, r2, r3
 800c82c:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800c82e:	f107 0318 	add.w	r3, r7, #24
 800c832:	461a      	mov	r2, r3
 800c834:	2103      	movs	r1, #3
 800c836:	68f8      	ldr	r0, [r7, #12]
 800c838:	f7fc f9bc 	bl	8008bb4 <VL53L0X_GetLimitCheckValue>
 800c83c:	4603      	mov	r3, r0
 800c83e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800c842:	69bb      	ldr	r3, [r7, #24]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d006      	beq.n	800c856 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800c848:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800c84a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c84c:	429a      	cmp	r2, r3
 800c84e:	d202      	bcs.n	800c856 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800c850:	2301      	movs	r3, #1
 800c852:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c856:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d14a      	bne.n	800c8f4 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800c85e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800c862:	2b01      	cmp	r3, #1
 800c864:	d103      	bne.n	800c86e <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800c866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c868:	22ff      	movs	r2, #255	; 0xff
 800c86a:	701a      	strb	r2, [r3, #0]
 800c86c:	e042      	b.n	800c8f4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800c86e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c872:	2b01      	cmp	r3, #1
 800c874:	d007      	beq.n	800c886 <VL53L0X_get_pal_range_status+0x272>
 800c876:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c87a:	2b02      	cmp	r3, #2
 800c87c:	d003      	beq.n	800c886 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800c87e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c882:	2b03      	cmp	r3, #3
 800c884:	d103      	bne.n	800c88e <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800c886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c888:	2205      	movs	r2, #5
 800c88a:	701a      	strb	r2, [r3, #0]
 800c88c:	e032      	b.n	800c8f4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800c88e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c892:	2b06      	cmp	r3, #6
 800c894:	d003      	beq.n	800c89e <VL53L0X_get_pal_range_status+0x28a>
 800c896:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c89a:	2b09      	cmp	r3, #9
 800c89c:	d103      	bne.n	800c8a6 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800c89e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8a0:	2204      	movs	r2, #4
 800c8a2:	701a      	strb	r2, [r3, #0]
 800c8a4:	e026      	b.n	800c8f4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800c8a6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c8aa:	2b08      	cmp	r3, #8
 800c8ac:	d007      	beq.n	800c8be <VL53L0X_get_pal_range_status+0x2aa>
 800c8ae:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c8b2:	2b0a      	cmp	r3, #10
 800c8b4:	d003      	beq.n	800c8be <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800c8b6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c8ba:	2b01      	cmp	r3, #1
 800c8bc:	d103      	bne.n	800c8c6 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800c8be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8c0:	2203      	movs	r2, #3
 800c8c2:	701a      	strb	r2, [r3, #0]
 800c8c4:	e016      	b.n	800c8f4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800c8c6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c8ca:	2b04      	cmp	r3, #4
 800c8cc:	d003      	beq.n	800c8d6 <VL53L0X_get_pal_range_status+0x2c2>
 800c8ce:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c8d2:	2b01      	cmp	r3, #1
 800c8d4:	d103      	bne.n	800c8de <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800c8d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8d8:	2202      	movs	r2, #2
 800c8da:	701a      	strb	r2, [r3, #0]
 800c8dc:	e00a      	b.n	800c8f4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800c8de:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800c8e2:	2b01      	cmp	r3, #1
 800c8e4:	d103      	bne.n	800c8ee <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800c8e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8e8:	2201      	movs	r2, #1
 800c8ea:	701a      	strb	r2, [r3, #0]
 800c8ec:	e002      	b.n	800c8f4 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800c8ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800c8f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8f6:	781b      	ldrb	r3, [r3, #0]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d102      	bne.n	800c902 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800c8fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8fe:	2200      	movs	r2, #0
 800c900:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800c902:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800c906:	461a      	mov	r2, r3
 800c908:	2101      	movs	r1, #1
 800c90a:	68f8      	ldr	r0, [r7, #12]
 800c90c:	f7fc f8cc 	bl	8008aa8 <VL53L0X_GetLimitCheckEnable>
 800c910:	4603      	mov	r3, r0
 800c912:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800c916:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d14f      	bne.n	800c9be <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800c91e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c922:	2b00      	cmp	r3, #0
 800c924:	d003      	beq.n	800c92e <VL53L0X_get_pal_range_status+0x31a>
 800c926:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800c92a:	2b01      	cmp	r3, #1
 800c92c:	d103      	bne.n	800c936 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800c92e:	2301      	movs	r3, #1
 800c930:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c934:	e002      	b.n	800c93c <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800c936:	2300      	movs	r3, #0
 800c938:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800c942:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800c946:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c94a:	2b04      	cmp	r3, #4
 800c94c:	d003      	beq.n	800c956 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800c94e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800c952:	2b00      	cmp	r3, #0
 800c954:	d103      	bne.n	800c95e <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800c956:	2301      	movs	r3, #1
 800c958:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c95c:	e002      	b.n	800c964 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800c95e:	2300      	movs	r3, #0
 800c960:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800c96a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800c96e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800c972:	2b00      	cmp	r3, #0
 800c974:	d003      	beq.n	800c97e <VL53L0X_get_pal_range_status+0x36a>
 800c976:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c97a:	2b01      	cmp	r3, #1
 800c97c:	d103      	bne.n	800c986 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800c97e:	2301      	movs	r3, #1
 800c980:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c984:	e002      	b.n	800c98c <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800c986:	2300      	movs	r3, #0
 800c988:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800c992:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800c996:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d003      	beq.n	800c9a6 <VL53L0X_get_pal_range_status+0x392>
 800c99e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c9a2:	2b01      	cmp	r3, #1
 800c9a4:	d103      	bne.n	800c9ae <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800c9a6:	2301      	movs	r3, #1
 800c9a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9ac:	e002      	b.n	800c9b4 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800c9ba:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c9be:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	3740      	adds	r7, #64	; 0x40
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	bd80      	pop	{r7, pc}

0800c9ca <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800c9ca:	b580      	push	{r7, lr}
 800c9cc:	b088      	sub	sp, #32
 800c9ce:	af02      	add	r7, sp, #8
 800c9d0:	60f8      	str	r0, [r7, #12]
 800c9d2:	60b9      	str	r1, [r7, #8]
 800c9d4:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	330a      	adds	r3, #10
 800c9da:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800c9e8:	b299      	uxth	r1, r3
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	b29a      	uxth	r2, r3
 800c9ee:	697b      	ldr	r3, [r7, #20]
 800c9f0:	9300      	str	r3, [sp, #0]
 800c9f2:	4613      	mov	r3, r2
 800c9f4:	68ba      	ldr	r2, [r7, #8]
 800c9f6:	f7f5 fc9b 	bl	8002330 <HAL_I2C_Master_Transmit>
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800c9fe:	693b      	ldr	r3, [r7, #16]
}
 800ca00:	4618      	mov	r0, r3
 800ca02:	3718      	adds	r7, #24
 800ca04:	46bd      	mov	sp, r7
 800ca06:	bd80      	pop	{r7, pc}

0800ca08 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b088      	sub	sp, #32
 800ca0c:	af02      	add	r7, sp, #8
 800ca0e:	60f8      	str	r0, [r7, #12]
 800ca10:	60b9      	str	r1, [r7, #8]
 800ca12:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	330a      	adds	r3, #10
 800ca18:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800ca26:	f043 0301 	orr.w	r3, r3, #1
 800ca2a:	b2db      	uxtb	r3, r3
 800ca2c:	b299      	uxth	r1, r3
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	b29a      	uxth	r2, r3
 800ca32:	697b      	ldr	r3, [r7, #20]
 800ca34:	9300      	str	r3, [sp, #0]
 800ca36:	4613      	mov	r3, r2
 800ca38:	68ba      	ldr	r2, [r7, #8]
 800ca3a:	f7f5 fd6d 	bl	8002518 <HAL_I2C_Master_Receive>
 800ca3e:	4603      	mov	r3, r0
 800ca40:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800ca42:	693b      	ldr	r3, [r7, #16]
}
 800ca44:	4618      	mov	r0, r3
 800ca46:	3718      	adds	r7, #24
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bd80      	pop	{r7, pc}

0800ca4c <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b086      	sub	sp, #24
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	60f8      	str	r0, [r7, #12]
 800ca54:	607a      	str	r2, [r7, #4]
 800ca56:	603b      	str	r3, [r7, #0]
 800ca58:	460b      	mov	r3, r1
 800ca5a:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	2b3f      	cmp	r3, #63	; 0x3f
 800ca64:	d902      	bls.n	800ca6c <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800ca66:	f06f 0303 	mvn.w	r3, #3
 800ca6a:	e016      	b.n	800ca9a <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800ca6c:	4a0d      	ldr	r2, [pc, #52]	; (800caa4 <VL53L0X_WriteMulti+0x58>)
 800ca6e:	7afb      	ldrb	r3, [r7, #11]
 800ca70:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800ca72:	683a      	ldr	r2, [r7, #0]
 800ca74:	6879      	ldr	r1, [r7, #4]
 800ca76:	480c      	ldr	r0, [pc, #48]	; (800caa8 <VL53L0X_WriteMulti+0x5c>)
 800ca78:	f000 f998 	bl	800cdac <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	3301      	adds	r3, #1
 800ca80:	461a      	mov	r2, r3
 800ca82:	4908      	ldr	r1, [pc, #32]	; (800caa4 <VL53L0X_WriteMulti+0x58>)
 800ca84:	68f8      	ldr	r0, [r7, #12]
 800ca86:	f7ff ffa0 	bl	800c9ca <_I2CWrite>
 800ca8a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ca8c:	693b      	ldr	r3, [r7, #16]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d001      	beq.n	800ca96 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ca92:	23ec      	movs	r3, #236	; 0xec
 800ca94:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800ca96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	3718      	adds	r7, #24
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}
 800caa2:	bf00      	nop
 800caa4:	200007ac 	.word	0x200007ac
 800caa8:	200007ad 	.word	0x200007ad

0800caac <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800caac:	b580      	push	{r7, lr}
 800caae:	b086      	sub	sp, #24
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	60f8      	str	r0, [r7, #12]
 800cab4:	607a      	str	r2, [r7, #4]
 800cab6:	603b      	str	r3, [r7, #0]
 800cab8:	460b      	mov	r3, r1
 800caba:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cabc:	2300      	movs	r3, #0
 800cabe:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800cac0:	f107 030b 	add.w	r3, r7, #11
 800cac4:	2201      	movs	r2, #1
 800cac6:	4619      	mov	r1, r3
 800cac8:	68f8      	ldr	r0, [r7, #12]
 800caca:	f7ff ff7e 	bl	800c9ca <_I2CWrite>
 800cace:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800cad0:	693b      	ldr	r3, [r7, #16]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d002      	beq.n	800cadc <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800cad6:	23ec      	movs	r3, #236	; 0xec
 800cad8:	75fb      	strb	r3, [r7, #23]
        goto done;
 800cada:	e00c      	b.n	800caf6 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800cadc:	683a      	ldr	r2, [r7, #0]
 800cade:	6879      	ldr	r1, [r7, #4]
 800cae0:	68f8      	ldr	r0, [r7, #12]
 800cae2:	f7ff ff91 	bl	800ca08 <_I2CRead>
 800cae6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800cae8:	693b      	ldr	r3, [r7, #16]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d002      	beq.n	800caf4 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800caee:	23ec      	movs	r3, #236	; 0xec
 800caf0:	75fb      	strb	r3, [r7, #23]
 800caf2:	e000      	b.n	800caf6 <VL53L0X_ReadMulti+0x4a>
    }
done:
 800caf4:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800caf6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cafa:	4618      	mov	r0, r3
 800cafc:	3718      	adds	r7, #24
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}
	...

0800cb04 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b084      	sub	sp, #16
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
 800cb0c:	460b      	mov	r3, r1
 800cb0e:	70fb      	strb	r3, [r7, #3]
 800cb10:	4613      	mov	r3, r2
 800cb12:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cb14:	2300      	movs	r3, #0
 800cb16:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800cb18:	4a0b      	ldr	r2, [pc, #44]	; (800cb48 <VL53L0X_WrByte+0x44>)
 800cb1a:	78fb      	ldrb	r3, [r7, #3]
 800cb1c:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800cb1e:	4a0a      	ldr	r2, [pc, #40]	; (800cb48 <VL53L0X_WrByte+0x44>)
 800cb20:	78bb      	ldrb	r3, [r7, #2]
 800cb22:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800cb24:	2202      	movs	r2, #2
 800cb26:	4908      	ldr	r1, [pc, #32]	; (800cb48 <VL53L0X_WrByte+0x44>)
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f7ff ff4e 	bl	800c9ca <_I2CWrite>
 800cb2e:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800cb30:	68bb      	ldr	r3, [r7, #8]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d001      	beq.n	800cb3a <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800cb36:	23ec      	movs	r3, #236	; 0xec
 800cb38:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800cb3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cb3e:	4618      	mov	r0, r3
 800cb40:	3710      	adds	r7, #16
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd80      	pop	{r7, pc}
 800cb46:	bf00      	nop
 800cb48:	200007ac 	.word	0x200007ac

0800cb4c <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b084      	sub	sp, #16
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
 800cb54:	460b      	mov	r3, r1
 800cb56:	70fb      	strb	r3, [r7, #3]
 800cb58:	4613      	mov	r3, r2
 800cb5a:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800cb60:	4a0e      	ldr	r2, [pc, #56]	; (800cb9c <VL53L0X_WrWord+0x50>)
 800cb62:	78fb      	ldrb	r3, [r7, #3]
 800cb64:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800cb66:	883b      	ldrh	r3, [r7, #0]
 800cb68:	0a1b      	lsrs	r3, r3, #8
 800cb6a:	b29b      	uxth	r3, r3
 800cb6c:	b2da      	uxtb	r2, r3
 800cb6e:	4b0b      	ldr	r3, [pc, #44]	; (800cb9c <VL53L0X_WrWord+0x50>)
 800cb70:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800cb72:	883b      	ldrh	r3, [r7, #0]
 800cb74:	b2da      	uxtb	r2, r3
 800cb76:	4b09      	ldr	r3, [pc, #36]	; (800cb9c <VL53L0X_WrWord+0x50>)
 800cb78:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800cb7a:	2203      	movs	r2, #3
 800cb7c:	4907      	ldr	r1, [pc, #28]	; (800cb9c <VL53L0X_WrWord+0x50>)
 800cb7e:	6878      	ldr	r0, [r7, #4]
 800cb80:	f7ff ff23 	bl	800c9ca <_I2CWrite>
 800cb84:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800cb86:	68bb      	ldr	r3, [r7, #8]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d001      	beq.n	800cb90 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800cb8c:	23ec      	movs	r3, #236	; 0xec
 800cb8e:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800cb90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cb94:	4618      	mov	r0, r3
 800cb96:	3710      	adds	r7, #16
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	bd80      	pop	{r7, pc}
 800cb9c:	200007ac 	.word	0x200007ac

0800cba0 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b084      	sub	sp, #16
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
 800cba8:	4608      	mov	r0, r1
 800cbaa:	4611      	mov	r1, r2
 800cbac:	461a      	mov	r2, r3
 800cbae:	4603      	mov	r3, r0
 800cbb0:	70fb      	strb	r3, [r7, #3]
 800cbb2:	460b      	mov	r3, r1
 800cbb4:	70bb      	strb	r3, [r7, #2]
 800cbb6:	4613      	mov	r3, r2
 800cbb8:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cbba:	2300      	movs	r3, #0
 800cbbc:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800cbbe:	f107 020e 	add.w	r2, r7, #14
 800cbc2:	78fb      	ldrb	r3, [r7, #3]
 800cbc4:	4619      	mov	r1, r3
 800cbc6:	6878      	ldr	r0, [r7, #4]
 800cbc8:	f000 f81e 	bl	800cc08 <VL53L0X_RdByte>
 800cbcc:	4603      	mov	r3, r0
 800cbce:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800cbd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d110      	bne.n	800cbfa <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800cbd8:	7bba      	ldrb	r2, [r7, #14]
 800cbda:	78bb      	ldrb	r3, [r7, #2]
 800cbdc:	4013      	ands	r3, r2
 800cbde:	b2da      	uxtb	r2, r3
 800cbe0:	787b      	ldrb	r3, [r7, #1]
 800cbe2:	4313      	orrs	r3, r2
 800cbe4:	b2db      	uxtb	r3, r3
 800cbe6:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800cbe8:	7bba      	ldrb	r2, [r7, #14]
 800cbea:	78fb      	ldrb	r3, [r7, #3]
 800cbec:	4619      	mov	r1, r3
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f7ff ff88 	bl	800cb04 <VL53L0X_WrByte>
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	73fb      	strb	r3, [r7, #15]
 800cbf8:	e000      	b.n	800cbfc <VL53L0X_UpdateByte+0x5c>
        goto done;
 800cbfa:	bf00      	nop
done:
    return Status;
 800cbfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cc00:	4618      	mov	r0, r3
 800cc02:	3710      	adds	r7, #16
 800cc04:	46bd      	mov	sp, r7
 800cc06:	bd80      	pop	{r7, pc}

0800cc08 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b086      	sub	sp, #24
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	60f8      	str	r0, [r7, #12]
 800cc10:	460b      	mov	r3, r1
 800cc12:	607a      	str	r2, [r7, #4]
 800cc14:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cc16:	2300      	movs	r3, #0
 800cc18:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800cc1a:	f107 030b 	add.w	r3, r7, #11
 800cc1e:	2201      	movs	r2, #1
 800cc20:	4619      	mov	r1, r3
 800cc22:	68f8      	ldr	r0, [r7, #12]
 800cc24:	f7ff fed1 	bl	800c9ca <_I2CWrite>
 800cc28:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800cc2a:	693b      	ldr	r3, [r7, #16]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d002      	beq.n	800cc36 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800cc30:	23ec      	movs	r3, #236	; 0xec
 800cc32:	75fb      	strb	r3, [r7, #23]
        goto done;
 800cc34:	e00c      	b.n	800cc50 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800cc36:	2201      	movs	r2, #1
 800cc38:	6879      	ldr	r1, [r7, #4]
 800cc3a:	68f8      	ldr	r0, [r7, #12]
 800cc3c:	f7ff fee4 	bl	800ca08 <_I2CRead>
 800cc40:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800cc42:	693b      	ldr	r3, [r7, #16]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d002      	beq.n	800cc4e <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800cc48:	23ec      	movs	r3, #236	; 0xec
 800cc4a:	75fb      	strb	r3, [r7, #23]
 800cc4c:	e000      	b.n	800cc50 <VL53L0X_RdByte+0x48>
    }
done:
 800cc4e:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800cc50:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cc54:	4618      	mov	r0, r3
 800cc56:	3718      	adds	r7, #24
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	bd80      	pop	{r7, pc}

0800cc5c <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b086      	sub	sp, #24
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	60f8      	str	r0, [r7, #12]
 800cc64:	460b      	mov	r3, r1
 800cc66:	607a      	str	r2, [r7, #4]
 800cc68:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800cc6e:	f107 030b 	add.w	r3, r7, #11
 800cc72:	2201      	movs	r2, #1
 800cc74:	4619      	mov	r1, r3
 800cc76:	68f8      	ldr	r0, [r7, #12]
 800cc78:	f7ff fea7 	bl	800c9ca <_I2CWrite>
 800cc7c:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800cc7e:	693b      	ldr	r3, [r7, #16]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d002      	beq.n	800cc8a <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800cc84:	23ec      	movs	r3, #236	; 0xec
 800cc86:	75fb      	strb	r3, [r7, #23]
        goto done;
 800cc88:	e017      	b.n	800ccba <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800cc8a:	2202      	movs	r2, #2
 800cc8c:	490e      	ldr	r1, [pc, #56]	; (800ccc8 <VL53L0X_RdWord+0x6c>)
 800cc8e:	68f8      	ldr	r0, [r7, #12]
 800cc90:	f7ff feba 	bl	800ca08 <_I2CRead>
 800cc94:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800cc96:	693b      	ldr	r3, [r7, #16]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d002      	beq.n	800cca2 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800cc9c:	23ec      	movs	r3, #236	; 0xec
 800cc9e:	75fb      	strb	r3, [r7, #23]
        goto done;
 800cca0:	e00b      	b.n	800ccba <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800cca2:	4b09      	ldr	r3, [pc, #36]	; (800ccc8 <VL53L0X_RdWord+0x6c>)
 800cca4:	781b      	ldrb	r3, [r3, #0]
 800cca6:	b29b      	uxth	r3, r3
 800cca8:	021b      	lsls	r3, r3, #8
 800ccaa:	b29a      	uxth	r2, r3
 800ccac:	4b06      	ldr	r3, [pc, #24]	; (800ccc8 <VL53L0X_RdWord+0x6c>)
 800ccae:	785b      	ldrb	r3, [r3, #1]
 800ccb0:	b29b      	uxth	r3, r3
 800ccb2:	4413      	add	r3, r2
 800ccb4:	b29a      	uxth	r2, r3
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800ccba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	3718      	adds	r7, #24
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}
 800ccc6:	bf00      	nop
 800ccc8:	200007ac 	.word	0x200007ac

0800cccc <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b086      	sub	sp, #24
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	60f8      	str	r0, [r7, #12]
 800ccd4:	460b      	mov	r3, r1
 800ccd6:	607a      	str	r2, [r7, #4]
 800ccd8:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ccda:	2300      	movs	r3, #0
 800ccdc:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800ccde:	f107 030b 	add.w	r3, r7, #11
 800cce2:	2201      	movs	r2, #1
 800cce4:	4619      	mov	r1, r3
 800cce6:	68f8      	ldr	r0, [r7, #12]
 800cce8:	f7ff fe6f 	bl	800c9ca <_I2CWrite>
 800ccec:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ccee:	693b      	ldr	r3, [r7, #16]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d002      	beq.n	800ccfa <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ccf4:	23ec      	movs	r3, #236	; 0xec
 800ccf6:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ccf8:	e01b      	b.n	800cd32 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800ccfa:	2204      	movs	r2, #4
 800ccfc:	4910      	ldr	r1, [pc, #64]	; (800cd40 <VL53L0X_RdDWord+0x74>)
 800ccfe:	68f8      	ldr	r0, [r7, #12]
 800cd00:	f7ff fe82 	bl	800ca08 <_I2CRead>
 800cd04:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800cd06:	693b      	ldr	r3, [r7, #16]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d002      	beq.n	800cd12 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800cd0c:	23ec      	movs	r3, #236	; 0xec
 800cd0e:	75fb      	strb	r3, [r7, #23]
        goto done;
 800cd10:	e00f      	b.n	800cd32 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800cd12:	4b0b      	ldr	r3, [pc, #44]	; (800cd40 <VL53L0X_RdDWord+0x74>)
 800cd14:	781b      	ldrb	r3, [r3, #0]
 800cd16:	061a      	lsls	r2, r3, #24
 800cd18:	4b09      	ldr	r3, [pc, #36]	; (800cd40 <VL53L0X_RdDWord+0x74>)
 800cd1a:	785b      	ldrb	r3, [r3, #1]
 800cd1c:	041b      	lsls	r3, r3, #16
 800cd1e:	441a      	add	r2, r3
 800cd20:	4b07      	ldr	r3, [pc, #28]	; (800cd40 <VL53L0X_RdDWord+0x74>)
 800cd22:	789b      	ldrb	r3, [r3, #2]
 800cd24:	021b      	lsls	r3, r3, #8
 800cd26:	4413      	add	r3, r2
 800cd28:	4a05      	ldr	r2, [pc, #20]	; (800cd40 <VL53L0X_RdDWord+0x74>)
 800cd2a:	78d2      	ldrb	r2, [r2, #3]
 800cd2c:	441a      	add	r2, r3
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800cd32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cd36:	4618      	mov	r0, r3
 800cd38:	3718      	adds	r7, #24
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd80      	pop	{r7, pc}
 800cd3e:	bf00      	nop
 800cd40:	200007ac 	.word	0x200007ac

0800cd44 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b084      	sub	sp, #16
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800cd50:	2002      	movs	r0, #2
 800cd52:	f7f4 feab 	bl	8001aac <HAL_Delay>
    return status;
 800cd56:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	3710      	adds	r7, #16
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bd80      	pop	{r7, pc}
	...

0800cd64 <__libc_init_array>:
 800cd64:	b570      	push	{r4, r5, r6, lr}
 800cd66:	4d0d      	ldr	r5, [pc, #52]	; (800cd9c <__libc_init_array+0x38>)
 800cd68:	4c0d      	ldr	r4, [pc, #52]	; (800cda0 <__libc_init_array+0x3c>)
 800cd6a:	1b64      	subs	r4, r4, r5
 800cd6c:	10a4      	asrs	r4, r4, #2
 800cd6e:	2600      	movs	r6, #0
 800cd70:	42a6      	cmp	r6, r4
 800cd72:	d109      	bne.n	800cd88 <__libc_init_array+0x24>
 800cd74:	4d0b      	ldr	r5, [pc, #44]	; (800cda4 <__libc_init_array+0x40>)
 800cd76:	4c0c      	ldr	r4, [pc, #48]	; (800cda8 <__libc_init_array+0x44>)
 800cd78:	f000 f836 	bl	800cde8 <_init>
 800cd7c:	1b64      	subs	r4, r4, r5
 800cd7e:	10a4      	asrs	r4, r4, #2
 800cd80:	2600      	movs	r6, #0
 800cd82:	42a6      	cmp	r6, r4
 800cd84:	d105      	bne.n	800cd92 <__libc_init_array+0x2e>
 800cd86:	bd70      	pop	{r4, r5, r6, pc}
 800cd88:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd8c:	4798      	blx	r3
 800cd8e:	3601      	adds	r6, #1
 800cd90:	e7ee      	b.n	800cd70 <__libc_init_array+0xc>
 800cd92:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd96:	4798      	blx	r3
 800cd98:	3601      	adds	r6, #1
 800cd9a:	e7f2      	b.n	800cd82 <__libc_init_array+0x1e>
 800cd9c:	0800ce78 	.word	0x0800ce78
 800cda0:	0800ce78 	.word	0x0800ce78
 800cda4:	0800ce78 	.word	0x0800ce78
 800cda8:	0800ce7c 	.word	0x0800ce7c

0800cdac <memcpy>:
 800cdac:	440a      	add	r2, r1
 800cdae:	4291      	cmp	r1, r2
 800cdb0:	f100 33ff 	add.w	r3, r0, #4294967295
 800cdb4:	d100      	bne.n	800cdb8 <memcpy+0xc>
 800cdb6:	4770      	bx	lr
 800cdb8:	b510      	push	{r4, lr}
 800cdba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cdbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cdc2:	4291      	cmp	r1, r2
 800cdc4:	d1f9      	bne.n	800cdba <memcpy+0xe>
 800cdc6:	bd10      	pop	{r4, pc}

0800cdc8 <memset>:
 800cdc8:	4402      	add	r2, r0
 800cdca:	4603      	mov	r3, r0
 800cdcc:	4293      	cmp	r3, r2
 800cdce:	d100      	bne.n	800cdd2 <memset+0xa>
 800cdd0:	4770      	bx	lr
 800cdd2:	f803 1b01 	strb.w	r1, [r3], #1
 800cdd6:	e7f9      	b.n	800cdcc <memset+0x4>

0800cdd8 <strcpy>:
 800cdd8:	4603      	mov	r3, r0
 800cdda:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cdde:	f803 2b01 	strb.w	r2, [r3], #1
 800cde2:	2a00      	cmp	r2, #0
 800cde4:	d1f9      	bne.n	800cdda <strcpy+0x2>
 800cde6:	4770      	bx	lr

0800cde8 <_init>:
 800cde8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdea:	bf00      	nop
 800cdec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdee:	bc08      	pop	{r3}
 800cdf0:	469e      	mov	lr, r3
 800cdf2:	4770      	bx	lr

0800cdf4 <_fini>:
 800cdf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdf6:	bf00      	nop
 800cdf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdfa:	bc08      	pop	{r3}
 800cdfc:	469e      	mov	lr, r3
 800cdfe:	4770      	bx	lr
