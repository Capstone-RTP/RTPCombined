
RTPCombined.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c9b0  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800cb6c  0800cb6c  0001cb6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cbdc  0800cbdc  000202cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800cbdc  0800cbdc  0001cbdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cbe4  0800cbe4  000202cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cbe4  0800cbe4  0001cbe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cbe8  0800cbe8  0001cbe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002cc  20000000  0800cbec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000504  200002d0  0800ceb8  000202d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200007d4  0800ceb8  000207d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022906  00000000  00000000  000202fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003681  00000000  00000000  00042c02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001930  00000000  00000000  00046288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017d8  00000000  00000000  00047bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000517e  00000000  00000000  00049390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e73c  00000000  00000000  0004e50e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a661  00000000  00000000  0006cc4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001872ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006bec  00000000  00000000  001872fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	200002d0 	.word	0x200002d0
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800cb54 	.word	0x0800cb54

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	200002d4 	.word	0x200002d4
 80001f8:	0800cb54 	.word	0x0800cb54

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000506:	f001 f92a 	bl	800175e <HAL_Init>

	/* USER CODE BEGIN Init */

	//Initialize stepper structures
	initStepper(&thetaMotor, &htim3, TIM_CHANNEL_1, thetaDir_GPIO_Port, thetaDir_Pin, 33);
 800050a:	2321      	movs	r3, #33	; 0x21
 800050c:	9301      	str	r3, [sp, #4]
 800050e:	2320      	movs	r3, #32
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000516:	2200      	movs	r2, #0
 8000518:	495f      	ldr	r1, [pc, #380]	; (8000698 <main+0x198>)
 800051a:	4860      	ldr	r0, [pc, #384]	; (800069c <main+0x19c>)
 800051c:	f000 fd80 	bl	8001020 <initStepper>
	initStepper(&yMotor,&htim2,TIM_CHANNEL_1,yDir_GPIO_Port,yDir_Pin, 400);
 8000520:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000524:	9301      	str	r3, [sp, #4]
 8000526:	2340      	movs	r3, #64	; 0x40
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800052e:	2200      	movs	r2, #0
 8000530:	495b      	ldr	r1, [pc, #364]	; (80006a0 <main+0x1a0>)
 8000532:	485c      	ldr	r0, [pc, #368]	; (80006a4 <main+0x1a4>)
 8000534:	f000 fd74 	bl	8001020 <initStepper>
	initStepper(&rMotor, &htim4, TIM_CHANNEL_3, rDir_GPIO_Port, rDir_Pin, 400);
 8000538:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800053c:	9301      	str	r3, [sp, #4]
 800053e:	2380      	movs	r3, #128	; 0x80
 8000540:	9300      	str	r3, [sp, #0]
 8000542:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000546:	2208      	movs	r2, #8
 8000548:	4957      	ldr	r1, [pc, #348]	; (80006a8 <main+0x1a8>)
 800054a:	4858      	ldr	r0, [pc, #352]	; (80006ac <main+0x1ac>)
 800054c:	f000 fd68 	bl	8001020 <initStepper>

	InitSerialFromPC(&hlpuart1,rxBuffer);
 8000550:	4957      	ldr	r1, [pc, #348]	; (80006b0 <main+0x1b0>)
 8000552:	4858      	ldr	r0, [pc, #352]	; (80006b4 <main+0x1b4>)
 8000554:	f000 fd4e 	bl	8000ff4 <InitSerialFromPC>
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000558:	f000 f8b6 	bl	80006c8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800055c:	f000 fb9c 	bl	8000c98 <MX_GPIO_Init>
	MX_TIM2_Init();
 8000560:	f000 f9e4 	bl	800092c <MX_TIM2_Init>
	MX_TIM4_Init();
 8000564:	f000 fad2 	bl	8000b0c <MX_TIM4_Init>
	MX_LPUART1_UART_Init();
 8000568:	f000 f940 	bl	80007ec <MX_LPUART1_UART_Init>
	MX_I2C2_Init();
 800056c:	f000 f8fe 	bl	800076c <MX_I2C2_Init>
	MX_TIM3_Init();
 8000570:	f000 fa54 	bl	8000a1c <MX_TIM3_Init>
	MX_TIM5_Init();
 8000574:	f000 fb42 	bl	8000bfc <MX_TIM5_Init>
	MX_TIM1_Init();
 8000578:	f000 f984 	bl	8000884 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	//Enable Timer Interrupts
	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE);
 800057c:	4b46      	ldr	r3, [pc, #280]	; (8000698 <main+0x198>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	68da      	ldr	r2, [r3, #12]
 8000582:	4b45      	ldr	r3, [pc, #276]	; (8000698 <main+0x198>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	f042 0201 	orr.w	r2, r2, #1
 800058a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 800058c:	4b44      	ldr	r3, [pc, #272]	; (80006a0 <main+0x1a0>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	68da      	ldr	r2, [r3, #12]
 8000592:	4b43      	ldr	r3, [pc, #268]	; (80006a0 <main+0x1a0>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	f042 0201 	orr.w	r2, r2, #1
 800059a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_UPDATE);
 800059c:	4b42      	ldr	r3, [pc, #264]	; (80006a8 <main+0x1a8>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	68da      	ldr	r2, [r3, #12]
 80005a2:	4b41      	ldr	r3, [pc, #260]	; (80006a8 <main+0x1a8>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f042 0201 	orr.w	r2, r2, #1
 80005aa:	60da      	str	r2, [r3, #12]

	Dev->I2cHandle = &hi2c2;
 80005ac:	4b42      	ldr	r3, [pc, #264]	; (80006b8 <main+0x1b8>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a42      	ldr	r2, [pc, #264]	; (80006bc <main+0x1bc>)
 80005b2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	Dev->I2cDevAddr = 0x52;
 80005b6:	4b40      	ldr	r3, [pc, #256]	; (80006b8 <main+0x1b8>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2252      	movs	r2, #82	; 0x52
 80005bc:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

	// VL53L0X init for Single Measurement
	//

	VL53L0X_WaitDeviceBooted( Dev );
 80005c0:	4b3d      	ldr	r3, [pc, #244]	; (80006b8 <main+0x1b8>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4618      	mov	r0, r3
 80005c6:	f007 fd7f 	bl	80080c8 <VL53L0X_WaitDeviceBooted>
	VL53L0X_DataInit( Dev );
 80005ca:	4b3b      	ldr	r3, [pc, #236]	; (80006b8 <main+0x1b8>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4618      	mov	r0, r3
 80005d0:	f007 fa94 	bl	8007afc <VL53L0X_DataInit>
	VL53L0X_StaticInit( Dev );
 80005d4:	4b38      	ldr	r3, [pc, #224]	; (80006b8 <main+0x1b8>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4618      	mov	r0, r3
 80005da:	f007 fbf3 	bl	8007dc4 <VL53L0X_StaticInit>
	VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 80005de:	4b36      	ldr	r3, [pc, #216]	; (80006b8 <main+0x1b8>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	1c7a      	adds	r2, r7, #1
 80005e4:	1cb9      	adds	r1, r7, #2
 80005e6:	4618      	mov	r0, r3
 80005e8:	f008 fa8e 	bl	8008b08 <VL53L0X_PerformRefCalibration>
	VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 80005ec:	4b32      	ldr	r3, [pc, #200]	; (80006b8 <main+0x1b8>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	1cfa      	adds	r2, r7, #3
 80005f2:	1d39      	adds	r1, r7, #4
 80005f4:	4618      	mov	r0, r3
 80005f6:	f008 ff15 	bl	8009424 <VL53L0X_PerformRefSpadManagement>
	VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80005fa:	4b2f      	ldr	r3, [pc, #188]	; (80006b8 <main+0x1b8>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	2100      	movs	r1, #0
 8000600:	4618      	mov	r0, r3
 8000602:	f007 fdff 	bl	8008204 <VL53L0X_SetDeviceMode>

	// Enable/Disable Sigma and Signal check
	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 8000606:	4b2c      	ldr	r3, [pc, #176]	; (80006b8 <main+0x1b8>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	2201      	movs	r2, #1
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f008 f874 	bl	80086fc <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 8000614:	4b28      	ldr	r3, [pc, #160]	; (80006b8 <main+0x1b8>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2201      	movs	r2, #1
 800061a:	2101      	movs	r1, #1
 800061c:	4618      	mov	r0, r3
 800061e:	f008 f86d 	bl	80086fc <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 8000622:	4b25      	ldr	r3, [pc, #148]	; (80006b8 <main+0x1b8>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f641 1299 	movw	r2, #6553	; 0x1999
 800062a:	2101      	movs	r1, #1
 800062c:	4618      	mov	r0, r3
 800062e:	f008 f915 	bl	800885c <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 8000632:	4b21      	ldr	r3, [pc, #132]	; (80006b8 <main+0x1b8>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800063a:	2100      	movs	r1, #0
 800063c:	4618      	mov	r0, r3
 800063e:	f008 f90d 	bl	800885c <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 33000);
 8000642:	4b1d      	ldr	r3, [pc, #116]	; (80006b8 <main+0x1b8>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f248 01e8 	movw	r1, #33000	; 0x80e8
 800064a:	4618      	mov	r0, r3
 800064c:	f007 fe38 	bl	80082c0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 8000650:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <main+0x1b8>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2212      	movs	r2, #18
 8000656:	2100      	movs	r1, #0
 8000658:	4618      	mov	r0, r3
 800065a:	f007 fe57 	bl	800830c <VL53L0X_SetVcselPulsePeriod>
	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 800065e:	4b16      	ldr	r3, [pc, #88]	; (80006b8 <main+0x1b8>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	220e      	movs	r2, #14
 8000664:	2101      	movs	r1, #1
 8000666:	4618      	mov	r0, r3
 8000668:	f007 fe50 	bl	800830c <VL53L0X_SetVcselPulsePeriod>

	//Enable UART Enable IT
	HAL_UART_Receive_IT(&hlpuart1, rxBuffer, 6); //receive 6 bytes
 800066c:	2206      	movs	r2, #6
 800066e:	4910      	ldr	r1, [pc, #64]	; (80006b0 <main+0x1b0>)
 8000670:	4810      	ldr	r0, [pc, #64]	; (80006b4 <main+0x1b4>)
 8000672:	f005 fa9f 	bl	8005bb4 <HAL_UART_Receive_IT>

	//Start timer for uSDelay for HX711
	HAL_TIM_Base_Start(&htim5);
 8000676:	4812      	ldr	r0, [pc, #72]	; (80006c0 <main+0x1c0>)
 8000678:	f003 ffc4 	bl	8004604 <HAL_TIM_Base_Start>

	HAL_Delay(1000);
 800067c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000680:	f001 f8e2 	bl	8001848 <HAL_Delay>
	//	pressureZero = hx711_value_ave(&loadCell, 5);
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	timer = HAL_GetTick();
 8000684:	f001 f8d4 	bl	8001830 <HAL_GetTick>
 8000688:	4603      	mov	r3, r0
 800068a:	4a0e      	ldr	r2, [pc, #56]	; (80006c4 <main+0x1c4>)
 800068c:	6013      	str	r3, [r2, #0]

	//testing stopping function
	GoHome(&yMotor);
 800068e:	4805      	ldr	r0, [pc, #20]	; (80006a4 <main+0x1a4>)
 8000690:	f001 f81a 	bl	80016c8 <GoHome>
	//setTarget(&yMotor, 1000, 1);
	//HAL_Delay(3000);
	//setTarget(&yMotor, 500, 0);


	while (1)
 8000694:	e7fe      	b.n	8000694 <main+0x194>
 8000696:	bf00      	nop
 8000698:	20000468 	.word	0x20000468
 800069c:	20000550 	.word	0x20000550
 80006a0:	2000041c 	.word	0x2000041c
 80006a4:	20000580 	.word	0x20000580
 80006a8:	200004b4 	.word	0x200004b4
 80006ac:	200005b0 	.word	0x200005b0
 80006b0:	20000774 	.word	0x20000774
 80006b4:	20000340 	.word	0x20000340
 80006b8:	20000000 	.word	0x20000000
 80006bc:	200002ec 	.word	0x200002ec
 80006c0:	20000500 	.word	0x20000500
 80006c4:	20000770 	.word	0x20000770

080006c8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b098      	sub	sp, #96	; 0x60
 80006cc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 0318 	add.w	r3, r7, #24
 80006d2:	2248      	movs	r2, #72	; 0x48
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f00c fa2c 	bl	800cb34 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
 80006e8:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80006ea:	2000      	movs	r0, #0
 80006ec:	f002 f9f0 	bl	8002ad0 <HAL_PWREx_ControlVoltageScaling>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0x32>
	{
		Error_Handler();
 80006f6:	f000 fc77 	bl	8000fe8 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006fa:	2310      	movs	r3, #16
 80006fc:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006fe:	2301      	movs	r3, #1
 8000700:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000706:	2360      	movs	r3, #96	; 0x60
 8000708:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070a:	2302      	movs	r3, #2
 800070c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800070e:	2301      	movs	r3, #1
 8000710:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000712:	2301      	movs	r3, #1
 8000714:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLN = 50;
 8000716:	2332      	movs	r3, #50	; 0x32
 8000718:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800071a:	2302      	movs	r3, #2
 800071c:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800071e:	2302      	movs	r3, #2
 8000720:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000722:	2302      	movs	r3, #2
 8000724:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000726:	f107 0318 	add.w	r3, r7, #24
 800072a:	4618      	mov	r0, r3
 800072c:	f002 fa84 	bl	8002c38 <HAL_RCC_OscConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0x72>
	{
		Error_Handler();
 8000736:	f000 fc57 	bl	8000fe8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073a:	230f      	movs	r3, #15
 800073c:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073e:	2303      	movs	r3, #3
 8000740:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	2104      	movs	r1, #4
 8000752:	4618      	mov	r0, r3
 8000754:	f002 feec 	bl	8003530 <HAL_RCC_ClockConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0x9a>
	{
		Error_Handler();
 800075e:	f000 fc43 	bl	8000fe8 <Error_Handler>
	}
}
 8000762:	bf00      	nop
 8000764:	3760      	adds	r7, #96	; 0x60
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
	...

0800076c <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8000770:	4b1b      	ldr	r3, [pc, #108]	; (80007e0 <MX_I2C2_Init+0x74>)
 8000772:	4a1c      	ldr	r2, [pc, #112]	; (80007e4 <MX_I2C2_Init+0x78>)
 8000774:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x10C0ECFF;
 8000776:	4b1a      	ldr	r3, [pc, #104]	; (80007e0 <MX_I2C2_Init+0x74>)
 8000778:	4a1b      	ldr	r2, [pc, #108]	; (80007e8 <MX_I2C2_Init+0x7c>)
 800077a:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 800077c:	4b18      	ldr	r3, [pc, #96]	; (80007e0 <MX_I2C2_Init+0x74>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000782:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <MX_I2C2_Init+0x74>)
 8000784:	2201      	movs	r2, #1
 8000786:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000788:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <MX_I2C2_Init+0x74>)
 800078a:	2200      	movs	r2, #0
 800078c:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 800078e:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <MX_I2C2_Init+0x74>)
 8000790:	2200      	movs	r2, #0
 8000792:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <MX_I2C2_Init+0x74>)
 8000796:	2200      	movs	r2, #0
 8000798:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <MX_I2C2_Init+0x74>)
 800079c:	2200      	movs	r2, #0
 800079e:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <MX_I2C2_Init+0x74>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007a6:	480e      	ldr	r0, [pc, #56]	; (80007e0 <MX_I2C2_Init+0x74>)
 80007a8:	f001 fbe8 	bl	8001f7c <HAL_I2C_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_I2C2_Init+0x4a>
	{
		Error_Handler();
 80007b2:	f000 fc19 	bl	8000fe8 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007b6:	2100      	movs	r1, #0
 80007b8:	4809      	ldr	r0, [pc, #36]	; (80007e0 <MX_I2C2_Init+0x74>)
 80007ba:	f002 f8d1 	bl	8002960 <HAL_I2CEx_ConfigAnalogFilter>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_I2C2_Init+0x5c>
	{
		Error_Handler();
 80007c4:	f000 fc10 	bl	8000fe8 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80007c8:	2100      	movs	r1, #0
 80007ca:	4805      	ldr	r0, [pc, #20]	; (80007e0 <MX_I2C2_Init+0x74>)
 80007cc:	f002 f913 	bl	80029f6 <HAL_I2CEx_ConfigDigitalFilter>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_I2C2_Init+0x6e>
	{
		Error_Handler();
 80007d6:	f000 fc07 	bl	8000fe8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	200002ec 	.word	0x200002ec
 80007e4:	40005800 	.word	0x40005800
 80007e8:	10c0ecff 	.word	0x10c0ecff

080007ec <MX_LPUART1_UART_Init>:
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
	/* USER CODE END LPUART1_Init 0 */

	/* USER CODE BEGIN LPUART1_Init 1 */

	/* USER CODE END LPUART1_Init 1 */
	hlpuart1.Instance = LPUART1;
 80007f0:	4b22      	ldr	r3, [pc, #136]	; (800087c <MX_LPUART1_UART_Init+0x90>)
 80007f2:	4a23      	ldr	r2, [pc, #140]	; (8000880 <MX_LPUART1_UART_Init+0x94>)
 80007f4:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 115200;
 80007f6:	4b21      	ldr	r3, [pc, #132]	; (800087c <MX_LPUART1_UART_Init+0x90>)
 80007f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007fc:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007fe:	4b1f      	ldr	r3, [pc, #124]	; (800087c <MX_LPUART1_UART_Init+0x90>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000804:	4b1d      	ldr	r3, [pc, #116]	; (800087c <MX_LPUART1_UART_Init+0x90>)
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
 800080a:	4b1c      	ldr	r3, [pc, #112]	; (800087c <MX_LPUART1_UART_Init+0x90>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000810:	4b1a      	ldr	r3, [pc, #104]	; (800087c <MX_LPUART1_UART_Init+0x90>)
 8000812:	220c      	movs	r2, #12
 8000814:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000816:	4b19      	ldr	r3, [pc, #100]	; (800087c <MX_LPUART1_UART_Init+0x90>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800081c:	4b17      	ldr	r3, [pc, #92]	; (800087c <MX_LPUART1_UART_Init+0x90>)
 800081e:	2200      	movs	r2, #0
 8000820:	621a      	str	r2, [r3, #32]
	hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000822:	4b16      	ldr	r3, [pc, #88]	; (800087c <MX_LPUART1_UART_Init+0x90>)
 8000824:	2200      	movs	r2, #0
 8000826:	625a      	str	r2, [r3, #36]	; 0x24
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000828:	4b14      	ldr	r3, [pc, #80]	; (800087c <MX_LPUART1_UART_Init+0x90>)
 800082a:	2200      	movs	r2, #0
 800082c:	629a      	str	r2, [r3, #40]	; 0x28
	hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800082e:	4b13      	ldr	r3, [pc, #76]	; (800087c <MX_LPUART1_UART_Init+0x90>)
 8000830:	2200      	movs	r2, #0
 8000832:	665a      	str	r2, [r3, #100]	; 0x64
	if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000834:	4811      	ldr	r0, [pc, #68]	; (800087c <MX_LPUART1_UART_Init+0x90>)
 8000836:	f005 f96d 	bl	8005b14 <HAL_UART_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_LPUART1_UART_Init+0x58>
	{
		Error_Handler();
 8000840:	f000 fbd2 	bl	8000fe8 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000844:	2100      	movs	r1, #0
 8000846:	480d      	ldr	r0, [pc, #52]	; (800087c <MX_LPUART1_UART_Init+0x90>)
 8000848:	f007 f879 	bl	800793e <HAL_UARTEx_SetTxFifoThreshold>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_LPUART1_UART_Init+0x6a>
	{
		Error_Handler();
 8000852:	f000 fbc9 	bl	8000fe8 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000856:	2100      	movs	r1, #0
 8000858:	4808      	ldr	r0, [pc, #32]	; (800087c <MX_LPUART1_UART_Init+0x90>)
 800085a:	f007 f8ae 	bl	80079ba <HAL_UARTEx_SetRxFifoThreshold>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_LPUART1_UART_Init+0x7c>
	{
		Error_Handler();
 8000864:	f000 fbc0 	bl	8000fe8 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000868:	4804      	ldr	r0, [pc, #16]	; (800087c <MX_LPUART1_UART_Init+0x90>)
 800086a:	f007 f82f 	bl	80078cc <HAL_UARTEx_DisableFifoMode>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_LPUART1_UART_Init+0x8c>
	{
		Error_Handler();
 8000874:	f000 fbb8 	bl	8000fe8 <Error_Handler>
	}
	/* USER CODE BEGIN LPUART1_Init 2 */

	/* USER CODE END LPUART1_Init 2 */

}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000340 	.word	0x20000340
 8000880:	40008000 	.word	0x40008000

08000884 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b088      	sub	sp, #32
 8000888:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800088a:	f107 0310 	add.w	r3, r7, #16
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80008a2:	4b20      	ldr	r3, [pc, #128]	; (8000924 <MX_TIM1_Init+0xa0>)
 80008a4:	4a20      	ldr	r2, [pc, #128]	; (8000928 <MX_TIM1_Init+0xa4>)
 80008a6:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 80008a8:	4b1e      	ldr	r3, [pc, #120]	; (8000924 <MX_TIM1_Init+0xa0>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ae:	4b1d      	ldr	r3, [pc, #116]	; (8000924 <MX_TIM1_Init+0xa0>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 80008b4:	4b1b      	ldr	r3, [pc, #108]	; (8000924 <MX_TIM1_Init+0xa0>)
 80008b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008ba:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008bc:	4b19      	ldr	r3, [pc, #100]	; (8000924 <MX_TIM1_Init+0xa0>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80008c2:	4b18      	ldr	r3, [pc, #96]	; (8000924 <MX_TIM1_Init+0xa0>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c8:	4b16      	ldr	r3, [pc, #88]	; (8000924 <MX_TIM1_Init+0xa0>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008ce:	4815      	ldr	r0, [pc, #84]	; (8000924 <MX_TIM1_Init+0xa0>)
 80008d0:	f003 fe40 	bl	8004554 <HAL_TIM_Base_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_TIM1_Init+0x5a>
	{
		Error_Handler();
 80008da:	f000 fb85 	bl	8000fe8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008e2:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008e4:	f107 0310 	add.w	r3, r7, #16
 80008e8:	4619      	mov	r1, r3
 80008ea:	480e      	ldr	r0, [pc, #56]	; (8000924 <MX_TIM1_Init+0xa0>)
 80008ec:	f004 fb4a 	bl	8004f84 <HAL_TIM_ConfigClockSource>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_TIM1_Init+0x76>
	{
		Error_Handler();
 80008f6:	f000 fb77 	bl	8000fe8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008fa:	2300      	movs	r3, #0
 80008fc:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008fe:	2300      	movs	r3, #0
 8000900:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000906:	1d3b      	adds	r3, r7, #4
 8000908:	4619      	mov	r1, r3
 800090a:	4806      	ldr	r0, [pc, #24]	; (8000924 <MX_TIM1_Init+0xa0>)
 800090c:	f005 f85c 	bl	80059c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_TIM1_Init+0x96>
	{
		Error_Handler();
 8000916:	f000 fb67 	bl	8000fe8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	3720      	adds	r7, #32
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	200003d0 	.word	0x200003d0
 8000928:	40012c00 	.word	0x40012c00

0800092c <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08e      	sub	sp, #56	; 0x38
 8000930:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000932:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000940:	f107 031c 	add.w	r3, r7, #28
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 800094c:	463b      	mov	r3, r7
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
 8000958:	611a      	str	r2, [r3, #16]
 800095a:	615a      	str	r2, [r3, #20]
 800095c:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800095e:	4b2e      	ldr	r3, [pc, #184]	; (8000a18 <MX_TIM2_Init+0xec>)
 8000960:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000964:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 100-1;
 8000966:	4b2c      	ldr	r3, [pc, #176]	; (8000a18 <MX_TIM2_Init+0xec>)
 8000968:	2263      	movs	r2, #99	; 0x63
 800096a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096c:	4b2a      	ldr	r3, [pc, #168]	; (8000a18 <MX_TIM2_Init+0xec>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1250-1;
 8000972:	4b29      	ldr	r3, [pc, #164]	; (8000a18 <MX_TIM2_Init+0xec>)
 8000974:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8000978:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800097a:	4b27      	ldr	r3, [pc, #156]	; (8000a18 <MX_TIM2_Init+0xec>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000980:	4b25      	ldr	r3, [pc, #148]	; (8000a18 <MX_TIM2_Init+0xec>)
 8000982:	2280      	movs	r2, #128	; 0x80
 8000984:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000986:	4824      	ldr	r0, [pc, #144]	; (8000a18 <MX_TIM2_Init+0xec>)
 8000988:	f003 fde4 	bl	8004554 <HAL_TIM_Base_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_TIM2_Init+0x6a>
	{
		Error_Handler();
 8000992:	f000 fb29 	bl	8000fe8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000996:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800099a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800099c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009a0:	4619      	mov	r1, r3
 80009a2:	481d      	ldr	r0, [pc, #116]	; (8000a18 <MX_TIM2_Init+0xec>)
 80009a4:	f004 faee 	bl	8004f84 <HAL_TIM_ConfigClockSource>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_TIM2_Init+0x86>
	{
		Error_Handler();
 80009ae:	f000 fb1b 	bl	8000fe8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009b2:	4819      	ldr	r0, [pc, #100]	; (8000a18 <MX_TIM2_Init+0xec>)
 80009b4:	f003 feb5 	bl	8004722 <HAL_TIM_PWM_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_TIM2_Init+0x96>
	{
		Error_Handler();
 80009be:	f000 fb13 	bl	8000fe8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c2:	2300      	movs	r3, #0
 80009c4:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	4811      	ldr	r0, [pc, #68]	; (8000a18 <MX_TIM2_Init+0xec>)
 80009d2:	f004 fff9 	bl	80059c8 <HAL_TIMEx_MasterConfigSynchronization>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM2_Init+0xb4>
	{
		Error_Handler();
 80009dc:	f000 fb04 	bl	8000fe8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009e0:	2360      	movs	r3, #96	; 0x60
 80009e2:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 500;
 80009e4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80009e8:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009ea:	2300      	movs	r3, #0
 80009ec:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009ee:	2300      	movs	r3, #0
 80009f0:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009f2:	463b      	mov	r3, r7
 80009f4:	2200      	movs	r2, #0
 80009f6:	4619      	mov	r1, r3
 80009f8:	4807      	ldr	r0, [pc, #28]	; (8000a18 <MX_TIM2_Init+0xec>)
 80009fa:	f004 f9af 	bl	8004d5c <HAL_TIM_PWM_ConfigChannel>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_TIM2_Init+0xdc>
	{
		Error_Handler();
 8000a04:	f000 faf0 	bl	8000fe8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8000a08:	4803      	ldr	r0, [pc, #12]	; (8000a18 <MX_TIM2_Init+0xec>)
 8000a0a:	f000 fd6d 	bl	80014e8 <HAL_TIM_MspPostInit>

}
 8000a0e:	bf00      	nop
 8000a10:	3738      	adds	r7, #56	; 0x38
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	2000041c 	.word	0x2000041c

08000a1c <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08e      	sub	sp, #56	; 0x38
 8000a20:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a30:	f107 031c 	add.w	r3, r7, #28
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000a3c:	463b      	mov	r3, r7
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	60da      	str	r2, [r3, #12]
 8000a48:	611a      	str	r2, [r3, #16]
 8000a4a:	615a      	str	r2, [r3, #20]
 8000a4c:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000a4e:	4b2d      	ldr	r3, [pc, #180]	; (8000b04 <MX_TIM3_Init+0xe8>)
 8000a50:	4a2d      	ldr	r2, [pc, #180]	; (8000b08 <MX_TIM3_Init+0xec>)
 8000a52:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 100-1;
 8000a54:	4b2b      	ldr	r3, [pc, #172]	; (8000b04 <MX_TIM3_Init+0xe8>)
 8000a56:	2263      	movs	r2, #99	; 0x63
 8000a58:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a5a:	4b2a      	ldr	r3, [pc, #168]	; (8000b04 <MX_TIM3_Init+0xe8>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1250-1;
 8000a60:	4b28      	ldr	r3, [pc, #160]	; (8000b04 <MX_TIM3_Init+0xe8>)
 8000a62:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8000a66:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a68:	4b26      	ldr	r3, [pc, #152]	; (8000b04 <MX_TIM3_Init+0xe8>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a6e:	4b25      	ldr	r3, [pc, #148]	; (8000b04 <MX_TIM3_Init+0xe8>)
 8000a70:	2280      	movs	r2, #128	; 0x80
 8000a72:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a74:	4823      	ldr	r0, [pc, #140]	; (8000b04 <MX_TIM3_Init+0xe8>)
 8000a76:	f003 fd6d 	bl	8004554 <HAL_TIM_Base_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_TIM3_Init+0x68>
	{
		Error_Handler();
 8000a80:	f000 fab2 	bl	8000fe8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a88:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a8e:	4619      	mov	r1, r3
 8000a90:	481c      	ldr	r0, [pc, #112]	; (8000b04 <MX_TIM3_Init+0xe8>)
 8000a92:	f004 fa77 	bl	8004f84 <HAL_TIM_ConfigClockSource>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_TIM3_Init+0x84>
	{
		Error_Handler();
 8000a9c:	f000 faa4 	bl	8000fe8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000aa0:	4818      	ldr	r0, [pc, #96]	; (8000b04 <MX_TIM3_Init+0xe8>)
 8000aa2:	f003 fe3e 	bl	8004722 <HAL_TIM_PWM_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM3_Init+0x94>
	{
		Error_Handler();
 8000aac:	f000 fa9c 	bl	8000fe8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ab8:	f107 031c 	add.w	r3, r7, #28
 8000abc:	4619      	mov	r1, r3
 8000abe:	4811      	ldr	r0, [pc, #68]	; (8000b04 <MX_TIM3_Init+0xe8>)
 8000ac0:	f004 ff82 	bl	80059c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_TIM3_Init+0xb2>
	{
		Error_Handler();
 8000aca:	f000 fa8d 	bl	8000fe8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ace:	2360      	movs	r3, #96	; 0x60
 8000ad0:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 500;
 8000ad2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ad6:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000adc:	2300      	movs	r3, #0
 8000ade:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ae0:	463b      	mov	r3, r7
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4807      	ldr	r0, [pc, #28]	; (8000b04 <MX_TIM3_Init+0xe8>)
 8000ae8:	f004 f938 	bl	8004d5c <HAL_TIM_PWM_ConfigChannel>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_TIM3_Init+0xda>
	{
		Error_Handler();
 8000af2:	f000 fa79 	bl	8000fe8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8000af6:	4803      	ldr	r0, [pc, #12]	; (8000b04 <MX_TIM3_Init+0xe8>)
 8000af8:	f000 fcf6 	bl	80014e8 <HAL_TIM_MspPostInit>

}
 8000afc:	bf00      	nop
 8000afe:	3738      	adds	r7, #56	; 0x38
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000468 	.word	0x20000468
 8000b08:	40000400 	.word	0x40000400

08000b0c <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08e      	sub	sp, #56	; 0x38
 8000b10:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b20:	f107 031c 	add.w	r3, r7, #28
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000b2c:	463b      	mov	r3, r7
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]
 8000b38:	611a      	str	r2, [r3, #16]
 8000b3a:	615a      	str	r2, [r3, #20]
 8000b3c:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8000b3e:	4b2d      	ldr	r3, [pc, #180]	; (8000bf4 <MX_TIM4_Init+0xe8>)
 8000b40:	4a2d      	ldr	r2, [pc, #180]	; (8000bf8 <MX_TIM4_Init+0xec>)
 8000b42:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 100-1;
 8000b44:	4b2b      	ldr	r3, [pc, #172]	; (8000bf4 <MX_TIM4_Init+0xe8>)
 8000b46:	2263      	movs	r2, #99	; 0x63
 8000b48:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b4a:	4b2a      	ldr	r3, [pc, #168]	; (8000bf4 <MX_TIM4_Init+0xe8>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 1250-1;
 8000b50:	4b28      	ldr	r3, [pc, #160]	; (8000bf4 <MX_TIM4_Init+0xe8>)
 8000b52:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8000b56:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b58:	4b26      	ldr	r3, [pc, #152]	; (8000bf4 <MX_TIM4_Init+0xe8>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b5e:	4b25      	ldr	r3, [pc, #148]	; (8000bf4 <MX_TIM4_Init+0xe8>)
 8000b60:	2280      	movs	r2, #128	; 0x80
 8000b62:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000b64:	4823      	ldr	r0, [pc, #140]	; (8000bf4 <MX_TIM4_Init+0xe8>)
 8000b66:	f003 fcf5 	bl	8004554 <HAL_TIM_Base_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_TIM4_Init+0x68>
	{
		Error_Handler();
 8000b70:	f000 fa3a 	bl	8000fe8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b78:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000b7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b7e:	4619      	mov	r1, r3
 8000b80:	481c      	ldr	r0, [pc, #112]	; (8000bf4 <MX_TIM4_Init+0xe8>)
 8000b82:	f004 f9ff 	bl	8004f84 <HAL_TIM_ConfigClockSource>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_TIM4_Init+0x84>
	{
		Error_Handler();
 8000b8c:	f000 fa2c 	bl	8000fe8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000b90:	4818      	ldr	r0, [pc, #96]	; (8000bf4 <MX_TIM4_Init+0xe8>)
 8000b92:	f003 fdc6 	bl	8004722 <HAL_TIM_PWM_Init>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_TIM4_Init+0x94>
	{
		Error_Handler();
 8000b9c:	f000 fa24 	bl	8000fe8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ba8:	f107 031c 	add.w	r3, r7, #28
 8000bac:	4619      	mov	r1, r3
 8000bae:	4811      	ldr	r0, [pc, #68]	; (8000bf4 <MX_TIM4_Init+0xe8>)
 8000bb0:	f004 ff0a 	bl	80059c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_TIM4_Init+0xb2>
	{
		Error_Handler();
 8000bba:	f000 fa15 	bl	8000fe8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bbe:	2360      	movs	r3, #96	; 0x60
 8000bc0:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 500;
 8000bc2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000bc6:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bd0:	463b      	mov	r3, r7
 8000bd2:	2208      	movs	r2, #8
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4807      	ldr	r0, [pc, #28]	; (8000bf4 <MX_TIM4_Init+0xe8>)
 8000bd8:	f004 f8c0 	bl	8004d5c <HAL_TIM_PWM_ConfigChannel>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_TIM4_Init+0xda>
	{
		Error_Handler();
 8000be2:	f000 fa01 	bl	8000fe8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 8000be6:	4803      	ldr	r0, [pc, #12]	; (8000bf4 <MX_TIM4_Init+0xe8>)
 8000be8:	f000 fc7e 	bl	80014e8 <HAL_TIM_MspPostInit>

}
 8000bec:	bf00      	nop
 8000bee:	3738      	adds	r7, #56	; 0x38
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	200004b4 	.word	0x200004b4
 8000bf8:	40000800 	.word	0x40000800

08000bfc <MX_TIM5_Init>:
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b088      	sub	sp, #32
 8000c00:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c02:	f107 0310 	add.w	r3, r7, #16
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
 8000c0c:	609a      	str	r2, [r3, #8]
 8000c0e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c10:	1d3b      	adds	r3, r7, #4
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8000c1a:	4b1d      	ldr	r3, [pc, #116]	; (8000c90 <MX_TIM5_Init+0x94>)
 8000c1c:	4a1d      	ldr	r2, [pc, #116]	; (8000c94 <MX_TIM5_Init+0x98>)
 8000c1e:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 100-1;
 8000c20:	4b1b      	ldr	r3, [pc, #108]	; (8000c90 <MX_TIM5_Init+0x94>)
 8000c22:	2263      	movs	r2, #99	; 0x63
 8000c24:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c26:	4b1a      	ldr	r3, [pc, #104]	; (8000c90 <MX_TIM5_Init+0x94>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 8000c2c:	4b18      	ldr	r3, [pc, #96]	; (8000c90 <MX_TIM5_Init+0x94>)
 8000c2e:	f04f 32ff 	mov.w	r2, #4294967295
 8000c32:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c34:	4b16      	ldr	r3, [pc, #88]	; (8000c90 <MX_TIM5_Init+0x94>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c3a:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <MX_TIM5_Init+0x94>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000c40:	4813      	ldr	r0, [pc, #76]	; (8000c90 <MX_TIM5_Init+0x94>)
 8000c42:	f003 fc87 	bl	8004554 <HAL_TIM_Base_Init>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_TIM5_Init+0x54>
	{
		Error_Handler();
 8000c4c:	f000 f9cc 	bl	8000fe8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c54:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000c56:	f107 0310 	add.w	r3, r7, #16
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	480c      	ldr	r0, [pc, #48]	; (8000c90 <MX_TIM5_Init+0x94>)
 8000c5e:	f004 f991 	bl	8004f84 <HAL_TIM_ConfigClockSource>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_TIM5_Init+0x70>
	{
		Error_Handler();
 8000c68:	f000 f9be 	bl	8000fe8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c70:	2300      	movs	r3, #0
 8000c72:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000c74:	1d3b      	adds	r3, r7, #4
 8000c76:	4619      	mov	r1, r3
 8000c78:	4805      	ldr	r0, [pc, #20]	; (8000c90 <MX_TIM5_Init+0x94>)
 8000c7a:	f004 fea5 	bl	80059c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_TIM5_Init+0x8c>
	{
		Error_Handler();
 8000c84:	f000 f9b0 	bl	8000fe8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8000c88:	bf00      	nop
 8000c8a:	3720      	adds	r7, #32
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20000500 	.word	0x20000500
 8000c94:	40000c00 	.word	0x40000c00

08000c98 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08c      	sub	sp, #48	; 0x30
 8000c9c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9e:	f107 031c 	add.w	r3, r7, #28
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
 8000caa:	60da      	str	r2, [r3, #12]
 8000cac:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000cae:	4b5c      	ldr	r3, [pc, #368]	; (8000e20 <MX_GPIO_Init+0x188>)
 8000cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb2:	4a5b      	ldr	r2, [pc, #364]	; (8000e20 <MX_GPIO_Init+0x188>)
 8000cb4:	f043 0310 	orr.w	r3, r3, #16
 8000cb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cba:	4b59      	ldr	r3, [pc, #356]	; (8000e20 <MX_GPIO_Init+0x188>)
 8000cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cbe:	f003 0310 	and.w	r3, r3, #16
 8000cc2:	61bb      	str	r3, [r7, #24]
 8000cc4:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000cc6:	4b56      	ldr	r3, [pc, #344]	; (8000e20 <MX_GPIO_Init+0x188>)
 8000cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cca:	4a55      	ldr	r2, [pc, #340]	; (8000e20 <MX_GPIO_Init+0x188>)
 8000ccc:	f043 0320 	orr.w	r3, r3, #32
 8000cd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cd2:	4b53      	ldr	r3, [pc, #332]	; (8000e20 <MX_GPIO_Init+0x188>)
 8000cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd6:	f003 0320 	and.w	r3, r3, #32
 8000cda:	617b      	str	r3, [r7, #20]
 8000cdc:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000cde:	4b50      	ldr	r3, [pc, #320]	; (8000e20 <MX_GPIO_Init+0x188>)
 8000ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce2:	4a4f      	ldr	r2, [pc, #316]	; (8000e20 <MX_GPIO_Init+0x188>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cea:	4b4d      	ldr	r3, [pc, #308]	; (8000e20 <MX_GPIO_Init+0x188>)
 8000cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf6:	4b4a      	ldr	r3, [pc, #296]	; (8000e20 <MX_GPIO_Init+0x188>)
 8000cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfa:	4a49      	ldr	r2, [pc, #292]	; (8000e20 <MX_GPIO_Init+0x188>)
 8000cfc:	f043 0302 	orr.w	r3, r3, #2
 8000d00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d02:	4b47      	ldr	r3, [pc, #284]	; (8000e20 <MX_GPIO_Init+0x188>)
 8000d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d06:	f003 0302 	and.w	r3, r3, #2
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000d0e:	4b44      	ldr	r3, [pc, #272]	; (8000e20 <MX_GPIO_Init+0x188>)
 8000d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d12:	4a43      	ldr	r2, [pc, #268]	; (8000e20 <MX_GPIO_Init+0x188>)
 8000d14:	f043 0308 	orr.w	r3, r3, #8
 8000d18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d1a:	4b41      	ldr	r3, [pc, #260]	; (8000e20 <MX_GPIO_Init+0x188>)
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1e:	f003 0308 	and.w	r3, r3, #8
 8000d22:	60bb      	str	r3, [r7, #8]
 8000d24:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000d26:	4b3e      	ldr	r3, [pc, #248]	; (8000e20 <MX_GPIO_Init+0x188>)
 8000d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2a:	4a3d      	ldr	r2, [pc, #244]	; (8000e20 <MX_GPIO_Init+0x188>)
 8000d2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d32:	4b3b      	ldr	r3, [pc, #236]	; (8000e20 <MX_GPIO_Init+0x188>)
 8000d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
	HAL_PWREx_EnableVddIO2();
 8000d3e:	f001 ff6b 	bl	8002c18 <HAL_PWREx_EnableVddIO2>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000d42:	4b37      	ldr	r3, [pc, #220]	; (8000e20 <MX_GPIO_Init+0x188>)
 8000d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d46:	4a36      	ldr	r2, [pc, #216]	; (8000e20 <MX_GPIO_Init+0x188>)
 8000d48:	f043 0304 	orr.w	r3, r3, #4
 8000d4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d4e:	4b34      	ldr	r3, [pc, #208]	; (8000e20 <MX_GPIO_Init+0x188>)
 8000d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d52:	f003 0304 	and.w	r3, r3, #4
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, thetaDir_Pin|yDir_Pin|rDir_Pin, GPIO_PIN_RESET);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	21e0      	movs	r1, #224	; 0xe0
 8000d5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d62:	f001 f8f3 	bl	8001f4c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, state3LED_Pin|state2LED_Pin, GPIO_PIN_RESET);
 8000d66:	2200      	movs	r2, #0
 8000d68:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000d6c:	482d      	ldr	r0, [pc, #180]	; (8000e24 <MX_GPIO_Init+0x18c>)
 8000d6e:	f001 f8ed 	bl	8001f4c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, loadCLK_Pin|tofXSHUT_Pin, GPIO_PIN_RESET);
 8000d72:	2200      	movs	r2, #0
 8000d74:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8000d78:	482b      	ldr	r0, [pc, #172]	; (8000e28 <MX_GPIO_Init+0x190>)
 8000d7a:	f001 f8e7 	bl	8001f4c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(state1LED_GPIO_Port, state1LED_Pin, GPIO_PIN_RESET);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2180      	movs	r1, #128	; 0x80
 8000d82:	482a      	ldr	r0, [pc, #168]	; (8000e2c <MX_GPIO_Init+0x194>)
 8000d84:	f001 f8e2 	bl	8001f4c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : thetaDir_Pin yDir_Pin rDir_Pin */
	GPIO_InitStruct.Pin = thetaDir_Pin|yDir_Pin|rDir_Pin;
 8000d88:	23e0      	movs	r3, #224	; 0xe0
 8000d8a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d94:	2300      	movs	r3, #0
 8000d96:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d98:	f107 031c 	add.w	r3, r7, #28
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da2:	f000 ff41 	bl	8001c28 <HAL_GPIO_Init>

	/*Configure GPIO pins : state3LED_Pin state2LED_Pin */
	GPIO_InitStruct.Pin = state3LED_Pin|state2LED_Pin;
 8000da6:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000daa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dac:	2301      	movs	r3, #1
 8000dae:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db4:	2300      	movs	r3, #0
 8000db6:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db8:	f107 031c 	add.w	r3, r7, #28
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4819      	ldr	r0, [pc, #100]	; (8000e24 <MX_GPIO_Init+0x18c>)
 8000dc0:	f000 ff32 	bl	8001c28 <HAL_GPIO_Init>

	/*Configure GPIO pins : loadCLK_Pin tofXSHUT_Pin */
	GPIO_InitStruct.Pin = loadCLK_Pin|tofXSHUT_Pin;
 8000dc4:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8000dc8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dd6:	f107 031c 	add.w	r3, r7, #28
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4812      	ldr	r0, [pc, #72]	; (8000e28 <MX_GPIO_Init+0x190>)
 8000dde:	f000 ff23 	bl	8001c28 <HAL_GPIO_Init>

	/*Configure GPIO pin : loadDATA_Pin */
	GPIO_InitStruct.Pin = loadDATA_Pin;
 8000de2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000de6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de8:	2300      	movs	r3, #0
 8000dea:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(loadDATA_GPIO_Port, &GPIO_InitStruct);
 8000df0:	f107 031c 	add.w	r3, r7, #28
 8000df4:	4619      	mov	r1, r3
 8000df6:	480c      	ldr	r0, [pc, #48]	; (8000e28 <MX_GPIO_Init+0x190>)
 8000df8:	f000 ff16 	bl	8001c28 <HAL_GPIO_Init>

	/*Configure GPIO pin : state1LED_Pin */
	GPIO_InitStruct.Pin = state1LED_Pin;
 8000dfc:	2380      	movs	r3, #128	; 0x80
 8000dfe:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e00:	2301      	movs	r3, #1
 8000e02:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(state1LED_GPIO_Port, &GPIO_InitStruct);
 8000e0c:	f107 031c 	add.w	r3, r7, #28
 8000e10:	4619      	mov	r1, r3
 8000e12:	4806      	ldr	r0, [pc, #24]	; (8000e2c <MX_GPIO_Init+0x194>)
 8000e14:	f000 ff08 	bl	8001c28 <HAL_GPIO_Init>

}
 8000e18:	bf00      	nop
 8000e1a:	3730      	adds	r7, #48	; 0x30
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40021000 	.word	0x40021000
 8000e24:	48000400 	.word	0x48000400
 8000e28:	48000c00 	.word	0x48000c00
 8000e2c:	48000800 	.word	0x48000800

08000e30 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void  HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim){
 8000e30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000e34:	b088      	sub	sp, #32
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	61f8      	str	r0, [r7, #28]
	//Theta Motor interrupts
	if(htim == &htim3){
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	4a5c      	ldr	r2, [pc, #368]	; (8000fb0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d13b      	bne.n	8000eba <HAL_TIM_PeriodElapsedCallback+0x8a>
		if(thetaMotor.Status == RunningForward){
 8000e42:	4b5c      	ldr	r3, [pc, #368]	; (8000fb4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000e44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d10d      	bne.n	8000e6a <HAL_TIM_PeriodElapsedCallback+0x3a>
			thetaMotor.CurrentPosition++;
 8000e4e:	4b59      	ldr	r3, [pc, #356]	; (8000fb4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000e50:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000e54:	1c51      	adds	r1, r2, #1
 8000e56:	6139      	str	r1, [r7, #16]
 8000e58:	f143 0300 	adc.w	r3, r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]
 8000e5e:	4b55      	ldr	r3, [pc, #340]	; (8000fb4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000e60:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000e64:	e9c3 1206 	strd	r1, r2, [r3, #24]
 8000e68:	e012      	b.n	8000e90 <HAL_TIM_PeriodElapsedCallback+0x60>
		}
		else if (thetaMotor.Status == RunningBackward){
 8000e6a:	4b52      	ldr	r3, [pc, #328]	; (8000fb4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000e6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d10c      	bne.n	8000e90 <HAL_TIM_PeriodElapsedCallback+0x60>
			thetaMotor.CurrentPosition--;
 8000e76:	4b4f      	ldr	r3, [pc, #316]	; (8000fb4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000e78:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000e7c:	1e51      	subs	r1, r2, #1
 8000e7e:	60b9      	str	r1, [r7, #8]
 8000e80:	f143 33ff 	adc.w	r3, r3, #4294967295
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	4b4b      	ldr	r3, [pc, #300]	; (8000fb4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000e88:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8000e8c:	e9c3 1206 	strd	r1, r2, [r3, #24]
		}
		if(thetaMotor.CurrentPosition == thetaMotor.TargetPosition){
 8000e90:	4b48      	ldr	r3, [pc, #288]	; (8000fb4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000e92:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8000e96:	4b47      	ldr	r3, [pc, #284]	; (8000fb4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000e98:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000e9c:	4299      	cmp	r1, r3
 8000e9e:	bf08      	it	eq
 8000ea0:	4290      	cmpeq	r0, r2
 8000ea2:	d10a      	bne.n	8000eba <HAL_TIM_PeriodElapsedCallback+0x8a>
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4842      	ldr	r0, [pc, #264]	; (8000fb0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000ea8:	f003 fda2 	bl	80049f0 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop(&htim3);
 8000eac:	4840      	ldr	r0, [pc, #256]	; (8000fb0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000eae:	f003 fc11 	bl	80046d4 <HAL_TIM_Base_Stop>
			thetaMotor.Status = Stopped;
 8000eb2:	4b40      	ldr	r3, [pc, #256]	; (8000fb4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
	}
	//yMotor Interrupts
	if(htim == &htim2){
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	4a3e      	ldr	r2, [pc, #248]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d138      	bne.n	8000f34 <HAL_TIM_PeriodElapsedCallback+0x104>
		if(yMotor.Status == RunningForward){
 8000ec2:	4b3e      	ldr	r3, [pc, #248]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000ec4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d10d      	bne.n	8000eea <HAL_TIM_PeriodElapsedCallback+0xba>
			yMotor.CurrentPosition++;
 8000ece:	4b3b      	ldr	r3, [pc, #236]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000ed0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000ed4:	1c51      	adds	r1, r2, #1
 8000ed6:	6039      	str	r1, [r7, #0]
 8000ed8:	f143 0300 	adc.w	r3, r3, #0
 8000edc:	607b      	str	r3, [r7, #4]
 8000ede:	4b37      	ldr	r3, [pc, #220]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000ee0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000ee4:	e9c3 1206 	strd	r1, r2, [r3, #24]
 8000ee8:	e00f      	b.n	8000f0a <HAL_TIM_PeriodElapsedCallback+0xda>
		}
		else if (yMotor.Status == RunningBackward){
 8000eea:	4b34      	ldr	r3, [pc, #208]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000eec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	2b02      	cmp	r3, #2
 8000ef4:	d109      	bne.n	8000f0a <HAL_TIM_PeriodElapsedCallback+0xda>
			yMotor.CurrentPosition--;
 8000ef6:	4b31      	ldr	r3, [pc, #196]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000ef8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000efc:	f112 3aff 	adds.w	sl, r2, #4294967295
 8000f00:	f143 3bff 	adc.w	fp, r3, #4294967295
 8000f04:	4b2d      	ldr	r3, [pc, #180]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000f06:	e9c3 ab06 	strd	sl, fp, [r3, #24]
		}
		if(yMotor.CurrentPosition == yMotor.TargetPosition){
 8000f0a:	4b2c      	ldr	r3, [pc, #176]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000f0c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8000f10:	4b2a      	ldr	r3, [pc, #168]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000f12:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000f16:	4299      	cmp	r1, r3
 8000f18:	bf08      	it	eq
 8000f1a:	4290      	cmpeq	r0, r2
 8000f1c:	d10a      	bne.n	8000f34 <HAL_TIM_PeriodElapsedCallback+0x104>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4825      	ldr	r0, [pc, #148]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000f22:	f003 fd65 	bl	80049f0 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop(&htim2);
 8000f26:	4824      	ldr	r0, [pc, #144]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000f28:	f003 fbd4 	bl	80046d4 <HAL_TIM_Base_Stop>
			yMotor.Status = Stopped;
 8000f2c:	4b23      	ldr	r3, [pc, #140]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000f2e:	2203      	movs	r2, #3
 8000f30:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
	}
	//rMotor Interrupts
	if(htim == &htim4){
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	4a22      	ldr	r2, [pc, #136]	; (8000fc0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d134      	bne.n	8000fa6 <HAL_TIM_PeriodElapsedCallback+0x176>
		if(rMotor.Status == RunningForward){
 8000f3c:	4b21      	ldr	r3, [pc, #132]	; (8000fc4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000f3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d10a      	bne.n	8000f5e <HAL_TIM_PeriodElapsedCallback+0x12e>
			rMotor.CurrentPosition++;
 8000f48:	4b1e      	ldr	r3, [pc, #120]	; (8000fc4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000f4a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000f4e:	f112 0801 	adds.w	r8, r2, #1
 8000f52:	f143 0900 	adc.w	r9, r3, #0
 8000f56:	4b1b      	ldr	r3, [pc, #108]	; (8000fc4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000f58:	e9c3 8906 	strd	r8, r9, [r3, #24]
 8000f5c:	e00e      	b.n	8000f7c <HAL_TIM_PeriodElapsedCallback+0x14c>
		}
		else if (rMotor.Status == RunningBackward){
 8000f5e:	4b19      	ldr	r3, [pc, #100]	; (8000fc4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000f60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d108      	bne.n	8000f7c <HAL_TIM_PeriodElapsedCallback+0x14c>
			rMotor.CurrentPosition--;
 8000f6a:	4b16      	ldr	r3, [pc, #88]	; (8000fc4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000f6c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000f70:	1e54      	subs	r4, r2, #1
 8000f72:	f143 35ff 	adc.w	r5, r3, #4294967295
 8000f76:	4b13      	ldr	r3, [pc, #76]	; (8000fc4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000f78:	e9c3 4506 	strd	r4, r5, [r3, #24]
		}
		if(rMotor.CurrentPosition == rMotor.TargetPosition){
 8000f7c:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000f7e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8000f82:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000f84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	bf08      	it	eq
 8000f8c:	4290      	cmpeq	r0, r2
 8000f8e:	d10a      	bne.n	8000fa6 <HAL_TIM_PeriodElapsedCallback+0x176>
			HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 8000f90:	2108      	movs	r1, #8
 8000f92:	480b      	ldr	r0, [pc, #44]	; (8000fc0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000f94:	f003 fd2c 	bl	80049f0 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop(&htim4);
 8000f98:	4809      	ldr	r0, [pc, #36]	; (8000fc0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000f9a:	f003 fb9b 	bl	80046d4 <HAL_TIM_Base_Stop>
			rMotor.Status = Stopped;
 8000f9e:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
	}
}
 8000fa6:	bf00      	nop
 8000fa8:	3720      	adds	r7, #32
 8000faa:	46bd      	mov	sp, r7
 8000fac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000fb0:	20000468 	.word	0x20000468
 8000fb4:	20000550 	.word	0x20000550
 8000fb8:	2000041c 	.word	0x2000041c
 8000fbc:	20000580 	.word	0x20000580
 8000fc0:	200004b4 	.word	0x200004b4
 8000fc4:	200005b0 	.word	0x200005b0

08000fc8 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
	//set flag
	uartRecievedFlag = 1;
 8000fd0:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <HAL_UART_RxCpltCallback+0x1c>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	701a      	strb	r2, [r3, #0]
}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	20000784 	.word	0x20000784

08000fe8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fec:	b672      	cpsid	i
}
 8000fee:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <Error_Handler+0x8>
	...

08000ff4 <InitSerialFromPC>:
uint8_t newLine = '\n';
uint8_t carriageReturn = '\r';

UART_HandleTypeDef* huart;

void InitSerialFromPC(UART_HandleTypeDef* huartHandler, uint8_t* rxBuffer){
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
	huart = huartHandler;
 8000ffe:	4a06      	ldr	r2, [pc, #24]	; (8001018 <InitSerialFromPC+0x24>)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6013      	str	r3, [r2, #0]
	//allocate for buffer
	//usartInputBuffer = (uint8_t*)calloc(INPUT_BUFFER_SIZE,sizeof(uint8_t));
	usartOutputBuffer = rxBuffer;
 8001004:	4a05      	ldr	r2, [pc, #20]	; (800101c <InitSerialFromPC+0x28>)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	6013      	str	r3, [r2, #0]
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	2000078c 	.word	0x2000078c
 800101c:	20000788 	.word	0x20000788

08001020 <initStepper>:
#include "stepperControl.h"

void initStepper(stepper * stepper, TIM_HandleTypeDef * tim, uint32_t  channel, GPIO_TypeDef * dirPort, uint16_t dirPin, uint32_t speed){
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
 800102c:	603b      	str	r3, [r7, #0]

	//Initialize values
	stepper->Timer = tim;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	68ba      	ldr	r2, [r7, #8]
 8001032:	601a      	str	r2, [r3, #0]
	stepper->Channel = channel;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	605a      	str	r2, [r3, #4]
	stepper->DIRPort = dirPort;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	683a      	ldr	r2, [r7, #0]
 800103e:	609a      	str	r2, [r3, #8]
	stepper->DIRPin = dirPin;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	8b3a      	ldrh	r2, [r7, #24]
 8001044:	819a      	strh	r2, [r3, #12]
	stepper->PPS = speed;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	69fa      	ldr	r2, [r7, #28]
 800104a:	611a      	str	r2, [r3, #16]
	stepper->CurrentPosition = 0;
 800104c:	68f9      	ldr	r1, [r7, #12]
 800104e:	f04f 0200 	mov.w	r2, #0
 8001052:	f04f 0300 	mov.w	r3, #0
 8001056:	e9c1 2306 	strd	r2, r3, [r1, #24]
	stepper->TargetPosition =0;
 800105a:	68f9      	ldr	r1, [r7, #12]
 800105c:	f04f 0200 	mov.w	r2, #0
 8001060:	f04f 0300 	mov.w	r3, #0
 8001064:	e9c1 2308 	strd	r2, r3, [r1, #32]
	//Set status
	stepper->Status = Stopped;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	2203      	movs	r2, #3
 800106c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	//update timer to align with speed
	setSpeed(stepper, stepper->PPS);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	691b      	ldr	r3, [r3, #16]
 8001074:	4619      	mov	r1, r3
 8001076:	68f8      	ldr	r0, [r7, #12]
 8001078:	f000 f84a 	bl	8001110 <setSpeed>
	//return stepper structure pointer
}
 800107c:	bf00      	nop
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <setTarget>:


void setTarget (stepper * stepper, uint64_t increment, char forward){
 8001084:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001088:	b084      	sub	sp, #16
 800108a:	af00      	add	r7, sp, #0
 800108c:	60f8      	str	r0, [r7, #12]
 800108e:	e9c7 2300 	strd	r2, r3, [r7]
	//if positive move forward and add to current position
	if(forward){
 8001092:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001096:	2b00      	cmp	r3, #0
 8001098:	d00c      	beq.n	80010b4 <setTarget+0x30>
		stepper->TargetPosition+= increment;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80010a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010a4:	eb10 0802 	adds.w	r8, r0, r2
 80010a8:	eb41 0903 	adc.w	r9, r1, r3
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	e9c3 8908 	strd	r8, r9, [r3, #32]
 80010b2:	e00a      	b.n	80010ca <setTarget+0x46>
	}
	//if negative move backward and take away from current position
	else{
		stepper->TargetPosition-= increment;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80010ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010be:	1a84      	subs	r4, r0, r2
 80010c0:	eb61 0503 	sbc.w	r5, r1, r3
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	e9c3 4508 	strd	r4, r5, [r3, #32]
	}
	//TargetPosition can't be negative
	if(stepper->TargetPosition<0){
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
		stepper->TargetPosition=0;
	}
	//Start timer if it needs to be started
	if (stepper->Status == Stopped && stepper->TargetPosition != stepper->CurrentPosition){
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	2b03      	cmp	r3, #3
 80010da:	d111      	bne.n	8001100 <setTarget+0x7c>
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80010e8:	4299      	cmp	r1, r3
 80010ea:	bf08      	it	eq
 80010ec:	4290      	cmpeq	r0, r2
 80010ee:	d007      	beq.n	8001100 <setTarget+0x7c>
		//start pulses on timer
		HAL_TIM_PWM_Start(stepper->Timer, stepper->Channel);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	4619      	mov	r1, r3
 80010fa:	4610      	mov	r0, r2
 80010fc:	f003 fb72 	bl	80047e4 <HAL_TIM_PWM_Start>
	}
	//Set Direction
	setDirection(stepper);
 8001100:	68f8      	ldr	r0, [r7, #12]
 8001102:	f000 f827 	bl	8001154 <setDirection>
}
 8001106:	bf00      	nop
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001110 <setSpeed>:

void setSpeed (stepper * stepper, uint32_t speed){
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
	//update pulse rate of stepper
	stepper->PPS = speed;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	683a      	ldr	r2, [r7, #0]
 800111e:	611a      	str	r2, [r3, #16]
	//set duty cycle
	stepper->Timer->Instance->CCR1=1000000/(2*speed);
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	005a      	lsls	r2, r3, #1
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4909      	ldr	r1, [pc, #36]	; (8001150 <setSpeed+0x40>)
 800112c:	fbb1 f2f2 	udiv	r2, r1, r2
 8001130:	635a      	str	r2, [r3, #52]	; 0x34
	//set timer period
	stepper->Timer->Instance->ARR=(1000000/speed)-1;
 8001132:	4a07      	ldr	r2, [pc, #28]	; (8001150 <setSpeed+0x40>)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	fbb2 f2f3 	udiv	r2, r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	3a01      	subs	r2, #1
 8001142:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001144:	bf00      	nop
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	000f4240 	.word	0x000f4240

08001154 <setDirection>:

//set direction
void setDirection(stepper *stepper){
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
	if(stepper->CurrentPosition > stepper->TargetPosition){
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	e9d1 0108 	ldrd	r0, r1, [r1, #32]
 8001168:	4290      	cmp	r0, r2
 800116a:	eb71 0303 	sbcs.w	r3, r1, r3
 800116e:	d20c      	bcs.n	800118a <setDirection+0x36>
		HAL_GPIO_WritePin(stepper->DIRPort, stepper->DIRPin, SET);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6898      	ldr	r0, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	899b      	ldrh	r3, [r3, #12]
 8001178:	2201      	movs	r2, #1
 800117a:	4619      	mov	r1, r3
 800117c:	f000 fee6 	bl	8001f4c <HAL_GPIO_WritePin>
		stepper->Status = RunningBackward;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2202      	movs	r2, #2
 8001184:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	}
	else if(stepper->CurrentPosition < stepper->TargetPosition){
		HAL_GPIO_WritePin(stepper->DIRPort, stepper->DIRPin, RESET);
		stepper->Status = RunningForward;
	}
}
 8001188:	e015      	b.n	80011b6 <setDirection+0x62>
	else if(stepper->CurrentPosition < stepper->TargetPosition){
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001196:	4290      	cmp	r0, r2
 8001198:	eb71 0303 	sbcs.w	r3, r1, r3
 800119c:	d20b      	bcs.n	80011b6 <setDirection+0x62>
		HAL_GPIO_WritePin(stepper->DIRPort, stepper->DIRPin, RESET);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6898      	ldr	r0, [r3, #8]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	899b      	ldrh	r3, [r3, #12]
 80011a6:	2200      	movs	r2, #0
 80011a8:	4619      	mov	r1, r3
 80011aa:	f000 fecf 	bl	8001f4c <HAL_GPIO_WritePin>
		stepper->Status = RunningForward;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2201      	movs	r2, #1
 80011b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <stopStepper>:

void stopStepper(stepper *stepper){
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(stepper->Timer, stepper->Channel);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	4619      	mov	r1, r3
 80011d0:	4610      	mov	r0, r2
 80011d2:	f003 fc0d 	bl	80049f0 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop(stepper->Timer);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4618      	mov	r0, r3
 80011dc:	f003 fa7a 	bl	80046d4 <HAL_TIM_Base_Stop>
	stepper->Status = Stopped;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2203      	movs	r2, #3
 80011e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	stepper->TargetPosition = stepper->CurrentPosition;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80011ee:	6879      	ldr	r1, [r7, #4]
 80011f0:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001202:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <HAL_MspInit+0x44>)
 8001204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001206:	4a0e      	ldr	r2, [pc, #56]	; (8001240 <HAL_MspInit+0x44>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	6613      	str	r3, [r2, #96]	; 0x60
 800120e:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <HAL_MspInit+0x44>)
 8001210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800121a:	4b09      	ldr	r3, [pc, #36]	; (8001240 <HAL_MspInit+0x44>)
 800121c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800121e:	4a08      	ldr	r2, [pc, #32]	; (8001240 <HAL_MspInit+0x44>)
 8001220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001224:	6593      	str	r3, [r2, #88]	; 0x58
 8001226:	4b06      	ldr	r3, [pc, #24]	; (8001240 <HAL_MspInit+0x44>)
 8001228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800122a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122e:	603b      	str	r3, [r7, #0]
 8001230:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	40021000 	.word	0x40021000

08001244 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b0b0      	sub	sp, #192	; 0xc0
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	2298      	movs	r2, #152	; 0x98
 8001262:	2100      	movs	r1, #0
 8001264:	4618      	mov	r0, r3
 8001266:	f00b fc65 	bl	800cb34 <memset>
  if(hi2c->Instance==I2C2)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a21      	ldr	r2, [pc, #132]	; (80012f4 <HAL_I2C_MspInit+0xb0>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d13a      	bne.n	80012ea <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001274:	2380      	movs	r3, #128	; 0x80
 8001276:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001278:	2300      	movs	r3, #0
 800127a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	4618      	mov	r0, r3
 8001282:	f002 fc13 	bl	8003aac <HAL_RCCEx_PeriphCLKConfig>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800128c:	f7ff feac 	bl	8000fe8 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001290:	4b19      	ldr	r3, [pc, #100]	; (80012f8 <HAL_I2C_MspInit+0xb4>)
 8001292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001294:	4a18      	ldr	r2, [pc, #96]	; (80012f8 <HAL_I2C_MspInit+0xb4>)
 8001296:	f043 0320 	orr.w	r3, r3, #32
 800129a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800129c:	4b16      	ldr	r3, [pc, #88]	; (80012f8 <HAL_I2C_MspInit+0xb4>)
 800129e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a0:	f003 0320 	and.w	r3, r3, #32
 80012a4:	613b      	str	r3, [r7, #16]
 80012a6:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012a8:	2303      	movs	r3, #3
 80012aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ae:	2312      	movs	r3, #18
 80012b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ba:	2303      	movs	r3, #3
 80012bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80012c0:	2304      	movs	r3, #4
 80012c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012c6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80012ca:	4619      	mov	r1, r3
 80012cc:	480b      	ldr	r0, [pc, #44]	; (80012fc <HAL_I2C_MspInit+0xb8>)
 80012ce:	f000 fcab 	bl	8001c28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80012d2:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <HAL_I2C_MspInit+0xb4>)
 80012d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d6:	4a08      	ldr	r2, [pc, #32]	; (80012f8 <HAL_I2C_MspInit+0xb4>)
 80012d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012dc:	6593      	str	r3, [r2, #88]	; 0x58
 80012de:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <HAL_I2C_MspInit+0xb4>)
 80012e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80012ea:	bf00      	nop
 80012ec:	37c0      	adds	r7, #192	; 0xc0
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40005800 	.word	0x40005800
 80012f8:	40021000 	.word	0x40021000
 80012fc:	48001400 	.word	0x48001400

08001300 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b0b0      	sub	sp, #192	; 0xc0
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001308:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	2298      	movs	r2, #152	; 0x98
 800131e:	2100      	movs	r1, #0
 8001320:	4618      	mov	r0, r3
 8001322:	f00b fc07 	bl	800cb34 <memset>
  if(huart->Instance==LPUART1)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a26      	ldr	r2, [pc, #152]	; (80013c4 <HAL_UART_MspInit+0xc4>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d145      	bne.n	80013bc <HAL_UART_MspInit+0xbc>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001330:	2320      	movs	r3, #32
 8001332:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001334:	2300      	movs	r3, #0
 8001336:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	4618      	mov	r0, r3
 800133e:	f002 fbb5 	bl	8003aac <HAL_RCCEx_PeriphCLKConfig>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001348:	f7ff fe4e 	bl	8000fe8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800134c:	4b1e      	ldr	r3, [pc, #120]	; (80013c8 <HAL_UART_MspInit+0xc8>)
 800134e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001350:	4a1d      	ldr	r2, [pc, #116]	; (80013c8 <HAL_UART_MspInit+0xc8>)
 8001352:	f043 0301 	orr.w	r3, r3, #1
 8001356:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001358:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <HAL_UART_MspInit+0xc8>)
 800135a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	613b      	str	r3, [r7, #16]
 8001362:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001364:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <HAL_UART_MspInit+0xc8>)
 8001366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001368:	4a17      	ldr	r2, [pc, #92]	; (80013c8 <HAL_UART_MspInit+0xc8>)
 800136a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800136e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001370:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <HAL_UART_MspInit+0xc8>)
 8001372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 800137c:	f001 fc4c 	bl	8002c18 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001380:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001384:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001388:	2302      	movs	r3, #2
 800138a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001394:	2303      	movs	r3, #3
 8001396:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800139a:	2308      	movs	r3, #8
 800139c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013a0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80013a4:	4619      	mov	r1, r3
 80013a6:	4809      	ldr	r0, [pc, #36]	; (80013cc <HAL_UART_MspInit+0xcc>)
 80013a8:	f000 fc3e 	bl	8001c28 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80013ac:	2200      	movs	r2, #0
 80013ae:	2100      	movs	r1, #0
 80013b0:	2046      	movs	r0, #70	; 0x46
 80013b2:	f000 fb48 	bl	8001a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80013b6:	2046      	movs	r0, #70	; 0x46
 80013b8:	f000 fb61 	bl	8001a7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80013bc:	bf00      	nop
 80013be:	37c0      	adds	r7, #192	; 0xc0
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40008000 	.word	0x40008000
 80013c8:	40021000 	.word	0x40021000
 80013cc:	48001800 	.word	0x48001800

080013d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b088      	sub	sp, #32
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a3d      	ldr	r2, [pc, #244]	; (80014d4 <HAL_TIM_Base_MspInit+0x104>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d114      	bne.n	800140c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013e2:	4b3d      	ldr	r3, [pc, #244]	; (80014d8 <HAL_TIM_Base_MspInit+0x108>)
 80013e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013e6:	4a3c      	ldr	r2, [pc, #240]	; (80014d8 <HAL_TIM_Base_MspInit+0x108>)
 80013e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013ec:	6613      	str	r3, [r2, #96]	; 0x60
 80013ee:	4b3a      	ldr	r3, [pc, #232]	; (80014d8 <HAL_TIM_Base_MspInit+0x108>)
 80013f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013f6:	61fb      	str	r3, [r7, #28]
 80013f8:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2100      	movs	r1, #0
 80013fe:	2018      	movs	r0, #24
 8001400:	f000 fb21 	bl	8001a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001404:	2018      	movs	r0, #24
 8001406:	f000 fb3a 	bl	8001a7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800140a:	e05e      	b.n	80014ca <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM2)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001414:	d114      	bne.n	8001440 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001416:	4b30      	ldr	r3, [pc, #192]	; (80014d8 <HAL_TIM_Base_MspInit+0x108>)
 8001418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800141a:	4a2f      	ldr	r2, [pc, #188]	; (80014d8 <HAL_TIM_Base_MspInit+0x108>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	6593      	str	r3, [r2, #88]	; 0x58
 8001422:	4b2d      	ldr	r3, [pc, #180]	; (80014d8 <HAL_TIM_Base_MspInit+0x108>)
 8001424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	61bb      	str	r3, [r7, #24]
 800142c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800142e:	2200      	movs	r2, #0
 8001430:	2100      	movs	r1, #0
 8001432:	201c      	movs	r0, #28
 8001434:	f000 fb07 	bl	8001a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001438:	201c      	movs	r0, #28
 800143a:	f000 fb20 	bl	8001a7e <HAL_NVIC_EnableIRQ>
}
 800143e:	e044      	b.n	80014ca <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM3)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a25      	ldr	r2, [pc, #148]	; (80014dc <HAL_TIM_Base_MspInit+0x10c>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d114      	bne.n	8001474 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800144a:	4b23      	ldr	r3, [pc, #140]	; (80014d8 <HAL_TIM_Base_MspInit+0x108>)
 800144c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800144e:	4a22      	ldr	r2, [pc, #136]	; (80014d8 <HAL_TIM_Base_MspInit+0x108>)
 8001450:	f043 0302 	orr.w	r3, r3, #2
 8001454:	6593      	str	r3, [r2, #88]	; 0x58
 8001456:	4b20      	ldr	r3, [pc, #128]	; (80014d8 <HAL_TIM_Base_MspInit+0x108>)
 8001458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	617b      	str	r3, [r7, #20]
 8001460:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	2100      	movs	r1, #0
 8001466:	201d      	movs	r0, #29
 8001468:	f000 faed 	bl	8001a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800146c:	201d      	movs	r0, #29
 800146e:	f000 fb06 	bl	8001a7e <HAL_NVIC_EnableIRQ>
}
 8001472:	e02a      	b.n	80014ca <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM4)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a19      	ldr	r2, [pc, #100]	; (80014e0 <HAL_TIM_Base_MspInit+0x110>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d114      	bne.n	80014a8 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800147e:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <HAL_TIM_Base_MspInit+0x108>)
 8001480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001482:	4a15      	ldr	r2, [pc, #84]	; (80014d8 <HAL_TIM_Base_MspInit+0x108>)
 8001484:	f043 0304 	orr.w	r3, r3, #4
 8001488:	6593      	str	r3, [r2, #88]	; 0x58
 800148a:	4b13      	ldr	r3, [pc, #76]	; (80014d8 <HAL_TIM_Base_MspInit+0x108>)
 800148c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800148e:	f003 0304 	and.w	r3, r3, #4
 8001492:	613b      	str	r3, [r7, #16]
 8001494:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001496:	2200      	movs	r2, #0
 8001498:	2100      	movs	r1, #0
 800149a:	201e      	movs	r0, #30
 800149c:	f000 fad3 	bl	8001a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80014a0:	201e      	movs	r0, #30
 80014a2:	f000 faec 	bl	8001a7e <HAL_NVIC_EnableIRQ>
}
 80014a6:	e010      	b.n	80014ca <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM5)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a0d      	ldr	r2, [pc, #52]	; (80014e4 <HAL_TIM_Base_MspInit+0x114>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d10b      	bne.n	80014ca <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80014b2:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <HAL_TIM_Base_MspInit+0x108>)
 80014b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b6:	4a08      	ldr	r2, [pc, #32]	; (80014d8 <HAL_TIM_Base_MspInit+0x108>)
 80014b8:	f043 0308 	orr.w	r3, r3, #8
 80014bc:	6593      	str	r3, [r2, #88]	; 0x58
 80014be:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <HAL_TIM_Base_MspInit+0x108>)
 80014c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c2:	f003 0308 	and.w	r3, r3, #8
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]
}
 80014ca:	bf00      	nop
 80014cc:	3720      	adds	r7, #32
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40012c00 	.word	0x40012c00
 80014d8:	40021000 	.word	0x40021000
 80014dc:	40000400 	.word	0x40000400
 80014e0:	40000800 	.word	0x40000800
 80014e4:	40000c00 	.word	0x40000c00

080014e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08a      	sub	sp, #40	; 0x28
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001508:	d11d      	bne.n	8001546 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800150a:	4b33      	ldr	r3, [pc, #204]	; (80015d8 <HAL_TIM_MspPostInit+0xf0>)
 800150c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150e:	4a32      	ldr	r2, [pc, #200]	; (80015d8 <HAL_TIM_MspPostInit+0xf0>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001516:	4b30      	ldr	r3, [pc, #192]	; (80015d8 <HAL_TIM_MspPostInit+0xf0>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	613b      	str	r3, [r7, #16]
 8001520:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001522:	2301      	movs	r3, #1
 8001524:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001526:	2302      	movs	r3, #2
 8001528:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152e:	2300      	movs	r3, #0
 8001530:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001532:	2301      	movs	r3, #1
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001536:	f107 0314 	add.w	r3, r7, #20
 800153a:	4619      	mov	r1, r3
 800153c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001540:	f000 fb72 	bl	8001c28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001544:	e043      	b.n	80015ce <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM3)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a24      	ldr	r2, [pc, #144]	; (80015dc <HAL_TIM_MspPostInit+0xf4>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d11c      	bne.n	800158a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001550:	4b21      	ldr	r3, [pc, #132]	; (80015d8 <HAL_TIM_MspPostInit+0xf0>)
 8001552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001554:	4a20      	ldr	r2, [pc, #128]	; (80015d8 <HAL_TIM_MspPostInit+0xf0>)
 8001556:	f043 0310 	orr.w	r3, r3, #16
 800155a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800155c:	4b1e      	ldr	r3, [pc, #120]	; (80015d8 <HAL_TIM_MspPostInit+0xf0>)
 800155e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001560:	f003 0310 	and.w	r3, r3, #16
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001568:	2308      	movs	r3, #8
 800156a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156c:	2302      	movs	r3, #2
 800156e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001574:	2300      	movs	r3, #0
 8001576:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001578:	2302      	movs	r3, #2
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	4619      	mov	r1, r3
 8001582:	4817      	ldr	r0, [pc, #92]	; (80015e0 <HAL_TIM_MspPostInit+0xf8>)
 8001584:	f000 fb50 	bl	8001c28 <HAL_GPIO_Init>
}
 8001588:	e021      	b.n	80015ce <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM4)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a15      	ldr	r2, [pc, #84]	; (80015e4 <HAL_TIM_MspPostInit+0xfc>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d11c      	bne.n	80015ce <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001594:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <HAL_TIM_MspPostInit+0xf0>)
 8001596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001598:	4a0f      	ldr	r2, [pc, #60]	; (80015d8 <HAL_TIM_MspPostInit+0xf0>)
 800159a:	f043 0308 	orr.w	r3, r3, #8
 800159e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015a0:	4b0d      	ldr	r3, [pc, #52]	; (80015d8 <HAL_TIM_MspPostInit+0xf0>)
 80015a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a4:	f003 0308 	and.w	r3, r3, #8
 80015a8:	60bb      	str	r3, [r7, #8]
 80015aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80015ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b2:	2302      	movs	r3, #2
 80015b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ba:	2300      	movs	r3, #0
 80015bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80015be:	2302      	movs	r3, #2
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015c2:	f107 0314 	add.w	r3, r7, #20
 80015c6:	4619      	mov	r1, r3
 80015c8:	4807      	ldr	r0, [pc, #28]	; (80015e8 <HAL_TIM_MspPostInit+0x100>)
 80015ca:	f000 fb2d 	bl	8001c28 <HAL_GPIO_Init>
}
 80015ce:	bf00      	nop
 80015d0:	3728      	adds	r7, #40	; 0x28
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40021000 	.word	0x40021000
 80015dc:	40000400 	.word	0x40000400
 80015e0:	48001000 	.word	0x48001000
 80015e4:	40000800 	.word	0x40000800
 80015e8:	48000c00 	.word	0x48000c00

080015ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <NMI_Handler+0x4>

080015f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015f6:	e7fe      	b.n	80015f6 <HardFault_Handler+0x4>

080015f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015fc:	e7fe      	b.n	80015fc <MemManage_Handler+0x4>

080015fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001602:	e7fe      	b.n	8001602 <BusFault_Handler+0x4>

08001604 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001608:	e7fe      	b.n	8001608 <UsageFault_Handler+0x4>

0800160a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001638:	f000 f8e6 	bl	8001808 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800163c:	bf00      	nop
 800163e:	bd80      	pop	{r7, pc}

08001640 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001644:	4802      	ldr	r0, [pc, #8]	; (8001650 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8001646:	f003 fa69 	bl	8004b1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	200003d0 	.word	0x200003d0

08001654 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001658:	4802      	ldr	r0, [pc, #8]	; (8001664 <TIM2_IRQHandler+0x10>)
 800165a:	f003 fa5f 	bl	8004b1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	2000041c 	.word	0x2000041c

08001668 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800166c:	4802      	ldr	r0, [pc, #8]	; (8001678 <TIM3_IRQHandler+0x10>)
 800166e:	f003 fa55 	bl	8004b1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000468 	.word	0x20000468

0800167c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001680:	4802      	ldr	r0, [pc, #8]	; (800168c <TIM4_IRQHandler+0x10>)
 8001682:	f003 fa4b 	bl	8004b1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	200004b4 	.word	0x200004b4

08001690 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001694:	4802      	ldr	r0, [pc, #8]	; (80016a0 <LPUART1_IRQHandler+0x10>)
 8001696:	f004 fae3 	bl	8005c60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20000340 	.word	0x20000340

080016a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016a8:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <SystemInit+0x20>)
 80016aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ae:	4a05      	ldr	r2, [pc, #20]	; (80016c4 <SystemInit+0x20>)
 80016b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <GoHome>:
 *      Author: kylei
 */

#include "zeroing.h"

void GoHome(stepper* motor){
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af02      	add	r7, sp, #8
 80016ce:	6078      	str	r0, [r7, #4]
	//stop any current motion
	stopStepper(motor);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff fd74 	bl	80011be <stopStepper>
	//make stepper think its far from zero
	motor->CurrentPosition = 0xFFFF;
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016dc:	f04f 0300 	mov.w	r3, #0
 80016e0:	e9c1 2306 	strd	r2, r3, [r1, #24]
	motor->TargetPosition = 0xFFFF;
 80016e4:	6879      	ldr	r1, [r7, #4]
 80016e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016ea:	f04f 0300 	mov.w	r3, #0
 80016ee:	e9c1 2308 	strd	r2, r3, [r1, #32]
	/*make motor go backward "forever"
	Note: make sure there is some mechanism in main()
	to stop otherwise this will go until it breaks something*/
	setTarget(motor, 0xFFFE,0);
 80016f2:	2300      	movs	r3, #0
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80016fa:	f04f 0300 	mov.w	r3, #0
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7ff fcc0 	bl	8001084 <setTarget>
}
 8001704:	bf00      	nop
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <Reset_Handler>:
    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

  ldr   sp, =_estack    /* Set stack pointer */
 800170c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001744 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001710:	f7ff ffc8 	bl	80016a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001714:	480c      	ldr	r0, [pc, #48]	; (8001748 <LoopForever+0x6>)
  ldr r1, =_edata
 8001716:	490d      	ldr	r1, [pc, #52]	; (800174c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001718:	4a0d      	ldr	r2, [pc, #52]	; (8001750 <LoopForever+0xe>)
  movs r3, #0
 800171a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800171c:	e002      	b.n	8001724 <LoopCopyDataInit>

0800171e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800171e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001720:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001722:	3304      	adds	r3, #4

08001724 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001724:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001726:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001728:	d3f9      	bcc.n	800171e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800172a:	4a0a      	ldr	r2, [pc, #40]	; (8001754 <LoopForever+0x12>)
  ldr r4, =_ebss
 800172c:	4c0a      	ldr	r4, [pc, #40]	; (8001758 <LoopForever+0x16>)
  movs r3, #0
 800172e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001730:	e001      	b.n	8001736 <LoopFillZerobss>

08001732 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001732:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001734:	3204      	adds	r2, #4

08001736 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001736:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001738:	d3fb      	bcc.n	8001732 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800173a:	f00b f9c9 	bl	800cad0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800173e:	f7fe fedf 	bl	8000500 <main>

08001742 <LoopForever>:

LoopForever:
    b LoopForever
 8001742:	e7fe      	b.n	8001742 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001744:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001748:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800174c:	200002cc 	.word	0x200002cc
  ldr r2, =_sidata
 8001750:	0800cbec 	.word	0x0800cbec
  ldr r2, =_sbss
 8001754:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 8001758:	200007d4 	.word	0x200007d4

0800175c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800175c:	e7fe      	b.n	800175c <ADC1_2_IRQHandler>

0800175e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b082      	sub	sp, #8
 8001762:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001764:	2300      	movs	r3, #0
 8001766:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001768:	2003      	movs	r0, #3
 800176a:	f000 f961 	bl	8001a30 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800176e:	200f      	movs	r0, #15
 8001770:	f000 f80e 	bl	8001790 <HAL_InitTick>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d002      	beq.n	8001780 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	71fb      	strb	r3, [r7, #7]
 800177e:	e001      	b.n	8001784 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001780:	f7ff fd3c 	bl	80011fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001784:	79fb      	ldrb	r3, [r7, #7]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001798:	2300      	movs	r3, #0
 800179a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800179c:	4b17      	ldr	r3, [pc, #92]	; (80017fc <HAL_InitTick+0x6c>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d023      	beq.n	80017ec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80017a4:	4b16      	ldr	r3, [pc, #88]	; (8001800 <HAL_InitTick+0x70>)
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	4b14      	ldr	r3, [pc, #80]	; (80017fc <HAL_InitTick+0x6c>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	4619      	mov	r1, r3
 80017ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 f96d 	bl	8001a9a <HAL_SYSTICK_Config>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d10f      	bne.n	80017e6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2b0f      	cmp	r3, #15
 80017ca:	d809      	bhi.n	80017e0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017cc:	2200      	movs	r2, #0
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	f04f 30ff 	mov.w	r0, #4294967295
 80017d4:	f000 f937 	bl	8001a46 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017d8:	4a0a      	ldr	r2, [pc, #40]	; (8001804 <HAL_InitTick+0x74>)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6013      	str	r3, [r2, #0]
 80017de:	e007      	b.n	80017f0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	73fb      	strb	r3, [r7, #15]
 80017e4:	e004      	b.n	80017f0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	73fb      	strb	r3, [r7, #15]
 80017ea:	e001      	b.n	80017f0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	2000000c 	.word	0x2000000c
 8001800:	20000004 	.word	0x20000004
 8001804:	20000008 	.word	0x20000008

08001808 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800180c:	4b06      	ldr	r3, [pc, #24]	; (8001828 <HAL_IncTick+0x20>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	461a      	mov	r2, r3
 8001812:	4b06      	ldr	r3, [pc, #24]	; (800182c <HAL_IncTick+0x24>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4413      	add	r3, r2
 8001818:	4a04      	ldr	r2, [pc, #16]	; (800182c <HAL_IncTick+0x24>)
 800181a:	6013      	str	r3, [r2, #0]
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	2000000c 	.word	0x2000000c
 800182c:	20000790 	.word	0x20000790

08001830 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  return uwTick;
 8001834:	4b03      	ldr	r3, [pc, #12]	; (8001844 <HAL_GetTick+0x14>)
 8001836:	681b      	ldr	r3, [r3, #0]
}
 8001838:	4618      	mov	r0, r3
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	20000790 	.word	0x20000790

08001848 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001850:	f7ff ffee 	bl	8001830 <HAL_GetTick>
 8001854:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001860:	d005      	beq.n	800186e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001862:	4b0a      	ldr	r3, [pc, #40]	; (800188c <HAL_Delay+0x44>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	461a      	mov	r2, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	4413      	add	r3, r2
 800186c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800186e:	bf00      	nop
 8001870:	f7ff ffde 	bl	8001830 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	429a      	cmp	r2, r3
 800187e:	d8f7      	bhi.n	8001870 <HAL_Delay+0x28>
  {
  }
}
 8001880:	bf00      	nop
 8001882:	bf00      	nop
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	2000000c 	.word	0x2000000c

08001890 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018a0:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <__NVIC_SetPriorityGrouping+0x44>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018a6:	68ba      	ldr	r2, [r7, #8]
 80018a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018ac:	4013      	ands	r3, r2
 80018ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018c2:	4a04      	ldr	r2, [pc, #16]	; (80018d4 <__NVIC_SetPriorityGrouping+0x44>)
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	60d3      	str	r3, [r2, #12]
}
 80018c8:	bf00      	nop
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018dc:	4b04      	ldr	r3, [pc, #16]	; (80018f0 <__NVIC_GetPriorityGrouping+0x18>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	0a1b      	lsrs	r3, r3, #8
 80018e2:	f003 0307 	and.w	r3, r3, #7
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001902:	2b00      	cmp	r3, #0
 8001904:	db0b      	blt.n	800191e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	f003 021f 	and.w	r2, r3, #31
 800190c:	4907      	ldr	r1, [pc, #28]	; (800192c <__NVIC_EnableIRQ+0x38>)
 800190e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001912:	095b      	lsrs	r3, r3, #5
 8001914:	2001      	movs	r0, #1
 8001916:	fa00 f202 	lsl.w	r2, r0, r2
 800191a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800191e:	bf00      	nop
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	e000e100 	.word	0xe000e100

08001930 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	6039      	str	r1, [r7, #0]
 800193a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800193c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001940:	2b00      	cmp	r3, #0
 8001942:	db0a      	blt.n	800195a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	b2da      	uxtb	r2, r3
 8001948:	490c      	ldr	r1, [pc, #48]	; (800197c <__NVIC_SetPriority+0x4c>)
 800194a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194e:	0112      	lsls	r2, r2, #4
 8001950:	b2d2      	uxtb	r2, r2
 8001952:	440b      	add	r3, r1
 8001954:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001958:	e00a      	b.n	8001970 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	b2da      	uxtb	r2, r3
 800195e:	4908      	ldr	r1, [pc, #32]	; (8001980 <__NVIC_SetPriority+0x50>)
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	f003 030f 	and.w	r3, r3, #15
 8001966:	3b04      	subs	r3, #4
 8001968:	0112      	lsls	r2, r2, #4
 800196a:	b2d2      	uxtb	r2, r2
 800196c:	440b      	add	r3, r1
 800196e:	761a      	strb	r2, [r3, #24]
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	e000e100 	.word	0xe000e100
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001984:	b480      	push	{r7}
 8001986:	b089      	sub	sp, #36	; 0x24
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	f1c3 0307 	rsb	r3, r3, #7
 800199e:	2b04      	cmp	r3, #4
 80019a0:	bf28      	it	cs
 80019a2:	2304      	movcs	r3, #4
 80019a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	3304      	adds	r3, #4
 80019aa:	2b06      	cmp	r3, #6
 80019ac:	d902      	bls.n	80019b4 <NVIC_EncodePriority+0x30>
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	3b03      	subs	r3, #3
 80019b2:	e000      	b.n	80019b6 <NVIC_EncodePriority+0x32>
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b8:	f04f 32ff 	mov.w	r2, #4294967295
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	43da      	mvns	r2, r3
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	401a      	ands	r2, r3
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019cc:	f04f 31ff 	mov.w	r1, #4294967295
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	fa01 f303 	lsl.w	r3, r1, r3
 80019d6:	43d9      	mvns	r1, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019dc:	4313      	orrs	r3, r2
         );
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3724      	adds	r7, #36	; 0x24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
	...

080019ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019fc:	d301      	bcc.n	8001a02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019fe:	2301      	movs	r3, #1
 8001a00:	e00f      	b.n	8001a22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a02:	4a0a      	ldr	r2, [pc, #40]	; (8001a2c <SysTick_Config+0x40>)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3b01      	subs	r3, #1
 8001a08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a0a:	210f      	movs	r1, #15
 8001a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a10:	f7ff ff8e 	bl	8001930 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a14:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <SysTick_Config+0x40>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a1a:	4b04      	ldr	r3, [pc, #16]	; (8001a2c <SysTick_Config+0x40>)
 8001a1c:	2207      	movs	r2, #7
 8001a1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	e000e010 	.word	0xe000e010

08001a30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7ff ff29 	bl	8001890 <__NVIC_SetPriorityGrouping>
}
 8001a3e:	bf00      	nop
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b086      	sub	sp, #24
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	60b9      	str	r1, [r7, #8]
 8001a50:	607a      	str	r2, [r7, #4]
 8001a52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a54:	2300      	movs	r3, #0
 8001a56:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a58:	f7ff ff3e 	bl	80018d8 <__NVIC_GetPriorityGrouping>
 8001a5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	68b9      	ldr	r1, [r7, #8]
 8001a62:	6978      	ldr	r0, [r7, #20]
 8001a64:	f7ff ff8e 	bl	8001984 <NVIC_EncodePriority>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a6e:	4611      	mov	r1, r2
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff ff5d 	bl	8001930 <__NVIC_SetPriority>
}
 8001a76:	bf00      	nop
 8001a78:	3718      	adds	r7, #24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b082      	sub	sp, #8
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	4603      	mov	r3, r0
 8001a86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff ff31 	bl	80018f4 <__NVIC_EnableIRQ>
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b082      	sub	sp, #8
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7ff ffa2 	bl	80019ec <SysTick_Config>
 8001aa8:	4603      	mov	r3, r0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b085      	sub	sp, #20
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001aba:	2300      	movs	r3, #0
 8001abc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d008      	beq.n	8001adc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2204      	movs	r2, #4
 8001ace:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e040      	b.n	8001b5e <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f022 020e 	bic.w	r2, r2, #14
 8001aea:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001af6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001afa:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f022 0201 	bic.w	r2, r2, #1
 8001b0a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b10:	f003 021c 	and.w	r2, r3, #28
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b18:	2101      	movs	r1, #1
 8001b1a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b1e:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b28:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d00c      	beq.n	8001b4c <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b40:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001b4a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3714      	adds	r7, #20
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b084      	sub	sp, #16
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b72:	2300      	movs	r3, #0
 8001b74:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d005      	beq.n	8001b8e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2204      	movs	r2, #4
 8001b86:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	73fb      	strb	r3, [r7, #15]
 8001b8c:	e047      	b.n	8001c1e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f022 020e 	bic.w	r2, r2, #14
 8001b9c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f022 0201 	bic.w	r2, r2, #1
 8001bac:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bbc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc2:	f003 021c 	and.w	r2, r3, #28
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	2101      	movs	r1, #1
 8001bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8001bd0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001bda:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d00c      	beq.n	8001bfe <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bf2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001bfc:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2201      	movs	r2, #1
 8001c02:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	4798      	blx	r3
    }
  }
  return status;
 8001c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3710      	adds	r7, #16
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b087      	sub	sp, #28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c36:	e166      	b.n	8001f06 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	2101      	movs	r1, #1
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	fa01 f303 	lsl.w	r3, r1, r3
 8001c44:	4013      	ands	r3, r2
 8001c46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f000 8158 	beq.w	8001f00 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f003 0303 	and.w	r3, r3, #3
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d005      	beq.n	8001c68 <HAL_GPIO_Init+0x40>
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f003 0303 	and.w	r3, r3, #3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d130      	bne.n	8001cca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	2203      	movs	r2, #3
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	68da      	ldr	r2, [r3, #12]
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	4013      	ands	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	091b      	lsrs	r3, r3, #4
 8001cb4:	f003 0201 	and.w	r2, r3, #1
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f003 0303 	and.w	r3, r3, #3
 8001cd2:	2b03      	cmp	r3, #3
 8001cd4:	d017      	beq.n	8001d06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	2203      	movs	r2, #3
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	4013      	ands	r3, r2
 8001cec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	689a      	ldr	r2, [r3, #8]
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f003 0303 	and.w	r3, r3, #3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d123      	bne.n	8001d5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	08da      	lsrs	r2, r3, #3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	3208      	adds	r2, #8
 8001d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	220f      	movs	r2, #15
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	4013      	ands	r3, r2
 8001d34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	691a      	ldr	r2, [r3, #16]
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	f003 0307 	and.w	r3, r3, #7
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	08da      	lsrs	r2, r3, #3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3208      	adds	r2, #8
 8001d54:	6939      	ldr	r1, [r7, #16]
 8001d56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	2203      	movs	r2, #3
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f003 0203 	and.w	r2, r3, #3
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f000 80b2 	beq.w	8001f00 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d9c:	4b61      	ldr	r3, [pc, #388]	; (8001f24 <HAL_GPIO_Init+0x2fc>)
 8001d9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001da0:	4a60      	ldr	r2, [pc, #384]	; (8001f24 <HAL_GPIO_Init+0x2fc>)
 8001da2:	f043 0301 	orr.w	r3, r3, #1
 8001da6:	6613      	str	r3, [r2, #96]	; 0x60
 8001da8:	4b5e      	ldr	r3, [pc, #376]	; (8001f24 <HAL_GPIO_Init+0x2fc>)
 8001daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	60bb      	str	r3, [r7, #8]
 8001db2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001db4:	4a5c      	ldr	r2, [pc, #368]	; (8001f28 <HAL_GPIO_Init+0x300>)
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	089b      	lsrs	r3, r3, #2
 8001dba:	3302      	adds	r3, #2
 8001dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	f003 0303 	and.w	r3, r3, #3
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	220f      	movs	r2, #15
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001dde:	d02b      	beq.n	8001e38 <HAL_GPIO_Init+0x210>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a52      	ldr	r2, [pc, #328]	; (8001f2c <HAL_GPIO_Init+0x304>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d025      	beq.n	8001e34 <HAL_GPIO_Init+0x20c>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a51      	ldr	r2, [pc, #324]	; (8001f30 <HAL_GPIO_Init+0x308>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d01f      	beq.n	8001e30 <HAL_GPIO_Init+0x208>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a50      	ldr	r2, [pc, #320]	; (8001f34 <HAL_GPIO_Init+0x30c>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d019      	beq.n	8001e2c <HAL_GPIO_Init+0x204>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a4f      	ldr	r2, [pc, #316]	; (8001f38 <HAL_GPIO_Init+0x310>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d013      	beq.n	8001e28 <HAL_GPIO_Init+0x200>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a4e      	ldr	r2, [pc, #312]	; (8001f3c <HAL_GPIO_Init+0x314>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d00d      	beq.n	8001e24 <HAL_GPIO_Init+0x1fc>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a4d      	ldr	r2, [pc, #308]	; (8001f40 <HAL_GPIO_Init+0x318>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d007      	beq.n	8001e20 <HAL_GPIO_Init+0x1f8>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a4c      	ldr	r2, [pc, #304]	; (8001f44 <HAL_GPIO_Init+0x31c>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d101      	bne.n	8001e1c <HAL_GPIO_Init+0x1f4>
 8001e18:	2307      	movs	r3, #7
 8001e1a:	e00e      	b.n	8001e3a <HAL_GPIO_Init+0x212>
 8001e1c:	2308      	movs	r3, #8
 8001e1e:	e00c      	b.n	8001e3a <HAL_GPIO_Init+0x212>
 8001e20:	2306      	movs	r3, #6
 8001e22:	e00a      	b.n	8001e3a <HAL_GPIO_Init+0x212>
 8001e24:	2305      	movs	r3, #5
 8001e26:	e008      	b.n	8001e3a <HAL_GPIO_Init+0x212>
 8001e28:	2304      	movs	r3, #4
 8001e2a:	e006      	b.n	8001e3a <HAL_GPIO_Init+0x212>
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e004      	b.n	8001e3a <HAL_GPIO_Init+0x212>
 8001e30:	2302      	movs	r3, #2
 8001e32:	e002      	b.n	8001e3a <HAL_GPIO_Init+0x212>
 8001e34:	2301      	movs	r3, #1
 8001e36:	e000      	b.n	8001e3a <HAL_GPIO_Init+0x212>
 8001e38:	2300      	movs	r3, #0
 8001e3a:	697a      	ldr	r2, [r7, #20]
 8001e3c:	f002 0203 	and.w	r2, r2, #3
 8001e40:	0092      	lsls	r2, r2, #2
 8001e42:	4093      	lsls	r3, r2
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e4a:	4937      	ldr	r1, [pc, #220]	; (8001f28 <HAL_GPIO_Init+0x300>)
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	089b      	lsrs	r3, r3, #2
 8001e50:	3302      	adds	r3, #2
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e58:	4b3b      	ldr	r3, [pc, #236]	; (8001f48 <HAL_GPIO_Init+0x320>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	43db      	mvns	r3, r3
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	4013      	ands	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d003      	beq.n	8001e7c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e7c:	4a32      	ldr	r2, [pc, #200]	; (8001f48 <HAL_GPIO_Init+0x320>)
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e82:	4b31      	ldr	r3, [pc, #196]	; (8001f48 <HAL_GPIO_Init+0x320>)
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ea6:	4a28      	ldr	r2, [pc, #160]	; (8001f48 <HAL_GPIO_Init+0x320>)
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001eac:	4b26      	ldr	r3, [pc, #152]	; (8001f48 <HAL_GPIO_Init+0x320>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d003      	beq.n	8001ed0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ed0:	4a1d      	ldr	r2, [pc, #116]	; (8001f48 <HAL_GPIO_Init+0x320>)
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ed6:	4b1c      	ldr	r3, [pc, #112]	; (8001f48 <HAL_GPIO_Init+0x320>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001efa:	4a13      	ldr	r2, [pc, #76]	; (8001f48 <HAL_GPIO_Init+0x320>)
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	3301      	adds	r3, #1
 8001f04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	f47f ae91 	bne.w	8001c38 <HAL_GPIO_Init+0x10>
  }
}
 8001f16:	bf00      	nop
 8001f18:	bf00      	nop
 8001f1a:	371c      	adds	r7, #28
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	40021000 	.word	0x40021000
 8001f28:	40010000 	.word	0x40010000
 8001f2c:	48000400 	.word	0x48000400
 8001f30:	48000800 	.word	0x48000800
 8001f34:	48000c00 	.word	0x48000c00
 8001f38:	48001000 	.word	0x48001000
 8001f3c:	48001400 	.word	0x48001400
 8001f40:	48001800 	.word	0x48001800
 8001f44:	48001c00 	.word	0x48001c00
 8001f48:	40010400 	.word	0x40010400

08001f4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	460b      	mov	r3, r1
 8001f56:	807b      	strh	r3, [r7, #2]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f5c:	787b      	ldrb	r3, [r7, #1]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f62:	887a      	ldrh	r2, [r7, #2]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f68:	e002      	b.n	8001f70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f6a:	887a      	ldrh	r2, [r7, #2]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e081      	b.n	8002092 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d106      	bne.n	8001fa8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7ff f94e 	bl	8001244 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2224      	movs	r2, #36	; 0x24
 8001fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f022 0201 	bic.w	r2, r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685a      	ldr	r2, [r3, #4]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fcc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fdc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d107      	bne.n	8001ff6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689a      	ldr	r2, [r3, #8]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ff2:	609a      	str	r2, [r3, #8]
 8001ff4:	e006      	b.n	8002004 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	689a      	ldr	r2, [r3, #8]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002002:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	2b02      	cmp	r3, #2
 800200a:	d104      	bne.n	8002016 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002014:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	6812      	ldr	r2, [r2, #0]
 8002020:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002024:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002028:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68da      	ldr	r2, [r3, #12]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002038:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	691a      	ldr	r2, [r3, #16]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	430a      	orrs	r2, r1
 8002052:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	69d9      	ldr	r1, [r3, #28]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a1a      	ldr	r2, [r3, #32]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	430a      	orrs	r2, r1
 8002062:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f042 0201 	orr.w	r2, r2, #1
 8002072:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2220      	movs	r2, #32
 800207e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
	...

0800209c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b088      	sub	sp, #32
 80020a0:	af02      	add	r7, sp, #8
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	607a      	str	r2, [r7, #4]
 80020a6:	461a      	mov	r2, r3
 80020a8:	460b      	mov	r3, r1
 80020aa:	817b      	strh	r3, [r7, #10]
 80020ac:	4613      	mov	r3, r2
 80020ae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b20      	cmp	r3, #32
 80020ba:	f040 80da 	bne.w	8002272 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d101      	bne.n	80020cc <HAL_I2C_Master_Transmit+0x30>
 80020c8:	2302      	movs	r3, #2
 80020ca:	e0d3      	b.n	8002274 <HAL_I2C_Master_Transmit+0x1d8>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80020d4:	f7ff fbac 	bl	8001830 <HAL_GetTick>
 80020d8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	9300      	str	r3, [sp, #0]
 80020de:	2319      	movs	r3, #25
 80020e0:	2201      	movs	r2, #1
 80020e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f000 f9e6 	bl	80024b8 <I2C_WaitOnFlagUntilTimeout>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e0be      	b.n	8002274 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2221      	movs	r2, #33	; 0x21
 80020fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2210      	movs	r2, #16
 8002102:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	893a      	ldrh	r2, [r7, #8]
 8002116:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2200      	movs	r2, #0
 800211c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002122:	b29b      	uxth	r3, r3
 8002124:	2bff      	cmp	r3, #255	; 0xff
 8002126:	d90e      	bls.n	8002146 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	22ff      	movs	r2, #255	; 0xff
 800212c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002132:	b2da      	uxtb	r2, r3
 8002134:	8979      	ldrh	r1, [r7, #10]
 8002136:	4b51      	ldr	r3, [pc, #324]	; (800227c <HAL_I2C_Master_Transmit+0x1e0>)
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	f000 fbdc 	bl	80028fc <I2C_TransferConfig>
 8002144:	e06c      	b.n	8002220 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800214a:	b29a      	uxth	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002154:	b2da      	uxtb	r2, r3
 8002156:	8979      	ldrh	r1, [r7, #10]
 8002158:	4b48      	ldr	r3, [pc, #288]	; (800227c <HAL_I2C_Master_Transmit+0x1e0>)
 800215a:	9300      	str	r3, [sp, #0]
 800215c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002160:	68f8      	ldr	r0, [r7, #12]
 8002162:	f000 fbcb 	bl	80028fc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002166:	e05b      	b.n	8002220 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002168:	697a      	ldr	r2, [r7, #20]
 800216a:	6a39      	ldr	r1, [r7, #32]
 800216c:	68f8      	ldr	r0, [r7, #12]
 800216e:	f000 f9e3 	bl	8002538 <I2C_WaitOnTXISFlagUntilTimeout>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e07b      	b.n	8002274 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002180:	781a      	ldrb	r2, [r3, #0]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218c:	1c5a      	adds	r2, r3, #1
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002196:	b29b      	uxth	r3, r3
 8002198:	3b01      	subs	r3, #1
 800219a:	b29a      	uxth	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a4:	3b01      	subs	r3, #1
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d034      	beq.n	8002220 <HAL_I2C_Master_Transmit+0x184>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d130      	bne.n	8002220 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	9300      	str	r3, [sp, #0]
 80021c2:	6a3b      	ldr	r3, [r7, #32]
 80021c4:	2200      	movs	r2, #0
 80021c6:	2180      	movs	r1, #128	; 0x80
 80021c8:	68f8      	ldr	r0, [r7, #12]
 80021ca:	f000 f975 	bl	80024b8 <I2C_WaitOnFlagUntilTimeout>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e04d      	b.n	8002274 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021dc:	b29b      	uxth	r3, r3
 80021de:	2bff      	cmp	r3, #255	; 0xff
 80021e0:	d90e      	bls.n	8002200 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	22ff      	movs	r2, #255	; 0xff
 80021e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ec:	b2da      	uxtb	r2, r3
 80021ee:	8979      	ldrh	r1, [r7, #10]
 80021f0:	2300      	movs	r3, #0
 80021f2:	9300      	str	r3, [sp, #0]
 80021f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021f8:	68f8      	ldr	r0, [r7, #12]
 80021fa:	f000 fb7f 	bl	80028fc <I2C_TransferConfig>
 80021fe:	e00f      	b.n	8002220 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002204:	b29a      	uxth	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800220e:	b2da      	uxtb	r2, r3
 8002210:	8979      	ldrh	r1, [r7, #10]
 8002212:	2300      	movs	r3, #0
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f000 fb6e 	bl	80028fc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002224:	b29b      	uxth	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d19e      	bne.n	8002168 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	6a39      	ldr	r1, [r7, #32]
 800222e:	68f8      	ldr	r0, [r7, #12]
 8002230:	f000 f9c2 	bl	80025b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e01a      	b.n	8002274 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2220      	movs	r2, #32
 8002244:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6859      	ldr	r1, [r3, #4]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <HAL_I2C_Master_Transmit+0x1e4>)
 8002252:	400b      	ands	r3, r1
 8002254:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2220      	movs	r2, #32
 800225a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800226e:	2300      	movs	r3, #0
 8002270:	e000      	b.n	8002274 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002272:	2302      	movs	r3, #2
  }
}
 8002274:	4618      	mov	r0, r3
 8002276:	3718      	adds	r7, #24
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	80002000 	.word	0x80002000
 8002280:	fe00e800 	.word	0xfe00e800

08002284 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b088      	sub	sp, #32
 8002288:	af02      	add	r7, sp, #8
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	607a      	str	r2, [r7, #4]
 800228e:	461a      	mov	r2, r3
 8002290:	460b      	mov	r3, r1
 8002292:	817b      	strh	r3, [r7, #10]
 8002294:	4613      	mov	r3, r2
 8002296:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b20      	cmp	r3, #32
 80022a2:	f040 80db 	bne.w	800245c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d101      	bne.n	80022b4 <HAL_I2C_Master_Receive+0x30>
 80022b0:	2302      	movs	r3, #2
 80022b2:	e0d4      	b.n	800245e <HAL_I2C_Master_Receive+0x1da>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022bc:	f7ff fab8 	bl	8001830 <HAL_GetTick>
 80022c0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	9300      	str	r3, [sp, #0]
 80022c6:	2319      	movs	r3, #25
 80022c8:	2201      	movs	r2, #1
 80022ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022ce:	68f8      	ldr	r0, [r7, #12]
 80022d0:	f000 f8f2 	bl	80024b8 <I2C_WaitOnFlagUntilTimeout>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e0bf      	b.n	800245e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2222      	movs	r2, #34	; 0x22
 80022e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2210      	movs	r2, #16
 80022ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	893a      	ldrh	r2, [r7, #8]
 80022fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2200      	movs	r2, #0
 8002304:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800230a:	b29b      	uxth	r3, r3
 800230c:	2bff      	cmp	r3, #255	; 0xff
 800230e:	d90e      	bls.n	800232e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	22ff      	movs	r2, #255	; 0xff
 8002314:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800231a:	b2da      	uxtb	r2, r3
 800231c:	8979      	ldrh	r1, [r7, #10]
 800231e:	4b52      	ldr	r3, [pc, #328]	; (8002468 <HAL_I2C_Master_Receive+0x1e4>)
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002326:	68f8      	ldr	r0, [r7, #12]
 8002328:	f000 fae8 	bl	80028fc <I2C_TransferConfig>
 800232c:	e06d      	b.n	800240a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002332:	b29a      	uxth	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800233c:	b2da      	uxtb	r2, r3
 800233e:	8979      	ldrh	r1, [r7, #10]
 8002340:	4b49      	ldr	r3, [pc, #292]	; (8002468 <HAL_I2C_Master_Receive+0x1e4>)
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002348:	68f8      	ldr	r0, [r7, #12]
 800234a:	f000 fad7 	bl	80028fc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800234e:	e05c      	b.n	800240a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002350:	697a      	ldr	r2, [r7, #20]
 8002352:	6a39      	ldr	r1, [r7, #32]
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f000 f96b 	bl	8002630 <I2C_WaitOnRXNEFlagUntilTimeout>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e07c      	b.n	800245e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002376:	1c5a      	adds	r2, r3, #1
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002380:	3b01      	subs	r3, #1
 8002382:	b29a      	uxth	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800238c:	b29b      	uxth	r3, r3
 800238e:	3b01      	subs	r3, #1
 8002390:	b29a      	uxth	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800239a:	b29b      	uxth	r3, r3
 800239c:	2b00      	cmp	r3, #0
 800239e:	d034      	beq.n	800240a <HAL_I2C_Master_Receive+0x186>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d130      	bne.n	800240a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	9300      	str	r3, [sp, #0]
 80023ac:	6a3b      	ldr	r3, [r7, #32]
 80023ae:	2200      	movs	r2, #0
 80023b0:	2180      	movs	r1, #128	; 0x80
 80023b2:	68f8      	ldr	r0, [r7, #12]
 80023b4:	f000 f880 	bl	80024b8 <I2C_WaitOnFlagUntilTimeout>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e04d      	b.n	800245e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	2bff      	cmp	r3, #255	; 0xff
 80023ca:	d90e      	bls.n	80023ea <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	22ff      	movs	r2, #255	; 0xff
 80023d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d6:	b2da      	uxtb	r2, r3
 80023d8:	8979      	ldrh	r1, [r7, #10]
 80023da:	2300      	movs	r3, #0
 80023dc:	9300      	str	r3, [sp, #0]
 80023de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	f000 fa8a 	bl	80028fc <I2C_TransferConfig>
 80023e8:	e00f      	b.n	800240a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	8979      	ldrh	r1, [r7, #10]
 80023fc:	2300      	movs	r3, #0
 80023fe:	9300      	str	r3, [sp, #0]
 8002400:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002404:	68f8      	ldr	r0, [r7, #12]
 8002406:	f000 fa79 	bl	80028fc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800240e:	b29b      	uxth	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	d19d      	bne.n	8002350 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002414:	697a      	ldr	r2, [r7, #20]
 8002416:	6a39      	ldr	r1, [r7, #32]
 8002418:	68f8      	ldr	r0, [r7, #12]
 800241a:	f000 f8cd 	bl	80025b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e01a      	b.n	800245e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2220      	movs	r2, #32
 800242e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6859      	ldr	r1, [r3, #4]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	4b0c      	ldr	r3, [pc, #48]	; (800246c <HAL_I2C_Master_Receive+0x1e8>)
 800243c:	400b      	ands	r3, r1
 800243e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2220      	movs	r2, #32
 8002444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002458:	2300      	movs	r3, #0
 800245a:	e000      	b.n	800245e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800245c:	2302      	movs	r3, #2
  }
}
 800245e:	4618      	mov	r0, r3
 8002460:	3718      	adds	r7, #24
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	80002400 	.word	0x80002400
 800246c:	fe00e800 	.word	0xfe00e800

08002470 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b02      	cmp	r3, #2
 8002484:	d103      	bne.n	800248e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2200      	movs	r2, #0
 800248c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	2b01      	cmp	r3, #1
 800249a:	d007      	beq.n	80024ac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	699a      	ldr	r2, [r3, #24]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0201 	orr.w	r2, r2, #1
 80024aa:	619a      	str	r2, [r3, #24]
  }
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	603b      	str	r3, [r7, #0]
 80024c4:	4613      	mov	r3, r2
 80024c6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024c8:	e022      	b.n	8002510 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d0:	d01e      	beq.n	8002510 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024d2:	f7ff f9ad 	bl	8001830 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d302      	bcc.n	80024e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d113      	bne.n	8002510 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ec:	f043 0220 	orr.w	r2, r3, #32
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2220      	movs	r2, #32
 80024f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e00f      	b.n	8002530 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	699a      	ldr	r2, [r3, #24]
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	4013      	ands	r3, r2
 800251a:	68ba      	ldr	r2, [r7, #8]
 800251c:	429a      	cmp	r2, r3
 800251e:	bf0c      	ite	eq
 8002520:	2301      	moveq	r3, #1
 8002522:	2300      	movne	r3, #0
 8002524:	b2db      	uxtb	r3, r3
 8002526:	461a      	mov	r2, r3
 8002528:	79fb      	ldrb	r3, [r7, #7]
 800252a:	429a      	cmp	r2, r3
 800252c:	d0cd      	beq.n	80024ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	3710      	adds	r7, #16
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002544:	e02c      	b.n	80025a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	68b9      	ldr	r1, [r7, #8]
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f000 f8ea 	bl	8002724 <I2C_IsErrorOccurred>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e02a      	b.n	80025b0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002560:	d01e      	beq.n	80025a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002562:	f7ff f965 	bl	8001830 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	68ba      	ldr	r2, [r7, #8]
 800256e:	429a      	cmp	r2, r3
 8002570:	d302      	bcc.n	8002578 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d113      	bne.n	80025a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257c:	f043 0220 	orr.w	r2, r3, #32
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2220      	movs	r2, #32
 8002588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e007      	b.n	80025b0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d1cb      	bne.n	8002546 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025c4:	e028      	b.n	8002618 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	68b9      	ldr	r1, [r7, #8]
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f000 f8aa 	bl	8002724 <I2C_IsErrorOccurred>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e026      	b.n	8002628 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025da:	f7ff f929 	bl	8001830 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	68ba      	ldr	r2, [r7, #8]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d302      	bcc.n	80025f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d113      	bne.n	8002618 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f4:	f043 0220 	orr.w	r2, r3, #32
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2220      	movs	r2, #32
 8002600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e007      	b.n	8002628 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	f003 0320 	and.w	r3, r3, #32
 8002622:	2b20      	cmp	r3, #32
 8002624:	d1cf      	bne.n	80025c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3710      	adds	r7, #16
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800263c:	e064      	b.n	8002708 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	68b9      	ldr	r1, [r7, #8]
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f000 f86e 	bl	8002724 <I2C_IsErrorOccurred>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e062      	b.n	8002718 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	f003 0320 	and.w	r3, r3, #32
 800265c:	2b20      	cmp	r3, #32
 800265e:	d138      	bne.n	80026d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	f003 0304 	and.w	r3, r3, #4
 800266a:	2b04      	cmp	r3, #4
 800266c:	d105      	bne.n	800267a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002676:	2300      	movs	r3, #0
 8002678:	e04e      	b.n	8002718 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	f003 0310 	and.w	r3, r3, #16
 8002684:	2b10      	cmp	r3, #16
 8002686:	d107      	bne.n	8002698 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2210      	movs	r2, #16
 800268e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2204      	movs	r2, #4
 8002694:	645a      	str	r2, [r3, #68]	; 0x44
 8002696:	e002      	b.n	800269e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2220      	movs	r2, #32
 80026a4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6859      	ldr	r1, [r3, #4]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	4b1b      	ldr	r3, [pc, #108]	; (8002720 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80026b2:	400b      	ands	r3, r1
 80026b4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2220      	movs	r2, #32
 80026ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e022      	b.n	8002718 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026d2:	f7ff f8ad 	bl	8001830 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	68ba      	ldr	r2, [r7, #8]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d302      	bcc.n	80026e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d10f      	bne.n	8002708 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ec:	f043 0220 	orr.w	r2, r3, #32
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2220      	movs	r2, #32
 80026f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e007      	b.n	8002718 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	f003 0304 	and.w	r3, r3, #4
 8002712:	2b04      	cmp	r3, #4
 8002714:	d193      	bne.n	800263e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	fe00e800 	.word	0xfe00e800

08002724 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b08a      	sub	sp, #40	; 0x28
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002730:	2300      	movs	r3, #0
 8002732:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800273e:	2300      	movs	r3, #0
 8002740:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	f003 0310 	and.w	r3, r3, #16
 800274c:	2b00      	cmp	r3, #0
 800274e:	d075      	beq.n	800283c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2210      	movs	r2, #16
 8002756:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002758:	e056      	b.n	8002808 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002760:	d052      	beq.n	8002808 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002762:	f7ff f865 	bl	8001830 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	68ba      	ldr	r2, [r7, #8]
 800276e:	429a      	cmp	r2, r3
 8002770:	d302      	bcc.n	8002778 <I2C_IsErrorOccurred+0x54>
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d147      	bne.n	8002808 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002782:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800278a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002796:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800279a:	d12e      	bne.n	80027fa <I2C_IsErrorOccurred+0xd6>
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027a2:	d02a      	beq.n	80027fa <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80027a4:	7cfb      	ldrb	r3, [r7, #19]
 80027a6:	2b20      	cmp	r3, #32
 80027a8:	d027      	beq.n	80027fa <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027b8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80027ba:	f7ff f839 	bl	8001830 <HAL_GetTick>
 80027be:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027c0:	e01b      	b.n	80027fa <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80027c2:	f7ff f835 	bl	8001830 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b19      	cmp	r3, #25
 80027ce:	d914      	bls.n	80027fa <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d4:	f043 0220 	orr.w	r2, r3, #32
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2220      	movs	r2, #32
 80027e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	f003 0320 	and.w	r3, r3, #32
 8002804:	2b20      	cmp	r3, #32
 8002806:	d1dc      	bne.n	80027c2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	f003 0320 	and.w	r3, r3, #32
 8002812:	2b20      	cmp	r3, #32
 8002814:	d003      	beq.n	800281e <I2C_IsErrorOccurred+0xfa>
 8002816:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800281a:	2b00      	cmp	r3, #0
 800281c:	d09d      	beq.n	800275a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800281e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002822:	2b00      	cmp	r3, #0
 8002824:	d103      	bne.n	800282e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2220      	movs	r2, #32
 800282c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800282e:	6a3b      	ldr	r3, [r7, #32]
 8002830:	f043 0304 	orr.w	r3, r3, #4
 8002834:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00b      	beq.n	8002866 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800284e:	6a3b      	ldr	r3, [r7, #32]
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800285e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00b      	beq.n	8002888 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002870:	6a3b      	ldr	r3, [r7, #32]
 8002872:	f043 0308 	orr.w	r3, r3, #8
 8002876:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002880:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00b      	beq.n	80028aa <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002892:	6a3b      	ldr	r3, [r7, #32]
 8002894:	f043 0302 	orr.w	r3, r3, #2
 8002898:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028a2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80028aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d01c      	beq.n	80028ec <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	f7ff fddc 	bl	8002470 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6859      	ldr	r1, [r3, #4]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	4b0d      	ldr	r3, [pc, #52]	; (80028f8 <I2C_IsErrorOccurred+0x1d4>)
 80028c4:	400b      	ands	r3, r1
 80028c6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028cc:	6a3b      	ldr	r3, [r7, #32]
 80028ce:	431a      	orrs	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2220      	movs	r2, #32
 80028d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80028ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3728      	adds	r7, #40	; 0x28
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	fe00e800 	.word	0xfe00e800

080028fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b087      	sub	sp, #28
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	607b      	str	r3, [r7, #4]
 8002906:	460b      	mov	r3, r1
 8002908:	817b      	strh	r3, [r7, #10]
 800290a:	4613      	mov	r3, r2
 800290c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800290e:	897b      	ldrh	r3, [r7, #10]
 8002910:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002914:	7a7b      	ldrb	r3, [r7, #9]
 8002916:	041b      	lsls	r3, r3, #16
 8002918:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800291c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002922:	6a3b      	ldr	r3, [r7, #32]
 8002924:	4313      	orrs	r3, r2
 8002926:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800292a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	685a      	ldr	r2, [r3, #4]
 8002932:	6a3b      	ldr	r3, [r7, #32]
 8002934:	0d5b      	lsrs	r3, r3, #21
 8002936:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800293a:	4b08      	ldr	r3, [pc, #32]	; (800295c <I2C_TransferConfig+0x60>)
 800293c:	430b      	orrs	r3, r1
 800293e:	43db      	mvns	r3, r3
 8002940:	ea02 0103 	and.w	r1, r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	697a      	ldr	r2, [r7, #20]
 800294a:	430a      	orrs	r2, r1
 800294c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800294e:	bf00      	nop
 8002950:	371c      	adds	r7, #28
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	03ff63ff 	.word	0x03ff63ff

08002960 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b20      	cmp	r3, #32
 8002974:	d138      	bne.n	80029e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800297c:	2b01      	cmp	r3, #1
 800297e:	d101      	bne.n	8002984 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002980:	2302      	movs	r3, #2
 8002982:	e032      	b.n	80029ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2224      	movs	r2, #36	; 0x24
 8002990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 0201 	bic.w	r2, r2, #1
 80029a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6819      	ldr	r1, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	430a      	orrs	r2, r1
 80029c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f042 0201 	orr.w	r2, r2, #1
 80029d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2220      	movs	r2, #32
 80029d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029e4:	2300      	movs	r3, #0
 80029e6:	e000      	b.n	80029ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80029e8:	2302      	movs	r3, #2
  }
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80029f6:	b480      	push	{r7}
 80029f8:	b085      	sub	sp, #20
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
 80029fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	2b20      	cmp	r3, #32
 8002a0a:	d139      	bne.n	8002a80 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d101      	bne.n	8002a1a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a16:	2302      	movs	r3, #2
 8002a18:	e033      	b.n	8002a82 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2224      	movs	r2, #36	; 0x24
 8002a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 0201 	bic.w	r2, r2, #1
 8002a38:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a48:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	021b      	lsls	r3, r3, #8
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f042 0201 	orr.w	r2, r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2220      	movs	r2, #32
 8002a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	e000      	b.n	8002a82 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a80:	2302      	movs	r3, #2
  }
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
	...

08002a90 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a94:	4b0d      	ldr	r3, [pc, #52]	; (8002acc <HAL_PWREx_GetVoltageRange+0x3c>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aa0:	d102      	bne.n	8002aa8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002aa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002aa6:	e00b      	b.n	8002ac0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002aa8:	4b08      	ldr	r3, [pc, #32]	; (8002acc <HAL_PWREx_GetVoltageRange+0x3c>)
 8002aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ab6:	d102      	bne.n	8002abe <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002ab8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002abc:	e000      	b.n	8002ac0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002abe:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	40007000 	.word	0x40007000

08002ad0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d141      	bne.n	8002b62 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ade:	4b4b      	ldr	r3, [pc, #300]	; (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ae6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aea:	d131      	bne.n	8002b50 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002aec:	4b47      	ldr	r3, [pc, #284]	; (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002af2:	4a46      	ldr	r2, [pc, #280]	; (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002af4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002af8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002afc:	4b43      	ldr	r3, [pc, #268]	; (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b04:	4a41      	ldr	r2, [pc, #260]	; (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b0a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002b0c:	4b40      	ldr	r3, [pc, #256]	; (8002c10 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2232      	movs	r2, #50	; 0x32
 8002b12:	fb02 f303 	mul.w	r3, r2, r3
 8002b16:	4a3f      	ldr	r2, [pc, #252]	; (8002c14 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002b18:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1c:	0c9b      	lsrs	r3, r3, #18
 8002b1e:	3301      	adds	r3, #1
 8002b20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b22:	e002      	b.n	8002b2a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	3b01      	subs	r3, #1
 8002b28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b2a:	4b38      	ldr	r3, [pc, #224]	; (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b36:	d102      	bne.n	8002b3e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1f2      	bne.n	8002b24 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b3e:	4b33      	ldr	r3, [pc, #204]	; (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b4a:	d158      	bne.n	8002bfe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e057      	b.n	8002c00 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b50:	4b2e      	ldr	r3, [pc, #184]	; (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b56:	4a2d      	ldr	r2, [pc, #180]	; (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002b60:	e04d      	b.n	8002bfe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b68:	d141      	bne.n	8002bee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b6a:	4b28      	ldr	r3, [pc, #160]	; (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b76:	d131      	bne.n	8002bdc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b78:	4b24      	ldr	r3, [pc, #144]	; (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b7e:	4a23      	ldr	r2, [pc, #140]	; (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b88:	4b20      	ldr	r3, [pc, #128]	; (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b90:	4a1e      	ldr	r2, [pc, #120]	; (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b96:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002b98:	4b1d      	ldr	r3, [pc, #116]	; (8002c10 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2232      	movs	r2, #50	; 0x32
 8002b9e:	fb02 f303 	mul.w	r3, r2, r3
 8002ba2:	4a1c      	ldr	r2, [pc, #112]	; (8002c14 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba8:	0c9b      	lsrs	r3, r3, #18
 8002baa:	3301      	adds	r3, #1
 8002bac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bae:	e002      	b.n	8002bb6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bb6:	4b15      	ldr	r3, [pc, #84]	; (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bc2:	d102      	bne.n	8002bca <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1f2      	bne.n	8002bb0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bca:	4b10      	ldr	r3, [pc, #64]	; (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bd6:	d112      	bne.n	8002bfe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e011      	b.n	8002c00 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002bdc:	4b0b      	ldr	r3, [pc, #44]	; (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002be2:	4a0a      	ldr	r2, [pc, #40]	; (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002be8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002bec:	e007      	b.n	8002bfe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bee:	4b07      	ldr	r3, [pc, #28]	; (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002bf6:	4a05      	ldr	r2, [pc, #20]	; (8002c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bf8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bfc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3714      	adds	r7, #20
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr
 8002c0c:	40007000 	.word	0x40007000
 8002c10:	20000004 	.word	0x20000004
 8002c14:	431bde83 	.word	0x431bde83

08002c18 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002c1c:	4b05      	ldr	r3, [pc, #20]	; (8002c34 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	4a04      	ldr	r2, [pc, #16]	; (8002c34 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002c22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c26:	6053      	str	r3, [r2, #4]
}
 8002c28:	bf00      	nop
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	40007000 	.word	0x40007000

08002c38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b08a      	sub	sp, #40	; 0x28
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d102      	bne.n	8002c4c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	f000 bc68 	b.w	800351c <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c4c:	4b97      	ldr	r3, [pc, #604]	; (8002eac <HAL_RCC_OscConfig+0x274>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f003 030c 	and.w	r3, r3, #12
 8002c54:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c56:	4b95      	ldr	r3, [pc, #596]	; (8002eac <HAL_RCC_OscConfig+0x274>)
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	f003 0303 	and.w	r3, r3, #3
 8002c5e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0310 	and.w	r3, r3, #16
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f000 80e6 	beq.w	8002e3a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c6e:	6a3b      	ldr	r3, [r7, #32]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d007      	beq.n	8002c84 <HAL_RCC_OscConfig+0x4c>
 8002c74:	6a3b      	ldr	r3, [r7, #32]
 8002c76:	2b0c      	cmp	r3, #12
 8002c78:	f040 808d 	bne.w	8002d96 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	f040 8089 	bne.w	8002d96 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c84:	4b89      	ldr	r3, [pc, #548]	; (8002eac <HAL_RCC_OscConfig+0x274>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d006      	beq.n	8002c9e <HAL_RCC_OscConfig+0x66>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d102      	bne.n	8002c9e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	f000 bc3f 	b.w	800351c <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ca2:	4b82      	ldr	r3, [pc, #520]	; (8002eac <HAL_RCC_OscConfig+0x274>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0308 	and.w	r3, r3, #8
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d004      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x80>
 8002cae:	4b7f      	ldr	r3, [pc, #508]	; (8002eac <HAL_RCC_OscConfig+0x274>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cb6:	e005      	b.n	8002cc4 <HAL_RCC_OscConfig+0x8c>
 8002cb8:	4b7c      	ldr	r3, [pc, #496]	; (8002eac <HAL_RCC_OscConfig+0x274>)
 8002cba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cbe:	091b      	lsrs	r3, r3, #4
 8002cc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d224      	bcs.n	8002d12 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f000 fe2d 	bl	800392c <RCC_SetFlashLatencyFromMSIRange>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d002      	beq.n	8002cde <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	f000 bc1f 	b.w	800351c <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cde:	4b73      	ldr	r3, [pc, #460]	; (8002eac <HAL_RCC_OscConfig+0x274>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a72      	ldr	r2, [pc, #456]	; (8002eac <HAL_RCC_OscConfig+0x274>)
 8002ce4:	f043 0308 	orr.w	r3, r3, #8
 8002ce8:	6013      	str	r3, [r2, #0]
 8002cea:	4b70      	ldr	r3, [pc, #448]	; (8002eac <HAL_RCC_OscConfig+0x274>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf6:	496d      	ldr	r1, [pc, #436]	; (8002eac <HAL_RCC_OscConfig+0x274>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cfc:	4b6b      	ldr	r3, [pc, #428]	; (8002eac <HAL_RCC_OscConfig+0x274>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	021b      	lsls	r3, r3, #8
 8002d0a:	4968      	ldr	r1, [pc, #416]	; (8002eac <HAL_RCC_OscConfig+0x274>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	604b      	str	r3, [r1, #4]
 8002d10:	e025      	b.n	8002d5e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d12:	4b66      	ldr	r3, [pc, #408]	; (8002eac <HAL_RCC_OscConfig+0x274>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a65      	ldr	r2, [pc, #404]	; (8002eac <HAL_RCC_OscConfig+0x274>)
 8002d18:	f043 0308 	orr.w	r3, r3, #8
 8002d1c:	6013      	str	r3, [r2, #0]
 8002d1e:	4b63      	ldr	r3, [pc, #396]	; (8002eac <HAL_RCC_OscConfig+0x274>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2a:	4960      	ldr	r1, [pc, #384]	; (8002eac <HAL_RCC_OscConfig+0x274>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d30:	4b5e      	ldr	r3, [pc, #376]	; (8002eac <HAL_RCC_OscConfig+0x274>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	021b      	lsls	r3, r3, #8
 8002d3e:	495b      	ldr	r1, [pc, #364]	; (8002eac <HAL_RCC_OscConfig+0x274>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d44:	6a3b      	ldr	r3, [r7, #32]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d109      	bne.n	8002d5e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f000 fdec 	bl	800392c <RCC_SetFlashLatencyFromMSIRange>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e3de      	b.n	800351c <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d5e:	f000 fd21 	bl	80037a4 <HAL_RCC_GetSysClockFreq>
 8002d62:	4602      	mov	r2, r0
 8002d64:	4b51      	ldr	r3, [pc, #324]	; (8002eac <HAL_RCC_OscConfig+0x274>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	091b      	lsrs	r3, r3, #4
 8002d6a:	f003 030f 	and.w	r3, r3, #15
 8002d6e:	4950      	ldr	r1, [pc, #320]	; (8002eb0 <HAL_RCC_OscConfig+0x278>)
 8002d70:	5ccb      	ldrb	r3, [r1, r3]
 8002d72:	f003 031f 	and.w	r3, r3, #31
 8002d76:	fa22 f303 	lsr.w	r3, r2, r3
 8002d7a:	4a4e      	ldr	r2, [pc, #312]	; (8002eb4 <HAL_RCC_OscConfig+0x27c>)
 8002d7c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002d7e:	4b4e      	ldr	r3, [pc, #312]	; (8002eb8 <HAL_RCC_OscConfig+0x280>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7fe fd04 	bl	8001790 <HAL_InitTick>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8002d8c:	7dfb      	ldrb	r3, [r7, #23]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d052      	beq.n	8002e38 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8002d92:	7dfb      	ldrb	r3, [r7, #23]
 8002d94:	e3c2      	b.n	800351c <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d032      	beq.n	8002e04 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d9e:	4b43      	ldr	r3, [pc, #268]	; (8002eac <HAL_RCC_OscConfig+0x274>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a42      	ldr	r2, [pc, #264]	; (8002eac <HAL_RCC_OscConfig+0x274>)
 8002da4:	f043 0301 	orr.w	r3, r3, #1
 8002da8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002daa:	f7fe fd41 	bl	8001830 <HAL_GetTick>
 8002dae:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002db0:	e008      	b.n	8002dc4 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002db2:	f7fe fd3d 	bl	8001830 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e3ab      	b.n	800351c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002dc4:	4b39      	ldr	r3, [pc, #228]	; (8002eac <HAL_RCC_OscConfig+0x274>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d0f0      	beq.n	8002db2 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dd0:	4b36      	ldr	r3, [pc, #216]	; (8002eac <HAL_RCC_OscConfig+0x274>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a35      	ldr	r2, [pc, #212]	; (8002eac <HAL_RCC_OscConfig+0x274>)
 8002dd6:	f043 0308 	orr.w	r3, r3, #8
 8002dda:	6013      	str	r3, [r2, #0]
 8002ddc:	4b33      	ldr	r3, [pc, #204]	; (8002eac <HAL_RCC_OscConfig+0x274>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de8:	4930      	ldr	r1, [pc, #192]	; (8002eac <HAL_RCC_OscConfig+0x274>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dee:	4b2f      	ldr	r3, [pc, #188]	; (8002eac <HAL_RCC_OscConfig+0x274>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	021b      	lsls	r3, r3, #8
 8002dfc:	492b      	ldr	r1, [pc, #172]	; (8002eac <HAL_RCC_OscConfig+0x274>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	604b      	str	r3, [r1, #4]
 8002e02:	e01a      	b.n	8002e3a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e04:	4b29      	ldr	r3, [pc, #164]	; (8002eac <HAL_RCC_OscConfig+0x274>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a28      	ldr	r2, [pc, #160]	; (8002eac <HAL_RCC_OscConfig+0x274>)
 8002e0a:	f023 0301 	bic.w	r3, r3, #1
 8002e0e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e10:	f7fe fd0e 	bl	8001830 <HAL_GetTick>
 8002e14:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e18:	f7fe fd0a 	bl	8001830 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e378      	b.n	800351c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e2a:	4b20      	ldr	r3, [pc, #128]	; (8002eac <HAL_RCC_OscConfig+0x274>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1f0      	bne.n	8002e18 <HAL_RCC_OscConfig+0x1e0>
 8002e36:	e000      	b.n	8002e3a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e38:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d073      	beq.n	8002f2e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002e46:	6a3b      	ldr	r3, [r7, #32]
 8002e48:	2b08      	cmp	r3, #8
 8002e4a:	d005      	beq.n	8002e58 <HAL_RCC_OscConfig+0x220>
 8002e4c:	6a3b      	ldr	r3, [r7, #32]
 8002e4e:	2b0c      	cmp	r3, #12
 8002e50:	d10e      	bne.n	8002e70 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	2b03      	cmp	r3, #3
 8002e56:	d10b      	bne.n	8002e70 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e58:	4b14      	ldr	r3, [pc, #80]	; (8002eac <HAL_RCC_OscConfig+0x274>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d063      	beq.n	8002f2c <HAL_RCC_OscConfig+0x2f4>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d15f      	bne.n	8002f2c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e355      	b.n	800351c <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e78:	d106      	bne.n	8002e88 <HAL_RCC_OscConfig+0x250>
 8002e7a:	4b0c      	ldr	r3, [pc, #48]	; (8002eac <HAL_RCC_OscConfig+0x274>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a0b      	ldr	r2, [pc, #44]	; (8002eac <HAL_RCC_OscConfig+0x274>)
 8002e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e84:	6013      	str	r3, [r2, #0]
 8002e86:	e025      	b.n	8002ed4 <HAL_RCC_OscConfig+0x29c>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e90:	d114      	bne.n	8002ebc <HAL_RCC_OscConfig+0x284>
 8002e92:	4b06      	ldr	r3, [pc, #24]	; (8002eac <HAL_RCC_OscConfig+0x274>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a05      	ldr	r2, [pc, #20]	; (8002eac <HAL_RCC_OscConfig+0x274>)
 8002e98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e9c:	6013      	str	r3, [r2, #0]
 8002e9e:	4b03      	ldr	r3, [pc, #12]	; (8002eac <HAL_RCC_OscConfig+0x274>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a02      	ldr	r2, [pc, #8]	; (8002eac <HAL_RCC_OscConfig+0x274>)
 8002ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ea8:	6013      	str	r3, [r2, #0]
 8002eaa:	e013      	b.n	8002ed4 <HAL_RCC_OscConfig+0x29c>
 8002eac:	40021000 	.word	0x40021000
 8002eb0:	0800cb6c 	.word	0x0800cb6c
 8002eb4:	20000004 	.word	0x20000004
 8002eb8:	20000008 	.word	0x20000008
 8002ebc:	4b8f      	ldr	r3, [pc, #572]	; (80030fc <HAL_RCC_OscConfig+0x4c4>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a8e      	ldr	r2, [pc, #568]	; (80030fc <HAL_RCC_OscConfig+0x4c4>)
 8002ec2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ec6:	6013      	str	r3, [r2, #0]
 8002ec8:	4b8c      	ldr	r3, [pc, #560]	; (80030fc <HAL_RCC_OscConfig+0x4c4>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a8b      	ldr	r2, [pc, #556]	; (80030fc <HAL_RCC_OscConfig+0x4c4>)
 8002ece:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ed2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d013      	beq.n	8002f04 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002edc:	f7fe fca8 	bl	8001830 <HAL_GetTick>
 8002ee0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ee4:	f7fe fca4 	bl	8001830 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b64      	cmp	r3, #100	; 0x64
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e312      	b.n	800351c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ef6:	4b81      	ldr	r3, [pc, #516]	; (80030fc <HAL_RCC_OscConfig+0x4c4>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d0f0      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x2ac>
 8002f02:	e014      	b.n	8002f2e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f04:	f7fe fc94 	bl	8001830 <HAL_GetTick>
 8002f08:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f0c:	f7fe fc90 	bl	8001830 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b64      	cmp	r3, #100	; 0x64
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e2fe      	b.n	800351c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f1e:	4b77      	ldr	r3, [pc, #476]	; (80030fc <HAL_RCC_OscConfig+0x4c4>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1f0      	bne.n	8002f0c <HAL_RCC_OscConfig+0x2d4>
 8002f2a:	e000      	b.n	8002f2e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d060      	beq.n	8002ffc <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002f3a:	6a3b      	ldr	r3, [r7, #32]
 8002f3c:	2b04      	cmp	r3, #4
 8002f3e:	d005      	beq.n	8002f4c <HAL_RCC_OscConfig+0x314>
 8002f40:	6a3b      	ldr	r3, [r7, #32]
 8002f42:	2b0c      	cmp	r3, #12
 8002f44:	d119      	bne.n	8002f7a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d116      	bne.n	8002f7a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f4c:	4b6b      	ldr	r3, [pc, #428]	; (80030fc <HAL_RCC_OscConfig+0x4c4>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d005      	beq.n	8002f64 <HAL_RCC_OscConfig+0x32c>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e2db      	b.n	800351c <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f64:	4b65      	ldr	r3, [pc, #404]	; (80030fc <HAL_RCC_OscConfig+0x4c4>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	061b      	lsls	r3, r3, #24
 8002f72:	4962      	ldr	r1, [pc, #392]	; (80030fc <HAL_RCC_OscConfig+0x4c4>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f78:	e040      	b.n	8002ffc <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d023      	beq.n	8002fca <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f82:	4b5e      	ldr	r3, [pc, #376]	; (80030fc <HAL_RCC_OscConfig+0x4c4>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a5d      	ldr	r2, [pc, #372]	; (80030fc <HAL_RCC_OscConfig+0x4c4>)
 8002f88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f8e:	f7fe fc4f 	bl	8001830 <HAL_GetTick>
 8002f92:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f94:	e008      	b.n	8002fa8 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f96:	f7fe fc4b 	bl	8001830 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e2b9      	b.n	800351c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fa8:	4b54      	ldr	r3, [pc, #336]	; (80030fc <HAL_RCC_OscConfig+0x4c4>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d0f0      	beq.n	8002f96 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb4:	4b51      	ldr	r3, [pc, #324]	; (80030fc <HAL_RCC_OscConfig+0x4c4>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	061b      	lsls	r3, r3, #24
 8002fc2:	494e      	ldr	r1, [pc, #312]	; (80030fc <HAL_RCC_OscConfig+0x4c4>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	604b      	str	r3, [r1, #4]
 8002fc8:	e018      	b.n	8002ffc <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fca:	4b4c      	ldr	r3, [pc, #304]	; (80030fc <HAL_RCC_OscConfig+0x4c4>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a4b      	ldr	r2, [pc, #300]	; (80030fc <HAL_RCC_OscConfig+0x4c4>)
 8002fd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd6:	f7fe fc2b 	bl	8001830 <HAL_GetTick>
 8002fda:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fdc:	e008      	b.n	8002ff0 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fde:	f7fe fc27 	bl	8001830 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d901      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e295      	b.n	800351c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ff0:	4b42      	ldr	r3, [pc, #264]	; (80030fc <HAL_RCC_OscConfig+0x4c4>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1f0      	bne.n	8002fde <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0308 	and.w	r3, r3, #8
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 8082 	beq.w	800310e <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d05f      	beq.n	80030d2 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8003012:	4b3a      	ldr	r3, [pc, #232]	; (80030fc <HAL_RCC_OscConfig+0x4c4>)
 8003014:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003018:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	699a      	ldr	r2, [r3, #24]
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	f003 0310 	and.w	r3, r3, #16
 8003024:	429a      	cmp	r2, r3
 8003026:	d037      	beq.n	8003098 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d006      	beq.n	8003040 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e26d      	b.n	800351c <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b00      	cmp	r3, #0
 8003048:	d01b      	beq.n	8003082 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 800304a:	4b2c      	ldr	r3, [pc, #176]	; (80030fc <HAL_RCC_OscConfig+0x4c4>)
 800304c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003050:	4a2a      	ldr	r2, [pc, #168]	; (80030fc <HAL_RCC_OscConfig+0x4c4>)
 8003052:	f023 0301 	bic.w	r3, r3, #1
 8003056:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800305a:	f7fe fbe9 	bl	8001830 <HAL_GetTick>
 800305e:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003060:	e008      	b.n	8003074 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003062:	f7fe fbe5 	bl	8001830 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b11      	cmp	r3, #17
 800306e:	d901      	bls.n	8003074 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e253      	b.n	800351c <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003074:	4b21      	ldr	r3, [pc, #132]	; (80030fc <HAL_RCC_OscConfig+0x4c4>)
 8003076:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1ef      	bne.n	8003062 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8003082:	4b1e      	ldr	r3, [pc, #120]	; (80030fc <HAL_RCC_OscConfig+0x4c4>)
 8003084:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003088:	f023 0210 	bic.w	r2, r3, #16
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	491a      	ldr	r1, [pc, #104]	; (80030fc <HAL_RCC_OscConfig+0x4c4>)
 8003092:	4313      	orrs	r3, r2
 8003094:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003098:	4b18      	ldr	r3, [pc, #96]	; (80030fc <HAL_RCC_OscConfig+0x4c4>)
 800309a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800309e:	4a17      	ldr	r2, [pc, #92]	; (80030fc <HAL_RCC_OscConfig+0x4c4>)
 80030a0:	f043 0301 	orr.w	r3, r3, #1
 80030a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a8:	f7fe fbc2 	bl	8001830 <HAL_GetTick>
 80030ac:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030b0:	f7fe fbbe 	bl	8001830 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b11      	cmp	r3, #17
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e22c      	b.n	800351c <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030c2:	4b0e      	ldr	r3, [pc, #56]	; (80030fc <HAL_RCC_OscConfig+0x4c4>)
 80030c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d0ef      	beq.n	80030b0 <HAL_RCC_OscConfig+0x478>
 80030d0:	e01d      	b.n	800310e <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030d2:	4b0a      	ldr	r3, [pc, #40]	; (80030fc <HAL_RCC_OscConfig+0x4c4>)
 80030d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030d8:	4a08      	ldr	r2, [pc, #32]	; (80030fc <HAL_RCC_OscConfig+0x4c4>)
 80030da:	f023 0301 	bic.w	r3, r3, #1
 80030de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e2:	f7fe fba5 	bl	8001830 <HAL_GetTick>
 80030e6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030e8:	e00a      	b.n	8003100 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030ea:	f7fe fba1 	bl	8001830 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b11      	cmp	r3, #17
 80030f6:	d903      	bls.n	8003100 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e20f      	b.n	800351c <HAL_RCC_OscConfig+0x8e4>
 80030fc:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003100:	4b83      	ldr	r3, [pc, #524]	; (8003310 <HAL_RCC_OscConfig+0x6d8>)
 8003102:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1ed      	bne.n	80030ea <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0304 	and.w	r3, r3, #4
 8003116:	2b00      	cmp	r3, #0
 8003118:	f000 80bd 	beq.w	8003296 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800311c:	2300      	movs	r3, #0
 800311e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003122:	4b7b      	ldr	r3, [pc, #492]	; (8003310 <HAL_RCC_OscConfig+0x6d8>)
 8003124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10e      	bne.n	800314c <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800312e:	4b78      	ldr	r3, [pc, #480]	; (8003310 <HAL_RCC_OscConfig+0x6d8>)
 8003130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003132:	4a77      	ldr	r2, [pc, #476]	; (8003310 <HAL_RCC_OscConfig+0x6d8>)
 8003134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003138:	6593      	str	r3, [r2, #88]	; 0x58
 800313a:	4b75      	ldr	r3, [pc, #468]	; (8003310 <HAL_RCC_OscConfig+0x6d8>)
 800313c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800313e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003142:	60fb      	str	r3, [r7, #12]
 8003144:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003146:	2301      	movs	r3, #1
 8003148:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800314c:	4b71      	ldr	r3, [pc, #452]	; (8003314 <HAL_RCC_OscConfig+0x6dc>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003154:	2b00      	cmp	r3, #0
 8003156:	d118      	bne.n	800318a <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003158:	4b6e      	ldr	r3, [pc, #440]	; (8003314 <HAL_RCC_OscConfig+0x6dc>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a6d      	ldr	r2, [pc, #436]	; (8003314 <HAL_RCC_OscConfig+0x6dc>)
 800315e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003162:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003164:	f7fe fb64 	bl	8001830 <HAL_GetTick>
 8003168:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800316c:	f7fe fb60 	bl	8001830 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e1ce      	b.n	800351c <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800317e:	4b65      	ldr	r3, [pc, #404]	; (8003314 <HAL_RCC_OscConfig+0x6dc>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003186:	2b00      	cmp	r3, #0
 8003188:	d0f0      	beq.n	800316c <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b00      	cmp	r3, #0
 8003194:	d02c      	beq.n	80031f0 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8003196:	4b5e      	ldr	r3, [pc, #376]	; (8003310 <HAL_RCC_OscConfig+0x6d8>)
 8003198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800319c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a8:	4959      	ldr	r1, [pc, #356]	; (8003310 <HAL_RCC_OscConfig+0x6d8>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f003 0304 	and.w	r3, r3, #4
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d010      	beq.n	80031de <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80031bc:	4b54      	ldr	r3, [pc, #336]	; (8003310 <HAL_RCC_OscConfig+0x6d8>)
 80031be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c2:	4a53      	ldr	r2, [pc, #332]	; (8003310 <HAL_RCC_OscConfig+0x6d8>)
 80031c4:	f043 0304 	orr.w	r3, r3, #4
 80031c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80031cc:	4b50      	ldr	r3, [pc, #320]	; (8003310 <HAL_RCC_OscConfig+0x6d8>)
 80031ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d2:	4a4f      	ldr	r2, [pc, #316]	; (8003310 <HAL_RCC_OscConfig+0x6d8>)
 80031d4:	f043 0301 	orr.w	r3, r3, #1
 80031d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031dc:	e018      	b.n	8003210 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80031de:	4b4c      	ldr	r3, [pc, #304]	; (8003310 <HAL_RCC_OscConfig+0x6d8>)
 80031e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e4:	4a4a      	ldr	r2, [pc, #296]	; (8003310 <HAL_RCC_OscConfig+0x6d8>)
 80031e6:	f043 0301 	orr.w	r3, r3, #1
 80031ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031ee:	e00f      	b.n	8003210 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80031f0:	4b47      	ldr	r3, [pc, #284]	; (8003310 <HAL_RCC_OscConfig+0x6d8>)
 80031f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f6:	4a46      	ldr	r2, [pc, #280]	; (8003310 <HAL_RCC_OscConfig+0x6d8>)
 80031f8:	f023 0301 	bic.w	r3, r3, #1
 80031fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003200:	4b43      	ldr	r3, [pc, #268]	; (8003310 <HAL_RCC_OscConfig+0x6d8>)
 8003202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003206:	4a42      	ldr	r2, [pc, #264]	; (8003310 <HAL_RCC_OscConfig+0x6d8>)
 8003208:	f023 0304 	bic.w	r3, r3, #4
 800320c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d016      	beq.n	8003246 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003218:	f7fe fb0a 	bl	8001830 <HAL_GetTick>
 800321c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800321e:	e00a      	b.n	8003236 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003220:	f7fe fb06 	bl	8001830 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	f241 3288 	movw	r2, #5000	; 0x1388
 800322e:	4293      	cmp	r3, r2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e172      	b.n	800351c <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003236:	4b36      	ldr	r3, [pc, #216]	; (8003310 <HAL_RCC_OscConfig+0x6d8>)
 8003238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d0ed      	beq.n	8003220 <HAL_RCC_OscConfig+0x5e8>
 8003244:	e01d      	b.n	8003282 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003246:	f7fe faf3 	bl	8001830 <HAL_GetTick>
 800324a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800324c:	e00a      	b.n	8003264 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800324e:	f7fe faef 	bl	8001830 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	f241 3288 	movw	r2, #5000	; 0x1388
 800325c:	4293      	cmp	r3, r2
 800325e:	d901      	bls.n	8003264 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e15b      	b.n	800351c <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003264:	4b2a      	ldr	r3, [pc, #168]	; (8003310 <HAL_RCC_OscConfig+0x6d8>)
 8003266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1ed      	bne.n	800324e <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8003272:	4b27      	ldr	r3, [pc, #156]	; (8003310 <HAL_RCC_OscConfig+0x6d8>)
 8003274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003278:	4a25      	ldr	r2, [pc, #148]	; (8003310 <HAL_RCC_OscConfig+0x6d8>)
 800327a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800327e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003282:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003286:	2b01      	cmp	r3, #1
 8003288:	d105      	bne.n	8003296 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800328a:	4b21      	ldr	r3, [pc, #132]	; (8003310 <HAL_RCC_OscConfig+0x6d8>)
 800328c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800328e:	4a20      	ldr	r2, [pc, #128]	; (8003310 <HAL_RCC_OscConfig+0x6d8>)
 8003290:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003294:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0320 	and.w	r3, r3, #32
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d041      	beq.n	8003326 <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d01c      	beq.n	80032e4 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80032aa:	4b19      	ldr	r3, [pc, #100]	; (8003310 <HAL_RCC_OscConfig+0x6d8>)
 80032ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032b0:	4a17      	ldr	r2, [pc, #92]	; (8003310 <HAL_RCC_OscConfig+0x6d8>)
 80032b2:	f043 0301 	orr.w	r3, r3, #1
 80032b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ba:	f7fe fab9 	bl	8001830 <HAL_GetTick>
 80032be:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032c2:	f7fe fab5 	bl	8001830 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e123      	b.n	800351c <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80032d4:	4b0e      	ldr	r3, [pc, #56]	; (8003310 <HAL_RCC_OscConfig+0x6d8>)
 80032d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d0ef      	beq.n	80032c2 <HAL_RCC_OscConfig+0x68a>
 80032e2:	e020      	b.n	8003326 <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80032e4:	4b0a      	ldr	r3, [pc, #40]	; (8003310 <HAL_RCC_OscConfig+0x6d8>)
 80032e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032ea:	4a09      	ldr	r2, [pc, #36]	; (8003310 <HAL_RCC_OscConfig+0x6d8>)
 80032ec:	f023 0301 	bic.w	r3, r3, #1
 80032f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f4:	f7fe fa9c 	bl	8001830 <HAL_GetTick>
 80032f8:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032fa:	e00d      	b.n	8003318 <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032fc:	f7fe fa98 	bl	8001830 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d906      	bls.n	8003318 <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e106      	b.n	800351c <HAL_RCC_OscConfig+0x8e4>
 800330e:	bf00      	nop
 8003310:	40021000 	.word	0x40021000
 8003314:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003318:	4b82      	ldr	r3, [pc, #520]	; (8003524 <HAL_RCC_OscConfig+0x8ec>)
 800331a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1ea      	bne.n	80032fc <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332a:	2b00      	cmp	r3, #0
 800332c:	f000 80f5 	beq.w	800351a <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003334:	2b02      	cmp	r3, #2
 8003336:	f040 80cb 	bne.w	80034d0 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800333a:	4b7a      	ldr	r3, [pc, #488]	; (8003524 <HAL_RCC_OscConfig+0x8ec>)
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	f003 0203 	and.w	r2, r3, #3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334a:	429a      	cmp	r2, r3
 800334c:	d12c      	bne.n	80033a8 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003358:	3b01      	subs	r3, #1
 800335a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800335c:	429a      	cmp	r2, r3
 800335e:	d123      	bne.n	80033a8 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800336a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800336c:	429a      	cmp	r2, r3
 800336e:	d11b      	bne.n	80033a8 <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800337a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800337c:	429a      	cmp	r2, r3
 800337e:	d113      	bne.n	80033a8 <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338a:	085b      	lsrs	r3, r3, #1
 800338c:	3b01      	subs	r3, #1
 800338e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003390:	429a      	cmp	r2, r3
 8003392:	d109      	bne.n	80033a8 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800339e:	085b      	lsrs	r3, r3, #1
 80033a0:	3b01      	subs	r3, #1
 80033a2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d06d      	beq.n	8003484 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033a8:	6a3b      	ldr	r3, [r7, #32]
 80033aa:	2b0c      	cmp	r3, #12
 80033ac:	d068      	beq.n	8003480 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80033ae:	4b5d      	ldr	r3, [pc, #372]	; (8003524 <HAL_RCC_OscConfig+0x8ec>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d105      	bne.n	80033c6 <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80033ba:	4b5a      	ldr	r3, [pc, #360]	; (8003524 <HAL_RCC_OscConfig+0x8ec>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e0a8      	b.n	800351c <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80033ca:	4b56      	ldr	r3, [pc, #344]	; (8003524 <HAL_RCC_OscConfig+0x8ec>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a55      	ldr	r2, [pc, #340]	; (8003524 <HAL_RCC_OscConfig+0x8ec>)
 80033d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033d4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033d6:	f7fe fa2b 	bl	8001830 <HAL_GetTick>
 80033da:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033dc:	e008      	b.n	80033f0 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033de:	f7fe fa27 	bl	8001830 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d901      	bls.n	80033f0 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e095      	b.n	800351c <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033f0:	4b4c      	ldr	r3, [pc, #304]	; (8003524 <HAL_RCC_OscConfig+0x8ec>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1f0      	bne.n	80033de <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033fc:	4b49      	ldr	r3, [pc, #292]	; (8003524 <HAL_RCC_OscConfig+0x8ec>)
 80033fe:	68da      	ldr	r2, [r3, #12]
 8003400:	4b49      	ldr	r3, [pc, #292]	; (8003528 <HAL_RCC_OscConfig+0x8f0>)
 8003402:	4013      	ands	r3, r2
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800340c:	3a01      	subs	r2, #1
 800340e:	0112      	lsls	r2, r2, #4
 8003410:	4311      	orrs	r1, r2
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003416:	0212      	lsls	r2, r2, #8
 8003418:	4311      	orrs	r1, r2
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800341e:	0852      	lsrs	r2, r2, #1
 8003420:	3a01      	subs	r2, #1
 8003422:	0552      	lsls	r2, r2, #21
 8003424:	4311      	orrs	r1, r2
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800342a:	0852      	lsrs	r2, r2, #1
 800342c:	3a01      	subs	r2, #1
 800342e:	0652      	lsls	r2, r2, #25
 8003430:	4311      	orrs	r1, r2
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003436:	06d2      	lsls	r2, r2, #27
 8003438:	430a      	orrs	r2, r1
 800343a:	493a      	ldr	r1, [pc, #232]	; (8003524 <HAL_RCC_OscConfig+0x8ec>)
 800343c:	4313      	orrs	r3, r2
 800343e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003440:	4b38      	ldr	r3, [pc, #224]	; (8003524 <HAL_RCC_OscConfig+0x8ec>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a37      	ldr	r2, [pc, #220]	; (8003524 <HAL_RCC_OscConfig+0x8ec>)
 8003446:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800344a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800344c:	4b35      	ldr	r3, [pc, #212]	; (8003524 <HAL_RCC_OscConfig+0x8ec>)
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	4a34      	ldr	r2, [pc, #208]	; (8003524 <HAL_RCC_OscConfig+0x8ec>)
 8003452:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003456:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003458:	f7fe f9ea 	bl	8001830 <HAL_GetTick>
 800345c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003460:	f7fe f9e6 	bl	8001830 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e054      	b.n	800351c <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003472:	4b2c      	ldr	r3, [pc, #176]	; (8003524 <HAL_RCC_OscConfig+0x8ec>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d0f0      	beq.n	8003460 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800347e:	e04c      	b.n	800351a <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e04b      	b.n	800351c <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003484:	4b27      	ldr	r3, [pc, #156]	; (8003524 <HAL_RCC_OscConfig+0x8ec>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d144      	bne.n	800351a <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003490:	4b24      	ldr	r3, [pc, #144]	; (8003524 <HAL_RCC_OscConfig+0x8ec>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a23      	ldr	r2, [pc, #140]	; (8003524 <HAL_RCC_OscConfig+0x8ec>)
 8003496:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800349a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800349c:	4b21      	ldr	r3, [pc, #132]	; (8003524 <HAL_RCC_OscConfig+0x8ec>)
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	4a20      	ldr	r2, [pc, #128]	; (8003524 <HAL_RCC_OscConfig+0x8ec>)
 80034a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034a8:	f7fe f9c2 	bl	8001830 <HAL_GetTick>
 80034ac:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034ae:	e008      	b.n	80034c2 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034b0:	f7fe f9be 	bl	8001830 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e02c      	b.n	800351c <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034c2:	4b18      	ldr	r3, [pc, #96]	; (8003524 <HAL_RCC_OscConfig+0x8ec>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d0f0      	beq.n	80034b0 <HAL_RCC_OscConfig+0x878>
 80034ce:	e024      	b.n	800351a <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034d0:	6a3b      	ldr	r3, [r7, #32]
 80034d2:	2b0c      	cmp	r3, #12
 80034d4:	d01f      	beq.n	8003516 <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034d6:	4b13      	ldr	r3, [pc, #76]	; (8003524 <HAL_RCC_OscConfig+0x8ec>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a12      	ldr	r2, [pc, #72]	; (8003524 <HAL_RCC_OscConfig+0x8ec>)
 80034dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e2:	f7fe f9a5 	bl	8001830 <HAL_GetTick>
 80034e6:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034e8:	e008      	b.n	80034fc <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ea:	f7fe f9a1 	bl	8001830 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e00f      	b.n	800351c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034fc:	4b09      	ldr	r3, [pc, #36]	; (8003524 <HAL_RCC_OscConfig+0x8ec>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d1f0      	bne.n	80034ea <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003508:	4b06      	ldr	r3, [pc, #24]	; (8003524 <HAL_RCC_OscConfig+0x8ec>)
 800350a:	68da      	ldr	r2, [r3, #12]
 800350c:	4905      	ldr	r1, [pc, #20]	; (8003524 <HAL_RCC_OscConfig+0x8ec>)
 800350e:	4b07      	ldr	r3, [pc, #28]	; (800352c <HAL_RCC_OscConfig+0x8f4>)
 8003510:	4013      	ands	r3, r2
 8003512:	60cb      	str	r3, [r1, #12]
 8003514:	e001      	b.n	800351a <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e000      	b.n	800351c <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3728      	adds	r7, #40	; 0x28
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	40021000 	.word	0x40021000
 8003528:	019d800c 	.word	0x019d800c
 800352c:	feeefffc 	.word	0xfeeefffc

08003530 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800353a:	2300      	movs	r3, #0
 800353c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d101      	bne.n	8003548 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e11d      	b.n	8003784 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003548:	4b90      	ldr	r3, [pc, #576]	; (800378c <HAL_RCC_ClockConfig+0x25c>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 030f 	and.w	r3, r3, #15
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	429a      	cmp	r2, r3
 8003554:	d910      	bls.n	8003578 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003556:	4b8d      	ldr	r3, [pc, #564]	; (800378c <HAL_RCC_ClockConfig+0x25c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f023 020f 	bic.w	r2, r3, #15
 800355e:	498b      	ldr	r1, [pc, #556]	; (800378c <HAL_RCC_ClockConfig+0x25c>)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	4313      	orrs	r3, r2
 8003564:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003566:	4b89      	ldr	r3, [pc, #548]	; (800378c <HAL_RCC_ClockConfig+0x25c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 030f 	and.w	r3, r3, #15
 800356e:	683a      	ldr	r2, [r7, #0]
 8003570:	429a      	cmp	r2, r3
 8003572:	d001      	beq.n	8003578 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e105      	b.n	8003784 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d010      	beq.n	80035a6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	4b81      	ldr	r3, [pc, #516]	; (8003790 <HAL_RCC_ClockConfig+0x260>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003590:	429a      	cmp	r2, r3
 8003592:	d908      	bls.n	80035a6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003594:	4b7e      	ldr	r3, [pc, #504]	; (8003790 <HAL_RCC_ClockConfig+0x260>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	497b      	ldr	r1, [pc, #492]	; (8003790 <HAL_RCC_ClockConfig+0x260>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d079      	beq.n	80036a6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	2b03      	cmp	r3, #3
 80035b8:	d11e      	bne.n	80035f8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ba:	4b75      	ldr	r3, [pc, #468]	; (8003790 <HAL_RCC_ClockConfig+0x260>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d101      	bne.n	80035ca <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e0dc      	b.n	8003784 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80035ca:	f000 fa09 	bl	80039e0 <RCC_GetSysClockFreqFromPLLSource>
 80035ce:	4603      	mov	r3, r0
 80035d0:	4a70      	ldr	r2, [pc, #448]	; (8003794 <HAL_RCC_ClockConfig+0x264>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d946      	bls.n	8003664 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80035d6:	4b6e      	ldr	r3, [pc, #440]	; (8003790 <HAL_RCC_ClockConfig+0x260>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d140      	bne.n	8003664 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80035e2:	4b6b      	ldr	r3, [pc, #428]	; (8003790 <HAL_RCC_ClockConfig+0x260>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035ea:	4a69      	ldr	r2, [pc, #420]	; (8003790 <HAL_RCC_ClockConfig+0x260>)
 80035ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035f0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80035f2:	2380      	movs	r3, #128	; 0x80
 80035f4:	617b      	str	r3, [r7, #20]
 80035f6:	e035      	b.n	8003664 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d107      	bne.n	8003610 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003600:	4b63      	ldr	r3, [pc, #396]	; (8003790 <HAL_RCC_ClockConfig+0x260>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d115      	bne.n	8003638 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e0b9      	b.n	8003784 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d107      	bne.n	8003628 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003618:	4b5d      	ldr	r3, [pc, #372]	; (8003790 <HAL_RCC_ClockConfig+0x260>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d109      	bne.n	8003638 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e0ad      	b.n	8003784 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003628:	4b59      	ldr	r3, [pc, #356]	; (8003790 <HAL_RCC_ClockConfig+0x260>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003630:	2b00      	cmp	r3, #0
 8003632:	d101      	bne.n	8003638 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e0a5      	b.n	8003784 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003638:	f000 f8b4 	bl	80037a4 <HAL_RCC_GetSysClockFreq>
 800363c:	4603      	mov	r3, r0
 800363e:	4a55      	ldr	r2, [pc, #340]	; (8003794 <HAL_RCC_ClockConfig+0x264>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d90f      	bls.n	8003664 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003644:	4b52      	ldr	r3, [pc, #328]	; (8003790 <HAL_RCC_ClockConfig+0x260>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d109      	bne.n	8003664 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003650:	4b4f      	ldr	r3, [pc, #316]	; (8003790 <HAL_RCC_ClockConfig+0x260>)
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003658:	4a4d      	ldr	r2, [pc, #308]	; (8003790 <HAL_RCC_ClockConfig+0x260>)
 800365a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800365e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003660:	2380      	movs	r3, #128	; 0x80
 8003662:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003664:	4b4a      	ldr	r3, [pc, #296]	; (8003790 <HAL_RCC_ClockConfig+0x260>)
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f023 0203 	bic.w	r2, r3, #3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	4947      	ldr	r1, [pc, #284]	; (8003790 <HAL_RCC_ClockConfig+0x260>)
 8003672:	4313      	orrs	r3, r2
 8003674:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003676:	f7fe f8db 	bl	8001830 <HAL_GetTick>
 800367a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800367c:	e00a      	b.n	8003694 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800367e:	f7fe f8d7 	bl	8001830 <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	f241 3288 	movw	r2, #5000	; 0x1388
 800368c:	4293      	cmp	r3, r2
 800368e:	d901      	bls.n	8003694 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e077      	b.n	8003784 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003694:	4b3e      	ldr	r3, [pc, #248]	; (8003790 <HAL_RCC_ClockConfig+0x260>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f003 020c 	and.w	r2, r3, #12
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d1eb      	bne.n	800367e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	2b80      	cmp	r3, #128	; 0x80
 80036aa:	d105      	bne.n	80036b8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80036ac:	4b38      	ldr	r3, [pc, #224]	; (8003790 <HAL_RCC_ClockConfig+0x260>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	4a37      	ldr	r2, [pc, #220]	; (8003790 <HAL_RCC_ClockConfig+0x260>)
 80036b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036b6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d010      	beq.n	80036e6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689a      	ldr	r2, [r3, #8]
 80036c8:	4b31      	ldr	r3, [pc, #196]	; (8003790 <HAL_RCC_ClockConfig+0x260>)
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d208      	bcs.n	80036e6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036d4:	4b2e      	ldr	r3, [pc, #184]	; (8003790 <HAL_RCC_ClockConfig+0x260>)
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	492b      	ldr	r1, [pc, #172]	; (8003790 <HAL_RCC_ClockConfig+0x260>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036e6:	4b29      	ldr	r3, [pc, #164]	; (800378c <HAL_RCC_ClockConfig+0x25c>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 030f 	and.w	r3, r3, #15
 80036ee:	683a      	ldr	r2, [r7, #0]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d210      	bcs.n	8003716 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036f4:	4b25      	ldr	r3, [pc, #148]	; (800378c <HAL_RCC_ClockConfig+0x25c>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f023 020f 	bic.w	r2, r3, #15
 80036fc:	4923      	ldr	r1, [pc, #140]	; (800378c <HAL_RCC_ClockConfig+0x25c>)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	4313      	orrs	r3, r2
 8003702:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003704:	4b21      	ldr	r3, [pc, #132]	; (800378c <HAL_RCC_ClockConfig+0x25c>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 030f 	and.w	r3, r3, #15
 800370c:	683a      	ldr	r2, [r7, #0]
 800370e:	429a      	cmp	r2, r3
 8003710:	d001      	beq.n	8003716 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e036      	b.n	8003784 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0304 	and.w	r3, r3, #4
 800371e:	2b00      	cmp	r3, #0
 8003720:	d008      	beq.n	8003734 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003722:	4b1b      	ldr	r3, [pc, #108]	; (8003790 <HAL_RCC_ClockConfig+0x260>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	4918      	ldr	r1, [pc, #96]	; (8003790 <HAL_RCC_ClockConfig+0x260>)
 8003730:	4313      	orrs	r3, r2
 8003732:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0308 	and.w	r3, r3, #8
 800373c:	2b00      	cmp	r3, #0
 800373e:	d009      	beq.n	8003754 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003740:	4b13      	ldr	r3, [pc, #76]	; (8003790 <HAL_RCC_ClockConfig+0x260>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	00db      	lsls	r3, r3, #3
 800374e:	4910      	ldr	r1, [pc, #64]	; (8003790 <HAL_RCC_ClockConfig+0x260>)
 8003750:	4313      	orrs	r3, r2
 8003752:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003754:	f000 f826 	bl	80037a4 <HAL_RCC_GetSysClockFreq>
 8003758:	4602      	mov	r2, r0
 800375a:	4b0d      	ldr	r3, [pc, #52]	; (8003790 <HAL_RCC_ClockConfig+0x260>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	091b      	lsrs	r3, r3, #4
 8003760:	f003 030f 	and.w	r3, r3, #15
 8003764:	490c      	ldr	r1, [pc, #48]	; (8003798 <HAL_RCC_ClockConfig+0x268>)
 8003766:	5ccb      	ldrb	r3, [r1, r3]
 8003768:	f003 031f 	and.w	r3, r3, #31
 800376c:	fa22 f303 	lsr.w	r3, r2, r3
 8003770:	4a0a      	ldr	r2, [pc, #40]	; (800379c <HAL_RCC_ClockConfig+0x26c>)
 8003772:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003774:	4b0a      	ldr	r3, [pc, #40]	; (80037a0 <HAL_RCC_ClockConfig+0x270>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4618      	mov	r0, r3
 800377a:	f7fe f809 	bl	8001790 <HAL_InitTick>
 800377e:	4603      	mov	r3, r0
 8003780:	73fb      	strb	r3, [r7, #15]

  return status;
 8003782:	7bfb      	ldrb	r3, [r7, #15]
}
 8003784:	4618      	mov	r0, r3
 8003786:	3718      	adds	r7, #24
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	40022000 	.word	0x40022000
 8003790:	40021000 	.word	0x40021000
 8003794:	04c4b400 	.word	0x04c4b400
 8003798:	0800cb6c 	.word	0x0800cb6c
 800379c:	20000004 	.word	0x20000004
 80037a0:	20000008 	.word	0x20000008

080037a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b089      	sub	sp, #36	; 0x24
 80037a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80037aa:	2300      	movs	r3, #0
 80037ac:	61fb      	str	r3, [r7, #28]
 80037ae:	2300      	movs	r3, #0
 80037b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037b2:	4b3e      	ldr	r3, [pc, #248]	; (80038ac <HAL_RCC_GetSysClockFreq+0x108>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 030c 	and.w	r3, r3, #12
 80037ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037bc:	4b3b      	ldr	r3, [pc, #236]	; (80038ac <HAL_RCC_GetSysClockFreq+0x108>)
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	f003 0303 	and.w	r3, r3, #3
 80037c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d005      	beq.n	80037d8 <HAL_RCC_GetSysClockFreq+0x34>
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	2b0c      	cmp	r3, #12
 80037d0:	d121      	bne.n	8003816 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d11e      	bne.n	8003816 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80037d8:	4b34      	ldr	r3, [pc, #208]	; (80038ac <HAL_RCC_GetSysClockFreq+0x108>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0308 	and.w	r3, r3, #8
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d107      	bne.n	80037f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80037e4:	4b31      	ldr	r3, [pc, #196]	; (80038ac <HAL_RCC_GetSysClockFreq+0x108>)
 80037e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037ea:	0a1b      	lsrs	r3, r3, #8
 80037ec:	f003 030f 	and.w	r3, r3, #15
 80037f0:	61fb      	str	r3, [r7, #28]
 80037f2:	e005      	b.n	8003800 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80037f4:	4b2d      	ldr	r3, [pc, #180]	; (80038ac <HAL_RCC_GetSysClockFreq+0x108>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	091b      	lsrs	r3, r3, #4
 80037fa:	f003 030f 	and.w	r3, r3, #15
 80037fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003800:	4a2b      	ldr	r2, [pc, #172]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003808:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d10d      	bne.n	800382c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003814:	e00a      	b.n	800382c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	2b04      	cmp	r3, #4
 800381a:	d102      	bne.n	8003822 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800381c:	4b25      	ldr	r3, [pc, #148]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800381e:	61bb      	str	r3, [r7, #24]
 8003820:	e004      	b.n	800382c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	2b08      	cmp	r3, #8
 8003826:	d101      	bne.n	800382c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003828:	4b23      	ldr	r3, [pc, #140]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x114>)
 800382a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	2b0c      	cmp	r3, #12
 8003830:	d134      	bne.n	800389c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003832:	4b1e      	ldr	r3, [pc, #120]	; (80038ac <HAL_RCC_GetSysClockFreq+0x108>)
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	f003 0303 	and.w	r3, r3, #3
 800383a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	2b02      	cmp	r3, #2
 8003840:	d003      	beq.n	800384a <HAL_RCC_GetSysClockFreq+0xa6>
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	2b03      	cmp	r3, #3
 8003846:	d003      	beq.n	8003850 <HAL_RCC_GetSysClockFreq+0xac>
 8003848:	e005      	b.n	8003856 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800384a:	4b1a      	ldr	r3, [pc, #104]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800384c:	617b      	str	r3, [r7, #20]
      break;
 800384e:	e005      	b.n	800385c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003850:	4b19      	ldr	r3, [pc, #100]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003852:	617b      	str	r3, [r7, #20]
      break;
 8003854:	e002      	b.n	800385c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	617b      	str	r3, [r7, #20]
      break;
 800385a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800385c:	4b13      	ldr	r3, [pc, #76]	; (80038ac <HAL_RCC_GetSysClockFreq+0x108>)
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	091b      	lsrs	r3, r3, #4
 8003862:	f003 030f 	and.w	r3, r3, #15
 8003866:	3301      	adds	r3, #1
 8003868:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800386a:	4b10      	ldr	r3, [pc, #64]	; (80038ac <HAL_RCC_GetSysClockFreq+0x108>)
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	0a1b      	lsrs	r3, r3, #8
 8003870:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003874:	697a      	ldr	r2, [r7, #20]
 8003876:	fb03 f202 	mul.w	r2, r3, r2
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003880:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003882:	4b0a      	ldr	r3, [pc, #40]	; (80038ac <HAL_RCC_GetSysClockFreq+0x108>)
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	0e5b      	lsrs	r3, r3, #25
 8003888:	f003 0303 	and.w	r3, r3, #3
 800388c:	3301      	adds	r3, #1
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	fbb2 f3f3 	udiv	r3, r2, r3
 800389a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800389c:	69bb      	ldr	r3, [r7, #24]
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3724      	adds	r7, #36	; 0x24
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	40021000 	.word	0x40021000
 80038b0:	0800cb84 	.word	0x0800cb84
 80038b4:	00f42400 	.word	0x00f42400
 80038b8:	007a1200 	.word	0x007a1200

080038bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038bc:	b480      	push	{r7}
 80038be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038c0:	4b03      	ldr	r3, [pc, #12]	; (80038d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80038c2:	681b      	ldr	r3, [r3, #0]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	20000004 	.word	0x20000004

080038d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80038d8:	f7ff fff0 	bl	80038bc <HAL_RCC_GetHCLKFreq>
 80038dc:	4602      	mov	r2, r0
 80038de:	4b06      	ldr	r3, [pc, #24]	; (80038f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	0a1b      	lsrs	r3, r3, #8
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	4904      	ldr	r1, [pc, #16]	; (80038fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80038ea:	5ccb      	ldrb	r3, [r1, r3]
 80038ec:	f003 031f 	and.w	r3, r3, #31
 80038f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	40021000 	.word	0x40021000
 80038fc:	0800cb7c 	.word	0x0800cb7c

08003900 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003904:	f7ff ffda 	bl	80038bc <HAL_RCC_GetHCLKFreq>
 8003908:	4602      	mov	r2, r0
 800390a:	4b06      	ldr	r3, [pc, #24]	; (8003924 <HAL_RCC_GetPCLK2Freq+0x24>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	0adb      	lsrs	r3, r3, #11
 8003910:	f003 0307 	and.w	r3, r3, #7
 8003914:	4904      	ldr	r1, [pc, #16]	; (8003928 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003916:	5ccb      	ldrb	r3, [r1, r3]
 8003918:	f003 031f 	and.w	r3, r3, #31
 800391c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003920:	4618      	mov	r0, r3
 8003922:	bd80      	pop	{r7, pc}
 8003924:	40021000 	.word	0x40021000
 8003928:	0800cb7c 	.word	0x0800cb7c

0800392c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003934:	2300      	movs	r3, #0
 8003936:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003938:	4b27      	ldr	r3, [pc, #156]	; (80039d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800393a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d003      	beq.n	800394c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003944:	f7ff f8a4 	bl	8002a90 <HAL_PWREx_GetVoltageRange>
 8003948:	6178      	str	r0, [r7, #20]
 800394a:	e014      	b.n	8003976 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800394c:	4b22      	ldr	r3, [pc, #136]	; (80039d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800394e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003950:	4a21      	ldr	r2, [pc, #132]	; (80039d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003952:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003956:	6593      	str	r3, [r2, #88]	; 0x58
 8003958:	4b1f      	ldr	r3, [pc, #124]	; (80039d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800395a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800395c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003960:	60fb      	str	r3, [r7, #12]
 8003962:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003964:	f7ff f894 	bl	8002a90 <HAL_PWREx_GetVoltageRange>
 8003968:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800396a:	4b1b      	ldr	r3, [pc, #108]	; (80039d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800396c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396e:	4a1a      	ldr	r2, [pc, #104]	; (80039d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003970:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003974:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800397c:	d10b      	bne.n	8003996 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2b80      	cmp	r3, #128	; 0x80
 8003982:	d913      	bls.n	80039ac <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2ba0      	cmp	r3, #160	; 0xa0
 8003988:	d902      	bls.n	8003990 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800398a:	2302      	movs	r3, #2
 800398c:	613b      	str	r3, [r7, #16]
 800398e:	e00d      	b.n	80039ac <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003990:	2301      	movs	r3, #1
 8003992:	613b      	str	r3, [r7, #16]
 8003994:	e00a      	b.n	80039ac <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2b7f      	cmp	r3, #127	; 0x7f
 800399a:	d902      	bls.n	80039a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800399c:	2302      	movs	r3, #2
 800399e:	613b      	str	r3, [r7, #16]
 80039a0:	e004      	b.n	80039ac <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2b70      	cmp	r3, #112	; 0x70
 80039a6:	d101      	bne.n	80039ac <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039a8:	2301      	movs	r3, #1
 80039aa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80039ac:	4b0b      	ldr	r3, [pc, #44]	; (80039dc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f023 020f 	bic.w	r2, r3, #15
 80039b4:	4909      	ldr	r1, [pc, #36]	; (80039dc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80039bc:	4b07      	ldr	r3, [pc, #28]	; (80039dc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 030f 	and.w	r3, r3, #15
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d001      	beq.n	80039ce <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e000      	b.n	80039d0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3718      	adds	r7, #24
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	40021000 	.word	0x40021000
 80039dc:	40022000 	.word	0x40022000

080039e0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b087      	sub	sp, #28
 80039e4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80039e6:	4b2d      	ldr	r3, [pc, #180]	; (8003a9c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	f003 0303 	and.w	r3, r3, #3
 80039ee:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2b03      	cmp	r3, #3
 80039f4:	d00b      	beq.n	8003a0e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2b03      	cmp	r3, #3
 80039fa:	d825      	bhi.n	8003a48 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d008      	beq.n	8003a14 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d11f      	bne.n	8003a48 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003a08:	4b25      	ldr	r3, [pc, #148]	; (8003aa0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003a0a:	613b      	str	r3, [r7, #16]
    break;
 8003a0c:	e01f      	b.n	8003a4e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003a0e:	4b25      	ldr	r3, [pc, #148]	; (8003aa4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003a10:	613b      	str	r3, [r7, #16]
    break;
 8003a12:	e01c      	b.n	8003a4e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a14:	4b21      	ldr	r3, [pc, #132]	; (8003a9c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0308 	and.w	r3, r3, #8
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d107      	bne.n	8003a30 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a20:	4b1e      	ldr	r3, [pc, #120]	; (8003a9c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a26:	0a1b      	lsrs	r3, r3, #8
 8003a28:	f003 030f 	and.w	r3, r3, #15
 8003a2c:	617b      	str	r3, [r7, #20]
 8003a2e:	e005      	b.n	8003a3c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a30:	4b1a      	ldr	r3, [pc, #104]	; (8003a9c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	091b      	lsrs	r3, r3, #4
 8003a36:	f003 030f 	and.w	r3, r3, #15
 8003a3a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003a3c:	4a1a      	ldr	r2, [pc, #104]	; (8003aa8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a44:	613b      	str	r3, [r7, #16]
    break;
 8003a46:	e002      	b.n	8003a4e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	613b      	str	r3, [r7, #16]
    break;
 8003a4c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a4e:	4b13      	ldr	r3, [pc, #76]	; (8003a9c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	091b      	lsrs	r3, r3, #4
 8003a54:	f003 030f 	and.w	r3, r3, #15
 8003a58:	3301      	adds	r3, #1
 8003a5a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a5c:	4b0f      	ldr	r3, [pc, #60]	; (8003a9c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	0a1b      	lsrs	r3, r3, #8
 8003a62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a66:	693a      	ldr	r2, [r7, #16]
 8003a68:	fb03 f202 	mul.w	r2, r3, r2
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a72:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a74:	4b09      	ldr	r3, [pc, #36]	; (8003a9c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	0e5b      	lsrs	r3, r3, #25
 8003a7a:	f003 0303 	and.w	r3, r3, #3
 8003a7e:	3301      	adds	r3, #1
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a8c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003a8e:	683b      	ldr	r3, [r7, #0]
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	371c      	adds	r7, #28
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	40021000 	.word	0x40021000
 8003aa0:	00f42400 	.word	0x00f42400
 8003aa4:	007a1200 	.word	0x007a1200
 8003aa8:	0800cb84 	.word	0x0800cb84

08003aac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ab8:	2300      	movs	r3, #0
 8003aba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d040      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003acc:	2b80      	cmp	r3, #128	; 0x80
 8003ace:	d02a      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003ad0:	2b80      	cmp	r3, #128	; 0x80
 8003ad2:	d825      	bhi.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003ad4:	2b60      	cmp	r3, #96	; 0x60
 8003ad6:	d026      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003ad8:	2b60      	cmp	r3, #96	; 0x60
 8003ada:	d821      	bhi.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003adc:	2b40      	cmp	r3, #64	; 0x40
 8003ade:	d006      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003ae0:	2b40      	cmp	r3, #64	; 0x40
 8003ae2:	d81d      	bhi.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d009      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003ae8:	2b20      	cmp	r3, #32
 8003aea:	d010      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003aec:	e018      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003aee:	4b89      	ldr	r3, [pc, #548]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	4a88      	ldr	r2, [pc, #544]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003af8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003afa:	e015      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	3304      	adds	r3, #4
 8003b00:	2100      	movs	r1, #0
 8003b02:	4618      	mov	r0, r3
 8003b04:	f000 fb3e 	bl	8004184 <RCCEx_PLLSAI1_Config>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b0c:	e00c      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	3320      	adds	r3, #32
 8003b12:	2100      	movs	r1, #0
 8003b14:	4618      	mov	r0, r3
 8003b16:	f000 fc29 	bl	800436c <RCCEx_PLLSAI2_Config>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b1e:	e003      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	74fb      	strb	r3, [r7, #19]
      break;
 8003b24:	e000      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003b26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b28:	7cfb      	ldrb	r3, [r7, #19]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10b      	bne.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b2e:	4b79      	ldr	r3, [pc, #484]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b30:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b34:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b3c:	4975      	ldr	r1, [pc, #468]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003b44:	e001      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b46:	7cfb      	ldrb	r3, [r7, #19]
 8003b48:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d047      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b5e:	d030      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003b60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b64:	d82a      	bhi.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003b66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b6a:	d02a      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003b6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b70:	d824      	bhi.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003b72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b76:	d008      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003b78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b7c:	d81e      	bhi.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00a      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003b82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b86:	d010      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003b88:	e018      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b8a:	4b62      	ldr	r3, [pc, #392]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	4a61      	ldr	r2, [pc, #388]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b94:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b96:	e015      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	3304      	adds	r3, #4
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f000 faf0 	bl	8004184 <RCCEx_PLLSAI1_Config>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ba8:	e00c      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	3320      	adds	r3, #32
 8003bae:	2100      	movs	r1, #0
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f000 fbdb 	bl	800436c <RCCEx_PLLSAI2_Config>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003bba:	e003      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	74fb      	strb	r3, [r7, #19]
      break;
 8003bc0:	e000      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003bc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bc4:	7cfb      	ldrb	r3, [r7, #19]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10b      	bne.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003bca:	4b52      	ldr	r3, [pc, #328]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003bcc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003bd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd8:	494e      	ldr	r1, [pc, #312]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003be0:	e001      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be2:	7cfb      	ldrb	r3, [r7, #19]
 8003be4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f000 809f 	beq.w	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003bf8:	4b46      	ldr	r3, [pc, #280]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d101      	bne.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003c04:	2301      	movs	r3, #1
 8003c06:	e000      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003c08:	2300      	movs	r3, #0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00d      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c0e:	4b41      	ldr	r3, [pc, #260]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c12:	4a40      	ldr	r2, [pc, #256]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c18:	6593      	str	r3, [r2, #88]	; 0x58
 8003c1a:	4b3e      	ldr	r3, [pc, #248]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c22:	60bb      	str	r3, [r7, #8]
 8003c24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c26:	2301      	movs	r3, #1
 8003c28:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c2a:	4b3b      	ldr	r3, [pc, #236]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a3a      	ldr	r2, [pc, #232]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c36:	f7fd fdfb 	bl	8001830 <HAL_GetTick>
 8003c3a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c3c:	e009      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c3e:	f7fd fdf7 	bl	8001830 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d902      	bls.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	74fb      	strb	r3, [r7, #19]
        break;
 8003c50:	e005      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c52:	4b31      	ldr	r3, [pc, #196]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d0ef      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003c5e:	7cfb      	ldrb	r3, [r7, #19]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d15b      	bne.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c64:	4b2b      	ldr	r3, [pc, #172]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c6e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d01f      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d019      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c82:	4b24      	ldr	r3, [pc, #144]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c8c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c8e:	4b21      	ldr	r3, [pc, #132]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c94:	4a1f      	ldr	r2, [pc, #124]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c9e:	4b1d      	ldr	r3, [pc, #116]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca4:	4a1b      	ldr	r2, [pc, #108]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003caa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003cae:	4a19      	ldr	r2, [pc, #100]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	f003 0301 	and.w	r3, r3, #1
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d016      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc0:	f7fd fdb6 	bl	8001830 <HAL_GetTick>
 8003cc4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cc6:	e00b      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cc8:	f7fd fdb2 	bl	8001830 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d902      	bls.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	74fb      	strb	r3, [r7, #19]
            break;
 8003cde:	e006      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ce0:	4b0c      	ldr	r3, [pc, #48]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d0ec      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003cee:	7cfb      	ldrb	r3, [r7, #19]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d10c      	bne.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cf4:	4b07      	ldr	r3, [pc, #28]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cfa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d04:	4903      	ldr	r1, [pc, #12]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003d0c:	e008      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d0e:	7cfb      	ldrb	r3, [r7, #19]
 8003d10:	74bb      	strb	r3, [r7, #18]
 8003d12:	e005      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003d14:	40021000 	.word	0x40021000
 8003d18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d1c:	7cfb      	ldrb	r3, [r7, #19]
 8003d1e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d20:	7c7b      	ldrb	r3, [r7, #17]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d105      	bne.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d26:	4ba0      	ldr	r3, [pc, #640]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d2a:	4a9f      	ldr	r2, [pc, #636]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d30:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00a      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d3e:	4b9a      	ldr	r3, [pc, #616]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d44:	f023 0203 	bic.w	r2, r3, #3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d4c:	4996      	ldr	r1, [pc, #600]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00a      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d60:	4b91      	ldr	r3, [pc, #580]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d66:	f023 020c 	bic.w	r2, r3, #12
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6e:	498e      	ldr	r1, [pc, #568]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0304 	and.w	r3, r3, #4
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00a      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d82:	4b89      	ldr	r3, [pc, #548]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d88:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d90:	4985      	ldr	r1, [pc, #532]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0308 	and.w	r3, r3, #8
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d00a      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003da4:	4b80      	ldr	r3, [pc, #512]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003daa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003db2:	497d      	ldr	r1, [pc, #500]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0310 	and.w	r3, r3, #16
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00a      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003dc6:	4b78      	ldr	r3, [pc, #480]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dd4:	4974      	ldr	r1, [pc, #464]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0320 	and.w	r3, r3, #32
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d00a      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003de8:	4b6f      	ldr	r3, [pc, #444]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003df6:	496c      	ldr	r1, [pc, #432]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00a      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e0a:	4b67      	ldr	r3, [pc, #412]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e10:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e18:	4963      	ldr	r1, [pc, #396]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00a      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e2c:	4b5e      	ldr	r3, [pc, #376]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e3a:	495b      	ldr	r1, [pc, #364]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00a      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e4e:	4b56      	ldr	r3, [pc, #344]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e54:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e5c:	4952      	ldr	r1, [pc, #328]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00a      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e70:	4b4d      	ldr	r3, [pc, #308]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e76:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e7e:	494a      	ldr	r1, [pc, #296]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00a      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e92:	4b45      	ldr	r3, [pc, #276]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea0:	4941      	ldr	r1, [pc, #260]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00a      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003eb4:	4b3c      	ldr	r3, [pc, #240]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003eb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003eba:	f023 0203 	bic.w	r2, r3, #3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ec2:	4939      	ldr	r1, [pc, #228]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d028      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ed6:	4b34      	ldr	r3, [pc, #208]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003edc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ee4:	4930      	ldr	r1, [pc, #192]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ef0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ef4:	d106      	bne.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ef6:	4b2c      	ldr	r3, [pc, #176]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	4a2b      	ldr	r2, [pc, #172]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003efc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f00:	60d3      	str	r3, [r2, #12]
 8003f02:	e011      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f0c:	d10c      	bne.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	3304      	adds	r3, #4
 8003f12:	2101      	movs	r1, #1
 8003f14:	4618      	mov	r0, r3
 8003f16:	f000 f935 	bl	8004184 <RCCEx_PLLSAI1_Config>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003f1e:	7cfb      	ldrb	r3, [r7, #19]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d001      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003f24:	7cfb      	ldrb	r3, [r7, #19]
 8003f26:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d04d      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f3c:	d108      	bne.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003f3e:	4b1a      	ldr	r3, [pc, #104]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f40:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f44:	4a18      	ldr	r2, [pc, #96]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f4a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003f4e:	e012      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003f50:	4b15      	ldr	r3, [pc, #84]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f56:	4a14      	ldr	r2, [pc, #80]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f5c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003f60:	4b11      	ldr	r3, [pc, #68]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f6e:	490e      	ldr	r1, [pc, #56]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f7e:	d106      	bne.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f80:	4b09      	ldr	r3, [pc, #36]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	4a08      	ldr	r2, [pc, #32]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f8a:	60d3      	str	r3, [r2, #12]
 8003f8c:	e020      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f96:	d109      	bne.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f98:	4b03      	ldr	r3, [pc, #12]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	4a02      	ldr	r2, [pc, #8]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fa2:	60d3      	str	r3, [r2, #12]
 8003fa4:	e014      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003fa6:	bf00      	nop
 8003fa8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fb4:	d10c      	bne.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	3304      	adds	r3, #4
 8003fba:	2101      	movs	r1, #1
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f000 f8e1 	bl	8004184 <RCCEx_PLLSAI1_Config>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fc6:	7cfb      	ldrb	r3, [r7, #19]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d001      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003fcc:	7cfb      	ldrb	r3, [r7, #19]
 8003fce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d028      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003fdc:	4b68      	ldr	r3, [pc, #416]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fea:	4965      	ldr	r1, [pc, #404]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ff6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ffa:	d106      	bne.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ffc:	4b60      	ldr	r3, [pc, #384]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	4a5f      	ldr	r2, [pc, #380]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004002:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004006:	60d3      	str	r3, [r2, #12]
 8004008:	e011      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800400e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004012:	d10c      	bne.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	3304      	adds	r3, #4
 8004018:	2101      	movs	r1, #1
 800401a:	4618      	mov	r0, r3
 800401c:	f000 f8b2 	bl	8004184 <RCCEx_PLLSAI1_Config>
 8004020:	4603      	mov	r3, r0
 8004022:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004024:	7cfb      	ldrb	r3, [r7, #19]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d001      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800402a:	7cfb      	ldrb	r3, [r7, #19]
 800402c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d01e      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800403a:	4b51      	ldr	r3, [pc, #324]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800403c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004040:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800404a:	494d      	ldr	r1, [pc, #308]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800404c:	4313      	orrs	r3, r2
 800404e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004058:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800405c:	d10c      	bne.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	3304      	adds	r3, #4
 8004062:	2102      	movs	r1, #2
 8004064:	4618      	mov	r0, r3
 8004066:	f000 f88d 	bl	8004184 <RCCEx_PLLSAI1_Config>
 800406a:	4603      	mov	r3, r0
 800406c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800406e:	7cfb      	ldrb	r3, [r7, #19]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004074:	7cfb      	ldrb	r3, [r7, #19]
 8004076:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00b      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004084:	4b3e      	ldr	r3, [pc, #248]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004086:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800408a:	f023 0204 	bic.w	r2, r3, #4
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004094:	493a      	ldr	r1, [pc, #232]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004096:	4313      	orrs	r3, r2
 8004098:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00b      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80040a8:	4b35      	ldr	r3, [pc, #212]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80040aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040ae:	f023 0218 	bic.w	r2, r3, #24
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b8:	4931      	ldr	r1, [pc, #196]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d035      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80040cc:	4b2c      	ldr	r3, [pc, #176]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a2b      	ldr	r2, [pc, #172]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80040d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040d8:	f7fd fbaa 	bl	8001830 <HAL_GetTick>
 80040dc:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80040de:	e009      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80040e0:	f7fd fba6 	bl	8001830 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d902      	bls.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	74fb      	strb	r3, [r7, #19]
        break;
 80040f2:	e005      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80040f4:	4b22      	ldr	r3, [pc, #136]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1ef      	bne.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8004100:	7cfb      	ldrb	r3, [r7, #19]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d113      	bne.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8004106:	4b1e      	ldr	r3, [pc, #120]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004108:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800410c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004116:	491a      	ldr	r1, [pc, #104]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004118:	4313      	orrs	r3, r2
 800411a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	3320      	adds	r3, #32
 8004122:	2102      	movs	r1, #2
 8004124:	4618      	mov	r0, r3
 8004126:	f000 f921 	bl	800436c <RCCEx_PLLSAI2_Config>
 800412a:	4603      	mov	r3, r0
 800412c:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800412e:	7cfb      	ldrb	r3, [r7, #19]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d001      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8004134:	7cfb      	ldrb	r3, [r7, #19]
 8004136:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d017      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004144:	4b0e      	ldr	r3, [pc, #56]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004146:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800414a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004154:	490a      	ldr	r1, [pc, #40]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004156:	4313      	orrs	r3, r2
 8004158:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004162:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004166:	d105      	bne.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004168:	4b05      	ldr	r3, [pc, #20]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	4a04      	ldr	r2, [pc, #16]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800416e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004172:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004174:	7cbb      	ldrb	r3, [r7, #18]
}
 8004176:	4618      	mov	r0, r3
 8004178:	3718      	adds	r7, #24
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	40021000 	.word	0x40021000

08004184 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800418e:	2300      	movs	r3, #0
 8004190:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004192:	4b72      	ldr	r3, [pc, #456]	; (800435c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	f003 0303 	and.w	r3, r3, #3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00e      	beq.n	80041bc <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800419e:	4b6f      	ldr	r3, [pc, #444]	; (800435c <RCCEx_PLLSAI1_Config+0x1d8>)
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	f003 0203 	and.w	r2, r3, #3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d103      	bne.n	80041b6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
       ||
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d142      	bne.n	800423c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	73fb      	strb	r3, [r7, #15]
 80041ba:	e03f      	b.n	800423c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2b03      	cmp	r3, #3
 80041c2:	d018      	beq.n	80041f6 <RCCEx_PLLSAI1_Config+0x72>
 80041c4:	2b03      	cmp	r3, #3
 80041c6:	d825      	bhi.n	8004214 <RCCEx_PLLSAI1_Config+0x90>
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d002      	beq.n	80041d2 <RCCEx_PLLSAI1_Config+0x4e>
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d009      	beq.n	80041e4 <RCCEx_PLLSAI1_Config+0x60>
 80041d0:	e020      	b.n	8004214 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041d2:	4b62      	ldr	r3, [pc, #392]	; (800435c <RCCEx_PLLSAI1_Config+0x1d8>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d11d      	bne.n	800421a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041e2:	e01a      	b.n	800421a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041e4:	4b5d      	ldr	r3, [pc, #372]	; (800435c <RCCEx_PLLSAI1_Config+0x1d8>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d116      	bne.n	800421e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041f4:	e013      	b.n	800421e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041f6:	4b59      	ldr	r3, [pc, #356]	; (800435c <RCCEx_PLLSAI1_Config+0x1d8>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10f      	bne.n	8004222 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004202:	4b56      	ldr	r3, [pc, #344]	; (800435c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d109      	bne.n	8004222 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004212:	e006      	b.n	8004222 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	73fb      	strb	r3, [r7, #15]
      break;
 8004218:	e004      	b.n	8004224 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800421a:	bf00      	nop
 800421c:	e002      	b.n	8004224 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800421e:	bf00      	nop
 8004220:	e000      	b.n	8004224 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004222:	bf00      	nop
    }

    if(status == HAL_OK)
 8004224:	7bfb      	ldrb	r3, [r7, #15]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d108      	bne.n	800423c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800422a:	4b4c      	ldr	r3, [pc, #304]	; (800435c <RCCEx_PLLSAI1_Config+0x1d8>)
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	f023 0203 	bic.w	r2, r3, #3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4949      	ldr	r1, [pc, #292]	; (800435c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004238:	4313      	orrs	r3, r2
 800423a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800423c:	7bfb      	ldrb	r3, [r7, #15]
 800423e:	2b00      	cmp	r3, #0
 8004240:	f040 8086 	bne.w	8004350 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004244:	4b45      	ldr	r3, [pc, #276]	; (800435c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a44      	ldr	r2, [pc, #272]	; (800435c <RCCEx_PLLSAI1_Config+0x1d8>)
 800424a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800424e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004250:	f7fd faee 	bl	8001830 <HAL_GetTick>
 8004254:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004256:	e009      	b.n	800426c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004258:	f7fd faea 	bl	8001830 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	2b02      	cmp	r3, #2
 8004264:	d902      	bls.n	800426c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	73fb      	strb	r3, [r7, #15]
        break;
 800426a:	e005      	b.n	8004278 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800426c:	4b3b      	ldr	r3, [pc, #236]	; (800435c <RCCEx_PLLSAI1_Config+0x1d8>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1ef      	bne.n	8004258 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004278:	7bfb      	ldrb	r3, [r7, #15]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d168      	bne.n	8004350 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d113      	bne.n	80042ac <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004284:	4b35      	ldr	r3, [pc, #212]	; (800435c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004286:	691a      	ldr	r2, [r3, #16]
 8004288:	4b35      	ldr	r3, [pc, #212]	; (8004360 <RCCEx_PLLSAI1_Config+0x1dc>)
 800428a:	4013      	ands	r3, r2
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	6892      	ldr	r2, [r2, #8]
 8004290:	0211      	lsls	r1, r2, #8
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	68d2      	ldr	r2, [r2, #12]
 8004296:	06d2      	lsls	r2, r2, #27
 8004298:	4311      	orrs	r1, r2
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	6852      	ldr	r2, [r2, #4]
 800429e:	3a01      	subs	r2, #1
 80042a0:	0112      	lsls	r2, r2, #4
 80042a2:	430a      	orrs	r2, r1
 80042a4:	492d      	ldr	r1, [pc, #180]	; (800435c <RCCEx_PLLSAI1_Config+0x1d8>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	610b      	str	r3, [r1, #16]
 80042aa:	e02d      	b.n	8004308 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d115      	bne.n	80042de <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042b2:	4b2a      	ldr	r3, [pc, #168]	; (800435c <RCCEx_PLLSAI1_Config+0x1d8>)
 80042b4:	691a      	ldr	r2, [r3, #16]
 80042b6:	4b2b      	ldr	r3, [pc, #172]	; (8004364 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042b8:	4013      	ands	r3, r2
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	6892      	ldr	r2, [r2, #8]
 80042be:	0211      	lsls	r1, r2, #8
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	6912      	ldr	r2, [r2, #16]
 80042c4:	0852      	lsrs	r2, r2, #1
 80042c6:	3a01      	subs	r2, #1
 80042c8:	0552      	lsls	r2, r2, #21
 80042ca:	4311      	orrs	r1, r2
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	6852      	ldr	r2, [r2, #4]
 80042d0:	3a01      	subs	r2, #1
 80042d2:	0112      	lsls	r2, r2, #4
 80042d4:	430a      	orrs	r2, r1
 80042d6:	4921      	ldr	r1, [pc, #132]	; (800435c <RCCEx_PLLSAI1_Config+0x1d8>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	610b      	str	r3, [r1, #16]
 80042dc:	e014      	b.n	8004308 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042de:	4b1f      	ldr	r3, [pc, #124]	; (800435c <RCCEx_PLLSAI1_Config+0x1d8>)
 80042e0:	691a      	ldr	r2, [r3, #16]
 80042e2:	4b21      	ldr	r3, [pc, #132]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042e4:	4013      	ands	r3, r2
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	6892      	ldr	r2, [r2, #8]
 80042ea:	0211      	lsls	r1, r2, #8
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	6952      	ldr	r2, [r2, #20]
 80042f0:	0852      	lsrs	r2, r2, #1
 80042f2:	3a01      	subs	r2, #1
 80042f4:	0652      	lsls	r2, r2, #25
 80042f6:	4311      	orrs	r1, r2
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	6852      	ldr	r2, [r2, #4]
 80042fc:	3a01      	subs	r2, #1
 80042fe:	0112      	lsls	r2, r2, #4
 8004300:	430a      	orrs	r2, r1
 8004302:	4916      	ldr	r1, [pc, #88]	; (800435c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004304:	4313      	orrs	r3, r2
 8004306:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004308:	4b14      	ldr	r3, [pc, #80]	; (800435c <RCCEx_PLLSAI1_Config+0x1d8>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a13      	ldr	r2, [pc, #76]	; (800435c <RCCEx_PLLSAI1_Config+0x1d8>)
 800430e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004312:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004314:	f7fd fa8c 	bl	8001830 <HAL_GetTick>
 8004318:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800431a:	e009      	b.n	8004330 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800431c:	f7fd fa88 	bl	8001830 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	d902      	bls.n	8004330 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	73fb      	strb	r3, [r7, #15]
          break;
 800432e:	e005      	b.n	800433c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004330:	4b0a      	ldr	r3, [pc, #40]	; (800435c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d0ef      	beq.n	800431c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800433c:	7bfb      	ldrb	r3, [r7, #15]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d106      	bne.n	8004350 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004342:	4b06      	ldr	r3, [pc, #24]	; (800435c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004344:	691a      	ldr	r2, [r3, #16]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	4904      	ldr	r1, [pc, #16]	; (800435c <RCCEx_PLLSAI1_Config+0x1d8>)
 800434c:	4313      	orrs	r3, r2
 800434e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004350:	7bfb      	ldrb	r3, [r7, #15]
}
 8004352:	4618      	mov	r0, r3
 8004354:	3710      	adds	r7, #16
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	40021000 	.word	0x40021000
 8004360:	07ff800f 	.word	0x07ff800f
 8004364:	ff9f800f 	.word	0xff9f800f
 8004368:	f9ff800f 	.word	0xf9ff800f

0800436c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004376:	2300      	movs	r3, #0
 8004378:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800437a:	4b72      	ldr	r3, [pc, #456]	; (8004544 <RCCEx_PLLSAI2_Config+0x1d8>)
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	f003 0303 	and.w	r3, r3, #3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00e      	beq.n	80043a4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004386:	4b6f      	ldr	r3, [pc, #444]	; (8004544 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	f003 0203 	and.w	r2, r3, #3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	429a      	cmp	r2, r3
 8004394:	d103      	bne.n	800439e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
       ||
 800439a:	2b00      	cmp	r3, #0
 800439c:	d142      	bne.n	8004424 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	73fb      	strb	r3, [r7, #15]
 80043a2:	e03f      	b.n	8004424 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2b03      	cmp	r3, #3
 80043aa:	d018      	beq.n	80043de <RCCEx_PLLSAI2_Config+0x72>
 80043ac:	2b03      	cmp	r3, #3
 80043ae:	d825      	bhi.n	80043fc <RCCEx_PLLSAI2_Config+0x90>
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d002      	beq.n	80043ba <RCCEx_PLLSAI2_Config+0x4e>
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d009      	beq.n	80043cc <RCCEx_PLLSAI2_Config+0x60>
 80043b8:	e020      	b.n	80043fc <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043ba:	4b62      	ldr	r3, [pc, #392]	; (8004544 <RCCEx_PLLSAI2_Config+0x1d8>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d11d      	bne.n	8004402 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043ca:	e01a      	b.n	8004402 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043cc:	4b5d      	ldr	r3, [pc, #372]	; (8004544 <RCCEx_PLLSAI2_Config+0x1d8>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d116      	bne.n	8004406 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043dc:	e013      	b.n	8004406 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80043de:	4b59      	ldr	r3, [pc, #356]	; (8004544 <RCCEx_PLLSAI2_Config+0x1d8>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d10f      	bne.n	800440a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80043ea:	4b56      	ldr	r3, [pc, #344]	; (8004544 <RCCEx_PLLSAI2_Config+0x1d8>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d109      	bne.n	800440a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80043fa:	e006      	b.n	800440a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004400:	e004      	b.n	800440c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004402:	bf00      	nop
 8004404:	e002      	b.n	800440c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004406:	bf00      	nop
 8004408:	e000      	b.n	800440c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800440a:	bf00      	nop
    }

    if(status == HAL_OK)
 800440c:	7bfb      	ldrb	r3, [r7, #15]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d108      	bne.n	8004424 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004412:	4b4c      	ldr	r3, [pc, #304]	; (8004544 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	f023 0203 	bic.w	r2, r3, #3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4949      	ldr	r1, [pc, #292]	; (8004544 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004420:	4313      	orrs	r3, r2
 8004422:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004424:	7bfb      	ldrb	r3, [r7, #15]
 8004426:	2b00      	cmp	r3, #0
 8004428:	f040 8086 	bne.w	8004538 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800442c:	4b45      	ldr	r3, [pc, #276]	; (8004544 <RCCEx_PLLSAI2_Config+0x1d8>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a44      	ldr	r2, [pc, #272]	; (8004544 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004432:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004436:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004438:	f7fd f9fa 	bl	8001830 <HAL_GetTick>
 800443c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800443e:	e009      	b.n	8004454 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004440:	f7fd f9f6 	bl	8001830 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b02      	cmp	r3, #2
 800444c:	d902      	bls.n	8004454 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	73fb      	strb	r3, [r7, #15]
        break;
 8004452:	e005      	b.n	8004460 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004454:	4b3b      	ldr	r3, [pc, #236]	; (8004544 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1ef      	bne.n	8004440 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004460:	7bfb      	ldrb	r3, [r7, #15]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d168      	bne.n	8004538 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d113      	bne.n	8004494 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800446c:	4b35      	ldr	r3, [pc, #212]	; (8004544 <RCCEx_PLLSAI2_Config+0x1d8>)
 800446e:	695a      	ldr	r2, [r3, #20]
 8004470:	4b35      	ldr	r3, [pc, #212]	; (8004548 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004472:	4013      	ands	r3, r2
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	6892      	ldr	r2, [r2, #8]
 8004478:	0211      	lsls	r1, r2, #8
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	68d2      	ldr	r2, [r2, #12]
 800447e:	06d2      	lsls	r2, r2, #27
 8004480:	4311      	orrs	r1, r2
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	6852      	ldr	r2, [r2, #4]
 8004486:	3a01      	subs	r2, #1
 8004488:	0112      	lsls	r2, r2, #4
 800448a:	430a      	orrs	r2, r1
 800448c:	492d      	ldr	r1, [pc, #180]	; (8004544 <RCCEx_PLLSAI2_Config+0x1d8>)
 800448e:	4313      	orrs	r3, r2
 8004490:	614b      	str	r3, [r1, #20]
 8004492:	e02d      	b.n	80044f0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d115      	bne.n	80044c6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800449a:	4b2a      	ldr	r3, [pc, #168]	; (8004544 <RCCEx_PLLSAI2_Config+0x1d8>)
 800449c:	695a      	ldr	r2, [r3, #20]
 800449e:	4b2b      	ldr	r3, [pc, #172]	; (800454c <RCCEx_PLLSAI2_Config+0x1e0>)
 80044a0:	4013      	ands	r3, r2
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	6892      	ldr	r2, [r2, #8]
 80044a6:	0211      	lsls	r1, r2, #8
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	6912      	ldr	r2, [r2, #16]
 80044ac:	0852      	lsrs	r2, r2, #1
 80044ae:	3a01      	subs	r2, #1
 80044b0:	0552      	lsls	r2, r2, #21
 80044b2:	4311      	orrs	r1, r2
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	6852      	ldr	r2, [r2, #4]
 80044b8:	3a01      	subs	r2, #1
 80044ba:	0112      	lsls	r2, r2, #4
 80044bc:	430a      	orrs	r2, r1
 80044be:	4921      	ldr	r1, [pc, #132]	; (8004544 <RCCEx_PLLSAI2_Config+0x1d8>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	614b      	str	r3, [r1, #20]
 80044c4:	e014      	b.n	80044f0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80044c6:	4b1f      	ldr	r3, [pc, #124]	; (8004544 <RCCEx_PLLSAI2_Config+0x1d8>)
 80044c8:	695a      	ldr	r2, [r3, #20]
 80044ca:	4b21      	ldr	r3, [pc, #132]	; (8004550 <RCCEx_PLLSAI2_Config+0x1e4>)
 80044cc:	4013      	ands	r3, r2
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	6892      	ldr	r2, [r2, #8]
 80044d2:	0211      	lsls	r1, r2, #8
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	6952      	ldr	r2, [r2, #20]
 80044d8:	0852      	lsrs	r2, r2, #1
 80044da:	3a01      	subs	r2, #1
 80044dc:	0652      	lsls	r2, r2, #25
 80044de:	4311      	orrs	r1, r2
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	6852      	ldr	r2, [r2, #4]
 80044e4:	3a01      	subs	r2, #1
 80044e6:	0112      	lsls	r2, r2, #4
 80044e8:	430a      	orrs	r2, r1
 80044ea:	4916      	ldr	r1, [pc, #88]	; (8004544 <RCCEx_PLLSAI2_Config+0x1d8>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80044f0:	4b14      	ldr	r3, [pc, #80]	; (8004544 <RCCEx_PLLSAI2_Config+0x1d8>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a13      	ldr	r2, [pc, #76]	; (8004544 <RCCEx_PLLSAI2_Config+0x1d8>)
 80044f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044fa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044fc:	f7fd f998 	bl	8001830 <HAL_GetTick>
 8004500:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004502:	e009      	b.n	8004518 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004504:	f7fd f994 	bl	8001830 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b02      	cmp	r3, #2
 8004510:	d902      	bls.n	8004518 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	73fb      	strb	r3, [r7, #15]
          break;
 8004516:	e005      	b.n	8004524 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004518:	4b0a      	ldr	r3, [pc, #40]	; (8004544 <RCCEx_PLLSAI2_Config+0x1d8>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d0ef      	beq.n	8004504 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004524:	7bfb      	ldrb	r3, [r7, #15]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d106      	bne.n	8004538 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800452a:	4b06      	ldr	r3, [pc, #24]	; (8004544 <RCCEx_PLLSAI2_Config+0x1d8>)
 800452c:	695a      	ldr	r2, [r3, #20]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	4904      	ldr	r1, [pc, #16]	; (8004544 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004534:	4313      	orrs	r3, r2
 8004536:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004538:	7bfb      	ldrb	r3, [r7, #15]
}
 800453a:	4618      	mov	r0, r3
 800453c:	3710      	adds	r7, #16
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	40021000 	.word	0x40021000
 8004548:	07ff800f 	.word	0x07ff800f
 800454c:	ff9f800f 	.word	0xff9f800f
 8004550:	f9ff800f 	.word	0xf9ff800f

08004554 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e049      	b.n	80045fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d106      	bne.n	8004580 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f7fc ff28 	bl	80013d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2202      	movs	r2, #2
 8004584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	3304      	adds	r3, #4
 8004590:	4619      	mov	r1, r3
 8004592:	4610      	mov	r0, r2
 8004594:	f000 fde8 	bl	8005168 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3708      	adds	r7, #8
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
	...

08004604 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004612:	b2db      	uxtb	r3, r3
 8004614:	2b01      	cmp	r3, #1
 8004616:	d001      	beq.n	800461c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e047      	b.n	80046ac <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2202      	movs	r2, #2
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a23      	ldr	r2, [pc, #140]	; (80046b8 <HAL_TIM_Base_Start+0xb4>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d01d      	beq.n	800466a <HAL_TIM_Base_Start+0x66>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004636:	d018      	beq.n	800466a <HAL_TIM_Base_Start+0x66>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a1f      	ldr	r2, [pc, #124]	; (80046bc <HAL_TIM_Base_Start+0xb8>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d013      	beq.n	800466a <HAL_TIM_Base_Start+0x66>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a1e      	ldr	r2, [pc, #120]	; (80046c0 <HAL_TIM_Base_Start+0xbc>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d00e      	beq.n	800466a <HAL_TIM_Base_Start+0x66>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a1c      	ldr	r2, [pc, #112]	; (80046c4 <HAL_TIM_Base_Start+0xc0>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d009      	beq.n	800466a <HAL_TIM_Base_Start+0x66>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a1b      	ldr	r2, [pc, #108]	; (80046c8 <HAL_TIM_Base_Start+0xc4>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d004      	beq.n	800466a <HAL_TIM_Base_Start+0x66>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a19      	ldr	r2, [pc, #100]	; (80046cc <HAL_TIM_Base_Start+0xc8>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d115      	bne.n	8004696 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	689a      	ldr	r2, [r3, #8]
 8004670:	4b17      	ldr	r3, [pc, #92]	; (80046d0 <HAL_TIM_Base_Start+0xcc>)
 8004672:	4013      	ands	r3, r2
 8004674:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2b06      	cmp	r3, #6
 800467a:	d015      	beq.n	80046a8 <HAL_TIM_Base_Start+0xa4>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004682:	d011      	beq.n	80046a8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f042 0201 	orr.w	r2, r2, #1
 8004692:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004694:	e008      	b.n	80046a8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f042 0201 	orr.w	r2, r2, #1
 80046a4:	601a      	str	r2, [r3, #0]
 80046a6:	e000      	b.n	80046aa <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3714      	adds	r7, #20
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr
 80046b8:	40012c00 	.word	0x40012c00
 80046bc:	40000400 	.word	0x40000400
 80046c0:	40000800 	.word	0x40000800
 80046c4:	40000c00 	.word	0x40000c00
 80046c8:	40013400 	.word	0x40013400
 80046cc:	40014000 	.word	0x40014000
 80046d0:	00010007 	.word	0x00010007

080046d4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6a1a      	ldr	r2, [r3, #32]
 80046e2:	f241 1311 	movw	r3, #4369	; 0x1111
 80046e6:	4013      	ands	r3, r2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d10f      	bne.n	800470c <HAL_TIM_Base_Stop+0x38>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6a1a      	ldr	r2, [r3, #32]
 80046f2:	f240 4344 	movw	r3, #1092	; 0x444
 80046f6:	4013      	ands	r3, r2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d107      	bne.n	800470c <HAL_TIM_Base_Stop+0x38>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 0201 	bic.w	r2, r2, #1
 800470a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	370c      	adds	r7, #12
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr

08004722 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b082      	sub	sp, #8
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d101      	bne.n	8004734 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e049      	b.n	80047c8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800473a:	b2db      	uxtb	r3, r3
 800473c:	2b00      	cmp	r3, #0
 800473e:	d106      	bne.n	800474e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 f841 	bl	80047d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2202      	movs	r2, #2
 8004752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	3304      	adds	r3, #4
 800475e:	4619      	mov	r1, r3
 8004760:	4610      	mov	r0, r2
 8004762:	f000 fd01 	bl	8005168 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2201      	movs	r2, #1
 800476a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2201      	movs	r2, #1
 8004772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2201      	movs	r2, #1
 8004782:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2201      	movs	r2, #1
 8004792:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2201      	movs	r2, #1
 80047a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3708      	adds	r7, #8
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d109      	bne.n	8004808 <HAL_TIM_PWM_Start+0x24>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	bf14      	ite	ne
 8004800:	2301      	movne	r3, #1
 8004802:	2300      	moveq	r3, #0
 8004804:	b2db      	uxtb	r3, r3
 8004806:	e03c      	b.n	8004882 <HAL_TIM_PWM_Start+0x9e>
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	2b04      	cmp	r3, #4
 800480c:	d109      	bne.n	8004822 <HAL_TIM_PWM_Start+0x3e>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b01      	cmp	r3, #1
 8004818:	bf14      	ite	ne
 800481a:	2301      	movne	r3, #1
 800481c:	2300      	moveq	r3, #0
 800481e:	b2db      	uxtb	r3, r3
 8004820:	e02f      	b.n	8004882 <HAL_TIM_PWM_Start+0x9e>
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	2b08      	cmp	r3, #8
 8004826:	d109      	bne.n	800483c <HAL_TIM_PWM_Start+0x58>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800482e:	b2db      	uxtb	r3, r3
 8004830:	2b01      	cmp	r3, #1
 8004832:	bf14      	ite	ne
 8004834:	2301      	movne	r3, #1
 8004836:	2300      	moveq	r3, #0
 8004838:	b2db      	uxtb	r3, r3
 800483a:	e022      	b.n	8004882 <HAL_TIM_PWM_Start+0x9e>
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	2b0c      	cmp	r3, #12
 8004840:	d109      	bne.n	8004856 <HAL_TIM_PWM_Start+0x72>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b01      	cmp	r3, #1
 800484c:	bf14      	ite	ne
 800484e:	2301      	movne	r3, #1
 8004850:	2300      	moveq	r3, #0
 8004852:	b2db      	uxtb	r3, r3
 8004854:	e015      	b.n	8004882 <HAL_TIM_PWM_Start+0x9e>
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	2b10      	cmp	r3, #16
 800485a:	d109      	bne.n	8004870 <HAL_TIM_PWM_Start+0x8c>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004862:	b2db      	uxtb	r3, r3
 8004864:	2b01      	cmp	r3, #1
 8004866:	bf14      	ite	ne
 8004868:	2301      	movne	r3, #1
 800486a:	2300      	moveq	r3, #0
 800486c:	b2db      	uxtb	r3, r3
 800486e:	e008      	b.n	8004882 <HAL_TIM_PWM_Start+0x9e>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004876:	b2db      	uxtb	r3, r3
 8004878:	2b01      	cmp	r3, #1
 800487a:	bf14      	ite	ne
 800487c:	2301      	movne	r3, #1
 800487e:	2300      	moveq	r3, #0
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b00      	cmp	r3, #0
 8004884:	d001      	beq.n	800488a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e09c      	b.n	80049c4 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d104      	bne.n	800489a <HAL_TIM_PWM_Start+0xb6>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2202      	movs	r2, #2
 8004894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004898:	e023      	b.n	80048e2 <HAL_TIM_PWM_Start+0xfe>
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	2b04      	cmp	r3, #4
 800489e:	d104      	bne.n	80048aa <HAL_TIM_PWM_Start+0xc6>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2202      	movs	r2, #2
 80048a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048a8:	e01b      	b.n	80048e2 <HAL_TIM_PWM_Start+0xfe>
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	2b08      	cmp	r3, #8
 80048ae:	d104      	bne.n	80048ba <HAL_TIM_PWM_Start+0xd6>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2202      	movs	r2, #2
 80048b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048b8:	e013      	b.n	80048e2 <HAL_TIM_PWM_Start+0xfe>
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	2b0c      	cmp	r3, #12
 80048be:	d104      	bne.n	80048ca <HAL_TIM_PWM_Start+0xe6>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2202      	movs	r2, #2
 80048c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048c8:	e00b      	b.n	80048e2 <HAL_TIM_PWM_Start+0xfe>
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	2b10      	cmp	r3, #16
 80048ce:	d104      	bne.n	80048da <HAL_TIM_PWM_Start+0xf6>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2202      	movs	r2, #2
 80048d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048d8:	e003      	b.n	80048e2 <HAL_TIM_PWM_Start+0xfe>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2202      	movs	r2, #2
 80048de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2201      	movs	r2, #1
 80048e8:	6839      	ldr	r1, [r7, #0]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f001 f846 	bl	800597c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a35      	ldr	r2, [pc, #212]	; (80049cc <HAL_TIM_PWM_Start+0x1e8>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d013      	beq.n	8004922 <HAL_TIM_PWM_Start+0x13e>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a34      	ldr	r2, [pc, #208]	; (80049d0 <HAL_TIM_PWM_Start+0x1ec>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d00e      	beq.n	8004922 <HAL_TIM_PWM_Start+0x13e>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a32      	ldr	r2, [pc, #200]	; (80049d4 <HAL_TIM_PWM_Start+0x1f0>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d009      	beq.n	8004922 <HAL_TIM_PWM_Start+0x13e>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a31      	ldr	r2, [pc, #196]	; (80049d8 <HAL_TIM_PWM_Start+0x1f4>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d004      	beq.n	8004922 <HAL_TIM_PWM_Start+0x13e>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a2f      	ldr	r2, [pc, #188]	; (80049dc <HAL_TIM_PWM_Start+0x1f8>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d101      	bne.n	8004926 <HAL_TIM_PWM_Start+0x142>
 8004922:	2301      	movs	r3, #1
 8004924:	e000      	b.n	8004928 <HAL_TIM_PWM_Start+0x144>
 8004926:	2300      	movs	r3, #0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d007      	beq.n	800493c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800493a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a22      	ldr	r2, [pc, #136]	; (80049cc <HAL_TIM_PWM_Start+0x1e8>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d01d      	beq.n	8004982 <HAL_TIM_PWM_Start+0x19e>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800494e:	d018      	beq.n	8004982 <HAL_TIM_PWM_Start+0x19e>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a22      	ldr	r2, [pc, #136]	; (80049e0 <HAL_TIM_PWM_Start+0x1fc>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d013      	beq.n	8004982 <HAL_TIM_PWM_Start+0x19e>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a21      	ldr	r2, [pc, #132]	; (80049e4 <HAL_TIM_PWM_Start+0x200>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d00e      	beq.n	8004982 <HAL_TIM_PWM_Start+0x19e>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a1f      	ldr	r2, [pc, #124]	; (80049e8 <HAL_TIM_PWM_Start+0x204>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d009      	beq.n	8004982 <HAL_TIM_PWM_Start+0x19e>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a17      	ldr	r2, [pc, #92]	; (80049d0 <HAL_TIM_PWM_Start+0x1ec>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d004      	beq.n	8004982 <HAL_TIM_PWM_Start+0x19e>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a15      	ldr	r2, [pc, #84]	; (80049d4 <HAL_TIM_PWM_Start+0x1f0>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d115      	bne.n	80049ae <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	689a      	ldr	r2, [r3, #8]
 8004988:	4b18      	ldr	r3, [pc, #96]	; (80049ec <HAL_TIM_PWM_Start+0x208>)
 800498a:	4013      	ands	r3, r2
 800498c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2b06      	cmp	r3, #6
 8004992:	d015      	beq.n	80049c0 <HAL_TIM_PWM_Start+0x1dc>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800499a:	d011      	beq.n	80049c0 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f042 0201 	orr.w	r2, r2, #1
 80049aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ac:	e008      	b.n	80049c0 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f042 0201 	orr.w	r2, r2, #1
 80049bc:	601a      	str	r2, [r3, #0]
 80049be:	e000      	b.n	80049c2 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049c0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	40012c00 	.word	0x40012c00
 80049d0:	40013400 	.word	0x40013400
 80049d4:	40014000 	.word	0x40014000
 80049d8:	40014400 	.word	0x40014400
 80049dc:	40014800 	.word	0x40014800
 80049e0:	40000400 	.word	0x40000400
 80049e4:	40000800 	.word	0x40000800
 80049e8:	40000c00 	.word	0x40000c00
 80049ec:	00010007 	.word	0x00010007

080049f0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2200      	movs	r2, #0
 8004a00:	6839      	ldr	r1, [r7, #0]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f000 ffba 	bl	800597c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a3e      	ldr	r2, [pc, #248]	; (8004b08 <HAL_TIM_PWM_Stop+0x118>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d013      	beq.n	8004a3a <HAL_TIM_PWM_Stop+0x4a>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a3d      	ldr	r2, [pc, #244]	; (8004b0c <HAL_TIM_PWM_Stop+0x11c>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d00e      	beq.n	8004a3a <HAL_TIM_PWM_Stop+0x4a>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a3b      	ldr	r2, [pc, #236]	; (8004b10 <HAL_TIM_PWM_Stop+0x120>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d009      	beq.n	8004a3a <HAL_TIM_PWM_Stop+0x4a>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a3a      	ldr	r2, [pc, #232]	; (8004b14 <HAL_TIM_PWM_Stop+0x124>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d004      	beq.n	8004a3a <HAL_TIM_PWM_Stop+0x4a>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a38      	ldr	r2, [pc, #224]	; (8004b18 <HAL_TIM_PWM_Stop+0x128>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d101      	bne.n	8004a3e <HAL_TIM_PWM_Stop+0x4e>
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e000      	b.n	8004a40 <HAL_TIM_PWM_Stop+0x50>
 8004a3e:	2300      	movs	r3, #0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d017      	beq.n	8004a74 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	6a1a      	ldr	r2, [r3, #32]
 8004a4a:	f241 1311 	movw	r3, #4369	; 0x1111
 8004a4e:	4013      	ands	r3, r2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d10f      	bne.n	8004a74 <HAL_TIM_PWM_Stop+0x84>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	6a1a      	ldr	r2, [r3, #32]
 8004a5a:	f240 4344 	movw	r3, #1092	; 0x444
 8004a5e:	4013      	ands	r3, r2
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d107      	bne.n	8004a74 <HAL_TIM_PWM_Stop+0x84>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a72:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	6a1a      	ldr	r2, [r3, #32]
 8004a7a:	f241 1311 	movw	r3, #4369	; 0x1111
 8004a7e:	4013      	ands	r3, r2
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d10f      	bne.n	8004aa4 <HAL_TIM_PWM_Stop+0xb4>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	6a1a      	ldr	r2, [r3, #32]
 8004a8a:	f240 4344 	movw	r3, #1092	; 0x444
 8004a8e:	4013      	ands	r3, r2
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d107      	bne.n	8004aa4 <HAL_TIM_PWM_Stop+0xb4>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f022 0201 	bic.w	r2, r2, #1
 8004aa2:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d104      	bne.n	8004ab4 <HAL_TIM_PWM_Stop+0xc4>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ab2:	e023      	b.n	8004afc <HAL_TIM_PWM_Stop+0x10c>
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	2b04      	cmp	r3, #4
 8004ab8:	d104      	bne.n	8004ac4 <HAL_TIM_PWM_Stop+0xd4>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ac2:	e01b      	b.n	8004afc <HAL_TIM_PWM_Stop+0x10c>
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	2b08      	cmp	r3, #8
 8004ac8:	d104      	bne.n	8004ad4 <HAL_TIM_PWM_Stop+0xe4>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ad2:	e013      	b.n	8004afc <HAL_TIM_PWM_Stop+0x10c>
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	2b0c      	cmp	r3, #12
 8004ad8:	d104      	bne.n	8004ae4 <HAL_TIM_PWM_Stop+0xf4>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ae2:	e00b      	b.n	8004afc <HAL_TIM_PWM_Stop+0x10c>
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	2b10      	cmp	r3, #16
 8004ae8:	d104      	bne.n	8004af4 <HAL_TIM_PWM_Stop+0x104>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2201      	movs	r2, #1
 8004aee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004af2:	e003      	b.n	8004afc <HAL_TIM_PWM_Stop+0x10c>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3708      	adds	r7, #8
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	40012c00 	.word	0x40012c00
 8004b0c:	40013400 	.word	0x40013400
 8004b10:	40014000 	.word	0x40014000
 8004b14:	40014400 	.word	0x40014400
 8004b18:	40014800 	.word	0x40014800

08004b1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d122      	bne.n	8004b78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	f003 0302 	and.w	r3, r3, #2
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d11b      	bne.n	8004b78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f06f 0202 	mvn.w	r2, #2
 8004b48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	f003 0303 	and.w	r3, r3, #3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d003      	beq.n	8004b66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 fae3 	bl	800512a <HAL_TIM_IC_CaptureCallback>
 8004b64:	e005      	b.n	8004b72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 fad5 	bl	8005116 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f000 fae6 	bl	800513e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	f003 0304 	and.w	r3, r3, #4
 8004b82:	2b04      	cmp	r3, #4
 8004b84:	d122      	bne.n	8004bcc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	f003 0304 	and.w	r3, r3, #4
 8004b90:	2b04      	cmp	r3, #4
 8004b92:	d11b      	bne.n	8004bcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f06f 0204 	mvn.w	r2, #4
 8004b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2202      	movs	r2, #2
 8004ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d003      	beq.n	8004bba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 fab9 	bl	800512a <HAL_TIM_IC_CaptureCallback>
 8004bb8:	e005      	b.n	8004bc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 faab 	bl	8005116 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f000 fabc 	bl	800513e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	f003 0308 	and.w	r3, r3, #8
 8004bd6:	2b08      	cmp	r3, #8
 8004bd8:	d122      	bne.n	8004c20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	f003 0308 	and.w	r3, r3, #8
 8004be4:	2b08      	cmp	r3, #8
 8004be6:	d11b      	bne.n	8004c20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f06f 0208 	mvn.w	r2, #8
 8004bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2204      	movs	r2, #4
 8004bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	69db      	ldr	r3, [r3, #28]
 8004bfe:	f003 0303 	and.w	r3, r3, #3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d003      	beq.n	8004c0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 fa8f 	bl	800512a <HAL_TIM_IC_CaptureCallback>
 8004c0c:	e005      	b.n	8004c1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 fa81 	bl	8005116 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 fa92 	bl	800513e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	f003 0310 	and.w	r3, r3, #16
 8004c2a:	2b10      	cmp	r3, #16
 8004c2c:	d122      	bne.n	8004c74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	f003 0310 	and.w	r3, r3, #16
 8004c38:	2b10      	cmp	r3, #16
 8004c3a:	d11b      	bne.n	8004c74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f06f 0210 	mvn.w	r2, #16
 8004c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2208      	movs	r2, #8
 8004c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	69db      	ldr	r3, [r3, #28]
 8004c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d003      	beq.n	8004c62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 fa65 	bl	800512a <HAL_TIM_IC_CaptureCallback>
 8004c60:	e005      	b.n	8004c6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 fa57 	bl	8005116 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 fa68 	bl	800513e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d10e      	bne.n	8004ca0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	f003 0301 	and.w	r3, r3, #1
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d107      	bne.n	8004ca0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f06f 0201 	mvn.w	r2, #1
 8004c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f7fc f8c8 	bl	8000e30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004caa:	2b80      	cmp	r3, #128	; 0x80
 8004cac:	d10e      	bne.n	8004ccc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cb8:	2b80      	cmp	r3, #128	; 0x80
 8004cba:	d107      	bne.n	8004ccc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 ff10 	bl	8005aec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cda:	d10e      	bne.n	8004cfa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce6:	2b80      	cmp	r3, #128	; 0x80
 8004ce8:	d107      	bne.n	8004cfa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004cf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 ff03 	bl	8005b00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d04:	2b40      	cmp	r3, #64	; 0x40
 8004d06:	d10e      	bne.n	8004d26 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d12:	2b40      	cmp	r3, #64	; 0x40
 8004d14:	d107      	bne.n	8004d26 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 fa16 	bl	8005152 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	f003 0320 	and.w	r3, r3, #32
 8004d30:	2b20      	cmp	r3, #32
 8004d32:	d10e      	bne.n	8004d52 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	f003 0320 	and.w	r3, r3, #32
 8004d3e:	2b20      	cmp	r3, #32
 8004d40:	d107      	bne.n	8004d52 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f06f 0220 	mvn.w	r2, #32
 8004d4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 fec3 	bl	8005ad8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d52:	bf00      	nop
 8004d54:	3708      	adds	r7, #8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
	...

08004d5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b086      	sub	sp, #24
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d101      	bne.n	8004d7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d76:	2302      	movs	r3, #2
 8004d78:	e0ff      	b.n	8004f7a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2b14      	cmp	r3, #20
 8004d86:	f200 80f0 	bhi.w	8004f6a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004d8a:	a201      	add	r2, pc, #4	; (adr r2, 8004d90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d90:	08004de5 	.word	0x08004de5
 8004d94:	08004f6b 	.word	0x08004f6b
 8004d98:	08004f6b 	.word	0x08004f6b
 8004d9c:	08004f6b 	.word	0x08004f6b
 8004da0:	08004e25 	.word	0x08004e25
 8004da4:	08004f6b 	.word	0x08004f6b
 8004da8:	08004f6b 	.word	0x08004f6b
 8004dac:	08004f6b 	.word	0x08004f6b
 8004db0:	08004e67 	.word	0x08004e67
 8004db4:	08004f6b 	.word	0x08004f6b
 8004db8:	08004f6b 	.word	0x08004f6b
 8004dbc:	08004f6b 	.word	0x08004f6b
 8004dc0:	08004ea7 	.word	0x08004ea7
 8004dc4:	08004f6b 	.word	0x08004f6b
 8004dc8:	08004f6b 	.word	0x08004f6b
 8004dcc:	08004f6b 	.word	0x08004f6b
 8004dd0:	08004ee9 	.word	0x08004ee9
 8004dd4:	08004f6b 	.word	0x08004f6b
 8004dd8:	08004f6b 	.word	0x08004f6b
 8004ddc:	08004f6b 	.word	0x08004f6b
 8004de0:	08004f29 	.word	0x08004f29
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68b9      	ldr	r1, [r7, #8]
 8004dea:	4618      	mov	r0, r3
 8004dec:	f000 fa56 	bl	800529c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	699a      	ldr	r2, [r3, #24]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f042 0208 	orr.w	r2, r2, #8
 8004dfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	699a      	ldr	r2, [r3, #24]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f022 0204 	bic.w	r2, r2, #4
 8004e0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6999      	ldr	r1, [r3, #24]
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	691a      	ldr	r2, [r3, #16]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	430a      	orrs	r2, r1
 8004e20:	619a      	str	r2, [r3, #24]
      break;
 8004e22:	e0a5      	b.n	8004f70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68b9      	ldr	r1, [r7, #8]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f000 fac6 	bl	80053bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	699a      	ldr	r2, [r3, #24]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	699a      	ldr	r2, [r3, #24]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	6999      	ldr	r1, [r3, #24]
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	021a      	lsls	r2, r3, #8
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	430a      	orrs	r2, r1
 8004e62:	619a      	str	r2, [r3, #24]
      break;
 8004e64:	e084      	b.n	8004f70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68b9      	ldr	r1, [r7, #8]
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f000 fb2f 	bl	80054d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	69da      	ldr	r2, [r3, #28]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f042 0208 	orr.w	r2, r2, #8
 8004e80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	69da      	ldr	r2, [r3, #28]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f022 0204 	bic.w	r2, r2, #4
 8004e90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	69d9      	ldr	r1, [r3, #28]
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	691a      	ldr	r2, [r3, #16]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	61da      	str	r2, [r3, #28]
      break;
 8004ea4:	e064      	b.n	8004f70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68b9      	ldr	r1, [r7, #8]
 8004eac:	4618      	mov	r0, r3
 8004eae:	f000 fb97 	bl	80055e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	69da      	ldr	r2, [r3, #28]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ec0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	69da      	ldr	r2, [r3, #28]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ed0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	69d9      	ldr	r1, [r3, #28]
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	021a      	lsls	r2, r3, #8
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	61da      	str	r2, [r3, #28]
      break;
 8004ee6:	e043      	b.n	8004f70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68b9      	ldr	r1, [r7, #8]
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f000 fbe0 	bl	80056b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f042 0208 	orr.w	r2, r2, #8
 8004f02:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f022 0204 	bic.w	r2, r2, #4
 8004f12:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	691a      	ldr	r2, [r3, #16]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	430a      	orrs	r2, r1
 8004f24:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004f26:	e023      	b.n	8004f70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68b9      	ldr	r1, [r7, #8]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f000 fc24 	bl	800577c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f42:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f52:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	021a      	lsls	r2, r3, #8
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	430a      	orrs	r2, r1
 8004f66:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004f68:	e002      	b.n	8004f70 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	75fb      	strb	r3, [r7, #23]
      break;
 8004f6e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f78:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3718      	adds	r7, #24
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop

08004f84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d101      	bne.n	8004fa0 <HAL_TIM_ConfigClockSource+0x1c>
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	e0b6      	b.n	800510e <HAL_TIM_ConfigClockSource+0x18a>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2202      	movs	r2, #2
 8004fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fbe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004fc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68ba      	ldr	r2, [r7, #8]
 8004fd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fdc:	d03e      	beq.n	800505c <HAL_TIM_ConfigClockSource+0xd8>
 8004fde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fe2:	f200 8087 	bhi.w	80050f4 <HAL_TIM_ConfigClockSource+0x170>
 8004fe6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fea:	f000 8086 	beq.w	80050fa <HAL_TIM_ConfigClockSource+0x176>
 8004fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ff2:	d87f      	bhi.n	80050f4 <HAL_TIM_ConfigClockSource+0x170>
 8004ff4:	2b70      	cmp	r3, #112	; 0x70
 8004ff6:	d01a      	beq.n	800502e <HAL_TIM_ConfigClockSource+0xaa>
 8004ff8:	2b70      	cmp	r3, #112	; 0x70
 8004ffa:	d87b      	bhi.n	80050f4 <HAL_TIM_ConfigClockSource+0x170>
 8004ffc:	2b60      	cmp	r3, #96	; 0x60
 8004ffe:	d050      	beq.n	80050a2 <HAL_TIM_ConfigClockSource+0x11e>
 8005000:	2b60      	cmp	r3, #96	; 0x60
 8005002:	d877      	bhi.n	80050f4 <HAL_TIM_ConfigClockSource+0x170>
 8005004:	2b50      	cmp	r3, #80	; 0x50
 8005006:	d03c      	beq.n	8005082 <HAL_TIM_ConfigClockSource+0xfe>
 8005008:	2b50      	cmp	r3, #80	; 0x50
 800500a:	d873      	bhi.n	80050f4 <HAL_TIM_ConfigClockSource+0x170>
 800500c:	2b40      	cmp	r3, #64	; 0x40
 800500e:	d058      	beq.n	80050c2 <HAL_TIM_ConfigClockSource+0x13e>
 8005010:	2b40      	cmp	r3, #64	; 0x40
 8005012:	d86f      	bhi.n	80050f4 <HAL_TIM_ConfigClockSource+0x170>
 8005014:	2b30      	cmp	r3, #48	; 0x30
 8005016:	d064      	beq.n	80050e2 <HAL_TIM_ConfigClockSource+0x15e>
 8005018:	2b30      	cmp	r3, #48	; 0x30
 800501a:	d86b      	bhi.n	80050f4 <HAL_TIM_ConfigClockSource+0x170>
 800501c:	2b20      	cmp	r3, #32
 800501e:	d060      	beq.n	80050e2 <HAL_TIM_ConfigClockSource+0x15e>
 8005020:	2b20      	cmp	r3, #32
 8005022:	d867      	bhi.n	80050f4 <HAL_TIM_ConfigClockSource+0x170>
 8005024:	2b00      	cmp	r3, #0
 8005026:	d05c      	beq.n	80050e2 <HAL_TIM_ConfigClockSource+0x15e>
 8005028:	2b10      	cmp	r3, #16
 800502a:	d05a      	beq.n	80050e2 <HAL_TIM_ConfigClockSource+0x15e>
 800502c:	e062      	b.n	80050f4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6818      	ldr	r0, [r3, #0]
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	6899      	ldr	r1, [r3, #8]
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	685a      	ldr	r2, [r3, #4]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	f000 fc7d 	bl	800593c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005050:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68ba      	ldr	r2, [r7, #8]
 8005058:	609a      	str	r2, [r3, #8]
      break;
 800505a:	e04f      	b.n	80050fc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6818      	ldr	r0, [r3, #0]
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	6899      	ldr	r1, [r3, #8]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685a      	ldr	r2, [r3, #4]
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	f000 fc66 	bl	800593c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	689a      	ldr	r2, [r3, #8]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800507e:	609a      	str	r2, [r3, #8]
      break;
 8005080:	e03c      	b.n	80050fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6818      	ldr	r0, [r3, #0]
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	6859      	ldr	r1, [r3, #4]
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	461a      	mov	r2, r3
 8005090:	f000 fbda 	bl	8005848 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2150      	movs	r1, #80	; 0x50
 800509a:	4618      	mov	r0, r3
 800509c:	f000 fc33 	bl	8005906 <TIM_ITRx_SetConfig>
      break;
 80050a0:	e02c      	b.n	80050fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6818      	ldr	r0, [r3, #0]
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	6859      	ldr	r1, [r3, #4]
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	461a      	mov	r2, r3
 80050b0:	f000 fbf9 	bl	80058a6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	2160      	movs	r1, #96	; 0x60
 80050ba:	4618      	mov	r0, r3
 80050bc:	f000 fc23 	bl	8005906 <TIM_ITRx_SetConfig>
      break;
 80050c0:	e01c      	b.n	80050fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6818      	ldr	r0, [r3, #0]
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	6859      	ldr	r1, [r3, #4]
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	461a      	mov	r2, r3
 80050d0:	f000 fbba 	bl	8005848 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2140      	movs	r1, #64	; 0x40
 80050da:	4618      	mov	r0, r3
 80050dc:	f000 fc13 	bl	8005906 <TIM_ITRx_SetConfig>
      break;
 80050e0:	e00c      	b.n	80050fc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4619      	mov	r1, r3
 80050ec:	4610      	mov	r0, r2
 80050ee:	f000 fc0a 	bl	8005906 <TIM_ITRx_SetConfig>
      break;
 80050f2:	e003      	b.n	80050fc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	73fb      	strb	r3, [r7, #15]
      break;
 80050f8:	e000      	b.n	80050fc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80050fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800510c:	7bfb      	ldrb	r3, [r7, #15]
}
 800510e:	4618      	mov	r0, r3
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005116:	b480      	push	{r7}
 8005118:	b083      	sub	sp, #12
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800511e:	bf00      	nop
 8005120:	370c      	adds	r7, #12
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr

0800512a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800512a:	b480      	push	{r7}
 800512c:	b083      	sub	sp, #12
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005132:	bf00      	nop
 8005134:	370c      	adds	r7, #12
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr

0800513e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800513e:	b480      	push	{r7}
 8005140:	b083      	sub	sp, #12
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005146:	bf00      	nop
 8005148:	370c      	adds	r7, #12
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr

08005152 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005152:	b480      	push	{r7}
 8005154:	b083      	sub	sp, #12
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800515a:	bf00      	nop
 800515c:	370c      	adds	r7, #12
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
	...

08005168 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005168:	b480      	push	{r7}
 800516a:	b085      	sub	sp, #20
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a40      	ldr	r2, [pc, #256]	; (800527c <TIM_Base_SetConfig+0x114>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d013      	beq.n	80051a8 <TIM_Base_SetConfig+0x40>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005186:	d00f      	beq.n	80051a8 <TIM_Base_SetConfig+0x40>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a3d      	ldr	r2, [pc, #244]	; (8005280 <TIM_Base_SetConfig+0x118>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d00b      	beq.n	80051a8 <TIM_Base_SetConfig+0x40>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a3c      	ldr	r2, [pc, #240]	; (8005284 <TIM_Base_SetConfig+0x11c>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d007      	beq.n	80051a8 <TIM_Base_SetConfig+0x40>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a3b      	ldr	r2, [pc, #236]	; (8005288 <TIM_Base_SetConfig+0x120>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d003      	beq.n	80051a8 <TIM_Base_SetConfig+0x40>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a3a      	ldr	r2, [pc, #232]	; (800528c <TIM_Base_SetConfig+0x124>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d108      	bne.n	80051ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a2f      	ldr	r2, [pc, #188]	; (800527c <TIM_Base_SetConfig+0x114>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d01f      	beq.n	8005202 <TIM_Base_SetConfig+0x9a>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051c8:	d01b      	beq.n	8005202 <TIM_Base_SetConfig+0x9a>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a2c      	ldr	r2, [pc, #176]	; (8005280 <TIM_Base_SetConfig+0x118>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d017      	beq.n	8005202 <TIM_Base_SetConfig+0x9a>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a2b      	ldr	r2, [pc, #172]	; (8005284 <TIM_Base_SetConfig+0x11c>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d013      	beq.n	8005202 <TIM_Base_SetConfig+0x9a>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a2a      	ldr	r2, [pc, #168]	; (8005288 <TIM_Base_SetConfig+0x120>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d00f      	beq.n	8005202 <TIM_Base_SetConfig+0x9a>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a29      	ldr	r2, [pc, #164]	; (800528c <TIM_Base_SetConfig+0x124>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d00b      	beq.n	8005202 <TIM_Base_SetConfig+0x9a>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a28      	ldr	r2, [pc, #160]	; (8005290 <TIM_Base_SetConfig+0x128>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d007      	beq.n	8005202 <TIM_Base_SetConfig+0x9a>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a27      	ldr	r2, [pc, #156]	; (8005294 <TIM_Base_SetConfig+0x12c>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d003      	beq.n	8005202 <TIM_Base_SetConfig+0x9a>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a26      	ldr	r2, [pc, #152]	; (8005298 <TIM_Base_SetConfig+0x130>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d108      	bne.n	8005214 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005208:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	4313      	orrs	r3, r2
 8005212:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	4313      	orrs	r3, r2
 8005220:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	689a      	ldr	r2, [r3, #8]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a10      	ldr	r2, [pc, #64]	; (800527c <TIM_Base_SetConfig+0x114>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d00f      	beq.n	8005260 <TIM_Base_SetConfig+0xf8>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a12      	ldr	r2, [pc, #72]	; (800528c <TIM_Base_SetConfig+0x124>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d00b      	beq.n	8005260 <TIM_Base_SetConfig+0xf8>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a11      	ldr	r2, [pc, #68]	; (8005290 <TIM_Base_SetConfig+0x128>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d007      	beq.n	8005260 <TIM_Base_SetConfig+0xf8>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a10      	ldr	r2, [pc, #64]	; (8005294 <TIM_Base_SetConfig+0x12c>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d003      	beq.n	8005260 <TIM_Base_SetConfig+0xf8>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a0f      	ldr	r2, [pc, #60]	; (8005298 <TIM_Base_SetConfig+0x130>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d103      	bne.n	8005268 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	691a      	ldr	r2, [r3, #16]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	615a      	str	r2, [r3, #20]
}
 800526e:	bf00      	nop
 8005270:	3714      	adds	r7, #20
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	40012c00 	.word	0x40012c00
 8005280:	40000400 	.word	0x40000400
 8005284:	40000800 	.word	0x40000800
 8005288:	40000c00 	.word	0x40000c00
 800528c:	40013400 	.word	0x40013400
 8005290:	40014000 	.word	0x40014000
 8005294:	40014400 	.word	0x40014400
 8005298:	40014800 	.word	0x40014800

0800529c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800529c:	b480      	push	{r7}
 800529e:	b087      	sub	sp, #28
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a1b      	ldr	r3, [r3, #32]
 80052aa:	f023 0201 	bic.w	r2, r3, #1
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f023 0303 	bic.w	r3, r3, #3
 80052d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	4313      	orrs	r3, r2
 80052e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	f023 0302 	bic.w	r3, r3, #2
 80052e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	697a      	ldr	r2, [r7, #20]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a2c      	ldr	r2, [pc, #176]	; (80053a8 <TIM_OC1_SetConfig+0x10c>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d00f      	beq.n	800531c <TIM_OC1_SetConfig+0x80>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a2b      	ldr	r2, [pc, #172]	; (80053ac <TIM_OC1_SetConfig+0x110>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d00b      	beq.n	800531c <TIM_OC1_SetConfig+0x80>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a2a      	ldr	r2, [pc, #168]	; (80053b0 <TIM_OC1_SetConfig+0x114>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d007      	beq.n	800531c <TIM_OC1_SetConfig+0x80>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a29      	ldr	r2, [pc, #164]	; (80053b4 <TIM_OC1_SetConfig+0x118>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d003      	beq.n	800531c <TIM_OC1_SetConfig+0x80>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a28      	ldr	r2, [pc, #160]	; (80053b8 <TIM_OC1_SetConfig+0x11c>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d10c      	bne.n	8005336 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	f023 0308 	bic.w	r3, r3, #8
 8005322:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	697a      	ldr	r2, [r7, #20]
 800532a:	4313      	orrs	r3, r2
 800532c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	f023 0304 	bic.w	r3, r3, #4
 8005334:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a1b      	ldr	r2, [pc, #108]	; (80053a8 <TIM_OC1_SetConfig+0x10c>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d00f      	beq.n	800535e <TIM_OC1_SetConfig+0xc2>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a1a      	ldr	r2, [pc, #104]	; (80053ac <TIM_OC1_SetConfig+0x110>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d00b      	beq.n	800535e <TIM_OC1_SetConfig+0xc2>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a19      	ldr	r2, [pc, #100]	; (80053b0 <TIM_OC1_SetConfig+0x114>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d007      	beq.n	800535e <TIM_OC1_SetConfig+0xc2>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a18      	ldr	r2, [pc, #96]	; (80053b4 <TIM_OC1_SetConfig+0x118>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d003      	beq.n	800535e <TIM_OC1_SetConfig+0xc2>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a17      	ldr	r2, [pc, #92]	; (80053b8 <TIM_OC1_SetConfig+0x11c>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d111      	bne.n	8005382 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005364:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800536c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	693a      	ldr	r2, [r7, #16]
 8005374:	4313      	orrs	r3, r2
 8005376:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	699b      	ldr	r3, [r3, #24]
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	4313      	orrs	r3, r2
 8005380:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	693a      	ldr	r2, [r7, #16]
 8005386:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	685a      	ldr	r2, [r3, #4]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	697a      	ldr	r2, [r7, #20]
 800539a:	621a      	str	r2, [r3, #32]
}
 800539c:	bf00      	nop
 800539e:	371c      	adds	r7, #28
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr
 80053a8:	40012c00 	.word	0x40012c00
 80053ac:	40013400 	.word	0x40013400
 80053b0:	40014000 	.word	0x40014000
 80053b4:	40014400 	.word	0x40014400
 80053b8:	40014800 	.word	0x40014800

080053bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053bc:	b480      	push	{r7}
 80053be:	b087      	sub	sp, #28
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a1b      	ldr	r3, [r3, #32]
 80053ca:	f023 0210 	bic.w	r2, r3, #16
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a1b      	ldr	r3, [r3, #32]
 80053d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	699b      	ldr	r3, [r3, #24]
 80053e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	021b      	lsls	r3, r3, #8
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	4313      	orrs	r3, r2
 8005402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	f023 0320 	bic.w	r3, r3, #32
 800540a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	011b      	lsls	r3, r3, #4
 8005412:	697a      	ldr	r2, [r7, #20]
 8005414:	4313      	orrs	r3, r2
 8005416:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a28      	ldr	r2, [pc, #160]	; (80054bc <TIM_OC2_SetConfig+0x100>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d003      	beq.n	8005428 <TIM_OC2_SetConfig+0x6c>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4a27      	ldr	r2, [pc, #156]	; (80054c0 <TIM_OC2_SetConfig+0x104>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d10d      	bne.n	8005444 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800542e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	011b      	lsls	r3, r3, #4
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	4313      	orrs	r3, r2
 800543a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005442:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a1d      	ldr	r2, [pc, #116]	; (80054bc <TIM_OC2_SetConfig+0x100>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d00f      	beq.n	800546c <TIM_OC2_SetConfig+0xb0>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a1c      	ldr	r2, [pc, #112]	; (80054c0 <TIM_OC2_SetConfig+0x104>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d00b      	beq.n	800546c <TIM_OC2_SetConfig+0xb0>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a1b      	ldr	r2, [pc, #108]	; (80054c4 <TIM_OC2_SetConfig+0x108>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d007      	beq.n	800546c <TIM_OC2_SetConfig+0xb0>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a1a      	ldr	r2, [pc, #104]	; (80054c8 <TIM_OC2_SetConfig+0x10c>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d003      	beq.n	800546c <TIM_OC2_SetConfig+0xb0>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a19      	ldr	r2, [pc, #100]	; (80054cc <TIM_OC2_SetConfig+0x110>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d113      	bne.n	8005494 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005472:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800547a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	695b      	ldr	r3, [r3, #20]
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	4313      	orrs	r3, r2
 8005486:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	699b      	ldr	r3, [r3, #24]
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	4313      	orrs	r3, r2
 8005492:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	693a      	ldr	r2, [r7, #16]
 8005498:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	685a      	ldr	r2, [r3, #4]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	621a      	str	r2, [r3, #32]
}
 80054ae:	bf00      	nop
 80054b0:	371c      	adds	r7, #28
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop
 80054bc:	40012c00 	.word	0x40012c00
 80054c0:	40013400 	.word	0x40013400
 80054c4:	40014000 	.word	0x40014000
 80054c8:	40014400 	.word	0x40014400
 80054cc:	40014800 	.word	0x40014800

080054d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b087      	sub	sp, #28
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a1b      	ldr	r3, [r3, #32]
 80054de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a1b      	ldr	r3, [r3, #32]
 80054ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	69db      	ldr	r3, [r3, #28]
 80054f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005502:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f023 0303 	bic.w	r3, r3, #3
 800550a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	4313      	orrs	r3, r2
 8005514:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800551c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	021b      	lsls	r3, r3, #8
 8005524:	697a      	ldr	r2, [r7, #20]
 8005526:	4313      	orrs	r3, r2
 8005528:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a27      	ldr	r2, [pc, #156]	; (80055cc <TIM_OC3_SetConfig+0xfc>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d003      	beq.n	800553a <TIM_OC3_SetConfig+0x6a>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a26      	ldr	r2, [pc, #152]	; (80055d0 <TIM_OC3_SetConfig+0x100>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d10d      	bne.n	8005556 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005540:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	021b      	lsls	r3, r3, #8
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	4313      	orrs	r3, r2
 800554c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005554:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a1c      	ldr	r2, [pc, #112]	; (80055cc <TIM_OC3_SetConfig+0xfc>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d00f      	beq.n	800557e <TIM_OC3_SetConfig+0xae>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a1b      	ldr	r2, [pc, #108]	; (80055d0 <TIM_OC3_SetConfig+0x100>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d00b      	beq.n	800557e <TIM_OC3_SetConfig+0xae>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a1a      	ldr	r2, [pc, #104]	; (80055d4 <TIM_OC3_SetConfig+0x104>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d007      	beq.n	800557e <TIM_OC3_SetConfig+0xae>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a19      	ldr	r2, [pc, #100]	; (80055d8 <TIM_OC3_SetConfig+0x108>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d003      	beq.n	800557e <TIM_OC3_SetConfig+0xae>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a18      	ldr	r2, [pc, #96]	; (80055dc <TIM_OC3_SetConfig+0x10c>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d113      	bne.n	80055a6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005584:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800558c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	011b      	lsls	r3, r3, #4
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	4313      	orrs	r3, r2
 8005598:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	699b      	ldr	r3, [r3, #24]
 800559e:	011b      	lsls	r3, r3, #4
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	685a      	ldr	r2, [r3, #4]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	697a      	ldr	r2, [r7, #20]
 80055be:	621a      	str	r2, [r3, #32]
}
 80055c0:	bf00      	nop
 80055c2:	371c      	adds	r7, #28
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr
 80055cc:	40012c00 	.word	0x40012c00
 80055d0:	40013400 	.word	0x40013400
 80055d4:	40014000 	.word	0x40014000
 80055d8:	40014400 	.word	0x40014400
 80055dc:	40014800 	.word	0x40014800

080055e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b087      	sub	sp, #28
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	69db      	ldr	r3, [r3, #28]
 8005606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800560e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800561a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	021b      	lsls	r3, r3, #8
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	4313      	orrs	r3, r2
 8005626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800562e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	031b      	lsls	r3, r3, #12
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	4313      	orrs	r3, r2
 800563a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a18      	ldr	r2, [pc, #96]	; (80056a0 <TIM_OC4_SetConfig+0xc0>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d00f      	beq.n	8005664 <TIM_OC4_SetConfig+0x84>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a17      	ldr	r2, [pc, #92]	; (80056a4 <TIM_OC4_SetConfig+0xc4>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d00b      	beq.n	8005664 <TIM_OC4_SetConfig+0x84>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a16      	ldr	r2, [pc, #88]	; (80056a8 <TIM_OC4_SetConfig+0xc8>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d007      	beq.n	8005664 <TIM_OC4_SetConfig+0x84>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a15      	ldr	r2, [pc, #84]	; (80056ac <TIM_OC4_SetConfig+0xcc>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d003      	beq.n	8005664 <TIM_OC4_SetConfig+0x84>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a14      	ldr	r2, [pc, #80]	; (80056b0 <TIM_OC4_SetConfig+0xd0>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d109      	bne.n	8005678 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800566a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	695b      	ldr	r3, [r3, #20]
 8005670:	019b      	lsls	r3, r3, #6
 8005672:	697a      	ldr	r2, [r7, #20]
 8005674:	4313      	orrs	r3, r2
 8005676:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	697a      	ldr	r2, [r7, #20]
 800567c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	685a      	ldr	r2, [r3, #4]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	621a      	str	r2, [r3, #32]
}
 8005692:	bf00      	nop
 8005694:	371c      	adds	r7, #28
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	40012c00 	.word	0x40012c00
 80056a4:	40013400 	.word	0x40013400
 80056a8:	40014000 	.word	0x40014000
 80056ac:	40014400 	.word	0x40014400
 80056b0:	40014800 	.word	0x40014800

080056b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b087      	sub	sp, #28
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a1b      	ldr	r3, [r3, #32]
 80056ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80056f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	041b      	lsls	r3, r3, #16
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	4313      	orrs	r3, r2
 8005704:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a17      	ldr	r2, [pc, #92]	; (8005768 <TIM_OC5_SetConfig+0xb4>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d00f      	beq.n	800572e <TIM_OC5_SetConfig+0x7a>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a16      	ldr	r2, [pc, #88]	; (800576c <TIM_OC5_SetConfig+0xb8>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d00b      	beq.n	800572e <TIM_OC5_SetConfig+0x7a>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a15      	ldr	r2, [pc, #84]	; (8005770 <TIM_OC5_SetConfig+0xbc>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d007      	beq.n	800572e <TIM_OC5_SetConfig+0x7a>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a14      	ldr	r2, [pc, #80]	; (8005774 <TIM_OC5_SetConfig+0xc0>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d003      	beq.n	800572e <TIM_OC5_SetConfig+0x7a>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a13      	ldr	r2, [pc, #76]	; (8005778 <TIM_OC5_SetConfig+0xc4>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d109      	bne.n	8005742 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005734:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	695b      	ldr	r3, [r3, #20]
 800573a:	021b      	lsls	r3, r3, #8
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	4313      	orrs	r3, r2
 8005740:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	685a      	ldr	r2, [r3, #4]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	621a      	str	r2, [r3, #32]
}
 800575c:	bf00      	nop
 800575e:	371c      	adds	r7, #28
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr
 8005768:	40012c00 	.word	0x40012c00
 800576c:	40013400 	.word	0x40013400
 8005770:	40014000 	.word	0x40014000
 8005774:	40014400 	.word	0x40014400
 8005778:	40014800 	.word	0x40014800

0800577c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800577c:	b480      	push	{r7}
 800577e:	b087      	sub	sp, #28
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a1b      	ldr	r3, [r3, #32]
 800578a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a1b      	ldr	r3, [r3, #32]
 8005796:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	021b      	lsls	r3, r3, #8
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80057c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	051b      	lsls	r3, r3, #20
 80057ca:	693a      	ldr	r2, [r7, #16]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a18      	ldr	r2, [pc, #96]	; (8005834 <TIM_OC6_SetConfig+0xb8>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d00f      	beq.n	80057f8 <TIM_OC6_SetConfig+0x7c>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a17      	ldr	r2, [pc, #92]	; (8005838 <TIM_OC6_SetConfig+0xbc>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d00b      	beq.n	80057f8 <TIM_OC6_SetConfig+0x7c>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a16      	ldr	r2, [pc, #88]	; (800583c <TIM_OC6_SetConfig+0xc0>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d007      	beq.n	80057f8 <TIM_OC6_SetConfig+0x7c>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a15      	ldr	r2, [pc, #84]	; (8005840 <TIM_OC6_SetConfig+0xc4>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d003      	beq.n	80057f8 <TIM_OC6_SetConfig+0x7c>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a14      	ldr	r2, [pc, #80]	; (8005844 <TIM_OC6_SetConfig+0xc8>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d109      	bne.n	800580c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	695b      	ldr	r3, [r3, #20]
 8005804:	029b      	lsls	r3, r3, #10
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	4313      	orrs	r3, r2
 800580a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	685a      	ldr	r2, [r3, #4]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	693a      	ldr	r2, [r7, #16]
 8005824:	621a      	str	r2, [r3, #32]
}
 8005826:	bf00      	nop
 8005828:	371c      	adds	r7, #28
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	40012c00 	.word	0x40012c00
 8005838:	40013400 	.word	0x40013400
 800583c:	40014000 	.word	0x40014000
 8005840:	40014400 	.word	0x40014400
 8005844:	40014800 	.word	0x40014800

08005848 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005848:	b480      	push	{r7}
 800584a:	b087      	sub	sp, #28
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6a1b      	ldr	r3, [r3, #32]
 8005858:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6a1b      	ldr	r3, [r3, #32]
 800585e:	f023 0201 	bic.w	r2, r3, #1
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005872:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	011b      	lsls	r3, r3, #4
 8005878:	693a      	ldr	r2, [r7, #16]
 800587a:	4313      	orrs	r3, r2
 800587c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	f023 030a 	bic.w	r3, r3, #10
 8005884:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	4313      	orrs	r3, r2
 800588c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	693a      	ldr	r2, [r7, #16]
 8005892:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	621a      	str	r2, [r3, #32]
}
 800589a:	bf00      	nop
 800589c:	371c      	adds	r7, #28
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr

080058a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058a6:	b480      	push	{r7}
 80058a8:	b087      	sub	sp, #28
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	60f8      	str	r0, [r7, #12]
 80058ae:	60b9      	str	r1, [r7, #8]
 80058b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	f023 0210 	bic.w	r2, r3, #16
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6a1b      	ldr	r3, [r3, #32]
 80058c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	031b      	lsls	r3, r3, #12
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	4313      	orrs	r3, r2
 80058da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	011b      	lsls	r3, r3, #4
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	697a      	ldr	r2, [r7, #20]
 80058f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	621a      	str	r2, [r3, #32]
}
 80058fa:	bf00      	nop
 80058fc:	371c      	adds	r7, #28
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr

08005906 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005906:	b480      	push	{r7}
 8005908:	b085      	sub	sp, #20
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
 800590e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800591c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800591e:	683a      	ldr	r2, [r7, #0]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	4313      	orrs	r3, r2
 8005924:	f043 0307 	orr.w	r3, r3, #7
 8005928:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	609a      	str	r2, [r3, #8]
}
 8005930:	bf00      	nop
 8005932:	3714      	adds	r7, #20
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800593c:	b480      	push	{r7}
 800593e:	b087      	sub	sp, #28
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]
 8005948:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005956:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	021a      	lsls	r2, r3, #8
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	431a      	orrs	r2, r3
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	4313      	orrs	r3, r2
 8005964:	697a      	ldr	r2, [r7, #20]
 8005966:	4313      	orrs	r3, r2
 8005968:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	697a      	ldr	r2, [r7, #20]
 800596e:	609a      	str	r2, [r3, #8]
}
 8005970:	bf00      	nop
 8005972:	371c      	adds	r7, #28
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800597c:	b480      	push	{r7}
 800597e:	b087      	sub	sp, #28
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	f003 031f 	and.w	r3, r3, #31
 800598e:	2201      	movs	r2, #1
 8005990:	fa02 f303 	lsl.w	r3, r2, r3
 8005994:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6a1a      	ldr	r2, [r3, #32]
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	43db      	mvns	r3, r3
 800599e:	401a      	ands	r2, r3
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6a1a      	ldr	r2, [r3, #32]
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	f003 031f 	and.w	r3, r3, #31
 80059ae:	6879      	ldr	r1, [r7, #4]
 80059b0:	fa01 f303 	lsl.w	r3, r1, r3
 80059b4:	431a      	orrs	r2, r3
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	621a      	str	r2, [r3, #32]
}
 80059ba:	bf00      	nop
 80059bc:	371c      	adds	r7, #28
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr
	...

080059c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d101      	bne.n	80059e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059dc:	2302      	movs	r3, #2
 80059de:	e068      	b.n	8005ab2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2202      	movs	r2, #2
 80059ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a2e      	ldr	r2, [pc, #184]	; (8005ac0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d004      	beq.n	8005a14 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a2d      	ldr	r2, [pc, #180]	; (8005ac4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d108      	bne.n	8005a26 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005a1a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a2c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a1e      	ldr	r2, [pc, #120]	; (8005ac0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d01d      	beq.n	8005a86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a52:	d018      	beq.n	8005a86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a1b      	ldr	r2, [pc, #108]	; (8005ac8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d013      	beq.n	8005a86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a1a      	ldr	r2, [pc, #104]	; (8005acc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d00e      	beq.n	8005a86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a18      	ldr	r2, [pc, #96]	; (8005ad0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d009      	beq.n	8005a86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a13      	ldr	r2, [pc, #76]	; (8005ac4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d004      	beq.n	8005a86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a14      	ldr	r2, [pc, #80]	; (8005ad4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d10c      	bne.n	8005aa0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	68ba      	ldr	r2, [r7, #8]
 8005a9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ab0:	2300      	movs	r3, #0
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3714      	adds	r7, #20
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	40012c00 	.word	0x40012c00
 8005ac4:	40013400 	.word	0x40013400
 8005ac8:	40000400 	.word	0x40000400
 8005acc:	40000800 	.word	0x40000800
 8005ad0:	40000c00 	.word	0x40000c00
 8005ad4:	40014000 	.word	0x40014000

08005ad8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ae0:	bf00      	nop
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005af4:	bf00      	nop
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b08:	bf00      	nop
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d101      	bne.n	8005b26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e042      	b.n	8005bac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d106      	bne.n	8005b3e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f7fb fbe1 	bl	8001300 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2224      	movs	r2, #36	; 0x24
 8005b42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f022 0201 	bic.w	r2, r2, #1
 8005b54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 fbba 	bl	80062d0 <UART_SetConfig>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d101      	bne.n	8005b66 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e022      	b.n	8005bac <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d002      	beq.n	8005b74 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 feaa 	bl	80068c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	685a      	ldr	r2, [r3, #4]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	689a      	ldr	r2, [r3, #8]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f042 0201 	orr.w	r2, r2, #1
 8005ba2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f000 ff31 	bl	8006a0c <UART_CheckIdleState>
 8005baa:	4603      	mov	r3, r0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3708      	adds	r7, #8
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b08a      	sub	sp, #40	; 0x28
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bc8:	2b20      	cmp	r3, #32
 8005bca:	d142      	bne.n	8005c52 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d002      	beq.n	8005bd8 <HAL_UART_Receive_IT+0x24>
 8005bd2:	88fb      	ldrh	r3, [r7, #6]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d101      	bne.n	8005bdc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e03b      	b.n	8005c54 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d101      	bne.n	8005bea <HAL_UART_Receive_IT+0x36>
 8005be6:	2302      	movs	r3, #2
 8005be8:	e034      	b.n	8005c54 <HAL_UART_Receive_IT+0xa0>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2201      	movs	r2, #1
 8005bee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a17      	ldr	r2, [pc, #92]	; (8005c5c <HAL_UART_Receive_IT+0xa8>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d01f      	beq.n	8005c42 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d018      	beq.n	8005c42 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	e853 3f00 	ldrex	r3, [r3]
 8005c1c:	613b      	str	r3, [r7, #16]
   return(result);
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c24:	627b      	str	r3, [r7, #36]	; 0x24
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2e:	623b      	str	r3, [r7, #32]
 8005c30:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c32:	69f9      	ldr	r1, [r7, #28]
 8005c34:	6a3a      	ldr	r2, [r7, #32]
 8005c36:	e841 2300 	strex	r3, r2, [r1]
 8005c3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d1e6      	bne.n	8005c10 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005c42:	88fb      	ldrh	r3, [r7, #6]
 8005c44:	461a      	mov	r2, r3
 8005c46:	68b9      	ldr	r1, [r7, #8]
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f000 fff3 	bl	8006c34 <UART_Start_Receive_IT>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	e000      	b.n	8005c54 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005c52:	2302      	movs	r3, #2
  }
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3728      	adds	r7, #40	; 0x28
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	40008000 	.word	0x40008000

08005c60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b0ba      	sub	sp, #232	; 0xe8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	69db      	ldr	r3, [r3, #28]
 8005c6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005c86:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005c8a:	f640 030f 	movw	r3, #2063	; 0x80f
 8005c8e:	4013      	ands	r3, r2
 8005c90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005c94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d11b      	bne.n	8005cd4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005c9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ca0:	f003 0320 	and.w	r3, r3, #32
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d015      	beq.n	8005cd4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005ca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cac:	f003 0320 	and.w	r3, r3, #32
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d105      	bne.n	8005cc0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005cb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d009      	beq.n	8005cd4 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	f000 82d6 	beq.w	8006276 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	4798      	blx	r3
      }
      return;
 8005cd2:	e2d0      	b.n	8006276 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8005cd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f000 811f 	beq.w	8005f1c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005cde:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005ce2:	4b8b      	ldr	r3, [pc, #556]	; (8005f10 <HAL_UART_IRQHandler+0x2b0>)
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d106      	bne.n	8005cf8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005cea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005cee:	4b89      	ldr	r3, [pc, #548]	; (8005f14 <HAL_UART_IRQHandler+0x2b4>)
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	f000 8112 	beq.w	8005f1c <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cfc:	f003 0301 	and.w	r3, r3, #1
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d011      	beq.n	8005d28 <HAL_UART_IRQHandler+0xc8>
 8005d04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00b      	beq.n	8005d28 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2201      	movs	r2, #1
 8005d16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d1e:	f043 0201 	orr.w	r2, r3, #1
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d2c:	f003 0302 	and.w	r3, r3, #2
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d011      	beq.n	8005d58 <HAL_UART_IRQHandler+0xf8>
 8005d34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d38:	f003 0301 	and.w	r3, r3, #1
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00b      	beq.n	8005d58 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2202      	movs	r2, #2
 8005d46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d4e:	f043 0204 	orr.w	r2, r3, #4
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d5c:	f003 0304 	and.w	r3, r3, #4
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d011      	beq.n	8005d88 <HAL_UART_IRQHandler+0x128>
 8005d64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d68:	f003 0301 	and.w	r3, r3, #1
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d00b      	beq.n	8005d88 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2204      	movs	r2, #4
 8005d76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d7e:	f043 0202 	orr.w	r2, r3, #2
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005d88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d8c:	f003 0308 	and.w	r3, r3, #8
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d017      	beq.n	8005dc4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005d94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d98:	f003 0320 	and.w	r3, r3, #32
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d105      	bne.n	8005dac <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005da0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005da4:	4b5a      	ldr	r3, [pc, #360]	; (8005f10 <HAL_UART_IRQHandler+0x2b0>)
 8005da6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d00b      	beq.n	8005dc4 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2208      	movs	r2, #8
 8005db2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dba:	f043 0208 	orr.w	r2, r3, #8
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d012      	beq.n	8005df6 <HAL_UART_IRQHandler+0x196>
 8005dd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dd4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00c      	beq.n	8005df6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005de4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dec:	f043 0220 	orr.w	r2, r3, #32
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	f000 823c 	beq.w	800627a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e06:	f003 0320 	and.w	r3, r3, #32
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d013      	beq.n	8005e36 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005e0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e12:	f003 0320 	and.w	r3, r3, #32
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d105      	bne.n	8005e26 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005e1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d007      	beq.n	8005e36 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d003      	beq.n	8005e36 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e4a:	2b40      	cmp	r3, #64	; 0x40
 8005e4c:	d005      	beq.n	8005e5a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005e4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e52:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d04f      	beq.n	8005efa <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f001 f814 	bl	8006e88 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e6a:	2b40      	cmp	r3, #64	; 0x40
 8005e6c:	d141      	bne.n	8005ef2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	3308      	adds	r3, #8
 8005e74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e7c:	e853 3f00 	ldrex	r3, [r3]
 8005e80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005e84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	3308      	adds	r3, #8
 8005e96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005e9a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005e9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005ea6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005eaa:	e841 2300 	strex	r3, r2, [r1]
 8005eae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005eb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d1d9      	bne.n	8005e6e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d013      	beq.n	8005eea <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ec6:	4a14      	ldr	r2, [pc, #80]	; (8005f18 <HAL_UART_IRQHandler+0x2b8>)
 8005ec8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f7fb fe4b 	bl	8001b6a <HAL_DMA_Abort_IT>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d017      	beq.n	8005f0a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8005ee4:	4610      	mov	r0, r2
 8005ee6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ee8:	e00f      	b.n	8005f0a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 f9da 	bl	80062a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ef0:	e00b      	b.n	8005f0a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 f9d6 	bl	80062a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ef8:	e007      	b.n	8005f0a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 f9d2 	bl	80062a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8005f08:	e1b7      	b.n	800627a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f0a:	bf00      	nop
    return;
 8005f0c:	e1b5      	b.n	800627a <HAL_UART_IRQHandler+0x61a>
 8005f0e:	bf00      	nop
 8005f10:	10000001 	.word	0x10000001
 8005f14:	04000120 	.word	0x04000120
 8005f18:	08006f55 	.word	0x08006f55

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	f040 814a 	bne.w	80061ba <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f2a:	f003 0310 	and.w	r3, r3, #16
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	f000 8143 	beq.w	80061ba <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f38:	f003 0310 	and.w	r3, r3, #16
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	f000 813c 	beq.w	80061ba <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2210      	movs	r2, #16
 8005f48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f54:	2b40      	cmp	r3, #64	; 0x40
 8005f56:	f040 80b5 	bne.w	80060c4 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005f66:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	f000 8187 	beq.w	800627e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005f76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	f080 817f 	bcs.w	800627e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f86:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 0320 	and.w	r3, r3, #32
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	f040 8086 	bne.w	80060a8 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005fa8:	e853 3f00 	ldrex	r3, [r3]
 8005fac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005fb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005fb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005fc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005fca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005fd2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005fd6:	e841 2300 	strex	r3, r2, [r1]
 8005fda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005fde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1da      	bne.n	8005f9c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	3308      	adds	r3, #8
 8005fec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ff0:	e853 3f00 	ldrex	r3, [r3]
 8005ff4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005ff6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ff8:	f023 0301 	bic.w	r3, r3, #1
 8005ffc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	3308      	adds	r3, #8
 8006006:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800600a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800600e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006010:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006012:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006016:	e841 2300 	strex	r3, r2, [r1]
 800601a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800601c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800601e:	2b00      	cmp	r3, #0
 8006020:	d1e1      	bne.n	8005fe6 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	3308      	adds	r3, #8
 8006028:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800602a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800602c:	e853 3f00 	ldrex	r3, [r3]
 8006030:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006032:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006034:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006038:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	3308      	adds	r3, #8
 8006042:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006046:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006048:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800604a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800604c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800604e:	e841 2300 	strex	r3, r2, [r1]
 8006052:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006054:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006056:	2b00      	cmp	r3, #0
 8006058:	d1e3      	bne.n	8006022 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2220      	movs	r2, #32
 800605e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800606e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006070:	e853 3f00 	ldrex	r3, [r3]
 8006074:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006076:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006078:	f023 0310 	bic.w	r3, r3, #16
 800607c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	461a      	mov	r2, r3
 8006086:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800608a:	65bb      	str	r3, [r7, #88]	; 0x58
 800608c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006090:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006092:	e841 2300 	strex	r3, r2, [r1]
 8006096:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006098:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800609a:	2b00      	cmp	r3, #0
 800609c:	d1e4      	bne.n	8006068 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060a2:	4618      	mov	r0, r3
 80060a4:	f7fb fd05 	bl	8001ab2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	1ad3      	subs	r3, r2, r3
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	4619      	mov	r1, r3
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 f8fb 	bl	80062b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80060c2:	e0dc      	b.n	800627e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	1ad3      	subs	r3, r2, r3
 80060d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80060de:	b29b      	uxth	r3, r3
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	f000 80ce 	beq.w	8006282 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 80060e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	f000 80c9 	beq.w	8006282 <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f8:	e853 3f00 	ldrex	r3, [r3]
 80060fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80060fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006100:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006104:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	461a      	mov	r2, r3
 800610e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006112:	647b      	str	r3, [r7, #68]	; 0x44
 8006114:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006116:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006118:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800611a:	e841 2300 	strex	r3, r2, [r1]
 800611e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006122:	2b00      	cmp	r3, #0
 8006124:	d1e4      	bne.n	80060f0 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	3308      	adds	r3, #8
 800612c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800612e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006130:	e853 3f00 	ldrex	r3, [r3]
 8006134:	623b      	str	r3, [r7, #32]
   return(result);
 8006136:	6a3b      	ldr	r3, [r7, #32]
 8006138:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800613c:	f023 0301 	bic.w	r3, r3, #1
 8006140:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	3308      	adds	r3, #8
 800614a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800614e:	633a      	str	r2, [r7, #48]	; 0x30
 8006150:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006152:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006156:	e841 2300 	strex	r3, r2, [r1]
 800615a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800615c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800615e:	2b00      	cmp	r3, #0
 8006160:	d1e1      	bne.n	8006126 <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2220      	movs	r2, #32
 8006166:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	e853 3f00 	ldrex	r3, [r3]
 8006182:	60fb      	str	r3, [r7, #12]
   return(result);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f023 0310 	bic.w	r3, r3, #16
 800618a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	461a      	mov	r2, r3
 8006194:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006198:	61fb      	str	r3, [r7, #28]
 800619a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800619c:	69b9      	ldr	r1, [r7, #24]
 800619e:	69fa      	ldr	r2, [r7, #28]
 80061a0:	e841 2300 	strex	r3, r2, [r1]
 80061a4:	617b      	str	r3, [r7, #20]
   return(result);
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d1e4      	bne.n	8006176 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80061ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80061b0:	4619      	mov	r1, r3
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 f880 	bl	80062b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80061b8:	e063      	b.n	8006282 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80061ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00e      	beq.n	80061e4 <HAL_UART_IRQHandler+0x584>
 80061c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d008      	beq.n	80061e4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80061da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f001 fb57 	bl	8007890 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80061e2:	e051      	b.n	8006288 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80061e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d014      	beq.n	800621a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80061f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d105      	bne.n	8006208 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80061fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006200:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006204:	2b00      	cmp	r3, #0
 8006206:	d008      	beq.n	800621a <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800620c:	2b00      	cmp	r3, #0
 800620e:	d03a      	beq.n	8006286 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	4798      	blx	r3
    }
    return;
 8006218:	e035      	b.n	8006286 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800621a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800621e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006222:	2b00      	cmp	r3, #0
 8006224:	d009      	beq.n	800623a <HAL_UART_IRQHandler+0x5da>
 8006226:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800622a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800622e:	2b00      	cmp	r3, #0
 8006230:	d003      	beq.n	800623a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 fea4 	bl	8006f80 <UART_EndTransmit_IT>
    return;
 8006238:	e026      	b.n	8006288 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800623a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800623e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006242:	2b00      	cmp	r3, #0
 8006244:	d009      	beq.n	800625a <HAL_UART_IRQHandler+0x5fa>
 8006246:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800624a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800624e:	2b00      	cmp	r3, #0
 8006250:	d003      	beq.n	800625a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f001 fb30 	bl	80078b8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006258:	e016      	b.n	8006288 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800625a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800625e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006262:	2b00      	cmp	r3, #0
 8006264:	d010      	beq.n	8006288 <HAL_UART_IRQHandler+0x628>
 8006266:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800626a:	2b00      	cmp	r3, #0
 800626c:	da0c      	bge.n	8006288 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f001 fb18 	bl	80078a4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006274:	e008      	b.n	8006288 <HAL_UART_IRQHandler+0x628>
      return;
 8006276:	bf00      	nop
 8006278:	e006      	b.n	8006288 <HAL_UART_IRQHandler+0x628>
    return;
 800627a:	bf00      	nop
 800627c:	e004      	b.n	8006288 <HAL_UART_IRQHandler+0x628>
      return;
 800627e:	bf00      	nop
 8006280:	e002      	b.n	8006288 <HAL_UART_IRQHandler+0x628>
      return;
 8006282:	bf00      	nop
 8006284:	e000      	b.n	8006288 <HAL_UART_IRQHandler+0x628>
    return;
 8006286:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8006288:	37e8      	adds	r7, #232	; 0xe8
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop

08006290 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006298:	bf00      	nop
 800629a:	370c      	adds	r7, #12
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80062ac:	bf00      	nop
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	460b      	mov	r3, r1
 80062c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80062c4:	bf00      	nop
 80062c6:	370c      	adds	r7, #12
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062d4:	b08c      	sub	sp, #48	; 0x30
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80062da:	2300      	movs	r3, #0
 80062dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	689a      	ldr	r2, [r3, #8]
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	431a      	orrs	r2, r3
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	695b      	ldr	r3, [r3, #20]
 80062ee:	431a      	orrs	r2, r3
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	69db      	ldr	r3, [r3, #28]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	4baa      	ldr	r3, [pc, #680]	; (80065a8 <UART_SetConfig+0x2d8>)
 8006300:	4013      	ands	r3, r2
 8006302:	697a      	ldr	r2, [r7, #20]
 8006304:	6812      	ldr	r2, [r2, #0]
 8006306:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006308:	430b      	orrs	r3, r1
 800630a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	68da      	ldr	r2, [r3, #12]
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	430a      	orrs	r2, r1
 8006320:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a9f      	ldr	r2, [pc, #636]	; (80065ac <UART_SetConfig+0x2dc>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d004      	beq.n	800633c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	6a1b      	ldr	r3, [r3, #32]
 8006336:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006338:	4313      	orrs	r3, r2
 800633a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006346:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800634a:	697a      	ldr	r2, [r7, #20]
 800634c:	6812      	ldr	r2, [r2, #0]
 800634e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006350:	430b      	orrs	r3, r1
 8006352:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800635a:	f023 010f 	bic.w	r1, r3, #15
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	430a      	orrs	r2, r1
 8006368:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a90      	ldr	r2, [pc, #576]	; (80065b0 <UART_SetConfig+0x2e0>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d125      	bne.n	80063c0 <UART_SetConfig+0xf0>
 8006374:	4b8f      	ldr	r3, [pc, #572]	; (80065b4 <UART_SetConfig+0x2e4>)
 8006376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800637a:	f003 0303 	and.w	r3, r3, #3
 800637e:	2b03      	cmp	r3, #3
 8006380:	d81a      	bhi.n	80063b8 <UART_SetConfig+0xe8>
 8006382:	a201      	add	r2, pc, #4	; (adr r2, 8006388 <UART_SetConfig+0xb8>)
 8006384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006388:	08006399 	.word	0x08006399
 800638c:	080063a9 	.word	0x080063a9
 8006390:	080063a1 	.word	0x080063a1
 8006394:	080063b1 	.word	0x080063b1
 8006398:	2301      	movs	r3, #1
 800639a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800639e:	e116      	b.n	80065ce <UART_SetConfig+0x2fe>
 80063a0:	2302      	movs	r3, #2
 80063a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063a6:	e112      	b.n	80065ce <UART_SetConfig+0x2fe>
 80063a8:	2304      	movs	r3, #4
 80063aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063ae:	e10e      	b.n	80065ce <UART_SetConfig+0x2fe>
 80063b0:	2308      	movs	r3, #8
 80063b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063b6:	e10a      	b.n	80065ce <UART_SetConfig+0x2fe>
 80063b8:	2310      	movs	r3, #16
 80063ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063be:	e106      	b.n	80065ce <UART_SetConfig+0x2fe>
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a7c      	ldr	r2, [pc, #496]	; (80065b8 <UART_SetConfig+0x2e8>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d138      	bne.n	800643c <UART_SetConfig+0x16c>
 80063ca:	4b7a      	ldr	r3, [pc, #488]	; (80065b4 <UART_SetConfig+0x2e4>)
 80063cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063d0:	f003 030c 	and.w	r3, r3, #12
 80063d4:	2b0c      	cmp	r3, #12
 80063d6:	d82d      	bhi.n	8006434 <UART_SetConfig+0x164>
 80063d8:	a201      	add	r2, pc, #4	; (adr r2, 80063e0 <UART_SetConfig+0x110>)
 80063da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063de:	bf00      	nop
 80063e0:	08006415 	.word	0x08006415
 80063e4:	08006435 	.word	0x08006435
 80063e8:	08006435 	.word	0x08006435
 80063ec:	08006435 	.word	0x08006435
 80063f0:	08006425 	.word	0x08006425
 80063f4:	08006435 	.word	0x08006435
 80063f8:	08006435 	.word	0x08006435
 80063fc:	08006435 	.word	0x08006435
 8006400:	0800641d 	.word	0x0800641d
 8006404:	08006435 	.word	0x08006435
 8006408:	08006435 	.word	0x08006435
 800640c:	08006435 	.word	0x08006435
 8006410:	0800642d 	.word	0x0800642d
 8006414:	2300      	movs	r3, #0
 8006416:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800641a:	e0d8      	b.n	80065ce <UART_SetConfig+0x2fe>
 800641c:	2302      	movs	r3, #2
 800641e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006422:	e0d4      	b.n	80065ce <UART_SetConfig+0x2fe>
 8006424:	2304      	movs	r3, #4
 8006426:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800642a:	e0d0      	b.n	80065ce <UART_SetConfig+0x2fe>
 800642c:	2308      	movs	r3, #8
 800642e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006432:	e0cc      	b.n	80065ce <UART_SetConfig+0x2fe>
 8006434:	2310      	movs	r3, #16
 8006436:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800643a:	e0c8      	b.n	80065ce <UART_SetConfig+0x2fe>
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a5e      	ldr	r2, [pc, #376]	; (80065bc <UART_SetConfig+0x2ec>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d125      	bne.n	8006492 <UART_SetConfig+0x1c2>
 8006446:	4b5b      	ldr	r3, [pc, #364]	; (80065b4 <UART_SetConfig+0x2e4>)
 8006448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800644c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006450:	2b30      	cmp	r3, #48	; 0x30
 8006452:	d016      	beq.n	8006482 <UART_SetConfig+0x1b2>
 8006454:	2b30      	cmp	r3, #48	; 0x30
 8006456:	d818      	bhi.n	800648a <UART_SetConfig+0x1ba>
 8006458:	2b20      	cmp	r3, #32
 800645a:	d00a      	beq.n	8006472 <UART_SetConfig+0x1a2>
 800645c:	2b20      	cmp	r3, #32
 800645e:	d814      	bhi.n	800648a <UART_SetConfig+0x1ba>
 8006460:	2b00      	cmp	r3, #0
 8006462:	d002      	beq.n	800646a <UART_SetConfig+0x19a>
 8006464:	2b10      	cmp	r3, #16
 8006466:	d008      	beq.n	800647a <UART_SetConfig+0x1aa>
 8006468:	e00f      	b.n	800648a <UART_SetConfig+0x1ba>
 800646a:	2300      	movs	r3, #0
 800646c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006470:	e0ad      	b.n	80065ce <UART_SetConfig+0x2fe>
 8006472:	2302      	movs	r3, #2
 8006474:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006478:	e0a9      	b.n	80065ce <UART_SetConfig+0x2fe>
 800647a:	2304      	movs	r3, #4
 800647c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006480:	e0a5      	b.n	80065ce <UART_SetConfig+0x2fe>
 8006482:	2308      	movs	r3, #8
 8006484:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006488:	e0a1      	b.n	80065ce <UART_SetConfig+0x2fe>
 800648a:	2310      	movs	r3, #16
 800648c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006490:	e09d      	b.n	80065ce <UART_SetConfig+0x2fe>
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a4a      	ldr	r2, [pc, #296]	; (80065c0 <UART_SetConfig+0x2f0>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d125      	bne.n	80064e8 <UART_SetConfig+0x218>
 800649c:	4b45      	ldr	r3, [pc, #276]	; (80065b4 <UART_SetConfig+0x2e4>)
 800649e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80064a6:	2bc0      	cmp	r3, #192	; 0xc0
 80064a8:	d016      	beq.n	80064d8 <UART_SetConfig+0x208>
 80064aa:	2bc0      	cmp	r3, #192	; 0xc0
 80064ac:	d818      	bhi.n	80064e0 <UART_SetConfig+0x210>
 80064ae:	2b80      	cmp	r3, #128	; 0x80
 80064b0:	d00a      	beq.n	80064c8 <UART_SetConfig+0x1f8>
 80064b2:	2b80      	cmp	r3, #128	; 0x80
 80064b4:	d814      	bhi.n	80064e0 <UART_SetConfig+0x210>
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d002      	beq.n	80064c0 <UART_SetConfig+0x1f0>
 80064ba:	2b40      	cmp	r3, #64	; 0x40
 80064bc:	d008      	beq.n	80064d0 <UART_SetConfig+0x200>
 80064be:	e00f      	b.n	80064e0 <UART_SetConfig+0x210>
 80064c0:	2300      	movs	r3, #0
 80064c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064c6:	e082      	b.n	80065ce <UART_SetConfig+0x2fe>
 80064c8:	2302      	movs	r3, #2
 80064ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064ce:	e07e      	b.n	80065ce <UART_SetConfig+0x2fe>
 80064d0:	2304      	movs	r3, #4
 80064d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064d6:	e07a      	b.n	80065ce <UART_SetConfig+0x2fe>
 80064d8:	2308      	movs	r3, #8
 80064da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064de:	e076      	b.n	80065ce <UART_SetConfig+0x2fe>
 80064e0:	2310      	movs	r3, #16
 80064e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064e6:	e072      	b.n	80065ce <UART_SetConfig+0x2fe>
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a35      	ldr	r2, [pc, #212]	; (80065c4 <UART_SetConfig+0x2f4>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d12a      	bne.n	8006548 <UART_SetConfig+0x278>
 80064f2:	4b30      	ldr	r3, [pc, #192]	; (80065b4 <UART_SetConfig+0x2e4>)
 80064f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006500:	d01a      	beq.n	8006538 <UART_SetConfig+0x268>
 8006502:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006506:	d81b      	bhi.n	8006540 <UART_SetConfig+0x270>
 8006508:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800650c:	d00c      	beq.n	8006528 <UART_SetConfig+0x258>
 800650e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006512:	d815      	bhi.n	8006540 <UART_SetConfig+0x270>
 8006514:	2b00      	cmp	r3, #0
 8006516:	d003      	beq.n	8006520 <UART_SetConfig+0x250>
 8006518:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800651c:	d008      	beq.n	8006530 <UART_SetConfig+0x260>
 800651e:	e00f      	b.n	8006540 <UART_SetConfig+0x270>
 8006520:	2300      	movs	r3, #0
 8006522:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006526:	e052      	b.n	80065ce <UART_SetConfig+0x2fe>
 8006528:	2302      	movs	r3, #2
 800652a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800652e:	e04e      	b.n	80065ce <UART_SetConfig+0x2fe>
 8006530:	2304      	movs	r3, #4
 8006532:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006536:	e04a      	b.n	80065ce <UART_SetConfig+0x2fe>
 8006538:	2308      	movs	r3, #8
 800653a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800653e:	e046      	b.n	80065ce <UART_SetConfig+0x2fe>
 8006540:	2310      	movs	r3, #16
 8006542:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006546:	e042      	b.n	80065ce <UART_SetConfig+0x2fe>
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a17      	ldr	r2, [pc, #92]	; (80065ac <UART_SetConfig+0x2dc>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d13a      	bne.n	80065c8 <UART_SetConfig+0x2f8>
 8006552:	4b18      	ldr	r3, [pc, #96]	; (80065b4 <UART_SetConfig+0x2e4>)
 8006554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006558:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800655c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006560:	d01a      	beq.n	8006598 <UART_SetConfig+0x2c8>
 8006562:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006566:	d81b      	bhi.n	80065a0 <UART_SetConfig+0x2d0>
 8006568:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800656c:	d00c      	beq.n	8006588 <UART_SetConfig+0x2b8>
 800656e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006572:	d815      	bhi.n	80065a0 <UART_SetConfig+0x2d0>
 8006574:	2b00      	cmp	r3, #0
 8006576:	d003      	beq.n	8006580 <UART_SetConfig+0x2b0>
 8006578:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800657c:	d008      	beq.n	8006590 <UART_SetConfig+0x2c0>
 800657e:	e00f      	b.n	80065a0 <UART_SetConfig+0x2d0>
 8006580:	2300      	movs	r3, #0
 8006582:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006586:	e022      	b.n	80065ce <UART_SetConfig+0x2fe>
 8006588:	2302      	movs	r3, #2
 800658a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800658e:	e01e      	b.n	80065ce <UART_SetConfig+0x2fe>
 8006590:	2304      	movs	r3, #4
 8006592:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006596:	e01a      	b.n	80065ce <UART_SetConfig+0x2fe>
 8006598:	2308      	movs	r3, #8
 800659a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800659e:	e016      	b.n	80065ce <UART_SetConfig+0x2fe>
 80065a0:	2310      	movs	r3, #16
 80065a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065a6:	e012      	b.n	80065ce <UART_SetConfig+0x2fe>
 80065a8:	cfff69f3 	.word	0xcfff69f3
 80065ac:	40008000 	.word	0x40008000
 80065b0:	40013800 	.word	0x40013800
 80065b4:	40021000 	.word	0x40021000
 80065b8:	40004400 	.word	0x40004400
 80065bc:	40004800 	.word	0x40004800
 80065c0:	40004c00 	.word	0x40004c00
 80065c4:	40005000 	.word	0x40005000
 80065c8:	2310      	movs	r3, #16
 80065ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4aae      	ldr	r2, [pc, #696]	; (800688c <UART_SetConfig+0x5bc>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	f040 8097 	bne.w	8006708 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80065da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80065de:	2b08      	cmp	r3, #8
 80065e0:	d823      	bhi.n	800662a <UART_SetConfig+0x35a>
 80065e2:	a201      	add	r2, pc, #4	; (adr r2, 80065e8 <UART_SetConfig+0x318>)
 80065e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e8:	0800660d 	.word	0x0800660d
 80065ec:	0800662b 	.word	0x0800662b
 80065f0:	08006615 	.word	0x08006615
 80065f4:	0800662b 	.word	0x0800662b
 80065f8:	0800661b 	.word	0x0800661b
 80065fc:	0800662b 	.word	0x0800662b
 8006600:	0800662b 	.word	0x0800662b
 8006604:	0800662b 	.word	0x0800662b
 8006608:	08006623 	.word	0x08006623
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800660c:	f7fd f962 	bl	80038d4 <HAL_RCC_GetPCLK1Freq>
 8006610:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006612:	e010      	b.n	8006636 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006614:	4b9e      	ldr	r3, [pc, #632]	; (8006890 <UART_SetConfig+0x5c0>)
 8006616:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006618:	e00d      	b.n	8006636 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800661a:	f7fd f8c3 	bl	80037a4 <HAL_RCC_GetSysClockFreq>
 800661e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006620:	e009      	b.n	8006636 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006622:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006626:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006628:	e005      	b.n	8006636 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800662a:	2300      	movs	r3, #0
 800662c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800662e:	2301      	movs	r3, #1
 8006630:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006634:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006638:	2b00      	cmp	r3, #0
 800663a:	f000 8130 	beq.w	800689e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006642:	4a94      	ldr	r2, [pc, #592]	; (8006894 <UART_SetConfig+0x5c4>)
 8006644:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006648:	461a      	mov	r2, r3
 800664a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006650:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	685a      	ldr	r2, [r3, #4]
 8006656:	4613      	mov	r3, r2
 8006658:	005b      	lsls	r3, r3, #1
 800665a:	4413      	add	r3, r2
 800665c:	69ba      	ldr	r2, [r7, #24]
 800665e:	429a      	cmp	r2, r3
 8006660:	d305      	bcc.n	800666e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006668:	69ba      	ldr	r2, [r7, #24]
 800666a:	429a      	cmp	r2, r3
 800666c:	d903      	bls.n	8006676 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006674:	e113      	b.n	800689e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006678:	2200      	movs	r2, #0
 800667a:	60bb      	str	r3, [r7, #8]
 800667c:	60fa      	str	r2, [r7, #12]
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006682:	4a84      	ldr	r2, [pc, #528]	; (8006894 <UART_SetConfig+0x5c4>)
 8006684:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006688:	b29b      	uxth	r3, r3
 800668a:	2200      	movs	r2, #0
 800668c:	603b      	str	r3, [r7, #0]
 800668e:	607a      	str	r2, [r7, #4]
 8006690:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006694:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006698:	f7f9 fdb0 	bl	80001fc <__aeabi_uldivmod>
 800669c:	4602      	mov	r2, r0
 800669e:	460b      	mov	r3, r1
 80066a0:	4610      	mov	r0, r2
 80066a2:	4619      	mov	r1, r3
 80066a4:	f04f 0200 	mov.w	r2, #0
 80066a8:	f04f 0300 	mov.w	r3, #0
 80066ac:	020b      	lsls	r3, r1, #8
 80066ae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80066b2:	0202      	lsls	r2, r0, #8
 80066b4:	6979      	ldr	r1, [r7, #20]
 80066b6:	6849      	ldr	r1, [r1, #4]
 80066b8:	0849      	lsrs	r1, r1, #1
 80066ba:	2000      	movs	r0, #0
 80066bc:	460c      	mov	r4, r1
 80066be:	4605      	mov	r5, r0
 80066c0:	eb12 0804 	adds.w	r8, r2, r4
 80066c4:	eb43 0905 	adc.w	r9, r3, r5
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	469a      	mov	sl, r3
 80066d0:	4693      	mov	fp, r2
 80066d2:	4652      	mov	r2, sl
 80066d4:	465b      	mov	r3, fp
 80066d6:	4640      	mov	r0, r8
 80066d8:	4649      	mov	r1, r9
 80066da:	f7f9 fd8f 	bl	80001fc <__aeabi_uldivmod>
 80066de:	4602      	mov	r2, r0
 80066e0:	460b      	mov	r3, r1
 80066e2:	4613      	mov	r3, r2
 80066e4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80066e6:	6a3b      	ldr	r3, [r7, #32]
 80066e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066ec:	d308      	bcc.n	8006700 <UART_SetConfig+0x430>
 80066ee:	6a3b      	ldr	r3, [r7, #32]
 80066f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066f4:	d204      	bcs.n	8006700 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	6a3a      	ldr	r2, [r7, #32]
 80066fc:	60da      	str	r2, [r3, #12]
 80066fe:	e0ce      	b.n	800689e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006706:	e0ca      	b.n	800689e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	69db      	ldr	r3, [r3, #28]
 800670c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006710:	d166      	bne.n	80067e0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006712:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006716:	2b08      	cmp	r3, #8
 8006718:	d827      	bhi.n	800676a <UART_SetConfig+0x49a>
 800671a:	a201      	add	r2, pc, #4	; (adr r2, 8006720 <UART_SetConfig+0x450>)
 800671c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006720:	08006745 	.word	0x08006745
 8006724:	0800674d 	.word	0x0800674d
 8006728:	08006755 	.word	0x08006755
 800672c:	0800676b 	.word	0x0800676b
 8006730:	0800675b 	.word	0x0800675b
 8006734:	0800676b 	.word	0x0800676b
 8006738:	0800676b 	.word	0x0800676b
 800673c:	0800676b 	.word	0x0800676b
 8006740:	08006763 	.word	0x08006763
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006744:	f7fd f8c6 	bl	80038d4 <HAL_RCC_GetPCLK1Freq>
 8006748:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800674a:	e014      	b.n	8006776 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800674c:	f7fd f8d8 	bl	8003900 <HAL_RCC_GetPCLK2Freq>
 8006750:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006752:	e010      	b.n	8006776 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006754:	4b4e      	ldr	r3, [pc, #312]	; (8006890 <UART_SetConfig+0x5c0>)
 8006756:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006758:	e00d      	b.n	8006776 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800675a:	f7fd f823 	bl	80037a4 <HAL_RCC_GetSysClockFreq>
 800675e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006760:	e009      	b.n	8006776 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006762:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006766:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006768:	e005      	b.n	8006776 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800676a:	2300      	movs	r3, #0
 800676c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006774:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006778:	2b00      	cmp	r3, #0
 800677a:	f000 8090 	beq.w	800689e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006782:	4a44      	ldr	r2, [pc, #272]	; (8006894 <UART_SetConfig+0x5c4>)
 8006784:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006788:	461a      	mov	r2, r3
 800678a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006790:	005a      	lsls	r2, r3, #1
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	085b      	lsrs	r3, r3, #1
 8006798:	441a      	add	r2, r3
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	fbb2 f3f3 	udiv	r3, r2, r3
 80067a2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067a4:	6a3b      	ldr	r3, [r7, #32]
 80067a6:	2b0f      	cmp	r3, #15
 80067a8:	d916      	bls.n	80067d8 <UART_SetConfig+0x508>
 80067aa:	6a3b      	ldr	r3, [r7, #32]
 80067ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067b0:	d212      	bcs.n	80067d8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067b2:	6a3b      	ldr	r3, [r7, #32]
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	f023 030f 	bic.w	r3, r3, #15
 80067ba:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067bc:	6a3b      	ldr	r3, [r7, #32]
 80067be:	085b      	lsrs	r3, r3, #1
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	f003 0307 	and.w	r3, r3, #7
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	8bfb      	ldrh	r3, [r7, #30]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	8bfa      	ldrh	r2, [r7, #30]
 80067d4:	60da      	str	r2, [r3, #12]
 80067d6:	e062      	b.n	800689e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80067de:	e05e      	b.n	800689e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80067e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80067e4:	2b08      	cmp	r3, #8
 80067e6:	d828      	bhi.n	800683a <UART_SetConfig+0x56a>
 80067e8:	a201      	add	r2, pc, #4	; (adr r2, 80067f0 <UART_SetConfig+0x520>)
 80067ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ee:	bf00      	nop
 80067f0:	08006815 	.word	0x08006815
 80067f4:	0800681d 	.word	0x0800681d
 80067f8:	08006825 	.word	0x08006825
 80067fc:	0800683b 	.word	0x0800683b
 8006800:	0800682b 	.word	0x0800682b
 8006804:	0800683b 	.word	0x0800683b
 8006808:	0800683b 	.word	0x0800683b
 800680c:	0800683b 	.word	0x0800683b
 8006810:	08006833 	.word	0x08006833
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006814:	f7fd f85e 	bl	80038d4 <HAL_RCC_GetPCLK1Freq>
 8006818:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800681a:	e014      	b.n	8006846 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800681c:	f7fd f870 	bl	8003900 <HAL_RCC_GetPCLK2Freq>
 8006820:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006822:	e010      	b.n	8006846 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006824:	4b1a      	ldr	r3, [pc, #104]	; (8006890 <UART_SetConfig+0x5c0>)
 8006826:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006828:	e00d      	b.n	8006846 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800682a:	f7fc ffbb 	bl	80037a4 <HAL_RCC_GetSysClockFreq>
 800682e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006830:	e009      	b.n	8006846 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006832:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006836:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006838:	e005      	b.n	8006846 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800683a:	2300      	movs	r3, #0
 800683c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006844:	bf00      	nop
    }

    if (pclk != 0U)
 8006846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006848:	2b00      	cmp	r3, #0
 800684a:	d028      	beq.n	800689e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006850:	4a10      	ldr	r2, [pc, #64]	; (8006894 <UART_SetConfig+0x5c4>)
 8006852:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006856:	461a      	mov	r2, r3
 8006858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685a:	fbb3 f2f2 	udiv	r2, r3, r2
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	085b      	lsrs	r3, r3, #1
 8006864:	441a      	add	r2, r3
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	fbb2 f3f3 	udiv	r3, r2, r3
 800686e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006870:	6a3b      	ldr	r3, [r7, #32]
 8006872:	2b0f      	cmp	r3, #15
 8006874:	d910      	bls.n	8006898 <UART_SetConfig+0x5c8>
 8006876:	6a3b      	ldr	r3, [r7, #32]
 8006878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800687c:	d20c      	bcs.n	8006898 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800687e:	6a3b      	ldr	r3, [r7, #32]
 8006880:	b29a      	uxth	r2, r3
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	60da      	str	r2, [r3, #12]
 8006888:	e009      	b.n	800689e <UART_SetConfig+0x5ce>
 800688a:	bf00      	nop
 800688c:	40008000 	.word	0x40008000
 8006890:	00f42400 	.word	0x00f42400
 8006894:	0800cbb4 	.word	0x0800cbb4
      }
      else
      {
        ret = HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	2201      	movs	r2, #1
 80068a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	2201      	movs	r2, #1
 80068aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	2200      	movs	r2, #0
 80068b2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	2200      	movs	r2, #0
 80068b8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80068ba:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3730      	adds	r7, #48	; 0x30
 80068c2:	46bd      	mov	sp, r7
 80068c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080068c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d4:	f003 0301 	and.w	r3, r3, #1
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00a      	beq.n	80068f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	430a      	orrs	r2, r1
 80068f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f6:	f003 0302 	and.w	r3, r3, #2
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00a      	beq.n	8006914 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	430a      	orrs	r2, r1
 8006912:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006918:	f003 0304 	and.w	r3, r3, #4
 800691c:	2b00      	cmp	r3, #0
 800691e:	d00a      	beq.n	8006936 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	430a      	orrs	r2, r1
 8006934:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800693a:	f003 0308 	and.w	r3, r3, #8
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00a      	beq.n	8006958 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	430a      	orrs	r2, r1
 8006956:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800695c:	f003 0310 	and.w	r3, r3, #16
 8006960:	2b00      	cmp	r3, #0
 8006962:	d00a      	beq.n	800697a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	430a      	orrs	r2, r1
 8006978:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800697e:	f003 0320 	and.w	r3, r3, #32
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00a      	beq.n	800699c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	430a      	orrs	r2, r1
 800699a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d01a      	beq.n	80069de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	430a      	orrs	r2, r1
 80069bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069c6:	d10a      	bne.n	80069de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	430a      	orrs	r2, r1
 80069dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d00a      	beq.n	8006a00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	430a      	orrs	r2, r1
 80069fe:	605a      	str	r2, [r3, #4]
  }
}
 8006a00:	bf00      	nop
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b086      	sub	sp, #24
 8006a10:	af02      	add	r7, sp, #8
 8006a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a1c:	f7fa ff08 	bl	8001830 <HAL_GetTick>
 8006a20:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 0308 	and.w	r3, r3, #8
 8006a2c:	2b08      	cmp	r3, #8
 8006a2e:	d10e      	bne.n	8006a4e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a34:	9300      	str	r3, [sp, #0]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 f82f 	bl	8006aa2 <UART_WaitOnFlagUntilTimeout>
 8006a44:	4603      	mov	r3, r0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d001      	beq.n	8006a4e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	e025      	b.n	8006a9a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 0304 	and.w	r3, r3, #4
 8006a58:	2b04      	cmp	r3, #4
 8006a5a:	d10e      	bne.n	8006a7a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a60:	9300      	str	r3, [sp, #0]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 f819 	bl	8006aa2 <UART_WaitOnFlagUntilTimeout>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d001      	beq.n	8006a7a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e00f      	b.n	8006a9a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2220      	movs	r2, #32
 8006a7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2220      	movs	r2, #32
 8006a86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3710      	adds	r7, #16
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	b09c      	sub	sp, #112	; 0x70
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	60f8      	str	r0, [r7, #12]
 8006aaa:	60b9      	str	r1, [r7, #8]
 8006aac:	603b      	str	r3, [r7, #0]
 8006aae:	4613      	mov	r3, r2
 8006ab0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ab2:	e0a9      	b.n	8006c08 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ab4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aba:	f000 80a5 	beq.w	8006c08 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006abe:	f7fa feb7 	bl	8001830 <HAL_GetTick>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	1ad3      	subs	r3, r2, r3
 8006ac8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d302      	bcc.n	8006ad4 <UART_WaitOnFlagUntilTimeout+0x32>
 8006ace:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d140      	bne.n	8006b56 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ada:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006adc:	e853 3f00 	ldrex	r3, [r3]
 8006ae0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006ae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ae4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ae8:	667b      	str	r3, [r7, #100]	; 0x64
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	461a      	mov	r2, r3
 8006af0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006af2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006af4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006af8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006afa:	e841 2300 	strex	r3, r2, [r1]
 8006afe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006b00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d1e6      	bne.n	8006ad4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	3308      	adds	r3, #8
 8006b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b10:	e853 3f00 	ldrex	r3, [r3]
 8006b14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b18:	f023 0301 	bic.w	r3, r3, #1
 8006b1c:	663b      	str	r3, [r7, #96]	; 0x60
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	3308      	adds	r3, #8
 8006b24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006b26:	64ba      	str	r2, [r7, #72]	; 0x48
 8006b28:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006b2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b2e:	e841 2300 	strex	r3, r2, [r1]
 8006b32:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006b34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1e5      	bne.n	8006b06 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2220      	movs	r2, #32
 8006b3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2220      	movs	r2, #32
 8006b46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006b52:	2303      	movs	r3, #3
 8006b54:	e069      	b.n	8006c2a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 0304 	and.w	r3, r3, #4
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d051      	beq.n	8006c08 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	69db      	ldr	r3, [r3, #28]
 8006b6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b72:	d149      	bne.n	8006c08 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b7c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b86:	e853 3f00 	ldrex	r3, [r3]
 8006b8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	461a      	mov	r2, r3
 8006b9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b9c:	637b      	str	r3, [r7, #52]	; 0x34
 8006b9e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ba2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ba4:	e841 2300 	strex	r3, r2, [r1]
 8006ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d1e6      	bne.n	8006b7e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	3308      	adds	r3, #8
 8006bb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	e853 3f00 	ldrex	r3, [r3]
 8006bbe:	613b      	str	r3, [r7, #16]
   return(result);
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	f023 0301 	bic.w	r3, r3, #1
 8006bc6:	66bb      	str	r3, [r7, #104]	; 0x68
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	3308      	adds	r3, #8
 8006bce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006bd0:	623a      	str	r2, [r7, #32]
 8006bd2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd4:	69f9      	ldr	r1, [r7, #28]
 8006bd6:	6a3a      	ldr	r2, [r7, #32]
 8006bd8:	e841 2300 	strex	r3, r2, [r1]
 8006bdc:	61bb      	str	r3, [r7, #24]
   return(result);
 8006bde:	69bb      	ldr	r3, [r7, #24]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d1e5      	bne.n	8006bb0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2220      	movs	r2, #32
 8006be8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2220      	movs	r2, #32
 8006bf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2220      	movs	r2, #32
 8006bf8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006c04:	2303      	movs	r3, #3
 8006c06:	e010      	b.n	8006c2a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	69da      	ldr	r2, [r3, #28]
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	4013      	ands	r3, r2
 8006c12:	68ba      	ldr	r2, [r7, #8]
 8006c14:	429a      	cmp	r2, r3
 8006c16:	bf0c      	ite	eq
 8006c18:	2301      	moveq	r3, #1
 8006c1a:	2300      	movne	r3, #0
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	461a      	mov	r2, r3
 8006c20:	79fb      	ldrb	r3, [r7, #7]
 8006c22:	429a      	cmp	r2, r3
 8006c24:	f43f af46 	beq.w	8006ab4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3770      	adds	r7, #112	; 0x70
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
	...

08006c34 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b0a3      	sub	sp, #140	; 0x8c
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	60b9      	str	r1, [r7, #8]
 8006c3e:	4613      	mov	r3, r2
 8006c40:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	68ba      	ldr	r2, [r7, #8]
 8006c46:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	88fa      	ldrh	r2, [r7, #6]
 8006c4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	88fa      	ldrh	r2, [r7, #6]
 8006c54:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c66:	d10e      	bne.n	8006c86 <UART_Start_Receive_IT+0x52>
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d105      	bne.n	8006c7c <UART_Start_Receive_IT+0x48>
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006c76:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006c7a:	e02d      	b.n	8006cd8 <UART_Start_Receive_IT+0xa4>
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	22ff      	movs	r2, #255	; 0xff
 8006c80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006c84:	e028      	b.n	8006cd8 <UART_Start_Receive_IT+0xa4>
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d10d      	bne.n	8006caa <UART_Start_Receive_IT+0x76>
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d104      	bne.n	8006ca0 <UART_Start_Receive_IT+0x6c>
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	22ff      	movs	r2, #255	; 0xff
 8006c9a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006c9e:	e01b      	b.n	8006cd8 <UART_Start_Receive_IT+0xa4>
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	227f      	movs	r2, #127	; 0x7f
 8006ca4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006ca8:	e016      	b.n	8006cd8 <UART_Start_Receive_IT+0xa4>
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cb2:	d10d      	bne.n	8006cd0 <UART_Start_Receive_IT+0x9c>
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	691b      	ldr	r3, [r3, #16]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d104      	bne.n	8006cc6 <UART_Start_Receive_IT+0x92>
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	227f      	movs	r2, #127	; 0x7f
 8006cc0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006cc4:	e008      	b.n	8006cd8 <UART_Start_Receive_IT+0xa4>
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	223f      	movs	r2, #63	; 0x3f
 8006cca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006cce:	e003      	b.n	8006cd8 <UART_Start_Receive_IT+0xa4>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2222      	movs	r2, #34	; 0x22
 8006ce4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	3308      	adds	r3, #8
 8006cee:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cf2:	e853 3f00 	ldrex	r3, [r3]
 8006cf6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006cf8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006cfa:	f043 0301 	orr.w	r3, r3, #1
 8006cfe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	3308      	adds	r3, #8
 8006d08:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006d0c:	673a      	str	r2, [r7, #112]	; 0x70
 8006d0e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d10:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006d12:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006d14:	e841 2300 	strex	r3, r2, [r1]
 8006d18:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8006d1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d1e3      	bne.n	8006ce8 <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d28:	d153      	bne.n	8006dd2 <UART_Start_Receive_IT+0x19e>
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006d30:	88fa      	ldrh	r2, [r7, #6]
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d34d      	bcc.n	8006dd2 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d3e:	d107      	bne.n	8006d50 <UART_Start_Receive_IT+0x11c>
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	691b      	ldr	r3, [r3, #16]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d103      	bne.n	8006d50 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	4a4b      	ldr	r2, [pc, #300]	; (8006e78 <UART_Start_Receive_IT+0x244>)
 8006d4c:	671a      	str	r2, [r3, #112]	; 0x70
 8006d4e:	e002      	b.n	8006d56 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	4a4a      	ldr	r2, [pc, #296]	; (8006e7c <UART_Start_Receive_IT+0x248>)
 8006d54:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d01a      	beq.n	8006d9c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d6e:	e853 3f00 	ldrex	r3, [r3]
 8006d72:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006d74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	461a      	mov	r2, r3
 8006d84:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006d88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d8a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d8c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006d8e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006d90:	e841 2300 	strex	r3, r2, [r1]
 8006d94:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006d96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d1e4      	bne.n	8006d66 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	3308      	adds	r3, #8
 8006da2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006da6:	e853 3f00 	ldrex	r3, [r3]
 8006daa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006db2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	3308      	adds	r3, #8
 8006dba:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006dbc:	64ba      	str	r2, [r7, #72]	; 0x48
 8006dbe:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006dc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006dc4:	e841 2300 	strex	r3, r2, [r1]
 8006dc8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006dca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d1e5      	bne.n	8006d9c <UART_Start_Receive_IT+0x168>
 8006dd0:	e04a      	b.n	8006e68 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dda:	d107      	bne.n	8006dec <UART_Start_Receive_IT+0x1b8>
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	691b      	ldr	r3, [r3, #16]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d103      	bne.n	8006dec <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	4a26      	ldr	r2, [pc, #152]	; (8006e80 <UART_Start_Receive_IT+0x24c>)
 8006de8:	671a      	str	r2, [r3, #112]	; 0x70
 8006dea:	e002      	b.n	8006df2 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	4a25      	ldr	r2, [pc, #148]	; (8006e84 <UART_Start_Receive_IT+0x250>)
 8006df0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2200      	movs	r2, #0
 8006df6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d019      	beq.n	8006e36 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0a:	e853 3f00 	ldrex	r3, [r3]
 8006e0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e12:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006e16:	677b      	str	r3, [r7, #116]	; 0x74
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e20:	637b      	str	r3, [r7, #52]	; 0x34
 8006e22:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e28:	e841 2300 	strex	r3, r2, [r1]
 8006e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d1e6      	bne.n	8006e02 <UART_Start_Receive_IT+0x1ce>
 8006e34:	e018      	b.n	8006e68 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	e853 3f00 	ldrex	r3, [r3]
 8006e42:	613b      	str	r3, [r7, #16]
   return(result);
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	f043 0320 	orr.w	r3, r3, #32
 8006e4a:	67bb      	str	r3, [r7, #120]	; 0x78
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	461a      	mov	r2, r3
 8006e52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e54:	623b      	str	r3, [r7, #32]
 8006e56:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e58:	69f9      	ldr	r1, [r7, #28]
 8006e5a:	6a3a      	ldr	r2, [r7, #32]
 8006e5c:	e841 2300 	strex	r3, r2, [r1]
 8006e60:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d1e6      	bne.n	8006e36 <UART_Start_Receive_IT+0x202>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	378c      	adds	r7, #140	; 0x8c
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr
 8006e76:	bf00      	nop
 8006e78:	08007591 	.word	0x08007591
 8006e7c:	08007299 	.word	0x08007299
 8006e80:	08007137 	.word	0x08007137
 8006e84:	08006fd7 	.word	0x08006fd7

08006e88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b095      	sub	sp, #84	; 0x54
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e98:	e853 3f00 	ldrex	r3, [r3]
 8006e9c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ea4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	461a      	mov	r2, r3
 8006eac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eae:	643b      	str	r3, [r7, #64]	; 0x40
 8006eb0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006eb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006eb6:	e841 2300 	strex	r3, r2, [r1]
 8006eba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d1e6      	bne.n	8006e90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	3308      	adds	r3, #8
 8006ec8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eca:	6a3b      	ldr	r3, [r7, #32]
 8006ecc:	e853 3f00 	ldrex	r3, [r3]
 8006ed0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ed8:	f023 0301 	bic.w	r3, r3, #1
 8006edc:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	3308      	adds	r3, #8
 8006ee4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ee6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ee8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006eec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006eee:	e841 2300 	strex	r3, r2, [r1]
 8006ef2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d1e3      	bne.n	8006ec2 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d118      	bne.n	8006f34 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	e853 3f00 	ldrex	r3, [r3]
 8006f0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	f023 0310 	bic.w	r3, r3, #16
 8006f16:	647b      	str	r3, [r7, #68]	; 0x44
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f20:	61bb      	str	r3, [r7, #24]
 8006f22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f24:	6979      	ldr	r1, [r7, #20]
 8006f26:	69ba      	ldr	r2, [r7, #24]
 8006f28:	e841 2300 	strex	r3, r2, [r1]
 8006f2c:	613b      	str	r3, [r7, #16]
   return(result);
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d1e6      	bne.n	8006f02 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2220      	movs	r2, #32
 8006f38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006f48:	bf00      	nop
 8006f4a:	3754      	adds	r7, #84	; 0x54
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f60:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f72:	68f8      	ldr	r0, [r7, #12]
 8006f74:	f7ff f996 	bl	80062a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f78:	bf00      	nop
 8006f7a:	3710      	adds	r7, #16
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b088      	sub	sp, #32
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	e853 3f00 	ldrex	r3, [r3]
 8006f94:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f9c:	61fb      	str	r3, [r7, #28]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	61bb      	str	r3, [r7, #24]
 8006fa8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006faa:	6979      	ldr	r1, [r7, #20]
 8006fac:	69ba      	ldr	r2, [r7, #24]
 8006fae:	e841 2300 	strex	r3, r2, [r1]
 8006fb2:	613b      	str	r3, [r7, #16]
   return(result);
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1e6      	bne.n	8006f88 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2220      	movs	r2, #32
 8006fbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f7ff f961 	bl	8006290 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fce:	bf00      	nop
 8006fd0:	3720      	adds	r7, #32
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b096      	sub	sp, #88	; 0x58
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006fe4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fee:	2b22      	cmp	r3, #34	; 0x22
 8006ff0:	f040 8095 	bne.w	800711e <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffa:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006ffe:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007002:	b2d9      	uxtb	r1, r3
 8007004:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007008:	b2da      	uxtb	r2, r3
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800700e:	400a      	ands	r2, r1
 8007010:	b2d2      	uxtb	r2, r2
 8007012:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007018:	1c5a      	adds	r2, r3, #1
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007024:	b29b      	uxth	r3, r3
 8007026:	3b01      	subs	r3, #1
 8007028:	b29a      	uxth	r2, r3
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007036:	b29b      	uxth	r3, r3
 8007038:	2b00      	cmp	r3, #0
 800703a:	d178      	bne.n	800712e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007044:	e853 3f00 	ldrex	r3, [r3]
 8007048:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800704a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800704c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007050:	653b      	str	r3, [r7, #80]	; 0x50
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	461a      	mov	r2, r3
 8007058:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800705a:	647b      	str	r3, [r7, #68]	; 0x44
 800705c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007060:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007062:	e841 2300 	strex	r3, r2, [r1]
 8007066:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800706a:	2b00      	cmp	r3, #0
 800706c:	d1e6      	bne.n	800703c <UART_RxISR_8BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	3308      	adds	r3, #8
 8007074:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007078:	e853 3f00 	ldrex	r3, [r3]
 800707c:	623b      	str	r3, [r7, #32]
   return(result);
 800707e:	6a3b      	ldr	r3, [r7, #32]
 8007080:	f023 0301 	bic.w	r3, r3, #1
 8007084:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	3308      	adds	r3, #8
 800708c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800708e:	633a      	str	r2, [r7, #48]	; 0x30
 8007090:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007092:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007094:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007096:	e841 2300 	strex	r3, r2, [r1]
 800709a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800709c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d1e5      	bne.n	800706e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2220      	movs	r2, #32
 80070a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d12e      	bne.n	8007116 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	e853 3f00 	ldrex	r3, [r3]
 80070ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f023 0310 	bic.w	r3, r3, #16
 80070d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	461a      	mov	r2, r3
 80070da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070dc:	61fb      	str	r3, [r7, #28]
 80070de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e0:	69b9      	ldr	r1, [r7, #24]
 80070e2:	69fa      	ldr	r2, [r7, #28]
 80070e4:	e841 2300 	strex	r3, r2, [r1]
 80070e8:	617b      	str	r3, [r7, #20]
   return(result);
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d1e6      	bne.n	80070be <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	69db      	ldr	r3, [r3, #28]
 80070f6:	f003 0310 	and.w	r3, r3, #16
 80070fa:	2b10      	cmp	r3, #16
 80070fc:	d103      	bne.n	8007106 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	2210      	movs	r2, #16
 8007104:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800710c:	4619      	mov	r1, r3
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f7ff f8d2 	bl	80062b8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007114:	e00b      	b.n	800712e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f7f9 ff56 	bl	8000fc8 <HAL_UART_RxCpltCallback>
}
 800711c:	e007      	b.n	800712e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	699a      	ldr	r2, [r3, #24]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f042 0208 	orr.w	r2, r2, #8
 800712c:	619a      	str	r2, [r3, #24]
}
 800712e:	bf00      	nop
 8007130:	3758      	adds	r7, #88	; 0x58
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007136:	b580      	push	{r7, lr}
 8007138:	b096      	sub	sp, #88	; 0x58
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007144:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800714e:	2b22      	cmp	r3, #34	; 0x22
 8007150:	f040 8095 	bne.w	800727e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007162:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007164:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007168:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800716c:	4013      	ands	r3, r2
 800716e:	b29a      	uxth	r2, r3
 8007170:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007172:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007178:	1c9a      	adds	r2, r3, #2
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007184:	b29b      	uxth	r3, r3
 8007186:	3b01      	subs	r3, #1
 8007188:	b29a      	uxth	r2, r3
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007196:	b29b      	uxth	r3, r3
 8007198:	2b00      	cmp	r3, #0
 800719a:	d178      	bne.n	800728e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071a4:	e853 3f00 	ldrex	r3, [r3]
 80071a8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80071aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	461a      	mov	r2, r3
 80071b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071ba:	643b      	str	r3, [r7, #64]	; 0x40
 80071bc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80071c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80071c2:	e841 2300 	strex	r3, r2, [r1]
 80071c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d1e6      	bne.n	800719c <UART_RxISR_16BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	3308      	adds	r3, #8
 80071d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d6:	6a3b      	ldr	r3, [r7, #32]
 80071d8:	e853 3f00 	ldrex	r3, [r3]
 80071dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80071de:	69fb      	ldr	r3, [r7, #28]
 80071e0:	f023 0301 	bic.w	r3, r3, #1
 80071e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	3308      	adds	r3, #8
 80071ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80071f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071f6:	e841 2300 	strex	r3, r2, [r1]
 80071fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d1e5      	bne.n	80071ce <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2220      	movs	r2, #32
 8007206:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007214:	2b01      	cmp	r3, #1
 8007216:	d12e      	bne.n	8007276 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	e853 3f00 	ldrex	r3, [r3]
 800722a:	60bb      	str	r3, [r7, #8]
   return(result);
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	f023 0310 	bic.w	r3, r3, #16
 8007232:	647b      	str	r3, [r7, #68]	; 0x44
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	461a      	mov	r2, r3
 800723a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800723c:	61bb      	str	r3, [r7, #24]
 800723e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007240:	6979      	ldr	r1, [r7, #20]
 8007242:	69ba      	ldr	r2, [r7, #24]
 8007244:	e841 2300 	strex	r3, r2, [r1]
 8007248:	613b      	str	r3, [r7, #16]
   return(result);
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d1e6      	bne.n	800721e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	69db      	ldr	r3, [r3, #28]
 8007256:	f003 0310 	and.w	r3, r3, #16
 800725a:	2b10      	cmp	r3, #16
 800725c:	d103      	bne.n	8007266 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	2210      	movs	r2, #16
 8007264:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800726c:	4619      	mov	r1, r3
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f7ff f822 	bl	80062b8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007274:	e00b      	b.n	800728e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f7f9 fea6 	bl	8000fc8 <HAL_UART_RxCpltCallback>
}
 800727c:	e007      	b.n	800728e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	699a      	ldr	r2, [r3, #24]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f042 0208 	orr.w	r2, r2, #8
 800728c:	619a      	str	r2, [r3, #24]
}
 800728e:	bf00      	nop
 8007290:	3758      	adds	r7, #88	; 0x58
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
	...

08007298 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b0a6      	sub	sp, #152	; 0x98
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80072a6:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	69db      	ldr	r3, [r3, #28]
 80072b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072ce:	2b22      	cmp	r3, #34	; 0x22
 80072d0:	f040 814f 	bne.w	8007572 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80072da:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80072de:	e0f6      	b.n	80074ce <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e6:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80072ea:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80072ee:	b2d9      	uxtb	r1, r3
 80072f0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80072f4:	b2da      	uxtb	r2, r3
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072fa:	400a      	ands	r2, r1
 80072fc:	b2d2      	uxtb	r2, r2
 80072fe:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007304:	1c5a      	adds	r2, r3, #1
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007310:	b29b      	uxth	r3, r3
 8007312:	3b01      	subs	r3, #1
 8007314:	b29a      	uxth	r2, r3
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	69db      	ldr	r3, [r3, #28]
 8007322:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007326:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800732a:	f003 0307 	and.w	r3, r3, #7
 800732e:	2b00      	cmp	r3, #0
 8007330:	d053      	beq.n	80073da <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007332:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007336:	f003 0301 	and.w	r3, r3, #1
 800733a:	2b00      	cmp	r3, #0
 800733c:	d011      	beq.n	8007362 <UART_RxISR_8BIT_FIFOEN+0xca>
 800733e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00b      	beq.n	8007362 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2201      	movs	r2, #1
 8007350:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007358:	f043 0201 	orr.w	r2, r3, #1
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007362:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007366:	f003 0302 	and.w	r3, r3, #2
 800736a:	2b00      	cmp	r3, #0
 800736c:	d011      	beq.n	8007392 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800736e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007372:	f003 0301 	and.w	r3, r3, #1
 8007376:	2b00      	cmp	r3, #0
 8007378:	d00b      	beq.n	8007392 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	2202      	movs	r2, #2
 8007380:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007388:	f043 0204 	orr.w	r2, r3, #4
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007392:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007396:	f003 0304 	and.w	r3, r3, #4
 800739a:	2b00      	cmp	r3, #0
 800739c:	d011      	beq.n	80073c2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800739e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80073a2:	f003 0301 	and.w	r3, r3, #1
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d00b      	beq.n	80073c2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	2204      	movs	r2, #4
 80073b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073b8:	f043 0202 	orr.w	r2, r3, #2
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d006      	beq.n	80073da <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f7fe ff69 	bl	80062a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2200      	movs	r2, #0
 80073d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d173      	bne.n	80074ce <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073ee:	e853 3f00 	ldrex	r3, [r3]
 80073f2:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80073f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80073f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	461a      	mov	r2, r3
 8007404:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007408:	66bb      	str	r3, [r7, #104]	; 0x68
 800740a:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800740c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800740e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007410:	e841 2300 	strex	r3, r2, [r1]
 8007414:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007416:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007418:	2b00      	cmp	r3, #0
 800741a:	d1e4      	bne.n	80073e6 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	3308      	adds	r3, #8
 8007422:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007424:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007426:	e853 3f00 	ldrex	r3, [r3]
 800742a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800742c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800742e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007432:	f023 0301 	bic.w	r3, r3, #1
 8007436:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	3308      	adds	r3, #8
 800743e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007440:	657a      	str	r2, [r7, #84]	; 0x54
 8007442:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007444:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007446:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007448:	e841 2300 	strex	r3, r2, [r1]
 800744c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800744e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007450:	2b00      	cmp	r3, #0
 8007452:	d1e3      	bne.n	800741c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2220      	movs	r2, #32
 8007458:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007466:	2b01      	cmp	r3, #1
 8007468:	d12e      	bne.n	80074c8 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007478:	e853 3f00 	ldrex	r3, [r3]
 800747c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800747e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007480:	f023 0310 	bic.w	r3, r3, #16
 8007484:	67bb      	str	r3, [r7, #120]	; 0x78
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	461a      	mov	r2, r3
 800748c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800748e:	643b      	str	r3, [r7, #64]	; 0x40
 8007490:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007492:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007494:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007496:	e841 2300 	strex	r3, r2, [r1]
 800749a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800749c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d1e6      	bne.n	8007470 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	69db      	ldr	r3, [r3, #28]
 80074a8:	f003 0310 	and.w	r3, r3, #16
 80074ac:	2b10      	cmp	r3, #16
 80074ae:	d103      	bne.n	80074b8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2210      	movs	r2, #16
 80074b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80074be:	4619      	mov	r1, r3
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f7fe fef9 	bl	80062b8 <HAL_UARTEx_RxEventCallback>
 80074c6:	e002      	b.n	80074ce <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f7f9 fd7d 	bl	8000fc8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80074ce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d006      	beq.n	80074e4 <UART_RxISR_8BIT_FIFOEN+0x24c>
 80074d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80074da:	f003 0320 	and.w	r3, r3, #32
 80074de:	2b00      	cmp	r3, #0
 80074e0:	f47f aefe 	bne.w	80072e0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80074ea:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80074ee:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d045      	beq.n	8007582 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80074fc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007500:	429a      	cmp	r2, r3
 8007502:	d23e      	bcs.n	8007582 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	3308      	adds	r3, #8
 800750a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750c:	6a3b      	ldr	r3, [r7, #32]
 800750e:	e853 3f00 	ldrex	r3, [r3]
 8007512:	61fb      	str	r3, [r7, #28]
   return(result);
 8007514:	69fb      	ldr	r3, [r7, #28]
 8007516:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800751a:	673b      	str	r3, [r7, #112]	; 0x70
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	3308      	adds	r3, #8
 8007522:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007524:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007526:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007528:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800752a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800752c:	e841 2300 	strex	r3, r2, [r1]
 8007530:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007534:	2b00      	cmp	r3, #0
 8007536:	d1e5      	bne.n	8007504 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4a14      	ldr	r2, [pc, #80]	; (800758c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800753c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	e853 3f00 	ldrex	r3, [r3]
 800754a:	60bb      	str	r3, [r7, #8]
   return(result);
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	f043 0320 	orr.w	r3, r3, #32
 8007552:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	461a      	mov	r2, r3
 800755a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800755c:	61bb      	str	r3, [r7, #24]
 800755e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007560:	6979      	ldr	r1, [r7, #20]
 8007562:	69ba      	ldr	r2, [r7, #24]
 8007564:	e841 2300 	strex	r3, r2, [r1]
 8007568:	613b      	str	r3, [r7, #16]
   return(result);
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d1e6      	bne.n	800753e <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007570:	e007      	b.n	8007582 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	699a      	ldr	r2, [r3, #24]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f042 0208 	orr.w	r2, r2, #8
 8007580:	619a      	str	r2, [r3, #24]
}
 8007582:	bf00      	nop
 8007584:	3798      	adds	r7, #152	; 0x98
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop
 800758c:	08006fd7 	.word	0x08006fd7

08007590 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b0a8      	sub	sp, #160	; 0xa0
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800759e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	69db      	ldr	r3, [r3, #28]
 80075a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075c6:	2b22      	cmp	r3, #34	; 0x22
 80075c8:	f040 8153 	bne.w	8007872 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80075d2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80075d6:	e0fa      	b.n	80077ce <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075de:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80075ea:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80075ee:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80075f2:	4013      	ands	r3, r2
 80075f4:	b29a      	uxth	r2, r3
 80075f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80075fa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007600:	1c9a      	adds	r2, r3, #2
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800760c:	b29b      	uxth	r3, r3
 800760e:	3b01      	subs	r3, #1
 8007610:	b29a      	uxth	r2, r3
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	69db      	ldr	r3, [r3, #28]
 800761e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007622:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007626:	f003 0307 	and.w	r3, r3, #7
 800762a:	2b00      	cmp	r3, #0
 800762c:	d053      	beq.n	80076d6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800762e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007632:	f003 0301 	and.w	r3, r3, #1
 8007636:	2b00      	cmp	r3, #0
 8007638:	d011      	beq.n	800765e <UART_RxISR_16BIT_FIFOEN+0xce>
 800763a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800763e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007642:	2b00      	cmp	r3, #0
 8007644:	d00b      	beq.n	800765e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	2201      	movs	r2, #1
 800764c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007654:	f043 0201 	orr.w	r2, r3, #1
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800765e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007662:	f003 0302 	and.w	r3, r3, #2
 8007666:	2b00      	cmp	r3, #0
 8007668:	d011      	beq.n	800768e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800766a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800766e:	f003 0301 	and.w	r3, r3, #1
 8007672:	2b00      	cmp	r3, #0
 8007674:	d00b      	beq.n	800768e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	2202      	movs	r2, #2
 800767c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007684:	f043 0204 	orr.w	r2, r3, #4
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800768e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007692:	f003 0304 	and.w	r3, r3, #4
 8007696:	2b00      	cmp	r3, #0
 8007698:	d011      	beq.n	80076be <UART_RxISR_16BIT_FIFOEN+0x12e>
 800769a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800769e:	f003 0301 	and.w	r3, r3, #1
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d00b      	beq.n	80076be <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	2204      	movs	r2, #4
 80076ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076b4:	f043 0202 	orr.w	r2, r3, #2
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d006      	beq.n	80076d6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f7fe fdeb 	bl	80062a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80076dc:	b29b      	uxth	r3, r3
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d175      	bne.n	80077ce <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076ea:	e853 3f00 	ldrex	r3, [r3]
 80076ee:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80076f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	461a      	mov	r2, r3
 8007700:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007704:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007706:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007708:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800770a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800770c:	e841 2300 	strex	r3, r2, [r1]
 8007710:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007712:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007714:	2b00      	cmp	r3, #0
 8007716:	d1e4      	bne.n	80076e2 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	3308      	adds	r3, #8
 800771e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007722:	e853 3f00 	ldrex	r3, [r3]
 8007726:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007728:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800772a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800772e:	f023 0301 	bic.w	r3, r3, #1
 8007732:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	3308      	adds	r3, #8
 800773c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007740:	65ba      	str	r2, [r7, #88]	; 0x58
 8007742:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007744:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007746:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007748:	e841 2300 	strex	r3, r2, [r1]
 800774c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800774e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007750:	2b00      	cmp	r3, #0
 8007752:	d1e1      	bne.n	8007718 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2220      	movs	r2, #32
 8007758:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007766:	2b01      	cmp	r3, #1
 8007768:	d12e      	bne.n	80077c8 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007778:	e853 3f00 	ldrex	r3, [r3]
 800777c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800777e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007780:	f023 0310 	bic.w	r3, r3, #16
 8007784:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	461a      	mov	r2, r3
 800778c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800778e:	647b      	str	r3, [r7, #68]	; 0x44
 8007790:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007792:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007794:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007796:	e841 2300 	strex	r3, r2, [r1]
 800779a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800779c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d1e6      	bne.n	8007770 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	69db      	ldr	r3, [r3, #28]
 80077a8:	f003 0310 	and.w	r3, r3, #16
 80077ac:	2b10      	cmp	r3, #16
 80077ae:	d103      	bne.n	80077b8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	2210      	movs	r2, #16
 80077b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80077be:	4619      	mov	r1, r3
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f7fe fd79 	bl	80062b8 <HAL_UARTEx_RxEventCallback>
 80077c6:	e002      	b.n	80077ce <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f7f9 fbfd 	bl	8000fc8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80077ce:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d006      	beq.n	80077e4 <UART_RxISR_16BIT_FIFOEN+0x254>
 80077d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80077da:	f003 0320 	and.w	r3, r3, #32
 80077de:	2b00      	cmp	r3, #0
 80077e0:	f47f aefa 	bne.w	80075d8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80077ea:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80077ee:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d045      	beq.n	8007882 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80077fc:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8007800:	429a      	cmp	r2, r3
 8007802:	d23e      	bcs.n	8007882 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	3308      	adds	r3, #8
 800780a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780e:	e853 3f00 	ldrex	r3, [r3]
 8007812:	623b      	str	r3, [r7, #32]
   return(result);
 8007814:	6a3b      	ldr	r3, [r7, #32]
 8007816:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800781a:	677b      	str	r3, [r7, #116]	; 0x74
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	3308      	adds	r3, #8
 8007822:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007824:	633a      	str	r2, [r7, #48]	; 0x30
 8007826:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007828:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800782a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800782c:	e841 2300 	strex	r3, r2, [r1]
 8007830:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007834:	2b00      	cmp	r3, #0
 8007836:	d1e5      	bne.n	8007804 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	4a14      	ldr	r2, [pc, #80]	; (800788c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800783c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	e853 3f00 	ldrex	r3, [r3]
 800784a:	60fb      	str	r3, [r7, #12]
   return(result);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f043 0320 	orr.w	r3, r3, #32
 8007852:	673b      	str	r3, [r7, #112]	; 0x70
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	461a      	mov	r2, r3
 800785a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800785c:	61fb      	str	r3, [r7, #28]
 800785e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007860:	69b9      	ldr	r1, [r7, #24]
 8007862:	69fa      	ldr	r2, [r7, #28]
 8007864:	e841 2300 	strex	r3, r2, [r1]
 8007868:	617b      	str	r3, [r7, #20]
   return(result);
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d1e6      	bne.n	800783e <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007870:	e007      	b.n	8007882 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	699a      	ldr	r2, [r3, #24]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f042 0208 	orr.w	r2, r2, #8
 8007880:	619a      	str	r2, [r3, #24]
}
 8007882:	bf00      	nop
 8007884:	37a0      	adds	r7, #160	; 0xa0
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	08007137 	.word	0x08007137

08007890 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007898:	bf00      	nop
 800789a:	370c      	adds	r7, #12
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80078ac:	bf00      	nop
 80078ae:	370c      	adds	r7, #12
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80078c0:	bf00      	nop
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b085      	sub	sp, #20
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d101      	bne.n	80078e2 <HAL_UARTEx_DisableFifoMode+0x16>
 80078de:	2302      	movs	r3, #2
 80078e0:	e027      	b.n	8007932 <HAL_UARTEx_DisableFifoMode+0x66>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2201      	movs	r2, #1
 80078e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2224      	movs	r2, #36	; 0x24
 80078ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f022 0201 	bic.w	r2, r2, #1
 8007908:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007910:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2220      	movs	r2, #32
 8007924:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007930:	2300      	movs	r3, #0
}
 8007932:	4618      	mov	r0, r3
 8007934:	3714      	adds	r7, #20
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr

0800793e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b084      	sub	sp, #16
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
 8007946:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800794e:	2b01      	cmp	r3, #1
 8007950:	d101      	bne.n	8007956 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007952:	2302      	movs	r3, #2
 8007954:	e02d      	b.n	80079b2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2201      	movs	r2, #1
 800795a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2224      	movs	r2, #36	; 0x24
 8007962:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f022 0201 	bic.w	r2, r2, #1
 800797c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	683a      	ldr	r2, [r7, #0]
 800798e:	430a      	orrs	r2, r1
 8007990:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 f850 	bl	8007a38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	68fa      	ldr	r2, [r7, #12]
 800799e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2220      	movs	r2, #32
 80079a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80079b0:	2300      	movs	r3, #0
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3710      	adds	r7, #16
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}

080079ba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80079ba:	b580      	push	{r7, lr}
 80079bc:	b084      	sub	sp, #16
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
 80079c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d101      	bne.n	80079d2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80079ce:	2302      	movs	r3, #2
 80079d0:	e02d      	b.n	8007a2e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2201      	movs	r2, #1
 80079d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2224      	movs	r2, #36	; 0x24
 80079de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	681a      	ldr	r2, [r3, #0]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f022 0201 	bic.w	r2, r2, #1
 80079f8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	683a      	ldr	r2, [r7, #0]
 8007a0a:	430a      	orrs	r2, r1
 8007a0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 f812 	bl	8007a38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	68fa      	ldr	r2, [r7, #12]
 8007a1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2220      	movs	r2, #32
 8007a20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007a2c:	2300      	movs	r3, #0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3710      	adds	r7, #16
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
	...

08007a38 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b085      	sub	sp, #20
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d108      	bne.n	8007a5a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007a58:	e031      	b.n	8007abe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007a5a:	2308      	movs	r3, #8
 8007a5c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007a5e:	2308      	movs	r3, #8
 8007a60:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	0e5b      	lsrs	r3, r3, #25
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	f003 0307 	and.w	r3, r3, #7
 8007a70:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	0f5b      	lsrs	r3, r3, #29
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	f003 0307 	and.w	r3, r3, #7
 8007a80:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a82:	7bbb      	ldrb	r3, [r7, #14]
 8007a84:	7b3a      	ldrb	r2, [r7, #12]
 8007a86:	4911      	ldr	r1, [pc, #68]	; (8007acc <UARTEx_SetNbDataToProcess+0x94>)
 8007a88:	5c8a      	ldrb	r2, [r1, r2]
 8007a8a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007a8e:	7b3a      	ldrb	r2, [r7, #12]
 8007a90:	490f      	ldr	r1, [pc, #60]	; (8007ad0 <UARTEx_SetNbDataToProcess+0x98>)
 8007a92:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a94:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a98:	b29a      	uxth	r2, r3
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007aa0:	7bfb      	ldrb	r3, [r7, #15]
 8007aa2:	7b7a      	ldrb	r2, [r7, #13]
 8007aa4:	4909      	ldr	r1, [pc, #36]	; (8007acc <UARTEx_SetNbDataToProcess+0x94>)
 8007aa6:	5c8a      	ldrb	r2, [r1, r2]
 8007aa8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007aac:	7b7a      	ldrb	r2, [r7, #13]
 8007aae:	4908      	ldr	r1, [pc, #32]	; (8007ad0 <UARTEx_SetNbDataToProcess+0x98>)
 8007ab0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ab2:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ab6:	b29a      	uxth	r2, r3
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007abe:	bf00      	nop
 8007ac0:	3714      	adds	r7, #20
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop
 8007acc:	0800cbcc 	.word	0x0800cbcc
 8007ad0:	0800cbd4 	.word	0x0800cbd4

08007ad4 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8007ae2:	6839      	ldr	r1, [r7, #0]
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f001 fcb2 	bl	800944e <VL53L0X_get_offset_calibration_data_micro_meter>
 8007aea:	4603      	mov	r3, r0
 8007aec:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8007aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3710      	adds	r7, #16
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
	...

08007afc <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8007afc:	b5b0      	push	{r4, r5, r7, lr}
 8007afe:	b096      	sub	sp, #88	; 0x58
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007b04:	2300      	movs	r3, #0
 8007b06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8007b0a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d107      	bne.n	8007b22 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8007b12:	2200      	movs	r2, #0
 8007b14:	2188      	movs	r1, #136	; 0x88
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f004 feaa 	bl	800c870 <VL53L0X_WrByte>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2200      	movs	r2, #0
 8007b26:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007b30:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007b3a:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	4a9e      	ldr	r2, [pc, #632]	; (8007dbc <VL53L0X_DataInit+0x2c0>)
 8007b42:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	4a9d      	ldr	r2, [pc, #628]	; (8007dc0 <VL53L0X_DataInit+0x2c4>)
 8007b4a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2200      	movs	r2, #0
 8007b52:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8007b54:	f107 0310 	add.w	r3, r7, #16
 8007b58:	4619      	mov	r1, r3
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 fac2 	bl	80080e4 <VL53L0X_GetDeviceParameters>
 8007b60:	4603      	mov	r3, r0
 8007b62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8007b66:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d112      	bne.n	8007b94 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8007b72:	2300      	movs	r3, #0
 8007b74:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f103 0410 	add.w	r4, r3, #16
 8007b7c:	f107 0510 	add.w	r5, r7, #16
 8007b80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b8c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007b90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2264      	movs	r2, #100	; 0x64
 8007b98:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f44f 7261 	mov.w	r2, #900	; 0x384
 8007ba2:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8007bac:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8007bb6:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	2180      	movs	r1, #128	; 0x80
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f004 fe52 	bl	800c870 <VL53L0X_WrByte>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	461a      	mov	r2, r3
 8007bd0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007bda:	2201      	movs	r2, #1
 8007bdc:	21ff      	movs	r1, #255	; 0xff
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f004 fe46 	bl	800c870 <VL53L0X_WrByte>
 8007be4:	4603      	mov	r3, r0
 8007be6:	461a      	mov	r2, r3
 8007be8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007bec:	4313      	orrs	r3, r2
 8007bee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	2100      	movs	r1, #0
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f004 fe3a 	bl	800c870 <VL53L0X_WrByte>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	461a      	mov	r2, r3
 8007c00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007c04:	4313      	orrs	r3, r2
 8007c06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8007c0a:	f107 030f 	add.w	r3, r7, #15
 8007c0e:	461a      	mov	r2, r3
 8007c10:	2191      	movs	r1, #145	; 0x91
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f004 feae 	bl	800c974 <VL53L0X_RdByte>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007c20:	4313      	orrs	r3, r2
 8007c22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8007c26:	7bfa      	ldrb	r2, [r7, #15]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007c2e:	2201      	movs	r2, #1
 8007c30:	2100      	movs	r1, #0
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f004 fe1c 	bl	800c870 <VL53L0X_WrByte>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007c40:	4313      	orrs	r3, r2
 8007c42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007c46:	2200      	movs	r2, #0
 8007c48:	21ff      	movs	r1, #255	; 0xff
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f004 fe10 	bl	800c870 <VL53L0X_WrByte>
 8007c50:	4603      	mov	r3, r0
 8007c52:	461a      	mov	r2, r3
 8007c54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007c5e:	2200      	movs	r2, #0
 8007c60:	2180      	movs	r1, #128	; 0x80
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f004 fe04 	bl	800c870 <VL53L0X_WrByte>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007c70:	4313      	orrs	r3, r2
 8007c72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8007c76:	2300      	movs	r3, #0
 8007c78:	653b      	str	r3, [r7, #80]	; 0x50
 8007c7a:	e014      	b.n	8007ca6 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8007c7c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d114      	bne.n	8007cae <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8007c84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	2201      	movs	r2, #1
 8007c8a:	4619      	mov	r1, r3
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 fd35 	bl	80086fc <VL53L0X_SetLimitCheckEnable>
 8007c92:	4603      	mov	r3, r0
 8007c94:	461a      	mov	r2, r3
 8007c96:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8007ca0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	653b      	str	r3, [r7, #80]	; 0x50
 8007ca6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ca8:	2b05      	cmp	r3, #5
 8007caa:	dde7      	ble.n	8007c7c <VL53L0X_DataInit+0x180>
 8007cac:	e000      	b.n	8007cb0 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8007cae:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8007cb0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d107      	bne.n	8007cc8 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8007cb8:	2200      	movs	r2, #0
 8007cba:	2102      	movs	r1, #2
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 fd1d 	bl	80086fc <VL53L0X_SetLimitCheckEnable>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8007cc8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d107      	bne.n	8007ce0 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	2103      	movs	r1, #3
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 fd11 	bl	80086fc <VL53L0X_SetLimitCheckEnable>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8007ce0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d107      	bne.n	8007cf8 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8007ce8:	2200      	movs	r2, #0
 8007cea:	2104      	movs	r1, #4
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 fd05 	bl	80086fc <VL53L0X_SetLimitCheckEnable>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8007cf8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d107      	bne.n	8007d10 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8007d00:	2200      	movs	r2, #0
 8007d02:	2105      	movs	r1, #5
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 fcf9 	bl	80086fc <VL53L0X_SetLimitCheckEnable>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8007d10:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d108      	bne.n	8007d2a <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8007d18:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8007d1c:	2100      	movs	r1, #0
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 fd9c 	bl	800885c <VL53L0X_SetLimitCheckValue>
 8007d24:	4603      	mov	r3, r0
 8007d26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007d2a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d108      	bne.n	8007d44 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8007d32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007d36:	2101      	movs	r1, #1
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 fd8f 	bl	800885c <VL53L0X_SetLimitCheckValue>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007d44:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d108      	bne.n	8007d5e <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8007d4c:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8007d50:	2102      	movs	r1, #2
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 fd82 	bl	800885c <VL53L0X_SetLimitCheckValue>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007d5e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d107      	bne.n	8007d76 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8007d66:	2200      	movs	r2, #0
 8007d68:	2103      	movs	r1, #3
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 fd76 	bl	800885c <VL53L0X_SetLimitCheckValue>
 8007d70:	4603      	mov	r3, r0
 8007d72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007d76:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d10f      	bne.n	8007d9e <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	22ff      	movs	r2, #255	; 0xff
 8007d82:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007d86:	22ff      	movs	r2, #255	; 0xff
 8007d88:	2101      	movs	r1, #1
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f004 fd70 	bl	800c870 <VL53L0X_WrByte>
 8007d90:	4603      	mov	r3, r0
 8007d92:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2201      	movs	r2, #1
 8007d9a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8007d9e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d103      	bne.n	8007dae <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8007dae:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3758      	adds	r7, #88	; 0x58
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bdb0      	pop	{r4, r5, r7, pc}
 8007dba:	bf00      	nop
 8007dbc:	00016b85 	.word	0x00016b85
 8007dc0:	000970a4 	.word	0x000970a4

08007dc4 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8007dc4:	b5b0      	push	{r4, r5, r7, lr}
 8007dc6:	b09e      	sub	sp, #120	; 0x78
 8007dc8:	af02      	add	r7, sp, #8
 8007dca:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8007dd2:	f107 031c 	add.w	r3, r7, #28
 8007dd6:	2240      	movs	r2, #64	; 0x40
 8007dd8:	2100      	movs	r1, #0
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f004 feaa 	bl	800cb34 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8007de0:	2300      	movs	r3, #0
 8007de2:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8007de4:	2300      	movs	r3, #0
 8007de6:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8007de8:	2300      	movs	r3, #0
 8007dea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8007dee:	2300      	movs	r3, #0
 8007df0:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8007df2:	2300      	movs	r3, #0
 8007df4:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8007df6:	2300      	movs	r3, #0
 8007df8:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8007e00:	2101      	movs	r1, #1
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f002 fa79 	bl	800a2fa <VL53L0X_get_info_from_device>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8007e14:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8007e1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8007e20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d80d      	bhi.n	8007e44 <VL53L0X_StaticInit+0x80>
 8007e28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d102      	bne.n	8007e36 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8007e30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e32:	2b20      	cmp	r3, #32
 8007e34:	d806      	bhi.n	8007e44 <VL53L0X_StaticInit+0x80>
 8007e36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d10e      	bne.n	8007e5c <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8007e3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e40:	2b0c      	cmp	r3, #12
 8007e42:	d90b      	bls.n	8007e5c <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8007e44:	f107 0218 	add.w	r2, r7, #24
 8007e48:	f107 0314 	add.w	r3, r7, #20
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f001 fcf8 	bl	8009844 <VL53L0X_perform_ref_spad_management>
 8007e54:	4603      	mov	r3, r0
 8007e56:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8007e5a:	e009      	b.n	8007e70 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8007e5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007e60:	461a      	mov	r2, r3
 8007e62:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f001 fef9 	bl	8009c5c <VL53L0X_set_reference_spads>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8007e70:	4b94      	ldr	r3, [pc, #592]	; (80080c4 <VL53L0X_StaticInit+0x300>)
 8007e72:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8007e74:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d10f      	bne.n	8007e9c <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8007e82:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8007e86:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d104      	bne.n	8007e98 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8007e94:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e96:	e001      	b.n	8007e9c <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8007e98:	4b8a      	ldr	r3, [pc, #552]	; (80080c4 <VL53L0X_StaticInit+0x300>)
 8007e9a:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8007e9c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d106      	bne.n	8007eb2 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8007ea4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f003 fdcc 	bl	800ba44 <VL53L0X_load_tuning_settings>
 8007eac:	4603      	mov	r3, r0
 8007eae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8007eb2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d10a      	bne.n	8007ed0 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8007eba:	2300      	movs	r3, #0
 8007ebc:	9300      	str	r3, [sp, #0]
 8007ebe:	2304      	movs	r3, #4
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	2100      	movs	r1, #0
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f001 f8f1 	bl	80090ac <VL53L0X_SetGpioConfig>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007ed0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d121      	bne.n	8007f1c <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007ed8:	2201      	movs	r2, #1
 8007eda:	21ff      	movs	r1, #255	; 0xff
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f004 fcc7 	bl	800c870 <VL53L0X_WrByte>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8007ee8:	f107 031a 	add.w	r3, r7, #26
 8007eec:	461a      	mov	r2, r3
 8007eee:	2184      	movs	r1, #132	; 0x84
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f004 fd69 	bl	800c9c8 <VL53L0X_RdWord>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	461a      	mov	r2, r3
 8007efa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007efe:	4313      	orrs	r3, r2
 8007f00:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007f04:	2200      	movs	r2, #0
 8007f06:	21ff      	movs	r1, #255	; 0xff
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f004 fcb1 	bl	800c870 <VL53L0X_WrByte>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	461a      	mov	r2, r3
 8007f12:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007f16:	4313      	orrs	r3, r2
 8007f18:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007f1c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d105      	bne.n	8007f30 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8007f24:	8b7b      	ldrh	r3, [r7, #26]
 8007f26:	011b      	lsls	r3, r3, #4
 8007f28:	461a      	mov	r2, r3
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8007f30:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d108      	bne.n	8007f4a <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8007f38:	f107 031c 	add.w	r3, r7, #28
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f000 f8d0 	bl	80080e4 <VL53L0X_GetDeviceParameters>
 8007f44:	4603      	mov	r3, r0
 8007f46:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8007f4a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d110      	bne.n	8007f74 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8007f52:	f107 0319 	add.w	r3, r7, #25
 8007f56:	4619      	mov	r1, r3
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f000 f992 	bl	8008282 <VL53L0X_GetFractionEnable>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8007f64:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d103      	bne.n	8007f74 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8007f6c:	7e7a      	ldrb	r2, [r7, #25]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8007f74:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d10e      	bne.n	8007f9a <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f103 0410 	add.w	r4, r3, #16
 8007f82:	f107 051c 	add.w	r5, r7, #28
 8007f86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f92:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007f96:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8007f9a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d111      	bne.n	8007fc6 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8007fa2:	f107 0319 	add.w	r3, r7, #25
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	2101      	movs	r1, #1
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f004 fce2 	bl	800c974 <VL53L0X_RdByte>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8007fb6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d103      	bne.n	8007fc6 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8007fbe:	7e7a      	ldrb	r2, [r7, #25]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8007fc6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d107      	bne.n	8007fde <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8007fce:	2200      	movs	r2, #0
 8007fd0:	2100      	movs	r1, #0
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 f9ca 	bl	800836c <VL53L0X_SetSequenceStepEnable>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8007fde:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d107      	bne.n	8007ff6 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	2102      	movs	r1, #2
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 f9be 	bl	800836c <VL53L0X_SetSequenceStepEnable>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8007ff6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d103      	bne.n	8008006 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2203      	movs	r2, #3
 8008002:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8008006:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800800a:	2b00      	cmp	r3, #0
 800800c:	d109      	bne.n	8008022 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 800800e:	f107 0313 	add.w	r3, r7, #19
 8008012:	461a      	mov	r2, r3
 8008014:	2100      	movs	r1, #0
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 f990 	bl	800833c <VL53L0X_GetVcselPulsePeriod>
 800801c:	4603      	mov	r3, r0
 800801e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008022:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008026:	2b00      	cmp	r3, #0
 8008028:	d103      	bne.n	8008032 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800802a:	7cfa      	ldrb	r2, [r7, #19]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8008032:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008036:	2b00      	cmp	r3, #0
 8008038:	d109      	bne.n	800804e <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 800803a:	f107 0313 	add.w	r3, r7, #19
 800803e:	461a      	mov	r2, r3
 8008040:	2101      	movs	r1, #1
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 f97a 	bl	800833c <VL53L0X_GetVcselPulsePeriod>
 8008048:	4603      	mov	r3, r0
 800804a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800804e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008052:	2b00      	cmp	r3, #0
 8008054:	d103      	bne.n	800805e <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008056:	7cfa      	ldrb	r2, [r7, #19]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800805e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008062:	2b00      	cmp	r3, #0
 8008064:	d109      	bne.n	800807a <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8008066:	f107 030c 	add.w	r3, r7, #12
 800806a:	461a      	mov	r2, r3
 800806c:	2103      	movs	r1, #3
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f002 fec4 	bl	800adfc <get_sequence_step_timeout>
 8008074:	4603      	mov	r3, r0
 8008076:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800807a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800807e:	2b00      	cmp	r3, #0
 8008080:	d103      	bne.n	800808a <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008082:	68fa      	ldr	r2, [r7, #12]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800808a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800808e:	2b00      	cmp	r3, #0
 8008090:	d109      	bne.n	80080a6 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8008092:	f107 030c 	add.w	r3, r7, #12
 8008096:	461a      	mov	r2, r3
 8008098:	2104      	movs	r1, #4
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f002 feae 	bl	800adfc <get_sequence_step_timeout>
 80080a0:	4603      	mov	r3, r0
 80080a2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80080a6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d103      	bne.n	80080b6 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80080ae:	68fa      	ldr	r2, [r7, #12]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80080b6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3770      	adds	r7, #112	; 0x70
 80080be:	46bd      	mov	sp, r7
 80080c0:	bdb0      	pop	{r4, r5, r7, pc}
 80080c2:	bf00      	nop
 80080c4:	20000010 	.word	0x20000010

080080c8 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b085      	sub	sp, #20
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 80080d0:	239d      	movs	r3, #157	; 0x9d
 80080d2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 80080d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3714      	adds	r7, #20
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr

080080e4 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b084      	sub	sp, #16
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80080ee:	2300      	movs	r3, #0
 80080f0:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	4619      	mov	r1, r3
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 f8b0 	bl	800825c <VL53L0X_GetDeviceMode>
 80080fc:	4603      	mov	r3, r0
 80080fe:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008100:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d107      	bne.n	8008118 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	3308      	adds	r3, #8
 800810c:	4619      	mov	r1, r3
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 fa78 	bl	8008604 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8008114:	4603      	mov	r3, r0
 8008116:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8008118:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d102      	bne.n	8008126 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	2200      	movs	r2, #0
 8008124:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8008126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d107      	bne.n	800813e <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	3310      	adds	r3, #16
 8008132:	4619      	mov	r1, r3
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 faae 	bl	8008696 <VL53L0X_GetXTalkCompensationRateMegaCps>
 800813a:	4603      	mov	r3, r0
 800813c:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800813e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d107      	bne.n	8008156 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	3314      	adds	r3, #20
 800814a:	4619      	mov	r1, r3
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f7ff fcc1 	bl	8007ad4 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8008152:	4603      	mov	r3, r0
 8008154:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8008156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d134      	bne.n	80081c8 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800815e:	2300      	movs	r3, #0
 8008160:	60bb      	str	r3, [r7, #8]
 8008162:	e02a      	b.n	80081ba <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8008164:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d12a      	bne.n	80081c2 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	b299      	uxth	r1, r3
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	3308      	adds	r3, #8
 8008174:	009b      	lsls	r3, r3, #2
 8008176:	683a      	ldr	r2, [r7, #0]
 8008178:	4413      	add	r3, r2
 800817a:	3304      	adds	r3, #4
 800817c:	461a      	mov	r2, r3
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 fbce 	bl	8008920 <VL53L0X_GetLimitCheckValue>
 8008184:	4603      	mov	r3, r0
 8008186:	461a      	mov	r2, r3
 8008188:	7bfb      	ldrb	r3, [r7, #15]
 800818a:	4313      	orrs	r3, r2
 800818c:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800818e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d117      	bne.n	80081c6 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	b299      	uxth	r1, r3
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	3318      	adds	r3, #24
 800819e:	683a      	ldr	r2, [r7, #0]
 80081a0:	4413      	add	r3, r2
 80081a2:	461a      	mov	r2, r3
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 fb35 	bl	8008814 <VL53L0X_GetLimitCheckEnable>
 80081aa:	4603      	mov	r3, r0
 80081ac:	461a      	mov	r2, r3
 80081ae:	7bfb      	ldrb	r3, [r7, #15]
 80081b0:	4313      	orrs	r3, r2
 80081b2:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	3301      	adds	r3, #1
 80081b8:	60bb      	str	r3, [r7, #8]
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	2b05      	cmp	r3, #5
 80081be:	ddd1      	ble.n	8008164 <VL53L0X_GetDeviceParameters+0x80>
 80081c0:	e002      	b.n	80081c8 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 80081c2:	bf00      	nop
 80081c4:	e000      	b.n	80081c8 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 80081c6:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80081c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d107      	bne.n	80081e0 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	333c      	adds	r3, #60	; 0x3c
 80081d4:	4619      	mov	r1, r3
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 fc30 	bl	8008a3c <VL53L0X_GetWrapAroundCheckEnable>
 80081dc:	4603      	mov	r3, r0
 80081de:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 80081e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d107      	bne.n	80081f8 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	3304      	adds	r3, #4
 80081ec:	4619      	mov	r1, r3
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 f879 	bl	80082e6 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 80081f4:	4603      	mov	r3, r0
 80081f6:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80081f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3710      	adds	r7, #16
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8008204:	b480      	push	{r7}
 8008206:	b085      	sub	sp, #20
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	460b      	mov	r3, r1
 800820e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008210:	2300      	movs	r3, #0
 8008212:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8008214:	78fb      	ldrb	r3, [r7, #3]
 8008216:	2b15      	cmp	r3, #21
 8008218:	bf8c      	ite	hi
 800821a:	2201      	movhi	r2, #1
 800821c:	2200      	movls	r2, #0
 800821e:	b2d2      	uxtb	r2, r2
 8008220:	2a00      	cmp	r2, #0
 8008222:	d10e      	bne.n	8008242 <VL53L0X_SetDeviceMode+0x3e>
 8008224:	2201      	movs	r2, #1
 8008226:	409a      	lsls	r2, r3
 8008228:	4b0b      	ldr	r3, [pc, #44]	; (8008258 <VL53L0X_SetDeviceMode+0x54>)
 800822a:	4013      	ands	r3, r2
 800822c:	2b00      	cmp	r3, #0
 800822e:	bf14      	ite	ne
 8008230:	2301      	movne	r3, #1
 8008232:	2300      	moveq	r3, #0
 8008234:	b2db      	uxtb	r3, r3
 8008236:	2b00      	cmp	r3, #0
 8008238:	d003      	beq.n	8008242 <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	78fa      	ldrb	r2, [r7, #3]
 800823e:	741a      	strb	r2, [r3, #16]
		break;
 8008240:	e001      	b.n	8008246 <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8008242:	23f8      	movs	r3, #248	; 0xf8
 8008244:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008246:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800824a:	4618      	mov	r0, r3
 800824c:	3714      	adds	r7, #20
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr
 8008256:	bf00      	nop
 8008258:	0030000b 	.word	0x0030000b

0800825c <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 800825c:	b480      	push	{r7}
 800825e:	b085      	sub	sp, #20
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008266:	2300      	movs	r3, #0
 8008268:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	7c1a      	ldrb	r2, [r3, #16]
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8008272:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008276:	4618      	mov	r0, r3
 8008278:	3714      	adds	r7, #20
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr

08008282 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8008282:	b580      	push	{r7, lr}
 8008284:	b084      	sub	sp, #16
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
 800828a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800828c:	2300      	movs	r3, #0
 800828e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8008290:	683a      	ldr	r2, [r7, #0]
 8008292:	2109      	movs	r1, #9
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f004 fb6d 	bl	800c974 <VL53L0X_RdByte>
 800829a:	4603      	mov	r3, r0
 800829c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800829e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d106      	bne.n	80082b4 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	f003 0301 	and.w	r3, r3, #1
 80082ae:	b2da      	uxtb	r2, r3
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80082b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3710      	adds	r7, #16
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80082ca:	2300      	movs	r3, #0
 80082cc:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 80082ce:	6839      	ldr	r1, [r7, #0]
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f003 fa26 	bl	800b722 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 80082d6:	4603      	mov	r3, r0
 80082d8:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 80082da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3710      	adds	r7, #16
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80082e6:	b580      	push	{r7, lr}
 80082e8:	b084      	sub	sp, #16
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
 80082ee:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80082f0:	2300      	movs	r3, #0
 80082f2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 80082f4:	6839      	ldr	r1, [r7, #0]
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f003 faf3 	bl	800b8e2 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 80082fc:	4603      	mov	r3, r0
 80082fe:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8008300:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008304:	4618      	mov	r0, r3
 8008306:	3710      	adds	r7, #16
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	460b      	mov	r3, r1
 8008316:	70fb      	strb	r3, [r7, #3]
 8008318:	4613      	mov	r3, r2
 800831a:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800831c:	2300      	movs	r3, #0
 800831e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8008320:	78ba      	ldrb	r2, [r7, #2]
 8008322:	78fb      	ldrb	r3, [r7, #3]
 8008324:	4619      	mov	r1, r3
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f002 ff3b 	bl	800b1a2 <VL53L0X_set_vcsel_pulse_period>
 800832c:	4603      	mov	r3, r0
 800832e:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8008330:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008334:	4618      	mov	r0, r3
 8008336:	3710      	adds	r7, #16
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b086      	sub	sp, #24
 8008340:	af00      	add	r7, sp, #0
 8008342:	60f8      	str	r0, [r7, #12]
 8008344:	460b      	mov	r3, r1
 8008346:	607a      	str	r2, [r7, #4]
 8008348:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800834a:	2300      	movs	r3, #0
 800834c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800834e:	7afb      	ldrb	r3, [r7, #11]
 8008350:	687a      	ldr	r2, [r7, #4]
 8008352:	4619      	mov	r1, r3
 8008354:	68f8      	ldr	r0, [r7, #12]
 8008356:	f003 f9ad 	bl	800b6b4 <VL53L0X_get_vcsel_pulse_period>
 800835a:	4603      	mov	r3, r0
 800835c:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800835e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008362:	4618      	mov	r0, r3
 8008364:	3718      	adds	r7, #24
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
	...

0800836c <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b086      	sub	sp, #24
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	460b      	mov	r3, r1
 8008376:	70fb      	strb	r3, [r7, #3]
 8008378:	4613      	mov	r3, r2
 800837a:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800837c:	2300      	movs	r3, #0
 800837e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8008380:	2300      	movs	r3, #0
 8008382:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8008384:	2300      	movs	r3, #0
 8008386:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008388:	f107 030f 	add.w	r3, r7, #15
 800838c:	461a      	mov	r2, r3
 800838e:	2101      	movs	r1, #1
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f004 faef 	bl	800c974 <VL53L0X_RdByte>
 8008396:	4603      	mov	r3, r0
 8008398:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800839a:	7bfb      	ldrb	r3, [r7, #15]
 800839c:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800839e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d15a      	bne.n	800845c <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 80083a6:	78bb      	ldrb	r3, [r7, #2]
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d12b      	bne.n	8008404 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 80083ac:	78fb      	ldrb	r3, [r7, #3]
 80083ae:	2b04      	cmp	r3, #4
 80083b0:	d825      	bhi.n	80083fe <VL53L0X_SetSequenceStepEnable+0x92>
 80083b2:	a201      	add	r2, pc, #4	; (adr r2, 80083b8 <VL53L0X_SetSequenceStepEnable+0x4c>)
 80083b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083b8:	080083cd 	.word	0x080083cd
 80083bc:	080083d7 	.word	0x080083d7
 80083c0:	080083e1 	.word	0x080083e1
 80083c4:	080083eb 	.word	0x080083eb
 80083c8:	080083f5 	.word	0x080083f5
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 80083cc:	7dbb      	ldrb	r3, [r7, #22]
 80083ce:	f043 0310 	orr.w	r3, r3, #16
 80083d2:	75bb      	strb	r3, [r7, #22]
				break;
 80083d4:	e043      	b.n	800845e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 80083d6:	7dbb      	ldrb	r3, [r7, #22]
 80083d8:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80083dc:	75bb      	strb	r3, [r7, #22]
				break;
 80083de:	e03e      	b.n	800845e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 80083e0:	7dbb      	ldrb	r3, [r7, #22]
 80083e2:	f043 0304 	orr.w	r3, r3, #4
 80083e6:	75bb      	strb	r3, [r7, #22]
				break;
 80083e8:	e039      	b.n	800845e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 80083ea:	7dbb      	ldrb	r3, [r7, #22]
 80083ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083f0:	75bb      	strb	r3, [r7, #22]
				break;
 80083f2:	e034      	b.n	800845e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 80083f4:	7dbb      	ldrb	r3, [r7, #22]
 80083f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80083fa:	75bb      	strb	r3, [r7, #22]
				break;
 80083fc:	e02f      	b.n	800845e <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80083fe:	23fc      	movs	r3, #252	; 0xfc
 8008400:	75fb      	strb	r3, [r7, #23]
 8008402:	e02c      	b.n	800845e <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8008404:	78fb      	ldrb	r3, [r7, #3]
 8008406:	2b04      	cmp	r3, #4
 8008408:	d825      	bhi.n	8008456 <VL53L0X_SetSequenceStepEnable+0xea>
 800840a:	a201      	add	r2, pc, #4	; (adr r2, 8008410 <VL53L0X_SetSequenceStepEnable+0xa4>)
 800840c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008410:	08008425 	.word	0x08008425
 8008414:	0800842f 	.word	0x0800842f
 8008418:	08008439 	.word	0x08008439
 800841c:	08008443 	.word	0x08008443
 8008420:	0800844d 	.word	0x0800844d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8008424:	7dbb      	ldrb	r3, [r7, #22]
 8008426:	f023 0310 	bic.w	r3, r3, #16
 800842a:	75bb      	strb	r3, [r7, #22]
				break;
 800842c:	e017      	b.n	800845e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800842e:	7dbb      	ldrb	r3, [r7, #22]
 8008430:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8008434:	75bb      	strb	r3, [r7, #22]
				break;
 8008436:	e012      	b.n	800845e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8008438:	7dbb      	ldrb	r3, [r7, #22]
 800843a:	f023 0304 	bic.w	r3, r3, #4
 800843e:	75bb      	strb	r3, [r7, #22]
				break;
 8008440:	e00d      	b.n	800845e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8008442:	7dbb      	ldrb	r3, [r7, #22]
 8008444:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008448:	75bb      	strb	r3, [r7, #22]
				break;
 800844a:	e008      	b.n	800845e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 800844c:	7dbb      	ldrb	r3, [r7, #22]
 800844e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008452:	75bb      	strb	r3, [r7, #22]
				break;
 8008454:	e003      	b.n	800845e <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008456:	23fc      	movs	r3, #252	; 0xfc
 8008458:	75fb      	strb	r3, [r7, #23]
 800845a:	e000      	b.n	800845e <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 800845c:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 800845e:	7bfb      	ldrb	r3, [r7, #15]
 8008460:	7dba      	ldrb	r2, [r7, #22]
 8008462:	429a      	cmp	r2, r3
 8008464:	d01e      	beq.n	80084a4 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8008466:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d107      	bne.n	800847e <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 800846e:	7dbb      	ldrb	r3, [r7, #22]
 8008470:	461a      	mov	r2, r3
 8008472:	2101      	movs	r1, #1
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f004 f9fb 	bl	800c870 <VL53L0X_WrByte>
 800847a:	4603      	mov	r3, r0
 800847c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800847e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d103      	bne.n	800848e <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	7dba      	ldrb	r2, [r7, #22]
 800848a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800848e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d106      	bne.n	80084a4 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	695b      	ldr	r3, [r3, #20]
 800849a:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800849c:	6939      	ldr	r1, [r7, #16]
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f7ff ff0e 	bl	80082c0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 80084a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3718      	adds	r7, #24
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b087      	sub	sp, #28
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	60f8      	str	r0, [r7, #12]
 80084b8:	607b      	str	r3, [r7, #4]
 80084ba:	460b      	mov	r3, r1
 80084bc:	72fb      	strb	r3, [r7, #11]
 80084be:	4613      	mov	r3, r2
 80084c0:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80084c2:	2300      	movs	r3, #0
 80084c4:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2200      	movs	r2, #0
 80084ca:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 80084cc:	7afb      	ldrb	r3, [r7, #11]
 80084ce:	2b04      	cmp	r3, #4
 80084d0:	d836      	bhi.n	8008540 <sequence_step_enabled+0x90>
 80084d2:	a201      	add	r2, pc, #4	; (adr r2, 80084d8 <sequence_step_enabled+0x28>)
 80084d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084d8:	080084ed 	.word	0x080084ed
 80084dc:	080084ff 	.word	0x080084ff
 80084e0:	08008511 	.word	0x08008511
 80084e4:	08008523 	.word	0x08008523
 80084e8:	08008535 	.word	0x08008535
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 80084ec:	7abb      	ldrb	r3, [r7, #10]
 80084ee:	111b      	asrs	r3, r3, #4
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	f003 0301 	and.w	r3, r3, #1
 80084f6:	b2da      	uxtb	r2, r3
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	701a      	strb	r2, [r3, #0]
		break;
 80084fc:	e022      	b.n	8008544 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 80084fe:	7abb      	ldrb	r3, [r7, #10]
 8008500:	10db      	asrs	r3, r3, #3
 8008502:	b2db      	uxtb	r3, r3
 8008504:	f003 0301 	and.w	r3, r3, #1
 8008508:	b2da      	uxtb	r2, r3
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	701a      	strb	r2, [r3, #0]
		break;
 800850e:	e019      	b.n	8008544 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8008510:	7abb      	ldrb	r3, [r7, #10]
 8008512:	109b      	asrs	r3, r3, #2
 8008514:	b2db      	uxtb	r3, r3
 8008516:	f003 0301 	and.w	r3, r3, #1
 800851a:	b2da      	uxtb	r2, r3
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	701a      	strb	r2, [r3, #0]
		break;
 8008520:	e010      	b.n	8008544 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8008522:	7abb      	ldrb	r3, [r7, #10]
 8008524:	119b      	asrs	r3, r3, #6
 8008526:	b2db      	uxtb	r3, r3
 8008528:	f003 0301 	and.w	r3, r3, #1
 800852c:	b2da      	uxtb	r2, r3
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	701a      	strb	r2, [r3, #0]
		break;
 8008532:	e007      	b.n	8008544 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8008534:	7abb      	ldrb	r3, [r7, #10]
 8008536:	09db      	lsrs	r3, r3, #7
 8008538:	b2da      	uxtb	r2, r3
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	701a      	strb	r2, [r3, #0]
		break;
 800853e:	e001      	b.n	8008544 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008540:	23fc      	movs	r3, #252	; 0xfc
 8008542:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008544:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008548:	4618      	mov	r0, r3
 800854a:	371c      	adds	r7, #28
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr

08008554 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800855e:	2300      	movs	r3, #0
 8008560:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8008562:	2300      	movs	r3, #0
 8008564:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008566:	f107 030e 	add.w	r3, r7, #14
 800856a:	461a      	mov	r2, r3
 800856c:	2101      	movs	r1, #1
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f004 fa00 	bl	800c974 <VL53L0X_RdByte>
 8008574:	4603      	mov	r3, r0
 8008576:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8008578:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d107      	bne.n	8008590 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8008580:	7bba      	ldrb	r2, [r7, #14]
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	2100      	movs	r1, #0
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f7ff ff92 	bl	80084b0 <sequence_step_enabled>
 800858c:	4603      	mov	r3, r0
 800858e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008590:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d108      	bne.n	80085aa <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8008598:	7bba      	ldrb	r2, [r7, #14]
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	3302      	adds	r3, #2
 800859e:	2101      	movs	r1, #1
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f7ff ff85 	bl	80084b0 <sequence_step_enabled>
 80085a6:	4603      	mov	r3, r0
 80085a8:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80085aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d108      	bne.n	80085c4 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 80085b2:	7bba      	ldrb	r2, [r7, #14]
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	3301      	adds	r3, #1
 80085b8:	2102      	movs	r1, #2
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f7ff ff78 	bl	80084b0 <sequence_step_enabled>
 80085c0:	4603      	mov	r3, r0
 80085c2:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80085c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d108      	bne.n	80085de <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 80085cc:	7bba      	ldrb	r2, [r7, #14]
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	3303      	adds	r3, #3
 80085d2:	2103      	movs	r1, #3
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f7ff ff6b 	bl	80084b0 <sequence_step_enabled>
 80085da:	4603      	mov	r3, r0
 80085dc:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80085de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d108      	bne.n	80085f8 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 80085e6:	7bba      	ldrb	r2, [r7, #14]
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	3304      	adds	r3, #4
 80085ec:	2104      	movs	r1, #4
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f7ff ff5e 	bl	80084b0 <sequence_step_enabled>
 80085f4:	4603      	mov	r3, r0
 80085f6:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80085f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3710      	adds	r7, #16
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}

08008604 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b084      	sub	sp, #16
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800860e:	2300      	movs	r3, #0
 8008610:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8008612:	f107 030c 	add.w	r3, r7, #12
 8008616:	461a      	mov	r2, r3
 8008618:	21f8      	movs	r1, #248	; 0xf8
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f004 f9d4 	bl	800c9c8 <VL53L0X_RdWord>
 8008620:	4603      	mov	r3, r0
 8008622:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8008624:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d108      	bne.n	800863e <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 800862c:	f107 0308 	add.w	r3, r7, #8
 8008630:	461a      	mov	r2, r3
 8008632:	2104      	movs	r1, #4
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f004 f9ff 	bl	800ca38 <VL53L0X_RdDWord>
 800863a:	4603      	mov	r3, r0
 800863c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800863e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d10c      	bne.n	8008660 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8008646:	89bb      	ldrh	r3, [r7, #12]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d005      	beq.n	8008658 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	89ba      	ldrh	r2, [r7, #12]
 8008650:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008660:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008664:	4618      	mov	r0, r3
 8008666:	3710      	adds	r7, #16
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 800866c:	b480      	push	{r7}
 800866e:	b085      	sub	sp, #20
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008676:	2300      	movs	r3, #0
 8008678:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	7f1b      	ldrb	r3, [r3, #28]
 800867e:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	7bba      	ldrb	r2, [r7, #14]
 8008684:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8008686:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800868a:	4618      	mov	r0, r3
 800868c:	3714      	adds	r7, #20
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr

08008696 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8008696:	b580      	push	{r7, lr}
 8008698:	b086      	sub	sp, #24
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
 800869e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80086a0:	2300      	movs	r3, #0
 80086a2:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 80086a4:	f107 030e 	add.w	r3, r7, #14
 80086a8:	461a      	mov	r2, r3
 80086aa:	2120      	movs	r1, #32
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f004 f98b 	bl	800c9c8 <VL53L0X_RdWord>
 80086b2:	4603      	mov	r3, r0
 80086b4:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 80086b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d118      	bne.n	80086f0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 80086be:	89fb      	ldrh	r3, [r7, #14]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d109      	bne.n	80086d8 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6a1b      	ldr	r3, [r3, #32]
 80086c8:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	693a      	ldr	r2, [r7, #16]
 80086ce:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	771a      	strb	r2, [r3, #28]
 80086d6:	e00b      	b.n	80086f0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 80086d8:	89fb      	ldrh	r3, [r7, #14]
 80086da:	00db      	lsls	r3, r3, #3
 80086dc:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	693a      	ldr	r2, [r7, #16]
 80086e2:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	693a      	ldr	r2, [r7, #16]
 80086e8:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2201      	movs	r2, #1
 80086ee:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80086f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3718      	adds	r7, #24
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b086      	sub	sp, #24
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	460b      	mov	r3, r1
 8008706:	807b      	strh	r3, [r7, #2]
 8008708:	4613      	mov	r3, r2
 800870a:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800870c:	2300      	movs	r3, #0
 800870e:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8008710:	2300      	movs	r3, #0
 8008712:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8008714:	2300      	movs	r3, #0
 8008716:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8008718:	2300      	movs	r3, #0
 800871a:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800871c:	887b      	ldrh	r3, [r7, #2]
 800871e:	2b05      	cmp	r3, #5
 8008720:	d902      	bls.n	8008728 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008722:	23fc      	movs	r3, #252	; 0xfc
 8008724:	75fb      	strb	r3, [r7, #23]
 8008726:	e05b      	b.n	80087e0 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8008728:	787b      	ldrb	r3, [r7, #1]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d106      	bne.n	800873c <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 800872e:	2300      	movs	r3, #0
 8008730:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8008732:	2300      	movs	r3, #0
 8008734:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8008736:	2301      	movs	r3, #1
 8008738:	73bb      	strb	r3, [r7, #14]
 800873a:	e00a      	b.n	8008752 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800873c:	887b      	ldrh	r3, [r7, #2]
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	330c      	adds	r3, #12
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	4413      	add	r3, r2
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 800874a:	2300      	movs	r3, #0
 800874c:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 800874e:	2301      	movs	r3, #1
 8008750:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8008752:	887b      	ldrh	r3, [r7, #2]
 8008754:	2b05      	cmp	r3, #5
 8008756:	d841      	bhi.n	80087dc <VL53L0X_SetLimitCheckEnable+0xe0>
 8008758:	a201      	add	r2, pc, #4	; (adr r2, 8008760 <VL53L0X_SetLimitCheckEnable+0x64>)
 800875a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800875e:	bf00      	nop
 8008760:	08008779 	.word	0x08008779
 8008764:	08008783 	.word	0x08008783
 8008768:	08008799 	.word	0x08008799
 800876c:	080087a3 	.word	0x080087a3
 8008770:	080087ad 	.word	0x080087ad
 8008774:	080087c5 	.word	0x080087c5

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	7bfa      	ldrb	r2, [r7, #15]
 800877c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8008780:	e02e      	b.n	80087e0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8008786:	b29b      	uxth	r3, r3
 8008788:	461a      	mov	r2, r3
 800878a:	2144      	movs	r1, #68	; 0x44
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f004 f893 	bl	800c8b8 <VL53L0X_WrWord>
 8008792:	4603      	mov	r3, r0
 8008794:	75fb      	strb	r3, [r7, #23]

			break;
 8008796:	e023      	b.n	80087e0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	7bfa      	ldrb	r2, [r7, #15]
 800879c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 80087a0:	e01e      	b.n	80087e0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	7bfa      	ldrb	r2, [r7, #15]
 80087a6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 80087aa:	e019      	b.n	80087e0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 80087ac:	7bbb      	ldrb	r3, [r7, #14]
 80087ae:	005b      	lsls	r3, r3, #1
 80087b0:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80087b2:	7b7b      	ldrb	r3, [r7, #13]
 80087b4:	22fe      	movs	r2, #254	; 0xfe
 80087b6:	2160      	movs	r1, #96	; 0x60
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f004 f8a7 	bl	800c90c <VL53L0X_UpdateByte>
 80087be:	4603      	mov	r3, r0
 80087c0:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 80087c2:	e00d      	b.n	80087e0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 80087c4:	7bbb      	ldrb	r3, [r7, #14]
 80087c6:	011b      	lsls	r3, r3, #4
 80087c8:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80087ca:	7b7b      	ldrb	r3, [r7, #13]
 80087cc:	22ef      	movs	r2, #239	; 0xef
 80087ce:	2160      	movs	r1, #96	; 0x60
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f004 f89b 	bl	800c90c <VL53L0X_UpdateByte>
 80087d6:	4603      	mov	r3, r0
 80087d8:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 80087da:	e001      	b.n	80087e0 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80087dc:	23fc      	movs	r3, #252	; 0xfc
 80087de:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80087e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d10f      	bne.n	8008808 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 80087e8:	787b      	ldrb	r3, [r7, #1]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d106      	bne.n	80087fc <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80087ee:	887b      	ldrh	r3, [r7, #2]
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	4413      	add	r3, r2
 80087f4:	2200      	movs	r2, #0
 80087f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80087fa:	e005      	b.n	8008808 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80087fc:	887b      	ldrh	r3, [r7, #2]
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	4413      	add	r3, r2
 8008802:	2201      	movs	r2, #1
 8008804:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008808:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800880c:	4618      	mov	r0, r3
 800880e:	3718      	adds	r7, #24
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8008814:	b480      	push	{r7}
 8008816:	b087      	sub	sp, #28
 8008818:	af00      	add	r7, sp, #0
 800881a:	60f8      	str	r0, [r7, #12]
 800881c:	460b      	mov	r3, r1
 800881e:	607a      	str	r2, [r7, #4]
 8008820:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008822:	2300      	movs	r3, #0
 8008824:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8008826:	897b      	ldrh	r3, [r7, #10]
 8008828:	2b05      	cmp	r3, #5
 800882a:	d905      	bls.n	8008838 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800882c:	23fc      	movs	r3, #252	; 0xfc
 800882e:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2200      	movs	r2, #0
 8008834:	701a      	strb	r2, [r3, #0]
 8008836:	e008      	b.n	800884a <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008838:	897b      	ldrh	r3, [r7, #10]
 800883a:	68fa      	ldr	r2, [r7, #12]
 800883c:	4413      	add	r3, r2
 800883e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008842:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	7dba      	ldrb	r2, [r7, #22]
 8008848:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800884a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800884e:	4618      	mov	r0, r3
 8008850:	371c      	adds	r7, #28
 8008852:	46bd      	mov	sp, r7
 8008854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008858:	4770      	bx	lr
	...

0800885c <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b086      	sub	sp, #24
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	460b      	mov	r3, r1
 8008866:	607a      	str	r2, [r7, #4]
 8008868:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800886a:	2300      	movs	r3, #0
 800886c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 800886e:	897b      	ldrh	r3, [r7, #10]
 8008870:	68fa      	ldr	r2, [r7, #12]
 8008872:	4413      	add	r3, r2
 8008874:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008878:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800887a:	7dbb      	ldrb	r3, [r7, #22]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d107      	bne.n	8008890 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008880:	897b      	ldrh	r3, [r7, #10]
 8008882:	68fa      	ldr	r2, [r7, #12]
 8008884:	330c      	adds	r3, #12
 8008886:	009b      	lsls	r3, r3, #2
 8008888:	4413      	add	r3, r2
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	605a      	str	r2, [r3, #4]
 800888e:	e040      	b.n	8008912 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8008890:	897b      	ldrh	r3, [r7, #10]
 8008892:	2b05      	cmp	r3, #5
 8008894:	d830      	bhi.n	80088f8 <VL53L0X_SetLimitCheckValue+0x9c>
 8008896:	a201      	add	r2, pc, #4	; (adr r2, 800889c <VL53L0X_SetLimitCheckValue+0x40>)
 8008898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800889c:	080088b5 	.word	0x080088b5
 80088a0:	080088bd 	.word	0x080088bd
 80088a4:	080088d3 	.word	0x080088d3
 80088a8:	080088db 	.word	0x080088db
 80088ac:	080088e3 	.word	0x080088e3
 80088b0:	080088e3 	.word	0x080088e3

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 80088ba:	e01f      	b.n	80088fc <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	461a      	mov	r2, r3
 80088c4:	2144      	movs	r1, #68	; 0x44
 80088c6:	68f8      	ldr	r0, [r7, #12]
 80088c8:	f003 fff6 	bl	800c8b8 <VL53L0X_WrWord>
 80088cc:	4603      	mov	r3, r0
 80088ce:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80088d0:	e014      	b.n	80088fc <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	687a      	ldr	r2, [r7, #4]
 80088d6:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 80088d8:	e010      	b.n	80088fc <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	687a      	ldr	r2, [r7, #4]
 80088de:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 80088e0:	e00c      	b.n	80088fc <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80088e6:	b29b      	uxth	r3, r3
 80088e8:	461a      	mov	r2, r3
 80088ea:	2164      	movs	r1, #100	; 0x64
 80088ec:	68f8      	ldr	r0, [r7, #12]
 80088ee:	f003 ffe3 	bl	800c8b8 <VL53L0X_WrWord>
 80088f2:	4603      	mov	r3, r0
 80088f4:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80088f6:	e001      	b.n	80088fc <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80088f8:	23fc      	movs	r3, #252	; 0xfc
 80088fa:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 80088fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d106      	bne.n	8008912 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008904:	897b      	ldrh	r3, [r7, #10]
 8008906:	68fa      	ldr	r2, [r7, #12]
 8008908:	330c      	adds	r3, #12
 800890a:	009b      	lsls	r3, r3, #2
 800890c:	4413      	add	r3, r2
 800890e:	687a      	ldr	r2, [r7, #4]
 8008910:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008912:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008916:	4618      	mov	r0, r3
 8008918:	3718      	adds	r7, #24
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
 800891e:	bf00      	nop

08008920 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b088      	sub	sp, #32
 8008924:	af00      	add	r7, sp, #0
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	460b      	mov	r3, r1
 800892a:	607a      	str	r2, [r7, #4]
 800892c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800892e:	2300      	movs	r3, #0
 8008930:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8008932:	2300      	movs	r3, #0
 8008934:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8008936:	897b      	ldrh	r3, [r7, #10]
 8008938:	2b05      	cmp	r3, #5
 800893a:	d847      	bhi.n	80089cc <VL53L0X_GetLimitCheckValue+0xac>
 800893c:	a201      	add	r2, pc, #4	; (adr r2, 8008944 <VL53L0X_GetLimitCheckValue+0x24>)
 800893e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008942:	bf00      	nop
 8008944:	0800895d 	.word	0x0800895d
 8008948:	08008969 	.word	0x08008969
 800894c:	0800898f 	.word	0x0800898f
 8008950:	0800899b 	.word	0x0800899b
 8008954:	080089a7 	.word	0x080089a7
 8008958:	080089a7 	.word	0x080089a7

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008960:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8008962:	2300      	movs	r3, #0
 8008964:	77bb      	strb	r3, [r7, #30]
		break;
 8008966:	e033      	b.n	80089d0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8008968:	f107 0316 	add.w	r3, r7, #22
 800896c:	461a      	mov	r2, r3
 800896e:	2144      	movs	r1, #68	; 0x44
 8008970:	68f8      	ldr	r0, [r7, #12]
 8008972:	f004 f829 	bl	800c9c8 <VL53L0X_RdWord>
 8008976:	4603      	mov	r3, r0
 8008978:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800897a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d102      	bne.n	8008988 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8008982:	8afb      	ldrh	r3, [r7, #22]
 8008984:	025b      	lsls	r3, r3, #9
 8008986:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8008988:	2301      	movs	r3, #1
 800898a:	77bb      	strb	r3, [r7, #30]
		break;
 800898c:	e020      	b.n	80089d0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008992:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8008994:	2300      	movs	r3, #0
 8008996:	77bb      	strb	r3, [r7, #30]
		break;
 8008998:	e01a      	b.n	80089d0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800899e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 80089a0:	2300      	movs	r3, #0
 80089a2:	77bb      	strb	r3, [r7, #30]
		break;
 80089a4:	e014      	b.n	80089d0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80089a6:	f107 0316 	add.w	r3, r7, #22
 80089aa:	461a      	mov	r2, r3
 80089ac:	2164      	movs	r1, #100	; 0x64
 80089ae:	68f8      	ldr	r0, [r7, #12]
 80089b0:	f004 f80a 	bl	800c9c8 <VL53L0X_RdWord>
 80089b4:	4603      	mov	r3, r0
 80089b6:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80089b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d102      	bne.n	80089c6 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80089c0:	8afb      	ldrh	r3, [r7, #22]
 80089c2:	025b      	lsls	r3, r3, #9
 80089c4:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 80089c6:	2300      	movs	r3, #0
 80089c8:	77bb      	strb	r3, [r7, #30]
		break;
 80089ca:	e001      	b.n	80089d0 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80089cc:	23fc      	movs	r3, #252	; 0xfc
 80089ce:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80089d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d12a      	bne.n	8008a2e <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 80089d8:	7fbb      	ldrb	r3, [r7, #30]
 80089da:	2b01      	cmp	r3, #1
 80089dc:	d124      	bne.n	8008a28 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 80089de:	69bb      	ldr	r3, [r7, #24]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d110      	bne.n	8008a06 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 80089e4:	897b      	ldrh	r3, [r7, #10]
 80089e6:	68fa      	ldr	r2, [r7, #12]
 80089e8:	330c      	adds	r3, #12
 80089ea:	009b      	lsls	r3, r3, #2
 80089ec:	4413      	add	r3, r2
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	69ba      	ldr	r2, [r7, #24]
 80089f6:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80089f8:	897b      	ldrh	r3, [r7, #10]
 80089fa:	68fa      	ldr	r2, [r7, #12]
 80089fc:	4413      	add	r3, r2
 80089fe:	2200      	movs	r2, #0
 8008a00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8008a04:	e013      	b.n	8008a2e <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	69ba      	ldr	r2, [r7, #24]
 8008a0a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8008a0c:	897b      	ldrh	r3, [r7, #10]
 8008a0e:	68fa      	ldr	r2, [r7, #12]
 8008a10:	330c      	adds	r3, #12
 8008a12:	009b      	lsls	r3, r3, #2
 8008a14:	4413      	add	r3, r2
 8008a16:	69ba      	ldr	r2, [r7, #24]
 8008a18:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8008a1a:	897b      	ldrh	r3, [r7, #10]
 8008a1c:	68fa      	ldr	r2, [r7, #12]
 8008a1e:	4413      	add	r3, r2
 8008a20:	2201      	movs	r2, #1
 8008a22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8008a26:	e002      	b.n	8008a2e <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	69ba      	ldr	r2, [r7, #24]
 8008a2c:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008a2e:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3720      	adds	r7, #32
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
 8008a3a:	bf00      	nop

08008a3c <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b084      	sub	sp, #16
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008a46:	2300      	movs	r3, #0
 8008a48:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8008a4a:	f107 030e 	add.w	r3, r7, #14
 8008a4e:	461a      	mov	r2, r3
 8008a50:	2101      	movs	r1, #1
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f003 ff8e 	bl	800c974 <VL53L0X_RdByte>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8008a5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d10e      	bne.n	8008a82 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8008a64:	7bba      	ldrb	r2, [r7, #14]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8008a6c:	7bbb      	ldrb	r3, [r7, #14]
 8008a6e:	b25b      	sxtb	r3, r3
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	da03      	bge.n	8008a7c <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	2201      	movs	r2, #1
 8008a78:	701a      	strb	r2, [r3, #0]
 8008a7a:	e002      	b.n	8008a82 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d104      	bne.n	8008a94 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	781a      	ldrb	r2, [r3, #0]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008a94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3710      	adds	r7, #16
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b084      	sub	sp, #16
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8008aac:	f107 030e 	add.w	r3, r7, #14
 8008ab0:	4619      	mov	r1, r3
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f7ff fbd2 	bl	800825c <VL53L0X_GetDeviceMode>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8008abc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d107      	bne.n	8008ad4 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8008ac4:	7bbb      	ldrb	r3, [r7, #14]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d104      	bne.n	8008ad4 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 f898 	bl	8008c00 <VL53L0X_StartMeasurement>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8008ad4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d104      	bne.n	8008ae6 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f001 fb3f 	bl	800a160 <VL53L0X_measurement_poll_for_completion>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8008ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d106      	bne.n	8008afc <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8008aee:	7bbb      	ldrb	r3, [r7, #14]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d103      	bne.n	8008afc <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2203      	movs	r2, #3
 8008af8:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8008afc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3710      	adds	r7, #16
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b086      	sub	sp, #24
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	60f8      	str	r0, [r7, #12]
 8008b10:	60b9      	str	r1, [r7, #8]
 8008b12:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008b14:	2300      	movs	r3, #0
 8008b16:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8008b18:	2301      	movs	r3, #1
 8008b1a:	687a      	ldr	r2, [r7, #4]
 8008b1c:	68b9      	ldr	r1, [r7, #8]
 8008b1e:	68f8      	ldr	r0, [r7, #12]
 8008b20:	f001 fae1 	bl	800a0e6 <VL53L0X_perform_ref_calibration>
 8008b24:	4603      	mov	r3, r0
 8008b26:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8008b28:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3718      	adds	r7, #24
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b086      	sub	sp, #24
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008b40:	2300      	movs	r3, #0
 8008b42:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8008b4a:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8008b4c:	7dbb      	ldrb	r3, [r7, #22]
 8008b4e:	2b01      	cmp	r3, #1
 8008b50:	d005      	beq.n	8008b5e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8008b52:	7dbb      	ldrb	r3, [r7, #22]
 8008b54:	2b02      	cmp	r3, #2
 8008b56:	d002      	beq.n	8008b5e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8008b58:	7dbb      	ldrb	r3, [r7, #22]
 8008b5a:	2b03      	cmp	r3, #3
 8008b5c:	d147      	bne.n	8008bee <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8008b5e:	f107 030c 	add.w	r3, r7, #12
 8008b62:	f107 0210 	add.w	r2, r7, #16
 8008b66:	2101      	movs	r1, #1
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 fbc3 	bl	80092f4 <VL53L0X_GetInterruptThresholds>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8008b78:	d803      	bhi.n	8008b82 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8008b7a:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8008b7c:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8008b80:	d935      	bls.n	8008bee <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8008b82:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d131      	bne.n	8008bee <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8008b8a:	78fb      	ldrb	r3, [r7, #3]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d006      	beq.n	8008b9e <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8008b90:	491a      	ldr	r1, [pc, #104]	; (8008bfc <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f002 ff56 	bl	800ba44 <VL53L0X_load_tuning_settings>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	75fb      	strb	r3, [r7, #23]
 8008b9c:	e027      	b.n	8008bee <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8008b9e:	2204      	movs	r2, #4
 8008ba0:	21ff      	movs	r1, #255	; 0xff
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f003 fe64 	bl	800c870 <VL53L0X_WrByte>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	461a      	mov	r2, r3
 8008bac:	7dfb      	ldrb	r3, [r7, #23]
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	2170      	movs	r1, #112	; 0x70
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f003 fe5a 	bl	800c870 <VL53L0X_WrByte>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	7dfb      	ldrb	r3, [r7, #23]
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	21ff      	movs	r1, #255	; 0xff
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f003 fe50 	bl	800c870 <VL53L0X_WrByte>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	7dfb      	ldrb	r3, [r7, #23]
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8008bda:	2200      	movs	r2, #0
 8008bdc:	2180      	movs	r1, #128	; 0x80
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f003 fe46 	bl	800c870 <VL53L0X_WrByte>
 8008be4:	4603      	mov	r3, r0
 8008be6:	461a      	mov	r2, r3
 8008be8:	7dfb      	ldrb	r3, [r7, #23]
 8008bea:	4313      	orrs	r3, r2
 8008bec:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8008bee:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3718      	adds	r7, #24
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
 8008bfa:	bf00      	nop
 8008bfc:	20000104 	.word	0x20000104

08008c00 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b086      	sub	sp, #24
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8008c10:	f107 030e 	add.w	r3, r7, #14
 8008c14:	4619      	mov	r1, r3
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f7ff fb20 	bl	800825c <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	2180      	movs	r1, #128	; 0x80
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f003 fe25 	bl	800c870 <VL53L0X_WrByte>
 8008c26:	4603      	mov	r3, r0
 8008c28:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	21ff      	movs	r1, #255	; 0xff
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f003 fe1e 	bl	800c870 <VL53L0X_WrByte>
 8008c34:	4603      	mov	r3, r0
 8008c36:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008c38:	2200      	movs	r2, #0
 8008c3a:	2100      	movs	r1, #0
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f003 fe17 	bl	800c870 <VL53L0X_WrByte>
 8008c42:	4603      	mov	r3, r0
 8008c44:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	2191      	movs	r1, #145	; 0x91
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f003 fe0d 	bl	800c870 <VL53L0X_WrByte>
 8008c56:	4603      	mov	r3, r0
 8008c58:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	2100      	movs	r1, #0
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f003 fe06 	bl	800c870 <VL53L0X_WrByte>
 8008c64:	4603      	mov	r3, r0
 8008c66:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008c68:	2200      	movs	r2, #0
 8008c6a:	21ff      	movs	r1, #255	; 0xff
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f003 fdff 	bl	800c870 <VL53L0X_WrByte>
 8008c72:	4603      	mov	r3, r0
 8008c74:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8008c76:	2200      	movs	r2, #0
 8008c78:	2180      	movs	r1, #128	; 0x80
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f003 fdf8 	bl	800c870 <VL53L0X_WrByte>
 8008c80:	4603      	mov	r3, r0
 8008c82:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8008c84:	7bbb      	ldrb	r3, [r7, #14]
 8008c86:	2b03      	cmp	r3, #3
 8008c88:	d054      	beq.n	8008d34 <VL53L0X_StartMeasurement+0x134>
 8008c8a:	2b03      	cmp	r3, #3
 8008c8c:	dc6c      	bgt.n	8008d68 <VL53L0X_StartMeasurement+0x168>
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d002      	beq.n	8008c98 <VL53L0X_StartMeasurement+0x98>
 8008c92:	2b01      	cmp	r3, #1
 8008c94:	d034      	beq.n	8008d00 <VL53L0X_StartMeasurement+0x100>
 8008c96:	e067      	b.n	8008d68 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8008c98:	2201      	movs	r2, #1
 8008c9a:	2100      	movs	r1, #0
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f003 fde7 	bl	800c870 <VL53L0X_WrByte>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8008ca6:	7bfb      	ldrb	r3, [r7, #15]
 8008ca8:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8008caa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d15d      	bne.n	8008d6e <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d008      	beq.n	8008cce <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8008cbc:	f107 030d 	add.w	r3, r7, #13
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	2100      	movs	r1, #0
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f003 fe55 	bl	800c974 <VL53L0X_RdByte>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	3301      	adds	r3, #1
 8008cd2:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8008cd4:	7b7a      	ldrb	r2, [r7, #13]
 8008cd6:	7bfb      	ldrb	r3, [r7, #15]
 8008cd8:	4013      	ands	r3, r2
 8008cda:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8008cdc:	7bfa      	ldrb	r2, [r7, #15]
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	d107      	bne.n	8008cf2 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 8008ce2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d103      	bne.n	8008cf2 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008cf0:	d3e1      	bcc.n	8008cb6 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008cf8:	d339      	bcc.n	8008d6e <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 8008cfa:	23f9      	movs	r3, #249	; 0xf9
 8008cfc:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8008cfe:	e036      	b.n	8008d6e <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8008d00:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d105      	bne.n	8008d14 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8008d08:	2101      	movs	r1, #1
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f7ff ff12 	bl	8008b34 <VL53L0X_CheckAndLoadInterruptSettings>
 8008d10:	4603      	mov	r3, r0
 8008d12:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8008d14:	2202      	movs	r2, #2
 8008d16:	2100      	movs	r1, #0
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f003 fda9 	bl	800c870 <VL53L0X_WrByte>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8008d22:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d123      	bne.n	8008d72 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2204      	movs	r2, #4
 8008d2e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8008d32:	e01e      	b.n	8008d72 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8008d34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d105      	bne.n	8008d48 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8008d3c:	2101      	movs	r1, #1
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f7ff fef8 	bl	8008b34 <VL53L0X_CheckAndLoadInterruptSettings>
 8008d44:	4603      	mov	r3, r0
 8008d46:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8008d48:	2204      	movs	r2, #4
 8008d4a:	2100      	movs	r1, #0
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f003 fd8f 	bl	800c870 <VL53L0X_WrByte>
 8008d52:	4603      	mov	r3, r0
 8008d54:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8008d56:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d10b      	bne.n	8008d76 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2204      	movs	r2, #4
 8008d62:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8008d66:	e006      	b.n	8008d76 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8008d68:	23f8      	movs	r3, #248	; 0xf8
 8008d6a:	75fb      	strb	r3, [r7, #23]
 8008d6c:	e004      	b.n	8008d78 <VL53L0X_StartMeasurement+0x178>
		break;
 8008d6e:	bf00      	nop
 8008d70:	e002      	b.n	8008d78 <VL53L0X_StartMeasurement+0x178>
		break;
 8008d72:	bf00      	nop
 8008d74:	e000      	b.n	8008d78 <VL53L0X_StartMeasurement+0x178>
		break;
 8008d76:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8008d78:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3718      	adds	r7, #24
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b084      	sub	sp, #16
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8008d98:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8008d9a:	7bbb      	ldrb	r3, [r7, #14]
 8008d9c:	2b04      	cmp	r3, #4
 8008d9e:	d112      	bne.n	8008dc6 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8008da0:	f107 0308 	add.w	r3, r7, #8
 8008da4:	4619      	mov	r1, r3
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 fb1a 	bl	80093e0 <VL53L0X_GetInterruptMaskStatus>
 8008dac:	4603      	mov	r3, r0
 8008dae:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	2b04      	cmp	r3, #4
 8008db4:	d103      	bne.n	8008dbe <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	2201      	movs	r2, #1
 8008dba:	701a      	strb	r2, [r3, #0]
 8008dbc:	e01c      	b.n	8008df8 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	701a      	strb	r2, [r3, #0]
 8008dc4:	e018      	b.n	8008df8 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8008dc6:	f107 030d 	add.w	r3, r7, #13
 8008dca:	461a      	mov	r2, r3
 8008dcc:	2114      	movs	r1, #20
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f003 fdd0 	bl	800c974 <VL53L0X_RdByte>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8008dd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d10b      	bne.n	8008df8 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8008de0:	7b7b      	ldrb	r3, [r7, #13]
 8008de2:	f003 0301 	and.w	r3, r3, #1
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d003      	beq.n	8008df2 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	2201      	movs	r2, #1
 8008dee:	701a      	strb	r2, [r3, #0]
 8008df0:	e002      	b.n	8008df8 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	2200      	movs	r2, #0
 8008df6:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008df8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3710      	adds	r7, #16
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8008e04:	b5b0      	push	{r4, r5, r7, lr}
 8008e06:	b096      	sub	sp, #88	; 0x58
 8008e08:	af02      	add	r7, sp, #8
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8008e14:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008e18:	230c      	movs	r3, #12
 8008e1a:	2114      	movs	r1, #20
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f003 fcfb 	bl	800c818 <VL53L0X_ReadMulti>
 8008e22:	4603      	mov	r3, r0
 8008e24:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8008e28:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	f040 80d1 	bne.w	8008fd4 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	2200      	movs	r2, #0
 8008e36:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8008e3e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008e42:	b29b      	uxth	r3, r3
 8008e44:	021b      	lsls	r3, r3, #8
 8008e46:	b29a      	uxth	r2, r3
 8008e48:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	4413      	add	r3, r2
 8008e50:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	2200      	movs	r2, #0
 8008e58:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8008e5a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	021b      	lsls	r3, r3, #8
 8008e62:	b29a      	uxth	r2, r3
 8008e64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008e68:	b29b      	uxth	r3, r3
 8008e6a:	4413      	add	r3, r2
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	025b      	lsls	r3, r3, #9
 8008e70:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e76:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8008e78:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	021b      	lsls	r3, r3, #8
 8008e80:	b29a      	uxth	r2, r3
 8008e82:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8008e86:	b29b      	uxth	r3, r3
 8008e88:	4413      	add	r3, r2
 8008e8a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8008e8e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008e92:	025b      	lsls	r3, r3, #9
 8008e94:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8008e9a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	021b      	lsls	r3, r3, #8
 8008ea2:	b29a      	uxth	r2, r3
 8008ea4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	4413      	add	r3, r2
 8008eac:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8008eb6:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8008eb8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008ebc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8008ec6:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8008ece:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8008ed2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008ed4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ed8:	d046      	beq.n	8008f68 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8008eda:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008edc:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8008ee0:	fb02 f303 	mul.w	r3, r2, r3
 8008ee4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008ee8:	4a57      	ldr	r2, [pc, #348]	; (8009048 <VL53L0X_GetRangingMeasurementData+0x244>)
 8008eea:	fb82 1203 	smull	r1, r2, r2, r3
 8008eee:	1192      	asrs	r2, r2, #6
 8008ef0:	17db      	asrs	r3, r3, #31
 8008ef2:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8008ef4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6a1b      	ldr	r3, [r3, #32]
 8008efc:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	7f1b      	ldrb	r3, [r3, #28]
 8008f02:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8008f06:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d02c      	beq.n	8008f68 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8008f0e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008f10:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8008f14:	fb02 f303 	mul.w	r3, r2, r3
 8008f18:	121a      	asrs	r2, r3, #8
					<= 0) {
 8008f1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	d10d      	bne.n	8008f3c <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8008f20:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d004      	beq.n	8008f32 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8008f28:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8008f2c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008f30:	e016      	b.n	8008f60 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 8008f32:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8008f36:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008f3a:	e011      	b.n	8008f60 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8008f3c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008f40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008f42:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8008f46:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008f48:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8008f4c:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8008f50:	121b      	asrs	r3, r3, #8
 8008f52:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8008f54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f56:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8008f58:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8008f5c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8008f60:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008f64:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8008f68:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d00d      	beq.n	8008f8c <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8008f70:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008f74:	089b      	lsrs	r3, r3, #2
 8008f76:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8008f7c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008f80:	b2db      	uxtb	r3, r3
 8008f82:	019b      	lsls	r3, r3, #6
 8008f84:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	75da      	strb	r2, [r3, #23]
 8008f8a:	e006      	b.n	8008f9a <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8008f92:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	2200      	movs	r2, #0
 8008f98:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8008f9a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8008f9e:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8008fa2:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8008fa6:	9301      	str	r3, [sp, #4]
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	9300      	str	r3, [sp, #0]
 8008fac:	4613      	mov	r3, r2
 8008fae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f003 f9e5 	bl	800c380 <VL53L0X_get_pal_range_status>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	461a      	mov	r2, r3
 8008fba:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8008fc4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d103      	bne.n	8008fd4 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8008fcc:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008fd4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d12f      	bne.n	800903c <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f107 040c 	add.w	r4, r7, #12
 8008fe2:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8008fe6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008fe8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008fea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008fee:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8008ff6:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8008ffc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8009004:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800900a:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8009010:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8009016:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800901c:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8009022:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f103 0450 	add.w	r4, r3, #80	; 0x50
 800902c:	f107 050c 	add.w	r5, r7, #12
 8009030:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009032:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009034:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009038:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800903c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8009040:	4618      	mov	r0, r3
 8009042:	3750      	adds	r7, #80	; 0x50
 8009044:	46bd      	mov	sp, r7
 8009046:	bdb0      	pop	{r4, r5, r7, pc}
 8009048:	10624dd3 	.word	0x10624dd3

0800904c <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009056:	2300      	movs	r3, #0
 8009058:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800905a:	2100      	movs	r1, #0
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f7ff f8d1 	bl	8008204 <VL53L0X_SetDeviceMode>
 8009062:	4603      	mov	r3, r0
 8009064:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8009066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d104      	bne.n	8009078 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f7ff fd16 	bl	8008aa0 <VL53L0X_PerformSingleMeasurement>
 8009074:	4603      	mov	r3, r0
 8009076:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8009078:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d105      	bne.n	800908c <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8009080:	6839      	ldr	r1, [r7, #0]
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f7ff febe 	bl	8008e04 <VL53L0X_GetRangingMeasurementData>
 8009088:	4603      	mov	r3, r0
 800908a:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 800908c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d105      	bne.n	80090a0 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8009094:	2100      	movs	r1, #0
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 f962 	bl	8009360 <VL53L0X_ClearInterruptMask>
 800909c:	4603      	mov	r3, r0
 800909e:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 80090a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3710      	adds	r7, #16
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}

080090ac <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	4608      	mov	r0, r1
 80090b6:	4611      	mov	r1, r2
 80090b8:	461a      	mov	r2, r3
 80090ba:	4603      	mov	r3, r0
 80090bc:	70fb      	strb	r3, [r7, #3]
 80090be:	460b      	mov	r3, r1
 80090c0:	70bb      	strb	r3, [r7, #2]
 80090c2:	4613      	mov	r3, r2
 80090c4:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80090c6:	2300      	movs	r3, #0
 80090c8:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 80090ca:	78fb      	ldrb	r3, [r7, #3]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d002      	beq.n	80090d6 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 80090d0:	23f6      	movs	r3, #246	; 0xf6
 80090d2:	73fb      	strb	r3, [r7, #15]
 80090d4:	e107      	b.n	80092e6 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 80090d6:	78bb      	ldrb	r3, [r7, #2]
 80090d8:	2b14      	cmp	r3, #20
 80090da:	d110      	bne.n	80090fe <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80090dc:	7e3b      	ldrb	r3, [r7, #24]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d102      	bne.n	80090e8 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 80090e2:	2310      	movs	r3, #16
 80090e4:	73bb      	strb	r3, [r7, #14]
 80090e6:	e001      	b.n	80090ec <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 80090e8:	2301      	movs	r3, #1
 80090ea:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 80090ec:	7bbb      	ldrb	r3, [r7, #14]
 80090ee:	461a      	mov	r2, r3
 80090f0:	2184      	movs	r1, #132	; 0x84
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f003 fbbc 	bl	800c870 <VL53L0X_WrByte>
 80090f8:	4603      	mov	r3, r0
 80090fa:	73fb      	strb	r3, [r7, #15]
 80090fc:	e0f3      	b.n	80092e6 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 80090fe:	78bb      	ldrb	r3, [r7, #2]
 8009100:	2b15      	cmp	r3, #21
 8009102:	f040 8097 	bne.w	8009234 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009106:	2201      	movs	r2, #1
 8009108:	21ff      	movs	r1, #255	; 0xff
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f003 fbb0 	bl	800c870 <VL53L0X_WrByte>
 8009110:	4603      	mov	r3, r0
 8009112:	461a      	mov	r2, r3
 8009114:	7bfb      	ldrb	r3, [r7, #15]
 8009116:	4313      	orrs	r3, r2
 8009118:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800911a:	2200      	movs	r2, #0
 800911c:	2100      	movs	r1, #0
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f003 fba6 	bl	800c870 <VL53L0X_WrByte>
 8009124:	4603      	mov	r3, r0
 8009126:	461a      	mov	r2, r3
 8009128:	7bfb      	ldrb	r3, [r7, #15]
 800912a:	4313      	orrs	r3, r2
 800912c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800912e:	2200      	movs	r2, #0
 8009130:	21ff      	movs	r1, #255	; 0xff
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f003 fb9c 	bl	800c870 <VL53L0X_WrByte>
 8009138:	4603      	mov	r3, r0
 800913a:	461a      	mov	r2, r3
 800913c:	7bfb      	ldrb	r3, [r7, #15]
 800913e:	4313      	orrs	r3, r2
 8009140:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009142:	2201      	movs	r2, #1
 8009144:	2180      	movs	r1, #128	; 0x80
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f003 fb92 	bl	800c870 <VL53L0X_WrByte>
 800914c:	4603      	mov	r3, r0
 800914e:	461a      	mov	r2, r3
 8009150:	7bfb      	ldrb	r3, [r7, #15]
 8009152:	4313      	orrs	r3, r2
 8009154:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8009156:	2202      	movs	r2, #2
 8009158:	2185      	movs	r1, #133	; 0x85
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f003 fb88 	bl	800c870 <VL53L0X_WrByte>
 8009160:	4603      	mov	r3, r0
 8009162:	461a      	mov	r2, r3
 8009164:	7bfb      	ldrb	r3, [r7, #15]
 8009166:	4313      	orrs	r3, r2
 8009168:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800916a:	2204      	movs	r2, #4
 800916c:	21ff      	movs	r1, #255	; 0xff
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f003 fb7e 	bl	800c870 <VL53L0X_WrByte>
 8009174:	4603      	mov	r3, r0
 8009176:	461a      	mov	r2, r3
 8009178:	7bfb      	ldrb	r3, [r7, #15]
 800917a:	4313      	orrs	r3, r2
 800917c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800917e:	2200      	movs	r2, #0
 8009180:	21cd      	movs	r1, #205	; 0xcd
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f003 fb74 	bl	800c870 <VL53L0X_WrByte>
 8009188:	4603      	mov	r3, r0
 800918a:	461a      	mov	r2, r3
 800918c:	7bfb      	ldrb	r3, [r7, #15]
 800918e:	4313      	orrs	r3, r2
 8009190:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8009192:	2211      	movs	r2, #17
 8009194:	21cc      	movs	r1, #204	; 0xcc
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f003 fb6a 	bl	800c870 <VL53L0X_WrByte>
 800919c:	4603      	mov	r3, r0
 800919e:	461a      	mov	r2, r3
 80091a0:	7bfb      	ldrb	r3, [r7, #15]
 80091a2:	4313      	orrs	r3, r2
 80091a4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 80091a6:	2207      	movs	r2, #7
 80091a8:	21ff      	movs	r1, #255	; 0xff
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f003 fb60 	bl	800c870 <VL53L0X_WrByte>
 80091b0:	4603      	mov	r3, r0
 80091b2:	461a      	mov	r2, r3
 80091b4:	7bfb      	ldrb	r3, [r7, #15]
 80091b6:	4313      	orrs	r3, r2
 80091b8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 80091ba:	2200      	movs	r2, #0
 80091bc:	21be      	movs	r1, #190	; 0xbe
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f003 fb56 	bl	800c870 <VL53L0X_WrByte>
 80091c4:	4603      	mov	r3, r0
 80091c6:	461a      	mov	r2, r3
 80091c8:	7bfb      	ldrb	r3, [r7, #15]
 80091ca:	4313      	orrs	r3, r2
 80091cc:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 80091ce:	2206      	movs	r2, #6
 80091d0:	21ff      	movs	r1, #255	; 0xff
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f003 fb4c 	bl	800c870 <VL53L0X_WrByte>
 80091d8:	4603      	mov	r3, r0
 80091da:	461a      	mov	r2, r3
 80091dc:	7bfb      	ldrb	r3, [r7, #15]
 80091de:	4313      	orrs	r3, r2
 80091e0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 80091e2:	2209      	movs	r2, #9
 80091e4:	21cc      	movs	r1, #204	; 0xcc
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f003 fb42 	bl	800c870 <VL53L0X_WrByte>
 80091ec:	4603      	mov	r3, r0
 80091ee:	461a      	mov	r2, r3
 80091f0:	7bfb      	ldrb	r3, [r7, #15]
 80091f2:	4313      	orrs	r3, r2
 80091f4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80091f6:	2200      	movs	r2, #0
 80091f8:	21ff      	movs	r1, #255	; 0xff
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f003 fb38 	bl	800c870 <VL53L0X_WrByte>
 8009200:	4603      	mov	r3, r0
 8009202:	461a      	mov	r2, r3
 8009204:	7bfb      	ldrb	r3, [r7, #15]
 8009206:	4313      	orrs	r3, r2
 8009208:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800920a:	2201      	movs	r2, #1
 800920c:	21ff      	movs	r1, #255	; 0xff
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f003 fb2e 	bl	800c870 <VL53L0X_WrByte>
 8009214:	4603      	mov	r3, r0
 8009216:	461a      	mov	r2, r3
 8009218:	7bfb      	ldrb	r3, [r7, #15]
 800921a:	4313      	orrs	r3, r2
 800921c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800921e:	2200      	movs	r2, #0
 8009220:	2100      	movs	r1, #0
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f003 fb24 	bl	800c870 <VL53L0X_WrByte>
 8009228:	4603      	mov	r3, r0
 800922a:	461a      	mov	r2, r3
 800922c:	7bfb      	ldrb	r3, [r7, #15]
 800922e:	4313      	orrs	r3, r2
 8009230:	73fb      	strb	r3, [r7, #15]
 8009232:	e058      	b.n	80092e6 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8009234:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d121      	bne.n	8009280 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 800923c:	787b      	ldrb	r3, [r7, #1]
 800923e:	2b04      	cmp	r3, #4
 8009240:	d81b      	bhi.n	800927a <VL53L0X_SetGpioConfig+0x1ce>
 8009242:	a201      	add	r2, pc, #4	; (adr r2, 8009248 <VL53L0X_SetGpioConfig+0x19c>)
 8009244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009248:	0800925d 	.word	0x0800925d
 800924c:	08009263 	.word	0x08009263
 8009250:	08009269 	.word	0x08009269
 8009254:	0800926f 	.word	0x0800926f
 8009258:	08009275 	.word	0x08009275
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 800925c:	2300      	movs	r3, #0
 800925e:	73bb      	strb	r3, [r7, #14]
				break;
 8009260:	e00f      	b.n	8009282 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8009262:	2301      	movs	r3, #1
 8009264:	73bb      	strb	r3, [r7, #14]
				break;
 8009266:	e00c      	b.n	8009282 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8009268:	2302      	movs	r3, #2
 800926a:	73bb      	strb	r3, [r7, #14]
				break;
 800926c:	e009      	b.n	8009282 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800926e:	2303      	movs	r3, #3
 8009270:	73bb      	strb	r3, [r7, #14]
				break;
 8009272:	e006      	b.n	8009282 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8009274:	2304      	movs	r3, #4
 8009276:	73bb      	strb	r3, [r7, #14]
				break;
 8009278:	e003      	b.n	8009282 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 800927a:	23f5      	movs	r3, #245	; 0xf5
 800927c:	73fb      	strb	r3, [r7, #15]
 800927e:	e000      	b.n	8009282 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8009280:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 8009282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d107      	bne.n	800929a <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 800928a:	7bbb      	ldrb	r3, [r7, #14]
 800928c:	461a      	mov	r2, r3
 800928e:	210a      	movs	r1, #10
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f003 faed 	bl	800c870 <VL53L0X_WrByte>
 8009296:	4603      	mov	r3, r0
 8009298:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800929a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d10f      	bne.n	80092c2 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80092a2:	7e3b      	ldrb	r3, [r7, #24]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d102      	bne.n	80092ae <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 80092a8:	2300      	movs	r3, #0
 80092aa:	73bb      	strb	r3, [r7, #14]
 80092ac:	e001      	b.n	80092b2 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 80092ae:	2310      	movs	r3, #16
 80092b0:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 80092b2:	7bbb      	ldrb	r3, [r7, #14]
 80092b4:	22ef      	movs	r2, #239	; 0xef
 80092b6:	2184      	movs	r1, #132	; 0x84
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f003 fb27 	bl	800c90c <VL53L0X_UpdateByte>
 80092be:	4603      	mov	r3, r0
 80092c0:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 80092c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d103      	bne.n	80092d2 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	787a      	ldrb	r2, [r7, #1]
 80092ce:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 80092d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d105      	bne.n	80092e6 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80092da:	2100      	movs	r1, #0
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f000 f83f 	bl	8009360 <VL53L0X_ClearInterruptMask>
 80092e2:	4603      	mov	r3, r0
 80092e4:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 80092e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3710      	adds	r7, #16
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}
 80092f2:	bf00      	nop

080092f4 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b086      	sub	sp, #24
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	60f8      	str	r0, [r7, #12]
 80092fc:	607a      	str	r2, [r7, #4]
 80092fe:	603b      	str	r3, [r7, #0]
 8009300:	460b      	mov	r3, r1
 8009302:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009304:	2300      	movs	r3, #0
 8009306:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8009308:	f107 0314 	add.w	r3, r7, #20
 800930c:	461a      	mov	r2, r3
 800930e:	210e      	movs	r1, #14
 8009310:	68f8      	ldr	r0, [r7, #12]
 8009312:	f003 fb59 	bl	800c9c8 <VL53L0X_RdWord>
 8009316:	4603      	mov	r3, r0
 8009318:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800931a:	8abb      	ldrh	r3, [r7, #20]
 800931c:	045b      	lsls	r3, r3, #17
 800931e:	461a      	mov	r2, r3
 8009320:	4b0e      	ldr	r3, [pc, #56]	; (800935c <VL53L0X_GetInterruptThresholds+0x68>)
 8009322:	4013      	ands	r3, r2
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8009328:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d10f      	bne.n	8009350 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8009330:	f107 0314 	add.w	r3, r7, #20
 8009334:	461a      	mov	r2, r3
 8009336:	210c      	movs	r1, #12
 8009338:	68f8      	ldr	r0, [r7, #12]
 800933a:	f003 fb45 	bl	800c9c8 <VL53L0X_RdWord>
 800933e:	4603      	mov	r3, r0
 8009340:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8009342:	8abb      	ldrh	r3, [r7, #20]
 8009344:	045b      	lsls	r3, r3, #17
 8009346:	461a      	mov	r2, r3
 8009348:	4b04      	ldr	r3, [pc, #16]	; (800935c <VL53L0X_GetInterruptThresholds+0x68>)
 800934a:	4013      	ands	r3, r2
		*pThresholdHigh =
 800934c:	683a      	ldr	r2, [r7, #0]
 800934e:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009350:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009354:	4618      	mov	r0, r3
 8009356:	3718      	adds	r7, #24
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}
 800935c:	1ffe0000 	.word	0x1ffe0000

08009360 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b084      	sub	sp, #16
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800936a:	2300      	movs	r3, #0
 800936c:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800936e:	2300      	movs	r3, #0
 8009370:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8009372:	2201      	movs	r2, #1
 8009374:	210b      	movs	r1, #11
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f003 fa7a 	bl	800c870 <VL53L0X_WrByte>
 800937c:	4603      	mov	r3, r0
 800937e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8009380:	2200      	movs	r2, #0
 8009382:	210b      	movs	r1, #11
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f003 fa73 	bl	800c870 <VL53L0X_WrByte>
 800938a:	4603      	mov	r3, r0
 800938c:	461a      	mov	r2, r3
 800938e:	7bfb      	ldrb	r3, [r7, #15]
 8009390:	4313      	orrs	r3, r2
 8009392:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8009394:	f107 030d 	add.w	r3, r7, #13
 8009398:	461a      	mov	r2, r3
 800939a:	2113      	movs	r1, #19
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f003 fae9 	bl	800c974 <VL53L0X_RdByte>
 80093a2:	4603      	mov	r3, r0
 80093a4:	461a      	mov	r2, r3
 80093a6:	7bfb      	ldrb	r3, [r7, #15]
 80093a8:	4313      	orrs	r3, r2
 80093aa:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 80093ac:	7bbb      	ldrb	r3, [r7, #14]
 80093ae:	3301      	adds	r3, #1
 80093b0:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 80093b2:	7b7b      	ldrb	r3, [r7, #13]
 80093b4:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d006      	beq.n	80093ca <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 80093bc:	7bbb      	ldrb	r3, [r7, #14]
 80093be:	2b02      	cmp	r3, #2
 80093c0:	d803      	bhi.n	80093ca <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 80093c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d0d3      	beq.n	8009372 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 80093ca:	7bbb      	ldrb	r3, [r7, #14]
 80093cc:	2b02      	cmp	r3, #2
 80093ce:	d901      	bls.n	80093d4 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 80093d0:	23f4      	movs	r3, #244	; 0xf4
 80093d2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80093d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3710      	adds	r7, #16
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}

080093e0 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b084      	sub	sp, #16
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80093ea:	2300      	movs	r3, #0
 80093ec:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 80093ee:	f107 030e 	add.w	r3, r7, #14
 80093f2:	461a      	mov	r2, r3
 80093f4:	2113      	movs	r1, #19
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f003 fabc 	bl	800c974 <VL53L0X_RdByte>
 80093fc:	4603      	mov	r3, r0
 80093fe:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8009400:	7bbb      	ldrb	r3, [r7, #14]
 8009402:	f003 0207 	and.w	r2, r3, #7
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800940a:	7bbb      	ldrb	r3, [r7, #14]
 800940c:	f003 0318 	and.w	r3, r3, #24
 8009410:	2b00      	cmp	r3, #0
 8009412:	d001      	beq.n	8009418 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8009414:	23fa      	movs	r3, #250	; 0xfa
 8009416:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8009418:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800941c:	4618      	mov	r0, r3
 800941e:	3710      	adds	r7, #16
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b086      	sub	sp, #24
 8009428:	af00      	add	r7, sp, #0
 800942a:	60f8      	str	r0, [r7, #12]
 800942c:	60b9      	str	r1, [r7, #8]
 800942e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009430:	2300      	movs	r3, #0
 8009432:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8009434:	687a      	ldr	r2, [r7, #4]
 8009436:	68b9      	ldr	r1, [r7, #8]
 8009438:	68f8      	ldr	r0, [r7, #12]
 800943a:	f000 fa03 	bl	8009844 <VL53L0X_perform_ref_spad_management>
 800943e:	4603      	mov	r3, r0
 8009440:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8009442:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009446:	4618      	mov	r0, r3
 8009448:	3718      	adds	r7, #24
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}

0800944e <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800944e:	b580      	push	{r7, lr}
 8009450:	b084      	sub	sp, #16
 8009452:	af00      	add	r7, sp, #0
 8009454:	6078      	str	r0, [r7, #4]
 8009456:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009458:	2300      	movs	r3, #0
 800945a:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 800945c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8009460:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8009462:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009466:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8009468:	f107 0308 	add.w	r3, r7, #8
 800946c:	461a      	mov	r2, r3
 800946e:	2128      	movs	r1, #40	; 0x28
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f003 faa9 	bl	800c9c8 <VL53L0X_RdWord>
 8009476:	4603      	mov	r3, r0
 8009478:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800947a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d11e      	bne.n	80094c0 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8009482:	893b      	ldrh	r3, [r7, #8]
 8009484:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009488:	b29b      	uxth	r3, r3
 800948a:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800948c:	893b      	ldrh	r3, [r7, #8]
 800948e:	461a      	mov	r2, r3
 8009490:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009494:	429a      	cmp	r2, r3
 8009496:	dd0b      	ble.n	80094b0 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8009498:	893a      	ldrh	r2, [r7, #8]
 800949a:	897b      	ldrh	r3, [r7, #10]
 800949c:	1ad3      	subs	r3, r2, r3
 800949e:	b29b      	uxth	r3, r3
 80094a0:	b21b      	sxth	r3, r3
 80094a2:	461a      	mov	r2, r3
					* 250;
 80094a4:	23fa      	movs	r3, #250	; 0xfa
 80094a6:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	601a      	str	r2, [r3, #0]
 80094ae:	e007      	b.n	80094c0 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 80094b0:	893b      	ldrh	r3, [r7, #8]
 80094b2:	b21b      	sxth	r3, r3
 80094b4:	461a      	mov	r2, r3
 80094b6:	23fa      	movs	r3, #250	; 0xfa
 80094b8:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	601a      	str	r2, [r3, #0]

	}

	return Status;
 80094c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3710      	adds	r7, #16
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b08b      	sub	sp, #44	; 0x2c
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	60f8      	str	r0, [r7, #12]
 80094d4:	60b9      	str	r1, [r7, #8]
 80094d6:	607a      	str	r2, [r7, #4]
 80094d8:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 80094da:	2308      	movs	r3, #8
 80094dc:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 80094de:	2300      	movs	r3, #0
 80094e0:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	f04f 32ff 	mov.w	r2, #4294967295
 80094e8:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 80094ea:	687a      	ldr	r2, [r7, #4]
 80094ec:	69bb      	ldr	r3, [r7, #24]
 80094ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80094f2:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	69ba      	ldr	r2, [r7, #24]
 80094f8:	fbb3 f2f2 	udiv	r2, r3, r2
 80094fc:	69b9      	ldr	r1, [r7, #24]
 80094fe:	fb01 f202 	mul.w	r2, r1, r2
 8009502:	1a9b      	subs	r3, r3, r2
 8009504:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	627b      	str	r3, [r7, #36]	; 0x24
 800950a:	e030      	b.n	800956e <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 800950c:	2300      	movs	r3, #0
 800950e:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8009510:	68fa      	ldr	r2, [r7, #12]
 8009512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009514:	4413      	add	r3, r2
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800951a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	429a      	cmp	r2, r3
 8009520:	d11e      	bne.n	8009560 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8009522:	7ffa      	ldrb	r2, [r7, #31]
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	fa42 f303 	asr.w	r3, r2, r3
 800952a:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 800952c:	693b      	ldr	r3, [r7, #16]
 800952e:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8009530:	e016      	b.n	8009560 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8009532:	7ffb      	ldrb	r3, [r7, #31]
 8009534:	f003 0301 	and.w	r3, r3, #1
 8009538:	2b00      	cmp	r3, #0
 800953a:	d00b      	beq.n	8009554 <get_next_good_spad+0x88>
				success = 1;
 800953c:	2301      	movs	r3, #1
 800953e:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8009540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009542:	69ba      	ldr	r2, [r7, #24]
 8009544:	fb03 f202 	mul.w	r2, r3, r2
 8009548:	6a3b      	ldr	r3, [r7, #32]
 800954a:	4413      	add	r3, r2
 800954c:	461a      	mov	r2, r3
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	601a      	str	r2, [r3, #0]
				break;
 8009552:	e009      	b.n	8009568 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8009554:	7ffb      	ldrb	r3, [r7, #31]
 8009556:	085b      	lsrs	r3, r3, #1
 8009558:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800955a:	6a3b      	ldr	r3, [r7, #32]
 800955c:	3301      	adds	r3, #1
 800955e:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8009560:	6a3a      	ldr	r2, [r7, #32]
 8009562:	69bb      	ldr	r3, [r7, #24]
 8009564:	429a      	cmp	r2, r3
 8009566:	d3e4      	bcc.n	8009532 <get_next_good_spad+0x66>
				coarseIndex++) {
 8009568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800956a:	3301      	adds	r3, #1
 800956c:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800956e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	429a      	cmp	r2, r3
 8009574:	d202      	bcs.n	800957c <get_next_good_spad+0xb0>
 8009576:	7fbb      	ldrb	r3, [r7, #30]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d0c7      	beq.n	800950c <get_next_good_spad+0x40>
		}
	}
}
 800957c:	bf00      	nop
 800957e:	372c      	adds	r7, #44	; 0x2c
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr

08009588 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8009588:	b480      	push	{r7}
 800958a:	b085      	sub	sp, #20
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8009590:	2301      	movs	r3, #1
 8009592:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	099b      	lsrs	r3, r3, #6
 8009598:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800959a:	4a07      	ldr	r2, [pc, #28]	; (80095b8 <is_aperture+0x30>)
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d101      	bne.n	80095aa <is_aperture+0x22>
		isAperture = 0;
 80095a6:	2300      	movs	r3, #0
 80095a8:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 80095aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3714      	adds	r7, #20
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr
 80095b8:	200002bc 	.word	0x200002bc

080095bc <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 80095bc:	b480      	push	{r7}
 80095be:	b089      	sub	sp, #36	; 0x24
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	60f8      	str	r0, [r7, #12]
 80095c4:	60b9      	str	r1, [r7, #8]
 80095c6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80095c8:	2300      	movs	r3, #0
 80095ca:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 80095cc:	2308      	movs	r3, #8
 80095ce:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 80095d0:	687a      	ldr	r2, [r7, #4]
 80095d2:	69bb      	ldr	r3, [r7, #24]
 80095d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80095d8:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	69ba      	ldr	r2, [r7, #24]
 80095de:	fbb3 f2f2 	udiv	r2, r3, r2
 80095e2:	69b9      	ldr	r1, [r7, #24]
 80095e4:	fb01 f202 	mul.w	r2, r1, r2
 80095e8:	1a9b      	subs	r3, r3, r2
 80095ea:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 80095ec:	697a      	ldr	r2, [r7, #20]
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d302      	bcc.n	80095fa <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 80095f4:	23ce      	movs	r3, #206	; 0xce
 80095f6:	77fb      	strb	r3, [r7, #31]
 80095f8:	e010      	b.n	800961c <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 80095fa:	68fa      	ldr	r2, [r7, #12]
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	4413      	add	r3, r2
 8009600:	781b      	ldrb	r3, [r3, #0]
 8009602:	b25a      	sxtb	r2, r3
 8009604:	2101      	movs	r1, #1
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	fa01 f303 	lsl.w	r3, r1, r3
 800960c:	b25b      	sxtb	r3, r3
 800960e:	4313      	orrs	r3, r2
 8009610:	b259      	sxtb	r1, r3
 8009612:	68fa      	ldr	r2, [r7, #12]
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	4413      	add	r3, r2
 8009618:	b2ca      	uxtb	r2, r1
 800961a:	701a      	strb	r2, [r3, #0]

	return status;
 800961c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009620:	4618      	mov	r0, r3
 8009622:	3724      	adds	r7, #36	; 0x24
 8009624:	46bd      	mov	sp, r7
 8009626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962a:	4770      	bx	lr

0800962c <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b084      	sub	sp, #16
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8009636:	2306      	movs	r3, #6
 8009638:	683a      	ldr	r2, [r7, #0]
 800963a:	21b0      	movs	r1, #176	; 0xb0
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f003 f8bb 	bl	800c7b8 <VL53L0X_WriteMulti>
 8009642:	4603      	mov	r3, r0
 8009644:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8009646:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800964a:	4618      	mov	r0, r3
 800964c:	3710      	adds	r7, #16
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}

08009652 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8009652:	b580      	push	{r7, lr}
 8009654:	b084      	sub	sp, #16
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
 800965a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 800965c:	2306      	movs	r3, #6
 800965e:	683a      	ldr	r2, [r7, #0]
 8009660:	21b0      	movs	r1, #176	; 0xb0
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f003 f8d8 	bl	800c818 <VL53L0X_ReadMulti>
 8009668:	4603      	mov	r3, r0
 800966a:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 800966c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009670:	4618      	mov	r0, r3
 8009672:	3710      	adds	r7, #16
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b08c      	sub	sp, #48	; 0x30
 800967c:	af00      	add	r7, sp, #0
 800967e:	60f8      	str	r0, [r7, #12]
 8009680:	607a      	str	r2, [r7, #4]
 8009682:	603b      	str	r3, [r7, #0]
 8009684:	460b      	mov	r3, r1
 8009686:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8009688:	2300      	movs	r3, #0
 800968a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800968e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009690:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8009692:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009694:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8009696:	2300      	movs	r3, #0
 8009698:	62bb      	str	r3, [r7, #40]	; 0x28
 800969a:	e02b      	b.n	80096f4 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 800969c:	f107 031c 	add.w	r3, r7, #28
 80096a0:	6a3a      	ldr	r2, [r7, #32]
 80096a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f7ff ff11 	bl	80094cc <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 80096aa:	69fb      	ldr	r3, [r7, #28]
 80096ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096b0:	d103      	bne.n	80096ba <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80096b2:	23ce      	movs	r3, #206	; 0xce
 80096b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 80096b8:	e020      	b.n	80096fc <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 80096ba:	69fb      	ldr	r3, [r7, #28]
 80096bc:	461a      	mov	r2, r3
 80096be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096c0:	4413      	add	r3, r2
 80096c2:	4618      	mov	r0, r3
 80096c4:	f7ff ff60 	bl	8009588 <is_aperture>
 80096c8:	4603      	mov	r3, r0
 80096ca:	461a      	mov	r2, r3
 80096cc:	7afb      	ldrb	r3, [r7, #11]
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d003      	beq.n	80096da <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80096d2:	23ce      	movs	r3, #206	; 0xce
 80096d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 80096d8:	e010      	b.n	80096fc <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 80096da:	69fb      	ldr	r3, [r7, #28]
 80096dc:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 80096de:	6a3a      	ldr	r2, [r7, #32]
 80096e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80096e2:	6838      	ldr	r0, [r7, #0]
 80096e4:	f7ff ff6a 	bl	80095bc <enable_spad_bit>
		currentSpad++;
 80096e8:	6a3b      	ldr	r3, [r7, #32]
 80096ea:	3301      	adds	r3, #1
 80096ec:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80096ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096f0:	3301      	adds	r3, #1
 80096f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80096f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d3cf      	bcc.n	800969c <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 80096fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096fe:	6a3a      	ldr	r2, [r7, #32]
 8009700:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8009702:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009706:	2b00      	cmp	r3, #0
 8009708:	d106      	bne.n	8009718 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800970a:	6839      	ldr	r1, [r7, #0]
 800970c:	68f8      	ldr	r0, [r7, #12]
 800970e:	f7ff ff8d 	bl	800962c <set_ref_spad_map>
 8009712:	4603      	mov	r3, r0
 8009714:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8009718:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800971c:	2b00      	cmp	r3, #0
 800971e:	d121      	bne.n	8009764 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8009720:	f107 0314 	add.w	r3, r7, #20
 8009724:	4619      	mov	r1, r3
 8009726:	68f8      	ldr	r0, [r7, #12]
 8009728:	f7ff ff93 	bl	8009652 <get_ref_spad_map>
 800972c:	4603      	mov	r3, r0
 800972e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8009732:	2300      	movs	r3, #0
 8009734:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8009736:	e011      	b.n	800975c <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8009738:	683a      	ldr	r2, [r7, #0]
 800973a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800973c:	4413      	add	r3, r2
 800973e:	781a      	ldrb	r2, [r3, #0]
 8009740:	f107 0114 	add.w	r1, r7, #20
 8009744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009746:	440b      	add	r3, r1
 8009748:	781b      	ldrb	r3, [r3, #0]
 800974a:	429a      	cmp	r2, r3
 800974c:	d003      	beq.n	8009756 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800974e:	23ce      	movs	r3, #206	; 0xce
 8009750:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8009754:	e006      	b.n	8009764 <enable_ref_spads+0xec>
			}
			i++;
 8009756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009758:	3301      	adds	r3, #1
 800975a:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 800975c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800975e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009760:	429a      	cmp	r2, r3
 8009762:	d3e9      	bcc.n	8009738 <enable_ref_spads+0xc0>
		}
	}
	return status;
 8009764:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009768:	4618      	mov	r0, r3
 800976a:	3730      	adds	r7, #48	; 0x30
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}

08009770 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b08a      	sub	sp, #40	; 0x28
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
 8009778:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800977a:	2300      	movs	r3, #0
 800977c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8009780:	2300      	movs	r3, #0
 8009782:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800978c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8009790:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009794:	2b00      	cmp	r3, #0
 8009796:	d107      	bne.n	80097a8 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8009798:	22c0      	movs	r2, #192	; 0xc0
 800979a:	2101      	movs	r1, #1
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f003 f867 	bl	800c870 <VL53L0X_WrByte>
 80097a2:	4603      	mov	r3, r0
 80097a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 80097a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d108      	bne.n	80097c2 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 80097b0:	f107 0308 	add.w	r3, r7, #8
 80097b4:	4619      	mov	r1, r3
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f7ff fc48 	bl	800904c <VL53L0X_PerformSingleRangingMeasurement>
 80097bc:	4603      	mov	r3, r0
 80097be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 80097c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d107      	bne.n	80097da <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80097ca:	2201      	movs	r2, #1
 80097cc:	21ff      	movs	r1, #255	; 0xff
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f003 f84e 	bl	800c870 <VL53L0X_WrByte>
 80097d4:	4603      	mov	r3, r0
 80097d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 80097da:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d107      	bne.n	80097f2 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 80097e2:	683a      	ldr	r2, [r7, #0]
 80097e4:	21b6      	movs	r1, #182	; 0xb6
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f003 f8ee 	bl	800c9c8 <VL53L0X_RdWord>
 80097ec:	4603      	mov	r3, r0
 80097ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 80097f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d107      	bne.n	800980a <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80097fa:	2200      	movs	r2, #0
 80097fc:	21ff      	movs	r1, #255	; 0xff
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f003 f836 	bl	800c870 <VL53L0X_WrByte>
 8009804:	4603      	mov	r3, r0
 8009806:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800980a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800980e:	2b00      	cmp	r3, #0
 8009810:	d112      	bne.n	8009838 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009812:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009816:	461a      	mov	r2, r3
 8009818:	2101      	movs	r1, #1
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f003 f828 	bl	800c870 <VL53L0X_WrByte>
 8009820:	4603      	mov	r3, r0
 8009822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8009826:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800982a:	2b00      	cmp	r3, #0
 800982c:	d104      	bne.n	8009838 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009834:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8009838:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800983c:	4618      	mov	r0, r3
 800983e:	3728      	adds	r7, #40	; 0x28
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8009844:	b590      	push	{r4, r7, lr}
 8009846:	b09d      	sub	sp, #116	; 0x74
 8009848:	af06      	add	r7, sp, #24
 800984a:	60f8      	str	r0, [r7, #12]
 800984c:	60b9      	str	r1, [r7, #8]
 800984e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009850:	2300      	movs	r3, #0
 8009852:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8009856:	23b4      	movs	r3, #180	; 0xb4
 8009858:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 800985c:	2303      	movs	r3, #3
 800985e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8009860:	232c      	movs	r3, #44	; 0x2c
 8009862:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8009864:	2300      	movs	r3, #0
 8009866:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8009868:	2300      	movs	r3, #0
 800986a:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 800986c:	2300      	movs	r3, #0
 800986e:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8009870:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8009874:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8009876:	2300      	movs	r3, #0
 8009878:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800987a:	2300      	movs	r3, #0
 800987c:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800987e:	2306      	movs	r3, #6
 8009880:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8009882:	2300      	movs	r3, #0
 8009884:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8009886:	2300      	movs	r3, #0
 8009888:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 800988a:	2300      	movs	r3, #0
 800988c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8009890:	2300      	movs	r3, #0
 8009892:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8009894:	2300      	movs	r3, #0
 8009896:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8009898:	2300      	movs	r3, #0
 800989a:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800989c:	2300      	movs	r3, #0
 800989e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 80098a8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 80098aa:	2300      	movs	r3, #0
 80098ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80098ae:	e009      	b.n	80098c4 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80098b0:	68fa      	ldr	r2, [r7, #12]
 80098b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098b4:	4413      	add	r3, r2
 80098b6:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80098ba:	2200      	movs	r2, #0
 80098bc:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 80098be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098c0:	3301      	adds	r3, #1
 80098c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80098c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80098c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c8:	429a      	cmp	r2, r3
 80098ca:	d3f1      	bcc.n	80098b0 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80098cc:	2201      	movs	r2, #1
 80098ce:	21ff      	movs	r1, #255	; 0xff
 80098d0:	68f8      	ldr	r0, [r7, #12]
 80098d2:	f002 ffcd 	bl	800c870 <VL53L0X_WrByte>
 80098d6:	4603      	mov	r3, r0
 80098d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80098dc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d107      	bne.n	80098f4 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 80098e4:	2200      	movs	r2, #0
 80098e6:	214f      	movs	r1, #79	; 0x4f
 80098e8:	68f8      	ldr	r0, [r7, #12]
 80098ea:	f002 ffc1 	bl	800c870 <VL53L0X_WrByte>
 80098ee:	4603      	mov	r3, r0
 80098f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 80098f4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d107      	bne.n	800990c <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 80098fc:	222c      	movs	r2, #44	; 0x2c
 80098fe:	214e      	movs	r1, #78	; 0x4e
 8009900:	68f8      	ldr	r0, [r7, #12]
 8009902:	f002 ffb5 	bl	800c870 <VL53L0X_WrByte>
 8009906:	4603      	mov	r3, r0
 8009908:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800990c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009910:	2b00      	cmp	r3, #0
 8009912:	d107      	bne.n	8009924 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009914:	2200      	movs	r2, #0
 8009916:	21ff      	movs	r1, #255	; 0xff
 8009918:	68f8      	ldr	r0, [r7, #12]
 800991a:	f002 ffa9 	bl	800c870 <VL53L0X_WrByte>
 800991e:	4603      	mov	r3, r0
 8009920:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8009924:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009928:	2b00      	cmp	r3, #0
 800992a:	d109      	bne.n	8009940 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 800992c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8009930:	461a      	mov	r2, r3
 8009932:	21b6      	movs	r1, #182	; 0xb6
 8009934:	68f8      	ldr	r0, [r7, #12]
 8009936:	f002 ff9b 	bl	800c870 <VL53L0X_WrByte>
 800993a:	4603      	mov	r3, r0
 800993c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8009940:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009944:	2b00      	cmp	r3, #0
 8009946:	d107      	bne.n	8009958 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8009948:	2200      	movs	r2, #0
 800994a:	2180      	movs	r1, #128	; 0x80
 800994c:	68f8      	ldr	r0, [r7, #12]
 800994e:	f002 ff8f 	bl	800c870 <VL53L0X_WrByte>
 8009952:	4603      	mov	r3, r0
 8009954:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8009958:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800995c:	2b00      	cmp	r3, #0
 800995e:	d10a      	bne.n	8009976 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8009960:	f107 0210 	add.w	r2, r7, #16
 8009964:	f107 0111 	add.w	r1, r7, #17
 8009968:	2300      	movs	r3, #0
 800996a:	68f8      	ldr	r0, [r7, #12]
 800996c:	f000 fbbb 	bl	800a0e6 <VL53L0X_perform_ref_calibration>
 8009970:	4603      	mov	r3, r0
 8009972:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8009976:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800997a:	2b00      	cmp	r3, #0
 800997c:	d121      	bne.n	80099c2 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800997e:	2300      	movs	r3, #0
 8009980:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8009982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009984:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8009986:	2300      	movs	r3, #0
 8009988:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800998a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800998c:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 800999a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800999e:	f107 0218 	add.w	r2, r7, #24
 80099a2:	9204      	str	r2, [sp, #16]
 80099a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80099a6:	9203      	str	r2, [sp, #12]
 80099a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80099aa:	9202      	str	r2, [sp, #8]
 80099ac:	9301      	str	r3, [sp, #4]
 80099ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b0:	9300      	str	r3, [sp, #0]
 80099b2:	4623      	mov	r3, r4
 80099b4:	4602      	mov	r2, r0
 80099b6:	68f8      	ldr	r0, [r7, #12]
 80099b8:	f7ff fe5e 	bl	8009678 <enable_ref_spads>
 80099bc:	4603      	mov	r3, r0
 80099be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80099c2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d174      	bne.n	8009ab4 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 80099ca:	69bb      	ldr	r3, [r7, #24]
 80099cc:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 80099ce:	f107 0312 	add.w	r3, r7, #18
 80099d2:	4619      	mov	r1, r3
 80099d4:	68f8      	ldr	r0, [r7, #12]
 80099d6:	f7ff fecb 	bl	8009770 <perform_ref_signal_measurement>
 80099da:	4603      	mov	r3, r0
 80099dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 80099e0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d161      	bne.n	8009aac <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 80099e8:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 80099ea:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d25d      	bcs.n	8009aac <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 80099f0:	2300      	movs	r3, #0
 80099f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80099f4:	e009      	b.n	8009a0a <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80099f6:	68fa      	ldr	r2, [r7, #12]
 80099f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099fa:	4413      	add	r3, r2
 80099fc:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8009a00:	2200      	movs	r2, #0
 8009a02:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8009a04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a06:	3301      	adds	r3, #1
 8009a08:	64bb      	str	r3, [r7, #72]	; 0x48
 8009a0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a0e:	429a      	cmp	r2, r3
 8009a10:	d3f1      	bcc.n	80099f6 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8009a12:	e002      	b.n	8009a1a <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8009a14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a16:	3301      	adds	r3, #1
 8009a18:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8009a1a:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8009a1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a20:	4413      	add	r3, r2
 8009a22:	4618      	mov	r0, r3
 8009a24:	f7ff fdb0 	bl	8009588 <is_aperture>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d103      	bne.n	8009a36 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8009a2e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d3ee      	bcc.n	8009a14 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8009a36:	2301      	movs	r3, #1
 8009a38:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8009a3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a3c:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8009a4a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8009a4e:	f107 0218 	add.w	r2, r7, #24
 8009a52:	9204      	str	r2, [sp, #16]
 8009a54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a56:	9203      	str	r2, [sp, #12]
 8009a58:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009a5a:	9202      	str	r2, [sp, #8]
 8009a5c:	9301      	str	r3, [sp, #4]
 8009a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a60:	9300      	str	r3, [sp, #0]
 8009a62:	4623      	mov	r3, r4
 8009a64:	4602      	mov	r2, r0
 8009a66:	68f8      	ldr	r0, [r7, #12]
 8009a68:	f7ff fe06 	bl	8009678 <enable_ref_spads>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8009a72:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d11b      	bne.n	8009ab2 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8009a7a:	69bb      	ldr	r3, [r7, #24]
 8009a7c:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8009a7e:	f107 0312 	add.w	r3, r7, #18
 8009a82:	4619      	mov	r1, r3
 8009a84:	68f8      	ldr	r0, [r7, #12]
 8009a86:	f7ff fe73 	bl	8009770 <perform_ref_signal_measurement>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8009a90:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d10c      	bne.n	8009ab2 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8009a98:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8009a9a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	d208      	bcs.n	8009ab2 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8009aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8009aaa:	e002      	b.n	8009ab2 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8009aac:	2300      	movs	r3, #0
 8009aae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ab0:	e000      	b.n	8009ab4 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8009ab2:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8009ab4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	f040 80af 	bne.w	8009c1c <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8009abe:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8009ac0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	f240 80aa 	bls.w	8009c1c <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8009ac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009aca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8009ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ad0:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8009ad8:	f107 031c 	add.w	r3, r7, #28
 8009adc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f003 f81a 	bl	800cb18 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8009ae4:	8a7b      	ldrh	r3, [r7, #18]
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009aea:	1ad3      	subs	r3, r2, r3
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	bfb8      	it	lt
 8009af0:	425b      	neglt	r3, r3
 8009af2:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8009af4:	2300      	movs	r3, #0
 8009af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8009afa:	e086      	b.n	8009c0a <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8009b02:	f107 0314 	add.w	r3, r7, #20
 8009b06:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009b08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b0a:	f7ff fcdf 	bl	80094cc <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b14:	d103      	bne.n	8009b1e <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8009b16:	23ce      	movs	r3, #206	; 0xce
 8009b18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8009b1c:	e07e      	b.n	8009c1c <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8009b1e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8009b22:	697a      	ldr	r2, [r7, #20]
 8009b24:	4413      	add	r3, r2
 8009b26:	4618      	mov	r0, r3
 8009b28:	f7ff fd2e 	bl	8009588 <is_aperture>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	461a      	mov	r2, r3
 8009b30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d003      	beq.n	8009b3e <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8009b36:	2301      	movs	r3, #1
 8009b38:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8009b3c:	e06e      	b.n	8009c1c <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8009b3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b40:	3301      	adds	r3, #1
 8009b42:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8009b4e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009b50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b52:	4618      	mov	r0, r3
 8009b54:	f7ff fd32 	bl	80095bc <enable_spad_bit>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8009b5e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d10c      	bne.n	8009b80 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8009b66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b68:	3301      	adds	r3, #1
 8009b6a:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8009b72:	4619      	mov	r1, r3
 8009b74:	68f8      	ldr	r0, [r7, #12]
 8009b76:	f7ff fd59 	bl	800962c <set_ref_spad_map>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8009b80:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d146      	bne.n	8009c16 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8009b88:	f107 0312 	add.w	r3, r7, #18
 8009b8c:	4619      	mov	r1, r3
 8009b8e:	68f8      	ldr	r0, [r7, #12]
 8009b90:	f7ff fdee 	bl	8009770 <perform_ref_signal_measurement>
 8009b94:	4603      	mov	r3, r0
 8009b96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8009b9a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d13b      	bne.n	8009c1a <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8009ba2:	8a7b      	ldrh	r3, [r7, #18]
 8009ba4:	461a      	mov	r2, r3
 8009ba6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009ba8:	1ad3      	subs	r3, r2, r3
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	bfb8      	it	lt
 8009bae:	425b      	neglt	r3, r3
 8009bb0:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8009bb2:	8a7b      	ldrh	r3, [r7, #18]
 8009bb4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009bb6:	429a      	cmp	r2, r3
 8009bb8:	d21c      	bcs.n	8009bf4 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8009bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bbe:	429a      	cmp	r2, r3
 8009bc0:	d914      	bls.n	8009bec <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8009bc2:	f107 031c 	add.w	r3, r7, #28
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	68f8      	ldr	r0, [r7, #12]
 8009bca:	f7ff fd2f 	bl	800962c <set_ref_spad_map>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8009bda:	f107 011c 	add.w	r1, r7, #28
 8009bde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009be0:	4618      	mov	r0, r3
 8009be2:	f002 ff99 	bl	800cb18 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8009be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009be8:	3b01      	subs	r3, #1
 8009bea:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8009bec:	2301      	movs	r3, #1
 8009bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bf2:	e00a      	b.n	8009c0a <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8009bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf6:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8009bfe:	f107 031c 	add.w	r3, r7, #28
 8009c02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c04:	4618      	mov	r0, r3
 8009c06:	f002 ff87 	bl	800cb18 <memcpy>
		while (!complete) {
 8009c0a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	f43f af74 	beq.w	8009afc <VL53L0X_perform_ref_spad_management+0x2b8>
 8009c14:	e002      	b.n	8009c1c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8009c16:	bf00      	nop
 8009c18:	e000      	b.n	8009c1c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8009c1a:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009c1c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d115      	bne.n	8009c50 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009c28:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8009c30:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	2201      	movs	r2, #1
 8009c36:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	b2da      	uxtb	r2, r3
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	781a      	ldrb	r2, [r3, #0]
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8009c50:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	375c      	adds	r7, #92	; 0x5c
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd90      	pop	{r4, r7, pc}

08009c5c <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8009c5c:	b590      	push	{r4, r7, lr}
 8009c5e:	b093      	sub	sp, #76	; 0x4c
 8009c60:	af06      	add	r7, sp, #24
 8009c62:	60f8      	str	r0, [r7, #12]
 8009c64:	60b9      	str	r1, [r7, #8]
 8009c66:	4613      	mov	r3, r2
 8009c68:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8009c70:	2300      	movs	r3, #0
 8009c72:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8009c74:	23b4      	movs	r3, #180	; 0xb4
 8009c76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8009c7a:	2306      	movs	r3, #6
 8009c7c:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8009c7e:	232c      	movs	r3, #44	; 0x2c
 8009c80:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009c82:	2201      	movs	r2, #1
 8009c84:	21ff      	movs	r1, #255	; 0xff
 8009c86:	68f8      	ldr	r0, [r7, #12]
 8009c88:	f002 fdf2 	bl	800c870 <VL53L0X_WrByte>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8009c92:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d107      	bne.n	8009caa <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	214f      	movs	r1, #79	; 0x4f
 8009c9e:	68f8      	ldr	r0, [r7, #12]
 8009ca0:	f002 fde6 	bl	800c870 <VL53L0X_WrByte>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8009caa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d107      	bne.n	8009cc2 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8009cb2:	222c      	movs	r2, #44	; 0x2c
 8009cb4:	214e      	movs	r1, #78	; 0x4e
 8009cb6:	68f8      	ldr	r0, [r7, #12]
 8009cb8:	f002 fdda 	bl	800c870 <VL53L0X_WrByte>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8009cc2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d107      	bne.n	8009cda <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009cca:	2200      	movs	r2, #0
 8009ccc:	21ff      	movs	r1, #255	; 0xff
 8009cce:	68f8      	ldr	r0, [r7, #12]
 8009cd0:	f002 fdce 	bl	800c870 <VL53L0X_WrByte>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8009cda:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d109      	bne.n	8009cf6 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8009ce2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009ce6:	461a      	mov	r2, r3
 8009ce8:	21b6      	movs	r1, #182	; 0xb6
 8009cea:	68f8      	ldr	r0, [r7, #12]
 8009cec:	f002 fdc0 	bl	800c870 <VL53L0X_WrByte>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8009cfa:	e009      	b.n	8009d10 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8009cfc:	68fa      	ldr	r2, [r7, #12]
 8009cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d00:	4413      	add	r3, r2
 8009d02:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8009d06:	2200      	movs	r2, #0
 8009d08:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8009d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0c:	3301      	adds	r3, #1
 8009d0e:	627b      	str	r3, [r7, #36]	; 0x24
 8009d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d12:	69fb      	ldr	r3, [r7, #28]
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d3f1      	bcc.n	8009cfc <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8009d18:	79fb      	ldrb	r3, [r7, #7]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d011      	beq.n	8009d42 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8009d1e:	e002      	b.n	8009d26 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8009d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d22:	3301      	adds	r3, #1
 8009d24:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8009d26:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8009d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d2c:	4413      	add	r3, r2
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f7ff fc2a 	bl	8009588 <is_aperture>
 8009d34:	4603      	mov	r3, r0
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d103      	bne.n	8009d42 <VL53L0X_set_reference_spads+0xe6>
 8009d3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d3c:	69bb      	ldr	r3, [r7, #24]
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	d3ee      	bcc.n	8009d20 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8009d4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009d52:	79f9      	ldrb	r1, [r7, #7]
 8009d54:	f107 0214 	add.w	r2, r7, #20
 8009d58:	9204      	str	r2, [sp, #16]
 8009d5a:	68ba      	ldr	r2, [r7, #8]
 8009d5c:	9203      	str	r2, [sp, #12]
 8009d5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d60:	9202      	str	r2, [sp, #8]
 8009d62:	9301      	str	r3, [sp, #4]
 8009d64:	69fb      	ldr	r3, [r7, #28]
 8009d66:	9300      	str	r3, [sp, #0]
 8009d68:	4623      	mov	r3, r4
 8009d6a:	4602      	mov	r2, r0
 8009d6c:	68f8      	ldr	r0, [r7, #12]
 8009d6e:	f7ff fc83 	bl	8009678 <enable_ref_spads>
 8009d72:	4603      	mov	r3, r0
 8009d74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8009d78:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d10c      	bne.n	8009d9a <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	2201      	movs	r2, #1
 8009d84:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	b2da      	uxtb	r2, r3
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	79fa      	ldrb	r2, [r7, #7]
 8009d96:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8009d9a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3734      	adds	r7, #52	; 0x34
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd90      	pop	{r4, r7, pc}

08009da6 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8009da6:	b580      	push	{r7, lr}
 8009da8:	b084      	sub	sp, #16
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	6078      	str	r0, [r7, #4]
 8009dae:	460b      	mov	r3, r1
 8009db0:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009db2:	2300      	movs	r3, #0
 8009db4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8009db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d10a      	bne.n	8009dd4 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8009dbe:	78fb      	ldrb	r3, [r7, #3]
 8009dc0:	f043 0301 	orr.w	r3, r3, #1
 8009dc4:	b2db      	uxtb	r3, r3
 8009dc6:	461a      	mov	r2, r3
 8009dc8:	2100      	movs	r1, #0
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f002 fd50 	bl	800c870 <VL53L0X_WrByte>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8009dd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d104      	bne.n	8009de6 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f000 f9bf 	bl	800a160 <VL53L0X_measurement_poll_for_completion>
 8009de2:	4603      	mov	r3, r0
 8009de4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8009de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d105      	bne.n	8009dfa <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8009dee:	2100      	movs	r1, #0
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f7ff fab5 	bl	8009360 <VL53L0X_ClearInterruptMask>
 8009df6:	4603      	mov	r3, r0
 8009df8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8009dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d106      	bne.n	8009e10 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8009e02:	2200      	movs	r2, #0
 8009e04:	2100      	movs	r1, #0
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f002 fd32 	bl	800c870 <VL53L0X_WrByte>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	73fb      	strb	r3, [r7, #15]

	return Status;
 8009e10:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3710      	adds	r7, #16
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}

08009e1c <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b084      	sub	sp, #16
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	4608      	mov	r0, r1
 8009e26:	4611      	mov	r1, r2
 8009e28:	461a      	mov	r2, r3
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	70fb      	strb	r3, [r7, #3]
 8009e2e:	460b      	mov	r3, r1
 8009e30:	70bb      	strb	r3, [r7, #2]
 8009e32:	4613      	mov	r3, r2
 8009e34:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009e36:	2300      	movs	r3, #0
 8009e38:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009e3e:	2201      	movs	r2, #1
 8009e40:	21ff      	movs	r1, #255	; 0xff
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f002 fd14 	bl	800c870 <VL53L0X_WrByte>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	7bfb      	ldrb	r3, [r7, #15]
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8009e52:	2200      	movs	r2, #0
 8009e54:	2100      	movs	r1, #0
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f002 fd0a 	bl	800c870 <VL53L0X_WrByte>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	461a      	mov	r2, r3
 8009e60:	7bfb      	ldrb	r3, [r7, #15]
 8009e62:	4313      	orrs	r3, r2
 8009e64:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009e66:	2200      	movs	r2, #0
 8009e68:	21ff      	movs	r1, #255	; 0xff
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f002 fd00 	bl	800c870 <VL53L0X_WrByte>
 8009e70:	4603      	mov	r3, r0
 8009e72:	461a      	mov	r2, r3
 8009e74:	7bfb      	ldrb	r3, [r7, #15]
 8009e76:	4313      	orrs	r3, r2
 8009e78:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8009e7a:	78fb      	ldrb	r3, [r7, #3]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d01e      	beq.n	8009ebe <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8009e80:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d009      	beq.n	8009e9c <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8009e88:	69ba      	ldr	r2, [r7, #24]
 8009e8a:	21cb      	movs	r1, #203	; 0xcb
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f002 fd71 	bl	800c974 <VL53L0X_RdByte>
 8009e92:	4603      	mov	r3, r0
 8009e94:	461a      	mov	r2, r3
 8009e96:	7bfb      	ldrb	r3, [r7, #15]
 8009e98:	4313      	orrs	r3, r2
 8009e9a:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8009e9c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d02a      	beq.n	8009efa <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8009ea4:	f107 030e 	add.w	r3, r7, #14
 8009ea8:	461a      	mov	r2, r3
 8009eaa:	21ee      	movs	r1, #238	; 0xee
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f002 fd61 	bl	800c974 <VL53L0X_RdByte>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	461a      	mov	r2, r3
 8009eb6:	7bfb      	ldrb	r3, [r7, #15]
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	73fb      	strb	r3, [r7, #15]
 8009ebc:	e01d      	b.n	8009efa <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8009ebe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d00a      	beq.n	8009edc <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8009ec6:	78bb      	ldrb	r3, [r7, #2]
 8009ec8:	461a      	mov	r2, r3
 8009eca:	21cb      	movs	r1, #203	; 0xcb
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f002 fccf 	bl	800c870 <VL53L0X_WrByte>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	461a      	mov	r2, r3
 8009ed6:	7bfb      	ldrb	r3, [r7, #15]
 8009ed8:	4313      	orrs	r3, r2
 8009eda:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8009edc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d00a      	beq.n	8009efa <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8009ee4:	787b      	ldrb	r3, [r7, #1]
 8009ee6:	2280      	movs	r2, #128	; 0x80
 8009ee8:	21ee      	movs	r1, #238	; 0xee
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f002 fd0e 	bl	800c90c <VL53L0X_UpdateByte>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	461a      	mov	r2, r3
 8009ef4:	7bfb      	ldrb	r3, [r7, #15]
 8009ef6:	4313      	orrs	r3, r2
 8009ef8:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009efa:	2201      	movs	r2, #1
 8009efc:	21ff      	movs	r1, #255	; 0xff
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f002 fcb6 	bl	800c870 <VL53L0X_WrByte>
 8009f04:	4603      	mov	r3, r0
 8009f06:	461a      	mov	r2, r3
 8009f08:	7bfb      	ldrb	r3, [r7, #15]
 8009f0a:	4313      	orrs	r3, r2
 8009f0c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8009f0e:	2201      	movs	r2, #1
 8009f10:	2100      	movs	r1, #0
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f002 fcac 	bl	800c870 <VL53L0X_WrByte>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	461a      	mov	r2, r3
 8009f1c:	7bfb      	ldrb	r3, [r7, #15]
 8009f1e:	4313      	orrs	r3, r2
 8009f20:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009f22:	2200      	movs	r2, #0
 8009f24:	21ff      	movs	r1, #255	; 0xff
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f002 fca2 	bl	800c870 <VL53L0X_WrByte>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	461a      	mov	r2, r3
 8009f30:	7bfb      	ldrb	r3, [r7, #15]
 8009f32:	4313      	orrs	r3, r2
 8009f34:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8009f36:	7bbb      	ldrb	r3, [r7, #14]
 8009f38:	f023 0310 	bic.w	r3, r3, #16
 8009f3c:	b2da      	uxtb	r2, r3
 8009f3e:	69fb      	ldr	r3, [r7, #28]
 8009f40:	701a      	strb	r2, [r3, #0]

	return Status;
 8009f42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	3710      	adds	r7, #16
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}

08009f4e <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8009f4e:	b580      	push	{r7, lr}
 8009f50:	b08a      	sub	sp, #40	; 0x28
 8009f52:	af04      	add	r7, sp, #16
 8009f54:	60f8      	str	r0, [r7, #12]
 8009f56:	60b9      	str	r1, [r7, #8]
 8009f58:	4611      	mov	r1, r2
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	460b      	mov	r3, r1
 8009f5e:	71fb      	strb	r3, [r7, #7]
 8009f60:	4613      	mov	r3, r2
 8009f62:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009f64:	2300      	movs	r3, #0
 8009f66:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8009f70:	2300      	movs	r3, #0
 8009f72:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8009f74:	2300      	movs	r3, #0
 8009f76:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8009f78:	79bb      	ldrb	r3, [r7, #6]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d003      	beq.n	8009f86 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8009f84:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8009f86:	2201      	movs	r2, #1
 8009f88:	2101      	movs	r1, #1
 8009f8a:	68f8      	ldr	r0, [r7, #12]
 8009f8c:	f002 fc70 	bl	800c870 <VL53L0X_WrByte>
 8009f90:	4603      	mov	r3, r0
 8009f92:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8009f94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d105      	bne.n	8009fa8 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8009f9c:	2140      	movs	r1, #64	; 0x40
 8009f9e:	68f8      	ldr	r0, [r7, #12]
 8009fa0:	f7ff ff01 	bl	8009da6 <VL53L0X_perform_single_ref_calibration>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8009fa8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d115      	bne.n	8009fdc <VL53L0X_perform_vhv_calibration+0x8e>
 8009fb0:	79fb      	ldrb	r3, [r7, #7]
 8009fb2:	2b01      	cmp	r3, #1
 8009fb4:	d112      	bne.n	8009fdc <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8009fb6:	7d39      	ldrb	r1, [r7, #20]
 8009fb8:	7d7a      	ldrb	r2, [r7, #21]
 8009fba:	2300      	movs	r3, #0
 8009fbc:	9303      	str	r3, [sp, #12]
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	9302      	str	r3, [sp, #8]
 8009fc2:	f107 0313 	add.w	r3, r7, #19
 8009fc6:	9301      	str	r3, [sp, #4]
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	9300      	str	r3, [sp, #0]
 8009fcc:	460b      	mov	r3, r1
 8009fce:	2101      	movs	r1, #1
 8009fd0:	68f8      	ldr	r0, [r7, #12]
 8009fd2:	f7ff ff23 	bl	8009e1c <VL53L0X_ref_calibration_io>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	75fb      	strb	r3, [r7, #23]
 8009fda:	e002      	b.n	8009fe2 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8009fe2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d112      	bne.n	800a010 <VL53L0X_perform_vhv_calibration+0xc2>
 8009fea:	79bb      	ldrb	r3, [r7, #6]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d00f      	beq.n	800a010 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009ff0:	7dbb      	ldrb	r3, [r7, #22]
 8009ff2:	461a      	mov	r2, r3
 8009ff4:	2101      	movs	r1, #1
 8009ff6:	68f8      	ldr	r0, [r7, #12]
 8009ff8:	f002 fc3a 	bl	800c870 <VL53L0X_WrByte>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800a000:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d103      	bne.n	800a010 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	7dba      	ldrb	r2, [r7, #22]
 800a00c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800a010:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a014:	4618      	mov	r0, r3
 800a016:	3718      	adds	r7, #24
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}

0800a01c <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b08a      	sub	sp, #40	; 0x28
 800a020:	af04      	add	r7, sp, #16
 800a022:	60f8      	str	r0, [r7, #12]
 800a024:	60b9      	str	r1, [r7, #8]
 800a026:	4611      	mov	r1, r2
 800a028:	461a      	mov	r2, r3
 800a02a:	460b      	mov	r3, r1
 800a02c:	71fb      	strb	r3, [r7, #7]
 800a02e:	4613      	mov	r3, r2
 800a030:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a032:	2300      	movs	r3, #0
 800a034:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800a036:	2300      	movs	r3, #0
 800a038:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800a03a:	2300      	movs	r3, #0
 800a03c:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800a03e:	2300      	movs	r3, #0
 800a040:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800a042:	79bb      	ldrb	r3, [r7, #6]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d003      	beq.n	800a050 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800a04e:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800a050:	2202      	movs	r2, #2
 800a052:	2101      	movs	r1, #1
 800a054:	68f8      	ldr	r0, [r7, #12]
 800a056:	f002 fc0b 	bl	800c870 <VL53L0X_WrByte>
 800a05a:	4603      	mov	r3, r0
 800a05c:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800a05e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d105      	bne.n	800a072 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800a066:	2100      	movs	r1, #0
 800a068:	68f8      	ldr	r0, [r7, #12]
 800a06a:	f7ff fe9c 	bl	8009da6 <VL53L0X_perform_single_ref_calibration>
 800a06e:	4603      	mov	r3, r0
 800a070:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800a072:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d115      	bne.n	800a0a6 <VL53L0X_perform_phase_calibration+0x8a>
 800a07a:	79fb      	ldrb	r3, [r7, #7]
 800a07c:	2b01      	cmp	r3, #1
 800a07e:	d112      	bne.n	800a0a6 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800a080:	7d39      	ldrb	r1, [r7, #20]
 800a082:	7d7a      	ldrb	r2, [r7, #21]
 800a084:	2301      	movs	r3, #1
 800a086:	9303      	str	r3, [sp, #12]
 800a088:	2300      	movs	r3, #0
 800a08a:	9302      	str	r3, [sp, #8]
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	9301      	str	r3, [sp, #4]
 800a090:	f107 0313 	add.w	r3, r7, #19
 800a094:	9300      	str	r3, [sp, #0]
 800a096:	460b      	mov	r3, r1
 800a098:	2101      	movs	r1, #1
 800a09a:	68f8      	ldr	r0, [r7, #12]
 800a09c:	f7ff febe 	bl	8009e1c <VL53L0X_ref_calibration_io>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	75fb      	strb	r3, [r7, #23]
 800a0a4:	e002      	b.n	800a0ac <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800a0ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d112      	bne.n	800a0da <VL53L0X_perform_phase_calibration+0xbe>
 800a0b4:	79bb      	ldrb	r3, [r7, #6]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d00f      	beq.n	800a0da <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a0ba:	7dbb      	ldrb	r3, [r7, #22]
 800a0bc:	461a      	mov	r2, r3
 800a0be:	2101      	movs	r1, #1
 800a0c0:	68f8      	ldr	r0, [r7, #12]
 800a0c2:	f002 fbd5 	bl	800c870 <VL53L0X_WrByte>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800a0ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d103      	bne.n	800a0da <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	7dba      	ldrb	r2, [r7, #22]
 800a0d6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800a0da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3718      	adds	r7, #24
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}

0800a0e6 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800a0e6:	b580      	push	{r7, lr}
 800a0e8:	b086      	sub	sp, #24
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	60f8      	str	r0, [r7, #12]
 800a0ee:	60b9      	str	r1, [r7, #8]
 800a0f0:	607a      	str	r2, [r7, #4]
 800a0f2:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800a102:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800a104:	78fa      	ldrb	r2, [r7, #3]
 800a106:	2300      	movs	r3, #0
 800a108:	68b9      	ldr	r1, [r7, #8]
 800a10a:	68f8      	ldr	r0, [r7, #12]
 800a10c:	f7ff ff1f 	bl	8009f4e <VL53L0X_perform_vhv_calibration>
 800a110:	4603      	mov	r3, r0
 800a112:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800a114:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d107      	bne.n	800a12c <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800a11c:	78fa      	ldrb	r2, [r7, #3]
 800a11e:	2300      	movs	r3, #0
 800a120:	6879      	ldr	r1, [r7, #4]
 800a122:	68f8      	ldr	r0, [r7, #12]
 800a124:	f7ff ff7a 	bl	800a01c <VL53L0X_perform_phase_calibration>
 800a128:	4603      	mov	r3, r0
 800a12a:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800a12c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d10f      	bne.n	800a154 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a134:	7dbb      	ldrb	r3, [r7, #22]
 800a136:	461a      	mov	r2, r3
 800a138:	2101      	movs	r1, #1
 800a13a:	68f8      	ldr	r0, [r7, #12]
 800a13c:	f002 fb98 	bl	800c870 <VL53L0X_WrByte>
 800a140:	4603      	mov	r3, r0
 800a142:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800a144:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d103      	bne.n	800a154 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	7dba      	ldrb	r2, [r7, #22]
 800a150:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800a154:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3718      	adds	r7, #24
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b086      	sub	sp, #24
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a168:	2300      	movs	r3, #0
 800a16a:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800a16c:	2300      	movs	r3, #0
 800a16e:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800a170:	2300      	movs	r3, #0
 800a172:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800a174:	f107 030f 	add.w	r3, r7, #15
 800a178:	4619      	mov	r1, r3
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f7fe fe02 	bl	8008d84 <VL53L0X_GetMeasurementDataReady>
 800a180:	4603      	mov	r3, r0
 800a182:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800a184:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d110      	bne.n	800a1ae <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800a18c:	7bfb      	ldrb	r3, [r7, #15]
 800a18e:	2b01      	cmp	r3, #1
 800a190:	d00f      	beq.n	800a1b2 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	3301      	adds	r3, #1
 800a196:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a19e:	d302      	bcc.n	800a1a6 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800a1a0:	23f9      	movs	r3, #249	; 0xf9
 800a1a2:	75fb      	strb	r3, [r7, #23]
			break;
 800a1a4:	e006      	b.n	800a1b4 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f002 fc82 	bl	800cab0 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800a1ac:	e7e2      	b.n	800a174 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800a1ae:	bf00      	nop
 800a1b0:	e000      	b.n	800a1b4 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800a1b2:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800a1b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3718      	adds	r7, #24
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}

0800a1c0 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b085      	sub	sp, #20
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800a1ce:	79fb      	ldrb	r3, [r7, #7]
 800a1d0:	3301      	adds	r3, #1
 800a1d2:	b2db      	uxtb	r3, r3
 800a1d4:	005b      	lsls	r3, r3, #1
 800a1d6:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800a1d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3714      	adds	r7, #20
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e4:	4770      	bx	lr

0800a1e6 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800a1e6:	b480      	push	{r7}
 800a1e8:	b085      	sub	sp, #20
 800a1ea:	af00      	add	r7, sp, #0
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 800a1f4:	79fb      	ldrb	r3, [r7, #7]
 800a1f6:	085b      	lsrs	r3, r3, #1
 800a1f8:	b2db      	uxtb	r3, r3
 800a1fa:	3b01      	subs	r3, #1
 800a1fc:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800a1fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800a200:	4618      	mov	r0, r3
 800a202:	3714      	adds	r7, #20
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr

0800a20c <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b085      	sub	sp, #20
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800a214:	2300      	movs	r3, #0
 800a216:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800a218:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a21c:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800a21e:	e002      	b.n	800a226 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	089b      	lsrs	r3, r3, #2
 800a224:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800a226:	68ba      	ldr	r2, [r7, #8]
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	429a      	cmp	r2, r3
 800a22c:	d8f8      	bhi.n	800a220 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800a22e:	e017      	b.n	800a260 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800a230:	68fa      	ldr	r2, [r7, #12]
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	4413      	add	r3, r2
 800a236:	687a      	ldr	r2, [r7, #4]
 800a238:	429a      	cmp	r2, r3
 800a23a:	d30b      	bcc.n	800a254 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800a23c:	68fa      	ldr	r2, [r7, #12]
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	4413      	add	r3, r2
 800a242:	687a      	ldr	r2, [r7, #4]
 800a244:	1ad3      	subs	r3, r2, r3
 800a246:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	085b      	lsrs	r3, r3, #1
 800a24c:	68ba      	ldr	r2, [r7, #8]
 800a24e:	4413      	add	r3, r2
 800a250:	60fb      	str	r3, [r7, #12]
 800a252:	e002      	b.n	800a25a <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	085b      	lsrs	r3, r3, #1
 800a258:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	089b      	lsrs	r3, r3, #2
 800a25e:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d1e4      	bne.n	800a230 <VL53L0X_isqrt+0x24>
	}

	return res;
 800a266:	68fb      	ldr	r3, [r7, #12]
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3714      	adds	r7, #20
 800a26c:	46bd      	mov	sp, r7
 800a26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a272:	4770      	bx	lr

0800a274 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b086      	sub	sp, #24
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a27c:	2300      	movs	r3, #0
 800a27e:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800a280:	2200      	movs	r2, #0
 800a282:	2183      	movs	r1, #131	; 0x83
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f002 faf3 	bl	800c870 <VL53L0X_WrByte>
 800a28a:	4603      	mov	r3, r0
 800a28c:	461a      	mov	r2, r3
 800a28e:	7dfb      	ldrb	r3, [r7, #23]
 800a290:	4313      	orrs	r3, r2
 800a292:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800a294:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d11e      	bne.n	800a2da <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 800a29c:	2300      	movs	r3, #0
 800a29e:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800a2a0:	f107 030f 	add.w	r3, r7, #15
 800a2a4:	461a      	mov	r2, r3
 800a2a6:	2183      	movs	r1, #131	; 0x83
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f002 fb63 	bl	800c974 <VL53L0X_RdByte>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800a2b2:	7bfb      	ldrb	r3, [r7, #15]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d10a      	bne.n	800a2ce <VL53L0X_device_read_strobe+0x5a>
 800a2b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d106      	bne.n	800a2ce <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	3301      	adds	r3, #1
 800a2c4:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a2cc:	d3e8      	bcc.n	800a2a0 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a2d4:	d301      	bcc.n	800a2da <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800a2d6:	23f9      	movs	r3, #249	; 0xf9
 800a2d8:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800a2da:	2201      	movs	r2, #1
 800a2dc:	2183      	movs	r1, #131	; 0x83
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f002 fac6 	bl	800c870 <VL53L0X_WrByte>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	461a      	mov	r2, r3
 800a2e8:	7dfb      	ldrb	r3, [r7, #23]
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800a2ee:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3718      	adds	r7, #24
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}

0800a2fa <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800a2fa:	b580      	push	{r7, lr}
 800a2fc:	b098      	sub	sp, #96	; 0x60
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	6078      	str	r0, [r7, #4]
 800a302:	460b      	mov	r3, r1
 800a304:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a306:	2300      	movs	r3, #0
 800a308:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800a30c:	2300      	movs	r3, #0
 800a30e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800a312:	2300      	movs	r3, #0
 800a314:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800a318:	2300      	movs	r3, #0
 800a31a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800a31c:	2300      	movs	r3, #0
 800a31e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800a320:	2300      	movs	r3, #0
 800a322:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800a324:	2300      	movs	r3, #0
 800a326:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800a32a:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800a32e:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800a330:	2300      	movs	r3, #0
 800a332:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800a334:	2300      	movs	r3, #0
 800a336:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800a338:	2300      	movs	r3, #0
 800a33a:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800a342:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800a346:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a34a:	2b07      	cmp	r3, #7
 800a34c:	f000 8408 	beq.w	800ab60 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800a350:	2201      	movs	r2, #1
 800a352:	2180      	movs	r1, #128	; 0x80
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f002 fa8b 	bl	800c870 <VL53L0X_WrByte>
 800a35a:	4603      	mov	r3, r0
 800a35c:	461a      	mov	r2, r3
 800a35e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a362:	4313      	orrs	r3, r2
 800a364:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a368:	2201      	movs	r2, #1
 800a36a:	21ff      	movs	r1, #255	; 0xff
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f002 fa7f 	bl	800c870 <VL53L0X_WrByte>
 800a372:	4603      	mov	r3, r0
 800a374:	461a      	mov	r2, r3
 800a376:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a37a:	4313      	orrs	r3, r2
 800a37c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a380:	2200      	movs	r2, #0
 800a382:	2100      	movs	r1, #0
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f002 fa73 	bl	800c870 <VL53L0X_WrByte>
 800a38a:	4603      	mov	r3, r0
 800a38c:	461a      	mov	r2, r3
 800a38e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a392:	4313      	orrs	r3, r2
 800a394:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800a398:	2206      	movs	r2, #6
 800a39a:	21ff      	movs	r1, #255	; 0xff
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f002 fa67 	bl	800c870 <VL53L0X_WrByte>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	461a      	mov	r2, r3
 800a3a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800a3b0:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800a3b4:	461a      	mov	r2, r3
 800a3b6:	2183      	movs	r1, #131	; 0x83
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f002 fadb 	bl	800c974 <VL53L0X_RdByte>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	461a      	mov	r2, r3
 800a3c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800a3cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a3d0:	f043 0304 	orr.w	r3, r3, #4
 800a3d4:	b2db      	uxtb	r3, r3
 800a3d6:	461a      	mov	r2, r3
 800a3d8:	2183      	movs	r1, #131	; 0x83
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f002 fa48 	bl	800c870 <VL53L0X_WrByte>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	461a      	mov	r2, r3
 800a3e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a3e8:	4313      	orrs	r3, r2
 800a3ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800a3ee:	2207      	movs	r2, #7
 800a3f0:	21ff      	movs	r1, #255	; 0xff
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f002 fa3c 	bl	800c870 <VL53L0X_WrByte>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	461a      	mov	r2, r3
 800a3fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a400:	4313      	orrs	r3, r2
 800a402:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800a406:	2201      	movs	r2, #1
 800a408:	2181      	movs	r1, #129	; 0x81
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f002 fa30 	bl	800c870 <VL53L0X_WrByte>
 800a410:	4603      	mov	r3, r0
 800a412:	461a      	mov	r2, r3
 800a414:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a418:	4313      	orrs	r3, r2
 800a41a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f002 fb46 	bl	800cab0 <VL53L0X_PollingDelay>
 800a424:	4603      	mov	r3, r0
 800a426:	461a      	mov	r2, r3
 800a428:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a42c:	4313      	orrs	r3, r2
 800a42e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800a432:	2201      	movs	r2, #1
 800a434:	2180      	movs	r1, #128	; 0x80
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f002 fa1a 	bl	800c870 <VL53L0X_WrByte>
 800a43c:	4603      	mov	r3, r0
 800a43e:	461a      	mov	r2, r3
 800a440:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a444:	4313      	orrs	r3, r2
 800a446:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800a44a:	78fb      	ldrb	r3, [r7, #3]
 800a44c:	f003 0301 	and.w	r3, r3, #1
 800a450:	2b00      	cmp	r3, #0
 800a452:	f000 8098 	beq.w	800a586 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800a456:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a45a:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800a45e:	2b00      	cmp	r3, #0
 800a460:	f040 8091 	bne.w	800a586 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800a464:	226b      	movs	r2, #107	; 0x6b
 800a466:	2194      	movs	r1, #148	; 0x94
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f002 fa01 	bl	800c870 <VL53L0X_WrByte>
 800a46e:	4603      	mov	r3, r0
 800a470:	461a      	mov	r2, r3
 800a472:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a476:	4313      	orrs	r3, r2
 800a478:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f7ff fef9 	bl	800a274 <VL53L0X_device_read_strobe>
 800a482:	4603      	mov	r3, r0
 800a484:	461a      	mov	r2, r3
 800a486:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a48a:	4313      	orrs	r3, r2
 800a48c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a490:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a494:	461a      	mov	r2, r3
 800a496:	2190      	movs	r1, #144	; 0x90
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f002 facd 	bl	800ca38 <VL53L0X_RdDWord>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	461a      	mov	r2, r3
 800a4a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a4a6:	4313      	orrs	r3, r2
 800a4a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800a4ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ae:	0a1b      	lsrs	r3, r3, #8
 800a4b0:	b2db      	uxtb	r3, r3
 800a4b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4b6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800a4ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4bc:	0bdb      	lsrs	r3, r3, #15
 800a4be:	b2db      	uxtb	r3, r3
 800a4c0:	f003 0301 	and.w	r3, r3, #1
 800a4c4:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800a4c8:	2224      	movs	r2, #36	; 0x24
 800a4ca:	2194      	movs	r1, #148	; 0x94
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f002 f9cf 	bl	800c870 <VL53L0X_WrByte>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	461a      	mov	r2, r3
 800a4d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a4da:	4313      	orrs	r3, r2
 800a4dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f7ff fec7 	bl	800a274 <VL53L0X_device_read_strobe>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	461a      	mov	r2, r3
 800a4ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a4ee:	4313      	orrs	r3, r2
 800a4f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a4f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a4f8:	461a      	mov	r2, r3
 800a4fa:	2190      	movs	r1, #144	; 0x90
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f002 fa9b 	bl	800ca38 <VL53L0X_RdDWord>
 800a502:	4603      	mov	r3, r0
 800a504:	461a      	mov	r2, r3
 800a506:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a50a:	4313      	orrs	r3, r2
 800a50c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800a510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a512:	0e1b      	lsrs	r3, r3, #24
 800a514:	b2db      	uxtb	r3, r3
 800a516:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800a518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a51a:	0c1b      	lsrs	r3, r3, #16
 800a51c:	b2db      	uxtb	r3, r3
 800a51e:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800a520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a522:	0a1b      	lsrs	r3, r3, #8
 800a524:	b2db      	uxtb	r3, r3
 800a526:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800a528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a52a:	b2db      	uxtb	r3, r3
 800a52c:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800a52e:	2225      	movs	r2, #37	; 0x25
 800a530:	2194      	movs	r1, #148	; 0x94
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f002 f99c 	bl	800c870 <VL53L0X_WrByte>
 800a538:	4603      	mov	r3, r0
 800a53a:	461a      	mov	r2, r3
 800a53c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a540:	4313      	orrs	r3, r2
 800a542:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f7ff fe94 	bl	800a274 <VL53L0X_device_read_strobe>
 800a54c:	4603      	mov	r3, r0
 800a54e:	461a      	mov	r2, r3
 800a550:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a554:	4313      	orrs	r3, r2
 800a556:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a55a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a55e:	461a      	mov	r2, r3
 800a560:	2190      	movs	r1, #144	; 0x90
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f002 fa68 	bl	800ca38 <VL53L0X_RdDWord>
 800a568:	4603      	mov	r3, r0
 800a56a:	461a      	mov	r2, r3
 800a56c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a570:	4313      	orrs	r3, r2
 800a572:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800a576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a578:	0e1b      	lsrs	r3, r3, #24
 800a57a:	b2db      	uxtb	r3, r3
 800a57c:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800a57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a580:	0c1b      	lsrs	r3, r3, #16
 800a582:	b2db      	uxtb	r3, r3
 800a584:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800a586:	78fb      	ldrb	r3, [r7, #3]
 800a588:	f003 0302 	and.w	r3, r3, #2
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	f000 8189 	beq.w	800a8a4 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800a592:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a596:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	f040 8182 	bne.w	800a8a4 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800a5a0:	2202      	movs	r2, #2
 800a5a2:	2194      	movs	r1, #148	; 0x94
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f002 f963 	bl	800c870 <VL53L0X_WrByte>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	461a      	mov	r2, r3
 800a5ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a5b2:	4313      	orrs	r3, r2
 800a5b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f7ff fe5b 	bl	800a274 <VL53L0X_device_read_strobe>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	461a      	mov	r2, r3
 800a5c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a5c6:	4313      	orrs	r3, r2
 800a5c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800a5cc:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800a5d0:	461a      	mov	r2, r3
 800a5d2:	2190      	movs	r1, #144	; 0x90
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f002 f9cd 	bl	800c974 <VL53L0X_RdByte>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	461a      	mov	r2, r3
 800a5de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a5e2:	4313      	orrs	r3, r2
 800a5e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800a5e8:	227b      	movs	r2, #123	; 0x7b
 800a5ea:	2194      	movs	r1, #148	; 0x94
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f002 f93f 	bl	800c870 <VL53L0X_WrByte>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	461a      	mov	r2, r3
 800a5f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a5fa:	4313      	orrs	r3, r2
 800a5fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f7ff fe37 	bl	800a274 <VL53L0X_device_read_strobe>
 800a606:	4603      	mov	r3, r0
 800a608:	461a      	mov	r2, r3
 800a60a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a60e:	4313      	orrs	r3, r2
 800a610:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800a614:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800a618:	461a      	mov	r2, r3
 800a61a:	2190      	movs	r1, #144	; 0x90
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f002 f9a9 	bl	800c974 <VL53L0X_RdByte>
 800a622:	4603      	mov	r3, r0
 800a624:	461a      	mov	r2, r3
 800a626:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a62a:	4313      	orrs	r3, r2
 800a62c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800a630:	2277      	movs	r2, #119	; 0x77
 800a632:	2194      	movs	r1, #148	; 0x94
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f002 f91b 	bl	800c870 <VL53L0X_WrByte>
 800a63a:	4603      	mov	r3, r0
 800a63c:	461a      	mov	r2, r3
 800a63e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a642:	4313      	orrs	r3, r2
 800a644:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f7ff fe13 	bl	800a274 <VL53L0X_device_read_strobe>
 800a64e:	4603      	mov	r3, r0
 800a650:	461a      	mov	r2, r3
 800a652:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a656:	4313      	orrs	r3, r2
 800a658:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a65c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a660:	461a      	mov	r2, r3
 800a662:	2190      	movs	r1, #144	; 0x90
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f002 f9e7 	bl	800ca38 <VL53L0X_RdDWord>
 800a66a:	4603      	mov	r3, r0
 800a66c:	461a      	mov	r2, r3
 800a66e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a672:	4313      	orrs	r3, r2
 800a674:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800a678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a67a:	0e5b      	lsrs	r3, r3, #25
 800a67c:	b2db      	uxtb	r3, r3
 800a67e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a682:	b2db      	uxtb	r3, r3
 800a684:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800a686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a688:	0c9b      	lsrs	r3, r3, #18
 800a68a:	b2db      	uxtb	r3, r3
 800a68c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a690:	b2db      	uxtb	r3, r3
 800a692:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800a694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a696:	0adb      	lsrs	r3, r3, #11
 800a698:	b2db      	uxtb	r3, r3
 800a69a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a69e:	b2db      	uxtb	r3, r3
 800a6a0:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800a6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a4:	091b      	lsrs	r3, r3, #4
 800a6a6:	b2db      	uxtb	r3, r3
 800a6a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6ac:	b2db      	uxtb	r3, r3
 800a6ae:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800a6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b2:	b2db      	uxtb	r3, r3
 800a6b4:	00db      	lsls	r3, r3, #3
 800a6b6:	b2db      	uxtb	r3, r3
 800a6b8:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800a6bc:	b2db      	uxtb	r3, r3
 800a6be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800a6c2:	2278      	movs	r2, #120	; 0x78
 800a6c4:	2194      	movs	r1, #148	; 0x94
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f002 f8d2 	bl	800c870 <VL53L0X_WrByte>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a6d4:	4313      	orrs	r3, r2
 800a6d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f7ff fdca 	bl	800a274 <VL53L0X_device_read_strobe>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	461a      	mov	r2, r3
 800a6e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a6e8:	4313      	orrs	r3, r2
 800a6ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a6ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a6f2:	461a      	mov	r2, r3
 800a6f4:	2190      	movs	r1, #144	; 0x90
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f002 f99e 	bl	800ca38 <VL53L0X_RdDWord>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	461a      	mov	r2, r3
 800a700:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a704:	4313      	orrs	r3, r2
 800a706:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800a70a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a70c:	0f5b      	lsrs	r3, r3, #29
 800a70e:	b2db      	uxtb	r3, r3
 800a710:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a714:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800a716:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a71a:	4413      	add	r3, r2
 800a71c:	b2db      	uxtb	r3, r3
 800a71e:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800a720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a722:	0d9b      	lsrs	r3, r3, #22
 800a724:	b2db      	uxtb	r3, r3
 800a726:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a72a:	b2db      	uxtb	r3, r3
 800a72c:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800a72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a730:	0bdb      	lsrs	r3, r3, #15
 800a732:	b2db      	uxtb	r3, r3
 800a734:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a738:	b2db      	uxtb	r3, r3
 800a73a:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800a73c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a73e:	0a1b      	lsrs	r3, r3, #8
 800a740:	b2db      	uxtb	r3, r3
 800a742:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a746:	b2db      	uxtb	r3, r3
 800a748:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800a74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a74c:	085b      	lsrs	r3, r3, #1
 800a74e:	b2db      	uxtb	r3, r3
 800a750:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a754:	b2db      	uxtb	r3, r3
 800a756:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800a758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a75a:	b2db      	uxtb	r3, r3
 800a75c:	019b      	lsls	r3, r3, #6
 800a75e:	b2db      	uxtb	r3, r3
 800a760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a764:	b2db      	uxtb	r3, r3
 800a766:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800a76a:	2279      	movs	r2, #121	; 0x79
 800a76c:	2194      	movs	r1, #148	; 0x94
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f002 f87e 	bl	800c870 <VL53L0X_WrByte>
 800a774:	4603      	mov	r3, r0
 800a776:	461a      	mov	r2, r3
 800a778:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a77c:	4313      	orrs	r3, r2
 800a77e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f7ff fd76 	bl	800a274 <VL53L0X_device_read_strobe>
 800a788:	4603      	mov	r3, r0
 800a78a:	461a      	mov	r2, r3
 800a78c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a790:	4313      	orrs	r3, r2
 800a792:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a796:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a79a:	461a      	mov	r2, r3
 800a79c:	2190      	movs	r1, #144	; 0x90
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f002 f94a 	bl	800ca38 <VL53L0X_RdDWord>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	461a      	mov	r2, r3
 800a7a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a7ac:	4313      	orrs	r3, r2
 800a7ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800a7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b4:	0e9b      	lsrs	r3, r3, #26
 800a7b6:	b2db      	uxtb	r3, r3
 800a7b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7bc:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800a7be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a7c2:	4413      	add	r3, r2
 800a7c4:	b2db      	uxtb	r3, r3
 800a7c6:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800a7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ca:	0cdb      	lsrs	r3, r3, #19
 800a7cc:	b2db      	uxtb	r3, r3
 800a7ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7d2:	b2db      	uxtb	r3, r3
 800a7d4:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800a7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d8:	0b1b      	lsrs	r3, r3, #12
 800a7da:	b2db      	uxtb	r3, r3
 800a7dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7e0:	b2db      	uxtb	r3, r3
 800a7e2:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800a7e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e6:	095b      	lsrs	r3, r3, #5
 800a7e8:	b2db      	uxtb	r3, r3
 800a7ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7ee:	b2db      	uxtb	r3, r3
 800a7f0:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800a7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f4:	b2db      	uxtb	r3, r3
 800a7f6:	009b      	lsls	r3, r3, #2
 800a7f8:	b2db      	uxtb	r3, r3
 800a7fa:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800a7fe:	b2db      	uxtb	r3, r3
 800a800:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800a804:	227a      	movs	r2, #122	; 0x7a
 800a806:	2194      	movs	r1, #148	; 0x94
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f002 f831 	bl	800c870 <VL53L0X_WrByte>
 800a80e:	4603      	mov	r3, r0
 800a810:	461a      	mov	r2, r3
 800a812:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a816:	4313      	orrs	r3, r2
 800a818:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f7ff fd29 	bl	800a274 <VL53L0X_device_read_strobe>
 800a822:	4603      	mov	r3, r0
 800a824:	461a      	mov	r2, r3
 800a826:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a82a:	4313      	orrs	r3, r2
 800a82c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a830:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a834:	461a      	mov	r2, r3
 800a836:	2190      	movs	r1, #144	; 0x90
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f002 f8fd 	bl	800ca38 <VL53L0X_RdDWord>
 800a83e:	4603      	mov	r3, r0
 800a840:	461a      	mov	r2, r3
 800a842:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a846:	4313      	orrs	r3, r2
 800a848:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800a84c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a84e:	0f9b      	lsrs	r3, r3, #30
 800a850:	b2db      	uxtb	r3, r3
 800a852:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a856:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800a858:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a85c:	4413      	add	r3, r2
 800a85e:	b2db      	uxtb	r3, r3
 800a860:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800a862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a864:	0ddb      	lsrs	r3, r3, #23
 800a866:	b2db      	uxtb	r3, r3
 800a868:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a86c:	b2db      	uxtb	r3, r3
 800a86e:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800a870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a872:	0c1b      	lsrs	r3, r3, #16
 800a874:	b2db      	uxtb	r3, r3
 800a876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a87a:	b2db      	uxtb	r3, r3
 800a87c:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800a87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a880:	0a5b      	lsrs	r3, r3, #9
 800a882:	b2db      	uxtb	r3, r3
 800a884:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a888:	b2db      	uxtb	r3, r3
 800a88a:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800a88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a890:	089b      	lsrs	r3, r3, #2
 800a892:	b2db      	uxtb	r3, r3
 800a894:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a898:	b2db      	uxtb	r3, r3
 800a89a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800a89e:	2300      	movs	r3, #0
 800a8a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800a8a4:	78fb      	ldrb	r3, [r7, #3]
 800a8a6:	f003 0304 	and.w	r3, r3, #4
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	f000 80f1 	beq.w	800aa92 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800a8b0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a8b4:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	f040 80ea 	bne.w	800aa92 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800a8be:	227b      	movs	r2, #123	; 0x7b
 800a8c0:	2194      	movs	r1, #148	; 0x94
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f001 ffd4 	bl	800c870 <VL53L0X_WrByte>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8d0:	4313      	orrs	r3, r2
 800a8d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f7ff fccc 	bl	800a274 <VL53L0X_device_read_strobe>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	461a      	mov	r2, r3
 800a8e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8e4:	4313      	orrs	r3, r2
 800a8e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800a8ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a8ee:	461a      	mov	r2, r3
 800a8f0:	2190      	movs	r1, #144	; 0x90
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f002 f8a0 	bl	800ca38 <VL53L0X_RdDWord>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	461a      	mov	r2, r3
 800a8fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a900:	4313      	orrs	r3, r2
 800a902:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800a906:	227c      	movs	r2, #124	; 0x7c
 800a908:	2194      	movs	r1, #148	; 0x94
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f001 ffb0 	bl	800c870 <VL53L0X_WrByte>
 800a910:	4603      	mov	r3, r0
 800a912:	461a      	mov	r2, r3
 800a914:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a918:	4313      	orrs	r3, r2
 800a91a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f7ff fca8 	bl	800a274 <VL53L0X_device_read_strobe>
 800a924:	4603      	mov	r3, r0
 800a926:	461a      	mov	r2, r3
 800a928:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a92c:	4313      	orrs	r3, r2
 800a92e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800a932:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a936:	461a      	mov	r2, r3
 800a938:	2190      	movs	r1, #144	; 0x90
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f002 f87c 	bl	800ca38 <VL53L0X_RdDWord>
 800a940:	4603      	mov	r3, r0
 800a942:	461a      	mov	r2, r3
 800a944:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a948:	4313      	orrs	r3, r2
 800a94a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800a94e:	2273      	movs	r2, #115	; 0x73
 800a950:	2194      	movs	r1, #148	; 0x94
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f001 ff8c 	bl	800c870 <VL53L0X_WrByte>
 800a958:	4603      	mov	r3, r0
 800a95a:	461a      	mov	r2, r3
 800a95c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a960:	4313      	orrs	r3, r2
 800a962:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f7ff fc84 	bl	800a274 <VL53L0X_device_read_strobe>
 800a96c:	4603      	mov	r3, r0
 800a96e:	461a      	mov	r2, r3
 800a970:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a974:	4313      	orrs	r3, r2
 800a976:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a97a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a97e:	461a      	mov	r2, r3
 800a980:	2190      	movs	r1, #144	; 0x90
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f002 f858 	bl	800ca38 <VL53L0X_RdDWord>
 800a988:	4603      	mov	r3, r0
 800a98a:	461a      	mov	r2, r3
 800a98c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a990:	4313      	orrs	r3, r2
 800a992:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800a996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a998:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800a99a:	b29b      	uxth	r3, r3
 800a99c:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800a99e:	2274      	movs	r2, #116	; 0x74
 800a9a0:	2194      	movs	r1, #148	; 0x94
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f001 ff64 	bl	800c870 <VL53L0X_WrByte>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	461a      	mov	r2, r3
 800a9ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a9b0:	4313      	orrs	r3, r2
 800a9b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f7ff fc5c 	bl	800a274 <VL53L0X_device_read_strobe>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	461a      	mov	r2, r3
 800a9c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a9c4:	4313      	orrs	r3, r2
 800a9c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a9ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a9ce:	461a      	mov	r2, r3
 800a9d0:	2190      	movs	r1, #144	; 0x90
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f002 f830 	bl	800ca38 <VL53L0X_RdDWord>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	461a      	mov	r2, r3
 800a9dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a9e0:	4313      	orrs	r3, r2
 800a9e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800a9e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e8:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800a9ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a9ec:	4313      	orrs	r3, r2
 800a9ee:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800a9f0:	2275      	movs	r2, #117	; 0x75
 800a9f2:	2194      	movs	r1, #148	; 0x94
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f001 ff3b 	bl	800c870 <VL53L0X_WrByte>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	461a      	mov	r2, r3
 800a9fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa02:	4313      	orrs	r3, r2
 800aa04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f7ff fc33 	bl	800a274 <VL53L0X_device_read_strobe>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	461a      	mov	r2, r3
 800aa12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa16:	4313      	orrs	r3, r2
 800aa18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800aa1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800aa20:	461a      	mov	r2, r3
 800aa22:	2190      	movs	r1, #144	; 0x90
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f002 f807 	bl	800ca38 <VL53L0X_RdDWord>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	461a      	mov	r2, r3
 800aa2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa32:	4313      	orrs	r3, r2
 800aa34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800aa38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa3a:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800aa3c:	b29b      	uxth	r3, r3
 800aa3e:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800aa40:	2276      	movs	r2, #118	; 0x76
 800aa42:	2194      	movs	r1, #148	; 0x94
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f001 ff13 	bl	800c870 <VL53L0X_WrByte>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	461a      	mov	r2, r3
 800aa4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa52:	4313      	orrs	r3, r2
 800aa54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f7ff fc0b 	bl	800a274 <VL53L0X_device_read_strobe>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	461a      	mov	r2, r3
 800aa62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa66:	4313      	orrs	r3, r2
 800aa68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800aa6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800aa70:	461a      	mov	r2, r3
 800aa72:	2190      	movs	r1, #144	; 0x90
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f001 ffdf 	bl	800ca38 <VL53L0X_RdDWord>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	461a      	mov	r2, r3
 800aa7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa82:	4313      	orrs	r3, r2
 800aa84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800aa88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa8a:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800aa8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aa8e:	4313      	orrs	r3, r2
 800aa90:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800aa92:	2200      	movs	r2, #0
 800aa94:	2181      	movs	r1, #129	; 0x81
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f001 feea 	bl	800c870 <VL53L0X_WrByte>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	461a      	mov	r2, r3
 800aaa0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aaa4:	4313      	orrs	r3, r2
 800aaa6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800aaaa:	2206      	movs	r2, #6
 800aaac:	21ff      	movs	r1, #255	; 0xff
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f001 fede 	bl	800c870 <VL53L0X_WrByte>
 800aab4:	4603      	mov	r3, r0
 800aab6:	461a      	mov	r2, r3
 800aab8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aabc:	4313      	orrs	r3, r2
 800aabe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800aac2:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800aac6:	461a      	mov	r2, r3
 800aac8:	2183      	movs	r1, #131	; 0x83
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	f001 ff52 	bl	800c974 <VL53L0X_RdByte>
 800aad0:	4603      	mov	r3, r0
 800aad2:	461a      	mov	r2, r3
 800aad4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aad8:	4313      	orrs	r3, r2
 800aada:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800aade:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aae2:	f023 0304 	bic.w	r3, r3, #4
 800aae6:	b2db      	uxtb	r3, r3
 800aae8:	461a      	mov	r2, r3
 800aaea:	2183      	movs	r1, #131	; 0x83
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f001 febf 	bl	800c870 <VL53L0X_WrByte>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	461a      	mov	r2, r3
 800aaf6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aafa:	4313      	orrs	r3, r2
 800aafc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800ab00:	2201      	movs	r2, #1
 800ab02:	21ff      	movs	r1, #255	; 0xff
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f001 feb3 	bl	800c870 <VL53L0X_WrByte>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	461a      	mov	r2, r3
 800ab0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab12:	4313      	orrs	r3, r2
 800ab14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800ab18:	2201      	movs	r2, #1
 800ab1a:	2100      	movs	r1, #0
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f001 fea7 	bl	800c870 <VL53L0X_WrByte>
 800ab22:	4603      	mov	r3, r0
 800ab24:	461a      	mov	r2, r3
 800ab26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab2a:	4313      	orrs	r3, r2
 800ab2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800ab30:	2200      	movs	r2, #0
 800ab32:	21ff      	movs	r1, #255	; 0xff
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f001 fe9b 	bl	800c870 <VL53L0X_WrByte>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	461a      	mov	r2, r3
 800ab3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab42:	4313      	orrs	r3, r2
 800ab44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800ab48:	2200      	movs	r2, #0
 800ab4a:	2180      	movs	r1, #128	; 0x80
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f001 fe8f 	bl	800c870 <VL53L0X_WrByte>
 800ab52:	4603      	mov	r3, r0
 800ab54:	461a      	mov	r2, r3
 800ab56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab5a:	4313      	orrs	r3, r2
 800ab5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800ab60:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	f040 808f 	bne.w	800ac88 <VL53L0X_get_info_from_device+0x98e>
 800ab6a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ab6e:	2b07      	cmp	r3, #7
 800ab70:	f000 808a 	beq.w	800ac88 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800ab74:	78fb      	ldrb	r3, [r7, #3]
 800ab76:	f003 0301 	and.w	r3, r3, #1
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d024      	beq.n	800abc8 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800ab7e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ab82:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d11e      	bne.n	800abc8 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800ab90:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800ab9a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800ab9e:	2300      	movs	r3, #0
 800aba0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aba2:	e00e      	b.n	800abc2 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800aba4:	f107 0208 	add.w	r2, r7, #8
 800aba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abaa:	4413      	add	r3, r2
 800abac:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800abae:	687a      	ldr	r2, [r7, #4]
 800abb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abb2:	4413      	add	r3, r2
 800abb4:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800abb8:	460a      	mov	r2, r1
 800abba:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800abbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abbe:	3301      	adds	r3, #1
 800abc0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800abc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abc4:	2b05      	cmp	r3, #5
 800abc6:	dded      	ble.n	800aba4 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800abc8:	78fb      	ldrb	r3, [r7, #3]
 800abca:	f003 0302 	and.w	r3, r3, #2
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d018      	beq.n	800ac04 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800abd2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800abd6:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d112      	bne.n	800ac04 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800abde:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800abe8:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	33f3      	adds	r3, #243	; 0xf3
 800abf6:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800abf8:	f107 0310 	add.w	r3, r7, #16
 800abfc:	4619      	mov	r1, r3
 800abfe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ac00:	f001 ffa0 	bl	800cb44 <strcpy>

		}

		if (((option & 4) == 4) &&
 800ac04:	78fb      	ldrb	r3, [r7, #3]
 800ac06:	f003 0304 	and.w	r3, r3, #4
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d030      	beq.n	800ac70 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800ac0e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ac12:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d12a      	bne.n	800ac70 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800ac1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800ac22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800ac2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac2c:	025b      	lsls	r3, r3, #9
 800ac2e:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ac34:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800ac3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d011      	beq.n	800ac68 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800ac44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ac46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac48:	1ad3      	subs	r3, r2, r3
 800ac4a:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800ac4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ac52:	fb02 f303 	mul.w	r3, r2, r3
 800ac56:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800ac58:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800ac5c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800ac60:	425b      	negs	r3, r3
 800ac62:	b29b      	uxth	r3, r3
 800ac64:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800ac68:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800ac70:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800ac74:	78fb      	ldrb	r3, [r7, #3]
 800ac76:	4313      	orrs	r3, r2
 800ac78:	b2db      	uxtb	r3, r3
 800ac7a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800ac7e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ac88:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	3760      	adds	r7, #96	; 0x60
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}

0800ac94 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b087      	sub	sp, #28
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
 800ac9c:	460b      	mov	r3, r1
 800ac9e:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800aca0:	f240 6277 	movw	r2, #1655	; 0x677
 800aca4:	f04f 0300 	mov.w	r3, #0
 800aca8:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800acac:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800acb0:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800acb2:	78fb      	ldrb	r3, [r7, #3]
 800acb4:	68fa      	ldr	r2, [r7, #12]
 800acb6:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800acba:	693a      	ldr	r2, [r7, #16]
 800acbc:	fb02 f303 	mul.w	r3, r2, r3
 800acc0:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800acc2:	68bb      	ldr	r3, [r7, #8]
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	371c      	adds	r7, #28
 800acc8:	46bd      	mov	sp, r7
 800acca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acce:	4770      	bx	lr

0800acd0 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800acd0:	b480      	push	{r7}
 800acd2:	b087      	sub	sp, #28
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800acd8:	2300      	movs	r3, #0
 800acda:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800acdc:	2300      	movs	r3, #0
 800acde:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800ace0:	2300      	movs	r3, #0
 800ace2:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d017      	beq.n	800ad1a <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	3b01      	subs	r3, #1
 800acee:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800acf0:	e005      	b.n	800acfe <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	085b      	lsrs	r3, r3, #1
 800acf6:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800acf8:	89fb      	ldrh	r3, [r7, #14]
 800acfa:	3301      	adds	r3, #1
 800acfc:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d1f4      	bne.n	800acf2 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800ad08:	89fb      	ldrh	r3, [r7, #14]
 800ad0a:	021b      	lsls	r3, r3, #8
 800ad0c:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800ad0e:	693b      	ldr	r3, [r7, #16]
 800ad10:	b29b      	uxth	r3, r3
 800ad12:	b2db      	uxtb	r3, r3
 800ad14:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800ad16:	4413      	add	r3, r2
 800ad18:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800ad1a:	8afb      	ldrh	r3, [r7, #22]

}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	371c      	adds	r7, #28
 800ad20:	46bd      	mov	sp, r7
 800ad22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad26:	4770      	bx	lr

0800ad28 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b085      	sub	sp, #20
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	4603      	mov	r3, r0
 800ad30:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800ad32:	2300      	movs	r3, #0
 800ad34:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800ad36:	88fb      	ldrh	r3, [r7, #6]
 800ad38:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800ad3a:	88fa      	ldrh	r2, [r7, #6]
 800ad3c:	0a12      	lsrs	r2, r2, #8
 800ad3e:	b292      	uxth	r2, r2
 800ad40:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800ad42:	3301      	adds	r3, #1
 800ad44:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800ad46:	68fb      	ldr	r3, [r7, #12]
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3714      	adds	r7, #20
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad52:	4770      	bx	lr

0800ad54 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b088      	sub	sp, #32
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	60f8      	str	r0, [r7, #12]
 800ad5c:	60b9      	str	r1, [r7, #8]
 800ad5e:	4613      	mov	r3, r2
 800ad60:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800ad62:	2300      	movs	r3, #0
 800ad64:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800ad66:	79fb      	ldrb	r3, [r7, #7]
 800ad68:	4619      	mov	r1, r3
 800ad6a:	68f8      	ldr	r0, [r7, #12]
 800ad6c:	f7ff ff92 	bl	800ac94 <VL53L0X_calc_macro_period_ps>
 800ad70:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800ad72:	69bb      	ldr	r3, [r7, #24]
 800ad74:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ad78:	4a0a      	ldr	r2, [pc, #40]	; (800ada4 <VL53L0X_calc_timeout_mclks+0x50>)
 800ad7a:	fba2 2303 	umull	r2, r3, r2, r3
 800ad7e:	099b      	lsrs	r3, r3, #6
 800ad80:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ad88:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800ad8c:	697b      	ldr	r3, [r7, #20]
 800ad8e:	085b      	lsrs	r3, r3, #1
 800ad90:	441a      	add	r2, r3
	timeout_period_mclks =
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad98:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800ad9a:	69fb      	ldr	r3, [r7, #28]
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3720      	adds	r7, #32
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}
 800ada4:	10624dd3 	.word	0x10624dd3

0800ada8 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b086      	sub	sp, #24
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
 800adb0:	460b      	mov	r3, r1
 800adb2:	807b      	strh	r3, [r7, #2]
 800adb4:	4613      	mov	r3, r2
 800adb6:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800adb8:	2300      	movs	r3, #0
 800adba:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800adbc:	787b      	ldrb	r3, [r7, #1]
 800adbe:	4619      	mov	r1, r3
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	f7ff ff67 	bl	800ac94 <VL53L0X_calc_macro_period_ps>
 800adc6:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800adce:	4a0a      	ldr	r2, [pc, #40]	; (800adf8 <VL53L0X_calc_timeout_us+0x50>)
 800add0:	fba2 2303 	umull	r2, r3, r2, r3
 800add4:	099b      	lsrs	r3, r3, #6
 800add6:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800add8:	887b      	ldrh	r3, [r7, #2]
 800adda:	68fa      	ldr	r2, [r7, #12]
 800addc:	fb02 f303 	mul.w	r3, r2, r3
 800ade0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800ade4:	4a04      	ldr	r2, [pc, #16]	; (800adf8 <VL53L0X_calc_timeout_us+0x50>)
 800ade6:	fba2 2303 	umull	r2, r3, r2, r3
 800adea:	099b      	lsrs	r3, r3, #6
 800adec:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800adee:	697b      	ldr	r3, [r7, #20]
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	3718      	adds	r7, #24
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}
 800adf8:	10624dd3 	.word	0x10624dd3

0800adfc <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b08c      	sub	sp, #48	; 0x30
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	60f8      	str	r0, [r7, #12]
 800ae04:	460b      	mov	r3, r1
 800ae06:	607a      	str	r2, [r7, #4]
 800ae08:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800ae10:	2300      	movs	r3, #0
 800ae12:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800ae16:	2300      	movs	r3, #0
 800ae18:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800ae22:	7afb      	ldrb	r3, [r7, #11]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d005      	beq.n	800ae34 <get_sequence_step_timeout+0x38>
 800ae28:	7afb      	ldrb	r3, [r7, #11]
 800ae2a:	2b01      	cmp	r3, #1
 800ae2c:	d002      	beq.n	800ae34 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800ae2e:	7afb      	ldrb	r3, [r7, #11]
 800ae30:	2b02      	cmp	r3, #2
 800ae32:	d128      	bne.n	800ae86 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800ae34:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800ae38:	461a      	mov	r2, r3
 800ae3a:	2100      	movs	r1, #0
 800ae3c:	68f8      	ldr	r0, [r7, #12]
 800ae3e:	f7fd fa7d 	bl	800833c <VL53L0X_GetVcselPulsePeriod>
 800ae42:	4603      	mov	r3, r0
 800ae44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800ae48:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d109      	bne.n	800ae64 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800ae50:	f107 0320 	add.w	r3, r7, #32
 800ae54:	461a      	mov	r2, r3
 800ae56:	2146      	movs	r1, #70	; 0x46
 800ae58:	68f8      	ldr	r0, [r7, #12]
 800ae5a:	f001 fd8b 	bl	800c974 <VL53L0X_RdByte>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800ae64:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ae68:	b29b      	uxth	r3, r3
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f7ff ff5c 	bl	800ad28 <VL53L0X_decode_timeout>
 800ae70:	4603      	mov	r3, r0
 800ae72:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800ae74:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800ae78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ae7a:	4619      	mov	r1, r3
 800ae7c:	68f8      	ldr	r0, [r7, #12]
 800ae7e:	f7ff ff93 	bl	800ada8 <VL53L0X_calc_timeout_us>
 800ae82:	62b8      	str	r0, [r7, #40]	; 0x28
 800ae84:	e092      	b.n	800afac <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800ae86:	7afb      	ldrb	r3, [r7, #11]
 800ae88:	2b03      	cmp	r3, #3
 800ae8a:	d135      	bne.n	800aef8 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800ae8c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800ae90:	461a      	mov	r2, r3
 800ae92:	2100      	movs	r1, #0
 800ae94:	68f8      	ldr	r0, [r7, #12]
 800ae96:	f7fd fa51 	bl	800833c <VL53L0X_GetVcselPulsePeriod>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800aea0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	f040 8081 	bne.w	800afac <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800aeaa:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800aeae:	461a      	mov	r2, r3
 800aeb0:	2100      	movs	r1, #0
 800aeb2:	68f8      	ldr	r0, [r7, #12]
 800aeb4:	f7fd fa42 	bl	800833c <VL53L0X_GetVcselPulsePeriod>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800aebe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d109      	bne.n	800aeda <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800aec6:	f107 031e 	add.w	r3, r7, #30
 800aeca:	461a      	mov	r2, r3
 800aecc:	2151      	movs	r1, #81	; 0x51
 800aece:	68f8      	ldr	r0, [r7, #12]
 800aed0:	f001 fd7a 	bl	800c9c8 <VL53L0X_RdWord>
 800aed4:	4603      	mov	r3, r0
 800aed6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800aeda:	8bfb      	ldrh	r3, [r7, #30]
 800aedc:	4618      	mov	r0, r3
 800aede:	f7ff ff23 	bl	800ad28 <VL53L0X_decode_timeout>
 800aee2:	4603      	mov	r3, r0
 800aee4:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800aee6:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800aeea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aeec:	4619      	mov	r1, r3
 800aeee:	68f8      	ldr	r0, [r7, #12]
 800aef0:	f7ff ff5a 	bl	800ada8 <VL53L0X_calc_timeout_us>
 800aef4:	62b8      	str	r0, [r7, #40]	; 0x28
 800aef6:	e059      	b.n	800afac <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800aef8:	7afb      	ldrb	r3, [r7, #11]
 800aefa:	2b04      	cmp	r3, #4
 800aefc:	d156      	bne.n	800afac <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800aefe:	f107 0314 	add.w	r3, r7, #20
 800af02:	4619      	mov	r1, r3
 800af04:	68f8      	ldr	r0, [r7, #12]
 800af06:	f7fd fb25 	bl	8008554 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800af0a:	2300      	movs	r3, #0
 800af0c:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800af0e:	7dfb      	ldrb	r3, [r7, #23]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d01d      	beq.n	800af50 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800af14:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800af18:	461a      	mov	r2, r3
 800af1a:	2100      	movs	r1, #0
 800af1c:	68f8      	ldr	r0, [r7, #12]
 800af1e:	f7fd fa0d 	bl	800833c <VL53L0X_GetVcselPulsePeriod>
 800af22:	4603      	mov	r3, r0
 800af24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800af28:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d10f      	bne.n	800af50 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800af30:	f107 031e 	add.w	r3, r7, #30
 800af34:	461a      	mov	r2, r3
 800af36:	2151      	movs	r1, #81	; 0x51
 800af38:	68f8      	ldr	r0, [r7, #12]
 800af3a:	f001 fd45 	bl	800c9c8 <VL53L0X_RdWord>
 800af3e:	4603      	mov	r3, r0
 800af40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800af44:	8bfb      	ldrh	r3, [r7, #30]
 800af46:	4618      	mov	r0, r3
 800af48:	f7ff feee 	bl	800ad28 <VL53L0X_decode_timeout>
 800af4c:	4603      	mov	r3, r0
 800af4e:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800af50:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800af54:	2b00      	cmp	r3, #0
 800af56:	d109      	bne.n	800af6c <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800af58:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800af5c:	461a      	mov	r2, r3
 800af5e:	2101      	movs	r1, #1
 800af60:	68f8      	ldr	r0, [r7, #12]
 800af62:	f7fd f9eb 	bl	800833c <VL53L0X_GetVcselPulsePeriod>
 800af66:	4603      	mov	r3, r0
 800af68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800af6c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800af70:	2b00      	cmp	r3, #0
 800af72:	d10f      	bne.n	800af94 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800af74:	f107 031c 	add.w	r3, r7, #28
 800af78:	461a      	mov	r2, r3
 800af7a:	2171      	movs	r1, #113	; 0x71
 800af7c:	68f8      	ldr	r0, [r7, #12]
 800af7e:	f001 fd23 	bl	800c9c8 <VL53L0X_RdWord>
 800af82:	4603      	mov	r3, r0
 800af84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800af88:	8bbb      	ldrh	r3, [r7, #28]
 800af8a:	4618      	mov	r0, r3
 800af8c:	f7ff fecc 	bl	800ad28 <VL53L0X_decode_timeout>
 800af90:	4603      	mov	r3, r0
 800af92:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800af94:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800af96:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800af98:	1ad3      	subs	r3, r2, r3
 800af9a:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800af9c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800afa0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800afa2:	4619      	mov	r1, r3
 800afa4:	68f8      	ldr	r0, [r7, #12]
 800afa6:	f7ff feff 	bl	800ada8 <VL53L0X_calc_timeout_us>
 800afaa:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800afb0:	601a      	str	r2, [r3, #0]

	return Status;
 800afb2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3730      	adds	r7, #48	; 0x30
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}

0800afbe <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800afbe:	b580      	push	{r7, lr}
 800afc0:	b08a      	sub	sp, #40	; 0x28
 800afc2:	af00      	add	r7, sp, #0
 800afc4:	60f8      	str	r0, [r7, #12]
 800afc6:	460b      	mov	r3, r1
 800afc8:	607a      	str	r2, [r7, #4]
 800afca:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800afcc:	2300      	movs	r3, #0
 800afce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800afd2:	7afb      	ldrb	r3, [r7, #11]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d005      	beq.n	800afe4 <set_sequence_step_timeout+0x26>
 800afd8:	7afb      	ldrb	r3, [r7, #11]
 800afda:	2b01      	cmp	r3, #1
 800afdc:	d002      	beq.n	800afe4 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800afde:	7afb      	ldrb	r3, [r7, #11]
 800afe0:	2b02      	cmp	r3, #2
 800afe2:	d138      	bne.n	800b056 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800afe4:	f107 031b 	add.w	r3, r7, #27
 800afe8:	461a      	mov	r2, r3
 800afea:	2100      	movs	r1, #0
 800afec:	68f8      	ldr	r0, [r7, #12]
 800afee:	f7fd f9a5 	bl	800833c <VL53L0X_GetVcselPulsePeriod>
 800aff2:	4603      	mov	r3, r0
 800aff4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800aff8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800affc:	2b00      	cmp	r3, #0
 800affe:	d11a      	bne.n	800b036 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800b000:	7efb      	ldrb	r3, [r7, #27]
 800b002:	461a      	mov	r2, r3
 800b004:	6879      	ldr	r1, [r7, #4]
 800b006:	68f8      	ldr	r0, [r7, #12]
 800b008:	f7ff fea4 	bl	800ad54 <VL53L0X_calc_timeout_mclks>
 800b00c:	4603      	mov	r3, r0
 800b00e:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800b010:	8bbb      	ldrh	r3, [r7, #28]
 800b012:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b016:	d903      	bls.n	800b020 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800b018:	23ff      	movs	r3, #255	; 0xff
 800b01a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b01e:	e004      	b.n	800b02a <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800b020:	8bbb      	ldrh	r3, [r7, #28]
 800b022:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800b024:	3b01      	subs	r3, #1
 800b026:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b02a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b02e:	b29a      	uxth	r2, r3
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800b036:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	f040 80ab 	bne.w	800b196 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800b040:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b044:	461a      	mov	r2, r3
 800b046:	2146      	movs	r1, #70	; 0x46
 800b048:	68f8      	ldr	r0, [r7, #12]
 800b04a:	f001 fc11 	bl	800c870 <VL53L0X_WrByte>
 800b04e:	4603      	mov	r3, r0
 800b050:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800b054:	e09f      	b.n	800b196 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800b056:	7afb      	ldrb	r3, [r7, #11]
 800b058:	2b03      	cmp	r3, #3
 800b05a:	d135      	bne.n	800b0c8 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800b05c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b060:	2b00      	cmp	r3, #0
 800b062:	d11b      	bne.n	800b09c <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b064:	f107 031b 	add.w	r3, r7, #27
 800b068:	461a      	mov	r2, r3
 800b06a:	2100      	movs	r1, #0
 800b06c:	68f8      	ldr	r0, [r7, #12]
 800b06e:	f7fd f965 	bl	800833c <VL53L0X_GetVcselPulsePeriod>
 800b072:	4603      	mov	r3, r0
 800b074:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800b078:	7efb      	ldrb	r3, [r7, #27]
 800b07a:	461a      	mov	r2, r3
 800b07c:	6879      	ldr	r1, [r7, #4]
 800b07e:	68f8      	ldr	r0, [r7, #12]
 800b080:	f7ff fe68 	bl	800ad54 <VL53L0X_calc_timeout_mclks>
 800b084:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800b086:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800b088:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b08a:	4618      	mov	r0, r3
 800b08c:	f7ff fe20 	bl	800acd0 <VL53L0X_encode_timeout>
 800b090:	4603      	mov	r3, r0
 800b092:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b094:	8b3a      	ldrh	r2, [r7, #24]
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800b09c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d108      	bne.n	800b0b6 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800b0a4:	8b3b      	ldrh	r3, [r7, #24]
 800b0a6:	461a      	mov	r2, r3
 800b0a8:	2151      	movs	r1, #81	; 0x51
 800b0aa:	68f8      	ldr	r0, [r7, #12]
 800b0ac:	f001 fc04 	bl	800c8b8 <VL53L0X_WrWord>
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800b0b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d16b      	bne.n	800b196 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	687a      	ldr	r2, [r7, #4]
 800b0c2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800b0c6:	e066      	b.n	800b196 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800b0c8:	7afb      	ldrb	r3, [r7, #11]
 800b0ca:	2b04      	cmp	r3, #4
 800b0cc:	d160      	bne.n	800b190 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800b0ce:	f107 0310 	add.w	r3, r7, #16
 800b0d2:	4619      	mov	r1, r3
 800b0d4:	68f8      	ldr	r0, [r7, #12]
 800b0d6:	f7fd fa3d 	bl	8008554 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800b0de:	7cfb      	ldrb	r3, [r7, #19]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d01d      	beq.n	800b120 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b0e4:	f107 031b 	add.w	r3, r7, #27
 800b0e8:	461a      	mov	r2, r3
 800b0ea:	2100      	movs	r1, #0
 800b0ec:	68f8      	ldr	r0, [r7, #12]
 800b0ee:	f7fd f925 	bl	800833c <VL53L0X_GetVcselPulsePeriod>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800b0f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d10f      	bne.n	800b120 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800b100:	f107 0318 	add.w	r3, r7, #24
 800b104:	461a      	mov	r2, r3
 800b106:	2151      	movs	r1, #81	; 0x51
 800b108:	68f8      	ldr	r0, [r7, #12]
 800b10a:	f001 fc5d 	bl	800c9c8 <VL53L0X_RdWord>
 800b10e:	4603      	mov	r3, r0
 800b110:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800b114:	8b3b      	ldrh	r3, [r7, #24]
 800b116:	4618      	mov	r0, r3
 800b118:	f7ff fe06 	bl	800ad28 <VL53L0X_decode_timeout>
 800b11c:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800b11e:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800b120:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b124:	2b00      	cmp	r3, #0
 800b126:	d109      	bne.n	800b13c <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b128:	f107 031b 	add.w	r3, r7, #27
 800b12c:	461a      	mov	r2, r3
 800b12e:	2101      	movs	r1, #1
 800b130:	68f8      	ldr	r0, [r7, #12]
 800b132:	f7fd f903 	bl	800833c <VL53L0X_GetVcselPulsePeriod>
 800b136:	4603      	mov	r3, r0
 800b138:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800b13c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b140:	2b00      	cmp	r3, #0
 800b142:	d128      	bne.n	800b196 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800b144:	7efb      	ldrb	r3, [r7, #27]
 800b146:	461a      	mov	r2, r3
 800b148:	6879      	ldr	r1, [r7, #4]
 800b14a:	68f8      	ldr	r0, [r7, #12]
 800b14c:	f7ff fe02 	bl	800ad54 <VL53L0X_calc_timeout_mclks>
 800b150:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800b152:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b154:	6a3a      	ldr	r2, [r7, #32]
 800b156:	4413      	add	r3, r2
 800b158:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800b15a:	6a38      	ldr	r0, [r7, #32]
 800b15c:	f7ff fdb8 	bl	800acd0 <VL53L0X_encode_timeout>
 800b160:	4603      	mov	r3, r0
 800b162:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800b164:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d108      	bne.n	800b17e <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800b16c:	8bfb      	ldrh	r3, [r7, #30]
 800b16e:	461a      	mov	r2, r3
 800b170:	2171      	movs	r1, #113	; 0x71
 800b172:	68f8      	ldr	r0, [r7, #12]
 800b174:	f001 fba0 	bl	800c8b8 <VL53L0X_WrWord>
 800b178:	4603      	mov	r3, r0
 800b17a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800b17e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b182:	2b00      	cmp	r3, #0
 800b184:	d107      	bne.n	800b196 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	687a      	ldr	r2, [r7, #4]
 800b18a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800b18e:	e002      	b.n	800b196 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b190:	23fc      	movs	r3, #252	; 0xfc
 800b192:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800b196:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	3728      	adds	r7, #40	; 0x28
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}

0800b1a2 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800b1a2:	b580      	push	{r7, lr}
 800b1a4:	b08a      	sub	sp, #40	; 0x28
 800b1a6:	af00      	add	r7, sp, #0
 800b1a8:	6078      	str	r0, [r7, #4]
 800b1aa:	460b      	mov	r3, r1
 800b1ac:	70fb      	strb	r3, [r7, #3]
 800b1ae:	4613      	mov	r3, r2
 800b1b0:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800b1b8:	230c      	movs	r3, #12
 800b1ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800b1be:	2312      	movs	r3, #18
 800b1c0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800b1c4:	2308      	movs	r3, #8
 800b1c6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800b1ca:	230e      	movs	r3, #14
 800b1cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800b1d4:	78bb      	ldrb	r3, [r7, #2]
 800b1d6:	f003 0301 	and.w	r3, r3, #1
 800b1da:	b2db      	uxtb	r3, r3
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d003      	beq.n	800b1e8 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b1e0:	23fc      	movs	r3, #252	; 0xfc
 800b1e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b1e6:	e020      	b.n	800b22a <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800b1e8:	78fb      	ldrb	r3, [r7, #3]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d10d      	bne.n	800b20a <VL53L0X_set_vcsel_pulse_period+0x68>
 800b1ee:	78ba      	ldrb	r2, [r7, #2]
 800b1f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b1f4:	429a      	cmp	r2, r3
 800b1f6:	d304      	bcc.n	800b202 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800b1f8:	78ba      	ldrb	r2, [r7, #2]
 800b1fa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b1fe:	429a      	cmp	r2, r3
 800b200:	d903      	bls.n	800b20a <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b202:	23fc      	movs	r3, #252	; 0xfc
 800b204:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b208:	e00f      	b.n	800b22a <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800b20a:	78fb      	ldrb	r3, [r7, #3]
 800b20c:	2b01      	cmp	r3, #1
 800b20e:	d10c      	bne.n	800b22a <VL53L0X_set_vcsel_pulse_period+0x88>
 800b210:	78ba      	ldrb	r2, [r7, #2]
 800b212:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b216:	429a      	cmp	r2, r3
 800b218:	d304      	bcc.n	800b224 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800b21a:	78ba      	ldrb	r2, [r7, #2]
 800b21c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b220:	429a      	cmp	r2, r3
 800b222:	d902      	bls.n	800b22a <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b224:	23fc      	movs	r3, #252	; 0xfc
 800b226:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800b22a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d002      	beq.n	800b238 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800b232:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b236:	e239      	b.n	800b6ac <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800b238:	78fb      	ldrb	r3, [r7, #3]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d150      	bne.n	800b2e0 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800b23e:	78bb      	ldrb	r3, [r7, #2]
 800b240:	2b0c      	cmp	r3, #12
 800b242:	d110      	bne.n	800b266 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800b244:	2218      	movs	r2, #24
 800b246:	2157      	movs	r1, #87	; 0x57
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f001 fb11 	bl	800c870 <VL53L0X_WrByte>
 800b24e:	4603      	mov	r3, r0
 800b250:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800b254:	2208      	movs	r2, #8
 800b256:	2156      	movs	r1, #86	; 0x56
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f001 fb09 	bl	800c870 <VL53L0X_WrByte>
 800b25e:	4603      	mov	r3, r0
 800b260:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b264:	e17f      	b.n	800b566 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800b266:	78bb      	ldrb	r3, [r7, #2]
 800b268:	2b0e      	cmp	r3, #14
 800b26a:	d110      	bne.n	800b28e <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800b26c:	2230      	movs	r2, #48	; 0x30
 800b26e:	2157      	movs	r1, #87	; 0x57
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f001 fafd 	bl	800c870 <VL53L0X_WrByte>
 800b276:	4603      	mov	r3, r0
 800b278:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800b27c:	2208      	movs	r2, #8
 800b27e:	2156      	movs	r1, #86	; 0x56
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f001 faf5 	bl	800c870 <VL53L0X_WrByte>
 800b286:	4603      	mov	r3, r0
 800b288:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b28c:	e16b      	b.n	800b566 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800b28e:	78bb      	ldrb	r3, [r7, #2]
 800b290:	2b10      	cmp	r3, #16
 800b292:	d110      	bne.n	800b2b6 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800b294:	2240      	movs	r2, #64	; 0x40
 800b296:	2157      	movs	r1, #87	; 0x57
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f001 fae9 	bl	800c870 <VL53L0X_WrByte>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800b2a4:	2208      	movs	r2, #8
 800b2a6:	2156      	movs	r1, #86	; 0x56
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	f001 fae1 	bl	800c870 <VL53L0X_WrByte>
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b2b4:	e157      	b.n	800b566 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800b2b6:	78bb      	ldrb	r3, [r7, #2]
 800b2b8:	2b12      	cmp	r3, #18
 800b2ba:	f040 8154 	bne.w	800b566 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800b2be:	2250      	movs	r2, #80	; 0x50
 800b2c0:	2157      	movs	r1, #87	; 0x57
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f001 fad4 	bl	800c870 <VL53L0X_WrByte>
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800b2ce:	2208      	movs	r2, #8
 800b2d0:	2156      	movs	r1, #86	; 0x56
 800b2d2:	6878      	ldr	r0, [r7, #4]
 800b2d4:	f001 facc 	bl	800c870 <VL53L0X_WrByte>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b2de:	e142      	b.n	800b566 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800b2e0:	78fb      	ldrb	r3, [r7, #3]
 800b2e2:	2b01      	cmp	r3, #1
 800b2e4:	f040 813f 	bne.w	800b566 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800b2e8:	78bb      	ldrb	r3, [r7, #2]
 800b2ea:	2b08      	cmp	r3, #8
 800b2ec:	d14c      	bne.n	800b388 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800b2ee:	2210      	movs	r2, #16
 800b2f0:	2148      	movs	r1, #72	; 0x48
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f001 fabc 	bl	800c870 <VL53L0X_WrByte>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800b2fe:	2208      	movs	r2, #8
 800b300:	2147      	movs	r1, #71	; 0x47
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f001 fab4 	bl	800c870 <VL53L0X_WrByte>
 800b308:	4603      	mov	r3, r0
 800b30a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800b30e:	2202      	movs	r2, #2
 800b310:	2132      	movs	r1, #50	; 0x32
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	f001 faac 	bl	800c870 <VL53L0X_WrByte>
 800b318:	4603      	mov	r3, r0
 800b31a:	461a      	mov	r2, r3
 800b31c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b320:	4313      	orrs	r3, r2
 800b322:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800b326:	220c      	movs	r2, #12
 800b328:	2130      	movs	r1, #48	; 0x30
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f001 faa0 	bl	800c870 <VL53L0X_WrByte>
 800b330:	4603      	mov	r3, r0
 800b332:	461a      	mov	r2, r3
 800b334:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b338:	4313      	orrs	r3, r2
 800b33a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800b33e:	2201      	movs	r2, #1
 800b340:	21ff      	movs	r1, #255	; 0xff
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f001 fa94 	bl	800c870 <VL53L0X_WrByte>
 800b348:	4603      	mov	r3, r0
 800b34a:	461a      	mov	r2, r3
 800b34c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b350:	4313      	orrs	r3, r2
 800b352:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800b356:	2230      	movs	r2, #48	; 0x30
 800b358:	2130      	movs	r1, #48	; 0x30
 800b35a:	6878      	ldr	r0, [r7, #4]
 800b35c:	f001 fa88 	bl	800c870 <VL53L0X_WrByte>
 800b360:	4603      	mov	r3, r0
 800b362:	461a      	mov	r2, r3
 800b364:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b368:	4313      	orrs	r3, r2
 800b36a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800b36e:	2200      	movs	r2, #0
 800b370:	21ff      	movs	r1, #255	; 0xff
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f001 fa7c 	bl	800c870 <VL53L0X_WrByte>
 800b378:	4603      	mov	r3, r0
 800b37a:	461a      	mov	r2, r3
 800b37c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b380:	4313      	orrs	r3, r2
 800b382:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b386:	e0ee      	b.n	800b566 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800b388:	78bb      	ldrb	r3, [r7, #2]
 800b38a:	2b0a      	cmp	r3, #10
 800b38c:	d14c      	bne.n	800b428 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800b38e:	2228      	movs	r2, #40	; 0x28
 800b390:	2148      	movs	r1, #72	; 0x48
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f001 fa6c 	bl	800c870 <VL53L0X_WrByte>
 800b398:	4603      	mov	r3, r0
 800b39a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800b39e:	2208      	movs	r2, #8
 800b3a0:	2147      	movs	r1, #71	; 0x47
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f001 fa64 	bl	800c870 <VL53L0X_WrByte>
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800b3ae:	2203      	movs	r2, #3
 800b3b0:	2132      	movs	r1, #50	; 0x32
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	f001 fa5c 	bl	800c870 <VL53L0X_WrByte>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	461a      	mov	r2, r3
 800b3bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b3c0:	4313      	orrs	r3, r2
 800b3c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800b3c6:	2209      	movs	r2, #9
 800b3c8:	2130      	movs	r1, #48	; 0x30
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f001 fa50 	bl	800c870 <VL53L0X_WrByte>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	461a      	mov	r2, r3
 800b3d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b3d8:	4313      	orrs	r3, r2
 800b3da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800b3de:	2201      	movs	r2, #1
 800b3e0:	21ff      	movs	r1, #255	; 0xff
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f001 fa44 	bl	800c870 <VL53L0X_WrByte>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	461a      	mov	r2, r3
 800b3ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b3f0:	4313      	orrs	r3, r2
 800b3f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800b3f6:	2220      	movs	r2, #32
 800b3f8:	2130      	movs	r1, #48	; 0x30
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f001 fa38 	bl	800c870 <VL53L0X_WrByte>
 800b400:	4603      	mov	r3, r0
 800b402:	461a      	mov	r2, r3
 800b404:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b408:	4313      	orrs	r3, r2
 800b40a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800b40e:	2200      	movs	r2, #0
 800b410:	21ff      	movs	r1, #255	; 0xff
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f001 fa2c 	bl	800c870 <VL53L0X_WrByte>
 800b418:	4603      	mov	r3, r0
 800b41a:	461a      	mov	r2, r3
 800b41c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b420:	4313      	orrs	r3, r2
 800b422:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b426:	e09e      	b.n	800b566 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800b428:	78bb      	ldrb	r3, [r7, #2]
 800b42a:	2b0c      	cmp	r3, #12
 800b42c:	d14c      	bne.n	800b4c8 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800b42e:	2238      	movs	r2, #56	; 0x38
 800b430:	2148      	movs	r1, #72	; 0x48
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	f001 fa1c 	bl	800c870 <VL53L0X_WrByte>
 800b438:	4603      	mov	r3, r0
 800b43a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800b43e:	2208      	movs	r2, #8
 800b440:	2147      	movs	r1, #71	; 0x47
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	f001 fa14 	bl	800c870 <VL53L0X_WrByte>
 800b448:	4603      	mov	r3, r0
 800b44a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800b44e:	2203      	movs	r2, #3
 800b450:	2132      	movs	r1, #50	; 0x32
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f001 fa0c 	bl	800c870 <VL53L0X_WrByte>
 800b458:	4603      	mov	r3, r0
 800b45a:	461a      	mov	r2, r3
 800b45c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b460:	4313      	orrs	r3, r2
 800b462:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800b466:	2208      	movs	r2, #8
 800b468:	2130      	movs	r1, #48	; 0x30
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f001 fa00 	bl	800c870 <VL53L0X_WrByte>
 800b470:	4603      	mov	r3, r0
 800b472:	461a      	mov	r2, r3
 800b474:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b478:	4313      	orrs	r3, r2
 800b47a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800b47e:	2201      	movs	r2, #1
 800b480:	21ff      	movs	r1, #255	; 0xff
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f001 f9f4 	bl	800c870 <VL53L0X_WrByte>
 800b488:	4603      	mov	r3, r0
 800b48a:	461a      	mov	r2, r3
 800b48c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b490:	4313      	orrs	r3, r2
 800b492:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800b496:	2220      	movs	r2, #32
 800b498:	2130      	movs	r1, #48	; 0x30
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f001 f9e8 	bl	800c870 <VL53L0X_WrByte>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	461a      	mov	r2, r3
 800b4a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4a8:	4313      	orrs	r3, r2
 800b4aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	21ff      	movs	r1, #255	; 0xff
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f001 f9dc 	bl	800c870 <VL53L0X_WrByte>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	461a      	mov	r2, r3
 800b4bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4c0:	4313      	orrs	r3, r2
 800b4c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b4c6:	e04e      	b.n	800b566 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800b4c8:	78bb      	ldrb	r3, [r7, #2]
 800b4ca:	2b0e      	cmp	r3, #14
 800b4cc:	d14b      	bne.n	800b566 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800b4ce:	2248      	movs	r2, #72	; 0x48
 800b4d0:	2148      	movs	r1, #72	; 0x48
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f001 f9cc 	bl	800c870 <VL53L0X_WrByte>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800b4de:	2208      	movs	r2, #8
 800b4e0:	2147      	movs	r1, #71	; 0x47
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f001 f9c4 	bl	800c870 <VL53L0X_WrByte>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800b4ee:	2203      	movs	r2, #3
 800b4f0:	2132      	movs	r1, #50	; 0x32
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f001 f9bc 	bl	800c870 <VL53L0X_WrByte>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	461a      	mov	r2, r3
 800b4fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b500:	4313      	orrs	r3, r2
 800b502:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800b506:	2207      	movs	r2, #7
 800b508:	2130      	movs	r1, #48	; 0x30
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	f001 f9b0 	bl	800c870 <VL53L0X_WrByte>
 800b510:	4603      	mov	r3, r0
 800b512:	461a      	mov	r2, r3
 800b514:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b518:	4313      	orrs	r3, r2
 800b51a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800b51e:	2201      	movs	r2, #1
 800b520:	21ff      	movs	r1, #255	; 0xff
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f001 f9a4 	bl	800c870 <VL53L0X_WrByte>
 800b528:	4603      	mov	r3, r0
 800b52a:	461a      	mov	r2, r3
 800b52c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b530:	4313      	orrs	r3, r2
 800b532:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800b536:	2220      	movs	r2, #32
 800b538:	2130      	movs	r1, #48	; 0x30
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f001 f998 	bl	800c870 <VL53L0X_WrByte>
 800b540:	4603      	mov	r3, r0
 800b542:	461a      	mov	r2, r3
 800b544:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b548:	4313      	orrs	r3, r2
 800b54a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800b54e:	2200      	movs	r2, #0
 800b550:	21ff      	movs	r1, #255	; 0xff
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f001 f98c 	bl	800c870 <VL53L0X_WrByte>
 800b558:	4603      	mov	r3, r0
 800b55a:	461a      	mov	r2, r3
 800b55c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b560:	4313      	orrs	r3, r2
 800b562:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800b566:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d17f      	bne.n	800b66e <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800b56e:	78bb      	ldrb	r3, [r7, #2]
 800b570:	4618      	mov	r0, r3
 800b572:	f7fe fe38 	bl	800a1e6 <VL53L0X_encode_vcsel_period>
 800b576:	4603      	mov	r3, r0
 800b578:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800b57c:	78fb      	ldrb	r3, [r7, #3]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d002      	beq.n	800b588 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800b582:	2b01      	cmp	r3, #1
 800b584:	d045      	beq.n	800b612 <VL53L0X_set_vcsel_pulse_period+0x470>
 800b586:	e06e      	b.n	800b666 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800b588:	f107 0314 	add.w	r3, r7, #20
 800b58c:	461a      	mov	r2, r3
 800b58e:	2103      	movs	r1, #3
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	f7ff fc33 	bl	800adfc <get_sequence_step_timeout>
 800b596:	4603      	mov	r3, r0
 800b598:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800b59c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d109      	bne.n	800b5b8 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800b5a4:	f107 0310 	add.w	r3, r7, #16
 800b5a8:	461a      	mov	r2, r3
 800b5aa:	2102      	movs	r1, #2
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	f7ff fc25 	bl	800adfc <get_sequence_step_timeout>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800b5b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d109      	bne.n	800b5d4 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800b5c0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b5c4:	461a      	mov	r2, r3
 800b5c6:	2150      	movs	r1, #80	; 0x50
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f001 f951 	bl	800c870 <VL53L0X_WrByte>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800b5d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d108      	bne.n	800b5ee <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800b5dc:	697b      	ldr	r3, [r7, #20]
 800b5de:	461a      	mov	r2, r3
 800b5e0:	2103      	movs	r1, #3
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f7ff fceb 	bl	800afbe <set_sequence_step_timeout>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800b5ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d108      	bne.n	800b608 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800b5f6:	693b      	ldr	r3, [r7, #16]
 800b5f8:	461a      	mov	r2, r3
 800b5fa:	2102      	movs	r1, #2
 800b5fc:	6878      	ldr	r0, [r7, #4]
 800b5fe:	f7ff fcde 	bl	800afbe <set_sequence_step_timeout>
 800b602:	4603      	mov	r3, r0
 800b604:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	78ba      	ldrb	r2, [r7, #2]
 800b60c:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800b610:	e02e      	b.n	800b670 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800b612:	f107 0318 	add.w	r3, r7, #24
 800b616:	461a      	mov	r2, r3
 800b618:	2104      	movs	r1, #4
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f7ff fbee 	bl	800adfc <get_sequence_step_timeout>
 800b620:	4603      	mov	r3, r0
 800b622:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800b626:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d109      	bne.n	800b642 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800b62e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b632:	461a      	mov	r2, r3
 800b634:	2170      	movs	r1, #112	; 0x70
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f001 f91a 	bl	800c870 <VL53L0X_WrByte>
 800b63c:	4603      	mov	r3, r0
 800b63e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800b642:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b646:	2b00      	cmp	r3, #0
 800b648:	d108      	bne.n	800b65c <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800b64a:	69bb      	ldr	r3, [r7, #24]
 800b64c:	461a      	mov	r2, r3
 800b64e:	2104      	movs	r1, #4
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f7ff fcb4 	bl	800afbe <set_sequence_step_timeout>
 800b656:	4603      	mov	r3, r0
 800b658:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	78ba      	ldrb	r2, [r7, #2]
 800b660:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800b664:	e004      	b.n	800b670 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b666:	23fc      	movs	r3, #252	; 0xfc
 800b668:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b66c:	e000      	b.n	800b670 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 800b66e:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800b670:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b674:	2b00      	cmp	r3, #0
 800b676:	d109      	bne.n	800b68c <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	695b      	ldr	r3, [r3, #20]
 800b67c:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800b67e:	69f9      	ldr	r1, [r7, #28]
 800b680:	6878      	ldr	r0, [r7, #4]
 800b682:	f7fc fe1d 	bl	80082c0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800b686:	4603      	mov	r3, r0
 800b688:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800b68c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b690:	2b00      	cmp	r3, #0
 800b692:	d109      	bne.n	800b6a8 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 800b694:	f107 010f 	add.w	r1, r7, #15
 800b698:	2301      	movs	r3, #1
 800b69a:	2200      	movs	r2, #0
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f7fe fcbd 	bl	800a01c <VL53L0X_perform_phase_calibration>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800b6a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	3728      	adds	r7, #40	; 0x28
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}

0800b6b4 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b086      	sub	sp, #24
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	60f8      	str	r0, [r7, #12]
 800b6bc:	460b      	mov	r3, r1
 800b6be:	607a      	str	r2, [r7, #4]
 800b6c0:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800b6c6:	7afb      	ldrb	r3, [r7, #11]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d002      	beq.n	800b6d2 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800b6cc:	2b01      	cmp	r3, #1
 800b6ce:	d00a      	beq.n	800b6e6 <VL53L0X_get_vcsel_pulse_period+0x32>
 800b6d0:	e013      	b.n	800b6fa <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800b6d2:	f107 0316 	add.w	r3, r7, #22
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	2150      	movs	r1, #80	; 0x50
 800b6da:	68f8      	ldr	r0, [r7, #12]
 800b6dc:	f001 f94a 	bl	800c974 <VL53L0X_RdByte>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800b6e4:	e00b      	b.n	800b6fe <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800b6e6:	f107 0316 	add.w	r3, r7, #22
 800b6ea:	461a      	mov	r2, r3
 800b6ec:	2170      	movs	r1, #112	; 0x70
 800b6ee:	68f8      	ldr	r0, [r7, #12]
 800b6f0:	f001 f940 	bl	800c974 <VL53L0X_RdByte>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800b6f8:	e001      	b.n	800b6fe <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b6fa:	23fc      	movs	r3, #252	; 0xfc
 800b6fc:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800b6fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d107      	bne.n	800b716 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800b706:	7dbb      	ldrb	r3, [r7, #22]
 800b708:	4618      	mov	r0, r3
 800b70a:	f7fe fd59 	bl	800a1c0 <VL53L0X_decode_vcsel_period>
 800b70e:	4603      	mov	r3, r0
 800b710:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	701a      	strb	r2, [r3, #0]

	return Status;
 800b716:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	3718      	adds	r7, #24
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}

0800b722 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800b722:	b580      	push	{r7, lr}
 800b724:	b092      	sub	sp, #72	; 0x48
 800b726:	af00      	add	r7, sp, #0
 800b728:	6078      	str	r0, [r7, #4]
 800b72a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b72c:	2300      	movs	r3, #0
 800b72e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800b732:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800b736:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800b738:	f240 7376 	movw	r3, #1910	; 0x776
 800b73c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800b73e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800b742:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800b744:	f44f 7325 	mov.w	r3, #660	; 0x294
 800b748:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800b74a:	f240 234e 	movw	r3, #590	; 0x24e
 800b74e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800b750:	f240 23b2 	movw	r3, #690	; 0x2b2
 800b754:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800b756:	f44f 7325 	mov.w	r3, #660	; 0x294
 800b75a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800b75c:	f240 2326 	movw	r3, #550	; 0x226
 800b760:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800b762:	2300      	movs	r3, #0
 800b764:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800b766:	f644 6320 	movw	r3, #20000	; 0x4e20
 800b76a:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800b76c:	2300      	movs	r3, #0
 800b76e:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800b770:	683a      	ldr	r2, [r7, #0]
 800b772:	6a3b      	ldr	r3, [r7, #32]
 800b774:	429a      	cmp	r2, r3
 800b776:	d205      	bcs.n	800b784 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b778:	23fc      	movs	r3, #252	; 0xfc
 800b77a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800b77e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800b782:	e0aa      	b.n	800b8da <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800b784:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b788:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800b78a:	683a      	ldr	r2, [r7, #0]
 800b78c:	1ad3      	subs	r3, r2, r3
 800b78e:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800b790:	f107 0314 	add.w	r3, r7, #20
 800b794:	4619      	mov	r1, r3
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f7fc fedc 	bl	8008554 <VL53L0X_GetSequenceStepEnables>
 800b79c:	4603      	mov	r3, r0
 800b79e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800b7a2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d15b      	bne.n	800b862 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800b7aa:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d105      	bne.n	800b7bc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800b7b0:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d102      	bne.n	800b7bc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800b7b6:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d052      	beq.n	800b862 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800b7bc:	f107 0310 	add.w	r3, r7, #16
 800b7c0:	461a      	mov	r2, r3
 800b7c2:	2102      	movs	r1, #2
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f7ff fb19 	bl	800adfc <get_sequence_step_timeout>
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800b7d0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d002      	beq.n	800b7de <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800b7d8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800b7dc:	e07d      	b.n	800b8da <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800b7de:	7d3b      	ldrb	r3, [r7, #20]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d00f      	beq.n	800b804 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800b7e4:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800b7e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7e8:	4413      	add	r3, r2
 800b7ea:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800b7ec:	69fa      	ldr	r2, [r7, #28]
 800b7ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7f0:	429a      	cmp	r2, r3
 800b7f2:	d204      	bcs.n	800b7fe <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800b7f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b7f6:	69fb      	ldr	r3, [r7, #28]
 800b7f8:	1ad3      	subs	r3, r2, r3
 800b7fa:	643b      	str	r3, [r7, #64]	; 0x40
 800b7fc:	e002      	b.n	800b804 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b7fe:	23fc      	movs	r3, #252	; 0xfc
 800b800:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800b804:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d002      	beq.n	800b812 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800b80c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800b810:	e063      	b.n	800b8da <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800b812:	7dbb      	ldrb	r3, [r7, #22]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d011      	beq.n	800b83c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800b818:	693a      	ldr	r2, [r7, #16]
 800b81a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b81c:	4413      	add	r3, r2
 800b81e:	005b      	lsls	r3, r3, #1
 800b820:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800b822:	69fa      	ldr	r2, [r7, #28]
 800b824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b826:	429a      	cmp	r2, r3
 800b828:	d204      	bcs.n	800b834 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800b82a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b82c:	69fb      	ldr	r3, [r7, #28]
 800b82e:	1ad3      	subs	r3, r2, r3
 800b830:	643b      	str	r3, [r7, #64]	; 0x40
 800b832:	e016      	b.n	800b862 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b834:	23fc      	movs	r3, #252	; 0xfc
 800b836:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b83a:	e012      	b.n	800b862 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800b83c:	7d7b      	ldrb	r3, [r7, #21]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d00f      	beq.n	800b862 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b846:	4413      	add	r3, r2
 800b848:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800b84a:	69fa      	ldr	r2, [r7, #28]
 800b84c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b84e:	429a      	cmp	r2, r3
 800b850:	d204      	bcs.n	800b85c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800b852:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b854:	69fb      	ldr	r3, [r7, #28]
 800b856:	1ad3      	subs	r3, r2, r3
 800b858:	643b      	str	r3, [r7, #64]	; 0x40
 800b85a:	e002      	b.n	800b862 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b85c:	23fc      	movs	r3, #252	; 0xfc
 800b85e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800b862:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800b866:	2b00      	cmp	r3, #0
 800b868:	d002      	beq.n	800b870 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800b86a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800b86e:	e034      	b.n	800b8da <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800b870:	7dfb      	ldrb	r3, [r7, #23]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d019      	beq.n	800b8aa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800b876:	f107 030c 	add.w	r3, r7, #12
 800b87a:	461a      	mov	r2, r3
 800b87c:	2103      	movs	r1, #3
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f7ff fabc 	bl	800adfc <get_sequence_step_timeout>
 800b884:	4603      	mov	r3, r0
 800b886:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b88e:	4413      	add	r3, r2
 800b890:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800b892:	69fa      	ldr	r2, [r7, #28]
 800b894:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b896:	429a      	cmp	r2, r3
 800b898:	d204      	bcs.n	800b8a4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800b89a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b89c:	69fb      	ldr	r3, [r7, #28]
 800b89e:	1ad3      	subs	r3, r2, r3
 800b8a0:	643b      	str	r3, [r7, #64]	; 0x40
 800b8a2:	e002      	b.n	800b8aa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b8a4:	23fc      	movs	r3, #252	; 0xfc
 800b8a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800b8aa:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d111      	bne.n	800b8d6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800b8b2:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d00e      	beq.n	800b8d6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800b8b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8bc:	1ad3      	subs	r3, r2, r3
 800b8be:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800b8c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b8c2:	2104      	movs	r1, #4
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f7ff fb7a 	bl	800afbe <set_sequence_step_timeout>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	683a      	ldr	r2, [r7, #0]
 800b8d4:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800b8d6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3748      	adds	r7, #72	; 0x48
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}

0800b8e2 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800b8e2:	b580      	push	{r7, lr}
 800b8e4:	b090      	sub	sp, #64	; 0x40
 800b8e6:	af00      	add	r7, sp, #0
 800b8e8:	6078      	str	r0, [r7, #4]
 800b8ea:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800b8f2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800b8f6:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800b8f8:	f240 7376 	movw	r3, #1910	; 0x776
 800b8fc:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800b8fe:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800b902:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800b904:	f44f 7325 	mov.w	r3, #660	; 0x294
 800b908:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800b90a:	f240 234e 	movw	r3, #590	; 0x24e
 800b90e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800b910:	f240 23b2 	movw	r3, #690	; 0x2b2
 800b914:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800b916:	f44f 7325 	mov.w	r3, #660	; 0x294
 800b91a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800b91c:	f240 2326 	movw	r3, #550	; 0x226
 800b920:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800b922:	2300      	movs	r3, #0
 800b924:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800b926:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b92a:	441a      	add	r2, r3
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800b930:	f107 0318 	add.w	r3, r7, #24
 800b934:	4619      	mov	r1, r3
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f7fc fe0c 	bl	8008554 <VL53L0X_GetSequenceStepEnables>
 800b93c:	4603      	mov	r3, r0
 800b93e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800b942:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b946:	2b00      	cmp	r3, #0
 800b948:	d002      	beq.n	800b950 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800b94a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b94e:	e075      	b.n	800ba3c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800b950:	7e3b      	ldrb	r3, [r7, #24]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d105      	bne.n	800b962 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800b956:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d102      	bne.n	800b962 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800b95c:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d030      	beq.n	800b9c4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800b962:	f107 0310 	add.w	r3, r7, #16
 800b966:	461a      	mov	r2, r3
 800b968:	2102      	movs	r1, #2
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f7ff fa46 	bl	800adfc <get_sequence_step_timeout>
 800b970:	4603      	mov	r3, r0
 800b972:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800b976:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d122      	bne.n	800b9c4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800b97e:	7e3b      	ldrb	r3, [r7, #24]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d007      	beq.n	800b994 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800b988:	6939      	ldr	r1, [r7, #16]
 800b98a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b98c:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800b98e:	441a      	add	r2, r3
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800b994:	7ebb      	ldrb	r3, [r7, #26]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d009      	beq.n	800b9ae <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800b99e:	6939      	ldr	r1, [r7, #16]
 800b9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a2:	440b      	add	r3, r1
 800b9a4:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800b9a6:	441a      	add	r2, r3
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	601a      	str	r2, [r3, #0]
 800b9ac:	e00a      	b.n	800b9c4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800b9ae:	7e7b      	ldrb	r3, [r7, #25]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d007      	beq.n	800b9c4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800b9b8:	6939      	ldr	r1, [r7, #16]
 800b9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9bc:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800b9be:	441a      	add	r2, r3
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b9c4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d114      	bne.n	800b9f6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800b9cc:	7efb      	ldrb	r3, [r7, #27]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d011      	beq.n	800b9f6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800b9d2:	f107 030c 	add.w	r3, r7, #12
 800b9d6:	461a      	mov	r2, r3
 800b9d8:	2103      	movs	r1, #3
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f7ff fa0e 	bl	800adfc <get_sequence_step_timeout>
 800b9e0:	4603      	mov	r3, r0
 800b9e2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800b9ea:	68f9      	ldr	r1, [r7, #12]
 800b9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ee:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800b9f0:	441a      	add	r2, r3
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b9f6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d114      	bne.n	800ba28 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800b9fe:	7f3b      	ldrb	r3, [r7, #28]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d011      	beq.n	800ba28 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800ba04:	f107 0314 	add.w	r3, r7, #20
 800ba08:	461a      	mov	r2, r3
 800ba0a:	2104      	movs	r1, #4
 800ba0c:	6878      	ldr	r0, [r7, #4]
 800ba0e:	f7ff f9f5 	bl	800adfc <get_sequence_step_timeout>
 800ba12:	4603      	mov	r3, r0
 800ba14:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800ba1c:	6979      	ldr	r1, [r7, #20]
 800ba1e:	6a3b      	ldr	r3, [r7, #32]
 800ba20:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800ba22:	441a      	add	r2, r3
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ba28:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d103      	bne.n	800ba38 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	681a      	ldr	r2, [r3, #0]
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ba38:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	3740      	adds	r7, #64	; 0x40
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}

0800ba44 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b088      	sub	sp, #32
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
 800ba4c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800ba52:	2300      	movs	r3, #0
 800ba54:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800ba56:	e0c6      	b.n	800bbe6 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800ba58:	697b      	ldr	r3, [r7, #20]
 800ba5a:	683a      	ldr	r2, [r7, #0]
 800ba5c:	4413      	add	r3, r2
 800ba5e:	781b      	ldrb	r3, [r3, #0]
 800ba60:	74fb      	strb	r3, [r7, #19]
		Index++;
 800ba62:	697b      	ldr	r3, [r7, #20]
 800ba64:	3301      	adds	r3, #1
 800ba66:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800ba68:	7cfb      	ldrb	r3, [r7, #19]
 800ba6a:	2bff      	cmp	r3, #255	; 0xff
 800ba6c:	f040 808d 	bne.w	800bb8a <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800ba70:	697b      	ldr	r3, [r7, #20]
 800ba72:	683a      	ldr	r2, [r7, #0]
 800ba74:	4413      	add	r3, r2
 800ba76:	781b      	ldrb	r3, [r3, #0]
 800ba78:	747b      	strb	r3, [r7, #17]
			Index++;
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	3301      	adds	r3, #1
 800ba7e:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800ba80:	7c7b      	ldrb	r3, [r7, #17]
 800ba82:	2b03      	cmp	r3, #3
 800ba84:	d87e      	bhi.n	800bb84 <VL53L0X_load_tuning_settings+0x140>
 800ba86:	a201      	add	r2, pc, #4	; (adr r2, 800ba8c <VL53L0X_load_tuning_settings+0x48>)
 800ba88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba8c:	0800ba9d 	.word	0x0800ba9d
 800ba90:	0800bad7 	.word	0x0800bad7
 800ba94:	0800bb11 	.word	0x0800bb11
 800ba98:	0800bb4b 	.word	0x0800bb4b
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800ba9c:	697b      	ldr	r3, [r7, #20]
 800ba9e:	683a      	ldr	r2, [r7, #0]
 800baa0:	4413      	add	r3, r2
 800baa2:	781b      	ldrb	r3, [r3, #0]
 800baa4:	743b      	strb	r3, [r7, #16]
				Index++;
 800baa6:	697b      	ldr	r3, [r7, #20]
 800baa8:	3301      	adds	r3, #1
 800baaa:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800baac:	697b      	ldr	r3, [r7, #20]
 800baae:	683a      	ldr	r2, [r7, #0]
 800bab0:	4413      	add	r3, r2
 800bab2:	781b      	ldrb	r3, [r3, #0]
 800bab4:	73fb      	strb	r3, [r7, #15]
				Index++;
 800bab6:	697b      	ldr	r3, [r7, #20]
 800bab8:	3301      	adds	r3, #1
 800baba:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800babc:	7c3b      	ldrb	r3, [r7, #16]
 800babe:	b29b      	uxth	r3, r3
 800bac0:	021b      	lsls	r3, r3, #8
 800bac2:	b29a      	uxth	r2, r3
 800bac4:	7bfb      	ldrb	r3, [r7, #15]
 800bac6:	b29b      	uxth	r3, r3
 800bac8:	4413      	add	r3, r2
 800baca:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	89ba      	ldrh	r2, [r7, #12]
 800bad0:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800bad4:	e087      	b.n	800bbe6 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800bad6:	697b      	ldr	r3, [r7, #20]
 800bad8:	683a      	ldr	r2, [r7, #0]
 800bada:	4413      	add	r3, r2
 800badc:	781b      	ldrb	r3, [r3, #0]
 800bade:	743b      	strb	r3, [r7, #16]
				Index++;
 800bae0:	697b      	ldr	r3, [r7, #20]
 800bae2:	3301      	adds	r3, #1
 800bae4:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800bae6:	697b      	ldr	r3, [r7, #20]
 800bae8:	683a      	ldr	r2, [r7, #0]
 800baea:	4413      	add	r3, r2
 800baec:	781b      	ldrb	r3, [r3, #0]
 800baee:	73fb      	strb	r3, [r7, #15]
				Index++;
 800baf0:	697b      	ldr	r3, [r7, #20]
 800baf2:	3301      	adds	r3, #1
 800baf4:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800baf6:	7c3b      	ldrb	r3, [r7, #16]
 800baf8:	b29b      	uxth	r3, r3
 800bafa:	021b      	lsls	r3, r3, #8
 800bafc:	b29a      	uxth	r2, r3
 800bafe:	7bfb      	ldrb	r3, [r7, #15]
 800bb00:	b29b      	uxth	r3, r3
 800bb02:	4413      	add	r3, r2
 800bb04:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	89ba      	ldrh	r2, [r7, #12]
 800bb0a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800bb0e:	e06a      	b.n	800bbe6 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800bb10:	697b      	ldr	r3, [r7, #20]
 800bb12:	683a      	ldr	r2, [r7, #0]
 800bb14:	4413      	add	r3, r2
 800bb16:	781b      	ldrb	r3, [r3, #0]
 800bb18:	743b      	strb	r3, [r7, #16]
				Index++;
 800bb1a:	697b      	ldr	r3, [r7, #20]
 800bb1c:	3301      	adds	r3, #1
 800bb1e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800bb20:	697b      	ldr	r3, [r7, #20]
 800bb22:	683a      	ldr	r2, [r7, #0]
 800bb24:	4413      	add	r3, r2
 800bb26:	781b      	ldrb	r3, [r3, #0]
 800bb28:	73fb      	strb	r3, [r7, #15]
				Index++;
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	3301      	adds	r3, #1
 800bb2e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800bb30:	7c3b      	ldrb	r3, [r7, #16]
 800bb32:	b29b      	uxth	r3, r3
 800bb34:	021b      	lsls	r3, r3, #8
 800bb36:	b29a      	uxth	r2, r3
 800bb38:	7bfb      	ldrb	r3, [r7, #15]
 800bb3a:	b29b      	uxth	r3, r3
 800bb3c:	4413      	add	r3, r2
 800bb3e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	89ba      	ldrh	r2, [r7, #12]
 800bb44:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800bb48:	e04d      	b.n	800bbe6 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	683a      	ldr	r2, [r7, #0]
 800bb4e:	4413      	add	r3, r2
 800bb50:	781b      	ldrb	r3, [r3, #0]
 800bb52:	743b      	strb	r3, [r7, #16]
				Index++;
 800bb54:	697b      	ldr	r3, [r7, #20]
 800bb56:	3301      	adds	r3, #1
 800bb58:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800bb5a:	697b      	ldr	r3, [r7, #20]
 800bb5c:	683a      	ldr	r2, [r7, #0]
 800bb5e:	4413      	add	r3, r2
 800bb60:	781b      	ldrb	r3, [r3, #0]
 800bb62:	73fb      	strb	r3, [r7, #15]
				Index++;
 800bb64:	697b      	ldr	r3, [r7, #20]
 800bb66:	3301      	adds	r3, #1
 800bb68:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800bb6a:	7c3b      	ldrb	r3, [r7, #16]
 800bb6c:	b29b      	uxth	r3, r3
 800bb6e:	021b      	lsls	r3, r3, #8
 800bb70:	b29a      	uxth	r2, r3
 800bb72:	7bfb      	ldrb	r3, [r7, #15]
 800bb74:	b29b      	uxth	r3, r3
 800bb76:	4413      	add	r3, r2
 800bb78:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	89ba      	ldrh	r2, [r7, #12]
 800bb7e:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800bb82:	e030      	b.n	800bbe6 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bb84:	23fc      	movs	r3, #252	; 0xfc
 800bb86:	77fb      	strb	r3, [r7, #31]
 800bb88:	e02d      	b.n	800bbe6 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800bb8a:	7cfb      	ldrb	r3, [r7, #19]
 800bb8c:	2b04      	cmp	r3, #4
 800bb8e:	d828      	bhi.n	800bbe2 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	683a      	ldr	r2, [r7, #0]
 800bb94:	4413      	add	r3, r2
 800bb96:	781b      	ldrb	r3, [r3, #0]
 800bb98:	74bb      	strb	r3, [r7, #18]
			Index++;
 800bb9a:	697b      	ldr	r3, [r7, #20]
 800bb9c:	3301      	adds	r3, #1
 800bb9e:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800bba0:	2300      	movs	r3, #0
 800bba2:	61bb      	str	r3, [r7, #24]
 800bba4:	e00f      	b.n	800bbc6 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800bba6:	697b      	ldr	r3, [r7, #20]
 800bba8:	683a      	ldr	r2, [r7, #0]
 800bbaa:	4413      	add	r3, r2
 800bbac:	7819      	ldrb	r1, [r3, #0]
 800bbae:	f107 0208 	add.w	r2, r7, #8
 800bbb2:	69bb      	ldr	r3, [r7, #24]
 800bbb4:	4413      	add	r3, r2
 800bbb6:	460a      	mov	r2, r1
 800bbb8:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800bbba:	697b      	ldr	r3, [r7, #20]
 800bbbc:	3301      	adds	r3, #1
 800bbbe:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800bbc0:	69bb      	ldr	r3, [r7, #24]
 800bbc2:	3301      	adds	r3, #1
 800bbc4:	61bb      	str	r3, [r7, #24]
 800bbc6:	7cfb      	ldrb	r3, [r7, #19]
 800bbc8:	69ba      	ldr	r2, [r7, #24]
 800bbca:	429a      	cmp	r2, r3
 800bbcc:	dbeb      	blt.n	800bba6 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800bbce:	7cfb      	ldrb	r3, [r7, #19]
 800bbd0:	f107 0208 	add.w	r2, r7, #8
 800bbd4:	7cb9      	ldrb	r1, [r7, #18]
 800bbd6:	6878      	ldr	r0, [r7, #4]
 800bbd8:	f000 fdee 	bl	800c7b8 <VL53L0X_WriteMulti>
 800bbdc:	4603      	mov	r3, r0
 800bbde:	77fb      	strb	r3, [r7, #31]
 800bbe0:	e001      	b.n	800bbe6 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bbe2:	23fc      	movs	r3, #252	; 0xfc
 800bbe4:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800bbe6:	697b      	ldr	r3, [r7, #20]
 800bbe8:	683a      	ldr	r2, [r7, #0]
 800bbea:	4413      	add	r3, r2
 800bbec:	781b      	ldrb	r3, [r3, #0]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d004      	beq.n	800bbfc <VL53L0X_load_tuning_settings+0x1b8>
 800bbf2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	f43f af2e 	beq.w	800ba58 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bbfc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bc00:	4618      	mov	r0, r3
 800bc02:	3720      	adds	r7, #32
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd80      	pop	{r7, pc}

0800bc08 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b088      	sub	sp, #32
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	60f8      	str	r0, [r7, #12]
 800bc10:	60b9      	str	r1, [r7, #8]
 800bc12:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bc14:	2300      	movs	r3, #0
 800bc16:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800bc1e:	f107 0313 	add.w	r3, r7, #19
 800bc22:	4619      	mov	r1, r3
 800bc24:	68f8      	ldr	r0, [r7, #12]
 800bc26:	f7fc fd21 	bl	800866c <VL53L0X_GetXTalkCompensationEnable>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800bc2e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d111      	bne.n	800bc5a <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800bc36:	7cfb      	ldrb	r3, [r7, #19]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d00e      	beq.n	800bc5a <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	6a1b      	ldr	r3, [r3, #32]
 800bc40:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	8a9b      	ldrh	r3, [r3, #20]
 800bc46:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800bc48:	69bb      	ldr	r3, [r7, #24]
 800bc4a:	fb02 f303 	mul.w	r3, r2, r3
 800bc4e:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800bc50:	697b      	ldr	r3, [r7, #20]
 800bc52:	3380      	adds	r3, #128	; 0x80
 800bc54:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800bc5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bc5e:	4618      	mov	r0, r3
 800bc60:	3720      	adds	r7, #32
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bd80      	pop	{r7, pc}

0800bc66 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800bc66:	b580      	push	{r7, lr}
 800bc68:	b086      	sub	sp, #24
 800bc6a:	af00      	add	r7, sp, #0
 800bc6c:	60f8      	str	r0, [r7, #12]
 800bc6e:	60b9      	str	r1, [r7, #8]
 800bc70:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bc72:	2300      	movs	r3, #0
 800bc74:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800bc76:	68bb      	ldr	r3, [r7, #8]
 800bc78:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800bc7e:	f107 0310 	add.w	r3, r7, #16
 800bc82:	461a      	mov	r2, r3
 800bc84:	68b9      	ldr	r1, [r7, #8]
 800bc86:	68f8      	ldr	r0, [r7, #12]
 800bc88:	f7ff ffbe 	bl	800bc08 <VL53L0X_get_total_xtalk_rate>
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800bc90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d105      	bne.n	800bca4 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681a      	ldr	r2, [r3, #0]
 800bc9c:	693b      	ldr	r3, [r7, #16]
 800bc9e:	441a      	add	r2, r3
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	601a      	str	r2, [r3, #0]

	return Status;
 800bca4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bca8:	4618      	mov	r0, r3
 800bcaa:	3718      	adds	r7, #24
 800bcac:	46bd      	mov	sp, r7
 800bcae:	bd80      	pop	{r7, pc}

0800bcb0 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b09a      	sub	sp, #104	; 0x68
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	60f8      	str	r0, [r7, #12]
 800bcb8:	60b9      	str	r1, [r7, #8]
 800bcba:	607a      	str	r2, [r7, #4]
 800bcbc:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800bcbe:	2312      	movs	r3, #18
 800bcc0:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800bcc2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bcc6:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800bcc8:	2342      	movs	r3, #66	; 0x42
 800bcca:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800bccc:	2306      	movs	r3, #6
 800bcce:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800bcd0:	2307      	movs	r3, #7
 800bcd2:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800bce0:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800bce8:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800bcea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bcee:	fb02 f303 	mul.w	r3, r2, r3
 800bcf2:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800bcf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcf6:	3380      	adds	r3, #128	; 0x80
 800bcf8:	0a1b      	lsrs	r3, r3, #8
 800bcfa:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800bcfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcfe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bd00:	fb02 f303 	mul.w	r3, r2, r3
 800bd04:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800bd06:	2300      	movs	r3, #0
 800bd08:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d01a      	beq.n	800bd46 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	029b      	lsls	r3, r3, #10
 800bd14:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800bd1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd1c:	4413      	add	r3, r2
 800bd1e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800bd20:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd28:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800bd2a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bd2c:	4613      	mov	r3, r2
 800bd2e:	005b      	lsls	r3, r3, #1
 800bd30:	4413      	add	r3, r2
 800bd32:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800bd34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd36:	fb03 f303 	mul.w	r3, r3, r3
 800bd3a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800bd3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd3e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800bd42:	0c1b      	lsrs	r3, r3, #16
 800bd44:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800bd4a:	fb02 f303 	mul.w	r3, r2, r3
 800bd4e:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800bd50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd52:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800bd56:	0c1b      	lsrs	r3, r3, #16
 800bd58:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800bd5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd5c:	fb03 f303 	mul.w	r3, r3, r3
 800bd60:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800bd62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bd64:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800bd68:	0c1b      	lsrs	r3, r3, #16
 800bd6a:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800bd6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd6e:	085a      	lsrs	r2, r3, #1
 800bd70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd72:	441a      	add	r2, r3
 800bd74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd76:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd7a:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800bd7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bd80:	fb02 f303 	mul.w	r3, r2, r3
 800bd84:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800bd86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd8c:	d302      	bcc.n	800bd94 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800bd8e:	4b54      	ldr	r3, [pc, #336]	; (800bee0 <VL53L0X_calc_dmax+0x230>)
 800bd90:	663b      	str	r3, [r7, #96]	; 0x60
 800bd92:	e015      	b.n	800bdc0 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800bd94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd96:	085a      	lsrs	r2, r3, #1
 800bd98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bd9a:	441a      	add	r2, r3
 800bd9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd9e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bda2:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800bda4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bda6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bda8:	fb02 f303 	mul.w	r3, r2, r3
 800bdac:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800bdae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bdb0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800bdb4:	0c1b      	lsrs	r3, r3, #16
 800bdb6:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800bdb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bdba:	fb03 f303 	mul.w	r3, r3, r3
 800bdbe:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800bdc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bdc2:	039b      	lsls	r3, r3, #14
 800bdc4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800bdc8:	4a46      	ldr	r2, [pc, #280]	; (800bee4 <VL53L0X_calc_dmax+0x234>)
 800bdca:	fba2 2303 	umull	r2, r3, r2, r3
 800bdce:	099b      	lsrs	r3, r3, #6
 800bdd0:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800bdd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd4:	fb03 f303 	mul.w	r3, r3, r3
 800bdd8:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800bdda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bddc:	fb03 f303 	mul.w	r3, r3, r3
 800bde0:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800bde2:	6a3b      	ldr	r3, [r7, #32]
 800bde4:	3308      	adds	r3, #8
 800bde6:	091b      	lsrs	r3, r3, #4
 800bde8:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800bdea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdec:	6a3b      	ldr	r3, [r7, #32]
 800bdee:	1ad3      	subs	r3, r2, r3
 800bdf0:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800bdf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdf4:	4613      	mov	r3, r2
 800bdf6:	005b      	lsls	r3, r3, #1
 800bdf8:	4413      	add	r3, r2
 800bdfa:	011b      	lsls	r3, r3, #4
 800bdfc:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800bdfe:	69fb      	ldr	r3, [r7, #28]
 800be00:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800be04:	0b9b      	lsrs	r3, r3, #14
 800be06:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800be08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800be0c:	4413      	add	r3, r2
 800be0e:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800be10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be12:	085b      	lsrs	r3, r3, #1
 800be14:	69ba      	ldr	r2, [r7, #24]
 800be16:	4413      	add	r3, r2
 800be18:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800be1a:	69ba      	ldr	r2, [r7, #24]
 800be1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be1e:	fbb2 f3f3 	udiv	r3, r2, r3
 800be22:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800be24:	69bb      	ldr	r3, [r7, #24]
 800be26:	039b      	lsls	r3, r3, #14
 800be28:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800be2a:	69fb      	ldr	r3, [r7, #28]
 800be2c:	085b      	lsrs	r3, r3, #1
 800be2e:	69ba      	ldr	r2, [r7, #24]
 800be30:	4413      	add	r3, r2
 800be32:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800be34:	69ba      	ldr	r2, [r7, #24]
 800be36:	69fb      	ldr	r3, [r7, #28]
 800be38:	fbb2 f3f3 	udiv	r3, r2, r3
 800be3c:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800be3e:	69bb      	ldr	r3, [r7, #24]
 800be40:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800be42:	fb02 f303 	mul.w	r3, r2, r3
 800be46:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800be48:	69bb      	ldr	r3, [r7, #24]
 800be4a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800be4e:	4a25      	ldr	r2, [pc, #148]	; (800bee4 <VL53L0X_calc_dmax+0x234>)
 800be50:	fba2 2303 	umull	r2, r3, r2, r3
 800be54:	099b      	lsrs	r3, r3, #6
 800be56:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800be58:	69bb      	ldr	r3, [r7, #24]
 800be5a:	011b      	lsls	r3, r3, #4
 800be5c:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800be5e:	69bb      	ldr	r3, [r7, #24]
 800be60:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800be64:	4a1f      	ldr	r2, [pc, #124]	; (800bee4 <VL53L0X_calc_dmax+0x234>)
 800be66:	fba2 2303 	umull	r2, r3, r2, r3
 800be6a:	099b      	lsrs	r3, r3, #6
 800be6c:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800be6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be70:	3380      	adds	r3, #128	; 0x80
 800be72:	0a1b      	lsrs	r3, r3, #8
 800be74:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800be76:	697b      	ldr	r3, [r7, #20]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d008      	beq.n	800be8e <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	085a      	lsrs	r2, r3, #1
 800be80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be82:	441a      	add	r2, r3
 800be84:	697b      	ldr	r3, [r7, #20]
 800be86:	fbb2 f3f3 	udiv	r3, r2, r3
 800be8a:	65bb      	str	r3, [r7, #88]	; 0x58
 800be8c:	e001      	b.n	800be92 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800be8e:	2300      	movs	r3, #0
 800be90:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800be92:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800be94:	f7fe f9ba 	bl	800a20c <VL53L0X_isqrt>
 800be98:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800be9a:	69bb      	ldr	r3, [r7, #24]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d008      	beq.n	800beb2 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800bea0:	69bb      	ldr	r3, [r7, #24]
 800bea2:	085a      	lsrs	r2, r3, #1
 800bea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bea6:	441a      	add	r2, r3
 800bea8:	69bb      	ldr	r3, [r7, #24]
 800beaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800beae:	65fb      	str	r3, [r7, #92]	; 0x5c
 800beb0:	e001      	b.n	800beb6 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800beb2:	2300      	movs	r3, #0
 800beb4:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800beb6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800beb8:	f7fe f9a8 	bl	800a20c <VL53L0X_isqrt>
 800bebc:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800bebe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bec0:	693a      	ldr	r2, [r7, #16]
 800bec2:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800bec4:	693a      	ldr	r2, [r7, #16]
 800bec6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bec8:	429a      	cmp	r2, r3
 800beca:	d902      	bls.n	800bed2 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800becc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bece:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bed0:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800bed2:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800bed6:	4618      	mov	r0, r3
 800bed8:	3768      	adds	r7, #104	; 0x68
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}
 800bede:	bf00      	nop
 800bee0:	fff00000 	.word	0xfff00000
 800bee4:	10624dd3 	.word	0x10624dd3

0800bee8 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b0b4      	sub	sp, #208	; 0xd0
 800beec:	af04      	add	r7, sp, #16
 800beee:	60f8      	str	r0, [r7, #12]
 800bef0:	60b9      	str	r1, [r7, #8]
 800bef2:	607a      	str	r2, [r7, #4]
 800bef4:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800bef6:	f44f 7348 	mov.w	r3, #800	; 0x320
 800befa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800befe:	f44f 7316 	mov.w	r3, #600	; 0x258
 800bf02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800bf06:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800bf0a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800bf0e:	f241 235c 	movw	r3, #4700	; 0x125c
 800bf12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800bf16:	4b9e      	ldr	r3, [pc, #632]	; (800c190 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800bf18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800bf1c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800bf20:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800bf22:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800bf26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bf2a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf2e:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800bf30:	4b98      	ldr	r3, [pc, #608]	; (800c194 <VL53L0X_calc_sigma_estimate+0x2ac>)
 800bf32:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800bf34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf38:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800bf3a:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800bf3e:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800bf40:	f240 6377 	movw	r3, #1655	; 0x677
 800bf44:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bf46:	2300      	movs	r3, #0
 800bf48:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	6a1b      	ldr	r3, [r3, #32]
 800bf50:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800bf52:	68bb      	ldr	r3, [r7, #8]
 800bf54:	691b      	ldr	r3, [r3, #16]
 800bf56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bf5a:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800bf5e:	0c1b      	lsrs	r3, r3, #16
 800bf60:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800bf62:	68bb      	ldr	r3, [r7, #8]
 800bf64:	68db      	ldr	r3, [r3, #12]
 800bf66:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800bf68:	f107 0310 	add.w	r3, r7, #16
 800bf6c:	461a      	mov	r2, r3
 800bf6e:	68b9      	ldr	r1, [r7, #8]
 800bf70:	68f8      	ldr	r0, [r7, #12]
 800bf72:	f7ff fe78 	bl	800bc66 <VL53L0X_get_total_signal_rate>
 800bf76:	4603      	mov	r3, r0
 800bf78:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800bf7c:	f107 0314 	add.w	r3, r7, #20
 800bf80:	461a      	mov	r2, r3
 800bf82:	68b9      	ldr	r1, [r7, #8]
 800bf84:	68f8      	ldr	r0, [r7, #12]
 800bf86:	f7ff fe3f 	bl	800bc08 <VL53L0X_get_total_xtalk_rate>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800bf90:	693b      	ldr	r3, [r7, #16]
 800bf92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bf96:	fb02 f303 	mul.w	r3, r2, r3
 800bf9a:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800bf9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf9e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800bfa2:	0c1b      	lsrs	r3, r3, #16
 800bfa4:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800bfa6:	697b      	ldr	r3, [r7, #20]
 800bfa8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bfac:	fb02 f303 	mul.w	r3, r2, r3
 800bfb0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800bfb4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800bfb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bfba:	429a      	cmp	r2, r3
 800bfbc:	d902      	bls.n	800bfc4 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800bfbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bfc0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800bfc4:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d168      	bne.n	800c09e <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800bfd2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800bfdc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800bfe0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800bfe4:	461a      	mov	r2, r3
 800bfe6:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800bfea:	68f8      	ldr	r0, [r7, #12]
 800bfec:	f7fe feb2 	bl	800ad54 <VL53L0X_calc_timeout_mclks>
 800bff0:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800bff8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800c002:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800c006:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800c00a:	461a      	mov	r2, r3
 800c00c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800c010:	68f8      	ldr	r0, [r7, #12]
 800c012:	f7fe fe9f 	bl	800ad54 <VL53L0X_calc_timeout_mclks>
 800c016:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800c018:	2303      	movs	r3, #3
 800c01a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800c01e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800c022:	2b08      	cmp	r3, #8
 800c024:	d102      	bne.n	800c02c <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800c026:	2302      	movs	r3, #2
 800c028:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800c02c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c02e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c030:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800c032:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800c036:	fb02 f303 	mul.w	r3, r2, r3
 800c03a:	02db      	lsls	r3, r3, #11
 800c03c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800c040:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c044:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c048:	4a53      	ldr	r2, [pc, #332]	; (800c198 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800c04a:	fba2 2303 	umull	r2, r3, r2, r3
 800c04e:	099b      	lsrs	r3, r3, #6
 800c050:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800c054:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c058:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c05a:	fb02 f303 	mul.w	r3, r2, r3
 800c05e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800c062:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c066:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c06a:	4a4b      	ldr	r2, [pc, #300]	; (800c198 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800c06c:	fba2 2303 	umull	r2, r3, r2, r3
 800c070:	099b      	lsrs	r3, r3, #6
 800c072:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800c076:	693b      	ldr	r3, [r7, #16]
 800c078:	3380      	adds	r3, #128	; 0x80
 800c07a:	0a1b      	lsrs	r3, r3, #8
 800c07c:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800c07e:	693a      	ldr	r2, [r7, #16]
 800c080:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c084:	fb02 f303 	mul.w	r3, r2, r3
 800c088:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800c08c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c090:	3380      	adds	r3, #128	; 0x80
 800c092:	0a1b      	lsrs	r3, r3, #8
 800c094:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800c098:	693b      	ldr	r3, [r7, #16]
 800c09a:	021b      	lsls	r3, r3, #8
 800c09c:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800c09e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d002      	beq.n	800c0ac <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800c0a6:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800c0aa:	e15e      	b.n	800c36a <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800c0ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d10c      	bne.n	800c0cc <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c0b8:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c0c0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	601a      	str	r2, [r3, #0]
 800c0ca:	e14c      	b.n	800c366 <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800c0cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d102      	bne.n	800c0da <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800c0d4:	2301      	movs	r3, #1
 800c0d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800c0da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c0de:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800c0e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c0e2:	041a      	lsls	r2, r3, #16
 800c0e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c0e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800c0ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c0f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0f4:	429a      	cmp	r2, r3
 800c0f6:	d902      	bls.n	800c0fe <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800c0f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800c0fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c102:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800c106:	fb02 f303 	mul.w	r3, r2, r3
 800c10a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800c10e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800c112:	4613      	mov	r3, r2
 800c114:	005b      	lsls	r3, r3, #1
 800c116:	4413      	add	r3, r2
 800c118:	009b      	lsls	r3, r3, #2
 800c11a:	4618      	mov	r0, r3
 800c11c:	f7fe f876 	bl	800a20c <VL53L0X_isqrt>
 800c120:	4603      	mov	r3, r0
 800c122:	005b      	lsls	r3, r3, #1
 800c124:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800c126:	68bb      	ldr	r3, [r7, #8]
 800c128:	891b      	ldrh	r3, [r3, #8]
 800c12a:	461a      	mov	r2, r3
 800c12c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c12e:	fb02 f303 	mul.w	r3, r2, r3
 800c132:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800c134:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c136:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800c138:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c13c:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800c13e:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800c140:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800c144:	4a14      	ldr	r2, [pc, #80]	; (800c198 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800c146:	fba2 2303 	umull	r2, r3, r2, r3
 800c14a:	099b      	lsrs	r3, r3, #6
 800c14c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800c14e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c150:	041b      	lsls	r3, r3, #16
 800c152:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c156:	4a10      	ldr	r2, [pc, #64]	; (800c198 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800c158:	fba2 2303 	umull	r2, r3, r2, r3
 800c15c:	099b      	lsrs	r3, r3, #6
 800c15e:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800c160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c162:	021b      	lsls	r3, r3, #8
 800c164:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800c166:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c16a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c16e:	2b00      	cmp	r3, #0
 800c170:	bfb8      	it	lt
 800c172:	425b      	neglt	r3, r3
 800c174:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800c176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c178:	021b      	lsls	r3, r3, #8
 800c17a:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	7e1b      	ldrb	r3, [r3, #24]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d00b      	beq.n	800c19c <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800c184:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c188:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c18c:	e033      	b.n	800c1f6 <VL53L0X_calc_sigma_estimate+0x30e>
 800c18e:	bf00      	nop
 800c190:	028f87ae 	.word	0x028f87ae
 800c194:	0006999a 	.word	0x0006999a
 800c198:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800c19c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c19e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c1a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800c1aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1ac:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800c1b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c1b4:	fb02 f303 	mul.w	r3, r2, r3
 800c1b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800c1bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c1c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c1c2:	4413      	add	r3, r2
 800c1c4:	0c1b      	lsrs	r3, r3, #16
 800c1c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800c1ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c1ce:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c1d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800c1d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c1da:	085b      	lsrs	r3, r3, #1
 800c1dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800c1e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c1e4:	fb03 f303 	mul.w	r3, r3, r3
 800c1e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800c1ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c1f0:	0b9b      	lsrs	r3, r3, #14
 800c1f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800c1f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c1fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c1fc:	fb02 f303 	mul.w	r3, r2, r3
 800c200:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800c202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c204:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c208:	0c1b      	lsrs	r3, r3, #16
 800c20a:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800c20c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c20e:	fb03 f303 	mul.w	r3, r3, r3
 800c212:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800c214:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c218:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800c21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c21c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c220:	0c1b      	lsrs	r3, r3, #16
 800c222:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800c224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c226:	fb03 f303 	mul.w	r3, r3, r3
 800c22a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800c22c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c230:	4413      	add	r3, r2
 800c232:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800c234:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c236:	f7fd ffe9 	bl	800a20c <VL53L0X_isqrt>
 800c23a:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800c23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c23e:	041b      	lsls	r3, r3, #16
 800c240:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800c242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c244:	3332      	adds	r3, #50	; 0x32
 800c246:	4a4b      	ldr	r2, [pc, #300]	; (800c374 <VL53L0X_calc_sigma_estimate+0x48c>)
 800c248:	fba2 2303 	umull	r2, r3, r2, r3
 800c24c:	095a      	lsrs	r2, r3, #5
 800c24e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c250:	fbb2 f3f3 	udiv	r3, r2, r3
 800c254:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800c258:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c25c:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800c260:	fb02 f303 	mul.w	r3, r2, r3
 800c264:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800c268:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c26c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800c270:	3308      	adds	r3, #8
 800c272:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800c276:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c27a:	4a3f      	ldr	r2, [pc, #252]	; (800c378 <VL53L0X_calc_sigma_estimate+0x490>)
 800c27c:	fba2 2303 	umull	r2, r3, r2, r3
 800c280:	0b5b      	lsrs	r3, r3, #13
 800c282:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800c286:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c28a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c28c:	429a      	cmp	r2, r3
 800c28e:	d902      	bls.n	800c296 <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800c290:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c292:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800c296:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c29a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c29e:	4413      	add	r3, r2
 800c2a0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800c2a4:	4a35      	ldr	r2, [pc, #212]	; (800c37c <VL53L0X_calc_sigma_estimate+0x494>)
 800c2a6:	fba2 2303 	umull	r2, r3, r2, r3
 800c2aa:	099b      	lsrs	r3, r3, #6
 800c2ac:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800c2ae:	6a3b      	ldr	r3, [r7, #32]
 800c2b0:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800c2b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c2b6:	441a      	add	r2, r3
 800c2b8:	6a3b      	ldr	r3, [r7, #32]
 800c2ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2be:	4618      	mov	r0, r3
 800c2c0:	f7fd ffa4 	bl	800a20c <VL53L0X_isqrt>
 800c2c4:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800c2c6:	69fb      	ldr	r3, [r7, #28]
 800c2c8:	021b      	lsls	r3, r3, #8
 800c2ca:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800c2cc:	69fb      	ldr	r3, [r7, #28]
 800c2ce:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c2d2:	4a2a      	ldr	r2, [pc, #168]	; (800c37c <VL53L0X_calc_sigma_estimate+0x494>)
 800c2d4:	fba2 2303 	umull	r2, r3, r2, r3
 800c2d8:	099b      	lsrs	r3, r3, #6
 800c2da:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800c2dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c2e0:	fb03 f303 	mul.w	r3, r3, r3
 800c2e4:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800c2e6:	69fb      	ldr	r3, [r7, #28]
 800c2e8:	fb03 f303 	mul.w	r3, r3, r3
 800c2ec:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800c2ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2f2:	4413      	add	r3, r2
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	f7fd ff89 	bl	800a20c <VL53L0X_isqrt>
 800c2fa:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800c2fc:	69bb      	ldr	r3, [r7, #24]
 800c2fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c302:	fb02 f303 	mul.w	r3, r2, r3
 800c306:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800c30a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d009      	beq.n	800c324 <VL53L0X_calc_sigma_estimate+0x43c>
 800c310:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c314:	2b00      	cmp	r3, #0
 800c316:	d005      	beq.n	800c324 <VL53L0X_calc_sigma_estimate+0x43c>
 800c318:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800c31c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c320:	429a      	cmp	r2, r3
 800c322:	d903      	bls.n	800c32c <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800c324:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c328:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800c332:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681a      	ldr	r2, [r3, #0]
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800c33e:	6939      	ldr	r1, [r7, #16]
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	9303      	str	r3, [sp, #12]
 800c344:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c348:	9302      	str	r3, [sp, #8]
 800c34a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c34e:	9301      	str	r3, [sp, #4]
 800c350:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c352:	9300      	str	r3, [sp, #0]
 800c354:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c358:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c35a:	68f8      	ldr	r0, [r7, #12]
 800c35c:	f7ff fca8 	bl	800bcb0 <VL53L0X_calc_dmax>
 800c360:	4603      	mov	r3, r0
 800c362:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c366:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	37c0      	adds	r7, #192	; 0xc0
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}
 800c372:	bf00      	nop
 800c374:	51eb851f 	.word	0x51eb851f
 800c378:	d1b71759 	.word	0xd1b71759
 800c37c:	10624dd3 	.word	0x10624dd3

0800c380 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b090      	sub	sp, #64	; 0x40
 800c384:	af00      	add	r7, sp, #0
 800c386:	60f8      	str	r0, [r7, #12]
 800c388:	607a      	str	r2, [r7, #4]
 800c38a:	461a      	mov	r2, r3
 800c38c:	460b      	mov	r3, r1
 800c38e:	72fb      	strb	r3, [r7, #11]
 800c390:	4613      	mov	r3, r2
 800c392:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c394:	2300      	movs	r3, #0
 800c396:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800c39a:	2300      	movs	r3, #0
 800c39c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800c3be:	2300      	movs	r3, #0
 800c3c0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800c3d2:	7afb      	ldrb	r3, [r7, #11]
 800c3d4:	10db      	asrs	r3, r3, #3
 800c3d6:	b2db      	uxtb	r3, r3
 800c3d8:	f003 030f 	and.w	r3, r3, #15
 800c3dc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800c3e0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d017      	beq.n	800c418 <VL53L0X_get_pal_range_status+0x98>
 800c3e8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c3ec:	2b05      	cmp	r3, #5
 800c3ee:	d013      	beq.n	800c418 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800c3f0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c3f4:	2b07      	cmp	r3, #7
 800c3f6:	d00f      	beq.n	800c418 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800c3f8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c3fc:	2b0c      	cmp	r3, #12
 800c3fe:	d00b      	beq.n	800c418 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800c400:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c404:	2b0d      	cmp	r3, #13
 800c406:	d007      	beq.n	800c418 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800c408:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c40c:	2b0e      	cmp	r3, #14
 800c40e:	d003      	beq.n	800c418 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800c410:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c414:	2b0f      	cmp	r3, #15
 800c416:	d103      	bne.n	800c420 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800c418:	2301      	movs	r3, #1
 800c41a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800c41e:	e002      	b.n	800c426 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800c420:	2300      	movs	r3, #0
 800c422:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800c426:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d109      	bne.n	800c442 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800c42e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800c432:	461a      	mov	r2, r3
 800c434:	2100      	movs	r1, #0
 800c436:	68f8      	ldr	r0, [r7, #12]
 800c438:	f7fc f9ec 	bl	8008814 <VL53L0X_GetLimitCheckEnable>
 800c43c:	4603      	mov	r3, r0
 800c43e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800c442:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c446:	2b00      	cmp	r3, #0
 800c448:	d02e      	beq.n	800c4a8 <VL53L0X_get_pal_range_status+0x128>
 800c44a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d12a      	bne.n	800c4a8 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800c452:	f107 0310 	add.w	r3, r7, #16
 800c456:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800c45a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c45c:	68f8      	ldr	r0, [r7, #12]
 800c45e:	f7ff fd43 	bl	800bee8 <VL53L0X_calc_sigma_estimate>
 800c462:	4603      	mov	r3, r0
 800c464:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800c468:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d103      	bne.n	800c478 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800c470:	693b      	ldr	r3, [r7, #16]
 800c472:	b29a      	uxth	r2, r3
 800c474:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c476:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800c478:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d113      	bne.n	800c4a8 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800c480:	f107 0320 	add.w	r3, r7, #32
 800c484:	461a      	mov	r2, r3
 800c486:	2100      	movs	r1, #0
 800c488:	68f8      	ldr	r0, [r7, #12]
 800c48a:	f7fc fa49 	bl	8008920 <VL53L0X_GetLimitCheckValue>
 800c48e:	4603      	mov	r3, r0
 800c490:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800c494:	6a3b      	ldr	r3, [r7, #32]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d006      	beq.n	800c4a8 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800c49a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c49c:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800c49e:	429a      	cmp	r2, r3
 800c4a0:	d902      	bls.n	800c4a8 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800c4a8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d109      	bne.n	800c4c4 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800c4b0:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800c4b4:	461a      	mov	r2, r3
 800c4b6:	2102      	movs	r1, #2
 800c4b8:	68f8      	ldr	r0, [r7, #12]
 800c4ba:	f7fc f9ab 	bl	8008814 <VL53L0X_GetLimitCheckEnable>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800c4c4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d044      	beq.n	800c556 <VL53L0X_get_pal_range_status+0x1d6>
 800c4cc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d140      	bne.n	800c556 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800c4d4:	f107 031c 	add.w	r3, r7, #28
 800c4d8:	461a      	mov	r2, r3
 800c4da:	2102      	movs	r1, #2
 800c4dc:	68f8      	ldr	r0, [r7, #12]
 800c4de:	f7fc fa1f 	bl	8008920 <VL53L0X_GetLimitCheckValue>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800c4e8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d107      	bne.n	800c500 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c4f0:	2201      	movs	r2, #1
 800c4f2:	21ff      	movs	r1, #255	; 0xff
 800c4f4:	68f8      	ldr	r0, [r7, #12]
 800c4f6:	f000 f9bb 	bl	800c870 <VL53L0X_WrByte>
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800c500:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c504:	2b00      	cmp	r3, #0
 800c506:	d109      	bne.n	800c51c <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800c508:	f107 0316 	add.w	r3, r7, #22
 800c50c:	461a      	mov	r2, r3
 800c50e:	21b6      	movs	r1, #182	; 0xb6
 800c510:	68f8      	ldr	r0, [r7, #12]
 800c512:	f000 fa59 	bl	800c9c8 <VL53L0X_RdWord>
 800c516:	4603      	mov	r3, r0
 800c518:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800c51c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c520:	2b00      	cmp	r3, #0
 800c522:	d107      	bne.n	800c534 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c524:	2200      	movs	r2, #0
 800c526:	21ff      	movs	r1, #255	; 0xff
 800c528:	68f8      	ldr	r0, [r7, #12]
 800c52a:	f000 f9a1 	bl	800c870 <VL53L0X_WrByte>
 800c52e:	4603      	mov	r3, r0
 800c530:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800c534:	8afb      	ldrh	r3, [r7, #22]
 800c536:	025b      	lsls	r3, r3, #9
 800c538:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c53e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800c542:	69fb      	ldr	r3, [r7, #28]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d006      	beq.n	800c556 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800c548:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800c54a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c54c:	429a      	cmp	r2, r3
 800c54e:	d902      	bls.n	800c556 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800c550:	2301      	movs	r3, #1
 800c552:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800c556:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d109      	bne.n	800c572 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800c55e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c562:	461a      	mov	r2, r3
 800c564:	2103      	movs	r1, #3
 800c566:	68f8      	ldr	r0, [r7, #12]
 800c568:	f7fc f954 	bl	8008814 <VL53L0X_GetLimitCheckEnable>
 800c56c:	4603      	mov	r3, r0
 800c56e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800c572:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c576:	2b00      	cmp	r3, #0
 800c578:	d023      	beq.n	800c5c2 <VL53L0X_get_pal_range_status+0x242>
 800c57a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d11f      	bne.n	800c5c2 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800c582:	893b      	ldrh	r3, [r7, #8]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d102      	bne.n	800c58e <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800c588:	2300      	movs	r3, #0
 800c58a:	637b      	str	r3, [r7, #52]	; 0x34
 800c58c:	e005      	b.n	800c59a <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	021a      	lsls	r2, r3, #8
 800c592:	893b      	ldrh	r3, [r7, #8]
 800c594:	fbb2 f3f3 	udiv	r3, r2, r3
 800c598:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800c59a:	f107 0318 	add.w	r3, r7, #24
 800c59e:	461a      	mov	r2, r3
 800c5a0:	2103      	movs	r1, #3
 800c5a2:	68f8      	ldr	r0, [r7, #12]
 800c5a4:	f7fc f9bc 	bl	8008920 <VL53L0X_GetLimitCheckValue>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800c5ae:	69bb      	ldr	r3, [r7, #24]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d006      	beq.n	800c5c2 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800c5b4:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800c5b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c5b8:	429a      	cmp	r2, r3
 800c5ba:	d202      	bcs.n	800c5c2 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800c5bc:	2301      	movs	r3, #1
 800c5be:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c5c2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d14a      	bne.n	800c660 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800c5ca:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800c5ce:	2b01      	cmp	r3, #1
 800c5d0:	d103      	bne.n	800c5da <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800c5d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5d4:	22ff      	movs	r2, #255	; 0xff
 800c5d6:	701a      	strb	r2, [r3, #0]
 800c5d8:	e042      	b.n	800c660 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800c5da:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c5de:	2b01      	cmp	r3, #1
 800c5e0:	d007      	beq.n	800c5f2 <VL53L0X_get_pal_range_status+0x272>
 800c5e2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c5e6:	2b02      	cmp	r3, #2
 800c5e8:	d003      	beq.n	800c5f2 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800c5ea:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c5ee:	2b03      	cmp	r3, #3
 800c5f0:	d103      	bne.n	800c5fa <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800c5f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5f4:	2205      	movs	r2, #5
 800c5f6:	701a      	strb	r2, [r3, #0]
 800c5f8:	e032      	b.n	800c660 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800c5fa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c5fe:	2b06      	cmp	r3, #6
 800c600:	d003      	beq.n	800c60a <VL53L0X_get_pal_range_status+0x28a>
 800c602:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c606:	2b09      	cmp	r3, #9
 800c608:	d103      	bne.n	800c612 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800c60a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c60c:	2204      	movs	r2, #4
 800c60e:	701a      	strb	r2, [r3, #0]
 800c610:	e026      	b.n	800c660 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800c612:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c616:	2b08      	cmp	r3, #8
 800c618:	d007      	beq.n	800c62a <VL53L0X_get_pal_range_status+0x2aa>
 800c61a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c61e:	2b0a      	cmp	r3, #10
 800c620:	d003      	beq.n	800c62a <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800c622:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c626:	2b01      	cmp	r3, #1
 800c628:	d103      	bne.n	800c632 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800c62a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c62c:	2203      	movs	r2, #3
 800c62e:	701a      	strb	r2, [r3, #0]
 800c630:	e016      	b.n	800c660 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800c632:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c636:	2b04      	cmp	r3, #4
 800c638:	d003      	beq.n	800c642 <VL53L0X_get_pal_range_status+0x2c2>
 800c63a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c63e:	2b01      	cmp	r3, #1
 800c640:	d103      	bne.n	800c64a <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800c642:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c644:	2202      	movs	r2, #2
 800c646:	701a      	strb	r2, [r3, #0]
 800c648:	e00a      	b.n	800c660 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800c64a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800c64e:	2b01      	cmp	r3, #1
 800c650:	d103      	bne.n	800c65a <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800c652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c654:	2201      	movs	r2, #1
 800c656:	701a      	strb	r2, [r3, #0]
 800c658:	e002      	b.n	800c660 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800c65a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c65c:	2200      	movs	r2, #0
 800c65e:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800c660:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c662:	781b      	ldrb	r3, [r3, #0]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d102      	bne.n	800c66e <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800c668:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c66a:	2200      	movs	r2, #0
 800c66c:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800c66e:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800c672:	461a      	mov	r2, r3
 800c674:	2101      	movs	r1, #1
 800c676:	68f8      	ldr	r0, [r7, #12]
 800c678:	f7fc f8cc 	bl	8008814 <VL53L0X_GetLimitCheckEnable>
 800c67c:	4603      	mov	r3, r0
 800c67e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800c682:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c686:	2b00      	cmp	r3, #0
 800c688:	d14f      	bne.n	800c72a <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800c68a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d003      	beq.n	800c69a <VL53L0X_get_pal_range_status+0x31a>
 800c692:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800c696:	2b01      	cmp	r3, #1
 800c698:	d103      	bne.n	800c6a2 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800c69a:	2301      	movs	r3, #1
 800c69c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6a0:	e002      	b.n	800c6a8 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800c6ae:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800c6b2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c6b6:	2b04      	cmp	r3, #4
 800c6b8:	d003      	beq.n	800c6c2 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800c6ba:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d103      	bne.n	800c6ca <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800c6c2:	2301      	movs	r3, #1
 800c6c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6c8:	e002      	b.n	800c6d0 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800c6d6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800c6da:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d003      	beq.n	800c6ea <VL53L0X_get_pal_range_status+0x36a>
 800c6e2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c6e6:	2b01      	cmp	r3, #1
 800c6e8:	d103      	bne.n	800c6f2 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800c6ea:	2301      	movs	r3, #1
 800c6ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6f0:	e002      	b.n	800c6f8 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800c6fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800c702:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c706:	2b00      	cmp	r3, #0
 800c708:	d003      	beq.n	800c712 <VL53L0X_get_pal_range_status+0x392>
 800c70a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c70e:	2b01      	cmp	r3, #1
 800c710:	d103      	bne.n	800c71a <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800c712:	2301      	movs	r3, #1
 800c714:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c718:	e002      	b.n	800c720 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800c71a:	2300      	movs	r3, #0
 800c71c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800c726:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c72a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800c72e:	4618      	mov	r0, r3
 800c730:	3740      	adds	r7, #64	; 0x40
 800c732:	46bd      	mov	sp, r7
 800c734:	bd80      	pop	{r7, pc}

0800c736 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800c736:	b580      	push	{r7, lr}
 800c738:	b088      	sub	sp, #32
 800c73a:	af02      	add	r7, sp, #8
 800c73c:	60f8      	str	r0, [r7, #12]
 800c73e:	60b9      	str	r1, [r7, #8]
 800c740:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	330a      	adds	r3, #10
 800c746:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800c754:	b299      	uxth	r1, r3
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	b29a      	uxth	r2, r3
 800c75a:	697b      	ldr	r3, [r7, #20]
 800c75c:	9300      	str	r3, [sp, #0]
 800c75e:	4613      	mov	r3, r2
 800c760:	68ba      	ldr	r2, [r7, #8]
 800c762:	f7f5 fc9b 	bl	800209c <HAL_I2C_Master_Transmit>
 800c766:	4603      	mov	r3, r0
 800c768:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800c76a:	693b      	ldr	r3, [r7, #16]
}
 800c76c:	4618      	mov	r0, r3
 800c76e:	3718      	adds	r7, #24
 800c770:	46bd      	mov	sp, r7
 800c772:	bd80      	pop	{r7, pc}

0800c774 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800c774:	b580      	push	{r7, lr}
 800c776:	b088      	sub	sp, #32
 800c778:	af02      	add	r7, sp, #8
 800c77a:	60f8      	str	r0, [r7, #12]
 800c77c:	60b9      	str	r1, [r7, #8]
 800c77e:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	330a      	adds	r3, #10
 800c784:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800c792:	f043 0301 	orr.w	r3, r3, #1
 800c796:	b2db      	uxtb	r3, r3
 800c798:	b299      	uxth	r1, r3
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	b29a      	uxth	r2, r3
 800c79e:	697b      	ldr	r3, [r7, #20]
 800c7a0:	9300      	str	r3, [sp, #0]
 800c7a2:	4613      	mov	r3, r2
 800c7a4:	68ba      	ldr	r2, [r7, #8]
 800c7a6:	f7f5 fd6d 	bl	8002284 <HAL_I2C_Master_Receive>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800c7ae:	693b      	ldr	r3, [r7, #16]
}
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	3718      	adds	r7, #24
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd80      	pop	{r7, pc}

0800c7b8 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b086      	sub	sp, #24
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	60f8      	str	r0, [r7, #12]
 800c7c0:	607a      	str	r2, [r7, #4]
 800c7c2:	603b      	str	r3, [r7, #0]
 800c7c4:	460b      	mov	r3, r1
 800c7c6:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	2b3f      	cmp	r3, #63	; 0x3f
 800c7d0:	d902      	bls.n	800c7d8 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800c7d2:	f06f 0303 	mvn.w	r3, #3
 800c7d6:	e016      	b.n	800c806 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800c7d8:	4a0d      	ldr	r2, [pc, #52]	; (800c810 <VL53L0X_WriteMulti+0x58>)
 800c7da:	7afb      	ldrb	r3, [r7, #11]
 800c7dc:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800c7de:	683a      	ldr	r2, [r7, #0]
 800c7e0:	6879      	ldr	r1, [r7, #4]
 800c7e2:	480c      	ldr	r0, [pc, #48]	; (800c814 <VL53L0X_WriteMulti+0x5c>)
 800c7e4:	f000 f998 	bl	800cb18 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	3301      	adds	r3, #1
 800c7ec:	461a      	mov	r2, r3
 800c7ee:	4908      	ldr	r1, [pc, #32]	; (800c810 <VL53L0X_WriteMulti+0x58>)
 800c7f0:	68f8      	ldr	r0, [r7, #12]
 800c7f2:	f7ff ffa0 	bl	800c736 <_I2CWrite>
 800c7f6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800c7f8:	693b      	ldr	r3, [r7, #16]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d001      	beq.n	800c802 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c7fe:	23ec      	movs	r3, #236	; 0xec
 800c800:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800c802:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c806:	4618      	mov	r0, r3
 800c808:	3718      	adds	r7, #24
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}
 800c80e:	bf00      	nop
 800c810:	20000794 	.word	0x20000794
 800c814:	20000795 	.word	0x20000795

0800c818 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800c818:	b580      	push	{r7, lr}
 800c81a:	b086      	sub	sp, #24
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	60f8      	str	r0, [r7, #12]
 800c820:	607a      	str	r2, [r7, #4]
 800c822:	603b      	str	r3, [r7, #0]
 800c824:	460b      	mov	r3, r1
 800c826:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c828:	2300      	movs	r3, #0
 800c82a:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800c82c:	f107 030b 	add.w	r3, r7, #11
 800c830:	2201      	movs	r2, #1
 800c832:	4619      	mov	r1, r3
 800c834:	68f8      	ldr	r0, [r7, #12]
 800c836:	f7ff ff7e 	bl	800c736 <_I2CWrite>
 800c83a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800c83c:	693b      	ldr	r3, [r7, #16]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d002      	beq.n	800c848 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c842:	23ec      	movs	r3, #236	; 0xec
 800c844:	75fb      	strb	r3, [r7, #23]
        goto done;
 800c846:	e00c      	b.n	800c862 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800c848:	683a      	ldr	r2, [r7, #0]
 800c84a:	6879      	ldr	r1, [r7, #4]
 800c84c:	68f8      	ldr	r0, [r7, #12]
 800c84e:	f7ff ff91 	bl	800c774 <_I2CRead>
 800c852:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800c854:	693b      	ldr	r3, [r7, #16]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d002      	beq.n	800c860 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c85a:	23ec      	movs	r3, #236	; 0xec
 800c85c:	75fb      	strb	r3, [r7, #23]
 800c85e:	e000      	b.n	800c862 <VL53L0X_ReadMulti+0x4a>
    }
done:
 800c860:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800c862:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c866:	4618      	mov	r0, r3
 800c868:	3718      	adds	r7, #24
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd80      	pop	{r7, pc}
	...

0800c870 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800c870:	b580      	push	{r7, lr}
 800c872:	b084      	sub	sp, #16
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
 800c878:	460b      	mov	r3, r1
 800c87a:	70fb      	strb	r3, [r7, #3]
 800c87c:	4613      	mov	r3, r2
 800c87e:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c880:	2300      	movs	r3, #0
 800c882:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800c884:	4a0b      	ldr	r2, [pc, #44]	; (800c8b4 <VL53L0X_WrByte+0x44>)
 800c886:	78fb      	ldrb	r3, [r7, #3]
 800c888:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800c88a:	4a0a      	ldr	r2, [pc, #40]	; (800c8b4 <VL53L0X_WrByte+0x44>)
 800c88c:	78bb      	ldrb	r3, [r7, #2]
 800c88e:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800c890:	2202      	movs	r2, #2
 800c892:	4908      	ldr	r1, [pc, #32]	; (800c8b4 <VL53L0X_WrByte+0x44>)
 800c894:	6878      	ldr	r0, [r7, #4]
 800c896:	f7ff ff4e 	bl	800c736 <_I2CWrite>
 800c89a:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d001      	beq.n	800c8a6 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c8a2:	23ec      	movs	r3, #236	; 0xec
 800c8a4:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800c8a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	3710      	adds	r7, #16
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	bd80      	pop	{r7, pc}
 800c8b2:	bf00      	nop
 800c8b4:	20000794 	.word	0x20000794

0800c8b8 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b084      	sub	sp, #16
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
 800c8c0:	460b      	mov	r3, r1
 800c8c2:	70fb      	strb	r3, [r7, #3]
 800c8c4:	4613      	mov	r3, r2
 800c8c6:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800c8cc:	4a0e      	ldr	r2, [pc, #56]	; (800c908 <VL53L0X_WrWord+0x50>)
 800c8ce:	78fb      	ldrb	r3, [r7, #3]
 800c8d0:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800c8d2:	883b      	ldrh	r3, [r7, #0]
 800c8d4:	0a1b      	lsrs	r3, r3, #8
 800c8d6:	b29b      	uxth	r3, r3
 800c8d8:	b2da      	uxtb	r2, r3
 800c8da:	4b0b      	ldr	r3, [pc, #44]	; (800c908 <VL53L0X_WrWord+0x50>)
 800c8dc:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800c8de:	883b      	ldrh	r3, [r7, #0]
 800c8e0:	b2da      	uxtb	r2, r3
 800c8e2:	4b09      	ldr	r3, [pc, #36]	; (800c908 <VL53L0X_WrWord+0x50>)
 800c8e4:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800c8e6:	2203      	movs	r2, #3
 800c8e8:	4907      	ldr	r1, [pc, #28]	; (800c908 <VL53L0X_WrWord+0x50>)
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	f7ff ff23 	bl	800c736 <_I2CWrite>
 800c8f0:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800c8f2:	68bb      	ldr	r3, [r7, #8]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d001      	beq.n	800c8fc <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c8f8:	23ec      	movs	r3, #236	; 0xec
 800c8fa:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800c8fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c900:	4618      	mov	r0, r3
 800c902:	3710      	adds	r7, #16
 800c904:	46bd      	mov	sp, r7
 800c906:	bd80      	pop	{r7, pc}
 800c908:	20000794 	.word	0x20000794

0800c90c <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b084      	sub	sp, #16
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
 800c914:	4608      	mov	r0, r1
 800c916:	4611      	mov	r1, r2
 800c918:	461a      	mov	r2, r3
 800c91a:	4603      	mov	r3, r0
 800c91c:	70fb      	strb	r3, [r7, #3]
 800c91e:	460b      	mov	r3, r1
 800c920:	70bb      	strb	r3, [r7, #2]
 800c922:	4613      	mov	r3, r2
 800c924:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c926:	2300      	movs	r3, #0
 800c928:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800c92a:	f107 020e 	add.w	r2, r7, #14
 800c92e:	78fb      	ldrb	r3, [r7, #3]
 800c930:	4619      	mov	r1, r3
 800c932:	6878      	ldr	r0, [r7, #4]
 800c934:	f000 f81e 	bl	800c974 <VL53L0X_RdByte>
 800c938:	4603      	mov	r3, r0
 800c93a:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800c93c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d110      	bne.n	800c966 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800c944:	7bba      	ldrb	r2, [r7, #14]
 800c946:	78bb      	ldrb	r3, [r7, #2]
 800c948:	4013      	ands	r3, r2
 800c94a:	b2da      	uxtb	r2, r3
 800c94c:	787b      	ldrb	r3, [r7, #1]
 800c94e:	4313      	orrs	r3, r2
 800c950:	b2db      	uxtb	r3, r3
 800c952:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800c954:	7bba      	ldrb	r2, [r7, #14]
 800c956:	78fb      	ldrb	r3, [r7, #3]
 800c958:	4619      	mov	r1, r3
 800c95a:	6878      	ldr	r0, [r7, #4]
 800c95c:	f7ff ff88 	bl	800c870 <VL53L0X_WrByte>
 800c960:	4603      	mov	r3, r0
 800c962:	73fb      	strb	r3, [r7, #15]
 800c964:	e000      	b.n	800c968 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800c966:	bf00      	nop
done:
    return Status;
 800c968:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c96c:	4618      	mov	r0, r3
 800c96e:	3710      	adds	r7, #16
 800c970:	46bd      	mov	sp, r7
 800c972:	bd80      	pop	{r7, pc}

0800c974 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800c974:	b580      	push	{r7, lr}
 800c976:	b086      	sub	sp, #24
 800c978:	af00      	add	r7, sp, #0
 800c97a:	60f8      	str	r0, [r7, #12]
 800c97c:	460b      	mov	r3, r1
 800c97e:	607a      	str	r2, [r7, #4]
 800c980:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c982:	2300      	movs	r3, #0
 800c984:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800c986:	f107 030b 	add.w	r3, r7, #11
 800c98a:	2201      	movs	r2, #1
 800c98c:	4619      	mov	r1, r3
 800c98e:	68f8      	ldr	r0, [r7, #12]
 800c990:	f7ff fed1 	bl	800c736 <_I2CWrite>
 800c994:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800c996:	693b      	ldr	r3, [r7, #16]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d002      	beq.n	800c9a2 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c99c:	23ec      	movs	r3, #236	; 0xec
 800c99e:	75fb      	strb	r3, [r7, #23]
        goto done;
 800c9a0:	e00c      	b.n	800c9bc <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800c9a2:	2201      	movs	r2, #1
 800c9a4:	6879      	ldr	r1, [r7, #4]
 800c9a6:	68f8      	ldr	r0, [r7, #12]
 800c9a8:	f7ff fee4 	bl	800c774 <_I2CRead>
 800c9ac:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800c9ae:	693b      	ldr	r3, [r7, #16]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d002      	beq.n	800c9ba <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c9b4:	23ec      	movs	r3, #236	; 0xec
 800c9b6:	75fb      	strb	r3, [r7, #23]
 800c9b8:	e000      	b.n	800c9bc <VL53L0X_RdByte+0x48>
    }
done:
 800c9ba:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800c9bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	3718      	adds	r7, #24
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	bd80      	pop	{r7, pc}

0800c9c8 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b086      	sub	sp, #24
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	60f8      	str	r0, [r7, #12]
 800c9d0:	460b      	mov	r3, r1
 800c9d2:	607a      	str	r2, [r7, #4]
 800c9d4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800c9da:	f107 030b 	add.w	r3, r7, #11
 800c9de:	2201      	movs	r2, #1
 800c9e0:	4619      	mov	r1, r3
 800c9e2:	68f8      	ldr	r0, [r7, #12]
 800c9e4:	f7ff fea7 	bl	800c736 <_I2CWrite>
 800c9e8:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800c9ea:	693b      	ldr	r3, [r7, #16]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d002      	beq.n	800c9f6 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c9f0:	23ec      	movs	r3, #236	; 0xec
 800c9f2:	75fb      	strb	r3, [r7, #23]
        goto done;
 800c9f4:	e017      	b.n	800ca26 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800c9f6:	2202      	movs	r2, #2
 800c9f8:	490e      	ldr	r1, [pc, #56]	; (800ca34 <VL53L0X_RdWord+0x6c>)
 800c9fa:	68f8      	ldr	r0, [r7, #12]
 800c9fc:	f7ff feba 	bl	800c774 <_I2CRead>
 800ca00:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ca02:	693b      	ldr	r3, [r7, #16]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d002      	beq.n	800ca0e <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ca08:	23ec      	movs	r3, #236	; 0xec
 800ca0a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ca0c:	e00b      	b.n	800ca26 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800ca0e:	4b09      	ldr	r3, [pc, #36]	; (800ca34 <VL53L0X_RdWord+0x6c>)
 800ca10:	781b      	ldrb	r3, [r3, #0]
 800ca12:	b29b      	uxth	r3, r3
 800ca14:	021b      	lsls	r3, r3, #8
 800ca16:	b29a      	uxth	r2, r3
 800ca18:	4b06      	ldr	r3, [pc, #24]	; (800ca34 <VL53L0X_RdWord+0x6c>)
 800ca1a:	785b      	ldrb	r3, [r3, #1]
 800ca1c:	b29b      	uxth	r3, r3
 800ca1e:	4413      	add	r3, r2
 800ca20:	b29a      	uxth	r2, r3
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800ca26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	3718      	adds	r7, #24
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	bd80      	pop	{r7, pc}
 800ca32:	bf00      	nop
 800ca34:	20000794 	.word	0x20000794

0800ca38 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b086      	sub	sp, #24
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	60f8      	str	r0, [r7, #12]
 800ca40:	460b      	mov	r3, r1
 800ca42:	607a      	str	r2, [r7, #4]
 800ca44:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ca46:	2300      	movs	r3, #0
 800ca48:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800ca4a:	f107 030b 	add.w	r3, r7, #11
 800ca4e:	2201      	movs	r2, #1
 800ca50:	4619      	mov	r1, r3
 800ca52:	68f8      	ldr	r0, [r7, #12]
 800ca54:	f7ff fe6f 	bl	800c736 <_I2CWrite>
 800ca58:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ca5a:	693b      	ldr	r3, [r7, #16]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d002      	beq.n	800ca66 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ca60:	23ec      	movs	r3, #236	; 0xec
 800ca62:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ca64:	e01b      	b.n	800ca9e <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800ca66:	2204      	movs	r2, #4
 800ca68:	4910      	ldr	r1, [pc, #64]	; (800caac <VL53L0X_RdDWord+0x74>)
 800ca6a:	68f8      	ldr	r0, [r7, #12]
 800ca6c:	f7ff fe82 	bl	800c774 <_I2CRead>
 800ca70:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ca72:	693b      	ldr	r3, [r7, #16]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d002      	beq.n	800ca7e <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ca78:	23ec      	movs	r3, #236	; 0xec
 800ca7a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ca7c:	e00f      	b.n	800ca9e <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800ca7e:	4b0b      	ldr	r3, [pc, #44]	; (800caac <VL53L0X_RdDWord+0x74>)
 800ca80:	781b      	ldrb	r3, [r3, #0]
 800ca82:	061a      	lsls	r2, r3, #24
 800ca84:	4b09      	ldr	r3, [pc, #36]	; (800caac <VL53L0X_RdDWord+0x74>)
 800ca86:	785b      	ldrb	r3, [r3, #1]
 800ca88:	041b      	lsls	r3, r3, #16
 800ca8a:	441a      	add	r2, r3
 800ca8c:	4b07      	ldr	r3, [pc, #28]	; (800caac <VL53L0X_RdDWord+0x74>)
 800ca8e:	789b      	ldrb	r3, [r3, #2]
 800ca90:	021b      	lsls	r3, r3, #8
 800ca92:	4413      	add	r3, r2
 800ca94:	4a05      	ldr	r2, [pc, #20]	; (800caac <VL53L0X_RdDWord+0x74>)
 800ca96:	78d2      	ldrb	r2, [r2, #3]
 800ca98:	441a      	add	r2, r3
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800ca9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800caa2:	4618      	mov	r0, r3
 800caa4:	3718      	adds	r7, #24
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}
 800caaa:	bf00      	nop
 800caac:	20000794 	.word	0x20000794

0800cab0 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b084      	sub	sp, #16
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800cab8:	2300      	movs	r3, #0
 800caba:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800cabc:	2002      	movs	r0, #2
 800cabe:	f7f4 fec3 	bl	8001848 <HAL_Delay>
    return status;
 800cac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cac6:	4618      	mov	r0, r3
 800cac8:	3710      	adds	r7, #16
 800caca:	46bd      	mov	sp, r7
 800cacc:	bd80      	pop	{r7, pc}
	...

0800cad0 <__libc_init_array>:
 800cad0:	b570      	push	{r4, r5, r6, lr}
 800cad2:	4d0d      	ldr	r5, [pc, #52]	; (800cb08 <__libc_init_array+0x38>)
 800cad4:	4c0d      	ldr	r4, [pc, #52]	; (800cb0c <__libc_init_array+0x3c>)
 800cad6:	1b64      	subs	r4, r4, r5
 800cad8:	10a4      	asrs	r4, r4, #2
 800cada:	2600      	movs	r6, #0
 800cadc:	42a6      	cmp	r6, r4
 800cade:	d109      	bne.n	800caf4 <__libc_init_array+0x24>
 800cae0:	4d0b      	ldr	r5, [pc, #44]	; (800cb10 <__libc_init_array+0x40>)
 800cae2:	4c0c      	ldr	r4, [pc, #48]	; (800cb14 <__libc_init_array+0x44>)
 800cae4:	f000 f836 	bl	800cb54 <_init>
 800cae8:	1b64      	subs	r4, r4, r5
 800caea:	10a4      	asrs	r4, r4, #2
 800caec:	2600      	movs	r6, #0
 800caee:	42a6      	cmp	r6, r4
 800caf0:	d105      	bne.n	800cafe <__libc_init_array+0x2e>
 800caf2:	bd70      	pop	{r4, r5, r6, pc}
 800caf4:	f855 3b04 	ldr.w	r3, [r5], #4
 800caf8:	4798      	blx	r3
 800cafa:	3601      	adds	r6, #1
 800cafc:	e7ee      	b.n	800cadc <__libc_init_array+0xc>
 800cafe:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb02:	4798      	blx	r3
 800cb04:	3601      	adds	r6, #1
 800cb06:	e7f2      	b.n	800caee <__libc_init_array+0x1e>
 800cb08:	0800cbe4 	.word	0x0800cbe4
 800cb0c:	0800cbe4 	.word	0x0800cbe4
 800cb10:	0800cbe4 	.word	0x0800cbe4
 800cb14:	0800cbe8 	.word	0x0800cbe8

0800cb18 <memcpy>:
 800cb18:	440a      	add	r2, r1
 800cb1a:	4291      	cmp	r1, r2
 800cb1c:	f100 33ff 	add.w	r3, r0, #4294967295
 800cb20:	d100      	bne.n	800cb24 <memcpy+0xc>
 800cb22:	4770      	bx	lr
 800cb24:	b510      	push	{r4, lr}
 800cb26:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb2e:	4291      	cmp	r1, r2
 800cb30:	d1f9      	bne.n	800cb26 <memcpy+0xe>
 800cb32:	bd10      	pop	{r4, pc}

0800cb34 <memset>:
 800cb34:	4402      	add	r2, r0
 800cb36:	4603      	mov	r3, r0
 800cb38:	4293      	cmp	r3, r2
 800cb3a:	d100      	bne.n	800cb3e <memset+0xa>
 800cb3c:	4770      	bx	lr
 800cb3e:	f803 1b01 	strb.w	r1, [r3], #1
 800cb42:	e7f9      	b.n	800cb38 <memset+0x4>

0800cb44 <strcpy>:
 800cb44:	4603      	mov	r3, r0
 800cb46:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cb4a:	f803 2b01 	strb.w	r2, [r3], #1
 800cb4e:	2a00      	cmp	r2, #0
 800cb50:	d1f9      	bne.n	800cb46 <strcpy+0x2>
 800cb52:	4770      	bx	lr

0800cb54 <_init>:
 800cb54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb56:	bf00      	nop
 800cb58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb5a:	bc08      	pop	{r3}
 800cb5c:	469e      	mov	lr, r3
 800cb5e:	4770      	bx	lr

0800cb60 <_fini>:
 800cb60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb62:	bf00      	nop
 800cb64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb66:	bc08      	pop	{r3}
 800cb68:	469e      	mov	lr, r3
 800cb6a:	4770      	bx	lr
