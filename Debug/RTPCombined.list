
RTPCombined.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         0000df0c  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800e0cc  0800e0cc  0001e0cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e13c  0800e13c  000202cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800e13c  0800e13c  0001e13c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e144  0800e144  000202cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e144  0800e144  0001e144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e148  0800e148  0001e148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002cc  20000000  0800e14c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000580  200002d0  0800e418  000202d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000850  0800e418  00020850  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023bf4  00000000  00000000  000202fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003959  00000000  00000000  00043ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a30  00000000  00000000  00047850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018c8  00000000  00000000  00049280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002eccd  00000000  00000000  0004ab48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f617  00000000  00000000  00079815  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011abfa  00000000  00000000  00098e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b3a26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007280  00000000  00000000  001b3a78  2**2
=======
  1 .text         0000ce70  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800d02c  0800d02c  0001d02c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d09c  0800d09c  000202cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800d09c  0800d09c  0001d09c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d0a4  0800d0a4  000202cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d0a4  0800d0a4  0001d0a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d0a8  0800d0a8  0001d0a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002cc  20000000  0800d0ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000051c  200002d0  0800d378  000202d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200007ec  0800d378  000207ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022e1c  00000000  00000000  000202fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036b7  00000000  00000000  00043118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001970  00000000  00000000  000467d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001818  00000000  00000000  00048140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000051af  00000000  00000000  00049958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e91a  00000000  00000000  0004eb07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011aaef  00000000  00000000  0006d421  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00187f10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cf4  00000000  00000000  00187f60  2**2
>>>>>>> ModeSelect_v2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

<<<<<<< HEAD
080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200002d0 	.word	0x200002d0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800e0b4 	.word	0x0800e0b4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200002d4 	.word	0x200002d4
 80001fc:	0800e0b4 	.word	0x0800e0b4
=======
080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	200002d0 	.word	0x200002d0
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800d014 	.word	0x0800d014

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	200002d4 	.word	0x200002d4
 80001f8:	0800d014 	.word	0x0800d014
>>>>>>> ModeSelect_v2

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	3c01      	subs	r4, #1
 800033c:	bf28      	it	cs
 800033e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000342:	d2e9      	bcs.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

<<<<<<< HEAD
08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__gedf2>:
 800099c:	f04f 3cff 	mov.w	ip, #4294967295
 80009a0:	e006      	b.n	80009b0 <__cmpdf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__ledf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	e002      	b.n	80009b0 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__cmpdf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c6:	d01b      	beq.n	8000a00 <__cmpdf2+0x54>
 80009c8:	b001      	add	sp, #4
 80009ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ce:	bf0c      	ite	eq
 80009d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d4:	ea91 0f03 	teqne	r1, r3
 80009d8:	bf02      	ittt	eq
 80009da:	ea90 0f02 	teqeq	r0, r2
 80009de:	2000      	moveq	r0, #0
 80009e0:	4770      	bxeq	lr
 80009e2:	f110 0f00 	cmn.w	r0, #0
 80009e6:	ea91 0f03 	teq	r1, r3
 80009ea:	bf58      	it	pl
 80009ec:	4299      	cmppl	r1, r3
 80009ee:	bf08      	it	eq
 80009f0:	4290      	cmpeq	r0, r2
 80009f2:	bf2c      	ite	cs
 80009f4:	17d8      	asrcs	r0, r3, #31
 80009f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009fa:	f040 0001 	orr.w	r0, r0, #1
 80009fe:	4770      	bx	lr
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d102      	bne.n	8000a10 <__cmpdf2+0x64>
 8000a0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0e:	d107      	bne.n	8000a20 <__cmpdf2+0x74>
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d1d6      	bne.n	80009c8 <__cmpdf2+0x1c>
 8000a1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1e:	d0d3      	beq.n	80009c8 <__cmpdf2+0x1c>
 8000a20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdrcmple>:
 8000a28:	4684      	mov	ip, r0
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4662      	mov	r2, ip
 8000a2e:	468c      	mov	ip, r1
 8000a30:	4619      	mov	r1, r3
 8000a32:	4663      	mov	r3, ip
 8000a34:	e000      	b.n	8000a38 <__aeabi_cdcmpeq>
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdcmpeq>:
 8000a38:	b501      	push	{r0, lr}
 8000a3a:	f7ff ffb7 	bl	80009ac <__cmpdf2>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	bf48      	it	mi
 8000a42:	f110 0f00 	cmnmi.w	r0, #0
 8000a46:	bd01      	pop	{r0, pc}

08000a48 <__aeabi_dcmpeq>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff fff4 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a50:	bf0c      	ite	eq
 8000a52:	2001      	moveq	r0, #1
 8000a54:	2000      	movne	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmplt>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffea 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a64:	bf34      	ite	cc
 8000a66:	2001      	movcc	r0, #1
 8000a68:	2000      	movcs	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmple>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffe0 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpge>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffce 	bl	8000a28 <__aeabi_cdrcmple>
 8000a8c:	bf94      	ite	ls
 8000a8e:	2001      	movls	r0, #1
 8000a90:	2000      	movhi	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpgt>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffc4 	bl	8000a28 <__aeabi_cdrcmple>
 8000aa0:	bf34      	ite	cc
 8000aa2:	2001      	movcc	r0, #1
 8000aa4:	2000      	movcs	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_ldivmod>:
 8000aac:	b97b      	cbnz	r3, 8000ace <__aeabi_ldivmod+0x22>
 8000aae:	b972      	cbnz	r2, 8000ace <__aeabi_ldivmod+0x22>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bfbe      	ittt	lt
 8000ab4:	2000      	movlt	r0, #0
 8000ab6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000aba:	e006      	blt.n	8000aca <__aeabi_ldivmod+0x1e>
 8000abc:	bf08      	it	eq
 8000abe:	2800      	cmpeq	r0, #0
 8000ac0:	bf1c      	itt	ne
 8000ac2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ac6:	f04f 30ff 	movne.w	r0, #4294967295
 8000aca:	f000 b9bf 	b.w	8000e4c <__aeabi_idiv0>
 8000ace:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ad6:	2900      	cmp	r1, #0
 8000ad8:	db09      	blt.n	8000aee <__aeabi_ldivmod+0x42>
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	db1a      	blt.n	8000b14 <__aeabi_ldivmod+0x68>
 8000ade:	f000 f84d 	bl	8000b7c <__udivmoddi4>
 8000ae2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aea:	b004      	add	sp, #16
 8000aec:	4770      	bx	lr
 8000aee:	4240      	negs	r0, r0
 8000af0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	db1b      	blt.n	8000b30 <__aeabi_ldivmod+0x84>
 8000af8:	f000 f840 	bl	8000b7c <__udivmoddi4>
 8000afc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b04:	b004      	add	sp, #16
 8000b06:	4240      	negs	r0, r0
 8000b08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b0c:	4252      	negs	r2, r2
 8000b0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b12:	4770      	bx	lr
 8000b14:	4252      	negs	r2, r2
 8000b16:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b1a:	f000 f82f 	bl	8000b7c <__udivmoddi4>
 8000b1e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b26:	b004      	add	sp, #16
 8000b28:	4240      	negs	r0, r0
 8000b2a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b2e:	4770      	bx	lr
 8000b30:	4252      	negs	r2, r2
 8000b32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b36:	f000 f821 	bl	8000b7c <__udivmoddi4>
 8000b3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b42:	b004      	add	sp, #16
 8000b44:	4252      	negs	r2, r2
 8000b46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b4a:	4770      	bx	lr

08000b4c <__aeabi_uldivmod>:
 8000b4c:	b953      	cbnz	r3, 8000b64 <__aeabi_uldivmod+0x18>
 8000b4e:	b94a      	cbnz	r2, 8000b64 <__aeabi_uldivmod+0x18>
 8000b50:	2900      	cmp	r1, #0
 8000b52:	bf08      	it	eq
 8000b54:	2800      	cmpeq	r0, #0
 8000b56:	bf1c      	itt	ne
 8000b58:	f04f 31ff 	movne.w	r1, #4294967295
 8000b5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b60:	f000 b974 	b.w	8000e4c <__aeabi_idiv0>
 8000b64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b6c:	f000 f806 	bl	8000b7c <__udivmoddi4>
 8000b70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b78:	b004      	add	sp, #16
 8000b7a:	4770      	bx	lr

08000b7c <__udivmoddi4>:
 8000b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b80:	9d08      	ldr	r5, [sp, #32]
 8000b82:	4604      	mov	r4, r0
 8000b84:	468e      	mov	lr, r1
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d14d      	bne.n	8000c26 <__udivmoddi4+0xaa>
 8000b8a:	428a      	cmp	r2, r1
 8000b8c:	4694      	mov	ip, r2
 8000b8e:	d969      	bls.n	8000c64 <__udivmoddi4+0xe8>
 8000b90:	fab2 f282 	clz	r2, r2
 8000b94:	b152      	cbz	r2, 8000bac <__udivmoddi4+0x30>
 8000b96:	fa01 f302 	lsl.w	r3, r1, r2
 8000b9a:	f1c2 0120 	rsb	r1, r2, #32
 8000b9e:	fa20 f101 	lsr.w	r1, r0, r1
 8000ba2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ba6:	ea41 0e03 	orr.w	lr, r1, r3
 8000baa:	4094      	lsls	r4, r2
 8000bac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb0:	0c21      	lsrs	r1, r4, #16
 8000bb2:	fbbe f6f8 	udiv	r6, lr, r8
 8000bb6:	fa1f f78c 	uxth.w	r7, ip
 8000bba:	fb08 e316 	mls	r3, r8, r6, lr
 8000bbe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bc2:	fb06 f107 	mul.w	r1, r6, r7
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	d90a      	bls.n	8000be0 <__udivmoddi4+0x64>
 8000bca:	eb1c 0303 	adds.w	r3, ip, r3
 8000bce:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bd2:	f080 811f 	bcs.w	8000e14 <__udivmoddi4+0x298>
 8000bd6:	4299      	cmp	r1, r3
 8000bd8:	f240 811c 	bls.w	8000e14 <__udivmoddi4+0x298>
 8000bdc:	3e02      	subs	r6, #2
 8000bde:	4463      	add	r3, ip
 8000be0:	1a5b      	subs	r3, r3, r1
 8000be2:	b2a4      	uxth	r4, r4
 8000be4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000be8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf0:	fb00 f707 	mul.w	r7, r0, r7
 8000bf4:	42a7      	cmp	r7, r4
 8000bf6:	d90a      	bls.n	8000c0e <__udivmoddi4+0x92>
 8000bf8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c00:	f080 810a 	bcs.w	8000e18 <__udivmoddi4+0x29c>
 8000c04:	42a7      	cmp	r7, r4
 8000c06:	f240 8107 	bls.w	8000e18 <__udivmoddi4+0x29c>
 8000c0a:	4464      	add	r4, ip
 8000c0c:	3802      	subs	r0, #2
 8000c0e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c12:	1be4      	subs	r4, r4, r7
 8000c14:	2600      	movs	r6, #0
 8000c16:	b11d      	cbz	r5, 8000c20 <__udivmoddi4+0xa4>
 8000c18:	40d4      	lsrs	r4, r2
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c20:	4631      	mov	r1, r6
 8000c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c26:	428b      	cmp	r3, r1
 8000c28:	d909      	bls.n	8000c3e <__udivmoddi4+0xc2>
 8000c2a:	2d00      	cmp	r5, #0
 8000c2c:	f000 80ef 	beq.w	8000e0e <__udivmoddi4+0x292>
 8000c30:	2600      	movs	r6, #0
 8000c32:	e9c5 0100 	strd	r0, r1, [r5]
 8000c36:	4630      	mov	r0, r6
 8000c38:	4631      	mov	r1, r6
 8000c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3e:	fab3 f683 	clz	r6, r3
 8000c42:	2e00      	cmp	r6, #0
 8000c44:	d14a      	bne.n	8000cdc <__udivmoddi4+0x160>
 8000c46:	428b      	cmp	r3, r1
 8000c48:	d302      	bcc.n	8000c50 <__udivmoddi4+0xd4>
 8000c4a:	4282      	cmp	r2, r0
 8000c4c:	f200 80f9 	bhi.w	8000e42 <__udivmoddi4+0x2c6>
 8000c50:	1a84      	subs	r4, r0, r2
 8000c52:	eb61 0303 	sbc.w	r3, r1, r3
 8000c56:	2001      	movs	r0, #1
 8000c58:	469e      	mov	lr, r3
 8000c5a:	2d00      	cmp	r5, #0
 8000c5c:	d0e0      	beq.n	8000c20 <__udivmoddi4+0xa4>
 8000c5e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c62:	e7dd      	b.n	8000c20 <__udivmoddi4+0xa4>
 8000c64:	b902      	cbnz	r2, 8000c68 <__udivmoddi4+0xec>
 8000c66:	deff      	udf	#255	; 0xff
 8000c68:	fab2 f282 	clz	r2, r2
 8000c6c:	2a00      	cmp	r2, #0
 8000c6e:	f040 8092 	bne.w	8000d96 <__udivmoddi4+0x21a>
 8000c72:	eba1 010c 	sub.w	r1, r1, ip
 8000c76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c7a:	fa1f fe8c 	uxth.w	lr, ip
 8000c7e:	2601      	movs	r6, #1
 8000c80:	0c20      	lsrs	r0, r4, #16
 8000c82:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c86:	fb07 1113 	mls	r1, r7, r3, r1
 8000c8a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c8e:	fb0e f003 	mul.w	r0, lr, r3
 8000c92:	4288      	cmp	r0, r1
 8000c94:	d908      	bls.n	8000ca8 <__udivmoddi4+0x12c>
 8000c96:	eb1c 0101 	adds.w	r1, ip, r1
 8000c9a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c9e:	d202      	bcs.n	8000ca6 <__udivmoddi4+0x12a>
 8000ca0:	4288      	cmp	r0, r1
 8000ca2:	f200 80cb 	bhi.w	8000e3c <__udivmoddi4+0x2c0>
 8000ca6:	4643      	mov	r3, r8
 8000ca8:	1a09      	subs	r1, r1, r0
 8000caa:	b2a4      	uxth	r4, r4
 8000cac:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cb0:	fb07 1110 	mls	r1, r7, r0, r1
 8000cb4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cb8:	fb0e fe00 	mul.w	lr, lr, r0
 8000cbc:	45a6      	cmp	lr, r4
 8000cbe:	d908      	bls.n	8000cd2 <__udivmoddi4+0x156>
 8000cc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cc8:	d202      	bcs.n	8000cd0 <__udivmoddi4+0x154>
 8000cca:	45a6      	cmp	lr, r4
 8000ccc:	f200 80bb 	bhi.w	8000e46 <__udivmoddi4+0x2ca>
 8000cd0:	4608      	mov	r0, r1
 8000cd2:	eba4 040e 	sub.w	r4, r4, lr
 8000cd6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cda:	e79c      	b.n	8000c16 <__udivmoddi4+0x9a>
 8000cdc:	f1c6 0720 	rsb	r7, r6, #32
 8000ce0:	40b3      	lsls	r3, r6
 8000ce2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ce6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cea:	fa20 f407 	lsr.w	r4, r0, r7
 8000cee:	fa01 f306 	lsl.w	r3, r1, r6
 8000cf2:	431c      	orrs	r4, r3
 8000cf4:	40f9      	lsrs	r1, r7
 8000cf6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cfa:	fa00 f306 	lsl.w	r3, r0, r6
 8000cfe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d02:	0c20      	lsrs	r0, r4, #16
 8000d04:	fa1f fe8c 	uxth.w	lr, ip
 8000d08:	fb09 1118 	mls	r1, r9, r8, r1
 8000d0c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d10:	fb08 f00e 	mul.w	r0, r8, lr
 8000d14:	4288      	cmp	r0, r1
 8000d16:	fa02 f206 	lsl.w	r2, r2, r6
 8000d1a:	d90b      	bls.n	8000d34 <__udivmoddi4+0x1b8>
 8000d1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d20:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d24:	f080 8088 	bcs.w	8000e38 <__udivmoddi4+0x2bc>
 8000d28:	4288      	cmp	r0, r1
 8000d2a:	f240 8085 	bls.w	8000e38 <__udivmoddi4+0x2bc>
 8000d2e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d32:	4461      	add	r1, ip
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d3c:	fb09 1110 	mls	r1, r9, r0, r1
 8000d40:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d44:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d48:	458e      	cmp	lr, r1
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x1e2>
 8000d4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d50:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d54:	d26c      	bcs.n	8000e30 <__udivmoddi4+0x2b4>
 8000d56:	458e      	cmp	lr, r1
 8000d58:	d96a      	bls.n	8000e30 <__udivmoddi4+0x2b4>
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	4461      	add	r1, ip
 8000d5e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d62:	fba0 9402 	umull	r9, r4, r0, r2
 8000d66:	eba1 010e 	sub.w	r1, r1, lr
 8000d6a:	42a1      	cmp	r1, r4
 8000d6c:	46c8      	mov	r8, r9
 8000d6e:	46a6      	mov	lr, r4
 8000d70:	d356      	bcc.n	8000e20 <__udivmoddi4+0x2a4>
 8000d72:	d053      	beq.n	8000e1c <__udivmoddi4+0x2a0>
 8000d74:	b15d      	cbz	r5, 8000d8e <__udivmoddi4+0x212>
 8000d76:	ebb3 0208 	subs.w	r2, r3, r8
 8000d7a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d7e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d82:	fa22 f306 	lsr.w	r3, r2, r6
 8000d86:	40f1      	lsrs	r1, r6
 8000d88:	431f      	orrs	r7, r3
 8000d8a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d8e:	2600      	movs	r6, #0
 8000d90:	4631      	mov	r1, r6
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	f1c2 0320 	rsb	r3, r2, #32
 8000d9a:	40d8      	lsrs	r0, r3
 8000d9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da0:	fa21 f303 	lsr.w	r3, r1, r3
 8000da4:	4091      	lsls	r1, r2
 8000da6:	4301      	orrs	r1, r0
 8000da8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dac:	fa1f fe8c 	uxth.w	lr, ip
 8000db0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000db4:	fb07 3610 	mls	r6, r7, r0, r3
 8000db8:	0c0b      	lsrs	r3, r1, #16
 8000dba:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dbe:	fb00 f60e 	mul.w	r6, r0, lr
 8000dc2:	429e      	cmp	r6, r3
 8000dc4:	fa04 f402 	lsl.w	r4, r4, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x260>
 8000dca:	eb1c 0303 	adds.w	r3, ip, r3
 8000dce:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dd2:	d22f      	bcs.n	8000e34 <__udivmoddi4+0x2b8>
 8000dd4:	429e      	cmp	r6, r3
 8000dd6:	d92d      	bls.n	8000e34 <__udivmoddi4+0x2b8>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4463      	add	r3, ip
 8000ddc:	1b9b      	subs	r3, r3, r6
 8000dde:	b289      	uxth	r1, r1
 8000de0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000de4:	fb07 3316 	mls	r3, r7, r6, r3
 8000de8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dec:	fb06 f30e 	mul.w	r3, r6, lr
 8000df0:	428b      	cmp	r3, r1
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x28a>
 8000df4:	eb1c 0101 	adds.w	r1, ip, r1
 8000df8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000dfc:	d216      	bcs.n	8000e2c <__udivmoddi4+0x2b0>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d914      	bls.n	8000e2c <__udivmoddi4+0x2b0>
 8000e02:	3e02      	subs	r6, #2
 8000e04:	4461      	add	r1, ip
 8000e06:	1ac9      	subs	r1, r1, r3
 8000e08:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e0c:	e738      	b.n	8000c80 <__udivmoddi4+0x104>
 8000e0e:	462e      	mov	r6, r5
 8000e10:	4628      	mov	r0, r5
 8000e12:	e705      	b.n	8000c20 <__udivmoddi4+0xa4>
 8000e14:	4606      	mov	r6, r0
 8000e16:	e6e3      	b.n	8000be0 <__udivmoddi4+0x64>
 8000e18:	4618      	mov	r0, r3
 8000e1a:	e6f8      	b.n	8000c0e <__udivmoddi4+0x92>
 8000e1c:	454b      	cmp	r3, r9
 8000e1e:	d2a9      	bcs.n	8000d74 <__udivmoddi4+0x1f8>
 8000e20:	ebb9 0802 	subs.w	r8, r9, r2
 8000e24:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e28:	3801      	subs	r0, #1
 8000e2a:	e7a3      	b.n	8000d74 <__udivmoddi4+0x1f8>
 8000e2c:	4646      	mov	r6, r8
 8000e2e:	e7ea      	b.n	8000e06 <__udivmoddi4+0x28a>
 8000e30:	4620      	mov	r0, r4
 8000e32:	e794      	b.n	8000d5e <__udivmoddi4+0x1e2>
 8000e34:	4640      	mov	r0, r8
 8000e36:	e7d1      	b.n	8000ddc <__udivmoddi4+0x260>
 8000e38:	46d0      	mov	r8, sl
 8000e3a:	e77b      	b.n	8000d34 <__udivmoddi4+0x1b8>
 8000e3c:	3b02      	subs	r3, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	e732      	b.n	8000ca8 <__udivmoddi4+0x12c>
 8000e42:	4630      	mov	r0, r6
 8000e44:	e709      	b.n	8000c5a <__udivmoddi4+0xde>
 8000e46:	4464      	add	r4, ip
 8000e48:	3802      	subs	r0, #2
 8000e4a:	e742      	b.n	8000cd2 <__udivmoddi4+0x156>

08000e4c <__aeabi_idiv0>:
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop

08000e50 <hx711_delay_us>:
#define hx711_delay(x)    HAL_Delay(x)
#endif

//#############################################################################################
void hx711_delay_us (hx711_t *hx711)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
	uint32_t delay = _HX711_DELAY_US_LOOP;
 8000e58:	2304      	movs	r3, #4
 8000e5a:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COUNTER(hx711->timer,0);  // set the counter value a 0
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2200      	movs	r2, #0
 8000e64:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(hx711->timer) < delay);  // wait for the counter to reach the us input in the parameter
 8000e66:	bf00      	nop
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e70:	68fa      	ldr	r2, [r7, #12]
 8000e72:	429a      	cmp	r2, r3
 8000e74:	d8f8      	bhi.n	8000e68 <hx711_delay_us+0x18>
}
 8000e76:	bf00      	nop
 8000e78:	bf00      	nop
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <hx711_lock>:

//#############################################################################################
void hx711_lock(hx711_t *hx711)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  while (hx711->lock)
 8000e8c:	e002      	b.n	8000e94 <hx711_lock+0x10>
    hx711_delay(1);
 8000e8e:	2001      	movs	r0, #1
 8000e90:	f001 fec4 	bl	8002c1c <HAL_Delay>
  while (hx711->lock)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	7d1b      	ldrb	r3, [r3, #20]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d1f8      	bne.n	8000e8e <hx711_lock+0xa>
  hx711->lock = 1;      
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	751a      	strb	r2, [r3, #20]
}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <hx711_unlock>:
//#############################################################################################
void hx711_unlock(hx711_t *hx711)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	b083      	sub	sp, #12
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
  hx711->lock = 0;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	751a      	strb	r2, [r3, #20]
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <hx711_init>:
//#############################################################################################
void hx711_init(hx711_t *hx711, GPIO_TypeDef *clk_gpio, uint16_t clk_pin, GPIO_TypeDef *dat_gpio, uint16_t dat_pin,TIM_HandleTypeDef *timer)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08a      	sub	sp, #40	; 0x28
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	603b      	str	r3, [r7, #0]
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	80fb      	strh	r3, [r7, #6]
  hx711_lock(hx711);
 8000ed4:	68f8      	ldr	r0, [r7, #12]
 8000ed6:	f7ff ffd5 	bl	8000e84 <hx711_lock>
  hx711->clk_gpio = clk_gpio;
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	68ba      	ldr	r2, [r7, #8]
 8000ede:	601a      	str	r2, [r3, #0]
  hx711->clk_pin = clk_pin;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	88fa      	ldrh	r2, [r7, #6]
 8000ee4:	811a      	strh	r2, [r3, #8]
  hx711->dat_gpio = dat_gpio;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	683a      	ldr	r2, [r7, #0]
 8000eea:	605a      	str	r2, [r3, #4]
  hx711->dat_pin = dat_pin;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000ef0:	815a      	strh	r2, [r3, #10]
  hx711->timer = timer;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ef6:	619a      	str	r2, [r3, #24]
  GPIO_InitTypeDef  gpio = {0};
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f10:	2302      	movs	r3, #2
 8000f12:	623b      	str	r3, [r7, #32]
  gpio.Pin = clk_pin;
 8000f14:	88fb      	ldrh	r3, [r7, #6]
 8000f16:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(clk_gpio, &gpio);
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	68b8      	ldr	r0, [r7, #8]
 8000f20:	f002 f86c 	bl	8002ffc <HAL_GPIO_Init>
  gpio.Mode = GPIO_MODE_INPUT;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_PULLUP;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	623b      	str	r3, [r7, #32]
  gpio.Pin = dat_pin;
 8000f30:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000f32:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(dat_gpio, &gpio);
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	4619      	mov	r1, r3
 8000f3a:	6838      	ldr	r0, [r7, #0]
 8000f3c:	f002 f85e 	bl	8002ffc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	6818      	ldr	r0, [r3, #0]
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	891b      	ldrh	r3, [r3, #8]
 8000f48:	2201      	movs	r2, #1
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	f002 fa00 	bl	8003350 <HAL_GPIO_WritePin>
  hx711_delay(10);
 8000f50:	200a      	movs	r0, #10
 8000f52:	f001 fe63 	bl	8002c1c <HAL_Delay>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	6818      	ldr	r0, [r3, #0]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	891b      	ldrh	r3, [r3, #8]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	4619      	mov	r1, r3
 8000f62:	f002 f9f5 	bl	8003350 <HAL_GPIO_WritePin>
  hx711_delay(10);  
 8000f66:	200a      	movs	r0, #10
 8000f68:	f001 fe58 	bl	8002c1c <HAL_Delay>
  hx711_value(hx711);
 8000f6c:	68f8      	ldr	r0, [r7, #12]
 8000f6e:	f000 f80a 	bl	8000f86 <hx711_value>
  hx711_value(hx711);
 8000f72:	68f8      	ldr	r0, [r7, #12]
 8000f74:	f000 f807 	bl	8000f86 <hx711_value>
  hx711_unlock(hx711); 
 8000f78:	68f8      	ldr	r0, [r7, #12]
 8000f7a:	f7ff ff96 	bl	8000eaa <hx711_unlock>
}
 8000f7e:	bf00      	nop
 8000f80:	3728      	adds	r7, #40	; 0x28
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <hx711_value>:
//#############################################################################################
int32_t hx711_value(hx711_t *hx711)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b086      	sub	sp, #24
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
  uint32_t data = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]
  uint32_t  startTime = HAL_GetTick();
 8000f92:	f001 fe37 	bl	8002c04 <HAL_GetTick>
 8000f96:	60f8      	str	r0, [r7, #12]
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8000f98:	e00b      	b.n	8000fb2 <hx711_value+0x2c>
  {
    hx711_delay(1);
 8000f9a:	2001      	movs	r0, #1
 8000f9c:	f001 fe3e 	bl	8002c1c <HAL_Delay>
    if(HAL_GetTick() - startTime > 150)
 8000fa0:	f001 fe30 	bl	8002c04 <HAL_GetTick>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	2b96      	cmp	r3, #150	; 0x96
 8000fac:	d901      	bls.n	8000fb2 <hx711_value+0x2c>
      return 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	e059      	b.n	8001066 <hx711_value+0xe0>
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685a      	ldr	r2, [r3, #4]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	895b      	ldrh	r3, [r3, #10]
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4610      	mov	r0, r2
 8000fbe:	f002 f9af 	bl	8003320 <HAL_GPIO_ReadPin>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d0e8      	beq.n	8000f9a <hx711_value+0x14>
  }
  for(int8_t i=0; i<24 ; i++)
 8000fc8:	2300      	movs	r3, #0
 8000fca:	74fb      	strb	r3, [r7, #19]
 8000fcc:	e02c      	b.n	8001028 <hx711_value+0xa2>
  {
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);   
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6818      	ldr	r0, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	891b      	ldrh	r3, [r3, #8]
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f002 f9b9 	bl	8003350 <HAL_GPIO_WritePin>
    hx711_delay_us(hx711);
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f7ff ff36 	bl	8000e50 <hx711_delay_us>
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6818      	ldr	r0, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	891b      	ldrh	r3, [r3, #8]
 8000fec:	2200      	movs	r2, #0
 8000fee:	4619      	mov	r1, r3
 8000ff0:	f002 f9ae 	bl	8003350 <HAL_GPIO_WritePin>
    hx711_delay_us(hx711);
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f7ff ff2b 	bl	8000e50 <hx711_delay_us>
    data = data << 1;    
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	617b      	str	r3, [r7, #20]
    if(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	685a      	ldr	r2, [r3, #4]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	895b      	ldrh	r3, [r3, #10]
 8001008:	4619      	mov	r1, r3
 800100a:	4610      	mov	r0, r2
 800100c:	f002 f988 	bl	8003320 <HAL_GPIO_ReadPin>
 8001010:	4603      	mov	r3, r0
 8001012:	2b01      	cmp	r3, #1
 8001014:	d102      	bne.n	800101c <hx711_value+0x96>
      data ++;
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	3301      	adds	r3, #1
 800101a:	617b      	str	r3, [r7, #20]
  for(int8_t i=0; i<24 ; i++)
 800101c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001020:	b2db      	uxtb	r3, r3
 8001022:	3301      	adds	r3, #1
 8001024:	b2db      	uxtb	r3, r3
 8001026:	74fb      	strb	r3, [r7, #19]
 8001028:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800102c:	2b17      	cmp	r3, #23
 800102e:	ddce      	ble.n	8000fce <hx711_value+0x48>
  }
  data = data ^ 0x800000; 
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 8001036:	617b      	str	r3, [r7, #20]
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);   
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6818      	ldr	r0, [r3, #0]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	891b      	ldrh	r3, [r3, #8]
 8001040:	2201      	movs	r2, #1
 8001042:	4619      	mov	r1, r3
 8001044:	f002 f984 	bl	8003350 <HAL_GPIO_WritePin>
  hx711_delay_us(hx711);
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f7ff ff01 	bl	8000e50 <hx711_delay_us>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6818      	ldr	r0, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	891b      	ldrh	r3, [r3, #8]
 8001056:	2200      	movs	r2, #0
 8001058:	4619      	mov	r1, r3
 800105a:	f002 f979 	bl	8003350 <HAL_GPIO_WritePin>
  hx711_delay_us(hx711);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f7ff fef6 	bl	8000e50 <hx711_delay_us>
  return data;    
 8001064:	697b      	ldr	r3, [r7, #20]
}
 8001066:	4618      	mov	r0, r3
 8001068:	3718      	adds	r7, #24
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <hx711_value_ave>:
//#############################################################################################
int32_t hx711_value_ave(hx711_t *hx711, uint16_t sample)
{
 800106e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	460b      	mov	r3, r1
 800107a:	807b      	strh	r3, [r7, #2]
  hx711_lock(hx711);
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff ff01 	bl	8000e84 <hx711_lock>
  int64_t  ave = 0;
 8001082:	f04f 0200 	mov.w	r2, #0
 8001086:	f04f 0300 	mov.w	r3, #0
 800108a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for(uint16_t i=0 ; i<sample ; i++)
 800108e:	2300      	movs	r3, #0
 8001090:	81fb      	strh	r3, [r7, #14]
 8001092:	e014      	b.n	80010be <hx711_value_ave+0x50>
  {
    ave += hx711_value(hx711);
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f7ff ff76 	bl	8000f86 <hx711_value>
 800109a:	4603      	mov	r3, r0
 800109c:	17da      	asrs	r2, r3, #31
 800109e:	461c      	mov	r4, r3
 80010a0:	4615      	mov	r5, r2
 80010a2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80010a6:	eb12 0804 	adds.w	r8, r2, r4
 80010aa:	eb43 0905 	adc.w	r9, r3, r5
 80010ae:	e9c7 8904 	strd	r8, r9, [r7, #16]
    hx711_delay(5);
 80010b2:	2005      	movs	r0, #5
 80010b4:	f001 fdb2 	bl	8002c1c <HAL_Delay>
  for(uint16_t i=0 ; i<sample ; i++)
 80010b8:	89fb      	ldrh	r3, [r7, #14]
 80010ba:	3301      	adds	r3, #1
 80010bc:	81fb      	strh	r3, [r7, #14]
 80010be:	89fa      	ldrh	r2, [r7, #14]
 80010c0:	887b      	ldrh	r3, [r7, #2]
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d3e6      	bcc.n	8001094 <hx711_value_ave+0x26>
  }
  int32_t answer = (int32_t)(ave / sample);
 80010c6:	887b      	ldrh	r3, [r7, #2]
 80010c8:	2200      	movs	r2, #0
 80010ca:	469a      	mov	sl, r3
 80010cc:	4693      	mov	fp, r2
 80010ce:	4652      	mov	r2, sl
 80010d0:	465b      	mov	r3, fp
 80010d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80010d6:	f7ff fce9 	bl	8000aac <__aeabi_ldivmod>
 80010da:	4602      	mov	r2, r0
 80010dc:	460b      	mov	r3, r1
 80010de:	4613      	mov	r3, r2
 80010e0:	60bb      	str	r3, [r7, #8]
  hx711_unlock(hx711);
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f7ff fee1 	bl	8000eaa <hx711_unlock>
  return answer;
 80010e8:	68bb      	ldr	r3, [r7, #8]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80010f4:	0000      	movs	r0, r0
	...

080010f8 <main>:
=======
08000500 <modeSwitch>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void modeSwitch(RTP_MODE mode){
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	71fb      	strb	r3, [r7, #7]
	rtpMode = mode;
 800050a:	4a59      	ldr	r2, [pc, #356]	; (8000670 <modeSwitch+0x170>)
 800050c:	79fb      	ldrb	r3, [r7, #7]
 800050e:	7013      	strb	r3, [r2, #0]

	//reset sub FSMs
	zeroMode = 0;
 8000510:	4b58      	ldr	r3, [pc, #352]	; (8000674 <modeSwitch+0x174>)
 8000512:	2200      	movs	r2, #0
 8000514:	701a      	strb	r2, [r3, #0]

	//adjust LED config and motor speed
	switch(mode){
 8000516:	79fb      	ldrb	r3, [r7, #7]
 8000518:	2b03      	cmp	r3, #3
 800051a:	f200 80a5 	bhi.w	8000668 <modeSwitch+0x168>
 800051e:	a201      	add	r2, pc, #4	; (adr r2, 8000524 <modeSwitch+0x24>)
 8000520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000524:	08000535 	.word	0x08000535
 8000528:	08000567 	.word	0x08000567
 800052c:	080005bd 	.word	0x080005bd
 8000530:	08000613 	.word	0x08000613
	case RTP_STANDBY:
		//write to LED
		HAL_GPIO_WritePin(statusLed1_GPIO_Port, statusLed1_Pin, 1);
 8000534:	2201      	movs	r2, #1
 8000536:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800053a:	484f      	ldr	r0, [pc, #316]	; (8000678 <modeSwitch+0x178>)
 800053c:	f001 ff4e 	bl	80023dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(statusLed2_GPIO_Port, statusLed2_Pin, 0);
 8000540:	2200      	movs	r2, #0
 8000542:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000546:	484d      	ldr	r0, [pc, #308]	; (800067c <modeSwitch+0x17c>)
 8000548:	f001 ff48 	bl	80023dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(statusLed3_GPIO_Port, statusLed3_Pin, 0);
 800054c:	2200      	movs	r2, #0
 800054e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000552:	484a      	ldr	r0, [pc, #296]	; (800067c <modeSwitch+0x17c>)
 8000554:	f001 ff42 	bl	80023dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(statusLed4_GPIO_Port, statusLed4_Pin, 0);
 8000558:	2200      	movs	r2, #0
 800055a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800055e:	4846      	ldr	r0, [pc, #280]	; (8000678 <modeSwitch+0x178>)
 8000560:	f001 ff3c 	bl	80023dc <HAL_GPIO_WritePin>
		break;
 8000564:	e080      	b.n	8000668 <modeSwitch+0x168>
	case RTP_ZERO:
		HAL_GPIO_WritePin(statusLed1_GPIO_Port, statusLed1_Pin, 0);
 8000566:	2200      	movs	r2, #0
 8000568:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800056c:	4842      	ldr	r0, [pc, #264]	; (8000678 <modeSwitch+0x178>)
 800056e:	f001 ff35 	bl	80023dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(statusLed2_GPIO_Port, statusLed2_Pin, 1);
 8000572:	2201      	movs	r2, #1
 8000574:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000578:	4840      	ldr	r0, [pc, #256]	; (800067c <modeSwitch+0x17c>)
 800057a:	f001 ff2f 	bl	80023dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(statusLed3_GPIO_Port, statusLed3_Pin, 0);
 800057e:	2200      	movs	r2, #0
 8000580:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000584:	483d      	ldr	r0, [pc, #244]	; (800067c <modeSwitch+0x17c>)
 8000586:	f001 ff29 	bl	80023dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(statusLed4_GPIO_Port, statusLed4_Pin, 0);
 800058a:	2200      	movs	r2, #0
 800058c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000590:	4839      	ldr	r0, [pc, #228]	; (8000678 <modeSwitch+0x178>)
 8000592:	f001 ff23 	bl	80023dc <HAL_GPIO_WritePin>
		setSpeed(&rMotor, rMotor.PPS_ZeroDefault);
 8000596:	4b3a      	ldr	r3, [pc, #232]	; (8000680 <modeSwitch+0x180>)
 8000598:	695b      	ldr	r3, [r3, #20]
 800059a:	4619      	mov	r1, r3
 800059c:	4838      	ldr	r0, [pc, #224]	; (8000680 <modeSwitch+0x180>)
 800059e:	f000 ffb7 	bl	8001510 <setSpeed>
		setSpeed(&thetaMotor, thetaMotor.PPS_ZeroDefault);
 80005a2:	4b38      	ldr	r3, [pc, #224]	; (8000684 <modeSwitch+0x184>)
 80005a4:	695b      	ldr	r3, [r3, #20]
 80005a6:	4619      	mov	r1, r3
 80005a8:	4836      	ldr	r0, [pc, #216]	; (8000684 <modeSwitch+0x184>)
 80005aa:	f000 ffb1 	bl	8001510 <setSpeed>
		setSpeed(&yMotor, yMotor.PPS_ZeroDefault);
 80005ae:	4b36      	ldr	r3, [pc, #216]	; (8000688 <modeSwitch+0x188>)
 80005b0:	695b      	ldr	r3, [r3, #20]
 80005b2:	4619      	mov	r1, r3
 80005b4:	4834      	ldr	r0, [pc, #208]	; (8000688 <modeSwitch+0x188>)
 80005b6:	f000 ffab 	bl	8001510 <setSpeed>
		break;
 80005ba:	e055      	b.n	8000668 <modeSwitch+0x168>
	case RTP_TATTOO:
		HAL_GPIO_WritePin(statusLed1_GPIO_Port, statusLed1_Pin, 0);
 80005bc:	2200      	movs	r2, #0
 80005be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c2:	482d      	ldr	r0, [pc, #180]	; (8000678 <modeSwitch+0x178>)
 80005c4:	f001 ff0a 	bl	80023dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(statusLed2_GPIO_Port, statusLed2_Pin, 0);
 80005c8:	2200      	movs	r2, #0
 80005ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ce:	482b      	ldr	r0, [pc, #172]	; (800067c <modeSwitch+0x17c>)
 80005d0:	f001 ff04 	bl	80023dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(statusLed3_GPIO_Port, statusLed3_Pin, 1);
 80005d4:	2201      	movs	r2, #1
 80005d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005da:	4828      	ldr	r0, [pc, #160]	; (800067c <modeSwitch+0x17c>)
 80005dc:	f001 fefe 	bl	80023dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(statusLed4_GPIO_Port, statusLed4_Pin, 0);
 80005e0:	2200      	movs	r2, #0
 80005e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005e6:	4824      	ldr	r0, [pc, #144]	; (8000678 <modeSwitch+0x178>)
 80005e8:	f001 fef8 	bl	80023dc <HAL_GPIO_WritePin>
		setSpeed(&rMotor, rMotor.PPS_TattooDefault);
 80005ec:	4b24      	ldr	r3, [pc, #144]	; (8000680 <modeSwitch+0x180>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	4619      	mov	r1, r3
 80005f2:	4823      	ldr	r0, [pc, #140]	; (8000680 <modeSwitch+0x180>)
 80005f4:	f000 ff8c 	bl	8001510 <setSpeed>
		setSpeed(&thetaMotor, thetaMotor.PPS_TattooDefault);
 80005f8:	4b22      	ldr	r3, [pc, #136]	; (8000684 <modeSwitch+0x184>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	4619      	mov	r1, r3
 80005fe:	4821      	ldr	r0, [pc, #132]	; (8000684 <modeSwitch+0x184>)
 8000600:	f000 ff86 	bl	8001510 <setSpeed>
		setSpeed(&yMotor, yMotor.PPS_TattooDefault);
 8000604:	4b20      	ldr	r3, [pc, #128]	; (8000688 <modeSwitch+0x188>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	4619      	mov	r1, r3
 800060a:	481f      	ldr	r0, [pc, #124]	; (8000688 <modeSwitch+0x188>)
 800060c:	f000 ff80 	bl	8001510 <setSpeed>
		break;
 8000610:	e02a      	b.n	8000668 <modeSwitch+0x168>
	case RTP_SCAN:
		HAL_GPIO_WritePin(statusLed1_GPIO_Port, statusLed1_Pin, 1);
 8000612:	2201      	movs	r2, #1
 8000614:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000618:	4817      	ldr	r0, [pc, #92]	; (8000678 <modeSwitch+0x178>)
 800061a:	f001 fedf 	bl	80023dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(statusLed2_GPIO_Port, statusLed2_Pin, 1);
 800061e:	2201      	movs	r2, #1
 8000620:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000624:	4815      	ldr	r0, [pc, #84]	; (800067c <modeSwitch+0x17c>)
 8000626:	f001 fed9 	bl	80023dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(statusLed3_GPIO_Port, statusLed3_Pin, 1);
 800062a:	2201      	movs	r2, #1
 800062c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000630:	4812      	ldr	r0, [pc, #72]	; (800067c <modeSwitch+0x17c>)
 8000632:	f001 fed3 	bl	80023dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(statusLed4_GPIO_Port, statusLed4_Pin, 0);
 8000636:	2200      	movs	r2, #0
 8000638:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800063c:	480e      	ldr	r0, [pc, #56]	; (8000678 <modeSwitch+0x178>)
 800063e:	f001 fecd 	bl	80023dc <HAL_GPIO_WritePin>
		setSpeed(&rMotor, rMotor.PPS_ScanDefault);
 8000642:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <modeSwitch+0x180>)
 8000644:	69db      	ldr	r3, [r3, #28]
 8000646:	4619      	mov	r1, r3
 8000648:	480d      	ldr	r0, [pc, #52]	; (8000680 <modeSwitch+0x180>)
 800064a:	f000 ff61 	bl	8001510 <setSpeed>
		setSpeed(&thetaMotor, thetaMotor.PPS_ScanDefault);
 800064e:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <modeSwitch+0x184>)
 8000650:	69db      	ldr	r3, [r3, #28]
 8000652:	4619      	mov	r1, r3
 8000654:	480b      	ldr	r0, [pc, #44]	; (8000684 <modeSwitch+0x184>)
 8000656:	f000 ff5b 	bl	8001510 <setSpeed>
		setSpeed(&yMotor, yMotor.PPS_ScanDefault);
 800065a:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <modeSwitch+0x188>)
 800065c:	69db      	ldr	r3, [r3, #28]
 800065e:	4619      	mov	r1, r3
 8000660:	4809      	ldr	r0, [pc, #36]	; (8000688 <modeSwitch+0x188>)
 8000662:	f000 ff55 	bl	8001510 <setSpeed>
		break;
 8000666:	bf00      	nop
	}

}
 8000668:	bf00      	nop
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	2000054c 	.word	0x2000054c
 8000674:	2000054d 	.word	0x2000054d
 8000678:	48001400 	.word	0x48001400
 800067c:	48001000 	.word	0x48001000
 8000680:	200005c0 	.word	0x200005c0
 8000684:	20000550 	.word	0x20000550
 8000688:	20000588 	.word	0x20000588

0800068c <main>:
>>>>>>> ModeSelect_v2
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
<<<<<<< HEAD
 80010f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80010fc:	b092      	sub	sp, #72	; 0x48
 80010fe:	af02      	add	r7, sp, #8
=======
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af02      	add	r7, sp, #8
>>>>>>> ModeSelect_v2
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< HEAD
 8001100:	f001 fd17 	bl	8002b32 <HAL_Init>

  /* USER CODE BEGIN Init */

	InitSerialFromPC(&hlpuart1,rxBuffer);
 8001104:	49ba      	ldr	r1, [pc, #744]	; (80013f0 <main+0x2f8>)
 8001106:	48bb      	ldr	r0, [pc, #748]	; (80013f4 <main+0x2fc>)
 8001108:	f001 f8f2 	bl	80022f0 <InitSerialFromPC>
	movingAverageFilter pressureMAF = {0};
 800110c:	f107 0018 	add.w	r0, r7, #24
 8001110:	2320      	movs	r3, #32
 8001112:	461a      	mov	r2, r3
 8001114:	2100      	movs	r1, #0
 8001116:	f00c ffbd 	bl	800e094 <memset>
=======
 8000692:	f001 faac 	bl	8001bee <HAL_Init>

  /* USER CODE BEGIN Init */

	//Initialize stepper structures
	initStepper(&thetaMotor, &htim3, TIM_CHANNEL_1, thetaDir_GPIO_Port, thetaDir_Pin, 33);
 8000696:	2321      	movs	r3, #33	; 0x21
 8000698:	9301      	str	r3, [sp, #4]
 800069a:	2320      	movs	r3, #32
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006a2:	2200      	movs	r2, #0
 80006a4:	499c      	ldr	r1, [pc, #624]	; (8000918 <main+0x28c>)
 80006a6:	489d      	ldr	r0, [pc, #628]	; (800091c <main+0x290>)
 80006a8:	f000 feb4 	bl	8001414 <initStepper>
	initStepper(&yMotor,&htim2,TIM_CHANNEL_1,yDir_GPIO_Port,yDir_Pin, 400);
 80006ac:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80006b0:	9301      	str	r3, [sp, #4]
 80006b2:	2340      	movs	r3, #64	; 0x40
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006ba:	2200      	movs	r2, #0
 80006bc:	4998      	ldr	r1, [pc, #608]	; (8000920 <main+0x294>)
 80006be:	4899      	ldr	r0, [pc, #612]	; (8000924 <main+0x298>)
 80006c0:	f000 fea8 	bl	8001414 <initStepper>
	initStepper(&rMotor, &htim4, TIM_CHANNEL_3, rDir_GPIO_Port, rDir_Pin, 400);
 80006c4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80006c8:	9301      	str	r3, [sp, #4]
 80006ca:	2380      	movs	r3, #128	; 0x80
 80006cc:	9300      	str	r3, [sp, #0]
 80006ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006d2:	2208      	movs	r2, #8
 80006d4:	4994      	ldr	r1, [pc, #592]	; (8000928 <main+0x29c>)
 80006d6:	4895      	ldr	r0, [pc, #596]	; (800092c <main+0x2a0>)
 80006d8:	f000 fe9c 	bl	8001414 <initStepper>
	yMotor.PPS_ZeroDefault = 200;
 80006dc:	4b91      	ldr	r3, [pc, #580]	; (8000924 <main+0x298>)
 80006de:	22c8      	movs	r2, #200	; 0xc8
 80006e0:	615a      	str	r2, [r3, #20]
	thetaMotor.PPS_ZeroDefault = 200;
 80006e2:	4b8e      	ldr	r3, [pc, #568]	; (800091c <main+0x290>)
 80006e4:	22c8      	movs	r2, #200	; 0xc8
 80006e6:	615a      	str	r2, [r3, #20]
	rMotor.PPS_ZeroDefault = 200;
 80006e8:	4b90      	ldr	r3, [pc, #576]	; (800092c <main+0x2a0>)
 80006ea:	22c8      	movs	r2, #200	; 0xc8
 80006ec:	615a      	str	r2, [r3, #20]

	InitSerialFromPC(&hlpuart1,rxBuffer);
 80006ee:	4990      	ldr	r1, [pc, #576]	; (8000930 <main+0x2a4>)
 80006f0:	4890      	ldr	r0, [pc, #576]	; (8000934 <main+0x2a8>)
 80006f2:	f000 fe79 	bl	80013e8 <InitSerialFromPC>


>>>>>>> ModeSelect_v2
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< HEAD
 800111a:	f000 fa23 	bl	8001564 <SystemClock_Config>
=======
 80006f6:	f000 f92b 	bl	8000950 <SystemClock_Config>
>>>>>>> ModeSelect_v2
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< HEAD
 800111e:	f000 fcb5 	bl	8001a8c <MX_GPIO_Init>
  MX_TIM2_Init();
 8001122:	f000 fafd 	bl	8001720 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001126:	f000 fbeb 	bl	8001900 <MX_TIM4_Init>
  MX_LPUART1_UART_Init();
 800112a:	f000 faad 	bl	8001688 <MX_LPUART1_UART_Init>
  MX_I2C2_Init();
 800112e:	f000 fa6b 	bl	8001608 <MX_I2C2_Init>
  MX_TIM3_Init();
 8001132:	f000 fb6d 	bl	8001810 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001136:	f000 fc5b 	bl	80019f0 <MX_TIM5_Init>
=======
 80006fa:	f000 fc11 	bl	8000f20 <MX_GPIO_Init>
  MX_TIM2_Init();
 80006fe:	f000 fa59 	bl	8000bb4 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000702:	f000 fb47 	bl	8000d94 <MX_TIM4_Init>
  MX_LPUART1_UART_Init();
 8000706:	f000 f9b5 	bl	8000a74 <MX_LPUART1_UART_Init>
  MX_I2C2_Init();
 800070a:	f000 f973 	bl	80009f4 <MX_I2C2_Init>
  MX_TIM3_Init();
 800070e:	f000 fac9 	bl	8000ca4 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000712:	f000 fbb7 	bl	8000e84 <MX_TIM5_Init>
  MX_TIM1_Init();
 8000716:	f000 f9f9 	bl	8000b0c <MX_TIM1_Init>
>>>>>>> ModeSelect_v2
  /* USER CODE BEGIN 2 */

	//Enable Timer Interrupts
	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE);
<<<<<<< HEAD
 800113a:	4baf      	ldr	r3, [pc, #700]	; (80013f8 <main+0x300>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	68d9      	ldr	r1, [r3, #12]
 8001140:	4bad      	ldr	r3, [pc, #692]	; (80013f8 <main+0x300>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	f041 0301 	orr.w	r3, r1, #1
 8001148:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 800114a:	4bac      	ldr	r3, [pc, #688]	; (80013fc <main+0x304>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	68d9      	ldr	r1, [r3, #12]
 8001150:	4baa      	ldr	r3, [pc, #680]	; (80013fc <main+0x304>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	f041 0301 	orr.w	r3, r1, #1
 8001158:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_UPDATE);
 800115a:	4ba9      	ldr	r3, [pc, #676]	; (8001400 <main+0x308>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	68d9      	ldr	r1, [r3, #12]
 8001160:	4ba7      	ldr	r3, [pc, #668]	; (8001400 <main+0x308>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	f041 0301 	orr.w	r3, r1, #1
 8001168:	60d3      	str	r3, [r2, #12]
	//Initialize stepper structures
	initStepper(&thetaMotor, &htim3, TIM_CHANNEL_1, thetaDir_GPIO_Port, thetaDir_Pin, 400);
 800116a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800116e:	9301      	str	r3, [sp, #4]
 8001170:	2320      	movs	r3, #32
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001178:	2200      	movs	r2, #0
 800117a:	499f      	ldr	r1, [pc, #636]	; (80013f8 <main+0x300>)
 800117c:	48a1      	ldr	r0, [pc, #644]	; (8001404 <main+0x30c>)
 800117e:	f001 f914 	bl	80023aa <initStepper>
	initStepper(&yMotor,&htim2,TIM_CHANNEL_1,yDir_GPIO_Port,yDir_Pin, 400);
 8001182:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001186:	9301      	str	r3, [sp, #4]
 8001188:	2340      	movs	r3, #64	; 0x40
 800118a:	9300      	str	r3, [sp, #0]
 800118c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001190:	2200      	movs	r2, #0
 8001192:	499a      	ldr	r1, [pc, #616]	; (80013fc <main+0x304>)
 8001194:	489c      	ldr	r0, [pc, #624]	; (8001408 <main+0x310>)
 8001196:	f001 f908 	bl	80023aa <initStepper>
	initStepper(&rMotor, &htim4, TIM_CHANNEL_3, rDir_GPIO_Port, rDir_Pin, 400);
 800119a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800119e:	9301      	str	r3, [sp, #4]
 80011a0:	2380      	movs	r3, #128	; 0x80
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80011a8:	2208      	movs	r2, #8
 80011aa:	4995      	ldr	r1, [pc, #596]	; (8001400 <main+0x308>)
 80011ac:	4897      	ldr	r0, [pc, #604]	; (800140c <main+0x314>)
 80011ae:	f001 f8fc 	bl	80023aa <initStepper>

	yMotor.PPS_ZeroDefault = 200;
 80011b2:	4b95      	ldr	r3, [pc, #596]	; (8001408 <main+0x310>)
 80011b4:	22c8      	movs	r2, #200	; 0xc8
 80011b6:	615a      	str	r2, [r3, #20]
	thetaMotor.PPS_ZeroDefault = 200;
 80011b8:	4b92      	ldr	r3, [pc, #584]	; (8001404 <main+0x30c>)
 80011ba:	22c8      	movs	r2, #200	; 0xc8
 80011bc:	615a      	str	r2, [r3, #20]
	rMotor.PPS_ZeroDefault = 200;
 80011be:	4b93      	ldr	r3, [pc, #588]	; (800140c <main+0x314>)
 80011c0:	22c8      	movs	r2, #200	; 0xc8
 80011c2:	615a      	str	r2, [r3, #20]

	Dev->I2cHandle = &hi2c2;
 80011c4:	4b92      	ldr	r3, [pc, #584]	; (8001410 <main+0x318>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a92      	ldr	r2, [pc, #584]	; (8001414 <main+0x31c>)
 80011ca:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	Dev->I2cDevAddr = 0x52;
 80011ce:	4b90      	ldr	r3, [pc, #576]	; (8001410 <main+0x318>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	2352      	movs	r3, #82	; 0x52
 80011d4:	f882 3160 	strb.w	r3, [r2, #352]	; 0x160
=======
 800071a:	4b7f      	ldr	r3, [pc, #508]	; (8000918 <main+0x28c>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	68da      	ldr	r2, [r3, #12]
 8000720:	4b7d      	ldr	r3, [pc, #500]	; (8000918 <main+0x28c>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f042 0201 	orr.w	r2, r2, #1
 8000728:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 800072a:	4b7d      	ldr	r3, [pc, #500]	; (8000920 <main+0x294>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	68da      	ldr	r2, [r3, #12]
 8000730:	4b7b      	ldr	r3, [pc, #492]	; (8000920 <main+0x294>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f042 0201 	orr.w	r2, r2, #1
 8000738:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_UPDATE);
 800073a:	4b7b      	ldr	r3, [pc, #492]	; (8000928 <main+0x29c>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	68da      	ldr	r2, [r3, #12]
 8000740:	4b79      	ldr	r3, [pc, #484]	; (8000928 <main+0x29c>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f042 0201 	orr.w	r2, r2, #1
 8000748:	60da      	str	r2, [r3, #12]

	Dev->I2cHandle = &hi2c2;
 800074a:	4b7b      	ldr	r3, [pc, #492]	; (8000938 <main+0x2ac>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a7b      	ldr	r2, [pc, #492]	; (800093c <main+0x2b0>)
 8000750:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	Dev->I2cDevAddr = 0x52;
 8000754:	4b78      	ldr	r3, [pc, #480]	; (8000938 <main+0x2ac>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2252      	movs	r2, #82	; 0x52
 800075a:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
>>>>>>> ModeSelect_v2

	// VL53L0X init for Single Measurement
	//

	VL53L0X_WaitDeviceBooted( Dev );
<<<<<<< HEAD
 80011d8:	4b8d      	ldr	r3, [pc, #564]	; (8001410 <main+0x318>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4618      	mov	r0, r3
 80011de:	f008 fa23 	bl	8009628 <VL53L0X_WaitDeviceBooted>
	VL53L0X_DataInit( Dev );
 80011e2:	4b8b      	ldr	r3, [pc, #556]	; (8001410 <main+0x318>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f007 ff38 	bl	800905c <VL53L0X_DataInit>
	VL53L0X_StaticInit( Dev );
 80011ec:	4b88      	ldr	r3, [pc, #544]	; (8001410 <main+0x318>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f008 f897 	bl	8009324 <VL53L0X_StaticInit>
	VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 80011f6:	4b86      	ldr	r3, [pc, #536]	; (8001410 <main+0x318>)
 80011f8:	6818      	ldr	r0, [r3, #0]
 80011fa:	f107 0239 	add.w	r2, r7, #57	; 0x39
 80011fe:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8001202:	4619      	mov	r1, r3
 8001204:	f008 ff30 	bl	800a068 <VL53L0X_PerformRefCalibration>
	VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 8001208:	4b81      	ldr	r3, [pc, #516]	; (8001410 <main+0x318>)
 800120a:	6818      	ldr	r0, [r3, #0]
 800120c:	f107 023b 	add.w	r2, r7, #59	; 0x3b
 8001210:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001214:	4619      	mov	r1, r3
 8001216:	f009 fbb5 	bl	800a984 <VL53L0X_PerformRefSpadManagement>
	VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800121a:	4b7d      	ldr	r3, [pc, #500]	; (8001410 <main+0x318>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2100      	movs	r1, #0
 8001220:	4618      	mov	r0, r3
 8001222:	f008 fa9f 	bl	8009764 <VL53L0X_SetDeviceMode>

	// Enable/Disable Sigma and Signal check
	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 8001226:	4b7a      	ldr	r3, [pc, #488]	; (8001410 <main+0x318>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2201      	movs	r2, #1
 800122c:	2100      	movs	r1, #0
 800122e:	4618      	mov	r0, r3
 8001230:	f008 fd14 	bl	8009c5c <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 8001234:	4b76      	ldr	r3, [pc, #472]	; (8001410 <main+0x318>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2201      	movs	r2, #1
 800123a:	2101      	movs	r1, #1
 800123c:	4618      	mov	r0, r3
 800123e:	f008 fd0d 	bl	8009c5c <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 8001242:	4b73      	ldr	r3, [pc, #460]	; (8001410 <main+0x318>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f641 1299 	movw	r2, #6553	; 0x1999
 800124a:	2101      	movs	r1, #1
 800124c:	4618      	mov	r0, r3
 800124e:	f008 fdb5 	bl	8009dbc <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 8001252:	4b6f      	ldr	r3, [pc, #444]	; (8001410 <main+0x318>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800125a:	2100      	movs	r1, #0
 800125c:	4618      	mov	r0, r3
 800125e:	f008 fdad 	bl	8009dbc <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 33000);
 8001262:	4b6b      	ldr	r3, [pc, #428]	; (8001410 <main+0x318>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f248 01e8 	movw	r1, #33000	; 0x80e8
 800126a:	4618      	mov	r0, r3
 800126c:	f008 fad8 	bl	8009820 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 8001270:	4b67      	ldr	r3, [pc, #412]	; (8001410 <main+0x318>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2212      	movs	r2, #18
 8001276:	2100      	movs	r1, #0
 8001278:	4618      	mov	r0, r3
 800127a:	f008 faf7 	bl	800986c <VL53L0X_SetVcselPulsePeriod>
	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 800127e:	4b64      	ldr	r3, [pc, #400]	; (8001410 <main+0x318>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	220e      	movs	r2, #14
 8001284:	2101      	movs	r1, #1
 8001286:	4618      	mov	r0, r3
 8001288:	f008 faf0 	bl	800986c <VL53L0X_SetVcselPulsePeriod>

	//Enable UART Enable IT
	HAL_UART_Receive_IT(&hlpuart1, rxBuffer, 6); //receive 6 bytes
 800128c:	2206      	movs	r2, #6
 800128e:	4958      	ldr	r1, [pc, #352]	; (80013f0 <main+0x2f8>)
 8001290:	4858      	ldr	r0, [pc, #352]	; (80013f4 <main+0x2fc>)
 8001292:	f005 ff3f 	bl	8007114 <HAL_UART_Receive_IT>

	//Start timer for uSDelay for HX711
	HAL_TIM_Base_Start(&htim5);
 8001296:	4860      	ldr	r0, [pc, #384]	; (8001418 <main+0x320>)
 8001298:	f004 fbce 	bl	8005a38 <HAL_TIM_Base_Start>
	//Init load cell
	hx711_init(&loadCell, loadCLK_GPIO_Port, loadCLK_Pin, loadDATA_GPIO_Port, loadDATA_Pin, &htim5);
 800129c:	4b5e      	ldr	r3, [pc, #376]	; (8001418 <main+0x320>)
 800129e:	9301      	str	r3, [sp, #4]
 80012a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012a4:	9300      	str	r3, [sp, #0]
 80012a6:	4b5d      	ldr	r3, [pc, #372]	; (800141c <main+0x324>)
 80012a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012ac:	495b      	ldr	r1, [pc, #364]	; (800141c <main+0x324>)
 80012ae:	485c      	ldr	r0, [pc, #368]	; (8001420 <main+0x328>)
 80012b0:	f7ff fe08 	bl	8000ec4 <hx711_init>
	HAL_Delay(1000);
 80012b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012b8:	f001 fcb0 	bl	8002c1c <HAL_Delay>
	pressureZero = hx711_value_ave(&loadCell, 10);
 80012bc:	210a      	movs	r1, #10
 80012be:	4858      	ldr	r0, [pc, #352]	; (8001420 <main+0x328>)
 80012c0:	f7ff fed5 	bl	800106e <hx711_value_ave>
 80012c4:	4603      	mov	r3, r0
 80012c6:	461a      	mov	r2, r3
 80012c8:	4b56      	ldr	r3, [pc, #344]	; (8001424 <main+0x32c>)
 80012ca:	601a      	str	r2, [r3, #0]
//	setTarget(&thetaMotor, 1000, 1);
//	setTarget(&yMotor, 800, 1);
//	setTarget(&rMotor,500,1);

	//PID Setup
	setPoint = 17000;
 80012cc:	4956      	ldr	r1, [pc, #344]	; (8001428 <main+0x330>)
 80012ce:	a33e      	add	r3, pc, #248	; (adr r3, 80013c8 <main+0x2d0>)
 80012d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d4:	e9c1 2300 	strd	r2, r3, [r1]
	PID(&pressPID, &pressureVal, &deltaR, &setPoint, 0.01, 0, 0, _PID_P_ON_E, _PID_CD_DIRECT);
 80012d8:	2300      	movs	r3, #0
 80012da:	9301      	str	r3, [sp, #4]
 80012dc:	2301      	movs	r3, #1
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	ed9f 2b3b 	vldr	d2, [pc, #236]	; 80013d0 <main+0x2d8>
 80012e4:	ed9f 1b3a 	vldr	d1, [pc, #232]	; 80013d0 <main+0x2d8>
 80012e8:	ed9f 0b3b 	vldr	d0, [pc, #236]	; 80013d8 <main+0x2e0>
 80012ec:	4b4e      	ldr	r3, [pc, #312]	; (8001428 <main+0x330>)
 80012ee:	4a4f      	ldr	r2, [pc, #316]	; (800142c <main+0x334>)
 80012f0:	494f      	ldr	r1, [pc, #316]	; (8001430 <main+0x338>)
 80012f2:	4850      	ldr	r0, [pc, #320]	; (8001434 <main+0x33c>)
 80012f4:	f000 fe00 	bl	8001ef8 <PID>
	PID_SetMode(&pressPID, _PID_MODE_AUTOMATIC);
 80012f8:	2101      	movs	r1, #1
 80012fa:	484e      	ldr	r0, [pc, #312]	; (8001434 <main+0x33c>)
 80012fc:	f000 fe48 	bl	8001f90 <PID_SetMode>
	PID_SetSampleTime(&pressPID, 100);
 8001300:	2164      	movs	r1, #100	; 0x64
 8001302:	484c      	ldr	r0, [pc, #304]	; (8001434 <main+0x33c>)
 8001304:	f000 ffb8 	bl	8002278 <PID_SetSampleTime>
	PID_SetOutputLimits(&pressPID, -200, 200);
 8001308:	ed9f 1b35 	vldr	d1, [pc, #212]	; 80013e0 <main+0x2e8>
 800130c:	ed9f 0b36 	vldr	d0, [pc, #216]	; 80013e8 <main+0x2f0>
 8001310:	4848      	ldr	r0, [pc, #288]	; (8001434 <main+0x33c>)
 8001312:	f000 fe5b 	bl	8001fcc <PID_SetOutputLimits>
//				scanState = posReceive;
//			}
//		}

		//Tattooing sequence
		if(tattooState == posReceiveTat && yMotor.Status == Stopped && thetaMotor.Status == Stopped){
 8001316:	4b48      	ldr	r3, [pc, #288]	; (8001438 <main+0x340>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d128      	bne.n	8001370 <main+0x278>
 800131e:	4b3a      	ldr	r3, [pc, #232]	; (8001408 <main+0x310>)
 8001320:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001324:	b2db      	uxtb	r3, r3
 8001326:	2b03      	cmp	r3, #3
 8001328:	d122      	bne.n	8001370 <main+0x278>
 800132a:	4b36      	ldr	r3, [pc, #216]	; (8001404 <main+0x30c>)
 800132c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b03      	cmp	r3, #3
 8001334:	d11c      	bne.n	8001370 <main+0x278>
			HAL_GPIO_WritePin(state2LED_GPIO_Port, state2LED_Pin, SET);
 8001336:	2201      	movs	r2, #1
 8001338:	2180      	movs	r1, #128	; 0x80
 800133a:	4840      	ldr	r0, [pc, #256]	; (800143c <main+0x344>)
 800133c:	f002 f808 	bl	8003350 <HAL_GPIO_WritePin>
			if(uartRecievedFlag){
 8001340:	4b3f      	ldr	r3, [pc, #252]	; (8001440 <main+0x348>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d013      	beq.n	8001370 <main+0x278>
				//retrieve instructions
				ParseInstructions(rxBuffer, &nextInstr);
 8001348:	493e      	ldr	r1, [pc, #248]	; (8001444 <main+0x34c>)
 800134a:	4829      	ldr	r0, [pc, #164]	; (80013f0 <main+0x2f8>)
 800134c:	f000 fff8 	bl	8002340 <ParseInstructions>
				//enable receive interrupt
				uartRecievedFlag = 0;
 8001350:	4a3b      	ldr	r2, [pc, #236]	; (8001440 <main+0x348>)
 8001352:	2300      	movs	r3, #0
 8001354:	7013      	strb	r3, [r2, #0]
				HAL_UART_Receive_IT(&hlpuart1, rxBuffer, 6);
 8001356:	2206      	movs	r2, #6
 8001358:	4925      	ldr	r1, [pc, #148]	; (80013f0 <main+0x2f8>)
 800135a:	4826      	ldr	r0, [pc, #152]	; (80013f4 <main+0x2fc>)
 800135c:	f005 feda 	bl	8007114 <HAL_UART_Receive_IT>
				HAL_GPIO_WritePin(state2LED_GPIO_Port, state2LED_Pin, RESET);
 8001360:	2200      	movs	r2, #0
 8001362:	2180      	movs	r1, #128	; 0x80
 8001364:	4835      	ldr	r0, [pc, #212]	; (800143c <main+0x344>)
 8001366:	f001 fff3 	bl	8003350 <HAL_GPIO_WritePin>
				tattooState = goToPosTat ;
 800136a:	4a33      	ldr	r2, [pc, #204]	; (8001438 <main+0x340>)
 800136c:	2301      	movs	r3, #1
 800136e:	7013      	strb	r3, [r2, #0]
			}
		}
		if(tattooState == goToPosTat && yMotor.Status == Stopped && thetaMotor.Status == Stopped){
 8001370:	4b31      	ldr	r3, [pc, #196]	; (8001438 <main+0x340>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b01      	cmp	r3, #1
 8001376:	f040 80cb 	bne.w	8001510 <main+0x418>
 800137a:	4b23      	ldr	r3, [pc, #140]	; (8001408 <main+0x310>)
 800137c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b03      	cmp	r3, #3
 8001384:	f040 80c4 	bne.w	8001510 <main+0x418>
 8001388:	4b1e      	ldr	r3, [pc, #120]	; (8001404 <main+0x30c>)
 800138a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800138e:	b2db      	uxtb	r3, r3
 8001390:	2b03      	cmp	r3, #3
 8001392:	f040 80bd 	bne.w	8001510 <main+0x418>
			HAL_GPIO_WritePin(state3LED_GPIO_Port, state3LED_Pin, SET);
 8001396:	2201      	movs	r2, #1
 8001398:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800139c:	4827      	ldr	r0, [pc, #156]	; (800143c <main+0x344>)
 800139e:	f001 ffd7 	bl	8003350 <HAL_GPIO_WritePin>
			//Increment theta based on direction
			if(nextInstr.th>=thetaMotor.TargetPosition){
 80013a2:	4b28      	ldr	r3, [pc, #160]	; (8001444 <main+0x34c>)
 80013a4:	885b      	ldrh	r3, [r3, #2]
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	2200      	movs	r2, #0
 80013aa:	461c      	mov	r4, r3
 80013ac:	4615      	mov	r5, r2
 80013ae:	4b15      	ldr	r3, [pc, #84]	; (8001404 <main+0x30c>)
 80013b0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80013b4:	4294      	cmp	r4, r2
 80013b6:	eb75 0303 	sbcs.w	r3, r5, r3
 80013ba:	d359      	bcc.n	8001470 <main+0x378>
				setTarget(&thetaMotor, (uint64_t)abs(nextInstr.th - thetaMotor.TargetPosition), 1);
 80013bc:	4b21      	ldr	r3, [pc, #132]	; (8001444 <main+0x34c>)
 80013be:	885b      	ldrh	r3, [r3, #2]
 80013c0:	e042      	b.n	8001448 <main+0x350>
 80013c2:	bf00      	nop
 80013c4:	f3af 8000 	nop.w
 80013c8:	00000000 	.word	0x00000000
 80013cc:	40d09a00 	.word	0x40d09a00
	...
 80013d8:	47ae147b 	.word	0x47ae147b
 80013dc:	3f847ae1 	.word	0x3f847ae1
 80013e0:	00000000 	.word	0x00000000
 80013e4:	40690000 	.word	0x40690000
 80013e8:	00000000 	.word	0x00000000
 80013ec:	c0690000 	.word	0xc0690000
 80013f0:	200007e8 	.word	0x200007e8
 80013f4:	20000340 	.word	0x20000340
 80013f8:	2000041c 	.word	0x2000041c
 80013fc:	200003d0 	.word	0x200003d0
 8001400:	20000468 	.word	0x20000468
 8001404:	20000500 	.word	0x20000500
 8001408:	20000538 	.word	0x20000538
 800140c:	20000570 	.word	0x20000570
 8001410:	20000000 	.word	0x20000000
 8001414:	200002ec 	.word	0x200002ec
 8001418:	200004b4 	.word	0x200004b4
 800141c:	48000c00 	.word	0x48000c00
 8001420:	2000073c 	.word	0x2000073c
 8001424:	20000758 	.word	0x20000758
 8001428:	20000768 	.word	0x20000768
 800142c:	200007e0 	.word	0x200007e0
 8001430:	20000760 	.word	0x20000760
 8001434:	20000770 	.word	0x20000770
 8001438:	200005a8 	.word	0x200005a8
 800143c:	48000400 	.word	0x48000400
 8001440:	200007f8 	.word	0x200007f8
 8001444:	200007fc 	.word	0x200007fc
 8001448:	4619      	mov	r1, r3
 800144a:	4b41      	ldr	r3, [pc, #260]	; (8001550 <main+0x458>)
 800144c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001450:	4613      	mov	r3, r2
 8001452:	1acb      	subs	r3, r1, r3
 8001454:	2b00      	cmp	r3, #0
 8001456:	bfb8      	it	lt
 8001458:	425b      	neglt	r3, r3
 800145a:	17da      	asrs	r2, r3, #31
 800145c:	469a      	mov	sl, r3
 800145e:	4693      	mov	fp, r2
 8001460:	2301      	movs	r3, #1
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	4652      	mov	r2, sl
 8001466:	465b      	mov	r3, fp
 8001468:	4839      	ldr	r0, [pc, #228]	; (8001550 <main+0x458>)
 800146a:	f000 ffd0 	bl	800240e <setTarget>
 800146e:	e014      	b.n	800149a <main+0x3a2>
			}
			else{
				setTarget(&thetaMotor, (uint64_t)abs(nextInstr.th - thetaMotor.TargetPosition), 0);
 8001470:	4b38      	ldr	r3, [pc, #224]	; (8001554 <main+0x45c>)
 8001472:	885b      	ldrh	r3, [r3, #2]
 8001474:	4619      	mov	r1, r3
 8001476:	4b36      	ldr	r3, [pc, #216]	; (8001550 <main+0x458>)
 8001478:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800147c:	4613      	mov	r3, r2
 800147e:	1acb      	subs	r3, r1, r3
 8001480:	2b00      	cmp	r3, #0
 8001482:	bfb8      	it	lt
 8001484:	425b      	neglt	r3, r3
 8001486:	17da      	asrs	r2, r3, #31
 8001488:	613b      	str	r3, [r7, #16]
 800148a:	617a      	str	r2, [r7, #20]
 800148c:	2300      	movs	r3, #0
 800148e:	9300      	str	r3, [sp, #0]
 8001490:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001494:	482e      	ldr	r0, [pc, #184]	; (8001550 <main+0x458>)
 8001496:	f000 ffba 	bl	800240e <setTarget>
			}
			//Increment Y based on direction
			if(nextInstr.y >= yMotor.TargetPosition){
 800149a:	4b2e      	ldr	r3, [pc, #184]	; (8001554 <main+0x45c>)
 800149c:	889b      	ldrh	r3, [r3, #4]
 800149e:	b29b      	uxth	r3, r3
 80014a0:	2200      	movs	r2, #0
 80014a2:	4698      	mov	r8, r3
 80014a4:	4691      	mov	r9, r2
 80014a6:	4b2c      	ldr	r3, [pc, #176]	; (8001558 <main+0x460>)
 80014a8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80014ac:	4590      	cmp	r8, r2
 80014ae:	eb79 0303 	sbcs.w	r3, r9, r3
 80014b2:	d315      	bcc.n	80014e0 <main+0x3e8>
				setTarget(&yMotor, (uint64_t)abs(nextInstr.y - yMotor.TargetPosition), 1);
 80014b4:	4b27      	ldr	r3, [pc, #156]	; (8001554 <main+0x45c>)
 80014b6:	889b      	ldrh	r3, [r3, #4]
 80014b8:	4619      	mov	r1, r3
 80014ba:	4b27      	ldr	r3, [pc, #156]	; (8001558 <main+0x460>)
 80014bc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80014c0:	4613      	mov	r3, r2
 80014c2:	1acb      	subs	r3, r1, r3
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	bfb8      	it	lt
 80014c8:	425b      	neglt	r3, r3
 80014ca:	17da      	asrs	r2, r3, #31
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	60fa      	str	r2, [r7, #12]
 80014d0:	2301      	movs	r3, #1
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80014d8:	481f      	ldr	r0, [pc, #124]	; (8001558 <main+0x460>)
 80014da:	f000 ff98 	bl	800240e <setTarget>
 80014de:	e014      	b.n	800150a <main+0x412>
			}
			else{
				setTarget(&yMotor, (uint64_t)abs(nextInstr.y - yMotor.TargetPosition), 0);
 80014e0:	4b1c      	ldr	r3, [pc, #112]	; (8001554 <main+0x45c>)
 80014e2:	889b      	ldrh	r3, [r3, #4]
 80014e4:	4619      	mov	r1, r3
 80014e6:	4b1c      	ldr	r3, [pc, #112]	; (8001558 <main+0x460>)
 80014e8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80014ec:	4613      	mov	r3, r2
 80014ee:	1acb      	subs	r3, r1, r3
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	bfb8      	it	lt
 80014f4:	425b      	neglt	r3, r3
 80014f6:	17da      	asrs	r2, r3, #31
 80014f8:	603b      	str	r3, [r7, #0]
 80014fa:	607a      	str	r2, [r7, #4]
 80014fc:	2300      	movs	r3, #0
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001504:	4814      	ldr	r0, [pc, #80]	; (8001558 <main+0x460>)
 8001506:	f000 ff82 	bl	800240e <setTarget>
			}
			tattooState = travellingTat;
 800150a:	4a14      	ldr	r2, [pc, #80]	; (800155c <main+0x464>)
 800150c:	2302      	movs	r3, #2
 800150e:	7013      	strb	r3, [r2, #0]
		}
		if(tattooState == travellingTat && yMotor.Status == Stopped && thetaMotor.Status == Stopped){
 8001510:	4b12      	ldr	r3, [pc, #72]	; (800155c <main+0x464>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b02      	cmp	r3, #2
 8001516:	f47f aefe 	bne.w	8001316 <main+0x21e>
 800151a:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <main+0x460>)
 800151c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b03      	cmp	r3, #3
 8001524:	f47f aef7 	bne.w	8001316 <main+0x21e>
 8001528:	4b09      	ldr	r3, [pc, #36]	; (8001550 <main+0x458>)
 800152a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800152e:	b2db      	uxtb	r3, r3
 8001530:	2b03      	cmp	r3, #3
 8001532:	f47f aef0 	bne.w	8001316 <main+0x21e>
			HAL_GPIO_WritePin(state3LED_GPIO_Port, state3LED_Pin, RESET);
 8001536:	2200      	movs	r2, #0
 8001538:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800153c:	4808      	ldr	r0, [pc, #32]	; (8001560 <main+0x468>)
 800153e:	f001 ff07 	bl	8003350 <HAL_GPIO_WritePin>
			SendSerialChar('a');
 8001542:	2061      	movs	r0, #97	; 0x61
 8001544:	f000 feea 	bl	800231c <SendSerialChar>
			tattooState = posReceiveTat;
 8001548:	4a04      	ldr	r2, [pc, #16]	; (800155c <main+0x464>)
 800154a:	2300      	movs	r3, #0
 800154c:	7013      	strb	r3, [r2, #0]
		if(tattooState == posReceiveTat && yMotor.Status == Stopped && thetaMotor.Status == Stopped){
 800154e:	e6e2      	b.n	8001316 <main+0x21e>
 8001550:	20000500 	.word	0x20000500
 8001554:	200007fc 	.word	0x200007fc
 8001558:	20000538 	.word	0x20000538
 800155c:	200005a8 	.word	0x200005a8
 8001560:	48000400 	.word	0x48000400

08001564 <SystemClock_Config>:
=======
 800075e:	4b76      	ldr	r3, [pc, #472]	; (8000938 <main+0x2ac>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4618      	mov	r0, r3
 8000764:	f007 ff10 	bl	8008588 <VL53L0X_WaitDeviceBooted>
	VL53L0X_DataInit( Dev );
 8000768:	4b73      	ldr	r3, [pc, #460]	; (8000938 <main+0x2ac>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4618      	mov	r0, r3
 800076e:	f007 fc25 	bl	8007fbc <VL53L0X_DataInit>
	VL53L0X_StaticInit( Dev );
 8000772:	4b71      	ldr	r3, [pc, #452]	; (8000938 <main+0x2ac>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4618      	mov	r0, r3
 8000778:	f007 fd84 	bl	8008284 <VL53L0X_StaticInit>
	VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 800077c:	4b6e      	ldr	r3, [pc, #440]	; (8000938 <main+0x2ac>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	1c7a      	adds	r2, r7, #1
 8000782:	1cb9      	adds	r1, r7, #2
 8000784:	4618      	mov	r0, r3
 8000786:	f008 fc1f 	bl	8008fc8 <VL53L0X_PerformRefCalibration>
	VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 800078a:	4b6b      	ldr	r3, [pc, #428]	; (8000938 <main+0x2ac>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	1cfa      	adds	r2, r7, #3
 8000790:	1d39      	adds	r1, r7, #4
 8000792:	4618      	mov	r0, r3
 8000794:	f009 f8a6 	bl	80098e4 <VL53L0X_PerformRefSpadManagement>
	VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8000798:	4b67      	ldr	r3, [pc, #412]	; (8000938 <main+0x2ac>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f007 ff90 	bl	80086c4 <VL53L0X_SetDeviceMode>

	// Enable/Disable Sigma and Signal check
	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 80007a4:	4b64      	ldr	r3, [pc, #400]	; (8000938 <main+0x2ac>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2201      	movs	r2, #1
 80007aa:	2100      	movs	r1, #0
 80007ac:	4618      	mov	r0, r3
 80007ae:	f008 fa05 	bl	8008bbc <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 80007b2:	4b61      	ldr	r3, [pc, #388]	; (8000938 <main+0x2ac>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	2201      	movs	r2, #1
 80007b8:	2101      	movs	r1, #1
 80007ba:	4618      	mov	r0, r3
 80007bc:	f008 f9fe 	bl	8008bbc <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 80007c0:	4b5d      	ldr	r3, [pc, #372]	; (8000938 <main+0x2ac>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f641 1299 	movw	r2, #6553	; 0x1999
 80007c8:	2101      	movs	r1, #1
 80007ca:	4618      	mov	r0, r3
 80007cc:	f008 faa6 	bl	8008d1c <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 80007d0:	4b59      	ldr	r3, [pc, #356]	; (8000938 <main+0x2ac>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f008 fa9e 	bl	8008d1c <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 33000);
 80007e0:	4b55      	ldr	r3, [pc, #340]	; (8000938 <main+0x2ac>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f248 01e8 	movw	r1, #33000	; 0x80e8
 80007e8:	4618      	mov	r0, r3
 80007ea:	f007 ffc9 	bl	8008780 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 80007ee:	4b52      	ldr	r3, [pc, #328]	; (8000938 <main+0x2ac>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	2212      	movs	r2, #18
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f007 ffe8 	bl	80087cc <VL53L0X_SetVcselPulsePeriod>
	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 80007fc:	4b4e      	ldr	r3, [pc, #312]	; (8000938 <main+0x2ac>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	220e      	movs	r2, #14
 8000802:	2101      	movs	r1, #1
 8000804:	4618      	mov	r0, r3
 8000806:	f007 ffe1 	bl	80087cc <VL53L0X_SetVcselPulsePeriod>

	//Enable UART Enable IT
	HAL_UART_Receive_IT(&hlpuart1, rxBuffer, 6); //receive 6 bytes
 800080a:	2206      	movs	r2, #6
 800080c:	4948      	ldr	r1, [pc, #288]	; (8000930 <main+0x2a4>)
 800080e:	4849      	ldr	r0, [pc, #292]	; (8000934 <main+0x2a8>)
 8000810:	f005 fc30 	bl	8006074 <HAL_UART_Receive_IT>

	//Start timer for uSDelay for HX711
	HAL_TIM_Base_Start(&htim5);
 8000814:	484a      	ldr	r0, [pc, #296]	; (8000940 <main+0x2b4>)
 8000816:	f004 f955 	bl	8004ac4 <HAL_TIM_Base_Start>

	HAL_Delay(1000);
 800081a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800081e:	f001 fa5b 	bl	8001cd8 <HAL_Delay>
	//	pressureZero = hx711_value_ave(&loadCell, 5);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	timer = HAL_GetTick();
 8000822:	f001 fa4d 	bl	8001cc0 <HAL_GetTick>
 8000826:	4603      	mov	r3, r0
 8000828:	4a46      	ldr	r2, [pc, #280]	; (8000944 <main+0x2b8>)
 800082a:	6013      	str	r3, [r2, #0]
	modeSwitch(RTP_STANDBY);
 800082c:	2000      	movs	r0, #0
 800082e:	f7ff fe67 	bl	8000500 <modeSwitch>
	//HAL_GPIO_WritePin(statusLed1_GPIO_Port, statusLed1_Pin, 1);

	while (1)
	{
		/*** STANDBY MODE ***/
		if(rtpMode == RTP_STANDBY){
 8000832:	4b45      	ldr	r3, [pc, #276]	; (8000948 <main+0x2bc>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d0fb      	beq.n	8000832 <main+0x1a6>

		}

		/*** ZEROING MODE ***/
		else if(rtpMode == RTP_ZERO){
 800083a:	4b43      	ldr	r3, [pc, #268]	; (8000948 <main+0x2bc>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b01      	cmp	r3, #1
 8000840:	d160      	bne.n	8000904 <main+0x278>
			//zeroing FSM
			switch(zeroMode){
 8000842:	4b42      	ldr	r3, [pc, #264]	; (800094c <main+0x2c0>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	2b06      	cmp	r3, #6
 8000848:	d8f3      	bhi.n	8000832 <main+0x1a6>
 800084a:	a201      	add	r2, pc, #4	; (adr r2, 8000850 <main+0x1c4>)
 800084c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000850:	0800086d 	.word	0x0800086d
 8000854:	08000881 	.word	0x08000881
 8000858:	0800089b 	.word	0x0800089b
 800085c:	080008af 	.word	0x080008af
 8000860:	080008c9 	.word	0x080008c9
 8000864:	080008dd 	.word	0x080008dd
 8000868:	080008f7 	.word	0x080008f7
			case 0:
				GoHome(&rMotor);
 800086c:	482f      	ldr	r0, [pc, #188]	; (800092c <main+0x2a0>)
 800086e:	f001 f96d 	bl	8001b4c <GoHome>
				zeroMode++;
 8000872:	4b36      	ldr	r3, [pc, #216]	; (800094c <main+0x2c0>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	3301      	adds	r3, #1
 8000878:	b2da      	uxtb	r2, r3
 800087a:	4b34      	ldr	r3, [pc, #208]	; (800094c <main+0x2c0>)
 800087c:	701a      	strb	r2, [r3, #0]
				break;
 800087e:	e04a      	b.n	8000916 <main+0x28a>
			case 1:
				if(rMotor.Status == Stopped) zeroMode++;
 8000880:	4b2a      	ldr	r3, [pc, #168]	; (800092c <main+0x2a0>)
 8000882:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000886:	b2db      	uxtb	r3, r3
 8000888:	2b03      	cmp	r3, #3
 800088a:	d13f      	bne.n	800090c <main+0x280>
 800088c:	4b2f      	ldr	r3, [pc, #188]	; (800094c <main+0x2c0>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	3301      	adds	r3, #1
 8000892:	b2da      	uxtb	r2, r3
 8000894:	4b2d      	ldr	r3, [pc, #180]	; (800094c <main+0x2c0>)
 8000896:	701a      	strb	r2, [r3, #0]
				break;
 8000898:	e038      	b.n	800090c <main+0x280>
			case 2:
				GoHome(&thetaMotor);
 800089a:	4820      	ldr	r0, [pc, #128]	; (800091c <main+0x290>)
 800089c:	f001 f956 	bl	8001b4c <GoHome>
				zeroMode++;
 80008a0:	4b2a      	ldr	r3, [pc, #168]	; (800094c <main+0x2c0>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	3301      	adds	r3, #1
 80008a6:	b2da      	uxtb	r2, r3
 80008a8:	4b28      	ldr	r3, [pc, #160]	; (800094c <main+0x2c0>)
 80008aa:	701a      	strb	r2, [r3, #0]
				break;
 80008ac:	e033      	b.n	8000916 <main+0x28a>
			case 3:
				if(thetaMotor.Status == Stopped) zeroMode++;
 80008ae:	4b1b      	ldr	r3, [pc, #108]	; (800091c <main+0x290>)
 80008b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	2b03      	cmp	r3, #3
 80008b8:	d12a      	bne.n	8000910 <main+0x284>
 80008ba:	4b24      	ldr	r3, [pc, #144]	; (800094c <main+0x2c0>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	3301      	adds	r3, #1
 80008c0:	b2da      	uxtb	r2, r3
 80008c2:	4b22      	ldr	r3, [pc, #136]	; (800094c <main+0x2c0>)
 80008c4:	701a      	strb	r2, [r3, #0]
				break;
 80008c6:	e023      	b.n	8000910 <main+0x284>
			case 4:
				GoHome(&yMotor);
 80008c8:	4816      	ldr	r0, [pc, #88]	; (8000924 <main+0x298>)
 80008ca:	f001 f93f 	bl	8001b4c <GoHome>
				zeroMode++;
 80008ce:	4b1f      	ldr	r3, [pc, #124]	; (800094c <main+0x2c0>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	3301      	adds	r3, #1
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	4b1d      	ldr	r3, [pc, #116]	; (800094c <main+0x2c0>)
 80008d8:	701a      	strb	r2, [r3, #0]
				break;
 80008da:	e01c      	b.n	8000916 <main+0x28a>
			case 5:
				if(yMotor.Status == Stopped) zeroMode++;
 80008dc:	4b11      	ldr	r3, [pc, #68]	; (8000924 <main+0x298>)
 80008de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	2b03      	cmp	r3, #3
 80008e6:	d115      	bne.n	8000914 <main+0x288>
 80008e8:	4b18      	ldr	r3, [pc, #96]	; (800094c <main+0x2c0>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	3301      	adds	r3, #1
 80008ee:	b2da      	uxtb	r2, r3
 80008f0:	4b16      	ldr	r3, [pc, #88]	; (800094c <main+0x2c0>)
 80008f2:	701a      	strb	r2, [r3, #0]
				break;
 80008f4:	e00e      	b.n	8000914 <main+0x288>
			case 6:
				zeroMode = 0;
 80008f6:	4b15      	ldr	r3, [pc, #84]	; (800094c <main+0x2c0>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	701a      	strb	r2, [r3, #0]
				modeSwitch(RTP_STANDBY);
 80008fc:	2000      	movs	r0, #0
 80008fe:	f7ff fdff 	bl	8000500 <modeSwitch>
				break;
 8000902:	e008      	b.n	8000916 <main+0x28a>
			}

		}

		/*** TATTOO MODE ***/
		else if(rtpMode == RTP_TATTOO){
 8000904:	4b10      	ldr	r3, [pc, #64]	; (8000948 <main+0x2bc>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	2b02      	cmp	r3, #2
 800090a:	e792      	b.n	8000832 <main+0x1a6>
				break;
 800090c:	bf00      	nop
 800090e:	e790      	b.n	8000832 <main+0x1a6>
				break;
 8000910:	bf00      	nop
 8000912:	e78e      	b.n	8000832 <main+0x1a6>
				break;
 8000914:	bf00      	nop
		if(rtpMode == RTP_STANDBY){
 8000916:	e78c      	b.n	8000832 <main+0x1a6>
 8000918:	20000468 	.word	0x20000468
 800091c:	20000550 	.word	0x20000550
 8000920:	2000041c 	.word	0x2000041c
 8000924:	20000588 	.word	0x20000588
 8000928:	200004b4 	.word	0x200004b4
 800092c:	200005c0 	.word	0x200005c0
 8000930:	2000078c 	.word	0x2000078c
 8000934:	20000340 	.word	0x20000340
 8000938:	20000000 	.word	0x20000000
 800093c:	200002ec 	.word	0x200002ec
 8000940:	20000500 	.word	0x20000500
 8000944:	20000788 	.word	0x20000788
 8000948:	2000054c 	.word	0x2000054c
 800094c:	2000054d 	.word	0x2000054d

08000950 <SystemClock_Config>:
>>>>>>> ModeSelect_v2
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< HEAD
 8001564:	b580      	push	{r7, lr}
 8001566:	b098      	sub	sp, #96	; 0x60
 8001568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800156a:	f107 0318 	add.w	r3, r7, #24
 800156e:	2248      	movs	r2, #72	; 0x48
 8001570:	2100      	movs	r1, #0
 8001572:	4618      	mov	r0, r3
 8001574:	f00c fd8e 	bl	800e094 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001578:	1d3b      	adds	r3, r7, #4
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]
 8001582:	60da      	str	r2, [r3, #12]
 8001584:	611a      	str	r2, [r3, #16]
=======
 8000950:	b580      	push	{r7, lr}
 8000952:	b098      	sub	sp, #96	; 0x60
 8000954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000956:	f107 0318 	add.w	r3, r7, #24
 800095a:	2248      	movs	r2, #72	; 0x48
 800095c:	2100      	movs	r1, #0
 800095e:	4618      	mov	r0, r3
 8000960:	f00c fb48 	bl	800cff4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000964:	1d3b      	adds	r3, r7, #4
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
 8000970:	611a      	str	r2, [r3, #16]
>>>>>>> ModeSelect_v2

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
<<<<<<< HEAD
 8001586:	2000      	movs	r0, #0
 8001588:	f002 fcbc 	bl	8003f04 <HAL_PWREx_ControlVoltageScaling>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8001592:	f000 fc71 	bl	8001e78 <Error_Handler>
=======
 8000972:	2000      	movs	r0, #0
 8000974:	f002 fb0c 	bl	8002f90 <HAL_PWREx_ControlVoltageScaling>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800097e:	f000 fd2d 	bl	80013dc <Error_Handler>
>>>>>>> ModeSelect_v2
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
<<<<<<< HEAD
 8001596:	2310      	movs	r3, #16
 8001598:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800159a:	2301      	movs	r3, #1
 800159c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80015a2:	2360      	movs	r3, #96	; 0x60
 80015a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015a6:	2302      	movs	r3, #2
 80015a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80015aa:	2301      	movs	r3, #1
 80015ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015ae:	2301      	movs	r3, #1
 80015b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 50;
 80015b2:	2332      	movs	r3, #50	; 0x32
 80015b4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015b6:	2302      	movs	r3, #2
 80015b8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015ba:	2302      	movs	r3, #2
 80015bc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015be:	2302      	movs	r3, #2
 80015c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015c2:	f107 0318 	add.w	r3, r7, #24
 80015c6:	4618      	mov	r0, r3
 80015c8:	f002 fd50 	bl	800406c <HAL_RCC_OscConfig>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80015d2:	f000 fc51 	bl	8001e78 <Error_Handler>
=======
 8000982:	2310      	movs	r3, #16
 8000984:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000986:	2301      	movs	r3, #1
 8000988:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800098e:	2360      	movs	r3, #96	; 0x60
 8000990:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000992:	2302      	movs	r3, #2
 8000994:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000996:	2301      	movs	r3, #1
 8000998:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 800099a:	2301      	movs	r3, #1
 800099c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 50;
 800099e:	2332      	movs	r3, #50	; 0x32
 80009a0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009a2:	2302      	movs	r3, #2
 80009a4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009a6:	2302      	movs	r3, #2
 80009a8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009aa:	2302      	movs	r3, #2
 80009ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ae:	f107 0318 	add.w	r3, r7, #24
 80009b2:	4618      	mov	r0, r3
 80009b4:	f002 fba0 	bl	80030f8 <HAL_RCC_OscConfig>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80009be:	f000 fd0d 	bl	80013dc <Error_Handler>
>>>>>>> ModeSelect_v2
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< HEAD
 80015d6:	230f      	movs	r3, #15
 80015d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015da:	2303      	movs	r3, #3
 80015dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015e2:	2300      	movs	r3, #0
 80015e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	2104      	movs	r1, #4
 80015ee:	4618      	mov	r0, r3
 80015f0:	f003 f9b8 	bl	8004964 <HAL_RCC_ClockConfig>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80015fa:	f000 fc3d 	bl	8001e78 <Error_Handler>
  }
}
 80015fe:	bf00      	nop
 8001600:	3760      	adds	r7, #96	; 0x60
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
	...

08001608 <MX_I2C2_Init>:
=======
 80009c2:	230f      	movs	r3, #15
 80009c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c6:	2303      	movs	r3, #3
 80009c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ca:	2300      	movs	r3, #0
 80009cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009ce:	2300      	movs	r3, #0
 80009d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d2:	2300      	movs	r3, #0
 80009d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	2104      	movs	r1, #4
 80009da:	4618      	mov	r0, r3
 80009dc:	f003 f808 	bl	80039f0 <HAL_RCC_ClockConfig>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80009e6:	f000 fcf9 	bl	80013dc <Error_Handler>
  }
}
 80009ea:	bf00      	nop
 80009ec:	3760      	adds	r7, #96	; 0x60
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
	...

080009f4 <MX_I2C2_Init>:
>>>>>>> ModeSelect_v2
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
<<<<<<< HEAD
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
=======
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
>>>>>>> ModeSelect_v2
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
<<<<<<< HEAD
 800160c:	4b1b      	ldr	r3, [pc, #108]	; (800167c <MX_I2C2_Init+0x74>)
 800160e:	4a1c      	ldr	r2, [pc, #112]	; (8001680 <MX_I2C2_Init+0x78>)
 8001610:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10C0ECFF;
 8001612:	4b1a      	ldr	r3, [pc, #104]	; (800167c <MX_I2C2_Init+0x74>)
 8001614:	4a1b      	ldr	r2, [pc, #108]	; (8001684 <MX_I2C2_Init+0x7c>)
 8001616:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001618:	4b18      	ldr	r3, [pc, #96]	; (800167c <MX_I2C2_Init+0x74>)
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800161e:	4b17      	ldr	r3, [pc, #92]	; (800167c <MX_I2C2_Init+0x74>)
 8001620:	2201      	movs	r2, #1
 8001622:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001624:	4b15      	ldr	r3, [pc, #84]	; (800167c <MX_I2C2_Init+0x74>)
 8001626:	2200      	movs	r2, #0
 8001628:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800162a:	4b14      	ldr	r3, [pc, #80]	; (800167c <MX_I2C2_Init+0x74>)
 800162c:	2200      	movs	r2, #0
 800162e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001630:	4b12      	ldr	r3, [pc, #72]	; (800167c <MX_I2C2_Init+0x74>)
 8001632:	2200      	movs	r2, #0
 8001634:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001636:	4b11      	ldr	r3, [pc, #68]	; (800167c <MX_I2C2_Init+0x74>)
 8001638:	2200      	movs	r2, #0
 800163a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800163c:	4b0f      	ldr	r3, [pc, #60]	; (800167c <MX_I2C2_Init+0x74>)
 800163e:	2200      	movs	r2, #0
 8001640:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001642:	480e      	ldr	r0, [pc, #56]	; (800167c <MX_I2C2_Init+0x74>)
 8001644:	f001 feb4 	bl	80033b0 <HAL_I2C_Init>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800164e:	f000 fc13 	bl	8001e78 <Error_Handler>
=======
 80009f8:	4b1b      	ldr	r3, [pc, #108]	; (8000a68 <MX_I2C2_Init+0x74>)
 80009fa:	4a1c      	ldr	r2, [pc, #112]	; (8000a6c <MX_I2C2_Init+0x78>)
 80009fc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10C0ECFF;
 80009fe:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <MX_I2C2_Init+0x74>)
 8000a00:	4a1b      	ldr	r2, [pc, #108]	; (8000a70 <MX_I2C2_Init+0x7c>)
 8000a02:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a04:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <MX_I2C2_Init+0x74>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a0a:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <MX_I2C2_Init+0x74>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a10:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <MX_I2C2_Init+0x74>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a16:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <MX_I2C2_Init+0x74>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a1c:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <MX_I2C2_Init+0x74>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a22:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <MX_I2C2_Init+0x74>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a28:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <MX_I2C2_Init+0x74>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a2e:	480e      	ldr	r0, [pc, #56]	; (8000a68 <MX_I2C2_Init+0x74>)
 8000a30:	f001 fd04 	bl	800243c <HAL_I2C_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a3a:	f000 fccf 	bl	80013dc <Error_Handler>
>>>>>>> ModeSelect_v2
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
<<<<<<< HEAD
 8001652:	2100      	movs	r1, #0
 8001654:	4809      	ldr	r0, [pc, #36]	; (800167c <MX_I2C2_Init+0x74>)
 8001656:	f002 fb9d 	bl	8003d94 <HAL_I2CEx_ConfigAnalogFilter>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001660:	f000 fc0a 	bl	8001e78 <Error_Handler>
=======
 8000a3e:	2100      	movs	r1, #0
 8000a40:	4809      	ldr	r0, [pc, #36]	; (8000a68 <MX_I2C2_Init+0x74>)
 8000a42:	f002 f9ed 	bl	8002e20 <HAL_I2CEx_ConfigAnalogFilter>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a4c:	f000 fcc6 	bl	80013dc <Error_Handler>
>>>>>>> ModeSelect_v2
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
<<<<<<< HEAD
 8001664:	2100      	movs	r1, #0
 8001666:	4805      	ldr	r0, [pc, #20]	; (800167c <MX_I2C2_Init+0x74>)
 8001668:	f002 fbdf 	bl	8003e2a <HAL_I2CEx_ConfigDigitalFilter>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001672:	f000 fc01 	bl	8001e78 <Error_Handler>
=======
 8000a50:	2100      	movs	r1, #0
 8000a52:	4805      	ldr	r0, [pc, #20]	; (8000a68 <MX_I2C2_Init+0x74>)
 8000a54:	f002 fa2f 	bl	8002eb6 <HAL_I2CEx_ConfigDigitalFilter>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a5e:	f000 fcbd 	bl	80013dc <Error_Handler>
>>>>>>> ModeSelect_v2
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
<<<<<<< HEAD
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	200002ec 	.word	0x200002ec
 8001680:	40005800 	.word	0x40005800
 8001684:	10c0ecff 	.word	0x10c0ecff

08001688 <MX_LPUART1_UART_Init>:
=======
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	200002ec 	.word	0x200002ec
 8000a6c:	40005800 	.word	0x40005800
 8000a70:	10c0ecff 	.word	0x10c0ecff

08000a74 <MX_LPUART1_UART_Init>:
>>>>>>> ModeSelect_v2
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
<<<<<<< HEAD
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
=======
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
>>>>>>> ModeSelect_v2
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
<<<<<<< HEAD
 800168c:	4b22      	ldr	r3, [pc, #136]	; (8001718 <MX_LPUART1_UART_Init+0x90>)
 800168e:	4a23      	ldr	r2, [pc, #140]	; (800171c <MX_LPUART1_UART_Init+0x94>)
 8001690:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001692:	4b21      	ldr	r3, [pc, #132]	; (8001718 <MX_LPUART1_UART_Init+0x90>)
 8001694:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001698:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800169a:	4b1f      	ldr	r3, [pc, #124]	; (8001718 <MX_LPUART1_UART_Init+0x90>)
 800169c:	2200      	movs	r2, #0
 800169e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80016a0:	4b1d      	ldr	r3, [pc, #116]	; (8001718 <MX_LPUART1_UART_Init+0x90>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80016a6:	4b1c      	ldr	r3, [pc, #112]	; (8001718 <MX_LPUART1_UART_Init+0x90>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80016ac:	4b1a      	ldr	r3, [pc, #104]	; (8001718 <MX_LPUART1_UART_Init+0x90>)
 80016ae:	220c      	movs	r2, #12
 80016b0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016b2:	4b19      	ldr	r3, [pc, #100]	; (8001718 <MX_LPUART1_UART_Init+0x90>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016b8:	4b17      	ldr	r3, [pc, #92]	; (8001718 <MX_LPUART1_UART_Init+0x90>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016be:	4b16      	ldr	r3, [pc, #88]	; (8001718 <MX_LPUART1_UART_Init+0x90>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016c4:	4b14      	ldr	r3, [pc, #80]	; (8001718 <MX_LPUART1_UART_Init+0x90>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80016ca:	4b13      	ldr	r3, [pc, #76]	; (8001718 <MX_LPUART1_UART_Init+0x90>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80016d0:	4811      	ldr	r0, [pc, #68]	; (8001718 <MX_LPUART1_UART_Init+0x90>)
 80016d2:	f005 fc39 	bl	8006f48 <HAL_UART_Init>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80016dc:	f000 fbcc 	bl	8001e78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016e0:	2100      	movs	r1, #0
 80016e2:	480d      	ldr	r0, [pc, #52]	; (8001718 <MX_LPUART1_UART_Init+0x90>)
 80016e4:	f007 fbdb 	bl	8008e9e <HAL_UARTEx_SetTxFifoThreshold>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80016ee:	f000 fbc3 	bl	8001e78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016f2:	2100      	movs	r1, #0
 80016f4:	4808      	ldr	r0, [pc, #32]	; (8001718 <MX_LPUART1_UART_Init+0x90>)
 80016f6:	f007 fc10 	bl	8008f1a <HAL_UARTEx_SetRxFifoThreshold>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001700:	f000 fbba 	bl	8001e78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001704:	4804      	ldr	r0, [pc, #16]	; (8001718 <MX_LPUART1_UART_Init+0x90>)
 8001706:	f007 fb91 	bl	8008e2c <HAL_UARTEx_DisableFifoMode>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001710:	f000 fbb2 	bl	8001e78 <Error_Handler>
=======
 8000a78:	4b22      	ldr	r3, [pc, #136]	; (8000b04 <MX_LPUART1_UART_Init+0x90>)
 8000a7a:	4a23      	ldr	r2, [pc, #140]	; (8000b08 <MX_LPUART1_UART_Init+0x94>)
 8000a7c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000a7e:	4b21      	ldr	r3, [pc, #132]	; (8000b04 <MX_LPUART1_UART_Init+0x90>)
 8000a80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a84:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a86:	4b1f      	ldr	r3, [pc, #124]	; (8000b04 <MX_LPUART1_UART_Init+0x90>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000a8c:	4b1d      	ldr	r3, [pc, #116]	; (8000b04 <MX_LPUART1_UART_Init+0x90>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000a92:	4b1c      	ldr	r3, [pc, #112]	; (8000b04 <MX_LPUART1_UART_Init+0x90>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000a98:	4b1a      	ldr	r3, [pc, #104]	; (8000b04 <MX_LPUART1_UART_Init+0x90>)
 8000a9a:	220c      	movs	r2, #12
 8000a9c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a9e:	4b19      	ldr	r3, [pc, #100]	; (8000b04 <MX_LPUART1_UART_Init+0x90>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aa4:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <MX_LPUART1_UART_Init+0x90>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000aaa:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <MX_LPUART1_UART_Init+0x90>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ab0:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <MX_LPUART1_UART_Init+0x90>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000ab6:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <MX_LPUART1_UART_Init+0x90>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000abc:	4811      	ldr	r0, [pc, #68]	; (8000b04 <MX_LPUART1_UART_Init+0x90>)
 8000abe:	f005 fa89 	bl	8005fd4 <HAL_UART_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000ac8:	f000 fc88 	bl	80013dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000acc:	2100      	movs	r1, #0
 8000ace:	480d      	ldr	r0, [pc, #52]	; (8000b04 <MX_LPUART1_UART_Init+0x90>)
 8000ad0:	f007 f995 	bl	8007dfe <HAL_UARTEx_SetTxFifoThreshold>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000ada:	f000 fc7f 	bl	80013dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ade:	2100      	movs	r1, #0
 8000ae0:	4808      	ldr	r0, [pc, #32]	; (8000b04 <MX_LPUART1_UART_Init+0x90>)
 8000ae2:	f007 f9ca 	bl	8007e7a <HAL_UARTEx_SetRxFifoThreshold>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000aec:	f000 fc76 	bl	80013dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000af0:	4804      	ldr	r0, [pc, #16]	; (8000b04 <MX_LPUART1_UART_Init+0x90>)
 8000af2:	f007 f94b 	bl	8007d8c <HAL_UARTEx_DisableFifoMode>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000afc:	f000 fc6e 	bl	80013dc <Error_Handler>
>>>>>>> ModeSelect_v2
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
<<<<<<< HEAD
 8001714:	bf00      	nop
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20000340 	.word	0x20000340
 800171c:	40008000 	.word	0x40008000

08001720 <MX_TIM2_Init>:
=======
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000340 	.word	0x20000340
 8000b08:	40008000 	.word	0x40008000

08000b0c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b088      	sub	sp, #32
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b12:	f107 0310 	add.w	r3, r7, #16
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b2a:	4b20      	ldr	r3, [pc, #128]	; (8000bac <MX_TIM1_Init+0xa0>)
 8000b2c:	4a20      	ldr	r2, [pc, #128]	; (8000bb0 <MX_TIM1_Init+0xa4>)
 8000b2e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b30:	4b1e      	ldr	r3, [pc, #120]	; (8000bac <MX_TIM1_Init+0xa0>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b36:	4b1d      	ldr	r3, [pc, #116]	; (8000bac <MX_TIM1_Init+0xa0>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b3c:	4b1b      	ldr	r3, [pc, #108]	; (8000bac <MX_TIM1_Init+0xa0>)
 8000b3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b42:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b44:	4b19      	ldr	r3, [pc, #100]	; (8000bac <MX_TIM1_Init+0xa0>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b4a:	4b18      	ldr	r3, [pc, #96]	; (8000bac <MX_TIM1_Init+0xa0>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b50:	4b16      	ldr	r3, [pc, #88]	; (8000bac <MX_TIM1_Init+0xa0>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b56:	4815      	ldr	r0, [pc, #84]	; (8000bac <MX_TIM1_Init+0xa0>)
 8000b58:	f003 ff5c 	bl	8004a14 <HAL_TIM_Base_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000b62:	f000 fc3b 	bl	80013dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b6a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b6c:	f107 0310 	add.w	r3, r7, #16
 8000b70:	4619      	mov	r1, r3
 8000b72:	480e      	ldr	r0, [pc, #56]	; (8000bac <MX_TIM1_Init+0xa0>)
 8000b74:	f004 fc66 	bl	8005444 <HAL_TIM_ConfigClockSource>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000b7e:	f000 fc2d 	bl	80013dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b82:	2300      	movs	r3, #0
 8000b84:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b86:	2300      	movs	r3, #0
 8000b88:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b8e:	1d3b      	adds	r3, r7, #4
 8000b90:	4619      	mov	r1, r3
 8000b92:	4806      	ldr	r0, [pc, #24]	; (8000bac <MX_TIM1_Init+0xa0>)
 8000b94:	f005 f978 	bl	8005e88 <HAL_TIMEx_MasterConfigSynchronization>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000b9e:	f000 fc1d 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ba2:	bf00      	nop
 8000ba4:	3720      	adds	r7, #32
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	200003d0 	.word	0x200003d0
 8000bb0:	40012c00 	.word	0x40012c00

08000bb4 <MX_TIM2_Init>:
>>>>>>> ModeSelect_v2
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
<<<<<<< HEAD
 8001720:	b580      	push	{r7, lr}
 8001722:	b08e      	sub	sp, #56	; 0x38
 8001724:	af00      	add	r7, sp, #0
=======
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08e      	sub	sp, #56	; 0x38
 8000bb8:	af00      	add	r7, sp, #0
>>>>>>> ModeSelect_v2

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
<<<<<<< HEAD
 8001726:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	605a      	str	r2, [r3, #4]
 8001730:	609a      	str	r2, [r3, #8]
 8001732:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001734:	f107 031c 	add.w	r3, r7, #28
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001740:	463b      	mov	r3, r7
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	60da      	str	r2, [r3, #12]
 800174c:	611a      	str	r2, [r3, #16]
 800174e:	615a      	str	r2, [r3, #20]
 8001750:	619a      	str	r2, [r3, #24]
=======
 8000bba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
 8000bc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc8:	f107 031c 	add.w	r3, r7, #28
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bd4:	463b      	mov	r3, r7
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	605a      	str	r2, [r3, #4]
 8000bdc:	609a      	str	r2, [r3, #8]
 8000bde:	60da      	str	r2, [r3, #12]
 8000be0:	611a      	str	r2, [r3, #16]
 8000be2:	615a      	str	r2, [r3, #20]
 8000be4:	619a      	str	r2, [r3, #24]
>>>>>>> ModeSelect_v2

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
<<<<<<< HEAD
 8001752:	4b2e      	ldr	r3, [pc, #184]	; (800180c <MX_TIM2_Init+0xec>)
 8001754:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001758:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 800175a:	4b2c      	ldr	r3, [pc, #176]	; (800180c <MX_TIM2_Init+0xec>)
 800175c:	2263      	movs	r2, #99	; 0x63
 800175e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001760:	4b2a      	ldr	r3, [pc, #168]	; (800180c <MX_TIM2_Init+0xec>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1250-1;
 8001766:	4b29      	ldr	r3, [pc, #164]	; (800180c <MX_TIM2_Init+0xec>)
 8001768:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800176c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800176e:	4b27      	ldr	r3, [pc, #156]	; (800180c <MX_TIM2_Init+0xec>)
 8001770:	2200      	movs	r2, #0
 8001772:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001774:	4b25      	ldr	r3, [pc, #148]	; (800180c <MX_TIM2_Init+0xec>)
 8001776:	2280      	movs	r2, #128	; 0x80
 8001778:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800177a:	4824      	ldr	r0, [pc, #144]	; (800180c <MX_TIM2_Init+0xec>)
 800177c:	f004 f904 	bl	8005988 <HAL_TIM_Base_Init>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001786:	f000 fb77 	bl	8001e78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800178a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800178e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001790:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001794:	4619      	mov	r1, r3
 8001796:	481d      	ldr	r0, [pc, #116]	; (800180c <MX_TIM2_Init+0xec>)
 8001798:	f004 fe0e 	bl	80063b8 <HAL_TIM_ConfigClockSource>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80017a2:	f000 fb69 	bl	8001e78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80017a6:	4819      	ldr	r0, [pc, #100]	; (800180c <MX_TIM2_Init+0xec>)
 80017a8:	f004 f9d5 	bl	8005b56 <HAL_TIM_PWM_Init>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80017b2:	f000 fb61 	bl	8001e78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017b6:	2300      	movs	r3, #0
 80017b8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ba:	2300      	movs	r3, #0
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017be:	f107 031c 	add.w	r3, r7, #28
 80017c2:	4619      	mov	r1, r3
 80017c4:	4811      	ldr	r0, [pc, #68]	; (800180c <MX_TIM2_Init+0xec>)
 80017c6:	f005 fb19 	bl	8006dfc <HAL_TIMEx_MasterConfigSynchronization>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80017d0:	f000 fb52 	bl	8001e78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017d4:	2360      	movs	r3, #96	; 0x60
 80017d6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 80017d8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80017dc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017de:	2300      	movs	r3, #0
 80017e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017e2:	2300      	movs	r3, #0
 80017e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017e6:	463b      	mov	r3, r7
 80017e8:	2200      	movs	r2, #0
 80017ea:	4619      	mov	r1, r3
 80017ec:	4807      	ldr	r0, [pc, #28]	; (800180c <MX_TIM2_Init+0xec>)
 80017ee:	f004 fccf 	bl	8006190 <HAL_TIM_PWM_ConfigChannel>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80017f8:	f000 fb3e 	bl	8001e78 <Error_Handler>
=======
 8000be6:	4b2e      	ldr	r3, [pc, #184]	; (8000ca0 <MX_TIM2_Init+0xec>)
 8000be8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8000bee:	4b2c      	ldr	r3, [pc, #176]	; (8000ca0 <MX_TIM2_Init+0xec>)
 8000bf0:	2263      	movs	r2, #99	; 0x63
 8000bf2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf4:	4b2a      	ldr	r3, [pc, #168]	; (8000ca0 <MX_TIM2_Init+0xec>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1250-1;
 8000bfa:	4b29      	ldr	r3, [pc, #164]	; (8000ca0 <MX_TIM2_Init+0xec>)
 8000bfc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8000c00:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c02:	4b27      	ldr	r3, [pc, #156]	; (8000ca0 <MX_TIM2_Init+0xec>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c08:	4b25      	ldr	r3, [pc, #148]	; (8000ca0 <MX_TIM2_Init+0xec>)
 8000c0a:	2280      	movs	r2, #128	; 0x80
 8000c0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c0e:	4824      	ldr	r0, [pc, #144]	; (8000ca0 <MX_TIM2_Init+0xec>)
 8000c10:	f003 ff00 	bl	8004a14 <HAL_TIM_Base_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000c1a:	f000 fbdf 	bl	80013dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c22:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c28:	4619      	mov	r1, r3
 8000c2a:	481d      	ldr	r0, [pc, #116]	; (8000ca0 <MX_TIM2_Init+0xec>)
 8000c2c:	f004 fc0a 	bl	8005444 <HAL_TIM_ConfigClockSource>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000c36:	f000 fbd1 	bl	80013dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c3a:	4819      	ldr	r0, [pc, #100]	; (8000ca0 <MX_TIM2_Init+0xec>)
 8000c3c:	f003 ffd1 	bl	8004be2 <HAL_TIM_PWM_Init>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000c46:	f000 fbc9 	bl	80013dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c52:	f107 031c 	add.w	r3, r7, #28
 8000c56:	4619      	mov	r1, r3
 8000c58:	4811      	ldr	r0, [pc, #68]	; (8000ca0 <MX_TIM2_Init+0xec>)
 8000c5a:	f005 f915 	bl	8005e88 <HAL_TIMEx_MasterConfigSynchronization>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000c64:	f000 fbba 	bl	80013dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c68:	2360      	movs	r3, #96	; 0x60
 8000c6a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8000c6c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c70:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c72:	2300      	movs	r3, #0
 8000c74:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c76:	2300      	movs	r3, #0
 8000c78:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c7a:	463b      	mov	r3, r7
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4807      	ldr	r0, [pc, #28]	; (8000ca0 <MX_TIM2_Init+0xec>)
 8000c82:	f004 facb 	bl	800521c <HAL_TIM_PWM_ConfigChannel>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000c8c:	f000 fba6 	bl	80013dc <Error_Handler>
>>>>>>> ModeSelect_v2
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
<<<<<<< HEAD
 80017fc:	4803      	ldr	r0, [pc, #12]	; (800180c <MX_TIM2_Init+0xec>)
 80017fe:	f001 f879 	bl	80028f4 <HAL_TIM_MspPostInit>

}
 8001802:	bf00      	nop
 8001804:	3738      	adds	r7, #56	; 0x38
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	200003d0 	.word	0x200003d0

08001810 <MX_TIM3_Init>:
=======
 8000c90:	4803      	ldr	r0, [pc, #12]	; (8000ca0 <MX_TIM2_Init+0xec>)
 8000c92:	f000 fe43 	bl	800191c <HAL_TIM_MspPostInit>

}
 8000c96:	bf00      	nop
 8000c98:	3738      	adds	r7, #56	; 0x38
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	2000041c 	.word	0x2000041c

08000ca4 <MX_TIM3_Init>:
>>>>>>> ModeSelect_v2
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
<<<<<<< HEAD
 8001810:	b580      	push	{r7, lr}
 8001812:	b08e      	sub	sp, #56	; 0x38
 8001814:	af00      	add	r7, sp, #0
=======
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08e      	sub	sp, #56	; 0x38
 8000ca8:	af00      	add	r7, sp, #0
>>>>>>> ModeSelect_v2

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
<<<<<<< HEAD
 8001816:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	605a      	str	r2, [r3, #4]
 8001820:	609a      	str	r2, [r3, #8]
 8001822:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001824:	f107 031c 	add.w	r3, r7, #28
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001830:	463b      	mov	r3, r7
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]
 800183a:	60da      	str	r2, [r3, #12]
 800183c:	611a      	str	r2, [r3, #16]
 800183e:	615a      	str	r2, [r3, #20]
 8001840:	619a      	str	r2, [r3, #24]
=======
 8000caa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]
 8000cb4:	609a      	str	r2, [r3, #8]
 8000cb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cb8:	f107 031c 	add.w	r3, r7, #28
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cc4:	463b      	mov	r3, r7
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]
 8000cd0:	611a      	str	r2, [r3, #16]
 8000cd2:	615a      	str	r2, [r3, #20]
 8000cd4:	619a      	str	r2, [r3, #24]
>>>>>>> ModeSelect_v2

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
<<<<<<< HEAD
 8001842:	4b2d      	ldr	r3, [pc, #180]	; (80018f8 <MX_TIM3_Init+0xe8>)
 8001844:	4a2d      	ldr	r2, [pc, #180]	; (80018fc <MX_TIM3_Init+0xec>)
 8001846:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8001848:	4b2b      	ldr	r3, [pc, #172]	; (80018f8 <MX_TIM3_Init+0xe8>)
 800184a:	2263      	movs	r2, #99	; 0x63
 800184c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800184e:	4b2a      	ldr	r3, [pc, #168]	; (80018f8 <MX_TIM3_Init+0xe8>)
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1250-1;
 8001854:	4b28      	ldr	r3, [pc, #160]	; (80018f8 <MX_TIM3_Init+0xe8>)
 8001856:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800185a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800185c:	4b26      	ldr	r3, [pc, #152]	; (80018f8 <MX_TIM3_Init+0xe8>)
 800185e:	2200      	movs	r2, #0
 8001860:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001862:	4b25      	ldr	r3, [pc, #148]	; (80018f8 <MX_TIM3_Init+0xe8>)
 8001864:	2280      	movs	r2, #128	; 0x80
 8001866:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001868:	4823      	ldr	r0, [pc, #140]	; (80018f8 <MX_TIM3_Init+0xe8>)
 800186a:	f004 f88d 	bl	8005988 <HAL_TIM_Base_Init>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001874:	f000 fb00 	bl	8001e78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001878:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800187c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800187e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001882:	4619      	mov	r1, r3
 8001884:	481c      	ldr	r0, [pc, #112]	; (80018f8 <MX_TIM3_Init+0xe8>)
 8001886:	f004 fd97 	bl	80063b8 <HAL_TIM_ConfigClockSource>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001890:	f000 faf2 	bl	8001e78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001894:	4818      	ldr	r0, [pc, #96]	; (80018f8 <MX_TIM3_Init+0xe8>)
 8001896:	f004 f95e 	bl	8005b56 <HAL_TIM_PWM_Init>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80018a0:	f000 faea 	bl	8001e78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a4:	2300      	movs	r3, #0
 80018a6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018a8:	2300      	movs	r3, #0
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018ac:	f107 031c 	add.w	r3, r7, #28
 80018b0:	4619      	mov	r1, r3
 80018b2:	4811      	ldr	r0, [pc, #68]	; (80018f8 <MX_TIM3_Init+0xe8>)
 80018b4:	f005 faa2 	bl	8006dfc <HAL_TIMEx_MasterConfigSynchronization>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80018be:	f000 fadb 	bl	8001e78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018c2:	2360      	movs	r3, #96	; 0x60
 80018c4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 80018c6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80018ca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018cc:	2300      	movs	r3, #0
 80018ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018d0:	2300      	movs	r3, #0
 80018d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018d4:	463b      	mov	r3, r7
 80018d6:	2200      	movs	r2, #0
 80018d8:	4619      	mov	r1, r3
 80018da:	4807      	ldr	r0, [pc, #28]	; (80018f8 <MX_TIM3_Init+0xe8>)
 80018dc:	f004 fc58 	bl	8006190 <HAL_TIM_PWM_ConfigChannel>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80018e6:	f000 fac7 	bl	8001e78 <Error_Handler>
=======
 8000cd6:	4b2d      	ldr	r3, [pc, #180]	; (8000d8c <MX_TIM3_Init+0xe8>)
 8000cd8:	4a2d      	ldr	r2, [pc, #180]	; (8000d90 <MX_TIM3_Init+0xec>)
 8000cda:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8000cdc:	4b2b      	ldr	r3, [pc, #172]	; (8000d8c <MX_TIM3_Init+0xe8>)
 8000cde:	2263      	movs	r2, #99	; 0x63
 8000ce0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce2:	4b2a      	ldr	r3, [pc, #168]	; (8000d8c <MX_TIM3_Init+0xe8>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1250-1;
 8000ce8:	4b28      	ldr	r3, [pc, #160]	; (8000d8c <MX_TIM3_Init+0xe8>)
 8000cea:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8000cee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cf0:	4b26      	ldr	r3, [pc, #152]	; (8000d8c <MX_TIM3_Init+0xe8>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cf6:	4b25      	ldr	r3, [pc, #148]	; (8000d8c <MX_TIM3_Init+0xe8>)
 8000cf8:	2280      	movs	r2, #128	; 0x80
 8000cfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cfc:	4823      	ldr	r0, [pc, #140]	; (8000d8c <MX_TIM3_Init+0xe8>)
 8000cfe:	f003 fe89 	bl	8004a14 <HAL_TIM_Base_Init>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000d08:	f000 fb68 	bl	80013dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d10:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d16:	4619      	mov	r1, r3
 8000d18:	481c      	ldr	r0, [pc, #112]	; (8000d8c <MX_TIM3_Init+0xe8>)
 8000d1a:	f004 fb93 	bl	8005444 <HAL_TIM_ConfigClockSource>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000d24:	f000 fb5a 	bl	80013dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d28:	4818      	ldr	r0, [pc, #96]	; (8000d8c <MX_TIM3_Init+0xe8>)
 8000d2a:	f003 ff5a 	bl	8004be2 <HAL_TIM_PWM_Init>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000d34:	f000 fb52 	bl	80013dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d40:	f107 031c 	add.w	r3, r7, #28
 8000d44:	4619      	mov	r1, r3
 8000d46:	4811      	ldr	r0, [pc, #68]	; (8000d8c <MX_TIM3_Init+0xe8>)
 8000d48:	f005 f89e 	bl	8005e88 <HAL_TIMEx_MasterConfigSynchronization>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000d52:	f000 fb43 	bl	80013dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d56:	2360      	movs	r3, #96	; 0x60
 8000d58:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8000d5a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d5e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d60:	2300      	movs	r3, #0
 8000d62:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d64:	2300      	movs	r3, #0
 8000d66:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d68:	463b      	mov	r3, r7
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4807      	ldr	r0, [pc, #28]	; (8000d8c <MX_TIM3_Init+0xe8>)
 8000d70:	f004 fa54 	bl	800521c <HAL_TIM_PWM_ConfigChannel>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000d7a:	f000 fb2f 	bl	80013dc <Error_Handler>
>>>>>>> ModeSelect_v2
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
<<<<<<< HEAD
 80018ea:	4803      	ldr	r0, [pc, #12]	; (80018f8 <MX_TIM3_Init+0xe8>)
 80018ec:	f001 f802 	bl	80028f4 <HAL_TIM_MspPostInit>

}
 80018f0:	bf00      	nop
 80018f2:	3738      	adds	r7, #56	; 0x38
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	2000041c 	.word	0x2000041c
 80018fc:	40000400 	.word	0x40000400

08001900 <MX_TIM4_Init>:
=======
 8000d7e:	4803      	ldr	r0, [pc, #12]	; (8000d8c <MX_TIM3_Init+0xe8>)
 8000d80:	f000 fdcc 	bl	800191c <HAL_TIM_MspPostInit>

}
 8000d84:	bf00      	nop
 8000d86:	3738      	adds	r7, #56	; 0x38
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000468 	.word	0x20000468
 8000d90:	40000400 	.word	0x40000400

08000d94 <MX_TIM4_Init>:
>>>>>>> ModeSelect_v2
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
<<<<<<< HEAD
 8001900:	b580      	push	{r7, lr}
 8001902:	b08e      	sub	sp, #56	; 0x38
 8001904:	af00      	add	r7, sp, #0
=======
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08e      	sub	sp, #56	; 0x38
 8000d98:	af00      	add	r7, sp, #0
>>>>>>> ModeSelect_v2

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
<<<<<<< HEAD
 8001906:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	605a      	str	r2, [r3, #4]
 8001910:	609a      	str	r2, [r3, #8]
 8001912:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001914:	f107 031c 	add.w	r3, r7, #28
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001920:	463b      	mov	r3, r7
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	605a      	str	r2, [r3, #4]
 8001928:	609a      	str	r2, [r3, #8]
 800192a:	60da      	str	r2, [r3, #12]
 800192c:	611a      	str	r2, [r3, #16]
 800192e:	615a      	str	r2, [r3, #20]
 8001930:	619a      	str	r2, [r3, #24]
=======
 8000d9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da8:	f107 031c 	add.w	r3, r7, #28
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000db4:	463b      	mov	r3, r7
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]
 8000dbc:	609a      	str	r2, [r3, #8]
 8000dbe:	60da      	str	r2, [r3, #12]
 8000dc0:	611a      	str	r2, [r3, #16]
 8000dc2:	615a      	str	r2, [r3, #20]
 8000dc4:	619a      	str	r2, [r3, #24]
>>>>>>> ModeSelect_v2

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
<<<<<<< HEAD
 8001932:	4b2d      	ldr	r3, [pc, #180]	; (80019e8 <MX_TIM4_Init+0xe8>)
 8001934:	4a2d      	ldr	r2, [pc, #180]	; (80019ec <MX_TIM4_Init+0xec>)
 8001936:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 8001938:	4b2b      	ldr	r3, [pc, #172]	; (80019e8 <MX_TIM4_Init+0xe8>)
 800193a:	2263      	movs	r2, #99	; 0x63
 800193c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800193e:	4b2a      	ldr	r3, [pc, #168]	; (80019e8 <MX_TIM4_Init+0xe8>)
 8001940:	2200      	movs	r2, #0
 8001942:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1250-1;
 8001944:	4b28      	ldr	r3, [pc, #160]	; (80019e8 <MX_TIM4_Init+0xe8>)
 8001946:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800194a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800194c:	4b26      	ldr	r3, [pc, #152]	; (80019e8 <MX_TIM4_Init+0xe8>)
 800194e:	2200      	movs	r2, #0
 8001950:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001952:	4b25      	ldr	r3, [pc, #148]	; (80019e8 <MX_TIM4_Init+0xe8>)
 8001954:	2280      	movs	r2, #128	; 0x80
 8001956:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001958:	4823      	ldr	r0, [pc, #140]	; (80019e8 <MX_TIM4_Init+0xe8>)
 800195a:	f004 f815 	bl	8005988 <HAL_TIM_Base_Init>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001964:	f000 fa88 	bl	8001e78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001968:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800196c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800196e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001972:	4619      	mov	r1, r3
 8001974:	481c      	ldr	r0, [pc, #112]	; (80019e8 <MX_TIM4_Init+0xe8>)
 8001976:	f004 fd1f 	bl	80063b8 <HAL_TIM_ConfigClockSource>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001980:	f000 fa7a 	bl	8001e78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001984:	4818      	ldr	r0, [pc, #96]	; (80019e8 <MX_TIM4_Init+0xe8>)
 8001986:	f004 f8e6 	bl	8005b56 <HAL_TIM_PWM_Init>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001990:	f000 fa72 	bl	8001e78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001994:	2300      	movs	r3, #0
 8001996:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001998:	2300      	movs	r3, #0
 800199a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800199c:	f107 031c 	add.w	r3, r7, #28
 80019a0:	4619      	mov	r1, r3
 80019a2:	4811      	ldr	r0, [pc, #68]	; (80019e8 <MX_TIM4_Init+0xe8>)
 80019a4:	f005 fa2a 	bl	8006dfc <HAL_TIMEx_MasterConfigSynchronization>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80019ae:	f000 fa63 	bl	8001e78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019b2:	2360      	movs	r3, #96	; 0x60
 80019b4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 200;
 80019b6:	23c8      	movs	r3, #200	; 0xc8
 80019b8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019ba:	2300      	movs	r3, #0
 80019bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019be:	2300      	movs	r3, #0
 80019c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019c2:	463b      	mov	r3, r7
 80019c4:	2208      	movs	r2, #8
 80019c6:	4619      	mov	r1, r3
 80019c8:	4807      	ldr	r0, [pc, #28]	; (80019e8 <MX_TIM4_Init+0xe8>)
 80019ca:	f004 fbe1 	bl	8006190 <HAL_TIM_PWM_ConfigChannel>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80019d4:	f000 fa50 	bl	8001e78 <Error_Handler>
=======
 8000dc6:	4b2d      	ldr	r3, [pc, #180]	; (8000e7c <MX_TIM4_Init+0xe8>)
 8000dc8:	4a2d      	ldr	r2, [pc, #180]	; (8000e80 <MX_TIM4_Init+0xec>)
 8000dca:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 8000dcc:	4b2b      	ldr	r3, [pc, #172]	; (8000e7c <MX_TIM4_Init+0xe8>)
 8000dce:	2263      	movs	r2, #99	; 0x63
 8000dd0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd2:	4b2a      	ldr	r3, [pc, #168]	; (8000e7c <MX_TIM4_Init+0xe8>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1250-1;
 8000dd8:	4b28      	ldr	r3, [pc, #160]	; (8000e7c <MX_TIM4_Init+0xe8>)
 8000dda:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8000dde:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de0:	4b26      	ldr	r3, [pc, #152]	; (8000e7c <MX_TIM4_Init+0xe8>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000de6:	4b25      	ldr	r3, [pc, #148]	; (8000e7c <MX_TIM4_Init+0xe8>)
 8000de8:	2280      	movs	r2, #128	; 0x80
 8000dea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000dec:	4823      	ldr	r0, [pc, #140]	; (8000e7c <MX_TIM4_Init+0xe8>)
 8000dee:	f003 fe11 	bl	8004a14 <HAL_TIM_Base_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000df8:	f000 faf0 	bl	80013dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e00:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e06:	4619      	mov	r1, r3
 8000e08:	481c      	ldr	r0, [pc, #112]	; (8000e7c <MX_TIM4_Init+0xe8>)
 8000e0a:	f004 fb1b 	bl	8005444 <HAL_TIM_ConfigClockSource>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000e14:	f000 fae2 	bl	80013dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000e18:	4818      	ldr	r0, [pc, #96]	; (8000e7c <MX_TIM4_Init+0xe8>)
 8000e1a:	f003 fee2 	bl	8004be2 <HAL_TIM_PWM_Init>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000e24:	f000 fada 	bl	80013dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e30:	f107 031c 	add.w	r3, r7, #28
 8000e34:	4619      	mov	r1, r3
 8000e36:	4811      	ldr	r0, [pc, #68]	; (8000e7c <MX_TIM4_Init+0xe8>)
 8000e38:	f005 f826 	bl	8005e88 <HAL_TIMEx_MasterConfigSynchronization>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000e42:	f000 facb 	bl	80013dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e46:	2360      	movs	r3, #96	; 0x60
 8000e48:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8000e4a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000e4e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e50:	2300      	movs	r3, #0
 8000e52:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e54:	2300      	movs	r3, #0
 8000e56:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e58:	463b      	mov	r3, r7
 8000e5a:	2208      	movs	r2, #8
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4807      	ldr	r0, [pc, #28]	; (8000e7c <MX_TIM4_Init+0xe8>)
 8000e60:	f004 f9dc 	bl	800521c <HAL_TIM_PWM_ConfigChannel>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000e6a:	f000 fab7 	bl	80013dc <Error_Handler>
>>>>>>> ModeSelect_v2
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
<<<<<<< HEAD
 80019d8:	4803      	ldr	r0, [pc, #12]	; (80019e8 <MX_TIM4_Init+0xe8>)
 80019da:	f000 ff8b 	bl	80028f4 <HAL_TIM_MspPostInit>

}
 80019de:	bf00      	nop
 80019e0:	3738      	adds	r7, #56	; 0x38
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000468 	.word	0x20000468
 80019ec:	40000800 	.word	0x40000800

080019f0 <MX_TIM5_Init>:
=======
 8000e6e:	4803      	ldr	r0, [pc, #12]	; (8000e7c <MX_TIM4_Init+0xe8>)
 8000e70:	f000 fd54 	bl	800191c <HAL_TIM_MspPostInit>

}
 8000e74:	bf00      	nop
 8000e76:	3738      	adds	r7, #56	; 0x38
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	200004b4 	.word	0x200004b4
 8000e80:	40000800 	.word	0x40000800

08000e84 <MX_TIM5_Init>:
>>>>>>> ModeSelect_v2
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
<<<<<<< HEAD
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b088      	sub	sp, #32
 80019f4:	af00      	add	r7, sp, #0
=======
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b088      	sub	sp, #32
 8000e88:	af00      	add	r7, sp, #0
>>>>>>> ModeSelect_v2

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
<<<<<<< HEAD
 80019f6:	f107 0310 	add.w	r3, r7, #16
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	605a      	str	r2, [r3, #4]
 8001a00:	609a      	str	r2, [r3, #8]
 8001a02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a04:	1d3b      	adds	r3, r7, #4
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	605a      	str	r2, [r3, #4]
 8001a0c:	609a      	str	r2, [r3, #8]
=======
 8000e8a:	f107 0310 	add.w	r3, r7, #16
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e98:	1d3b      	adds	r3, r7, #4
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
>>>>>>> ModeSelect_v2

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
<<<<<<< HEAD
 8001a0e:	4b1d      	ldr	r3, [pc, #116]	; (8001a84 <MX_TIM5_Init+0x94>)
 8001a10:	4a1d      	ldr	r2, [pc, #116]	; (8001a88 <MX_TIM5_Init+0x98>)
 8001a12:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 100-1;
 8001a14:	4b1b      	ldr	r3, [pc, #108]	; (8001a84 <MX_TIM5_Init+0x94>)
 8001a16:	2263      	movs	r2, #99	; 0x63
 8001a18:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a1a:	4b1a      	ldr	r3, [pc, #104]	; (8001a84 <MX_TIM5_Init+0x94>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001a20:	4b18      	ldr	r3, [pc, #96]	; (8001a84 <MX_TIM5_Init+0x94>)
 8001a22:	f04f 32ff 	mov.w	r2, #4294967295
 8001a26:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a28:	4b16      	ldr	r3, [pc, #88]	; (8001a84 <MX_TIM5_Init+0x94>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a2e:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <MX_TIM5_Init+0x94>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001a34:	4813      	ldr	r0, [pc, #76]	; (8001a84 <MX_TIM5_Init+0x94>)
 8001a36:	f003 ffa7 	bl	8005988 <HAL_TIM_Base_Init>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001a40:	f000 fa1a 	bl	8001e78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a48:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001a4a:	f107 0310 	add.w	r3, r7, #16
 8001a4e:	4619      	mov	r1, r3
 8001a50:	480c      	ldr	r0, [pc, #48]	; (8001a84 <MX_TIM5_Init+0x94>)
 8001a52:	f004 fcb1 	bl	80063b8 <HAL_TIM_ConfigClockSource>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001a5c:	f000 fa0c 	bl	8001e78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a60:	2300      	movs	r3, #0
 8001a62:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a64:	2300      	movs	r3, #0
 8001a66:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001a68:	1d3b      	adds	r3, r7, #4
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4805      	ldr	r0, [pc, #20]	; (8001a84 <MX_TIM5_Init+0x94>)
 8001a6e:	f005 f9c5 	bl	8006dfc <HAL_TIMEx_MasterConfigSynchronization>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001a78:	f000 f9fe 	bl	8001e78 <Error_Handler>
=======
 8000ea2:	4b1d      	ldr	r3, [pc, #116]	; (8000f18 <MX_TIM5_Init+0x94>)
 8000ea4:	4a1d      	ldr	r2, [pc, #116]	; (8000f1c <MX_TIM5_Init+0x98>)
 8000ea6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 100-1;
 8000ea8:	4b1b      	ldr	r3, [pc, #108]	; (8000f18 <MX_TIM5_Init+0x94>)
 8000eaa:	2263      	movs	r2, #99	; 0x63
 8000eac:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eae:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <MX_TIM5_Init+0x94>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000eb4:	4b18      	ldr	r3, [pc, #96]	; (8000f18 <MX_TIM5_Init+0x94>)
 8000eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8000eba:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ebc:	4b16      	ldr	r3, [pc, #88]	; (8000f18 <MX_TIM5_Init+0x94>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ec2:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <MX_TIM5_Init+0x94>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000ec8:	4813      	ldr	r0, [pc, #76]	; (8000f18 <MX_TIM5_Init+0x94>)
 8000eca:	f003 fda3 	bl	8004a14 <HAL_TIM_Base_Init>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000ed4:	f000 fa82 	bl	80013dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ed8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000edc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000ede:	f107 0310 	add.w	r3, r7, #16
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	480c      	ldr	r0, [pc, #48]	; (8000f18 <MX_TIM5_Init+0x94>)
 8000ee6:	f004 faad 	bl	8005444 <HAL_TIM_ConfigClockSource>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000ef0:	f000 fa74 	bl	80013dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000efc:	1d3b      	adds	r3, r7, #4
 8000efe:	4619      	mov	r1, r3
 8000f00:	4805      	ldr	r0, [pc, #20]	; (8000f18 <MX_TIM5_Init+0x94>)
 8000f02:	f004 ffc1 	bl	8005e88 <HAL_TIMEx_MasterConfigSynchronization>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000f0c:	f000 fa66 	bl	80013dc <Error_Handler>
>>>>>>> ModeSelect_v2
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
<<<<<<< HEAD
 8001a7c:	bf00      	nop
 8001a7e:	3720      	adds	r7, #32
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	200004b4 	.word	0x200004b4
 8001a88:	40000c00 	.word	0x40000c00

08001a8c <MX_GPIO_Init>:
=======
 8000f10:	bf00      	nop
 8000f12:	3720      	adds	r7, #32
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000500 	.word	0x20000500
 8000f1c:	40000c00 	.word	0x40000c00

08000f20 <MX_GPIO_Init>:
>>>>>>> ModeSelect_v2
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
<<<<<<< HEAD
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08c      	sub	sp, #48	; 0x30
 8001a90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a92:	f107 031c 	add.w	r3, r7, #28
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	605a      	str	r2, [r3, #4]
 8001a9c:	609a      	str	r2, [r3, #8]
 8001a9e:	60da      	str	r2, [r3, #12]
 8001aa0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001aa2:	4b67      	ldr	r3, [pc, #412]	; (8001c40 <MX_GPIO_Init+0x1b4>)
 8001aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa6:	4a66      	ldr	r2, [pc, #408]	; (8001c40 <MX_GPIO_Init+0x1b4>)
 8001aa8:	f043 0310 	orr.w	r3, r3, #16
 8001aac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aae:	4b64      	ldr	r3, [pc, #400]	; (8001c40 <MX_GPIO_Init+0x1b4>)
 8001ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab2:	f003 0310 	and.w	r3, r3, #16
 8001ab6:	61bb      	str	r3, [r7, #24]
 8001ab8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001aba:	4b61      	ldr	r3, [pc, #388]	; (8001c40 <MX_GPIO_Init+0x1b4>)
 8001abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001abe:	4a60      	ldr	r2, [pc, #384]	; (8001c40 <MX_GPIO_Init+0x1b4>)
 8001ac0:	f043 0320 	orr.w	r3, r3, #32
 8001ac4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ac6:	4b5e      	ldr	r3, [pc, #376]	; (8001c40 <MX_GPIO_Init+0x1b4>)
 8001ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aca:	f003 0320 	and.w	r3, r3, #32
 8001ace:	617b      	str	r3, [r7, #20]
 8001ad0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad2:	4b5b      	ldr	r3, [pc, #364]	; (8001c40 <MX_GPIO_Init+0x1b4>)
 8001ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad6:	4a5a      	ldr	r2, [pc, #360]	; (8001c40 <MX_GPIO_Init+0x1b4>)
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ade:	4b58      	ldr	r3, [pc, #352]	; (8001c40 <MX_GPIO_Init+0x1b4>)
 8001ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	613b      	str	r3, [r7, #16]
 8001ae8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aea:	4b55      	ldr	r3, [pc, #340]	; (8001c40 <MX_GPIO_Init+0x1b4>)
 8001aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aee:	4a54      	ldr	r2, [pc, #336]	; (8001c40 <MX_GPIO_Init+0x1b4>)
 8001af0:	f043 0302 	orr.w	r3, r3, #2
 8001af4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001af6:	4b52      	ldr	r3, [pc, #328]	; (8001c40 <MX_GPIO_Init+0x1b4>)
 8001af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b02:	4b4f      	ldr	r3, [pc, #316]	; (8001c40 <MX_GPIO_Init+0x1b4>)
 8001b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b06:	4a4e      	ldr	r2, [pc, #312]	; (8001c40 <MX_GPIO_Init+0x1b4>)
 8001b08:	f043 0308 	orr.w	r3, r3, #8
 8001b0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b0e:	4b4c      	ldr	r3, [pc, #304]	; (8001c40 <MX_GPIO_Init+0x1b4>)
 8001b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b12:	f003 0308 	and.w	r3, r3, #8
 8001b16:	60bb      	str	r3, [r7, #8]
 8001b18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b1a:	4b49      	ldr	r3, [pc, #292]	; (8001c40 <MX_GPIO_Init+0x1b4>)
 8001b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1e:	4a48      	ldr	r2, [pc, #288]	; (8001c40 <MX_GPIO_Init+0x1b4>)
 8001b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b26:	4b46      	ldr	r3, [pc, #280]	; (8001c40 <MX_GPIO_Init+0x1b4>)
 8001b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b2e:	607b      	str	r3, [r7, #4]
 8001b30:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8001b32:	f002 fa8b 	bl	800404c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b36:	4b42      	ldr	r3, [pc, #264]	; (8001c40 <MX_GPIO_Init+0x1b4>)
 8001b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3a:	4a41      	ldr	r2, [pc, #260]	; (8001c40 <MX_GPIO_Init+0x1b4>)
 8001b3c:	f043 0304 	orr.w	r3, r3, #4
 8001b40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b42:	4b3f      	ldr	r3, [pc, #252]	; (8001c40 <MX_GPIO_Init+0x1b4>)
 8001b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b46:	f003 0304 	and.w	r3, r3, #4
 8001b4a:	603b      	str	r3, [r7, #0]
 8001b4c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, thetaDir_Pin|yDir_Pin|rDir_Pin, GPIO_PIN_RESET);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	21e0      	movs	r1, #224	; 0xe0
 8001b52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b56:	f001 fbfb 	bl	8003350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, state3LED_Pin|state2LED_Pin, GPIO_PIN_RESET);
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001b60:	4838      	ldr	r0, [pc, #224]	; (8001c44 <MX_GPIO_Init+0x1b8>)
 8001b62:	f001 fbf5 	bl	8003350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(loadCLK_GPIO_Port, loadCLK_Pin, GPIO_PIN_RESET);
 8001b66:	2200      	movs	r2, #0
 8001b68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b6c:	4836      	ldr	r0, [pc, #216]	; (8001c48 <MX_GPIO_Init+0x1bc>)
 8001b6e:	f001 fbef 	bl	8003350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(state1LED_GPIO_Port, state1LED_Pin, GPIO_PIN_RESET);
 8001b72:	2200      	movs	r2, #0
 8001b74:	2180      	movs	r1, #128	; 0x80
 8001b76:	4835      	ldr	r0, [pc, #212]	; (8001c4c <MX_GPIO_Init+0x1c0>)
 8001b78:	f001 fbea 	bl	8003350 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : thetaDir_Pin yDir_Pin rDir_Pin */
  GPIO_InitStruct.Pin = thetaDir_Pin|yDir_Pin|rDir_Pin;
 8001b7c:	23e0      	movs	r3, #224	; 0xe0
 8001b7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b80:	2301      	movs	r3, #1
 8001b82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8c:	f107 031c 	add.w	r3, r7, #28
 8001b90:	4619      	mov	r1, r3
 8001b92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b96:	f001 fa31 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : thLim_Pin yLim_Pin rLim_Pin */
  GPIO_InitStruct.Pin = thLim_Pin|yLim_Pin|rLim_Pin;
 8001b9a:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8001b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ba0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ba4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001baa:	f107 031c 	add.w	r3, r7, #28
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4827      	ldr	r0, [pc, #156]	; (8001c50 <MX_GPIO_Init+0x1c4>)
 8001bb2:	f001 fa23 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : state3LED_Pin state2LED_Pin */
  GPIO_InitStruct.Pin = state3LED_Pin|state2LED_Pin;
 8001bb6:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001bba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc8:	f107 031c 	add.w	r3, r7, #28
 8001bcc:	4619      	mov	r1, r3
 8001bce:	481d      	ldr	r0, [pc, #116]	; (8001c44 <MX_GPIO_Init+0x1b8>)
 8001bd0:	f001 fa14 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : loadCLK_Pin */
  GPIO_InitStruct.Pin = loadCLK_Pin;
 8001bd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be2:	2300      	movs	r3, #0
 8001be4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(loadCLK_GPIO_Port, &GPIO_InitStruct);
 8001be6:	f107 031c 	add.w	r3, r7, #28
 8001bea:	4619      	mov	r1, r3
 8001bec:	4816      	ldr	r0, [pc, #88]	; (8001c48 <MX_GPIO_Init+0x1bc>)
 8001bee:	f001 fa05 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : loadDATA_Pin */
  GPIO_InitStruct.Pin = loadDATA_Pin;
 8001bf2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(loadDATA_GPIO_Port, &GPIO_InitStruct);
 8001c00:	f107 031c 	add.w	r3, r7, #28
 8001c04:	4619      	mov	r1, r3
 8001c06:	4810      	ldr	r0, [pc, #64]	; (8001c48 <MX_GPIO_Init+0x1bc>)
 8001c08:	f001 f9f8 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : state1LED_Pin */
  GPIO_InitStruct.Pin = state1LED_Pin;
 8001c0c:	2380      	movs	r3, #128	; 0x80
 8001c0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c10:	2301      	movs	r3, #1
 8001c12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(state1LED_GPIO_Port, &GPIO_InitStruct);
 8001c1c:	f107 031c 	add.w	r3, r7, #28
 8001c20:	4619      	mov	r1, r3
 8001c22:	480a      	ldr	r0, [pc, #40]	; (8001c4c <MX_GPIO_Init+0x1c0>)
 8001c24:	f001 f9ea 	bl	8002ffc <HAL_GPIO_Init>
=======
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08c      	sub	sp, #48	; 0x30
 8000f24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f26:	f107 031c 	add.w	r3, r7, #28
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	60da      	str	r2, [r3, #12]
 8000f34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f36:	4b8f      	ldr	r3, [pc, #572]	; (8001174 <MX_GPIO_Init+0x254>)
 8000f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3a:	4a8e      	ldr	r2, [pc, #568]	; (8001174 <MX_GPIO_Init+0x254>)
 8000f3c:	f043 0310 	orr.w	r3, r3, #16
 8000f40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f42:	4b8c      	ldr	r3, [pc, #560]	; (8001174 <MX_GPIO_Init+0x254>)
 8000f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f46:	f003 0310 	and.w	r3, r3, #16
 8000f4a:	61bb      	str	r3, [r7, #24]
 8000f4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f4e:	4b89      	ldr	r3, [pc, #548]	; (8001174 <MX_GPIO_Init+0x254>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f52:	4a88      	ldr	r2, [pc, #544]	; (8001174 <MX_GPIO_Init+0x254>)
 8000f54:	f043 0320 	orr.w	r3, r3, #32
 8000f58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f5a:	4b86      	ldr	r3, [pc, #536]	; (8001174 <MX_GPIO_Init+0x254>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5e:	f003 0320 	and.w	r3, r3, #32
 8000f62:	617b      	str	r3, [r7, #20]
 8000f64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f66:	4b83      	ldr	r3, [pc, #524]	; (8001174 <MX_GPIO_Init+0x254>)
 8000f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6a:	4a82      	ldr	r2, [pc, #520]	; (8001174 <MX_GPIO_Init+0x254>)
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f72:	4b80      	ldr	r3, [pc, #512]	; (8001174 <MX_GPIO_Init+0x254>)
 8000f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7e:	4b7d      	ldr	r3, [pc, #500]	; (8001174 <MX_GPIO_Init+0x254>)
 8000f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f82:	4a7c      	ldr	r2, [pc, #496]	; (8001174 <MX_GPIO_Init+0x254>)
 8000f84:	f043 0302 	orr.w	r3, r3, #2
 8000f88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f8a:	4b7a      	ldr	r3, [pc, #488]	; (8001174 <MX_GPIO_Init+0x254>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f96:	4b77      	ldr	r3, [pc, #476]	; (8001174 <MX_GPIO_Init+0x254>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9a:	4a76      	ldr	r2, [pc, #472]	; (8001174 <MX_GPIO_Init+0x254>)
 8000f9c:	f043 0308 	orr.w	r3, r3, #8
 8000fa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa2:	4b74      	ldr	r3, [pc, #464]	; (8001174 <MX_GPIO_Init+0x254>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa6:	f003 0308 	and.w	r3, r3, #8
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fae:	4b71      	ldr	r3, [pc, #452]	; (8001174 <MX_GPIO_Init+0x254>)
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb2:	4a70      	ldr	r2, [pc, #448]	; (8001174 <MX_GPIO_Init+0x254>)
 8000fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fba:	4b6e      	ldr	r3, [pc, #440]	; (8001174 <MX_GPIO_Init+0x254>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000fc6:	f002 f887 	bl	80030d8 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fca:	4b6a      	ldr	r3, [pc, #424]	; (8001174 <MX_GPIO_Init+0x254>)
 8000fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fce:	4a69      	ldr	r2, [pc, #420]	; (8001174 <MX_GPIO_Init+0x254>)
 8000fd0:	f043 0304 	orr.w	r3, r3, #4
 8000fd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fd6:	4b67      	ldr	r3, [pc, #412]	; (8001174 <MX_GPIO_Init+0x254>)
 8000fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fda:	f003 0304 	and.w	r3, r3, #4
 8000fde:	603b      	str	r3, [r7, #0]
 8000fe0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, thetaDir_Pin|yDir_Pin|rDir_Pin, GPIO_PIN_RESET);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	21e0      	movs	r1, #224	; 0xe0
 8000fe6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fea:	f001 f9f7 	bl	80023dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, statusLed4_Pin|statusLed1_Pin, GPIO_PIN_RESET);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8000ff4:	4860      	ldr	r0, [pc, #384]	; (8001178 <MX_GPIO_Init+0x258>)
 8000ff6:	f001 f9f1 	bl	80023dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, statusLed2_Pin|statusLed3_Pin, GPIO_PIN_RESET);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 8001000:	485e      	ldr	r0, [pc, #376]	; (800117c <MX_GPIO_Init+0x25c>)
 8001002:	f001 f9eb 	bl	80023dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, state3LED_Pin|state2LED_Pin, GPIO_PIN_RESET);
 8001006:	2200      	movs	r2, #0
 8001008:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800100c:	485c      	ldr	r0, [pc, #368]	; (8001180 <MX_GPIO_Init+0x260>)
 800100e:	f001 f9e5 	bl	80023dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, loadCLK_Pin|tofXSHUT_Pin, GPIO_PIN_RESET);
 8001012:	2200      	movs	r2, #0
 8001014:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8001018:	485a      	ldr	r0, [pc, #360]	; (8001184 <MX_GPIO_Init+0x264>)
 800101a:	f001 f9df 	bl	80023dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(state1LED_GPIO_Port, state1LED_Pin, GPIO_PIN_RESET);
 800101e:	2200      	movs	r2, #0
 8001020:	2180      	movs	r1, #128	; 0x80
 8001022:	4859      	ldr	r0, [pc, #356]	; (8001188 <MX_GPIO_Init+0x268>)
 8001024:	f001 f9da 	bl	80023dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : thetaDir_Pin yDir_Pin rDir_Pin */
  GPIO_InitStruct.Pin = thetaDir_Pin|yDir_Pin|rDir_Pin;
 8001028:	23e0      	movs	r3, #224	; 0xe0
 800102a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102c:	2301      	movs	r3, #1
 800102e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001034:	2300      	movs	r3, #0
 8001036:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001038:	f107 031c 	add.w	r3, r7, #28
 800103c:	4619      	mov	r1, r3
 800103e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001042:	f001 f839 	bl	80020b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : statusLed4_Pin statusLed1_Pin */
  GPIO_InitStruct.Pin = statusLed4_Pin|statusLed1_Pin;
 8001046:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800104a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104c:	2301      	movs	r3, #1
 800104e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001054:	2300      	movs	r3, #0
 8001056:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001058:	f107 031c 	add.w	r3, r7, #28
 800105c:	4619      	mov	r1, r3
 800105e:	4846      	ldr	r0, [pc, #280]	; (8001178 <MX_GPIO_Init+0x258>)
 8001060:	f001 f82a 	bl	80020b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : statusLed2_Pin statusLed3_Pin */
  GPIO_InitStruct.Pin = statusLed2_Pin|statusLed3_Pin;
 8001064:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001068:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106a:	2301      	movs	r3, #1
 800106c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	2300      	movs	r3, #0
 8001074:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001076:	f107 031c 	add.w	r3, r7, #28
 800107a:	4619      	mov	r1, r3
 800107c:	483f      	ldr	r0, [pc, #252]	; (800117c <MX_GPIO_Init+0x25c>)
 800107e:	f001 f81b 	bl	80020b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : thLim_Pin yLim_Pin rLim_Pin */
  GPIO_InitStruct.Pin = thLim_Pin|yLim_Pin|rLim_Pin;
 8001082:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8001086:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001088:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800108c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800108e:	2301      	movs	r3, #1
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001092:	f107 031c 	add.w	r3, r7, #28
 8001096:	4619      	mov	r1, r3
 8001098:	4838      	ldr	r0, [pc, #224]	; (800117c <MX_GPIO_Init+0x25c>)
 800109a:	f001 f80d 	bl	80020b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : state3LED_Pin state2LED_Pin */
  GPIO_InitStruct.Pin = state3LED_Pin|state2LED_Pin;
 800109e:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80010a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a4:	2301      	movs	r3, #1
 80010a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ac:	2300      	movs	r3, #0
 80010ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b0:	f107 031c 	add.w	r3, r7, #28
 80010b4:	4619      	mov	r1, r3
 80010b6:	4832      	ldr	r0, [pc, #200]	; (8001180 <MX_GPIO_Init+0x260>)
 80010b8:	f000 fffe 	bl	80020b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : loadCLK_Pin tofXSHUT_Pin */
  GPIO_InitStruct.Pin = loadCLK_Pin|tofXSHUT_Pin;
 80010bc:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80010c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c2:	2301      	movs	r3, #1
 80010c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	2300      	movs	r3, #0
 80010cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ce:	f107 031c 	add.w	r3, r7, #28
 80010d2:	4619      	mov	r1, r3
 80010d4:	482b      	ldr	r0, [pc, #172]	; (8001184 <MX_GPIO_Init+0x264>)
 80010d6:	f000 ffef 	bl	80020b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : loadDATA_Pin */
  GPIO_InitStruct.Pin = loadDATA_Pin;
 80010da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e0:	2300      	movs	r3, #0
 80010e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(loadDATA_GPIO_Port, &GPIO_InitStruct);
 80010e8:	f107 031c 	add.w	r3, r7, #28
 80010ec:	4619      	mov	r1, r3
 80010ee:	4825      	ldr	r0, [pc, #148]	; (8001184 <MX_GPIO_Init+0x264>)
 80010f0:	f000 ffe2 	bl	80020b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : state1LED_Pin */
  GPIO_InitStruct.Pin = state1LED_Pin;
 80010f4:	2380      	movs	r3, #128	; 0x80
 80010f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f8:	2301      	movs	r3, #1
 80010fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001100:	2300      	movs	r3, #0
 8001102:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(state1LED_GPIO_Port, &GPIO_InitStruct);
 8001104:	f107 031c 	add.w	r3, r7, #28
 8001108:	4619      	mov	r1, r3
 800110a:	481f      	ldr	r0, [pc, #124]	; (8001188 <MX_GPIO_Init+0x268>)
 800110c:	f000 ffd4 	bl	80020b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : modeStandby_Pin modeZero_Pin modeTattoo_Pin modeScan_Pin */
  GPIO_InitStruct.Pin = modeStandby_Pin|modeZero_Pin|modeTattoo_Pin|modeScan_Pin;
 8001110:	2378      	movs	r3, #120	; 0x78
 8001112:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001114:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001118:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800111a:	2301      	movs	r3, #1
 800111c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800111e:	f107 031c 	add.w	r3, r7, #28
 8001122:	4619      	mov	r1, r3
 8001124:	4817      	ldr	r0, [pc, #92]	; (8001184 <MX_GPIO_Init+0x264>)
 8001126:	f000 ffc7 	bl	80020b8 <HAL_GPIO_Init>
>>>>>>> ModeSelect_v2

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800112a:	2200      	movs	r2, #0
 800112c:	2100      	movs	r1, #0
 800112e:	2009      	movs	r0, #9
 8001130:	f000 fed1 	bl	8001ed6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001134:	2009      	movs	r0, #9
 8001136:	f000 feea 	bl	8001f0e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800113a:	2200      	movs	r2, #0
 800113c:	2100      	movs	r1, #0
 800113e:	200a      	movs	r0, #10
 8001140:	f000 fec9 	bl	8001ed6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001144:	200a      	movs	r0, #10
 8001146:	f000 fee2 	bl	8001f0e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800114a:	2200      	movs	r2, #0
 800114c:	2100      	movs	r1, #0
 800114e:	2017      	movs	r0, #23
 8001150:	f000 fec1 	bl	8001ed6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001154:	2017      	movs	r0, #23
 8001156:	f000 feda 	bl	8001f0e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
<<<<<<< HEAD
 8001c28:	2200      	movs	r2, #0
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	2028      	movs	r0, #40	; 0x28
 8001c2e:	f001 f8f4 	bl	8002e1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c32:	2028      	movs	r0, #40	; 0x28
 8001c34:	f001 f90d 	bl	8002e52 <HAL_NVIC_EnableIRQ>

}
 8001c38:	bf00      	nop
 8001c3a:	3730      	adds	r7, #48	; 0x30
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40021000 	.word	0x40021000
 8001c44:	48000400 	.word	0x48000400
 8001c48:	48000c00 	.word	0x48000c00
 8001c4c:	48000800 	.word	0x48000800
 8001c50:	48001000 	.word	0x48001000

08001c54 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void  HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim){
 8001c54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c58:	b088      	sub	sp, #32
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	61f8      	str	r0, [r7, #28]
	//Theta Motor interrupts
	if(htim == thetaMotor.Timer){
 8001c5e:	4b68      	ldr	r3, [pc, #416]	; (8001e00 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	69fa      	ldr	r2, [r7, #28]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d141      	bne.n	8001cec <HAL_TIM_PeriodElapsedCallback+0x98>
		if(thetaMotor.Status == RunningForward){
 8001c68:	4b65      	ldr	r3, [pc, #404]	; (8001e00 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001c6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d10d      	bne.n	8001c90 <HAL_TIM_PeriodElapsedCallback+0x3c>
			thetaMotor.CurrentPosition++;
 8001c74:	4b62      	ldr	r3, [pc, #392]	; (8001e00 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001c76:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001c7a:	1c51      	adds	r1, r2, #1
 8001c7c:	6139      	str	r1, [r7, #16]
 8001c7e:	f143 0300 	adc.w	r3, r3, #0
 8001c82:	617b      	str	r3, [r7, #20]
 8001c84:	4b5e      	ldr	r3, [pc, #376]	; (8001e00 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001c86:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001c8a:	e9c3 1208 	strd	r1, r2, [r3, #32]
 8001c8e:	e012      	b.n	8001cb6 <HAL_TIM_PeriodElapsedCallback+0x62>
		}
		else if (thetaMotor.Status == RunningBackward){
 8001c90:	4b5b      	ldr	r3, [pc, #364]	; (8001e00 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001c92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d10c      	bne.n	8001cb6 <HAL_TIM_PeriodElapsedCallback+0x62>
			thetaMotor.CurrentPosition--;
 8001c9c:	4b58      	ldr	r3, [pc, #352]	; (8001e00 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001c9e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001ca2:	1e51      	subs	r1, r2, #1
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	4b54      	ldr	r3, [pc, #336]	; (8001e00 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001cae:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001cb2:	e9c3 1208 	strd	r1, r2, [r3, #32]
		}
		if(thetaMotor.CurrentPosition == thetaMotor.TargetPosition){
 8001cb6:	4b52      	ldr	r3, [pc, #328]	; (8001e00 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001cb8:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001cbc:	4b50      	ldr	r3, [pc, #320]	; (8001e00 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001cbe:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001cc2:	4299      	cmp	r1, r3
 8001cc4:	bf08      	it	eq
 8001cc6:	4290      	cmpeq	r0, r2
 8001cc8:	d110      	bne.n	8001cec <HAL_TIM_PeriodElapsedCallback+0x98>
			HAL_TIM_PWM_Stop(thetaMotor.Timer, thetaMotor.Channel);
 8001cca:	4b4d      	ldr	r3, [pc, #308]	; (8001e00 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a4c      	ldr	r2, [pc, #304]	; (8001e00 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001cd0:	6852      	ldr	r2, [r2, #4]
 8001cd2:	4611      	mov	r1, r2
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f004 f8a5 	bl	8005e24 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop(thetaMotor.Timer);
 8001cda:	4b49      	ldr	r3, [pc, #292]	; (8001e00 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f003 ff12 	bl	8005b08 <HAL_TIM_Base_Stop>
			thetaMotor.Status = Stopped;
 8001ce4:	4b46      	ldr	r3, [pc, #280]	; (8001e00 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001ce6:	2203      	movs	r2, #3
 8001ce8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}
	}
	//yMotor Interrupts
	if(htim == yMotor.Timer){
 8001cec:	4b45      	ldr	r3, [pc, #276]	; (8001e04 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	69fa      	ldr	r2, [r7, #28]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d13e      	bne.n	8001d74 <HAL_TIM_PeriodElapsedCallback+0x120>
		if(yMotor.Status == RunningForward){
 8001cf6:	4b43      	ldr	r3, [pc, #268]	; (8001e04 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001cf8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d10d      	bne.n	8001d1e <HAL_TIM_PeriodElapsedCallback+0xca>
			yMotor.CurrentPosition++;
 8001d02:	4b40      	ldr	r3, [pc, #256]	; (8001e04 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001d04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001d08:	1c51      	adds	r1, r2, #1
 8001d0a:	6039      	str	r1, [r7, #0]
 8001d0c:	f143 0300 	adc.w	r3, r3, #0
 8001d10:	607b      	str	r3, [r7, #4]
 8001d12:	4b3c      	ldr	r3, [pc, #240]	; (8001e04 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001d14:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001d18:	e9c3 1208 	strd	r1, r2, [r3, #32]
 8001d1c:	e00f      	b.n	8001d3e <HAL_TIM_PeriodElapsedCallback+0xea>
		}
		else if (yMotor.Status == RunningBackward){
 8001d1e:	4b39      	ldr	r3, [pc, #228]	; (8001e04 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001d20:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d109      	bne.n	8001d3e <HAL_TIM_PeriodElapsedCallback+0xea>
			yMotor.CurrentPosition--;
 8001d2a:	4b36      	ldr	r3, [pc, #216]	; (8001e04 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001d2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001d30:	f112 3aff 	adds.w	sl, r2, #4294967295
 8001d34:	f143 3bff 	adc.w	fp, r3, #4294967295
 8001d38:	4b32      	ldr	r3, [pc, #200]	; (8001e04 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001d3a:	e9c3 ab08 	strd	sl, fp, [r3, #32]
		}
		if(yMotor.CurrentPosition == yMotor.TargetPosition){
 8001d3e:	4b31      	ldr	r3, [pc, #196]	; (8001e04 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001d40:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001d44:	4b2f      	ldr	r3, [pc, #188]	; (8001e04 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001d46:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001d4a:	4299      	cmp	r1, r3
 8001d4c:	bf08      	it	eq
 8001d4e:	4290      	cmpeq	r0, r2
 8001d50:	d110      	bne.n	8001d74 <HAL_TIM_PeriodElapsedCallback+0x120>
			HAL_TIM_PWM_Stop(yMotor.Timer, yMotor.Channel);
 8001d52:	4b2c      	ldr	r3, [pc, #176]	; (8001e04 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a2b      	ldr	r2, [pc, #172]	; (8001e04 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001d58:	6852      	ldr	r2, [r2, #4]
 8001d5a:	4611      	mov	r1, r2
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f004 f861 	bl	8005e24 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop(yMotor.Timer);
 8001d62:	4b28      	ldr	r3, [pc, #160]	; (8001e04 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f003 fece 	bl	8005b08 <HAL_TIM_Base_Stop>
			yMotor.Status = Stopped;
 8001d6c:	4b25      	ldr	r3, [pc, #148]	; (8001e04 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001d6e:	2203      	movs	r2, #3
 8001d70:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}
	}
	//rMotor Interrupts
	if(htim == rMotor.Timer){
 8001d74:	4b24      	ldr	r3, [pc, #144]	; (8001e08 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	69fa      	ldr	r2, [r7, #28]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d13a      	bne.n	8001df4 <HAL_TIM_PeriodElapsedCallback+0x1a0>
		if(rMotor.Status == RunningForward){
 8001d7e:	4b22      	ldr	r3, [pc, #136]	; (8001e08 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001d80:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d10a      	bne.n	8001da0 <HAL_TIM_PeriodElapsedCallback+0x14c>
			rMotor.CurrentPosition++;
 8001d8a:	4b1f      	ldr	r3, [pc, #124]	; (8001e08 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001d8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001d90:	f112 0801 	adds.w	r8, r2, #1
 8001d94:	f143 0900 	adc.w	r9, r3, #0
 8001d98:	4b1b      	ldr	r3, [pc, #108]	; (8001e08 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001d9a:	e9c3 8908 	strd	r8, r9, [r3, #32]
 8001d9e:	e00e      	b.n	8001dbe <HAL_TIM_PeriodElapsedCallback+0x16a>
		}
		else if (rMotor.Status == RunningBackward){
 8001da0:	4b19      	ldr	r3, [pc, #100]	; (8001e08 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001da2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d108      	bne.n	8001dbe <HAL_TIM_PeriodElapsedCallback+0x16a>
			rMotor.CurrentPosition--;
 8001dac:	4b16      	ldr	r3, [pc, #88]	; (8001e08 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001dae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001db2:	1e54      	subs	r4, r2, #1
 8001db4:	f143 35ff 	adc.w	r5, r3, #4294967295
 8001db8:	4b13      	ldr	r3, [pc, #76]	; (8001e08 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001dba:	e9c3 4508 	strd	r4, r5, [r3, #32]
		}
		if(rMotor.CurrentPosition == rMotor.TargetPosition){
 8001dbe:	4b12      	ldr	r3, [pc, #72]	; (8001e08 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001dc0:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001dc4:	4b10      	ldr	r3, [pc, #64]	; (8001e08 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001dc6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001dca:	4299      	cmp	r1, r3
 8001dcc:	bf08      	it	eq
 8001dce:	4290      	cmpeq	r0, r2
 8001dd0:	d110      	bne.n	8001df4 <HAL_TIM_PeriodElapsedCallback+0x1a0>
			HAL_TIM_PWM_Stop(rMotor.Timer, rMotor.Channel);
 8001dd2:	4b0d      	ldr	r3, [pc, #52]	; (8001e08 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a0c      	ldr	r2, [pc, #48]	; (8001e08 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001dd8:	6852      	ldr	r2, [r2, #4]
 8001dda:	4611      	mov	r1, r2
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f004 f821 	bl	8005e24 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop(rMotor.Timer);
 8001de2:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f003 fe8e 	bl	8005b08 <HAL_TIM_Base_Stop>
			rMotor.Status = Stopped;
 8001dec:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001dee:	2203      	movs	r2, #3
 8001df0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
=======
 800115a:	2200      	movs	r2, #0
 800115c:	2100      	movs	r1, #0
 800115e:	2028      	movs	r0, #40	; 0x28
 8001160:	f000 feb9 	bl	8001ed6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001164:	2028      	movs	r0, #40	; 0x28
 8001166:	f000 fed2 	bl	8001f0e <HAL_NVIC_EnableIRQ>

}
 800116a:	bf00      	nop
 800116c:	3730      	adds	r7, #48	; 0x30
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40021000 	.word	0x40021000
 8001178:	48001400 	.word	0x48001400
 800117c:	48001000 	.word	0x48001000
 8001180:	48000400 	.word	0x48000400
 8001184:	48000c00 	.word	0x48000c00
 8001188:	48000800 	.word	0x48000800

0800118c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void  HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim){
 800118c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001190:	b088      	sub	sp, #32
 8001192:	af00      	add	r7, sp, #0
 8001194:	61f8      	str	r0, [r7, #28]
	//Theta Motor interrupts
	if(htim == &htim3){
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	4a5c      	ldr	r2, [pc, #368]	; (800130c <HAL_TIM_PeriodElapsedCallback+0x180>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d13b      	bne.n	8001216 <HAL_TIM_PeriodElapsedCallback+0x8a>
		if(thetaMotor.Status == RunningForward){
 800119e:	4b5c      	ldr	r3, [pc, #368]	; (8001310 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80011a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d10d      	bne.n	80011c6 <HAL_TIM_PeriodElapsedCallback+0x3a>
			thetaMotor.CurrentPosition++;
 80011aa:	4b59      	ldr	r3, [pc, #356]	; (8001310 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80011ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80011b0:	1c51      	adds	r1, r2, #1
 80011b2:	6139      	str	r1, [r7, #16]
 80011b4:	f143 0300 	adc.w	r3, r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
 80011ba:	4b55      	ldr	r3, [pc, #340]	; (8001310 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80011bc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80011c0:	e9c3 1208 	strd	r1, r2, [r3, #32]
 80011c4:	e012      	b.n	80011ec <HAL_TIM_PeriodElapsedCallback+0x60>
		}
		else if (thetaMotor.Status == RunningBackward){
 80011c6:	4b52      	ldr	r3, [pc, #328]	; (8001310 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80011c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d10c      	bne.n	80011ec <HAL_TIM_PeriodElapsedCallback+0x60>
			thetaMotor.CurrentPosition--;
 80011d2:	4b4f      	ldr	r3, [pc, #316]	; (8001310 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80011d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80011d8:	1e51      	subs	r1, r2, #1
 80011da:	60b9      	str	r1, [r7, #8]
 80011dc:	f143 33ff 	adc.w	r3, r3, #4294967295
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	4b4b      	ldr	r3, [pc, #300]	; (8001310 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80011e4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80011e8:	e9c3 1208 	strd	r1, r2, [r3, #32]
		}
		if(thetaMotor.CurrentPosition == thetaMotor.TargetPosition){
 80011ec:	4b48      	ldr	r3, [pc, #288]	; (8001310 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80011ee:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80011f2:	4b47      	ldr	r3, [pc, #284]	; (8001310 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80011f4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80011f8:	4299      	cmp	r1, r3
 80011fa:	bf08      	it	eq
 80011fc:	4290      	cmpeq	r0, r2
 80011fe:	d10a      	bne.n	8001216 <HAL_TIM_PeriodElapsedCallback+0x8a>
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001200:	2100      	movs	r1, #0
 8001202:	4842      	ldr	r0, [pc, #264]	; (800130c <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001204:	f003 fe54 	bl	8004eb0 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop(&htim3);
 8001208:	4840      	ldr	r0, [pc, #256]	; (800130c <HAL_TIM_PeriodElapsedCallback+0x180>)
 800120a:	f003 fcc3 	bl	8004b94 <HAL_TIM_Base_Stop>
			thetaMotor.Status = Stopped;
 800120e:	4b40      	ldr	r3, [pc, #256]	; (8001310 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001210:	2203      	movs	r2, #3
 8001212:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}
	}
	//yMotor Interrupts
	if(htim == &htim2){
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	4a3e      	ldr	r2, [pc, #248]	; (8001314 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d138      	bne.n	8001290 <HAL_TIM_PeriodElapsedCallback+0x104>
		if(yMotor.Status == RunningForward){
 800121e:	4b3e      	ldr	r3, [pc, #248]	; (8001318 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001220:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001224:	b2db      	uxtb	r3, r3
 8001226:	2b01      	cmp	r3, #1
 8001228:	d10d      	bne.n	8001246 <HAL_TIM_PeriodElapsedCallback+0xba>
			yMotor.CurrentPosition++;
 800122a:	4b3b      	ldr	r3, [pc, #236]	; (8001318 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800122c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001230:	1c51      	adds	r1, r2, #1
 8001232:	6039      	str	r1, [r7, #0]
 8001234:	f143 0300 	adc.w	r3, r3, #0
 8001238:	607b      	str	r3, [r7, #4]
 800123a:	4b37      	ldr	r3, [pc, #220]	; (8001318 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800123c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001240:	e9c3 1208 	strd	r1, r2, [r3, #32]
 8001244:	e00f      	b.n	8001266 <HAL_TIM_PeriodElapsedCallback+0xda>
		}
		else if (yMotor.Status == RunningBackward){
 8001246:	4b34      	ldr	r3, [pc, #208]	; (8001318 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001248:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b02      	cmp	r3, #2
 8001250:	d109      	bne.n	8001266 <HAL_TIM_PeriodElapsedCallback+0xda>
			yMotor.CurrentPosition--;
 8001252:	4b31      	ldr	r3, [pc, #196]	; (8001318 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001254:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001258:	f112 3aff 	adds.w	sl, r2, #4294967295
 800125c:	f143 3bff 	adc.w	fp, r3, #4294967295
 8001260:	4b2d      	ldr	r3, [pc, #180]	; (8001318 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001262:	e9c3 ab08 	strd	sl, fp, [r3, #32]
		}
		if(yMotor.CurrentPosition == yMotor.TargetPosition){
 8001266:	4b2c      	ldr	r3, [pc, #176]	; (8001318 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001268:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800126c:	4b2a      	ldr	r3, [pc, #168]	; (8001318 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800126e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001272:	4299      	cmp	r1, r3
 8001274:	bf08      	it	eq
 8001276:	4290      	cmpeq	r0, r2
 8001278:	d10a      	bne.n	8001290 <HAL_TIM_PeriodElapsedCallback+0x104>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800127a:	2100      	movs	r1, #0
 800127c:	4825      	ldr	r0, [pc, #148]	; (8001314 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800127e:	f003 fe17 	bl	8004eb0 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop(&htim2);
 8001282:	4824      	ldr	r0, [pc, #144]	; (8001314 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001284:	f003 fc86 	bl	8004b94 <HAL_TIM_Base_Stop>
			yMotor.Status = Stopped;
 8001288:	4b23      	ldr	r3, [pc, #140]	; (8001318 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800128a:	2203      	movs	r2, #3
 800128c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}
	}
	//rMotor Interrupts
	if(htim == &htim4){
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	4a22      	ldr	r2, [pc, #136]	; (800131c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d134      	bne.n	8001302 <HAL_TIM_PeriodElapsedCallback+0x176>
		if(rMotor.Status == RunningForward){
 8001298:	4b21      	ldr	r3, [pc, #132]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800129a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d10a      	bne.n	80012ba <HAL_TIM_PeriodElapsedCallback+0x12e>
			rMotor.CurrentPosition++;
 80012a4:	4b1e      	ldr	r3, [pc, #120]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80012a6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80012aa:	f112 0801 	adds.w	r8, r2, #1
 80012ae:	f143 0900 	adc.w	r9, r3, #0
 80012b2:	4b1b      	ldr	r3, [pc, #108]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80012b4:	e9c3 8908 	strd	r8, r9, [r3, #32]
 80012b8:	e00e      	b.n	80012d8 <HAL_TIM_PeriodElapsedCallback+0x14c>
		}
		else if (rMotor.Status == RunningBackward){
 80012ba:	4b19      	ldr	r3, [pc, #100]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80012bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d108      	bne.n	80012d8 <HAL_TIM_PeriodElapsedCallback+0x14c>
			rMotor.CurrentPosition--;
 80012c6:	4b16      	ldr	r3, [pc, #88]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80012c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80012cc:	1e54      	subs	r4, r2, #1
 80012ce:	f143 35ff 	adc.w	r5, r3, #4294967295
 80012d2:	4b13      	ldr	r3, [pc, #76]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80012d4:	e9c3 4508 	strd	r4, r5, [r3, #32]
		}
		if(rMotor.CurrentPosition == rMotor.TargetPosition){
 80012d8:	4b11      	ldr	r3, [pc, #68]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80012da:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80012de:	4b10      	ldr	r3, [pc, #64]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80012e0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80012e4:	4299      	cmp	r1, r3
 80012e6:	bf08      	it	eq
 80012e8:	4290      	cmpeq	r0, r2
 80012ea:	d10a      	bne.n	8001302 <HAL_TIM_PeriodElapsedCallback+0x176>
			HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 80012ec:	2108      	movs	r1, #8
 80012ee:	480b      	ldr	r0, [pc, #44]	; (800131c <HAL_TIM_PeriodElapsedCallback+0x190>)
 80012f0:	f003 fdde 	bl	8004eb0 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop(&htim4);
 80012f4:	4809      	ldr	r0, [pc, #36]	; (800131c <HAL_TIM_PeriodElapsedCallback+0x190>)
 80012f6:	f003 fc4d 	bl	8004b94 <HAL_TIM_Base_Stop>
			rMotor.Status = Stopped;
 80012fa:	4b09      	ldr	r3, [pc, #36]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80012fc:	2203      	movs	r2, #3
 80012fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
>>>>>>> ModeSelect_v2
		}

	}
}
<<<<<<< HEAD
 8001df4:	bf00      	nop
 8001df6:	3720      	adds	r7, #32
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000500 	.word	0x20000500
 8001e04:	20000538 	.word	0x20000538
 8001e08:	20000570 	.word	0x20000570

08001e0c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
	//set flag
	uartRecievedFlag = 1;
 8001e14:	4b04      	ldr	r3, [pc, #16]	; (8001e28 <HAL_UART_RxCpltCallback+0x1c>)
 8001e16:	2201      	movs	r2, #1
 8001e18:	701a      	strb	r2, [r3, #0]
}
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	200007f8 	.word	0x200007f8

08001e2c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	80fb      	strh	r3, [r7, #6]

	//check which limit switch was hit
	if(GPIO_Pin == rLim_Pin){
 8001e36:	88fb      	ldrh	r3, [r7, #6]
 8001e38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e3c:	d103      	bne.n	8001e46 <HAL_GPIO_EXTI_Callback+0x1a>
		zeroStepper(&rMotor);
 8001e3e:	480b      	ldr	r0, [pc, #44]	; (8001e6c <HAL_GPIO_EXTI_Callback+0x40>)
 8001e40:	f000 fbe4 	bl	800260c <zeroStepper>
	else if(GPIO_Pin == yLim_Pin){
		zeroStepper(&yMotor);
=======
 8001302:	bf00      	nop
 8001304:	3720      	adds	r7, #32
 8001306:	46bd      	mov	sp, r7
 8001308:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800130c:	20000468 	.word	0x20000468
 8001310:	20000550 	.word	0x20000550
 8001314:	2000041c 	.word	0x2000041c
 8001318:	20000588 	.word	0x20000588
 800131c:	200004b4 	.word	0x200004b4
 8001320:	200005c0 	.word	0x200005c0

08001324 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
	//set flag
	uartRecievedFlag = 1;
 800132c:	4b04      	ldr	r3, [pc, #16]	; (8001340 <HAL_UART_RxCpltCallback+0x1c>)
 800132e:	2201      	movs	r2, #1
 8001330:	701a      	strb	r2, [r3, #0]
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	2000079c 	.word	0x2000079c

08001344 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	80fb      	strh	r3, [r7, #6]

	switch(GPIO_Pin){
 800134e:	88fb      	ldrh	r3, [r7, #6]
 8001350:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001354:	d01b      	beq.n	800138e <HAL_GPIO_EXTI_Callback+0x4a>
 8001356:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800135a:	dc34      	bgt.n	80013c6 <HAL_GPIO_EXTI_Callback+0x82>
 800135c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001360:	d01d      	beq.n	800139e <HAL_GPIO_EXTI_Callback+0x5a>
 8001362:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001366:	dc2e      	bgt.n	80013c6 <HAL_GPIO_EXTI_Callback+0x82>
 8001368:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800136c:	d013      	beq.n	8001396 <HAL_GPIO_EXTI_Callback+0x52>
 800136e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001372:	dc28      	bgt.n	80013c6 <HAL_GPIO_EXTI_Callback+0x82>
 8001374:	2b40      	cmp	r3, #64	; 0x40
 8001376:	d022      	beq.n	80013be <HAL_GPIO_EXTI_Callback+0x7a>
 8001378:	2b40      	cmp	r3, #64	; 0x40
 800137a:	dc24      	bgt.n	80013c6 <HAL_GPIO_EXTI_Callback+0x82>
 800137c:	2b20      	cmp	r3, #32
 800137e:	d01a      	beq.n	80013b6 <HAL_GPIO_EXTI_Callback+0x72>
 8001380:	2b20      	cmp	r3, #32
 8001382:	dc20      	bgt.n	80013c6 <HAL_GPIO_EXTI_Callback+0x82>
 8001384:	2b08      	cmp	r3, #8
 8001386:	d00e      	beq.n	80013a6 <HAL_GPIO_EXTI_Callback+0x62>
 8001388:	2b10      	cmp	r3, #16
 800138a:	d010      	beq.n	80013ae <HAL_GPIO_EXTI_Callback+0x6a>
	case modeScan_Pin:
		modeSwitch(RTP_SCAN);
		break;
>>>>>>> ModeSelect_v2
	}

}
<<<<<<< HEAD
 8001e44:	e00e      	b.n	8001e64 <HAL_GPIO_EXTI_Callback+0x38>
	else if(GPIO_Pin == thLim_Pin){
 8001e46:	88fb      	ldrh	r3, [r7, #6]
 8001e48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e4c:	d103      	bne.n	8001e56 <HAL_GPIO_EXTI_Callback+0x2a>
		zeroStepper(&thetaMotor);
 8001e4e:	4808      	ldr	r0, [pc, #32]	; (8001e70 <HAL_GPIO_EXTI_Callback+0x44>)
 8001e50:	f000 fbdc 	bl	800260c <zeroStepper>
}
 8001e54:	e006      	b.n	8001e64 <HAL_GPIO_EXTI_Callback+0x38>
	else if(GPIO_Pin == yLim_Pin){
 8001e56:	88fb      	ldrh	r3, [r7, #6]
 8001e58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e5c:	d102      	bne.n	8001e64 <HAL_GPIO_EXTI_Callback+0x38>
		zeroStepper(&yMotor);
 8001e5e:	4805      	ldr	r0, [pc, #20]	; (8001e74 <HAL_GPIO_EXTI_Callback+0x48>)
 8001e60:	f000 fbd4 	bl	800260c <zeroStepper>
}
 8001e64:	bf00      	nop
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	20000570 	.word	0x20000570
 8001e70:	20000500 	.word	0x20000500
 8001e74:	20000538 	.word	0x20000538

08001e78 <Error_Handler>:
=======
 800138c:	e01b      	b.n	80013c6 <HAL_GPIO_EXTI_Callback+0x82>
		zeroStepper(&rMotor);
 800138e:	4810      	ldr	r0, [pc, #64]	; (80013d0 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001390:	f000 f934 	bl	80015fc <zeroStepper>
		break;
 8001394:	e017      	b.n	80013c6 <HAL_GPIO_EXTI_Callback+0x82>
		zeroStepper(&thetaMotor);
 8001396:	480f      	ldr	r0, [pc, #60]	; (80013d4 <HAL_GPIO_EXTI_Callback+0x90>)
 8001398:	f000 f930 	bl	80015fc <zeroStepper>
		break;
 800139c:	e013      	b.n	80013c6 <HAL_GPIO_EXTI_Callback+0x82>
		zeroStepper(&yMotor);
 800139e:	480e      	ldr	r0, [pc, #56]	; (80013d8 <HAL_GPIO_EXTI_Callback+0x94>)
 80013a0:	f000 f92c 	bl	80015fc <zeroStepper>
		break;
 80013a4:	e00f      	b.n	80013c6 <HAL_GPIO_EXTI_Callback+0x82>
		modeSwitch(RTP_STANDBY);
 80013a6:	2000      	movs	r0, #0
 80013a8:	f7ff f8aa 	bl	8000500 <modeSwitch>
		break;
 80013ac:	e00b      	b.n	80013c6 <HAL_GPIO_EXTI_Callback+0x82>
		modeSwitch(RTP_ZERO);
 80013ae:	2001      	movs	r0, #1
 80013b0:	f7ff f8a6 	bl	8000500 <modeSwitch>
		break;
 80013b4:	e007      	b.n	80013c6 <HAL_GPIO_EXTI_Callback+0x82>
		modeSwitch(RTP_TATTOO);
 80013b6:	2002      	movs	r0, #2
 80013b8:	f7ff f8a2 	bl	8000500 <modeSwitch>
		break;
 80013bc:	e003      	b.n	80013c6 <HAL_GPIO_EXTI_Callback+0x82>
		modeSwitch(RTP_SCAN);
 80013be:	2003      	movs	r0, #3
 80013c0:	f7ff f89e 	bl	8000500 <modeSwitch>
		break;
 80013c4:	bf00      	nop
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	200005c0 	.word	0x200005c0
 80013d4:	20000550 	.word	0x20000550
 80013d8:	20000588 	.word	0x20000588

080013dc <Error_Handler>:
>>>>>>> ModeSelect_v2
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< HEAD
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
=======
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
>>>>>>> ModeSelect_v2
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< HEAD
 8001e7c:	b672      	cpsid	i
}
 8001e7e:	bf00      	nop
=======
 80013e0:	b672      	cpsid	i
}
 80013e2:	bf00      	nop
>>>>>>> ModeSelect_v2
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
<<<<<<< HEAD
 8001e80:	e7fe      	b.n	8001e80 <Error_Handler+0x8>

08001e82 <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	uPID->LastInput = *uPID->MyInput;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea0:	6879      	ldr	r1, [r7, #4]
 8001ea2:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

	if (uPID->OutputSum > uPID->OutMax)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001eb2:	f7fe fdf1 	bl	8000a98 <__aeabi_dcmpgt>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d006      	beq.n	8001eca <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }

}
 8001ec8:	e011      	b.n	8001eee <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001ed6:	f7fe fdc1 	bl	8000a5c <__aeabi_dcmplt>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d100      	bne.n	8001ee2 <PID_Init+0x60>
}
 8001ee0:	e005      	b.n	8001eee <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001ee8:	6879      	ldr	r1, [r7, #4]
 8001eea:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b08a      	sub	sp, #40	; 0x28
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6278      	str	r0, [r7, #36]	; 0x24
 8001f00:	6239      	str	r1, [r7, #32]
 8001f02:	61fa      	str	r2, [r7, #28]
 8001f04:	61bb      	str	r3, [r7, #24]
 8001f06:	ed87 0b04 	vstr	d0, [r7, #16]
 8001f0a:	ed87 1b02 	vstr	d1, [r7, #8]
 8001f0e:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 8001f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f14:	69fa      	ldr	r2, [r7, #28]
 8001f16:	645a      	str	r2, [r3, #68]	; 0x44
	uPID->MyInput    = Input;
 8001f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1a:	6a3a      	ldr	r2, [r7, #32]
 8001f1c:	641a      	str	r2, [r3, #64]	; 0x40
	uPID->MySetpoint = Setpoint;
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	649a      	str	r2, [r3, #72]	; 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8001f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f26:	2200      	movs	r2, #0
 8001f28:	705a      	strb	r2, [r3, #1]

	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 8001f2a:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8001f80 <PID+0x88>
 8001f2e:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8001f88 <PID+0x90>
 8001f32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001f34:	f000 f84a 	bl	8001fcc <PID_SetOutputLimits>

	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8001f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3a:	2264      	movs	r2, #100	; 0x64
 8001f3c:	609a      	str	r2, [r3, #8]

	PID_SetControllerDirection(uPID, ControllerDirection);
 8001f3e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001f42:	4619      	mov	r1, r3
 8001f44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001f46:	f000 f957 	bl	80021f8 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 8001f4a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001f4e:	4619      	mov	r1, r3
 8001f50:	ed97 2b00 	vldr	d2, [r7]
 8001f54:	ed97 1b02 	vldr	d1, [r7, #8]
 8001f58:	ed97 0b04 	vldr	d0, [r7, #16]
 8001f5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001f5e:	f000 f8a3 	bl	80020a8 <PID_SetTunings2>

	uPID->LastTime = GetTime() - uPID->SampleTime;
 8001f62:	f000 fe4f 	bl	8002c04 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	1ad2      	subs	r2, r2, r3
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f70:	605a      	str	r2, [r3, #4]

}
 8001f72:	bf00      	nop
 8001f74:	3728      	adds	r7, #40	; 0x28
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	f3af 8000 	nop.w
 8001f80:	00000000 	.word	0x00000000
 8001f84:	406fe000 	.word	0x406fe000
	...

08001f90 <PID_SetMode>:

}

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	460b      	mov	r3, r1
 8001f9a:	70fb      	strb	r3, [r7, #3]

	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8001f9c:	78fb      	ldrb	r3, [r7, #3]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	bf0c      	ite	eq
 8001fa2:	2301      	moveq	r3, #1
 8001fa4:	2300      	movne	r3, #0
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	73fb      	strb	r3, [r7, #15]

	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8001faa:	7bfb      	ldrb	r3, [r7, #15]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d006      	beq.n	8001fbe <PID_SetMode+0x2e>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	785b      	ldrb	r3, [r3, #1]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d102      	bne.n	8001fbe <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f7ff ff62 	bl	8001e82 <PID_Init>
	}

	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	7bfa      	ldrb	r2, [r7, #15]
 8001fc2:	705a      	strb	r2, [r3, #1]

}
 8001fc4:	bf00      	nop
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6178      	str	r0, [r7, #20]
 8001fd4:	ed87 0b02 	vstr	d0, [r7, #8]
 8001fd8:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8001fdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001fe0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fe4:	f7fe fd4e 	bl	8000a84 <__aeabi_dcmpge>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d158      	bne.n	80020a0 <PID_SetOutputLimits+0xd4>
	{
		return;
	}

	uPID->OutMin = Min;
 8001fee:	6979      	ldr	r1, [r7, #20]
 8001ff0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ff4:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	uPID->OutMax = Max;
 8001ff8:	6979      	ldr	r1, [r7, #20]
 8001ffa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ffe:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	785b      	ldrb	r3, [r3, #1]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d04b      	beq.n	80020a2 <PID_SetOutputLimits+0xd6>
	{

		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002018:	f7fe fd3e 	bl	8000a98 <__aeabi_dcmpgt>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d007      	beq.n	8002032 <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800202c:	e9c1 2300 	strd	r2, r3, [r1]
 8002030:	e012      	b.n	8002058 <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002036:	e9d3 0100 	ldrd	r0, r1, [r3]
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002040:	f7fe fd0c 	bl	8000a5c <__aeabi_dcmplt>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d006      	beq.n	8002058 <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002054:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }

		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002064:	f7fe fd18 	bl	8000a98 <__aeabi_dcmpgt>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d006      	beq.n	800207c <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002074:	6979      	ldr	r1, [r7, #20]
 8002076:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800207a:	e012      	b.n	80020a2 <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002088:	f7fe fce8 	bl	8000a5c <__aeabi_dcmplt>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d007      	beq.n	80020a2 <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002098:	6979      	ldr	r1, [r7, #20]
 800209a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800209e:	e000      	b.n	80020a2 <PID_SetOutputLimits+0xd6>
		return;
 80020a0:	bf00      	nop
		}
		else { }

	}

}
 80020a2:	3718      	adds	r7, #24
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b08a      	sub	sp, #40	; 0x28
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	61f8      	str	r0, [r7, #28]
 80020b0:	ed87 0b04 	vstr	d0, [r7, #16]
 80020b4:	ed87 1b02 	vstr	d1, [r7, #8]
 80020b8:	ed87 2b00 	vstr	d2, [r7]
 80020bc:	460b      	mov	r3, r1
 80020be:	76fb      	strb	r3, [r7, #27]

	double SampleTimeInSec;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 80020c0:	f04f 0200 	mov.w	r2, #0
 80020c4:	f04f 0300 	mov.w	r3, #0
 80020c8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020cc:	f7fe fcc6 	bl	8000a5c <__aeabi_dcmplt>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f040 8089 	bne.w	80021ea <PID_SetTunings2+0x142>
 80020d8:	f04f 0200 	mov.w	r2, #0
 80020dc:	f04f 0300 	mov.w	r3, #0
 80020e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80020e4:	f7fe fcba 	bl	8000a5c <__aeabi_dcmplt>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d17d      	bne.n	80021ea <PID_SetTunings2+0x142>
 80020ee:	f04f 0200 	mov.w	r2, #0
 80020f2:	f04f 0300 	mov.w	r3, #0
 80020f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80020fa:	f7fe fcaf 	bl	8000a5c <__aeabi_dcmplt>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d172      	bne.n	80021ea <PID_SetTunings2+0x142>
	{
		return;
	}

	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	7efa      	ldrb	r2, [r7, #27]
 8002108:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 800210a:	7efb      	ldrb	r3, [r7, #27]
 800210c:	2b01      	cmp	r3, #1
 800210e:	bf0c      	ite	eq
 8002110:	2301      	moveq	r3, #1
 8002112:	2300      	movne	r3, #0
 8002114:	b2db      	uxtb	r3, r3
 8002116:	461a      	mov	r2, r3
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 800211c:	69f9      	ldr	r1, [r7, #28]
 800211e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002122:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 8002126:	69f9      	ldr	r1, [r7, #28]
 8002128:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800212c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8002130:	69f9      	ldr	r1, [r7, #28]
 8002132:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002136:	e9c1 2308 	strd	r2, r3, [r1, #32]

	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	4618      	mov	r0, r3
 8002140:	f7fe f9a0 	bl	8000484 <__aeabi_ui2d>
 8002144:	f04f 0200 	mov.w	r2, #0
 8002148:	4b2a      	ldr	r3, [pc, #168]	; (80021f4 <PID_SetTunings2+0x14c>)
 800214a:	f7fe fb3f 	bl	80007cc <__aeabi_ddiv>
 800214e:	4602      	mov	r2, r0
 8002150:	460b      	mov	r3, r1
 8002152:	e9c7 2308 	strd	r2, r3, [r7, #32]

	uPID->Kp = Kp;
 8002156:	69f9      	ldr	r1, [r7, #28]
 8002158:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800215c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8002160:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002164:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002168:	f7fe fa06 	bl	8000578 <__aeabi_dmul>
 800216c:	4602      	mov	r2, r0
 800216e:	460b      	mov	r3, r1
 8002170:	69f9      	ldr	r1, [r7, #28]
 8002172:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8002176:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800217a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800217e:	f7fe fb25 	bl	80007cc <__aeabi_ddiv>
 8002182:	4602      	mov	r2, r0
 8002184:	460b      	mov	r3, r1
 8002186:	69f9      	ldr	r1, [r7, #28]
 8002188:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	78db      	ldrb	r3, [r3, #3]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d12b      	bne.n	80021ec <PID_SetTunings2+0x144>
	{

		uPID->Kp = (0 - uPID->Kp);
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800219a:	f04f 0000 	mov.w	r0, #0
 800219e:	f04f 0100 	mov.w	r1, #0
 80021a2:	f7fe f831 	bl	8000208 <__aeabi_dsub>
 80021a6:	4602      	mov	r2, r0
 80021a8:	460b      	mov	r3, r1
 80021aa:	69f9      	ldr	r1, [r7, #28]
 80021ac:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80021b6:	f04f 0000 	mov.w	r0, #0
 80021ba:	f04f 0100 	mov.w	r1, #0
 80021be:	f7fe f823 	bl	8000208 <__aeabi_dsub>
 80021c2:	4602      	mov	r2, r0
 80021c4:	460b      	mov	r3, r1
 80021c6:	69f9      	ldr	r1, [r7, #28]
 80021c8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80021d2:	f04f 0000 	mov.w	r0, #0
 80021d6:	f04f 0100 	mov.w	r1, #0
 80021da:	f7fe f815 	bl	8000208 <__aeabi_dsub>
 80021de:	4602      	mov	r2, r0
 80021e0:	460b      	mov	r3, r1
 80021e2:	69f9      	ldr	r1, [r7, #28]
 80021e4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 80021e8:	e000      	b.n	80021ec <PID_SetTunings2+0x144>
		return;
 80021ea:	bf00      	nop

	}

}
 80021ec:	3728      	adds	r7, #40	; 0x28
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	408f4000 	.word	0x408f4000

080021f8 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	460b      	mov	r3, r1
 8002202:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	785b      	ldrb	r3, [r3, #1]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d02e      	beq.n	800226a <PID_SetControllerDirection+0x72>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	78db      	ldrb	r3, [r3, #3]
 8002210:	78fa      	ldrb	r2, [r7, #3]
 8002212:	429a      	cmp	r2, r3
 8002214:	d029      	beq.n	800226a <PID_SetControllerDirection+0x72>
	{

		uPID->Kp = (0 - uPID->Kp);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800221c:	f04f 0000 	mov.w	r0, #0
 8002220:	f04f 0100 	mov.w	r1, #0
 8002224:	f7fd fff0 	bl	8000208 <__aeabi_dsub>
 8002228:	4602      	mov	r2, r0
 800222a:	460b      	mov	r3, r1
 800222c:	6879      	ldr	r1, [r7, #4]
 800222e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002238:	f04f 0000 	mov.w	r0, #0
 800223c:	f04f 0100 	mov.w	r1, #0
 8002240:	f7fd ffe2 	bl	8000208 <__aeabi_dsub>
 8002244:	4602      	mov	r2, r0
 8002246:	460b      	mov	r3, r1
 8002248:	6879      	ldr	r1, [r7, #4]
 800224a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002254:	f04f 0000 	mov.w	r0, #0
 8002258:	f04f 0100 	mov.w	r1, #0
 800225c:	f7fd ffd4 	bl	8000208 <__aeabi_dsub>
 8002260:	4602      	mov	r2, r0
 8002262:	460b      	mov	r3, r1
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	}

	uPID->ControllerDirection = Direction;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	78fa      	ldrb	r2, [r7, #3]
 800226e:	70da      	strb	r2, [r3, #3]

}
 8002270:	bf00      	nop
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8002278:	b5b0      	push	{r4, r5, r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]

	double ratio;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	dd2e      	ble.n	80022e6 <PID_SetSampleTime+0x6e>
	{

		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8002288:	6838      	ldr	r0, [r7, #0]
 800228a:	f7fe f90b 	bl	80004a4 <__aeabi_i2d>
 800228e:	4604      	mov	r4, r0
 8002290:	460d      	mov	r5, r1
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe f8f4 	bl	8000484 <__aeabi_ui2d>
 800229c:	4602      	mov	r2, r0
 800229e:	460b      	mov	r3, r1
 80022a0:	4620      	mov	r0, r4
 80022a2:	4629      	mov	r1, r5
 80022a4:	f7fe fa92 	bl	80007cc <__aeabi_ddiv>
 80022a8:	4602      	mov	r2, r0
 80022aa:	460b      	mov	r3, r1
 80022ac:	e9c7 2302 	strd	r2, r3, [r7, #8]

		uPID->Ki *= ratio;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80022b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022ba:	f7fe f95d 	bl	8000578 <__aeabi_dmul>
 80022be:	4602      	mov	r2, r0
 80022c0:	460b      	mov	r3, r1
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80022ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022d2:	f7fe fa7b 	bl	80007cc <__aeabi_ddiv>
 80022d6:	4602      	mov	r2, r0
 80022d8:	460b      	mov	r3, r1
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	609a      	str	r2, [r3, #8]

	}

}
 80022e6:	bf00      	nop
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bdb0      	pop	{r4, r5, r7, pc}
	...

080022f0 <InitSerialFromPC>:
=======
 80013e4:	e7fe      	b.n	80013e4 <Error_Handler+0x8>
	...

080013e8 <InitSerialFromPC>:
>>>>>>> ModeSelect_v2
uint8_t newLine = '\n';
uint8_t carriageReturn = '\r';

UART_HandleTypeDef* huart;

void InitSerialFromPC(UART_HandleTypeDef* huartHandler, uint8_t* rxBuffer){
<<<<<<< HEAD
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
	huart = huartHandler;
 80022fa:	4a06      	ldr	r2, [pc, #24]	; (8002314 <InitSerialFromPC+0x24>)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6013      	str	r3, [r2, #0]
	//allocate for buffer
	//usartInputBuffer = (uint8_t*)calloc(INPUT_BUFFER_SIZE,sizeof(uint8_t));
	usartOutputBuffer = rxBuffer;
 8002300:	4a05      	ldr	r2, [pc, #20]	; (8002318 <InitSerialFromPC+0x28>)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	6013      	str	r3, [r2, #0]
}
 8002306:	bf00      	nop
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	20000808 	.word	0x20000808
 8002318:	20000804 	.word	0x20000804

0800231c <SendSerialChar>:
//	//print to usart
//	HAL_UART_Transmit(huart,usartOutputBuffer,length,10);
//	SendSerialNewLine();
//}

void SendSerialChar(uint8_t c){
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(huart,&c,1,10);
 8002326:	4b05      	ldr	r3, [pc, #20]	; (800233c <SendSerialChar+0x20>)
 8002328:	6818      	ldr	r0, [r3, #0]
 800232a:	1df9      	adds	r1, r7, #7
 800232c:	230a      	movs	r3, #10
 800232e:	2201      	movs	r2, #1
 8002330:	f004 fe5a 	bl	8006fe8 <HAL_UART_Transmit>
}
 8002334:	bf00      	nop
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	20000808 	.word	0x20000808

08002340 <ParseInstructions>:

void SendSerialInt(uint16_t i){
	HAL_UART_Transmit(huart,(uint8_t*)(&i),sizeof(uint16_t),10);
}

void ParseInstructions(uint8_t* rxBuffer, Instruction* i){
 8002340:	b480      	push	{r7}
 8002342:	b087      	sub	sp, #28
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
	//assume that the characters were sent r,th,y

	uint16_t temp[3];

	for(int a = 0; a < 3; a++){
 800234a:	2300      	movs	r3, #0
 800234c:	617b      	str	r3, [r7, #20]
 800234e:	e01a      	b.n	8002386 <ParseInstructions+0x46>
		temp[a] = rxBuffer[2*a] | (rxBuffer[2*a+1] << 8);
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	461a      	mov	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4413      	add	r3, r2
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	b21a      	sxth	r2, r3
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	3301      	adds	r3, #1
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	440b      	add	r3, r1
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	021b      	lsls	r3, r3, #8
 800236c:	b21b      	sxth	r3, r3
 800236e:	4313      	orrs	r3, r2
 8002370:	b21b      	sxth	r3, r3
 8002372:	b29a      	uxth	r2, r3
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	3318      	adds	r3, #24
 800237a:	443b      	add	r3, r7
 800237c:	f823 2c0c 	strh.w	r2, [r3, #-12]
	for(int a = 0; a < 3; a++){
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	3301      	adds	r3, #1
 8002384:	617b      	str	r3, [r7, #20]
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	2b02      	cmp	r3, #2
 800238a:	dde1      	ble.n	8002350 <ParseInstructions+0x10>
	}

	i->r = temp[0];
 800238c:	89ba      	ldrh	r2, [r7, #12]
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	801a      	strh	r2, [r3, #0]
	i->th = temp[1];
 8002392:	89fa      	ldrh	r2, [r7, #14]
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	805a      	strh	r2, [r3, #2]
	i->y = temp[2];
 8002398:	8a3a      	ldrh	r2, [r7, #16]
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	809a      	strh	r2, [r3, #4]
}
 800239e:	bf00      	nop
 80023a0:	371c      	adds	r7, #28
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr

080023aa <initStepper>:
#include "stepperControl.h"

void initStepper(stepper * stepper, TIM_HandleTypeDef * tim, uint32_t  channel, GPIO_TypeDef * dirPort, uint16_t dirPin, uint32_t speed){
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b084      	sub	sp, #16
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	60f8      	str	r0, [r7, #12]
 80023b2:	60b9      	str	r1, [r7, #8]
 80023b4:	607a      	str	r2, [r7, #4]
 80023b6:	603b      	str	r3, [r7, #0]

	//Initialize values
	stepper->Timer = tim;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	68ba      	ldr	r2, [r7, #8]
 80023bc:	601a      	str	r2, [r3, #0]
	stepper->Channel = channel;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	605a      	str	r2, [r3, #4]
	stepper->DIRPort = dirPort;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	609a      	str	r2, [r3, #8]
	stepper->DIRPin = dirPin;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	8b3a      	ldrh	r2, [r7, #24]
 80023ce:	819a      	strh	r2, [r3, #12]
	stepper->PPS = speed;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	69fa      	ldr	r2, [r7, #28]
 80023d4:	611a      	str	r2, [r3, #16]
	stepper->CurrentPosition = 0;
 80023d6:	68f9      	ldr	r1, [r7, #12]
 80023d8:	f04f 0200 	mov.w	r2, #0
 80023dc:	f04f 0300 	mov.w	r3, #0
 80023e0:	e9c1 2308 	strd	r2, r3, [r1, #32]
	stepper->TargetPosition =0;
 80023e4:	68f9      	ldr	r1, [r7, #12]
 80023e6:	f04f 0200 	mov.w	r2, #0
 80023ea:	f04f 0300 	mov.w	r3, #0
 80023ee:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	//Set status
	stepper->Status = Stopped;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2203      	movs	r2, #3
 80023f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	//update timer to align with speed
	setSpeed(stepper, stepper->PPS);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	4619      	mov	r1, r3
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	f000 f84b 	bl	800249c <setSpeed>
	//return stepper structure pointer
}
 8002406:	bf00      	nop
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <setTarget>:


void setTarget (stepper * stepper, uint64_t increment, char forward){
 800240e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	e9c7 2300 	strd	r2, r3, [r7]
	//if positive move forward and add to current position
	if(forward){
 800241c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00c      	beq.n	800243e <setTarget+0x30>
		stepper->TargetPosition+= increment;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800242a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800242e:	eb10 0802 	adds.w	r8, r0, r2
 8002432:	eb41 0903 	adc.w	r9, r1, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	e9c3 890a 	strd	r8, r9, [r3, #40]	; 0x28
 800243c:	e00a      	b.n	8002454 <setTarget+0x46>
=======
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
	huart = huartHandler;
 80013f2:	4a06      	ldr	r2, [pc, #24]	; (800140c <InitSerialFromPC+0x24>)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6013      	str	r3, [r2, #0]
	//allocate for buffer
	//usartInputBuffer = (uint8_t*)calloc(INPUT_BUFFER_SIZE,sizeof(uint8_t));
	usartOutputBuffer = rxBuffer;
 80013f8:	4a05      	ldr	r2, [pc, #20]	; (8001410 <InitSerialFromPC+0x28>)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	6013      	str	r3, [r2, #0]
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	200007a4 	.word	0x200007a4
 8001410:	200007a0 	.word	0x200007a0

08001414 <initStepper>:
#include "stepperControl.h"

void initStepper(stepper * stepper, TIM_HandleTypeDef * tim, uint32_t  channel, GPIO_TypeDef * dirPort, uint16_t dirPin, uint32_t speed){
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
 8001420:	603b      	str	r3, [r7, #0]

	//Initialize values
	stepper->Timer = tim;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	68ba      	ldr	r2, [r7, #8]
 8001426:	601a      	str	r2, [r3, #0]
	stepper->Channel = channel;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	605a      	str	r2, [r3, #4]
	stepper->DIRPort = dirPort;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	683a      	ldr	r2, [r7, #0]
 8001432:	609a      	str	r2, [r3, #8]
	stepper->DIRPin = dirPin;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	8b3a      	ldrh	r2, [r7, #24]
 8001438:	819a      	strh	r2, [r3, #12]
	stepper->PPS = speed;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	69fa      	ldr	r2, [r7, #28]
 800143e:	611a      	str	r2, [r3, #16]
	stepper->CurrentPosition = 0;
 8001440:	68f9      	ldr	r1, [r7, #12]
 8001442:	f04f 0200 	mov.w	r2, #0
 8001446:	f04f 0300 	mov.w	r3, #0
 800144a:	e9c1 2308 	strd	r2, r3, [r1, #32]
	stepper->TargetPosition =0;
 800144e:	68f9      	ldr	r1, [r7, #12]
 8001450:	f04f 0200 	mov.w	r2, #0
 8001454:	f04f 0300 	mov.w	r3, #0
 8001458:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	//Set status
	stepper->Status = Stopped;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2203      	movs	r2, #3
 8001460:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	//update timer to align with speed
	setSpeed(stepper, stepper->PPS);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	691b      	ldr	r3, [r3, #16]
 8001468:	4619      	mov	r1, r3
 800146a:	68f8      	ldr	r0, [r7, #12]
 800146c:	f000 f850 	bl	8001510 <setSpeed>
	//return stepper structure pointer

	//set default speeds
	stepper->PPS_ZeroDefault;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	695b      	ldr	r3, [r3, #20]
	stepper->PPS_TattooDefault;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	699b      	ldr	r3, [r3, #24]
	stepper->PPS_ScanDefault;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	69db      	ldr	r3, [r3, #28]
}
 800147c:	bf00      	nop
 800147e:	3710      	adds	r7, #16
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <setTarget>:


void setTarget (stepper * stepper, uint64_t increment, char forward){
 8001484:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001488:	b084      	sub	sp, #16
 800148a:	af00      	add	r7, sp, #0
 800148c:	60f8      	str	r0, [r7, #12]
 800148e:	e9c7 2300 	strd	r2, r3, [r7]
	//if positive move forward and add to current position
	if(forward){
 8001492:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001496:	2b00      	cmp	r3, #0
 8001498:	d00c      	beq.n	80014b4 <setTarget+0x30>
		stepper->TargetPosition+= increment;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80014a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80014a4:	eb10 0802 	adds.w	r8, r0, r2
 80014a8:	eb41 0903 	adc.w	r9, r1, r3
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	e9c3 890a 	strd	r8, r9, [r3, #40]	; 0x28
 80014b2:	e00a      	b.n	80014ca <setTarget+0x46>
>>>>>>> ModeSelect_v2
	}
	//if negative move backward and take away from current position
	else{
		stepper->TargetPosition-= increment;
<<<<<<< HEAD
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002444:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002448:	1a84      	subs	r4, r0, r2
 800244a:	eb61 0503 	sbc.w	r5, r1, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
	}
	//TargetPosition can't be negative
	if(stepper->TargetPosition<0){
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
=======
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80014ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80014be:	1a84      	subs	r4, r0, r2
 80014c0:	eb61 0503 	sbc.w	r5, r1, r3
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
	}
	//TargetPosition can't be negative
	if(stepper->TargetPosition<0){
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
>>>>>>> ModeSelect_v2
		stepper->TargetPosition=0;
	}
	//Start timer if it needs to be started
	if (stepper->Status == Stopped && stepper->TargetPosition != stepper->CurrentPosition){
<<<<<<< HEAD
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b03      	cmp	r3, #3
 8002464:	d111      	bne.n	800248a <setTarget+0x7c>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002472:	4299      	cmp	r1, r3
 8002474:	bf08      	it	eq
 8002476:	4290      	cmpeq	r0, r2
 8002478:	d007      	beq.n	800248a <setTarget+0x7c>
		//start pulses on timer
		HAL_TIM_PWM_Start(stepper->Timer, stepper->Channel);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	4619      	mov	r1, r3
 8002484:	4610      	mov	r0, r2
 8002486:	f003 fbc7 	bl	8005c18 <HAL_TIM_PWM_Start>
	}
	//Set Direction
	setDirection(stepper);
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f000 f86a 	bl	8002564 <setDirection>
}
 8002490:	bf00      	nop
 8002492:	3710      	adds	r7, #16
 8002494:	46bd      	mov	sp, r7
 8002496:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

0800249c <setSpeed>:

void setSpeed (stepper * stepper, uint32_t speed){
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
	//update pulse rate of stepper
	stepper->PPS = speed;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	611a      	str	r2, [r3, #16]
	//set duty cycle
	switch(stepper->Channel){
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	2b0c      	cmp	r3, #12
 80024b2:	d845      	bhi.n	8002540 <setSpeed+0xa4>
 80024b4:	a201      	add	r2, pc, #4	; (adr r2, 80024bc <setSpeed+0x20>)
 80024b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ba:	bf00      	nop
 80024bc:	080024f1 	.word	0x080024f1
 80024c0:	08002541 	.word	0x08002541
 80024c4:	08002541 	.word	0x08002541
 80024c8:	08002541 	.word	0x08002541
 80024cc:	08002505 	.word	0x08002505
 80024d0:	08002541 	.word	0x08002541
 80024d4:	08002541 	.word	0x08002541
 80024d8:	08002541 	.word	0x08002541
 80024dc:	08002519 	.word	0x08002519
 80024e0:	08002541 	.word	0x08002541
 80024e4:	08002541 	.word	0x08002541
 80024e8:	08002541 	.word	0x08002541
 80024ec:	0800252d 	.word	0x0800252d
		case TIM_CHANNEL_1:{
			stepper->Timer->Instance->CCR1=1000000/(2*speed);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	005a      	lsls	r2, r3, #1
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4919      	ldr	r1, [pc, #100]	; (8002560 <setSpeed+0xc4>)
 80024fc:	fbb1 f2f2 	udiv	r2, r1, r2
 8002500:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8002502:	e01d      	b.n	8002540 <setSpeed+0xa4>
		}
		case TIM_CHANNEL_2:{
			stepper->Timer->Instance->CCR2=1000000/(2*speed);
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	005a      	lsls	r2, r3, #1
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4914      	ldr	r1, [pc, #80]	; (8002560 <setSpeed+0xc4>)
 8002510:	fbb1 f2f2 	udiv	r2, r1, r2
 8002514:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8002516:	e013      	b.n	8002540 <setSpeed+0xa4>
		}
		case TIM_CHANNEL_3:{
			stepper->Timer->Instance->CCR3=1000000/(2*speed);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	005a      	lsls	r2, r3, #1
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	490f      	ldr	r1, [pc, #60]	; (8002560 <setSpeed+0xc4>)
 8002524:	fbb1 f2f2 	udiv	r2, r1, r2
 8002528:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 800252a:	e009      	b.n	8002540 <setSpeed+0xa4>
		}
		case TIM_CHANNEL_4:{
			stepper->Timer->Instance->CCR4=1000000/(2*speed);
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	005a      	lsls	r2, r3, #1
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	490a      	ldr	r1, [pc, #40]	; (8002560 <setSpeed+0xc4>)
 8002538:	fbb1 f2f2 	udiv	r2, r1, r2
 800253c:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 800253e:	bf00      	nop
		}
	}

	//set timer period
	stepper->Timer->Instance->ARR=(1000000/speed)-1;
 8002540:	4a07      	ldr	r2, [pc, #28]	; (8002560 <setSpeed+0xc4>)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	fbb2 f2f3 	udiv	r2, r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	3a01      	subs	r2, #1
 8002550:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	000f4240 	.word	0x000f4240

08002564 <setDirection>:

//set direction
void setDirection(stepper *stepper){
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
	if(stepper->CurrentPosition > stepper->TargetPosition){
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	e9d1 010a 	ldrd	r0, r1, [r1, #40]	; 0x28
 8002578:	4290      	cmp	r0, r2
 800257a:	eb71 0303 	sbcs.w	r3, r1, r3
 800257e:	d20c      	bcs.n	800259a <setDirection+0x36>
		HAL_GPIO_WritePin(stepper->DIRPort, stepper->DIRPin, SET);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6898      	ldr	r0, [r3, #8]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	899b      	ldrh	r3, [r3, #12]
 8002588:	2201      	movs	r2, #1
 800258a:	4619      	mov	r1, r3
 800258c:	f000 fee0 	bl	8003350 <HAL_GPIO_WritePin>
		stepper->Status = RunningBackward;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2202      	movs	r2, #2
 8002594:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
=======
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	2b03      	cmp	r3, #3
 80014da:	d111      	bne.n	8001500 <setTarget+0x7c>
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80014e8:	4299      	cmp	r1, r3
 80014ea:	bf08      	it	eq
 80014ec:	4290      	cmpeq	r0, r2
 80014ee:	d007      	beq.n	8001500 <setTarget+0x7c>
		//start pulses on timer
		HAL_TIM_PWM_Start(stepper->Timer, stepper->Channel);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	4619      	mov	r1, r3
 80014fa:	4610      	mov	r0, r2
 80014fc:	f003 fbd2 	bl	8004ca4 <HAL_TIM_PWM_Start>
	}
	//Set Direction
	setDirection(stepper);
 8001500:	68f8      	ldr	r0, [r7, #12]
 8001502:	f000 f827 	bl	8001554 <setDirection>
}
 8001506:	bf00      	nop
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001510 <setSpeed>:

void setSpeed (stepper * stepper, uint32_t speed){
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
	//update pulse rate of stepper
	stepper->PPS = speed;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	683a      	ldr	r2, [r7, #0]
 800151e:	611a      	str	r2, [r3, #16]
	//set duty cycle
	stepper->Timer->Instance->CCR1=1000000/(2*speed);
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	005a      	lsls	r2, r3, #1
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4909      	ldr	r1, [pc, #36]	; (8001550 <setSpeed+0x40>)
 800152c:	fbb1 f2f2 	udiv	r2, r1, r2
 8001530:	635a      	str	r2, [r3, #52]	; 0x34
	//set timer period
	stepper->Timer->Instance->ARR=(1000000/speed)-1;
 8001532:	4a07      	ldr	r2, [pc, #28]	; (8001550 <setSpeed+0x40>)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	fbb2 f2f3 	udiv	r2, r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	3a01      	subs	r2, #1
 8001542:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	000f4240 	.word	0x000f4240

08001554 <setDirection>:
	stepper->PPS_ScanDefault;

}

//set direction
void setDirection(stepper *stepper){
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
	if(stepper->CurrentPosition > stepper->TargetPosition){
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001562:	6879      	ldr	r1, [r7, #4]
 8001564:	e9d1 010a 	ldrd	r0, r1, [r1, #40]	; 0x28
 8001568:	4290      	cmp	r0, r2
 800156a:	eb71 0303 	sbcs.w	r3, r1, r3
 800156e:	d20c      	bcs.n	800158a <setDirection+0x36>
		HAL_GPIO_WritePin(stepper->DIRPort, stepper->DIRPin, SET);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6898      	ldr	r0, [r3, #8]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	899b      	ldrh	r3, [r3, #12]
 8001578:	2201      	movs	r2, #1
 800157a:	4619      	mov	r1, r3
 800157c:	f000 ff2e 	bl	80023dc <HAL_GPIO_WritePin>
		stepper->Status = RunningBackward;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2202      	movs	r2, #2
 8001584:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
>>>>>>> ModeSelect_v2
	}
	else if(stepper->CurrentPosition < stepper->TargetPosition){
		HAL_GPIO_WritePin(stepper->DIRPort, stepper->DIRPin, RESET);
		stepper->Status = RunningForward;
	}
}
<<<<<<< HEAD
 8002598:	e015      	b.n	80025c6 <setDirection+0x62>
	else if(stepper->CurrentPosition < stepper->TargetPosition){
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80025a6:	4290      	cmp	r0, r2
 80025a8:	eb71 0303 	sbcs.w	r3, r1, r3
 80025ac:	d20b      	bcs.n	80025c6 <setDirection+0x62>
		HAL_GPIO_WritePin(stepper->DIRPort, stepper->DIRPin, RESET);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6898      	ldr	r0, [r3, #8]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	899b      	ldrh	r3, [r3, #12]
 80025b6:	2200      	movs	r2, #0
 80025b8:	4619      	mov	r1, r3
 80025ba:	f000 fec9 	bl	8003350 <HAL_GPIO_WritePin>
		stepper->Status = RunningForward;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2201      	movs	r2, #1
 80025c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 80025c6:	bf00      	nop
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <stopStepper>:

void stopStepper(stepper *stepper){
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b082      	sub	sp, #8
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(stepper->Timer, stepper->Channel);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	4619      	mov	r1, r3
 80025e0:	4610      	mov	r0, r2
 80025e2:	f003 fc1f 	bl	8005e24 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop(stepper->Timer);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f003 fa8c 	bl	8005b08 <HAL_TIM_Base_Stop>
	stepper->Status = Stopped;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2203      	movs	r2, #3
 80025f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	stepper->TargetPosition = stepper->CurrentPosition;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 8002604:	bf00      	nop
 8002606:	3708      	adds	r7, #8
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <zeroStepper>:

void zeroStepper(stepper *stepper){
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
	stopStepper(stepper);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f7ff ffda 	bl	80025ce <stopStepper>
	stepper->CurrentPosition = 0;
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	f04f 0200 	mov.w	r2, #0
 8002620:	f04f 0300 	mov.w	r3, #0
 8002624:	e9c1 2308 	strd	r2, r3, [r1, #32]
	stepper->TargetPosition = 0;
 8002628:	6879      	ldr	r1, [r7, #4]
 800262a:	f04f 0200 	mov.w	r2, #0
 800262e:	f04f 0300 	mov.w	r3, #0
 8002632:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
	...

08002640 <HAL_MspInit>:
=======
 8001588:	e015      	b.n	80015b6 <setDirection+0x62>
	else if(stepper->CurrentPosition < stepper->TargetPosition){
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001596:	4290      	cmp	r0, r2
 8001598:	eb71 0303 	sbcs.w	r3, r1, r3
 800159c:	d20b      	bcs.n	80015b6 <setDirection+0x62>
		HAL_GPIO_WritePin(stepper->DIRPort, stepper->DIRPin, RESET);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6898      	ldr	r0, [r3, #8]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	899b      	ldrh	r3, [r3, #12]
 80015a6:	2200      	movs	r2, #0
 80015a8:	4619      	mov	r1, r3
 80015aa:	f000 ff17 	bl	80023dc <HAL_GPIO_WritePin>
		stepper->Status = RunningForward;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2201      	movs	r2, #1
 80015b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <stopStepper>:

void stopStepper(stepper *stepper){
 80015be:	b580      	push	{r7, lr}
 80015c0:	b082      	sub	sp, #8
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(stepper->Timer, stepper->Channel);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	4619      	mov	r1, r3
 80015d0:	4610      	mov	r0, r2
 80015d2:	f003 fc6d 	bl	8004eb0 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop(stepper->Timer);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4618      	mov	r0, r3
 80015dc:	f003 fada 	bl	8004b94 <HAL_TIM_Base_Stop>
	stepper->Status = Stopped;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2203      	movs	r2, #3
 80015e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	stepper->TargetPosition = stepper->CurrentPosition;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80015ee:	6879      	ldr	r1, [r7, #4]
 80015f0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 80015f4:	bf00      	nop
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <zeroStepper>:

void zeroStepper(stepper *stepper){
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
	stopStepper(stepper);
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff ffda 	bl	80015be <stopStepper>
	stepper->CurrentPosition = 0;
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	f04f 0200 	mov.w	r2, #0
 8001610:	f04f 0300 	mov.w	r3, #0
 8001614:	e9c1 2308 	strd	r2, r3, [r1, #32]
	stepper->TargetPosition = 0;
 8001618:	6879      	ldr	r1, [r7, #4]
 800161a:	f04f 0200 	mov.w	r2, #0
 800161e:	f04f 0300 	mov.w	r3, #0
 8001622:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
	...

08001630 <HAL_MspInit>:
>>>>>>> ModeSelect_v2
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
=======
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
>>>>>>> ModeSelect_v2
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< HEAD
 8002646:	4b0f      	ldr	r3, [pc, #60]	; (8002684 <HAL_MspInit+0x44>)
 8002648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800264a:	4a0e      	ldr	r2, [pc, #56]	; (8002684 <HAL_MspInit+0x44>)
 800264c:	f043 0301 	orr.w	r3, r3, #1
 8002650:	6613      	str	r3, [r2, #96]	; 0x60
 8002652:	4b0c      	ldr	r3, [pc, #48]	; (8002684 <HAL_MspInit+0x44>)
 8002654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	607b      	str	r3, [r7, #4]
 800265c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800265e:	4b09      	ldr	r3, [pc, #36]	; (8002684 <HAL_MspInit+0x44>)
 8002660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002662:	4a08      	ldr	r2, [pc, #32]	; (8002684 <HAL_MspInit+0x44>)
 8002664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002668:	6593      	str	r3, [r2, #88]	; 0x58
 800266a:	4b06      	ldr	r3, [pc, #24]	; (8002684 <HAL_MspInit+0x44>)
 800266c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800266e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002672:	603b      	str	r3, [r7, #0]
 8002674:	683b      	ldr	r3, [r7, #0]
=======
 8001636:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <HAL_MspInit+0x44>)
 8001638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800163a:	4a0e      	ldr	r2, [pc, #56]	; (8001674 <HAL_MspInit+0x44>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	6613      	str	r3, [r2, #96]	; 0x60
 8001642:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <HAL_MspInit+0x44>)
 8001644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	607b      	str	r3, [r7, #4]
 800164c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800164e:	4b09      	ldr	r3, [pc, #36]	; (8001674 <HAL_MspInit+0x44>)
 8001650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001652:	4a08      	ldr	r2, [pc, #32]	; (8001674 <HAL_MspInit+0x44>)
 8001654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001658:	6593      	str	r3, [r2, #88]	; 0x58
 800165a:	4b06      	ldr	r3, [pc, #24]	; (8001674 <HAL_MspInit+0x44>)
 800165c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800165e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001662:	603b      	str	r3, [r7, #0]
 8001664:	683b      	ldr	r3, [r7, #0]
>>>>>>> ModeSelect_v2
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	40021000 	.word	0x40021000

08002688 <HAL_I2C_MspInit>:
=======
 8001666:	bf00      	nop
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	40021000 	.word	0x40021000

08001678 <HAL_I2C_MspInit>:
>>>>>>> ModeSelect_v2
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
<<<<<<< HEAD
 8002688:	b580      	push	{r7, lr}
 800268a:	b0b0      	sub	sp, #192	; 0xc0
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002690:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	605a      	str	r2, [r3, #4]
 800269a:	609a      	str	r2, [r3, #8]
 800269c:	60da      	str	r2, [r3, #12]
 800269e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026a0:	f107 0314 	add.w	r3, r7, #20
 80026a4:	2298      	movs	r2, #152	; 0x98
 80026a6:	2100      	movs	r1, #0
 80026a8:	4618      	mov	r0, r3
 80026aa:	f00b fcf3 	bl	800e094 <memset>
  if(hi2c->Instance==I2C2)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a21      	ldr	r2, [pc, #132]	; (8002738 <HAL_I2C_MspInit+0xb0>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d13a      	bne.n	800272e <HAL_I2C_MspInit+0xa6>
=======
 8001678:	b580      	push	{r7, lr}
 800167a:	b0b0      	sub	sp, #192	; 0xc0
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001680:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001690:	f107 0314 	add.w	r3, r7, #20
 8001694:	2298      	movs	r2, #152	; 0x98
 8001696:	2100      	movs	r1, #0
 8001698:	4618      	mov	r0, r3
 800169a:	f00b fcab 	bl	800cff4 <memset>
  if(hi2c->Instance==I2C2)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a21      	ldr	r2, [pc, #132]	; (8001728 <HAL_I2C_MspInit+0xb0>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d13a      	bne.n	800171e <HAL_I2C_MspInit+0xa6>
>>>>>>> ModeSelect_v2

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
<<<<<<< HEAD
 80026b8:	2380      	movs	r3, #128	; 0x80
 80026ba:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80026bc:	2300      	movs	r3, #0
 80026be:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026c0:	f107 0314 	add.w	r3, r7, #20
 80026c4:	4618      	mov	r0, r3
 80026c6:	f002 fc0b 	bl	8004ee0 <HAL_RCCEx_PeriphCLKConfig>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80026d0:	f7ff fbd2 	bl	8001e78 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80026d4:	4b19      	ldr	r3, [pc, #100]	; (800273c <HAL_I2C_MspInit+0xb4>)
 80026d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d8:	4a18      	ldr	r2, [pc, #96]	; (800273c <HAL_I2C_MspInit+0xb4>)
 80026da:	f043 0320 	orr.w	r3, r3, #32
 80026de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026e0:	4b16      	ldr	r3, [pc, #88]	; (800273c <HAL_I2C_MspInit+0xb4>)
 80026e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e4:	f003 0320 	and.w	r3, r3, #32
 80026e8:	613b      	str	r3, [r7, #16]
 80026ea:	693b      	ldr	r3, [r7, #16]
=======
 80016a8:	2380      	movs	r3, #128	; 0x80
 80016aa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80016ac:	2300      	movs	r3, #0
 80016ae:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	4618      	mov	r0, r3
 80016b6:	f002 fc59 	bl	8003f6c <HAL_RCCEx_PeriphCLKConfig>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80016c0:	f7ff fe8c 	bl	80013dc <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80016c4:	4b19      	ldr	r3, [pc, #100]	; (800172c <HAL_I2C_MspInit+0xb4>)
 80016c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c8:	4a18      	ldr	r2, [pc, #96]	; (800172c <HAL_I2C_MspInit+0xb4>)
 80016ca:	f043 0320 	orr.w	r3, r3, #32
 80016ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016d0:	4b16      	ldr	r3, [pc, #88]	; (800172c <HAL_I2C_MspInit+0xb4>)
 80016d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d4:	f003 0320 	and.w	r3, r3, #32
 80016d8:	613b      	str	r3, [r7, #16]
 80016da:	693b      	ldr	r3, [r7, #16]
>>>>>>> ModeSelect_v2
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
<<<<<<< HEAD
 80026ec:	2303      	movs	r3, #3
 80026ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026f2:	2312      	movs	r3, #18
 80026f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026fe:	2303      	movs	r3, #3
 8002700:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002704:	2304      	movs	r3, #4
 8002706:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800270a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800270e:	4619      	mov	r1, r3
 8002710:	480b      	ldr	r0, [pc, #44]	; (8002740 <HAL_I2C_MspInit+0xb8>)
 8002712:	f000 fc73 	bl	8002ffc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002716:	4b09      	ldr	r3, [pc, #36]	; (800273c <HAL_I2C_MspInit+0xb4>)
 8002718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800271a:	4a08      	ldr	r2, [pc, #32]	; (800273c <HAL_I2C_MspInit+0xb4>)
 800271c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002720:	6593      	str	r3, [r2, #88]	; 0x58
 8002722:	4b06      	ldr	r3, [pc, #24]	; (800273c <HAL_I2C_MspInit+0xb4>)
 8002724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002726:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800272a:	60fb      	str	r3, [r7, #12]
 800272c:	68fb      	ldr	r3, [r7, #12]
=======
 80016dc:	2303      	movs	r3, #3
 80016de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016e2:	2312      	movs	r3, #18
 80016e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ee:	2303      	movs	r3, #3
 80016f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80016f4:	2304      	movs	r3, #4
 80016f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016fa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80016fe:	4619      	mov	r1, r3
 8001700:	480b      	ldr	r0, [pc, #44]	; (8001730 <HAL_I2C_MspInit+0xb8>)
 8001702:	f000 fcd9 	bl	80020b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001706:	4b09      	ldr	r3, [pc, #36]	; (800172c <HAL_I2C_MspInit+0xb4>)
 8001708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170a:	4a08      	ldr	r2, [pc, #32]	; (800172c <HAL_I2C_MspInit+0xb4>)
 800170c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001710:	6593      	str	r3, [r2, #88]	; 0x58
 8001712:	4b06      	ldr	r3, [pc, #24]	; (800172c <HAL_I2C_MspInit+0xb4>)
 8001714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
>>>>>>> ModeSelect_v2
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
<<<<<<< HEAD
 800272e:	bf00      	nop
 8002730:	37c0      	adds	r7, #192	; 0xc0
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	40005800 	.word	0x40005800
 800273c:	40021000 	.word	0x40021000
 8002740:	48001400 	.word	0x48001400

08002744 <HAL_UART_MspInit>:
=======
 800171e:	bf00      	nop
 8001720:	37c0      	adds	r7, #192	; 0xc0
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40005800 	.word	0x40005800
 800172c:	40021000 	.word	0x40021000
 8001730:	48001400 	.word	0x48001400

08001734 <HAL_UART_MspInit>:
>>>>>>> ModeSelect_v2
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
<<<<<<< HEAD
 8002744:	b580      	push	{r7, lr}
 8002746:	b0b0      	sub	sp, #192	; 0xc0
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800274c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	605a      	str	r2, [r3, #4]
 8002756:	609a      	str	r2, [r3, #8]
 8002758:	60da      	str	r2, [r3, #12]
 800275a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800275c:	f107 0314 	add.w	r3, r7, #20
 8002760:	2298      	movs	r2, #152	; 0x98
 8002762:	2100      	movs	r1, #0
 8002764:	4618      	mov	r0, r3
 8002766:	f00b fc95 	bl	800e094 <memset>
  if(huart->Instance==LPUART1)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a26      	ldr	r2, [pc, #152]	; (8002808 <HAL_UART_MspInit+0xc4>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d145      	bne.n	8002800 <HAL_UART_MspInit+0xbc>
=======
 8001734:	b580      	push	{r7, lr}
 8001736:	b0b0      	sub	sp, #192	; 0xc0
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
 800174a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800174c:	f107 0314 	add.w	r3, r7, #20
 8001750:	2298      	movs	r2, #152	; 0x98
 8001752:	2100      	movs	r1, #0
 8001754:	4618      	mov	r0, r3
 8001756:	f00b fc4d 	bl	800cff4 <memset>
  if(huart->Instance==LPUART1)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a26      	ldr	r2, [pc, #152]	; (80017f8 <HAL_UART_MspInit+0xc4>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d145      	bne.n	80017f0 <HAL_UART_MspInit+0xbc>
>>>>>>> ModeSelect_v2

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
<<<<<<< HEAD
 8002774:	2320      	movs	r3, #32
 8002776:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002778:	2300      	movs	r3, #0
 800277a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800277c:	f107 0314 	add.w	r3, r7, #20
 8002780:	4618      	mov	r0, r3
 8002782:	f002 fbad 	bl	8004ee0 <HAL_RCCEx_PeriphCLKConfig>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800278c:	f7ff fb74 	bl	8001e78 <Error_Handler>
=======
 8001764:	2320      	movs	r3, #32
 8001766:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001768:	2300      	movs	r3, #0
 800176a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	4618      	mov	r0, r3
 8001772:	f002 fbfb 	bl	8003f6c <HAL_RCCEx_PeriphCLKConfig>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800177c:	f7ff fe2e 	bl	80013dc <Error_Handler>
>>>>>>> ModeSelect_v2
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
<<<<<<< HEAD
 8002790:	4b1e      	ldr	r3, [pc, #120]	; (800280c <HAL_UART_MspInit+0xc8>)
 8002792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002794:	4a1d      	ldr	r2, [pc, #116]	; (800280c <HAL_UART_MspInit+0xc8>)
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800279c:	4b1b      	ldr	r3, [pc, #108]	; (800280c <HAL_UART_MspInit+0xc8>)
 800279e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a0:	f003 0301 	and.w	r3, r3, #1
 80027a4:	613b      	str	r3, [r7, #16]
 80027a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80027a8:	4b18      	ldr	r3, [pc, #96]	; (800280c <HAL_UART_MspInit+0xc8>)
 80027aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ac:	4a17      	ldr	r2, [pc, #92]	; (800280c <HAL_UART_MspInit+0xc8>)
 80027ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027b4:	4b15      	ldr	r3, [pc, #84]	; (800280c <HAL_UART_MspInit+0xc8>)
 80027b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027bc:	60fb      	str	r3, [r7, #12]
 80027be:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 80027c0:	f001 fc44 	bl	800404c <HAL_PWREx_EnableVddIO2>
=======
 8001780:	4b1e      	ldr	r3, [pc, #120]	; (80017fc <HAL_UART_MspInit+0xc8>)
 8001782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001784:	4a1d      	ldr	r2, [pc, #116]	; (80017fc <HAL_UART_MspInit+0xc8>)
 8001786:	f043 0301 	orr.w	r3, r3, #1
 800178a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800178c:	4b1b      	ldr	r3, [pc, #108]	; (80017fc <HAL_UART_MspInit+0xc8>)
 800178e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001790:	f003 0301 	and.w	r3, r3, #1
 8001794:	613b      	str	r3, [r7, #16]
 8001796:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001798:	4b18      	ldr	r3, [pc, #96]	; (80017fc <HAL_UART_MspInit+0xc8>)
 800179a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179c:	4a17      	ldr	r2, [pc, #92]	; (80017fc <HAL_UART_MspInit+0xc8>)
 800179e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017a4:	4b15      	ldr	r3, [pc, #84]	; (80017fc <HAL_UART_MspInit+0xc8>)
 80017a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 80017b0:	f001 fc92 	bl	80030d8 <HAL_PWREx_EnableVddIO2>
>>>>>>> ModeSelect_v2
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
<<<<<<< HEAD
 80027c4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80027c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027cc:	2302      	movs	r3, #2
 80027ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027d8:	2303      	movs	r3, #3
 80027da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80027de:	2308      	movs	r3, #8
 80027e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80027e4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80027e8:	4619      	mov	r1, r3
 80027ea:	4809      	ldr	r0, [pc, #36]	; (8002810 <HAL_UART_MspInit+0xcc>)
 80027ec:	f000 fc06 	bl	8002ffc <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80027f0:	2200      	movs	r2, #0
 80027f2:	2100      	movs	r1, #0
 80027f4:	2046      	movs	r0, #70	; 0x46
 80027f6:	f000 fb10 	bl	8002e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80027fa:	2046      	movs	r0, #70	; 0x46
 80027fc:	f000 fb29 	bl	8002e52 <HAL_NVIC_EnableIRQ>
=======
 80017b4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80017b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017bc:	2302      	movs	r3, #2
 80017be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c8:	2303      	movs	r3, #3
 80017ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80017ce:	2308      	movs	r3, #8
 80017d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017d4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80017d8:	4619      	mov	r1, r3
 80017da:	4809      	ldr	r0, [pc, #36]	; (8001800 <HAL_UART_MspInit+0xcc>)
 80017dc:	f000 fc6c 	bl	80020b8 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80017e0:	2200      	movs	r2, #0
 80017e2:	2100      	movs	r1, #0
 80017e4:	2046      	movs	r0, #70	; 0x46
 80017e6:	f000 fb76 	bl	8001ed6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80017ea:	2046      	movs	r0, #70	; 0x46
 80017ec:	f000 fb8f 	bl	8001f0e <HAL_NVIC_EnableIRQ>
>>>>>>> ModeSelect_v2
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
<<<<<<< HEAD
 8002800:	bf00      	nop
 8002802:	37c0      	adds	r7, #192	; 0xc0
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40008000 	.word	0x40008000
 800280c:	40021000 	.word	0x40021000
 8002810:	48001800 	.word	0x48001800

08002814 <HAL_TIM_Base_MspInit>:
=======
 80017f0:	bf00      	nop
 80017f2:	37c0      	adds	r7, #192	; 0xc0
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40008000 	.word	0x40008000
 80017fc:	40021000 	.word	0x40021000
 8001800:	48001800 	.word	0x48001800

08001804 <HAL_TIM_Base_MspInit>:
>>>>>>> ModeSelect_v2
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
<<<<<<< HEAD
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002824:	d114      	bne.n	8002850 <HAL_TIM_Base_MspInit+0x3c>
=======
 8001804:	b580      	push	{r7, lr}
 8001806:	b088      	sub	sp, #32
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a3d      	ldr	r2, [pc, #244]	; (8001908 <HAL_TIM_Base_MspInit+0x104>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d114      	bne.n	8001840 <HAL_TIM_Base_MspInit+0x3c>
>>>>>>> ModeSelect_v2
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
<<<<<<< HEAD
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002826:	4b2f      	ldr	r3, [pc, #188]	; (80028e4 <HAL_TIM_Base_MspInit+0xd0>)
 8002828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800282a:	4a2e      	ldr	r2, [pc, #184]	; (80028e4 <HAL_TIM_Base_MspInit+0xd0>)
 800282c:	f043 0301 	orr.w	r3, r3, #1
 8002830:	6593      	str	r3, [r2, #88]	; 0x58
 8002832:	4b2c      	ldr	r3, [pc, #176]	; (80028e4 <HAL_TIM_Base_MspInit+0xd0>)
 8002834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	617b      	str	r3, [r7, #20]
 800283c:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800283e:	2200      	movs	r2, #0
 8002840:	2100      	movs	r1, #0
 8002842:	201c      	movs	r0, #28
 8002844:	f000 fae9 	bl	8002e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002848:	201c      	movs	r0, #28
 800284a:	f000 fb02 	bl	8002e52 <HAL_NVIC_EnableIRQ>
=======
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001816:	4b3d      	ldr	r3, [pc, #244]	; (800190c <HAL_TIM_Base_MspInit+0x108>)
 8001818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800181a:	4a3c      	ldr	r2, [pc, #240]	; (800190c <HAL_TIM_Base_MspInit+0x108>)
 800181c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001820:	6613      	str	r3, [r2, #96]	; 0x60
 8001822:	4b3a      	ldr	r3, [pc, #232]	; (800190c <HAL_TIM_Base_MspInit+0x108>)
 8001824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001826:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800182a:	61fb      	str	r3, [r7, #28]
 800182c:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800182e:	2200      	movs	r2, #0
 8001830:	2100      	movs	r1, #0
 8001832:	2018      	movs	r0, #24
 8001834:	f000 fb4f 	bl	8001ed6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001838:	2018      	movs	r0, #24
 800183a:	f000 fb68 	bl	8001f0e <HAL_NVIC_EnableIRQ>
>>>>>>> ModeSelect_v2
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
<<<<<<< HEAD
 800284e:	e044      	b.n	80028da <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM3)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a24      	ldr	r2, [pc, #144]	; (80028e8 <HAL_TIM_Base_MspInit+0xd4>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d114      	bne.n	8002884 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800285a:	4b22      	ldr	r3, [pc, #136]	; (80028e4 <HAL_TIM_Base_MspInit+0xd0>)
 800285c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285e:	4a21      	ldr	r2, [pc, #132]	; (80028e4 <HAL_TIM_Base_MspInit+0xd0>)
 8002860:	f043 0302 	orr.w	r3, r3, #2
 8002864:	6593      	str	r3, [r2, #88]	; 0x58
 8002866:	4b1f      	ldr	r3, [pc, #124]	; (80028e4 <HAL_TIM_Base_MspInit+0xd0>)
 8002868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	613b      	str	r3, [r7, #16]
 8002870:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002872:	2200      	movs	r2, #0
 8002874:	2100      	movs	r1, #0
 8002876:	201d      	movs	r0, #29
 8002878:	f000 facf 	bl	8002e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800287c:	201d      	movs	r0, #29
 800287e:	f000 fae8 	bl	8002e52 <HAL_NVIC_EnableIRQ>
}
 8002882:	e02a      	b.n	80028da <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM4)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a18      	ldr	r2, [pc, #96]	; (80028ec <HAL_TIM_Base_MspInit+0xd8>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d114      	bne.n	80028b8 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800288e:	4b15      	ldr	r3, [pc, #84]	; (80028e4 <HAL_TIM_Base_MspInit+0xd0>)
 8002890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002892:	4a14      	ldr	r2, [pc, #80]	; (80028e4 <HAL_TIM_Base_MspInit+0xd0>)
 8002894:	f043 0304 	orr.w	r3, r3, #4
 8002898:	6593      	str	r3, [r2, #88]	; 0x58
 800289a:	4b12      	ldr	r3, [pc, #72]	; (80028e4 <HAL_TIM_Base_MspInit+0xd0>)
 800289c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289e:	f003 0304 	and.w	r3, r3, #4
 80028a2:	60fb      	str	r3, [r7, #12]
 80028a4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80028a6:	2200      	movs	r2, #0
 80028a8:	2100      	movs	r1, #0
 80028aa:	201e      	movs	r0, #30
 80028ac:	f000 fab5 	bl	8002e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80028b0:	201e      	movs	r0, #30
 80028b2:	f000 face 	bl	8002e52 <HAL_NVIC_EnableIRQ>
}
 80028b6:	e010      	b.n	80028da <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM5)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a0c      	ldr	r2, [pc, #48]	; (80028f0 <HAL_TIM_Base_MspInit+0xdc>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d10b      	bne.n	80028da <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80028c2:	4b08      	ldr	r3, [pc, #32]	; (80028e4 <HAL_TIM_Base_MspInit+0xd0>)
 80028c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c6:	4a07      	ldr	r2, [pc, #28]	; (80028e4 <HAL_TIM_Base_MspInit+0xd0>)
 80028c8:	f043 0308 	orr.w	r3, r3, #8
 80028cc:	6593      	str	r3, [r2, #88]	; 0x58
 80028ce:	4b05      	ldr	r3, [pc, #20]	; (80028e4 <HAL_TIM_Base_MspInit+0xd0>)
 80028d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d2:	f003 0308 	and.w	r3, r3, #8
 80028d6:	60bb      	str	r3, [r7, #8]
 80028d8:	68bb      	ldr	r3, [r7, #8]
}
 80028da:	bf00      	nop
 80028dc:	3718      	adds	r7, #24
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	40021000 	.word	0x40021000
 80028e8:	40000400 	.word	0x40000400
 80028ec:	40000800 	.word	0x40000800
 80028f0:	40000c00 	.word	0x40000c00

080028f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b08a      	sub	sp, #40	; 0x28
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028fc:	f107 0314 	add.w	r3, r7, #20
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	609a      	str	r2, [r3, #8]
 8002908:	60da      	str	r2, [r3, #12]
 800290a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002914:	d11d      	bne.n	8002952 <HAL_TIM_MspPostInit+0x5e>
=======
 800183e:	e05e      	b.n	80018fe <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM2)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001848:	d114      	bne.n	8001874 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800184a:	4b30      	ldr	r3, [pc, #192]	; (800190c <HAL_TIM_Base_MspInit+0x108>)
 800184c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184e:	4a2f      	ldr	r2, [pc, #188]	; (800190c <HAL_TIM_Base_MspInit+0x108>)
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	6593      	str	r3, [r2, #88]	; 0x58
 8001856:	4b2d      	ldr	r3, [pc, #180]	; (800190c <HAL_TIM_Base_MspInit+0x108>)
 8001858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	61bb      	str	r3, [r7, #24]
 8001860:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001862:	2200      	movs	r2, #0
 8001864:	2100      	movs	r1, #0
 8001866:	201c      	movs	r0, #28
 8001868:	f000 fb35 	bl	8001ed6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800186c:	201c      	movs	r0, #28
 800186e:	f000 fb4e 	bl	8001f0e <HAL_NVIC_EnableIRQ>
}
 8001872:	e044      	b.n	80018fe <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM3)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a25      	ldr	r2, [pc, #148]	; (8001910 <HAL_TIM_Base_MspInit+0x10c>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d114      	bne.n	80018a8 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800187e:	4b23      	ldr	r3, [pc, #140]	; (800190c <HAL_TIM_Base_MspInit+0x108>)
 8001880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001882:	4a22      	ldr	r2, [pc, #136]	; (800190c <HAL_TIM_Base_MspInit+0x108>)
 8001884:	f043 0302 	orr.w	r3, r3, #2
 8001888:	6593      	str	r3, [r2, #88]	; 0x58
 800188a:	4b20      	ldr	r3, [pc, #128]	; (800190c <HAL_TIM_Base_MspInit+0x108>)
 800188c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	617b      	str	r3, [r7, #20]
 8001894:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001896:	2200      	movs	r2, #0
 8001898:	2100      	movs	r1, #0
 800189a:	201d      	movs	r0, #29
 800189c:	f000 fb1b 	bl	8001ed6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80018a0:	201d      	movs	r0, #29
 80018a2:	f000 fb34 	bl	8001f0e <HAL_NVIC_EnableIRQ>
}
 80018a6:	e02a      	b.n	80018fe <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM4)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a19      	ldr	r2, [pc, #100]	; (8001914 <HAL_TIM_Base_MspInit+0x110>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d114      	bne.n	80018dc <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80018b2:	4b16      	ldr	r3, [pc, #88]	; (800190c <HAL_TIM_Base_MspInit+0x108>)
 80018b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b6:	4a15      	ldr	r2, [pc, #84]	; (800190c <HAL_TIM_Base_MspInit+0x108>)
 80018b8:	f043 0304 	orr.w	r3, r3, #4
 80018bc:	6593      	str	r3, [r2, #88]	; 0x58
 80018be:	4b13      	ldr	r3, [pc, #76]	; (800190c <HAL_TIM_Base_MspInit+0x108>)
 80018c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c2:	f003 0304 	and.w	r3, r3, #4
 80018c6:	613b      	str	r3, [r7, #16]
 80018c8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80018ca:	2200      	movs	r2, #0
 80018cc:	2100      	movs	r1, #0
 80018ce:	201e      	movs	r0, #30
 80018d0:	f000 fb01 	bl	8001ed6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80018d4:	201e      	movs	r0, #30
 80018d6:	f000 fb1a 	bl	8001f0e <HAL_NVIC_EnableIRQ>
}
 80018da:	e010      	b.n	80018fe <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM5)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a0d      	ldr	r2, [pc, #52]	; (8001918 <HAL_TIM_Base_MspInit+0x114>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d10b      	bne.n	80018fe <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80018e6:	4b09      	ldr	r3, [pc, #36]	; (800190c <HAL_TIM_Base_MspInit+0x108>)
 80018e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ea:	4a08      	ldr	r2, [pc, #32]	; (800190c <HAL_TIM_Base_MspInit+0x108>)
 80018ec:	f043 0308 	orr.w	r3, r3, #8
 80018f0:	6593      	str	r3, [r2, #88]	; 0x58
 80018f2:	4b06      	ldr	r3, [pc, #24]	; (800190c <HAL_TIM_Base_MspInit+0x108>)
 80018f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f6:	f003 0308 	and.w	r3, r3, #8
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
}
 80018fe:	bf00      	nop
 8001900:	3720      	adds	r7, #32
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40012c00 	.word	0x40012c00
 800190c:	40021000 	.word	0x40021000
 8001910:	40000400 	.word	0x40000400
 8001914:	40000800 	.word	0x40000800
 8001918:	40000c00 	.word	0x40000c00

0800191c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08a      	sub	sp, #40	; 0x28
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800193c:	d11d      	bne.n	800197a <HAL_TIM_MspPostInit+0x5e>
>>>>>>> ModeSelect_v2
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
<<<<<<< HEAD
 8002916:	4b33      	ldr	r3, [pc, #204]	; (80029e4 <HAL_TIM_MspPostInit+0xf0>)
 8002918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800291a:	4a32      	ldr	r2, [pc, #200]	; (80029e4 <HAL_TIM_MspPostInit+0xf0>)
 800291c:	f043 0301 	orr.w	r3, r3, #1
 8002920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002922:	4b30      	ldr	r3, [pc, #192]	; (80029e4 <HAL_TIM_MspPostInit+0xf0>)
 8002924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	613b      	str	r3, [r7, #16]
 800292c:	693b      	ldr	r3, [r7, #16]
=======
 800193e:	4b33      	ldr	r3, [pc, #204]	; (8001a0c <HAL_TIM_MspPostInit+0xf0>)
 8001940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001942:	4a32      	ldr	r2, [pc, #200]	; (8001a0c <HAL_TIM_MspPostInit+0xf0>)
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	64d3      	str	r3, [r2, #76]	; 0x4c
 800194a:	4b30      	ldr	r3, [pc, #192]	; (8001a0c <HAL_TIM_MspPostInit+0xf0>)
 800194c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	613b      	str	r3, [r7, #16]
 8001954:	693b      	ldr	r3, [r7, #16]
>>>>>>> ModeSelect_v2
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
<<<<<<< HEAD
 800292e:	2301      	movs	r3, #1
 8002930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002932:	2302      	movs	r3, #2
 8002934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002936:	2300      	movs	r3, #0
 8002938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800293a:	2300      	movs	r3, #0
 800293c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800293e:	2301      	movs	r3, #1
 8002940:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002942:	f107 0314 	add.w	r3, r7, #20
 8002946:	4619      	mov	r1, r3
 8002948:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800294c:	f000 fb56 	bl	8002ffc <HAL_GPIO_Init>
=======
 8001956:	2301      	movs	r3, #1
 8001958:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195a:	2302      	movs	r3, #2
 800195c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001962:	2300      	movs	r3, #0
 8001964:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001966:	2301      	movs	r3, #1
 8001968:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196a:	f107 0314 	add.w	r3, r7, #20
 800196e:	4619      	mov	r1, r3
 8001970:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001974:	f000 fba0 	bl	80020b8 <HAL_GPIO_Init>
>>>>>>> ModeSelect_v2
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
<<<<<<< HEAD
 8002950:	e043      	b.n	80029da <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM3)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a24      	ldr	r2, [pc, #144]	; (80029e8 <HAL_TIM_MspPostInit+0xf4>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d11c      	bne.n	8002996 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800295c:	4b21      	ldr	r3, [pc, #132]	; (80029e4 <HAL_TIM_MspPostInit+0xf0>)
 800295e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002960:	4a20      	ldr	r2, [pc, #128]	; (80029e4 <HAL_TIM_MspPostInit+0xf0>)
 8002962:	f043 0310 	orr.w	r3, r3, #16
 8002966:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002968:	4b1e      	ldr	r3, [pc, #120]	; (80029e4 <HAL_TIM_MspPostInit+0xf0>)
 800296a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800296c:	f003 0310 	and.w	r3, r3, #16
 8002970:	60fb      	str	r3, [r7, #12]
 8002972:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002974:	2308      	movs	r3, #8
 8002976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002978:	2302      	movs	r3, #2
 800297a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297c:	2300      	movs	r3, #0
 800297e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002980:	2300      	movs	r3, #0
 8002982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002984:	2302      	movs	r3, #2
 8002986:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002988:	f107 0314 	add.w	r3, r7, #20
 800298c:	4619      	mov	r1, r3
 800298e:	4817      	ldr	r0, [pc, #92]	; (80029ec <HAL_TIM_MspPostInit+0xf8>)
 8002990:	f000 fb34 	bl	8002ffc <HAL_GPIO_Init>
}
 8002994:	e021      	b.n	80029da <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM4)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a15      	ldr	r2, [pc, #84]	; (80029f0 <HAL_TIM_MspPostInit+0xfc>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d11c      	bne.n	80029da <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029a0:	4b10      	ldr	r3, [pc, #64]	; (80029e4 <HAL_TIM_MspPostInit+0xf0>)
 80029a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a4:	4a0f      	ldr	r2, [pc, #60]	; (80029e4 <HAL_TIM_MspPostInit+0xf0>)
 80029a6:	f043 0308 	orr.w	r3, r3, #8
 80029aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029ac:	4b0d      	ldr	r3, [pc, #52]	; (80029e4 <HAL_TIM_MspPostInit+0xf0>)
 80029ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b0:	f003 0308 	and.w	r3, r3, #8
 80029b4:	60bb      	str	r3, [r7, #8]
 80029b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80029b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029be:	2302      	movs	r3, #2
 80029c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c2:	2300      	movs	r3, #0
 80029c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c6:	2300      	movs	r3, #0
 80029c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80029ca:	2302      	movs	r3, #2
 80029cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029ce:	f107 0314 	add.w	r3, r7, #20
 80029d2:	4619      	mov	r1, r3
 80029d4:	4807      	ldr	r0, [pc, #28]	; (80029f4 <HAL_TIM_MspPostInit+0x100>)
 80029d6:	f000 fb11 	bl	8002ffc <HAL_GPIO_Init>
}
 80029da:	bf00      	nop
 80029dc:	3728      	adds	r7, #40	; 0x28
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	40021000 	.word	0x40021000
 80029e8:	40000400 	.word	0x40000400
 80029ec:	48001000 	.word	0x48001000
 80029f0:	40000800 	.word	0x40000800
 80029f4:	48000c00 	.word	0x48000c00

080029f8 <NMI_Handler>:
=======
 8001978:	e043      	b.n	8001a02 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM3)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a24      	ldr	r2, [pc, #144]	; (8001a10 <HAL_TIM_MspPostInit+0xf4>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d11c      	bne.n	80019be <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001984:	4b21      	ldr	r3, [pc, #132]	; (8001a0c <HAL_TIM_MspPostInit+0xf0>)
 8001986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001988:	4a20      	ldr	r2, [pc, #128]	; (8001a0c <HAL_TIM_MspPostInit+0xf0>)
 800198a:	f043 0310 	orr.w	r3, r3, #16
 800198e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001990:	4b1e      	ldr	r3, [pc, #120]	; (8001a0c <HAL_TIM_MspPostInit+0xf0>)
 8001992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001994:	f003 0310 	and.w	r3, r3, #16
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800199c:	2308      	movs	r3, #8
 800199e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a0:	2302      	movs	r3, #2
 80019a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a8:	2300      	movs	r3, #0
 80019aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019ac:	2302      	movs	r3, #2
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019b0:	f107 0314 	add.w	r3, r7, #20
 80019b4:	4619      	mov	r1, r3
 80019b6:	4817      	ldr	r0, [pc, #92]	; (8001a14 <HAL_TIM_MspPostInit+0xf8>)
 80019b8:	f000 fb7e 	bl	80020b8 <HAL_GPIO_Init>
}
 80019bc:	e021      	b.n	8001a02 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM4)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a15      	ldr	r2, [pc, #84]	; (8001a18 <HAL_TIM_MspPostInit+0xfc>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d11c      	bne.n	8001a02 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019c8:	4b10      	ldr	r3, [pc, #64]	; (8001a0c <HAL_TIM_MspPostInit+0xf0>)
 80019ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019cc:	4a0f      	ldr	r2, [pc, #60]	; (8001a0c <HAL_TIM_MspPostInit+0xf0>)
 80019ce:	f043 0308 	orr.w	r3, r3, #8
 80019d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019d4:	4b0d      	ldr	r3, [pc, #52]	; (8001a0c <HAL_TIM_MspPostInit+0xf0>)
 80019d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d8:	f003 0308 	and.w	r3, r3, #8
 80019dc:	60bb      	str	r3, [r7, #8]
 80019de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80019e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e6:	2302      	movs	r3, #2
 80019e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ee:	2300      	movs	r3, #0
 80019f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80019f2:	2302      	movs	r3, #2
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019f6:	f107 0314 	add.w	r3, r7, #20
 80019fa:	4619      	mov	r1, r3
 80019fc:	4807      	ldr	r0, [pc, #28]	; (8001a1c <HAL_TIM_MspPostInit+0x100>)
 80019fe:	f000 fb5b 	bl	80020b8 <HAL_GPIO_Init>
}
 8001a02:	bf00      	nop
 8001a04:	3728      	adds	r7, #40	; 0x28
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	40000400 	.word	0x40000400
 8001a14:	48001000 	.word	0x48001000
 8001a18:	40000800 	.word	0x40000800
 8001a1c:	48000c00 	.word	0x48000c00

08001a20 <NMI_Handler>:
>>>>>>> ModeSelect_v2
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
=======
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
>>>>>>> ModeSelect_v2
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
<<<<<<< HEAD
 80029fc:	e7fe      	b.n	80029fc <NMI_Handler+0x4>

080029fe <HardFault_Handler>:
=======
 8001a24:	e7fe      	b.n	8001a24 <NMI_Handler+0x4>

08001a26 <HardFault_Handler>:
>>>>>>> ModeSelect_v2

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 80029fe:	b480      	push	{r7}
 8002a00:	af00      	add	r7, sp, #0
=======
 8001a26:	b480      	push	{r7}
 8001a28:	af00      	add	r7, sp, #0
>>>>>>> ModeSelect_v2
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8002a02:	e7fe      	b.n	8002a02 <HardFault_Handler+0x4>

08002a04 <MemManage_Handler>:
=======
 8001a2a:	e7fe      	b.n	8001a2a <HardFault_Handler+0x4>

08001a2c <MemManage_Handler>:
>>>>>>> ModeSelect_v2

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
=======
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
>>>>>>> ModeSelect_v2
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8002a08:	e7fe      	b.n	8002a08 <MemManage_Handler+0x4>

08002a0a <BusFault_Handler>:
=======
 8001a30:	e7fe      	b.n	8001a30 <MemManage_Handler+0x4>

08001a32 <BusFault_Handler>:
>>>>>>> ModeSelect_v2

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
 8002a0a:	b480      	push	{r7}
 8002a0c:	af00      	add	r7, sp, #0
=======
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0
>>>>>>> ModeSelect_v2
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8002a0e:	e7fe      	b.n	8002a0e <BusFault_Handler+0x4>

08002a10 <UsageFault_Handler>:
=======
 8001a36:	e7fe      	b.n	8001a36 <BusFault_Handler+0x4>

08001a38 <UsageFault_Handler>:
>>>>>>> ModeSelect_v2

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
=======
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
>>>>>>> ModeSelect_v2
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8002a14:	e7fe      	b.n	8002a14 <UsageFault_Handler+0x4>

08002a16 <SVC_Handler>:
=======
 8001a3c:	e7fe      	b.n	8001a3c <UsageFault_Handler+0x4>

08001a3e <SVC_Handler>:
>>>>>>> ModeSelect_v2

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< HEAD
 8002a16:	b480      	push	{r7}
 8002a18:	af00      	add	r7, sp, #0
=======
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0
>>>>>>> ModeSelect_v2

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< HEAD
 8002a1a:	bf00      	nop
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <DebugMon_Handler>:
=======
 8001a42:	bf00      	nop
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <DebugMon_Handler>:
>>>>>>> ModeSelect_v2

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
=======
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
>>>>>>> ModeSelect_v2

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 8002a28:	bf00      	nop
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr

08002a32 <PendSV_Handler>:
=======
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <PendSV_Handler>:
>>>>>>> ModeSelect_v2

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< HEAD
 8002a32:	b480      	push	{r7}
 8002a34:	af00      	add	r7, sp, #0
=======
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0
>>>>>>> ModeSelect_v2

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< HEAD
 8002a36:	bf00      	nop
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <SysTick_Handler>:
=======
 8001a5e:	bf00      	nop
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <SysTick_Handler>:
>>>>>>> ModeSelect_v2

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< HEAD
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
=======
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
>>>>>>> ModeSelect_v2
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< HEAD
 8002a44:	f000 f8ca 	bl	8002bdc <HAL_IncTick>
=======
 8001a6c:	f000 f914 	bl	8001c98 <HAL_IncTick>
>>>>>>> ModeSelect_v2
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< HEAD
 8002a48:	bf00      	nop
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <TIM2_IRQHandler>:
=======
 8001a70:	bf00      	nop
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(modeStandby_Pin);
 8001a78:	2008      	movs	r0, #8
 8001a7a:	f000 fcc7 	bl	800240c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(modeZero_Pin);
 8001a86:	2010      	movs	r0, #16
 8001a88:	f000 fcc0 	bl	800240c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001a8c:	bf00      	nop
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(modeTattoo_Pin);
 8001a94:	2020      	movs	r0, #32
 8001a96:	f000 fcb9 	bl	800240c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(modeScan_Pin);
 8001a9a:	2040      	movs	r0, #64	; 0x40
 8001a9c:	f000 fcb6 	bl	800240c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001aa0:	bf00      	nop
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001aa8:	4802      	ldr	r0, [pc, #8]	; (8001ab4 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8001aaa:	f003 fa97 	bl	8004fdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	200003d0 	.word	0x200003d0

08001ab8 <TIM2_IRQHandler>:
>>>>>>> ModeSelect_v2

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
<<<<<<< HEAD
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
=======
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
>>>>>>> ModeSelect_v2
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
<<<<<<< HEAD
 8002a50:	4802      	ldr	r0, [pc, #8]	; (8002a5c <TIM2_IRQHandler+0x10>)
 8002a52:	f003 fa7d 	bl	8005f50 <HAL_TIM_IRQHandler>
=======
 8001abc:	4802      	ldr	r0, [pc, #8]	; (8001ac8 <TIM2_IRQHandler+0x10>)
 8001abe:	f003 fa8d 	bl	8004fdc <HAL_TIM_IRQHandler>
>>>>>>> ModeSelect_v2
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
<<<<<<< HEAD
 8002a56:	bf00      	nop
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	200003d0 	.word	0x200003d0

08002a60 <TIM3_IRQHandler>:
=======
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	2000041c 	.word	0x2000041c

08001acc <TIM3_IRQHandler>:
>>>>>>> ModeSelect_v2

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
<<<<<<< HEAD
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
=======
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
>>>>>>> ModeSelect_v2
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
<<<<<<< HEAD
 8002a64:	4802      	ldr	r0, [pc, #8]	; (8002a70 <TIM3_IRQHandler+0x10>)
 8002a66:	f003 fa73 	bl	8005f50 <HAL_TIM_IRQHandler>
=======
 8001ad0:	4802      	ldr	r0, [pc, #8]	; (8001adc <TIM3_IRQHandler+0x10>)
 8001ad2:	f003 fa83 	bl	8004fdc <HAL_TIM_IRQHandler>
>>>>>>> ModeSelect_v2
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
<<<<<<< HEAD
 8002a6a:	bf00      	nop
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	2000041c 	.word	0x2000041c

08002a74 <TIM4_IRQHandler>:
=======
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000468 	.word	0x20000468

08001ae0 <TIM4_IRQHandler>:
>>>>>>> ModeSelect_v2

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
<<<<<<< HEAD
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
=======
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
>>>>>>> ModeSelect_v2
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
<<<<<<< HEAD
 8002a78:	4802      	ldr	r0, [pc, #8]	; (8002a84 <TIM4_IRQHandler+0x10>)
 8002a7a:	f003 fa69 	bl	8005f50 <HAL_TIM_IRQHandler>
=======
 8001ae4:	4802      	ldr	r0, [pc, #8]	; (8001af0 <TIM4_IRQHandler+0x10>)
 8001ae6:	f003 fa79 	bl	8004fdc <HAL_TIM_IRQHandler>
>>>>>>> ModeSelect_v2
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
<<<<<<< HEAD
 8002a7e:	bf00      	nop
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	20000468 	.word	0x20000468

08002a88 <EXTI15_10_IRQHandler>:
=======
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	200004b4 	.word	0x200004b4

08001af4 <EXTI15_10_IRQHandler>:
>>>>>>> ModeSelect_v2

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
<<<<<<< HEAD
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
=======
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
>>>>>>> ModeSelect_v2
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(thLim_Pin);
<<<<<<< HEAD
 8002a8c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002a90:	f000 fc76 	bl	8003380 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(yLim_Pin);
 8002a94:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002a98:	f000 fc72 	bl	8003380 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(rLim_Pin);
 8002a9c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002aa0:	f000 fc6e 	bl	8003380 <HAL_GPIO_EXTI_IRQHandler>
=======
 8001af8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001afc:	f000 fc86 	bl	800240c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(yLim_Pin);
 8001b00:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001b04:	f000 fc82 	bl	800240c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(rLim_Pin);
 8001b08:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001b0c:	f000 fc7e 	bl	800240c <HAL_GPIO_EXTI_IRQHandler>
>>>>>>> ModeSelect_v2
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
<<<<<<< HEAD
 8002aa4:	bf00      	nop
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <LPUART1_IRQHandler>:
=======
 8001b10:	bf00      	nop
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <LPUART1_IRQHandler>:
>>>>>>> ModeSelect_v2

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
<<<<<<< HEAD
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
=======
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
>>>>>>> ModeSelect_v2
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
<<<<<<< HEAD
 8002aac:	4802      	ldr	r0, [pc, #8]	; (8002ab8 <LPUART1_IRQHandler+0x10>)
 8002aae:	f004 fb87 	bl	80071c0 <HAL_UART_IRQHandler>
=======
 8001b18:	4802      	ldr	r0, [pc, #8]	; (8001b24 <LPUART1_IRQHandler+0x10>)
 8001b1a:	f004 fb01 	bl	8006120 <HAL_UART_IRQHandler>
>>>>>>> ModeSelect_v2
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
<<<<<<< HEAD
 8002ab2:	bf00      	nop
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	20000340 	.word	0x20000340

08002abc <SystemInit>:
=======
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000340 	.word	0x20000340

08001b28 <SystemInit>:
>>>>>>> ModeSelect_v2
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
<<<<<<< HEAD
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
=======
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
>>>>>>> ModeSelect_v2
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
<<<<<<< HEAD
 8002ac0:	4b06      	ldr	r3, [pc, #24]	; (8002adc <SystemInit+0x20>)
 8002ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac6:	4a05      	ldr	r2, [pc, #20]	; (8002adc <SystemInit+0x20>)
 8002ac8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002acc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002ad0:	bf00      	nop
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	e000ed00 	.word	0xe000ed00

08002ae0 <Reset_Handler>:
=======
 8001b2c:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <SystemInit+0x20>)
 8001b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b32:	4a05      	ldr	r2, [pc, #20]	; (8001b48 <SystemInit+0x20>)
 8001b34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <GoHome>:
 *      Author: kylei
 */

#include "zeroing.h"

void GoHome(stepper* motor){
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af02      	add	r7, sp, #8
 8001b52:	6078      	str	r0, [r7, #4]
	//stop any current motion
	stopStepper(motor);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f7ff fd32 	bl	80015be <stopStepper>
	//make stepper think its far from zero
	motor->CurrentPosition = 0xFFFF;
 8001b5a:	6879      	ldr	r1, [r7, #4]
 8001b5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b60:	f04f 0300 	mov.w	r3, #0
 8001b64:	e9c1 2308 	strd	r2, r3, [r1, #32]
	motor->TargetPosition = 0xFFFF;
 8001b68:	6879      	ldr	r1, [r7, #4]
 8001b6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b6e:	f04f 0300 	mov.w	r3, #0
 8001b72:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	/*make motor go backward "forever"
	Note: make sure there is some mechanism in main()
	to stop otherwise this will go until it breaks something*/
	setSpeed(motor,motor->PPS_ZeroDefault);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f7ff fcc7 	bl	8001510 <setSpeed>
	setTarget(motor, 0xFFFE,0);
 8001b82:	2300      	movs	r3, #0
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001b8a:	f04f 0300 	mov.w	r3, #0
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff fc78 	bl	8001484 <setTarget>
}
 8001b94:	bf00      	nop
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <Reset_Handler>:
>>>>>>> ModeSelect_v2
    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

  ldr   sp, =_estack    /* Set stack pointer */
<<<<<<< HEAD
 8002ae0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b18 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ae4:	f7ff ffea 	bl	8002abc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ae8:	480c      	ldr	r0, [pc, #48]	; (8002b1c <LoopForever+0x6>)
  ldr r1, =_edata
 8002aea:	490d      	ldr	r1, [pc, #52]	; (8002b20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002aec:	4a0d      	ldr	r2, [pc, #52]	; (8002b24 <LoopForever+0xe>)
  movs r3, #0
 8002aee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002af0:	e002      	b.n	8002af8 <LoopCopyDataInit>

08002af2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002af2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002af4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002af6:	3304      	adds	r3, #4

08002af8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002af8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002afa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002afc:	d3f9      	bcc.n	8002af2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002afe:	4a0a      	ldr	r2, [pc, #40]	; (8002b28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b00:	4c0a      	ldr	r4, [pc, #40]	; (8002b2c <LoopForever+0x16>)
  movs r3, #0
 8002b02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b04:	e001      	b.n	8002b0a <LoopFillZerobss>

08002b06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b08:	3204      	adds	r2, #4

08002b0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b0c:	d3fb      	bcc.n	8002b06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b0e:	f00b fa8f 	bl	800e030 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b12:	f7fe faf1 	bl	80010f8 <main>

08002b16 <LoopForever>:

LoopForever:
    b LoopForever
 8002b16:	e7fe      	b.n	8002b16 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002b18:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002b1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b20:	200002cc 	.word	0x200002cc
  ldr r2, =_sidata
 8002b24:	0800e14c 	.word	0x0800e14c
  ldr r2, =_sbss
 8002b28:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 8002b2c:	20000850 	.word	0x20000850

08002b30 <ADC1_2_IRQHandler>:
=======
 8001b9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bd4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ba0:	f7ff ffc2 	bl	8001b28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ba4:	480c      	ldr	r0, [pc, #48]	; (8001bd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ba6:	490d      	ldr	r1, [pc, #52]	; (8001bdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ba8:	4a0d      	ldr	r2, [pc, #52]	; (8001be0 <LoopForever+0xe>)
  movs r3, #0
 8001baa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bac:	e002      	b.n	8001bb4 <LoopCopyDataInit>

08001bae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bb2:	3304      	adds	r3, #4

08001bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bb8:	d3f9      	bcc.n	8001bae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bba:	4a0a      	ldr	r2, [pc, #40]	; (8001be4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bbc:	4c0a      	ldr	r4, [pc, #40]	; (8001be8 <LoopForever+0x16>)
  movs r3, #0
 8001bbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bc0:	e001      	b.n	8001bc6 <LoopFillZerobss>

08001bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bc4:	3204      	adds	r2, #4

08001bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bc8:	d3fb      	bcc.n	8001bc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bca:	f00b f9e1 	bl	800cf90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bce:	f7fe fd5d 	bl	800068c <main>

08001bd2 <LoopForever>:

LoopForever:
    b LoopForever
 8001bd2:	e7fe      	b.n	8001bd2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001bd4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001bd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bdc:	200002cc 	.word	0x200002cc
  ldr r2, =_sidata
 8001be0:	0800d0ac 	.word	0x0800d0ac
  ldr r2, =_sbss
 8001be4:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 8001be8:	200007ec 	.word	0x200007ec

08001bec <ADC1_2_IRQHandler>:
>>>>>>> ModeSelect_v2
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
<<<<<<< HEAD
 8002b30:	e7fe      	b.n	8002b30 <ADC1_2_IRQHandler>

08002b32 <HAL_Init>:
=======
 8001bec:	e7fe      	b.n	8001bec <ADC1_2_IRQHandler>

08001bee <HAL_Init>:
>>>>>>> ModeSelect_v2
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b082      	sub	sp, #8
 8002b36:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	71fb      	strb	r3, [r7, #7]
=======
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b082      	sub	sp, #8
 8001bf2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	71fb      	strb	r3, [r7, #7]
>>>>>>> ModeSelect_v2
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 8002b3c:	2003      	movs	r0, #3
 8002b3e:	f000 f961 	bl	8002e04 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b42:	200f      	movs	r0, #15
 8002b44:	f000 f80e 	bl	8002b64 <HAL_InitTick>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d002      	beq.n	8002b54 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	71fb      	strb	r3, [r7, #7]
 8002b52:	e001      	b.n	8002b58 <HAL_Init+0x26>
=======
 8001bf8:	2003      	movs	r0, #3
 8001bfa:	f000 f961 	bl	8001ec0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bfe:	200f      	movs	r0, #15
 8001c00:	f000 f80e 	bl	8001c20 <HAL_InitTick>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d002      	beq.n	8001c10 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	71fb      	strb	r3, [r7, #7]
 8001c0e:	e001      	b.n	8001c14 <HAL_Init+0x26>
>>>>>>> ModeSelect_v2
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
<<<<<<< HEAD
 8002b54:	f7ff fd74 	bl	8002640 <HAL_MspInit>
=======
 8001c10:	f7ff fd0e 	bl	8001630 <HAL_MspInit>
>>>>>>> ModeSelect_v2
  }

  /* Return function status */
  return status;
<<<<<<< HEAD
 8002b58:	79fb      	ldrb	r3, [r7, #7]
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3708      	adds	r7, #8
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
	...

08002b64 <HAL_InitTick>:
=======
 8001c14:	79fb      	ldrb	r3, [r7, #7]
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
	...

08001c20 <HAL_InitTick>:
>>>>>>> ModeSelect_v2
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002b70:	4b17      	ldr	r3, [pc, #92]	; (8002bd0 <HAL_InitTick+0x6c>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d023      	beq.n	8002bc0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002b78:	4b16      	ldr	r3, [pc, #88]	; (8002bd4 <HAL_InitTick+0x70>)
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	4b14      	ldr	r3, [pc, #80]	; (8002bd0 <HAL_InitTick+0x6c>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	4619      	mov	r1, r3
 8002b82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b86:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f000 f96d 	bl	8002e6e <HAL_SYSTICK_Config>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10f      	bne.n	8002bba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2b0f      	cmp	r3, #15
 8002b9e:	d809      	bhi.n	8002bb4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ba8:	f000 f937 	bl	8002e1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002bac:	4a0a      	ldr	r2, [pc, #40]	; (8002bd8 <HAL_InitTick+0x74>)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6013      	str	r3, [r2, #0]
 8002bb2:	e007      	b.n	8002bc4 <HAL_InitTick+0x60>
=======
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c2c:	4b17      	ldr	r3, [pc, #92]	; (8001c8c <HAL_InitTick+0x6c>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d023      	beq.n	8001c7c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c34:	4b16      	ldr	r3, [pc, #88]	; (8001c90 <HAL_InitTick+0x70>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4b14      	ldr	r3, [pc, #80]	; (8001c8c <HAL_InitTick+0x6c>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f000 f96d 	bl	8001f2a <HAL_SYSTICK_Config>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d10f      	bne.n	8001c76 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b0f      	cmp	r3, #15
 8001c5a:	d809      	bhi.n	8001c70 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	6879      	ldr	r1, [r7, #4]
 8001c60:	f04f 30ff 	mov.w	r0, #4294967295
 8001c64:	f000 f937 	bl	8001ed6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c68:	4a0a      	ldr	r2, [pc, #40]	; (8001c94 <HAL_InitTick+0x74>)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	e007      	b.n	8001c80 <HAL_InitTick+0x60>
>>>>>>> ModeSelect_v2
      }
      else
      {
        status = HAL_ERROR;
<<<<<<< HEAD
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	73fb      	strb	r3, [r7, #15]
 8002bb8:	e004      	b.n	8002bc4 <HAL_InitTick+0x60>
=======
 8001c70:	2301      	movs	r3, #1
 8001c72:	73fb      	strb	r3, [r7, #15]
 8001c74:	e004      	b.n	8001c80 <HAL_InitTick+0x60>
>>>>>>> ModeSelect_v2
      }
    }
    else
    {
      status = HAL_ERROR;
<<<<<<< HEAD
 8002bba:	2301      	movs	r3, #1
 8002bbc:	73fb      	strb	r3, [r7, #15]
 8002bbe:	e001      	b.n	8002bc4 <HAL_InitTick+0x60>
=======
 8001c76:	2301      	movs	r3, #1
 8001c78:	73fb      	strb	r3, [r7, #15]
 8001c7a:	e001      	b.n	8001c80 <HAL_InitTick+0x60>
>>>>>>> ModeSelect_v2
    }
  }
  else
  {
    status = HAL_ERROR;
<<<<<<< HEAD
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	73fb      	strb	r3, [r7, #15]
=======
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	73fb      	strb	r3, [r7, #15]
>>>>>>> ModeSelect_v2
  }

  /* Return function status */
  return status;
<<<<<<< HEAD
 8002bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	2000000c 	.word	0x2000000c
 8002bd4:	20000004 	.word	0x20000004
 8002bd8:	20000008 	.word	0x20000008

08002bdc <HAL_IncTick>:
=======
 8001c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	2000000c 	.word	0x2000000c
 8001c90:	20000004 	.word	0x20000004
 8001c94:	20000008 	.word	0x20000008

08001c98 <HAL_IncTick>:
>>>>>>> ModeSelect_v2
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002be0:	4b06      	ldr	r3, [pc, #24]	; (8002bfc <HAL_IncTick+0x20>)
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	461a      	mov	r2, r3
 8002be6:	4b06      	ldr	r3, [pc, #24]	; (8002c00 <HAL_IncTick+0x24>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4413      	add	r3, r2
 8002bec:	4a04      	ldr	r2, [pc, #16]	; (8002c00 <HAL_IncTick+0x24>)
 8002bee:	6013      	str	r3, [r2, #0]
}
 8002bf0:	bf00      	nop
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	2000000c 	.word	0x2000000c
 8002c00:	2000080c 	.word	0x2000080c

08002c04 <HAL_GetTick>:
=======
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c9c:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <HAL_IncTick+0x20>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <HAL_IncTick+0x24>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	4a04      	ldr	r2, [pc, #16]	; (8001cbc <HAL_IncTick+0x24>)
 8001caa:	6013      	str	r3, [r2, #0]
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	2000000c 	.word	0x2000000c
 8001cbc:	200007a8 	.word	0x200007a8

08001cc0 <HAL_GetTick>:
>>>>>>> ModeSelect_v2
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  return uwTick;
 8002c08:	4b03      	ldr	r3, [pc, #12]	; (8002c18 <HAL_GetTick+0x14>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	2000080c 	.word	0x2000080c

08002c1c <HAL_Delay>:
=======
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc4:	4b03      	ldr	r3, [pc, #12]	; (8001cd4 <HAL_GetTick+0x14>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	200007a8 	.word	0x200007a8

08001cd8 <HAL_Delay>:
>>>>>>> ModeSelect_v2
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
<<<<<<< HEAD
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c24:	f7ff ffee 	bl	8002c04 <HAL_GetTick>
 8002c28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c34:	d005      	beq.n	8002c42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002c36:	4b0a      	ldr	r3, [pc, #40]	; (8002c60 <HAL_Delay+0x44>)
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	4413      	add	r3, r2
 8002c40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c42:	bf00      	nop
 8002c44:	f7ff ffde 	bl	8002c04 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d8f7      	bhi.n	8002c44 <HAL_Delay+0x28>
  {
  }
}
 8002c54:	bf00      	nop
 8002c56:	bf00      	nop
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	2000000c 	.word	0x2000000c

08002c64 <__NVIC_SetPriorityGrouping>:
=======
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ce0:	f7ff ffee 	bl	8001cc0 <HAL_GetTick>
 8001ce4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf0:	d005      	beq.n	8001cfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001cf2:	4b0a      	ldr	r3, [pc, #40]	; (8001d1c <HAL_Delay+0x44>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cfe:	bf00      	nop
 8001d00:	f7ff ffde 	bl	8001cc0 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d8f7      	bhi.n	8001d00 <HAL_Delay+0x28>
  {
  }
}
 8001d10:	bf00      	nop
 8001d12:	bf00      	nop
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	2000000c 	.word	0x2000000c

08001d20 <__NVIC_SetPriorityGrouping>:
>>>>>>> ModeSelect_v2
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f003 0307 	and.w	r3, r3, #7
 8002c72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c74:	4b0c      	ldr	r3, [pc, #48]	; (8002ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c80:	4013      	ands	r3, r2
 8002c82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c96:	4a04      	ldr	r2, [pc, #16]	; (8002ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	60d3      	str	r3, [r2, #12]
}
 8002c9c:	bf00      	nop
 8002c9e:	3714      	adds	r7, #20
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr
 8002ca8:	e000ed00 	.word	0xe000ed00

08002cac <__NVIC_GetPriorityGrouping>:
=======
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d30:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <__NVIC_SetPriorityGrouping+0x44>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d36:	68ba      	ldr	r2, [r7, #8]
 8001d38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d52:	4a04      	ldr	r2, [pc, #16]	; (8001d64 <__NVIC_SetPriorityGrouping+0x44>)
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	60d3      	str	r3, [r2, #12]
}
 8001d58:	bf00      	nop
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <__NVIC_GetPriorityGrouping>:
>>>>>>> ModeSelect_v2
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cb0:	4b04      	ldr	r3, [pc, #16]	; (8002cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	0a1b      	lsrs	r3, r3, #8
 8002cb6:	f003 0307 	and.w	r3, r3, #7
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr
 8002cc4:	e000ed00 	.word	0xe000ed00

08002cc8 <__NVIC_EnableIRQ>:
=======
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d6c:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <__NVIC_GetPriorityGrouping+0x18>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	0a1b      	lsrs	r3, r3, #8
 8001d72:	f003 0307 	and.w	r3, r3, #7
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <__NVIC_EnableIRQ>:
>>>>>>> ModeSelect_v2
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	4603      	mov	r3, r0
 8002cd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	db0b      	blt.n	8002cf2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cda:	79fb      	ldrb	r3, [r7, #7]
 8002cdc:	f003 021f 	and.w	r2, r3, #31
 8002ce0:	4907      	ldr	r1, [pc, #28]	; (8002d00 <__NVIC_EnableIRQ+0x38>)
 8002ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce6:	095b      	lsrs	r3, r3, #5
 8002ce8:	2001      	movs	r0, #1
 8002cea:	fa00 f202 	lsl.w	r2, r0, r2
 8002cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cf2:	bf00      	nop
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	e000e100 	.word	0xe000e100

08002d04 <__NVIC_SetPriority>:
=======
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	db0b      	blt.n	8001dae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d96:	79fb      	ldrb	r3, [r7, #7]
 8001d98:	f003 021f 	and.w	r2, r3, #31
 8001d9c:	4907      	ldr	r1, [pc, #28]	; (8001dbc <__NVIC_EnableIRQ+0x38>)
 8001d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da2:	095b      	lsrs	r3, r3, #5
 8001da4:	2001      	movs	r0, #1
 8001da6:	fa00 f202 	lsl.w	r2, r0, r2
 8001daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	e000e100 	.word	0xe000e100

08001dc0 <__NVIC_SetPriority>:
>>>>>>> ModeSelect_v2
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	6039      	str	r1, [r7, #0]
 8002d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	db0a      	blt.n	8002d2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	490c      	ldr	r1, [pc, #48]	; (8002d50 <__NVIC_SetPriority+0x4c>)
 8002d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d22:	0112      	lsls	r2, r2, #4
 8002d24:	b2d2      	uxtb	r2, r2
 8002d26:	440b      	add	r3, r1
 8002d28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	6039      	str	r1, [r7, #0]
 8001dca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	db0a      	blt.n	8001dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	b2da      	uxtb	r2, r3
 8001dd8:	490c      	ldr	r1, [pc, #48]	; (8001e0c <__NVIC_SetPriority+0x4c>)
 8001dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dde:	0112      	lsls	r2, r2, #4
 8001de0:	b2d2      	uxtb	r2, r2
 8001de2:	440b      	add	r3, r1
 8001de4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> ModeSelect_v2
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 8002d2c:	e00a      	b.n	8002d44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	b2da      	uxtb	r2, r3
 8002d32:	4908      	ldr	r1, [pc, #32]	; (8002d54 <__NVIC_SetPriority+0x50>)
 8002d34:	79fb      	ldrb	r3, [r7, #7]
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	3b04      	subs	r3, #4
 8002d3c:	0112      	lsls	r2, r2, #4
 8002d3e:	b2d2      	uxtb	r2, r2
 8002d40:	440b      	add	r3, r1
 8002d42:	761a      	strb	r2, [r3, #24]
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	e000e100 	.word	0xe000e100
 8002d54:	e000ed00 	.word	0xe000ed00

08002d58 <NVIC_EncodePriority>:
=======
 8001de8:	e00a      	b.n	8001e00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	4908      	ldr	r1, [pc, #32]	; (8001e10 <__NVIC_SetPriority+0x50>)
 8001df0:	79fb      	ldrb	r3, [r7, #7]
 8001df2:	f003 030f 	and.w	r3, r3, #15
 8001df6:	3b04      	subs	r3, #4
 8001df8:	0112      	lsls	r2, r2, #4
 8001dfa:	b2d2      	uxtb	r2, r2
 8001dfc:	440b      	add	r3, r1
 8001dfe:	761a      	strb	r2, [r3, #24]
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	e000e100 	.word	0xe000e100
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <NVIC_EncodePriority>:
>>>>>>> ModeSelect_v2
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 8002d58:	b480      	push	{r7}
 8002d5a:	b089      	sub	sp, #36	; 0x24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f003 0307 	and.w	r3, r3, #7
 8002d6a:	61fb      	str	r3, [r7, #28]
=======
 8001e14:	b480      	push	{r7}
 8001e16:	b089      	sub	sp, #36	; 0x24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	61fb      	str	r3, [r7, #28]
>>>>>>> ModeSelect_v2
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	f1c3 0307 	rsb	r3, r3, #7
 8002d72:	2b04      	cmp	r3, #4
 8002d74:	bf28      	it	cs
 8002d76:	2304      	movcs	r3, #4
 8002d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	3304      	adds	r3, #4
 8002d7e:	2b06      	cmp	r3, #6
 8002d80:	d902      	bls.n	8002d88 <NVIC_EncodePriority+0x30>
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	3b03      	subs	r3, #3
 8002d86:	e000      	b.n	8002d8a <NVIC_EncodePriority+0x32>
 8002d88:	2300      	movs	r3, #0
 8002d8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	fa02 f303 	lsl.w	r3, r2, r3
 8002d96:	43da      	mvns	r2, r3
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	401a      	ands	r2, r3
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002da0:	f04f 31ff 	mov.w	r1, #4294967295
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	fa01 f303 	lsl.w	r3, r1, r3
 8002daa:	43d9      	mvns	r1, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db0:	4313      	orrs	r3, r2
         );
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3724      	adds	r7, #36	; 0x24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
	...

08002dc0 <SysTick_Config>:
=======
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	f1c3 0307 	rsb	r3, r3, #7
 8001e2e:	2b04      	cmp	r3, #4
 8001e30:	bf28      	it	cs
 8001e32:	2304      	movcs	r3, #4
 8001e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	3304      	adds	r3, #4
 8001e3a:	2b06      	cmp	r3, #6
 8001e3c:	d902      	bls.n	8001e44 <NVIC_EncodePriority+0x30>
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	3b03      	subs	r3, #3
 8001e42:	e000      	b.n	8001e46 <NVIC_EncodePriority+0x32>
 8001e44:	2300      	movs	r3, #0
 8001e46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e48:	f04f 32ff 	mov.w	r2, #4294967295
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43da      	mvns	r2, r3
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	401a      	ands	r2, r3
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	fa01 f303 	lsl.w	r3, r1, r3
 8001e66:	43d9      	mvns	r1, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e6c:	4313      	orrs	r3, r2
         );
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3724      	adds	r7, #36	; 0x24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
	...

08001e7c <SysTick_Config>:
>>>>>>> ModeSelect_v2
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< HEAD
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dd0:	d301      	bcc.n	8002dd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e00f      	b.n	8002df6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dd6:	4a0a      	ldr	r2, [pc, #40]	; (8002e00 <SysTick_Config+0x40>)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dde:	210f      	movs	r1, #15
 8002de0:	f04f 30ff 	mov.w	r0, #4294967295
 8002de4:	f7ff ff8e 	bl	8002d04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002de8:	4b05      	ldr	r3, [pc, #20]	; (8002e00 <SysTick_Config+0x40>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dee:	4b04      	ldr	r3, [pc, #16]	; (8002e00 <SysTick_Config+0x40>)
 8002df0:	2207      	movs	r2, #7
 8002df2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	e000e010 	.word	0xe000e010

08002e04 <HAL_NVIC_SetPriorityGrouping>:
=======
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e8c:	d301      	bcc.n	8001e92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e00f      	b.n	8001eb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e92:	4a0a      	ldr	r2, [pc, #40]	; (8001ebc <SysTick_Config+0x40>)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3b01      	subs	r3, #1
 8001e98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e9a:	210f      	movs	r1, #15
 8001e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea0:	f7ff ff8e 	bl	8001dc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ea4:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <SysTick_Config+0x40>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eaa:	4b04      	ldr	r3, [pc, #16]	; (8001ebc <SysTick_Config+0x40>)
 8001eac:	2207      	movs	r2, #7
 8001eae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	e000e010 	.word	0xe000e010

08001ec0 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> ModeSelect_v2
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
=======
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
>>>>>>> ModeSelect_v2
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f7ff ff29 	bl	8002c64 <__NVIC_SetPriorityGrouping>
}
 8002e12:	bf00      	nop
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <HAL_NVIC_SetPriority>:
=======
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f7ff ff29 	bl	8001d20 <__NVIC_SetPriorityGrouping>
}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_NVIC_SetPriority>:
>>>>>>> ModeSelect_v2
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b086      	sub	sp, #24
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	4603      	mov	r3, r0
 8002e22:	60b9      	str	r1, [r7, #8]
 8002e24:	607a      	str	r2, [r7, #4]
 8002e26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	617b      	str	r3, [r7, #20]
=======
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b086      	sub	sp, #24
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	4603      	mov	r3, r0
 8001ede:	60b9      	str	r1, [r7, #8]
 8001ee0:	607a      	str	r2, [r7, #4]
 8001ee2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	617b      	str	r3, [r7, #20]
>>>>>>> ModeSelect_v2

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 8002e2c:	f7ff ff3e 	bl	8002cac <__NVIC_GetPriorityGrouping>
 8002e30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	68b9      	ldr	r1, [r7, #8]
 8002e36:	6978      	ldr	r0, [r7, #20]
 8002e38:	f7ff ff8e 	bl	8002d58 <NVIC_EncodePriority>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e42:	4611      	mov	r1, r2
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7ff ff5d 	bl	8002d04 <__NVIC_SetPriority>
}
 8002e4a:	bf00      	nop
 8002e4c:	3718      	adds	r7, #24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HAL_NVIC_EnableIRQ>:
=======
 8001ee8:	f7ff ff3e 	bl	8001d68 <__NVIC_GetPriorityGrouping>
 8001eec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	68b9      	ldr	r1, [r7, #8]
 8001ef2:	6978      	ldr	r0, [r7, #20]
 8001ef4:	f7ff ff8e 	bl	8001e14 <NVIC_EncodePriority>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001efe:	4611      	mov	r1, r2
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff ff5d 	bl	8001dc0 <__NVIC_SetPriority>
}
 8001f06:	bf00      	nop
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_NVIC_EnableIRQ>:
>>>>>>> ModeSelect_v2
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b082      	sub	sp, #8
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	4603      	mov	r3, r0
 8002e5a:	71fb      	strb	r3, [r7, #7]
=======
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	4603      	mov	r3, r0
 8001f16:	71fb      	strb	r3, [r7, #7]
>>>>>>> ModeSelect_v2
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< HEAD
 8002e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff ff31 	bl	8002cc8 <__NVIC_EnableIRQ>
}
 8002e66:	bf00      	nop
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <HAL_SYSTICK_Config>:
=======
 8001f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff ff31 	bl	8001d84 <__NVIC_EnableIRQ>
}
 8001f22:	bf00      	nop
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_SYSTICK_Config>:
>>>>>>> ModeSelect_v2
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< HEAD
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b082      	sub	sp, #8
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f7ff ffa2 	bl	8002dc0 <SysTick_Config>
 8002e7c:	4603      	mov	r3, r0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3708      	adds	r7, #8
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <HAL_DMA_Abort>:
=======
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b082      	sub	sp, #8
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7ff ffa2 	bl	8001e7c <SysTick_Config>
 8001f38:	4603      	mov	r3, r0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_DMA_Abort>:
>>>>>>> ModeSelect_v2
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8002e86:	b480      	push	{r7}
 8002e88:	b085      	sub	sp, #20
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d008      	beq.n	8002eb0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2204      	movs	r2, #4
 8002ea2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e040      	b.n	8002f32 <HAL_DMA_Abort+0xac>
=======
 8001f42:	b480      	push	{r7}
 8001f44:	b085      	sub	sp, #20
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d008      	beq.n	8001f6c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2204      	movs	r2, #4
 8001f5e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e040      	b.n	8001fee <HAL_DMA_Abort+0xac>
>>>>>>> ModeSelect_v2
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
<<<<<<< HEAD
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f022 020e 	bic.w	r2, r2, #14
 8002ebe:	601a      	str	r2, [r3, #0]
=======
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f022 020e 	bic.w	r2, r2, #14
 8001f7a:	601a      	str	r2, [r3, #0]
>>>>>>> ModeSelect_v2

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
<<<<<<< HEAD
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ece:	601a      	str	r2, [r3, #0]
=======
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f8a:	601a      	str	r2, [r3, #0]
>>>>>>> ModeSelect_v2
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
<<<<<<< HEAD
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 0201 	bic.w	r2, r2, #1
 8002ede:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee4:	f003 021c 	and.w	r2, r3, #28
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eec:	2101      	movs	r1, #1
 8002eee:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef2:	605a      	str	r2, [r3, #4]
=======
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f022 0201 	bic.w	r2, r2, #1
 8001f9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa0:	f003 021c 	and.w	r2, r3, #28
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa8:	2101      	movs	r1, #1
 8001faa:	fa01 f202 	lsl.w	r2, r1, r2
 8001fae:	605a      	str	r2, [r3, #4]
>>>>>>> ModeSelect_v2

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
<<<<<<< HEAD
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002efc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00c      	beq.n	8002f20 <HAL_DMA_Abort+0x9a>
=======
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001fb8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00c      	beq.n	8001fdc <HAL_DMA_Abort+0x9a>
>>>>>>> ModeSelect_v2
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
<<<<<<< HEAD
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f14:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002f1e:	605a      	str	r2, [r3, #4]
=======
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fcc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fd0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001fda:	605a      	str	r2, [r3, #4]
>>>>>>> ModeSelect_v2
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
<<<<<<< HEAD
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002f30:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3714      	adds	r7, #20
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <HAL_DMA_Abort_IT>:
=======
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001fec:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3714      	adds	r7, #20
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <HAL_DMA_Abort_IT>:
>>>>>>> ModeSelect_v2
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b084      	sub	sp, #16
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f46:	2300      	movs	r3, #0
 8002f48:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d005      	beq.n	8002f62 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2204      	movs	r2, #4
 8002f5a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	73fb      	strb	r3, [r7, #15]
 8002f60:	e047      	b.n	8002ff2 <HAL_DMA_Abort_IT+0xb4>
=======
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b084      	sub	sp, #16
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002002:	2300      	movs	r3, #0
 8002004:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d005      	beq.n	800201e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2204      	movs	r2, #4
 8002016:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	73fb      	strb	r3, [r7, #15]
 800201c:	e047      	b.n	80020ae <HAL_DMA_Abort_IT+0xb4>
>>>>>>> ModeSelect_v2
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
<<<<<<< HEAD
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f022 020e 	bic.w	r2, r2, #14
 8002f70:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 0201 	bic.w	r2, r2, #1
 8002f80:	601a      	str	r2, [r3, #0]
=======
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 020e 	bic.w	r2, r2, #14
 800202c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f022 0201 	bic.w	r2, r2, #1
 800203c:	601a      	str	r2, [r3, #0]
>>>>>>> ModeSelect_v2

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
<<<<<<< HEAD
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f90:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f96:	f003 021c 	and.w	r2, r3, #28
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	fa01 f202 	lsl.w	r2, r1, r2
 8002fa4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002fae:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00c      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x94>
=======
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002048:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800204c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002052:	f003 021c 	and.w	r2, r3, #28
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	2101      	movs	r1, #1
 800205c:	fa01 f202 	lsl.w	r2, r1, r2
 8002060:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800206a:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00c      	beq.n	800208e <HAL_DMA_Abort_IT+0x94>
>>>>>>> ModeSelect_v2
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
<<<<<<< HEAD
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fc6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002fd0:	605a      	str	r2, [r3, #4]
=======
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800207e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002082:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800208c:	605a      	str	r2, [r3, #4]
>>>>>>> ModeSelect_v2
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
<<<<<<< HEAD
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	4798      	blx	r3
    }
  }
  return status;
 8002ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <HAL_GPIO_Init>:
=======
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2201      	movs	r2, #1
 8002092:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	4798      	blx	r3
    }
  }
  return status;
 80020ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <HAL_GPIO_Init>:
>>>>>>> ModeSelect_v2
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 8002ffc:	b480      	push	{r7}
 8002ffe:	b087      	sub	sp, #28
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003006:	2300      	movs	r3, #0
 8003008:	617b      	str	r3, [r7, #20]
=======
 80020b8:	b480      	push	{r7}
 80020ba:	b087      	sub	sp, #28
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020c2:	2300      	movs	r3, #0
 80020c4:	617b      	str	r3, [r7, #20]
>>>>>>> ModeSelect_v2
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
<<<<<<< HEAD
 800300a:	e166      	b.n	80032da <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	2101      	movs	r1, #1
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	fa01 f303 	lsl.w	r3, r1, r3
 8003018:	4013      	ands	r3, r2
 800301a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2b00      	cmp	r3, #0
 8003020:	f000 8158 	beq.w	80032d4 <HAL_GPIO_Init+0x2d8>
=======
 80020c6:	e166      	b.n	8002396 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	2101      	movs	r1, #1
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	fa01 f303 	lsl.w	r3, r1, r3
 80020d4:	4013      	ands	r3, r2
 80020d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f000 8158 	beq.w	8002390 <HAL_GPIO_Init+0x2d8>
>>>>>>> ModeSelect_v2
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
<<<<<<< HEAD
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f003 0303 	and.w	r3, r3, #3
 800302c:	2b01      	cmp	r3, #1
 800302e:	d005      	beq.n	800303c <HAL_GPIO_Init+0x40>
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f003 0303 	and.w	r3, r3, #3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d130      	bne.n	800309e <HAL_GPIO_Init+0xa2>
=======
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 0303 	and.w	r3, r3, #3
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d005      	beq.n	80020f8 <HAL_GPIO_Init+0x40>
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 0303 	and.w	r3, r3, #3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d130      	bne.n	800215a <HAL_GPIO_Init+0xa2>
>>>>>>> ModeSelect_v2
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
<<<<<<< HEAD
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	2203      	movs	r2, #3
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	43db      	mvns	r3, r3
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	4013      	ands	r3, r2
 8003052:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	68da      	ldr	r2, [r3, #12]
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	4313      	orrs	r3, r2
 8003064:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003072:	2201      	movs	r2, #1
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	fa02 f303 	lsl.w	r3, r2, r3
 800307a:	43db      	mvns	r3, r3
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	4013      	ands	r3, r2
 8003080:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	091b      	lsrs	r3, r3, #4
 8003088:	f003 0201 	and.w	r2, r3, #1
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	4313      	orrs	r3, r2
 8003096:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	605a      	str	r2, [r3, #4]
=======
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	2203      	movs	r2, #3
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	43db      	mvns	r3, r3
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	4013      	ands	r3, r2
 800210e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	68da      	ldr	r2, [r3, #12]
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	4313      	orrs	r3, r2
 8002120:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800212e:	2201      	movs	r2, #1
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	43db      	mvns	r3, r3
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	4013      	ands	r3, r2
 800213c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	091b      	lsrs	r3, r3, #4
 8002144:	f003 0201 	and.w	r2, r3, #1
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	4313      	orrs	r3, r2
 8002152:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	605a      	str	r2, [r3, #4]
>>>>>>> ModeSelect_v2
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
<<<<<<< HEAD
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f003 0303 	and.w	r3, r3, #3
 80030a6:	2b03      	cmp	r3, #3
 80030a8:	d017      	beq.n	80030da <HAL_GPIO_Init+0xde>
=======
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f003 0303 	and.w	r3, r3, #3
 8002162:	2b03      	cmp	r3, #3
 8002164:	d017      	beq.n	8002196 <HAL_GPIO_Init+0xde>
>>>>>>> ModeSelect_v2
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
<<<<<<< HEAD
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	2203      	movs	r2, #3
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	43db      	mvns	r3, r3
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	4013      	ands	r3, r2
 80030c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	689a      	ldr	r2, [r3, #8]
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	fa02 f303 	lsl.w	r3, r2, r3
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	60da      	str	r2, [r3, #12]
=======
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	2203      	movs	r2, #3
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	43db      	mvns	r3, r3
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	4013      	ands	r3, r2
 800217c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	689a      	ldr	r2, [r3, #8]
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	4313      	orrs	r3, r2
 800218e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	60da      	str	r2, [r3, #12]
>>>>>>> ModeSelect_v2
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
<<<<<<< HEAD
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f003 0303 	and.w	r3, r3, #3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d123      	bne.n	800312e <HAL_GPIO_Init+0x132>
=======
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f003 0303 	and.w	r3, r3, #3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d123      	bne.n	80021ea <HAL_GPIO_Init+0x132>
>>>>>>> ModeSelect_v2
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
<<<<<<< HEAD
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	08da      	lsrs	r2, r3, #3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	3208      	adds	r2, #8
 80030ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	220f      	movs	r2, #15
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	43db      	mvns	r3, r3
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	4013      	ands	r3, r2
 8003108:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	691a      	ldr	r2, [r3, #16]
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	f003 0307 	and.w	r3, r3, #7
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	4313      	orrs	r3, r2
 800311e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	08da      	lsrs	r2, r3, #3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	3208      	adds	r2, #8
 8003128:	6939      	ldr	r1, [r7, #16]
 800312a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	08da      	lsrs	r2, r3, #3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	3208      	adds	r2, #8
 80021aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	220f      	movs	r2, #15
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	43db      	mvns	r3, r3
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	4013      	ands	r3, r2
 80021c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	691a      	ldr	r2, [r3, #16]
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	f003 0307 	and.w	r3, r3, #7
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	4313      	orrs	r3, r2
 80021da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	08da      	lsrs	r2, r3, #3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3208      	adds	r2, #8
 80021e4:	6939      	ldr	r1, [r7, #16]
 80021e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> ModeSelect_v2
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< HEAD
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	2203      	movs	r2, #3
 800313a:	fa02 f303 	lsl.w	r3, r2, r3
 800313e:	43db      	mvns	r3, r3
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	4013      	ands	r3, r2
 8003144:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f003 0203 	and.w	r2, r3, #3
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	fa02 f303 	lsl.w	r3, r2, r3
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	4313      	orrs	r3, r2
 800315a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	601a      	str	r2, [r3, #0]
=======
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	2203      	movs	r2, #3
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	43db      	mvns	r3, r3
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	4013      	ands	r3, r2
 8002200:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f003 0203 	and.w	r2, r3, #3
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	4313      	orrs	r3, r2
 8002216:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	601a      	str	r2, [r3, #0]
>>>>>>> ModeSelect_v2

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
<<<<<<< HEAD
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800316a:	2b00      	cmp	r3, #0
 800316c:	f000 80b2 	beq.w	80032d4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003170:	4b61      	ldr	r3, [pc, #388]	; (80032f8 <HAL_GPIO_Init+0x2fc>)
 8003172:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003174:	4a60      	ldr	r2, [pc, #384]	; (80032f8 <HAL_GPIO_Init+0x2fc>)
 8003176:	f043 0301 	orr.w	r3, r3, #1
 800317a:	6613      	str	r3, [r2, #96]	; 0x60
 800317c:	4b5e      	ldr	r3, [pc, #376]	; (80032f8 <HAL_GPIO_Init+0x2fc>)
 800317e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	60bb      	str	r3, [r7, #8]
 8003186:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003188:	4a5c      	ldr	r2, [pc, #368]	; (80032fc <HAL_GPIO_Init+0x300>)
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	089b      	lsrs	r3, r3, #2
 800318e:	3302      	adds	r3, #2
 8003190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003194:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	f003 0303 	and.w	r3, r3, #3
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	220f      	movs	r2, #15
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	43db      	mvns	r3, r3
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	4013      	ands	r3, r2
 80031aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80031b2:	d02b      	beq.n	800320c <HAL_GPIO_Init+0x210>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a52      	ldr	r2, [pc, #328]	; (8003300 <HAL_GPIO_Init+0x304>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d025      	beq.n	8003208 <HAL_GPIO_Init+0x20c>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a51      	ldr	r2, [pc, #324]	; (8003304 <HAL_GPIO_Init+0x308>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d01f      	beq.n	8003204 <HAL_GPIO_Init+0x208>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a50      	ldr	r2, [pc, #320]	; (8003308 <HAL_GPIO_Init+0x30c>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d019      	beq.n	8003200 <HAL_GPIO_Init+0x204>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a4f      	ldr	r2, [pc, #316]	; (800330c <HAL_GPIO_Init+0x310>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d013      	beq.n	80031fc <HAL_GPIO_Init+0x200>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a4e      	ldr	r2, [pc, #312]	; (8003310 <HAL_GPIO_Init+0x314>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d00d      	beq.n	80031f8 <HAL_GPIO_Init+0x1fc>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a4d      	ldr	r2, [pc, #308]	; (8003314 <HAL_GPIO_Init+0x318>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d007      	beq.n	80031f4 <HAL_GPIO_Init+0x1f8>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a4c      	ldr	r2, [pc, #304]	; (8003318 <HAL_GPIO_Init+0x31c>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d101      	bne.n	80031f0 <HAL_GPIO_Init+0x1f4>
 80031ec:	2307      	movs	r3, #7
 80031ee:	e00e      	b.n	800320e <HAL_GPIO_Init+0x212>
 80031f0:	2308      	movs	r3, #8
 80031f2:	e00c      	b.n	800320e <HAL_GPIO_Init+0x212>
 80031f4:	2306      	movs	r3, #6
 80031f6:	e00a      	b.n	800320e <HAL_GPIO_Init+0x212>
 80031f8:	2305      	movs	r3, #5
 80031fa:	e008      	b.n	800320e <HAL_GPIO_Init+0x212>
 80031fc:	2304      	movs	r3, #4
 80031fe:	e006      	b.n	800320e <HAL_GPIO_Init+0x212>
 8003200:	2303      	movs	r3, #3
 8003202:	e004      	b.n	800320e <HAL_GPIO_Init+0x212>
 8003204:	2302      	movs	r3, #2
 8003206:	e002      	b.n	800320e <HAL_GPIO_Init+0x212>
 8003208:	2301      	movs	r3, #1
 800320a:	e000      	b.n	800320e <HAL_GPIO_Init+0x212>
 800320c:	2300      	movs	r3, #0
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	f002 0203 	and.w	r2, r2, #3
 8003214:	0092      	lsls	r2, r2, #2
 8003216:	4093      	lsls	r3, r2
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	4313      	orrs	r3, r2
 800321c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800321e:	4937      	ldr	r1, [pc, #220]	; (80032fc <HAL_GPIO_Init+0x300>)
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	089b      	lsrs	r3, r3, #2
 8003224:	3302      	adds	r3, #2
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800322c:	4b3b      	ldr	r3, [pc, #236]	; (800331c <HAL_GPIO_Init+0x320>)
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	43db      	mvns	r3, r3
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	4013      	ands	r3, r2
 800323a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d003      	beq.n	8003250 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	4313      	orrs	r3, r2
 800324e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003250:	4a32      	ldr	r2, [pc, #200]	; (800331c <HAL_GPIO_Init+0x320>)
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003256:	4b31      	ldr	r3, [pc, #196]	; (800331c <HAL_GPIO_Init+0x320>)
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	43db      	mvns	r3, r3
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	4013      	ands	r3, r2
 8003264:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d003      	beq.n	800327a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	4313      	orrs	r3, r2
 8003278:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800327a:	4a28      	ldr	r2, [pc, #160]	; (800331c <HAL_GPIO_Init+0x320>)
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003280:	4b26      	ldr	r3, [pc, #152]	; (800331c <HAL_GPIO_Init+0x320>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	43db      	mvns	r3, r3
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	4013      	ands	r3, r2
 800328e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d003      	beq.n	80032a4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80032a4:	4a1d      	ldr	r2, [pc, #116]	; (800331c <HAL_GPIO_Init+0x320>)
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80032aa:	4b1c      	ldr	r3, [pc, #112]	; (800331c <HAL_GPIO_Init+0x320>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	43db      	mvns	r3, r3
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	4013      	ands	r3, r2
 80032b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80032ce:	4a13      	ldr	r2, [pc, #76]	; (800331c <HAL_GPIO_Init+0x320>)
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	6013      	str	r3, [r2, #0]
=======
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002226:	2b00      	cmp	r3, #0
 8002228:	f000 80b2 	beq.w	8002390 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800222c:	4b61      	ldr	r3, [pc, #388]	; (80023b4 <HAL_GPIO_Init+0x2fc>)
 800222e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002230:	4a60      	ldr	r2, [pc, #384]	; (80023b4 <HAL_GPIO_Init+0x2fc>)
 8002232:	f043 0301 	orr.w	r3, r3, #1
 8002236:	6613      	str	r3, [r2, #96]	; 0x60
 8002238:	4b5e      	ldr	r3, [pc, #376]	; (80023b4 <HAL_GPIO_Init+0x2fc>)
 800223a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800223c:	f003 0301 	and.w	r3, r3, #1
 8002240:	60bb      	str	r3, [r7, #8]
 8002242:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002244:	4a5c      	ldr	r2, [pc, #368]	; (80023b8 <HAL_GPIO_Init+0x300>)
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	089b      	lsrs	r3, r3, #2
 800224a:	3302      	adds	r3, #2
 800224c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002250:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	f003 0303 	and.w	r3, r3, #3
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	220f      	movs	r2, #15
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43db      	mvns	r3, r3
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	4013      	ands	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800226e:	d02b      	beq.n	80022c8 <HAL_GPIO_Init+0x210>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a52      	ldr	r2, [pc, #328]	; (80023bc <HAL_GPIO_Init+0x304>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d025      	beq.n	80022c4 <HAL_GPIO_Init+0x20c>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a51      	ldr	r2, [pc, #324]	; (80023c0 <HAL_GPIO_Init+0x308>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d01f      	beq.n	80022c0 <HAL_GPIO_Init+0x208>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a50      	ldr	r2, [pc, #320]	; (80023c4 <HAL_GPIO_Init+0x30c>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d019      	beq.n	80022bc <HAL_GPIO_Init+0x204>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a4f      	ldr	r2, [pc, #316]	; (80023c8 <HAL_GPIO_Init+0x310>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d013      	beq.n	80022b8 <HAL_GPIO_Init+0x200>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a4e      	ldr	r2, [pc, #312]	; (80023cc <HAL_GPIO_Init+0x314>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d00d      	beq.n	80022b4 <HAL_GPIO_Init+0x1fc>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4a4d      	ldr	r2, [pc, #308]	; (80023d0 <HAL_GPIO_Init+0x318>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d007      	beq.n	80022b0 <HAL_GPIO_Init+0x1f8>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a4c      	ldr	r2, [pc, #304]	; (80023d4 <HAL_GPIO_Init+0x31c>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d101      	bne.n	80022ac <HAL_GPIO_Init+0x1f4>
 80022a8:	2307      	movs	r3, #7
 80022aa:	e00e      	b.n	80022ca <HAL_GPIO_Init+0x212>
 80022ac:	2308      	movs	r3, #8
 80022ae:	e00c      	b.n	80022ca <HAL_GPIO_Init+0x212>
 80022b0:	2306      	movs	r3, #6
 80022b2:	e00a      	b.n	80022ca <HAL_GPIO_Init+0x212>
 80022b4:	2305      	movs	r3, #5
 80022b6:	e008      	b.n	80022ca <HAL_GPIO_Init+0x212>
 80022b8:	2304      	movs	r3, #4
 80022ba:	e006      	b.n	80022ca <HAL_GPIO_Init+0x212>
 80022bc:	2303      	movs	r3, #3
 80022be:	e004      	b.n	80022ca <HAL_GPIO_Init+0x212>
 80022c0:	2302      	movs	r3, #2
 80022c2:	e002      	b.n	80022ca <HAL_GPIO_Init+0x212>
 80022c4:	2301      	movs	r3, #1
 80022c6:	e000      	b.n	80022ca <HAL_GPIO_Init+0x212>
 80022c8:	2300      	movs	r3, #0
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	f002 0203 	and.w	r2, r2, #3
 80022d0:	0092      	lsls	r2, r2, #2
 80022d2:	4093      	lsls	r3, r2
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022da:	4937      	ldr	r1, [pc, #220]	; (80023b8 <HAL_GPIO_Init+0x300>)
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	089b      	lsrs	r3, r3, #2
 80022e0:	3302      	adds	r3, #2
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022e8:	4b3b      	ldr	r3, [pc, #236]	; (80023d8 <HAL_GPIO_Init+0x320>)
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	43db      	mvns	r3, r3
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	4013      	ands	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d003      	beq.n	800230c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	4313      	orrs	r3, r2
 800230a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800230c:	4a32      	ldr	r2, [pc, #200]	; (80023d8 <HAL_GPIO_Init+0x320>)
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002312:	4b31      	ldr	r3, [pc, #196]	; (80023d8 <HAL_GPIO_Init+0x320>)
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	43db      	mvns	r3, r3
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	4013      	ands	r3, r2
 8002320:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d003      	beq.n	8002336 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4313      	orrs	r3, r2
 8002334:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002336:	4a28      	ldr	r2, [pc, #160]	; (80023d8 <HAL_GPIO_Init+0x320>)
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800233c:	4b26      	ldr	r3, [pc, #152]	; (80023d8 <HAL_GPIO_Init+0x320>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	43db      	mvns	r3, r3
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	4013      	ands	r3, r2
 800234a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d003      	beq.n	8002360 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	4313      	orrs	r3, r2
 800235e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002360:	4a1d      	ldr	r2, [pc, #116]	; (80023d8 <HAL_GPIO_Init+0x320>)
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002366:	4b1c      	ldr	r3, [pc, #112]	; (80023d8 <HAL_GPIO_Init+0x320>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	43db      	mvns	r3, r3
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	4013      	ands	r3, r2
 8002374:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d003      	beq.n	800238a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	4313      	orrs	r3, r2
 8002388:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800238a:	4a13      	ldr	r2, [pc, #76]	; (80023d8 <HAL_GPIO_Init+0x320>)
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	6013      	str	r3, [r2, #0]
>>>>>>> ModeSelect_v2
      }
    }

    position++;
<<<<<<< HEAD
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	3301      	adds	r3, #1
 80032d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	fa22 f303 	lsr.w	r3, r2, r3
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f47f ae91 	bne.w	800300c <HAL_GPIO_Init+0x10>
  }
}
 80032ea:	bf00      	nop
 80032ec:	bf00      	nop
 80032ee:	371c      	adds	r7, #28
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	40021000 	.word	0x40021000
 80032fc:	40010000 	.word	0x40010000
 8003300:	48000400 	.word	0x48000400
 8003304:	48000800 	.word	0x48000800
 8003308:	48000c00 	.word	0x48000c00
 800330c:	48001000 	.word	0x48001000
 8003310:	48001400 	.word	0x48001400
 8003314:	48001800 	.word	0x48001800
 8003318:	48001c00 	.word	0x48001c00
 800331c:	40010400 	.word	0x40010400

08003320 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	460b      	mov	r3, r1
 800332a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	691a      	ldr	r2, [r3, #16]
 8003330:	887b      	ldrh	r3, [r7, #2]
 8003332:	4013      	ands	r3, r2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d002      	beq.n	800333e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003338:	2301      	movs	r3, #1
 800333a:	73fb      	strb	r3, [r7, #15]
 800333c:	e001      	b.n	8003342 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800333e:	2300      	movs	r3, #0
 8003340:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003342:	7bfb      	ldrb	r3, [r7, #15]
}
 8003344:	4618      	mov	r0, r3
 8003346:	3714      	adds	r7, #20
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <HAL_GPIO_WritePin>:
=======
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	3301      	adds	r3, #1
 8002394:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	fa22 f303 	lsr.w	r3, r2, r3
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f47f ae91 	bne.w	80020c8 <HAL_GPIO_Init+0x10>
  }
}
 80023a6:	bf00      	nop
 80023a8:	bf00      	nop
 80023aa:	371c      	adds	r7, #28
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	40021000 	.word	0x40021000
 80023b8:	40010000 	.word	0x40010000
 80023bc:	48000400 	.word	0x48000400
 80023c0:	48000800 	.word	0x48000800
 80023c4:	48000c00 	.word	0x48000c00
 80023c8:	48001000 	.word	0x48001000
 80023cc:	48001400 	.word	0x48001400
 80023d0:	48001800 	.word	0x48001800
 80023d4:	48001c00 	.word	0x48001c00
 80023d8:	40010400 	.word	0x40010400

080023dc <HAL_GPIO_WritePin>:
>>>>>>> ModeSelect_v2
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	460b      	mov	r3, r1
 800335a:	807b      	strh	r3, [r7, #2]
 800335c:	4613      	mov	r3, r2
 800335e:	707b      	strb	r3, [r7, #1]
=======
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	460b      	mov	r3, r1
 80023e6:	807b      	strh	r3, [r7, #2]
 80023e8:	4613      	mov	r3, r2
 80023ea:	707b      	strb	r3, [r7, #1]
>>>>>>> ModeSelect_v2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 8003360:	787b      	ldrb	r3, [r7, #1]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003366:	887a      	ldrh	r2, [r7, #2]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	619a      	str	r2, [r3, #24]
=======
 80023ec:	787b      	ldrb	r3, [r7, #1]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023f2:	887a      	ldrh	r2, [r7, #2]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	619a      	str	r2, [r3, #24]
>>>>>>> ModeSelect_v2
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
<<<<<<< HEAD
 800336c:	e002      	b.n	8003374 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800336e:	887a      	ldrh	r2, [r7, #2]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <HAL_GPIO_EXTI_IRQHandler>:
=======
 80023f8:	e002      	b.n	8002400 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023fa:	887a      	ldrh	r2, [r7, #2]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <HAL_GPIO_EXTI_IRQHandler>:
>>>>>>> ModeSelect_v2
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	4603      	mov	r3, r0
 8003388:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800338a:	4b08      	ldr	r3, [pc, #32]	; (80033ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800338c:	695a      	ldr	r2, [r3, #20]
 800338e:	88fb      	ldrh	r3, [r7, #6]
 8003390:	4013      	ands	r3, r2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d006      	beq.n	80033a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003396:	4a05      	ldr	r2, [pc, #20]	; (80033ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003398:	88fb      	ldrh	r3, [r7, #6]
 800339a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800339c:	88fb      	ldrh	r3, [r7, #6]
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fe fd44 	bl	8001e2c <HAL_GPIO_EXTI_Callback>
  }
}
 80033a4:	bf00      	nop
 80033a6:	3708      	adds	r7, #8
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	40010400 	.word	0x40010400

080033b0 <HAL_I2C_Init>:
=======
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002416:	4b08      	ldr	r3, [pc, #32]	; (8002438 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002418:	695a      	ldr	r2, [r3, #20]
 800241a:	88fb      	ldrh	r3, [r7, #6]
 800241c:	4013      	ands	r3, r2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d006      	beq.n	8002430 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002422:	4a05      	ldr	r2, [pc, #20]	; (8002438 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002424:	88fb      	ldrh	r3, [r7, #6]
 8002426:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002428:	88fb      	ldrh	r3, [r7, #6]
 800242a:	4618      	mov	r0, r3
 800242c:	f7fe ff8a 	bl	8001344 <HAL_GPIO_EXTI_Callback>
  }
}
 8002430:	bf00      	nop
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40010400 	.word	0x40010400

0800243c <HAL_I2C_Init>:
>>>>>>> ModeSelect_v2
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e081      	b.n	80034c6 <HAL_I2C_Init+0x116>
=======
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e081      	b.n	8002552 <HAL_I2C_Init+0x116>
>>>>>>> ModeSelect_v2
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
<<<<<<< HEAD
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d106      	bne.n	80033dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
=======
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d106      	bne.n	8002468 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
>>>>>>> ModeSelect_v2

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
<<<<<<< HEAD
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f7ff f956 	bl	8002688 <HAL_I2C_MspInit>
=======
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7ff f908 	bl	8001678 <HAL_I2C_MspInit>
>>>>>>> ModeSelect_v2
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
<<<<<<< HEAD
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2224      	movs	r2, #36	; 0x24
 80033e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f022 0201 	bic.w	r2, r2, #1
 80033f2:	601a      	str	r2, [r3, #0]
=======
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2224      	movs	r2, #36	; 0x24
 800246c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 0201 	bic.w	r2, r2, #1
 800247e:	601a      	str	r2, [r3, #0]
>>>>>>> ModeSelect_v2

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
<<<<<<< HEAD
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003400:	611a      	str	r2, [r3, #16]
=======
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685a      	ldr	r2, [r3, #4]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800248c:	611a      	str	r2, [r3, #16]
>>>>>>> ModeSelect_v2

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
<<<<<<< HEAD
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689a      	ldr	r2, [r3, #8]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003410:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d107      	bne.n	800342a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	689a      	ldr	r2, [r3, #8]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003426:	609a      	str	r2, [r3, #8]
 8003428:	e006      	b.n	8003438 <HAL_I2C_Init+0x88>
=======
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800249c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d107      	bne.n	80024b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	689a      	ldr	r2, [r3, #8]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024b2:	609a      	str	r2, [r3, #8]
 80024b4:	e006      	b.n	80024c4 <HAL_I2C_Init+0x88>
>>>>>>> ModeSelect_v2
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
<<<<<<< HEAD
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689a      	ldr	r2, [r3, #8]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003436:	609a      	str	r2, [r3, #8]
=======
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689a      	ldr	r2, [r3, #8]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80024c2:	609a      	str	r2, [r3, #8]
>>>>>>> ModeSelect_v2
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
<<<<<<< HEAD
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	2b02      	cmp	r3, #2
 800343e:	d104      	bne.n	800344a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003448:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	6812      	ldr	r2, [r2, #0]
 8003454:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003458:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800345c:	6053      	str	r3, [r2, #4]
=======
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d104      	bne.n	80024d6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	6812      	ldr	r2, [r2, #0]
 80024e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024e8:	6053      	str	r3, [r2, #4]
>>>>>>> ModeSelect_v2

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
<<<<<<< HEAD
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68da      	ldr	r2, [r3, #12]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800346c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	691a      	ldr	r2, [r3, #16]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	430a      	orrs	r2, r1
 8003486:	60da      	str	r2, [r3, #12]
=======
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68da      	ldr	r2, [r3, #12]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	691a      	ldr	r2, [r3, #16]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	430a      	orrs	r2, r1
 8002512:	60da      	str	r2, [r3, #12]
>>>>>>> ModeSelect_v2

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
<<<<<<< HEAD
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	69d9      	ldr	r1, [r3, #28]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a1a      	ldr	r2, [r3, #32]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	430a      	orrs	r2, r1
 8003496:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f042 0201 	orr.w	r2, r2, #1
 80034a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2220      	movs	r2, #32
 80034b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
	...

080034d0 <HAL_I2C_Master_Transmit>:
=======
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	69d9      	ldr	r1, [r3, #28]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a1a      	ldr	r2, [r3, #32]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	430a      	orrs	r2, r1
 8002522:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f042 0201 	orr.w	r2, r2, #1
 8002532:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2220      	movs	r2, #32
 800253e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
	...

0800255c <HAL_I2C_Master_Transmit>:
>>>>>>> ModeSelect_v2
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b088      	sub	sp, #32
 80034d4:	af02      	add	r7, sp, #8
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	607a      	str	r2, [r7, #4]
 80034da:	461a      	mov	r2, r3
 80034dc:	460b      	mov	r3, r1
 80034de:	817b      	strh	r3, [r7, #10]
 80034e0:	4613      	mov	r3, r2
 80034e2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b20      	cmp	r3, #32
 80034ee:	f040 80da 	bne.w	80036a6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d101      	bne.n	8003500 <HAL_I2C_Master_Transmit+0x30>
 80034fc:	2302      	movs	r3, #2
 80034fe:	e0d3      	b.n	80036a8 <HAL_I2C_Master_Transmit+0x1d8>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003508:	f7ff fb7c 	bl	8002c04 <HAL_GetTick>
 800350c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	2319      	movs	r3, #25
 8003514:	2201      	movs	r2, #1
 8003516:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	f000 f9e6 	bl	80038ec <I2C_WaitOnFlagUntilTimeout>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e0be      	b.n	80036a8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2221      	movs	r2, #33	; 0x21
 800352e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2210      	movs	r2, #16
 8003536:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	893a      	ldrh	r2, [r7, #8]
 800354a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	635a      	str	r2, [r3, #52]	; 0x34
=======
 800255c:	b580      	push	{r7, lr}
 800255e:	b088      	sub	sp, #32
 8002560:	af02      	add	r7, sp, #8
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	607a      	str	r2, [r7, #4]
 8002566:	461a      	mov	r2, r3
 8002568:	460b      	mov	r3, r1
 800256a:	817b      	strh	r3, [r7, #10]
 800256c:	4613      	mov	r3, r2
 800256e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b20      	cmp	r3, #32
 800257a:	f040 80da 	bne.w	8002732 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002584:	2b01      	cmp	r3, #1
 8002586:	d101      	bne.n	800258c <HAL_I2C_Master_Transmit+0x30>
 8002588:	2302      	movs	r3, #2
 800258a:	e0d3      	b.n	8002734 <HAL_I2C_Master_Transmit+0x1d8>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002594:	f7ff fb94 	bl	8001cc0 <HAL_GetTick>
 8002598:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	2319      	movs	r3, #25
 80025a0:	2201      	movs	r2, #1
 80025a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f000 f9e6 	bl	8002978 <I2C_WaitOnFlagUntilTimeout>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e0be      	b.n	8002734 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2221      	movs	r2, #33	; 0x21
 80025ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2210      	movs	r2, #16
 80025c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2200      	movs	r2, #0
 80025ca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	893a      	ldrh	r2, [r7, #8]
 80025d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2200      	movs	r2, #0
 80025dc:	635a      	str	r2, [r3, #52]	; 0x34
>>>>>>> ModeSelect_v2

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
<<<<<<< HEAD
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003556:	b29b      	uxth	r3, r3
 8003558:	2bff      	cmp	r3, #255	; 0xff
 800355a:	d90e      	bls.n	800357a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	22ff      	movs	r2, #255	; 0xff
 8003560:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003566:	b2da      	uxtb	r2, r3
 8003568:	8979      	ldrh	r1, [r7, #10]
 800356a:	4b51      	ldr	r3, [pc, #324]	; (80036b0 <HAL_I2C_Master_Transmit+0x1e0>)
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f000 fbdc 	bl	8003d30 <I2C_TransferConfig>
 8003578:	e06c      	b.n	8003654 <HAL_I2C_Master_Transmit+0x184>
=======
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	2bff      	cmp	r3, #255	; 0xff
 80025e6:	d90e      	bls.n	8002606 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	22ff      	movs	r2, #255	; 0xff
 80025ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f2:	b2da      	uxtb	r2, r3
 80025f4:	8979      	ldrh	r1, [r7, #10]
 80025f6:	4b51      	ldr	r3, [pc, #324]	; (800273c <HAL_I2C_Master_Transmit+0x1e0>)
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025fe:	68f8      	ldr	r0, [r7, #12]
 8002600:	f000 fbdc 	bl	8002dbc <I2C_TransferConfig>
 8002604:	e06c      	b.n	80026e0 <HAL_I2C_Master_Transmit+0x184>
>>>>>>> ModeSelect_v2
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
<<<<<<< HEAD
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800357e:	b29a      	uxth	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003588:	b2da      	uxtb	r2, r3
 800358a:	8979      	ldrh	r1, [r7, #10]
 800358c:	4b48      	ldr	r3, [pc, #288]	; (80036b0 <HAL_I2C_Master_Transmit+0x1e0>)
 800358e:	9300      	str	r3, [sp, #0]
 8003590:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f000 fbcb 	bl	8003d30 <I2C_TransferConfig>
=======
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800260a:	b29a      	uxth	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002614:	b2da      	uxtb	r2, r3
 8002616:	8979      	ldrh	r1, [r7, #10]
 8002618:	4b48      	ldr	r3, [pc, #288]	; (800273c <HAL_I2C_Master_Transmit+0x1e0>)
 800261a:	9300      	str	r3, [sp, #0]
 800261c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f000 fbcb 	bl	8002dbc <I2C_TransferConfig>
>>>>>>> ModeSelect_v2
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
<<<<<<< HEAD
 800359a:	e05b      	b.n	8003654 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	6a39      	ldr	r1, [r7, #32]
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f000 f9e3 	bl	800396c <I2C_WaitOnTXISFlagUntilTimeout>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e07b      	b.n	80036a8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b4:	781a      	ldrb	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c0:	1c5a      	adds	r2, r3, #1
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	3b01      	subs	r3, #1
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035d8:	3b01      	subs	r3, #1
 80035da:	b29a      	uxth	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d034      	beq.n	8003654 <HAL_I2C_Master_Transmit+0x184>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d130      	bne.n	8003654 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	6a3b      	ldr	r3, [r7, #32]
 80035f8:	2200      	movs	r2, #0
 80035fa:	2180      	movs	r1, #128	; 0x80
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	f000 f975 	bl	80038ec <I2C_WaitOnFlagUntilTimeout>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d001      	beq.n	800360c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e04d      	b.n	80036a8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003610:	b29b      	uxth	r3, r3
 8003612:	2bff      	cmp	r3, #255	; 0xff
 8003614:	d90e      	bls.n	8003634 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	22ff      	movs	r2, #255	; 0xff
 800361a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003620:	b2da      	uxtb	r2, r3
 8003622:	8979      	ldrh	r1, [r7, #10]
 8003624:	2300      	movs	r3, #0
 8003626:	9300      	str	r3, [sp, #0]
 8003628:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f000 fb7f 	bl	8003d30 <I2C_TransferConfig>
 8003632:	e00f      	b.n	8003654 <HAL_I2C_Master_Transmit+0x184>
=======
 8002626:	e05b      	b.n	80026e0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	6a39      	ldr	r1, [r7, #32]
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f000 f9e3 	bl	80029f8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e07b      	b.n	8002734 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002640:	781a      	ldrb	r2, [r3, #0]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	1c5a      	adds	r2, r3, #1
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002656:	b29b      	uxth	r3, r3
 8002658:	3b01      	subs	r3, #1
 800265a:	b29a      	uxth	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002664:	3b01      	subs	r3, #1
 8002666:	b29a      	uxth	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002670:	b29b      	uxth	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d034      	beq.n	80026e0 <HAL_I2C_Master_Transmit+0x184>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800267a:	2b00      	cmp	r3, #0
 800267c:	d130      	bne.n	80026e0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	6a3b      	ldr	r3, [r7, #32]
 8002684:	2200      	movs	r2, #0
 8002686:	2180      	movs	r1, #128	; 0x80
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f000 f975 	bl	8002978 <I2C_WaitOnFlagUntilTimeout>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e04d      	b.n	8002734 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800269c:	b29b      	uxth	r3, r3
 800269e:	2bff      	cmp	r3, #255	; 0xff
 80026a0:	d90e      	bls.n	80026c0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	22ff      	movs	r2, #255	; 0xff
 80026a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	8979      	ldrh	r1, [r7, #10]
 80026b0:	2300      	movs	r3, #0
 80026b2:	9300      	str	r3, [sp, #0]
 80026b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	f000 fb7f 	bl	8002dbc <I2C_TransferConfig>
 80026be:	e00f      	b.n	80026e0 <HAL_I2C_Master_Transmit+0x184>
>>>>>>> ModeSelect_v2
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
<<<<<<< HEAD
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003638:	b29a      	uxth	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003642:	b2da      	uxtb	r2, r3
 8003644:	8979      	ldrh	r1, [r7, #10]
 8003646:	2300      	movs	r3, #0
 8003648:	9300      	str	r3, [sp, #0]
 800364a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f000 fb6e 	bl	8003d30 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003658:	b29b      	uxth	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d19e      	bne.n	800359c <HAL_I2C_Master_Transmit+0xcc>
=======
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ce:	b2da      	uxtb	r2, r3
 80026d0:	8979      	ldrh	r1, [r7, #10]
 80026d2:	2300      	movs	r3, #0
 80026d4:	9300      	str	r3, [sp, #0]
 80026d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f000 fb6e 	bl	8002dbc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d19e      	bne.n	8002628 <HAL_I2C_Master_Transmit+0xcc>
>>>>>>> ModeSelect_v2
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	6a39      	ldr	r1, [r7, #32]
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f000 f9c2 	bl	80039ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e01a      	b.n	80036a8 <HAL_I2C_Master_Transmit+0x1d8>
=======
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	6a39      	ldr	r1, [r7, #32]
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	f000 f9c2 	bl	8002a78 <I2C_WaitOnSTOPFlagUntilTimeout>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e01a      	b.n	8002734 <HAL_I2C_Master_Transmit+0x1d8>
>>>>>>> ModeSelect_v2
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
<<<<<<< HEAD
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2220      	movs	r2, #32
 8003678:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6859      	ldr	r1, [r3, #4]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	4b0b      	ldr	r3, [pc, #44]	; (80036b4 <HAL_I2C_Master_Transmit+0x1e4>)
 8003686:	400b      	ands	r3, r1
 8003688:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2220      	movs	r2, #32
 800368e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036a2:	2300      	movs	r3, #0
 80036a4:	e000      	b.n	80036a8 <HAL_I2C_Master_Transmit+0x1d8>
=======
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2220      	movs	r2, #32
 8002704:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6859      	ldr	r1, [r3, #4]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	4b0b      	ldr	r3, [pc, #44]	; (8002740 <HAL_I2C_Master_Transmit+0x1e4>)
 8002712:	400b      	ands	r3, r1
 8002714:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2220      	movs	r2, #32
 800271a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800272e:	2300      	movs	r3, #0
 8002730:	e000      	b.n	8002734 <HAL_I2C_Master_Transmit+0x1d8>
>>>>>>> ModeSelect_v2
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 80036a6:	2302      	movs	r3, #2
  }
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3718      	adds	r7, #24
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	80002000 	.word	0x80002000
 80036b4:	fe00e800 	.word	0xfe00e800

080036b8 <HAL_I2C_Master_Receive>:
=======
 8002732:	2302      	movs	r3, #2
  }
}
 8002734:	4618      	mov	r0, r3
 8002736:	3718      	adds	r7, #24
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	80002000 	.word	0x80002000
 8002740:	fe00e800 	.word	0xfe00e800

08002744 <HAL_I2C_Master_Receive>:
>>>>>>> ModeSelect_v2
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b088      	sub	sp, #32
 80036bc:	af02      	add	r7, sp, #8
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	607a      	str	r2, [r7, #4]
 80036c2:	461a      	mov	r2, r3
 80036c4:	460b      	mov	r3, r1
 80036c6:	817b      	strh	r3, [r7, #10]
 80036c8:	4613      	mov	r3, r2
 80036ca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b20      	cmp	r3, #32
 80036d6:	f040 80db 	bne.w	8003890 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d101      	bne.n	80036e8 <HAL_I2C_Master_Receive+0x30>
 80036e4:	2302      	movs	r3, #2
 80036e6:	e0d4      	b.n	8003892 <HAL_I2C_Master_Receive+0x1da>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80036f0:	f7ff fa88 	bl	8002c04 <HAL_GetTick>
 80036f4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	9300      	str	r3, [sp, #0]
 80036fa:	2319      	movs	r3, #25
 80036fc:	2201      	movs	r2, #1
 80036fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f000 f8f2 	bl	80038ec <I2C_WaitOnFlagUntilTimeout>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d001      	beq.n	8003712 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e0bf      	b.n	8003892 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2222      	movs	r2, #34	; 0x22
 8003716:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2210      	movs	r2, #16
 800371e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	893a      	ldrh	r2, [r7, #8]
 8003732:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	635a      	str	r2, [r3, #52]	; 0x34
=======
 8002744:	b580      	push	{r7, lr}
 8002746:	b088      	sub	sp, #32
 8002748:	af02      	add	r7, sp, #8
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	607a      	str	r2, [r7, #4]
 800274e:	461a      	mov	r2, r3
 8002750:	460b      	mov	r3, r1
 8002752:	817b      	strh	r3, [r7, #10]
 8002754:	4613      	mov	r3, r2
 8002756:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800275e:	b2db      	uxtb	r3, r3
 8002760:	2b20      	cmp	r3, #32
 8002762:	f040 80db 	bne.w	800291c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800276c:	2b01      	cmp	r3, #1
 800276e:	d101      	bne.n	8002774 <HAL_I2C_Master_Receive+0x30>
 8002770:	2302      	movs	r3, #2
 8002772:	e0d4      	b.n	800291e <HAL_I2C_Master_Receive+0x1da>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800277c:	f7ff faa0 	bl	8001cc0 <HAL_GetTick>
 8002780:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	2319      	movs	r3, #25
 8002788:	2201      	movs	r2, #1
 800278a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f000 f8f2 	bl	8002978 <I2C_WaitOnFlagUntilTimeout>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e0bf      	b.n	800291e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2222      	movs	r2, #34	; 0x22
 80027a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2210      	movs	r2, #16
 80027aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	893a      	ldrh	r2, [r7, #8]
 80027be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	635a      	str	r2, [r3, #52]	; 0x34
>>>>>>> ModeSelect_v2

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
<<<<<<< HEAD
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800373e:	b29b      	uxth	r3, r3
 8003740:	2bff      	cmp	r3, #255	; 0xff
 8003742:	d90e      	bls.n	8003762 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	22ff      	movs	r2, #255	; 0xff
 8003748:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800374e:	b2da      	uxtb	r2, r3
 8003750:	8979      	ldrh	r1, [r7, #10]
 8003752:	4b52      	ldr	r3, [pc, #328]	; (800389c <HAL_I2C_Master_Receive+0x1e4>)
 8003754:	9300      	str	r3, [sp, #0]
 8003756:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f000 fae8 	bl	8003d30 <I2C_TransferConfig>
 8003760:	e06d      	b.n	800383e <HAL_I2C_Master_Receive+0x186>
=======
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	2bff      	cmp	r3, #255	; 0xff
 80027ce:	d90e      	bls.n	80027ee <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	22ff      	movs	r2, #255	; 0xff
 80027d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027da:	b2da      	uxtb	r2, r3
 80027dc:	8979      	ldrh	r1, [r7, #10]
 80027de:	4b52      	ldr	r3, [pc, #328]	; (8002928 <HAL_I2C_Master_Receive+0x1e4>)
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f000 fae8 	bl	8002dbc <I2C_TransferConfig>
 80027ec:	e06d      	b.n	80028ca <HAL_I2C_Master_Receive+0x186>
>>>>>>> ModeSelect_v2
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
<<<<<<< HEAD
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003766:	b29a      	uxth	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003770:	b2da      	uxtb	r2, r3
 8003772:	8979      	ldrh	r1, [r7, #10]
 8003774:	4b49      	ldr	r3, [pc, #292]	; (800389c <HAL_I2C_Master_Receive+0x1e4>)
 8003776:	9300      	str	r3, [sp, #0]
 8003778:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800377c:	68f8      	ldr	r0, [r7, #12]
 800377e:	f000 fad7 	bl	8003d30 <I2C_TransferConfig>
=======
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	8979      	ldrh	r1, [r7, #10]
 8002800:	4b49      	ldr	r3, [pc, #292]	; (8002928 <HAL_I2C_Master_Receive+0x1e4>)
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f000 fad7 	bl	8002dbc <I2C_TransferConfig>
>>>>>>> ModeSelect_v2
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
<<<<<<< HEAD
 8003782:	e05c      	b.n	800383e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	6a39      	ldr	r1, [r7, #32]
 8003788:	68f8      	ldr	r0, [r7, #12]
 800378a:	f000 f96b 	bl	8003a64 <I2C_WaitOnRXNEFlagUntilTimeout>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d001      	beq.n	8003798 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e07c      	b.n	8003892 <HAL_I2C_Master_Receive+0x1da>
=======
 800280e:	e05c      	b.n	80028ca <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	6a39      	ldr	r1, [r7, #32]
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f000 f96b 	bl	8002af0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e07c      	b.n	800291e <HAL_I2C_Master_Receive+0x1da>
>>>>>>> ModeSelect_v2
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
<<<<<<< HEAD
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a2:	b2d2      	uxtb	r2, r2
 80037a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037aa:	1c5a      	adds	r2, r3, #1
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b4:	3b01      	subs	r3, #1
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	3b01      	subs	r3, #1
 80037c4:	b29a      	uxth	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d034      	beq.n	800383e <HAL_I2C_Master_Receive+0x186>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d130      	bne.n	800383e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	9300      	str	r3, [sp, #0]
 80037e0:	6a3b      	ldr	r3, [r7, #32]
 80037e2:	2200      	movs	r2, #0
 80037e4:	2180      	movs	r1, #128	; 0x80
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f000 f880 	bl	80038ec <I2C_WaitOnFlagUntilTimeout>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e04d      	b.n	8003892 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	2bff      	cmp	r3, #255	; 0xff
 80037fe:	d90e      	bls.n	800381e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	22ff      	movs	r2, #255	; 0xff
 8003804:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800380a:	b2da      	uxtb	r2, r3
 800380c:	8979      	ldrh	r1, [r7, #10]
 800380e:	2300      	movs	r3, #0
 8003810:	9300      	str	r3, [sp, #0]
 8003812:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	f000 fa8a 	bl	8003d30 <I2C_TransferConfig>
 800381c:	e00f      	b.n	800383e <HAL_I2C_Master_Receive+0x186>
=======
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282e:	b2d2      	uxtb	r2, r2
 8002830:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002836:	1c5a      	adds	r2, r3, #1
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002840:	3b01      	subs	r3, #1
 8002842:	b29a      	uxth	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800284c:	b29b      	uxth	r3, r3
 800284e:	3b01      	subs	r3, #1
 8002850:	b29a      	uxth	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800285a:	b29b      	uxth	r3, r3
 800285c:	2b00      	cmp	r3, #0
 800285e:	d034      	beq.n	80028ca <HAL_I2C_Master_Receive+0x186>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002864:	2b00      	cmp	r3, #0
 8002866:	d130      	bne.n	80028ca <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	9300      	str	r3, [sp, #0]
 800286c:	6a3b      	ldr	r3, [r7, #32]
 800286e:	2200      	movs	r2, #0
 8002870:	2180      	movs	r1, #128	; 0x80
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f000 f880 	bl	8002978 <I2C_WaitOnFlagUntilTimeout>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e04d      	b.n	800291e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002886:	b29b      	uxth	r3, r3
 8002888:	2bff      	cmp	r3, #255	; 0xff
 800288a:	d90e      	bls.n	80028aa <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	22ff      	movs	r2, #255	; 0xff
 8002890:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002896:	b2da      	uxtb	r2, r3
 8002898:	8979      	ldrh	r1, [r7, #10]
 800289a:	2300      	movs	r3, #0
 800289c:	9300      	str	r3, [sp, #0]
 800289e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f000 fa8a 	bl	8002dbc <I2C_TransferConfig>
 80028a8:	e00f      	b.n	80028ca <HAL_I2C_Master_Receive+0x186>
>>>>>>> ModeSelect_v2
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
<<<<<<< HEAD
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003822:	b29a      	uxth	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800382c:	b2da      	uxtb	r2, r3
 800382e:	8979      	ldrh	r1, [r7, #10]
 8003830:	2300      	movs	r3, #0
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f000 fa79 	bl	8003d30 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003842:	b29b      	uxth	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	d19d      	bne.n	8003784 <HAL_I2C_Master_Receive+0xcc>
=======
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	8979      	ldrh	r1, [r7, #10]
 80028bc:	2300      	movs	r3, #0
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f000 fa79 	bl	8002dbc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d19d      	bne.n	8002810 <HAL_I2C_Master_Receive+0xcc>
>>>>>>> ModeSelect_v2
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	6a39      	ldr	r1, [r7, #32]
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f000 f8cd 	bl	80039ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d001      	beq.n	800385c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e01a      	b.n	8003892 <HAL_I2C_Master_Receive+0x1da>
=======
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	6a39      	ldr	r1, [r7, #32]
 80028d8:	68f8      	ldr	r0, [r7, #12]
 80028da:	f000 f8cd 	bl	8002a78 <I2C_WaitOnSTOPFlagUntilTimeout>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e01a      	b.n	800291e <HAL_I2C_Master_Receive+0x1da>
>>>>>>> ModeSelect_v2
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
<<<<<<< HEAD
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2220      	movs	r2, #32
 8003862:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	6859      	ldr	r1, [r3, #4]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	4b0c      	ldr	r3, [pc, #48]	; (80038a0 <HAL_I2C_Master_Receive+0x1e8>)
 8003870:	400b      	ands	r3, r1
 8003872:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2220      	movs	r2, #32
 8003878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800388c:	2300      	movs	r3, #0
 800388e:	e000      	b.n	8003892 <HAL_I2C_Master_Receive+0x1da>
=======
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2220      	movs	r2, #32
 80028ee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6859      	ldr	r1, [r3, #4]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	4b0c      	ldr	r3, [pc, #48]	; (800292c <HAL_I2C_Master_Receive+0x1e8>)
 80028fc:	400b      	ands	r3, r1
 80028fe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2220      	movs	r2, #32
 8002904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002918:	2300      	movs	r3, #0
 800291a:	e000      	b.n	800291e <HAL_I2C_Master_Receive+0x1da>
>>>>>>> ModeSelect_v2
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8003890:	2302      	movs	r3, #2
  }
}
 8003892:	4618      	mov	r0, r3
 8003894:	3718      	adds	r7, #24
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	80002400 	.word	0x80002400
 80038a0:	fe00e800 	.word	0xfe00e800

080038a4 <I2C_Flush_TXDR>:
=======
 800291c:	2302      	movs	r3, #2
  }
}
 800291e:	4618      	mov	r0, r3
 8002920:	3718      	adds	r7, #24
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	80002400 	.word	0x80002400
 800292c:	fe00e800 	.word	0xfe00e800

08002930 <I2C_Flush_TXDR>:
>>>>>>> ModeSelect_v2
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d103      	bne.n	80038c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2200      	movs	r2, #0
 80038c0:	629a      	str	r2, [r3, #40]	; 0x28
=======
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b02      	cmp	r3, #2
 8002944:	d103      	bne.n	800294e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2200      	movs	r2, #0
 800294c:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> ModeSelect_v2
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
<<<<<<< HEAD
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d007      	beq.n	80038e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	699a      	ldr	r2, [r3, #24]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f042 0201 	orr.w	r2, r2, #1
 80038de:	619a      	str	r2, [r3, #24]
  }
}
 80038e0:	bf00      	nop
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <I2C_WaitOnFlagUntilTimeout>:
=======
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	2b01      	cmp	r3, #1
 800295a:	d007      	beq.n	800296c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	699a      	ldr	r2, [r3, #24]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f042 0201 	orr.w	r2, r2, #1
 800296a:	619a      	str	r2, [r3, #24]
  }
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <I2C_WaitOnFlagUntilTimeout>:
>>>>>>> ModeSelect_v2
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	603b      	str	r3, [r7, #0]
 80038f8:	4613      	mov	r3, r2
 80038fa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038fc:	e022      	b.n	8003944 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003904:	d01e      	beq.n	8003944 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003906:	f7ff f97d 	bl	8002c04 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	429a      	cmp	r2, r3
 8003914:	d302      	bcc.n	800391c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d113      	bne.n	8003944 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003920:	f043 0220 	orr.w	r2, r3, #32
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2220      	movs	r2, #32
 800392c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e00f      	b.n	8003964 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	699a      	ldr	r2, [r3, #24]
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	4013      	ands	r3, r2
 800394e:	68ba      	ldr	r2, [r7, #8]
 8003950:	429a      	cmp	r2, r3
 8003952:	bf0c      	ite	eq
 8003954:	2301      	moveq	r3, #1
 8003956:	2300      	movne	r3, #0
 8003958:	b2db      	uxtb	r3, r3
 800395a:	461a      	mov	r2, r3
 800395c:	79fb      	ldrb	r3, [r7, #7]
 800395e:	429a      	cmp	r2, r3
 8003960:	d0cd      	beq.n	80038fe <I2C_WaitOnFlagUntilTimeout+0x12>
=======
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	603b      	str	r3, [r7, #0]
 8002984:	4613      	mov	r3, r2
 8002986:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002988:	e022      	b.n	80029d0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002990:	d01e      	beq.n	80029d0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002992:	f7ff f995 	bl	8001cc0 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d302      	bcc.n	80029a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d113      	bne.n	80029d0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ac:	f043 0220 	orr.w	r2, r3, #32
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2220      	movs	r2, #32
 80029b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e00f      	b.n	80029f0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	699a      	ldr	r2, [r3, #24]
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	4013      	ands	r3, r2
 80029da:	68ba      	ldr	r2, [r7, #8]
 80029dc:	429a      	cmp	r2, r3
 80029de:	bf0c      	ite	eq
 80029e0:	2301      	moveq	r3, #1
 80029e2:	2300      	movne	r3, #0
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	461a      	mov	r2, r3
 80029e8:	79fb      	ldrb	r3, [r7, #7]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d0cd      	beq.n	800298a <I2C_WaitOnFlagUntilTimeout+0x12>
>>>>>>> ModeSelect_v2
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <I2C_WaitOnTXISFlagUntilTimeout>:
=======
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <I2C_WaitOnTXISFlagUntilTimeout>:
>>>>>>> ModeSelect_v2
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
<<<<<<< HEAD
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003978:	e02c      	b.n	80039d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	68b9      	ldr	r1, [r7, #8]
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f000 f8ea 	bl	8003b58 <I2C_IsErrorOccurred>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e02a      	b.n	80039e4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
=======
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a04:	e02c      	b.n	8002a60 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	68b9      	ldr	r1, [r7, #8]
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f000 f8ea 	bl	8002be4 <I2C_IsErrorOccurred>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e02a      	b.n	8002a70 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
>>>>>>> ModeSelect_v2
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
<<<<<<< HEAD
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003994:	d01e      	beq.n	80039d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003996:	f7ff f935 	bl	8002c04 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	68ba      	ldr	r2, [r7, #8]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d302      	bcc.n	80039ac <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d113      	bne.n	80039d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b0:	f043 0220 	orr.w	r2, r3, #32
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2220      	movs	r2, #32
 80039bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e007      	b.n	80039e4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d1cb      	bne.n	800397a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
=======
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a20:	d01e      	beq.n	8002a60 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a22:	f7ff f94d 	bl	8001cc0 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	68ba      	ldr	r2, [r7, #8]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d302      	bcc.n	8002a38 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d113      	bne.n	8002a60 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3c:	f043 0220 	orr.w	r2, r3, #32
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2220      	movs	r2, #32
 8002a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e007      	b.n	8002a70 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d1cb      	bne.n	8002a06 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
>>>>>>> ModeSelect_v2
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <I2C_WaitOnSTOPFlagUntilTimeout>:
=======
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3710      	adds	r7, #16
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <I2C_WaitOnSTOPFlagUntilTimeout>:
>>>>>>> ModeSelect_v2
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
<<<<<<< HEAD
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039f8:	e028      	b.n	8003a4c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	68b9      	ldr	r1, [r7, #8]
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f000 f8aa 	bl	8003b58 <I2C_IsErrorOccurred>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e026      	b.n	8003a5c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
=======
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a84:	e028      	b.n	8002ad8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	68b9      	ldr	r1, [r7, #8]
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f000 f8aa 	bl	8002be4 <I2C_IsErrorOccurred>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e026      	b.n	8002ae8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
>>>>>>> ModeSelect_v2
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
<<<<<<< HEAD
 8003a0e:	f7ff f8f9 	bl	8002c04 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	68ba      	ldr	r2, [r7, #8]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d302      	bcc.n	8003a24 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d113      	bne.n	8003a4c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a28:	f043 0220 	orr.w	r2, r3, #32
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2220      	movs	r2, #32
 8003a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e007      	b.n	8003a5c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	f003 0320 	and.w	r3, r3, #32
 8003a56:	2b20      	cmp	r3, #32
 8003a58:	d1cf      	bne.n	80039fa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <I2C_WaitOnRXNEFlagUntilTimeout>:
=======
 8002a9a:	f7ff f911 	bl	8001cc0 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	68ba      	ldr	r2, [r7, #8]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d302      	bcc.n	8002ab0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d113      	bne.n	8002ad8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab4:	f043 0220 	orr.w	r2, r3, #32
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e007      	b.n	8002ae8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	f003 0320 	and.w	r3, r3, #32
 8002ae2:	2b20      	cmp	r3, #32
 8002ae4:	d1cf      	bne.n	8002a86 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <I2C_WaitOnRXNEFlagUntilTimeout>:
>>>>>>> ModeSelect_v2
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
<<<<<<< HEAD
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a70:	e064      	b.n	8003b3c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	68b9      	ldr	r1, [r7, #8]
 8003a76:	68f8      	ldr	r0, [r7, #12]
 8003a78:	f000 f86e 	bl	8003b58 <I2C_IsErrorOccurred>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e062      	b.n	8003b4c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
=======
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002afc:	e064      	b.n	8002bc8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	68b9      	ldr	r1, [r7, #8]
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f000 f86e 	bl	8002be4 <I2C_IsErrorOccurred>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e062      	b.n	8002bd8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
>>>>>>> ModeSelect_v2
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
<<<<<<< HEAD
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	f003 0320 	and.w	r3, r3, #32
 8003a90:	2b20      	cmp	r3, #32
 8003a92:	d138      	bne.n	8003b06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
=======
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	f003 0320 	and.w	r3, r3, #32
 8002b1c:	2b20      	cmp	r3, #32
 8002b1e:	d138      	bne.n	8002b92 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
>>>>>>> ModeSelect_v2
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
<<<<<<< HEAD
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	f003 0304 	and.w	r3, r3, #4
 8003a9e:	2b04      	cmp	r3, #4
 8003aa0:	d105      	bne.n	8003aae <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d001      	beq.n	8003aae <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
=======
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	f003 0304 	and.w	r3, r3, #4
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	d105      	bne.n	8002b3a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
>>>>>>> ModeSelect_v2
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
<<<<<<< HEAD
 8003aaa:	2300      	movs	r3, #0
 8003aac:	e04e      	b.n	8003b4c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
=======
 8002b36:	2300      	movs	r3, #0
 8002b38:	e04e      	b.n	8002bd8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
>>>>>>> ModeSelect_v2
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
<<<<<<< HEAD
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	f003 0310 	and.w	r3, r3, #16
 8003ab8:	2b10      	cmp	r3, #16
 8003aba:	d107      	bne.n	8003acc <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2210      	movs	r2, #16
 8003ac2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2204      	movs	r2, #4
 8003ac8:	645a      	str	r2, [r3, #68]	; 0x44
 8003aca:	e002      	b.n	8003ad2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
=======
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	f003 0310 	and.w	r3, r3, #16
 8002b44:	2b10      	cmp	r3, #16
 8002b46:	d107      	bne.n	8002b58 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2210      	movs	r2, #16
 8002b4e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2204      	movs	r2, #4
 8002b54:	645a      	str	r2, [r3, #68]	; 0x44
 8002b56:	e002      	b.n	8002b5e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
>>>>>>> ModeSelect_v2
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
<<<<<<< HEAD
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	645a      	str	r2, [r3, #68]	; 0x44
=======
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> ModeSelect_v2
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
<<<<<<< HEAD
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	6859      	ldr	r1, [r3, #4]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	4b1b      	ldr	r3, [pc, #108]	; (8003b54 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8003ae6:	400b      	ands	r3, r1
 8003ae8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2220      	movs	r2, #32
 8003aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e022      	b.n	8003b4c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
=======
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2220      	movs	r2, #32
 8002b64:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6859      	ldr	r1, [r3, #4]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	4b1b      	ldr	r3, [pc, #108]	; (8002be0 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8002b72:	400b      	ands	r3, r1
 8002b74:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2220      	movs	r2, #32
 8002b7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e022      	b.n	8002bd8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
>>>>>>> ModeSelect_v2
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
<<<<<<< HEAD
 8003b06:	f7ff f87d 	bl	8002c04 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	68ba      	ldr	r2, [r7, #8]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d302      	bcc.n	8003b1c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d10f      	bne.n	8003b3c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b20:	f043 0220 	orr.w	r2, r3, #32
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e007      	b.n	8003b4c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	f003 0304 	and.w	r3, r3, #4
 8003b46:	2b04      	cmp	r3, #4
 8003b48:	d193      	bne.n	8003a72 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3710      	adds	r7, #16
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	fe00e800 	.word	0xfe00e800

08003b58 <I2C_IsErrorOccurred>:
=======
 8002b92:	f7ff f895 	bl	8001cc0 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	68ba      	ldr	r2, [r7, #8]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d302      	bcc.n	8002ba8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d10f      	bne.n	8002bc8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bac:	f043 0220 	orr.w	r2, r3, #32
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2220      	movs	r2, #32
 8002bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e007      	b.n	8002bd8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	f003 0304 	and.w	r3, r3, #4
 8002bd2:	2b04      	cmp	r3, #4
 8002bd4:	d193      	bne.n	8002afe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	fe00e800 	.word	0xfe00e800

08002be4 <I2C_IsErrorOccurred>:
>>>>>>> ModeSelect_v2
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b08a      	sub	sp, #40	; 0x28
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b64:	2300      	movs	r3, #0
 8003b66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003b72:	2300      	movs	r3, #0
 8003b74:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	61fb      	str	r3, [r7, #28]
=======
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b08a      	sub	sp, #40	; 0x28
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	61fb      	str	r3, [r7, #28]
>>>>>>> ModeSelect_v2
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
<<<<<<< HEAD
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	f003 0310 	and.w	r3, r3, #16
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d075      	beq.n	8003c70 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2210      	movs	r2, #16
 8003b8a:	61da      	str	r2, [r3, #28]
=======
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	f003 0310 	and.w	r3, r3, #16
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d075      	beq.n	8002cfc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2210      	movs	r2, #16
 8002c16:	61da      	str	r2, [r3, #28]
>>>>>>> ModeSelect_v2

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
<<<<<<< HEAD
 8003b8c:	e056      	b.n	8003c3c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b94:	d052      	beq.n	8003c3c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b96:	f7ff f835 	bl	8002c04 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d302      	bcc.n	8003bac <I2C_IsErrorOccurred+0x54>
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d147      	bne.n	8003c3c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bb6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003bbe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bce:	d12e      	bne.n	8003c2e <I2C_IsErrorOccurred+0xd6>
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bd6:	d02a      	beq.n	8003c2e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003bd8:	7cfb      	ldrb	r3, [r7, #19]
 8003bda:	2b20      	cmp	r3, #32
 8003bdc:	d027      	beq.n	8003c2e <I2C_IsErrorOccurred+0xd6>
=======
 8002c18:	e056      	b.n	8002cc8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c20:	d052      	beq.n	8002cc8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c22:	f7ff f84d 	bl	8001cc0 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	68ba      	ldr	r2, [r7, #8]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d302      	bcc.n	8002c38 <I2C_IsErrorOccurred+0x54>
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d147      	bne.n	8002cc8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c42:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c4a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c5a:	d12e      	bne.n	8002cba <I2C_IsErrorOccurred+0xd6>
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c62:	d02a      	beq.n	8002cba <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002c64:	7cfb      	ldrb	r3, [r7, #19]
 8002c66:	2b20      	cmp	r3, #32
 8002c68:	d027      	beq.n	8002cba <I2C_IsErrorOccurred+0xd6>
>>>>>>> ModeSelect_v2
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
<<<<<<< HEAD
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	685a      	ldr	r2, [r3, #4]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bec:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003bee:	f7ff f809 	bl	8002c04 <HAL_GetTick>
 8003bf2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bf4:	e01b      	b.n	8003c2e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003bf6:	f7ff f805 	bl	8002c04 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	2b19      	cmp	r3, #25
 8003c02:	d914      	bls.n	8003c2e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c08:	f043 0220 	orr.w	r2, r3, #32
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2220      	movs	r2, #32
 8003c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	f003 0320 	and.w	r3, r3, #32
 8003c38:	2b20      	cmp	r3, #32
 8003c3a:	d1dc      	bne.n	8003bf6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	f003 0320 	and.w	r3, r3, #32
 8003c46:	2b20      	cmp	r3, #32
 8003c48:	d003      	beq.n	8003c52 <I2C_IsErrorOccurred+0xfa>
 8003c4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d09d      	beq.n	8003b8e <I2C_IsErrorOccurred+0x36>
=======
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	685a      	ldr	r2, [r3, #4]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c78:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002c7a:	f7ff f821 	bl	8001cc0 <HAL_GetTick>
 8002c7e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c80:	e01b      	b.n	8002cba <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002c82:	f7ff f81d 	bl	8001cc0 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b19      	cmp	r3, #25
 8002c8e:	d914      	bls.n	8002cba <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c94:	f043 0220 	orr.w	r2, r3, #32
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	f003 0320 	and.w	r3, r3, #32
 8002cc4:	2b20      	cmp	r3, #32
 8002cc6:	d1dc      	bne.n	8002c82 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	f003 0320 	and.w	r3, r3, #32
 8002cd2:	2b20      	cmp	r3, #32
 8002cd4:	d003      	beq.n	8002cde <I2C_IsErrorOccurred+0xfa>
 8002cd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d09d      	beq.n	8002c1a <I2C_IsErrorOccurred+0x36>
>>>>>>> ModeSelect_v2
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
<<<<<<< HEAD
 8003c52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d103      	bne.n	8003c62 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003c62:	6a3b      	ldr	r3, [r7, #32]
 8003c64:	f043 0304 	orr.w	r3, r3, #4
 8003c68:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
=======
 8002cde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d103      	bne.n	8002cee <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2220      	movs	r2, #32
 8002cec:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002cee:	6a3b      	ldr	r3, [r7, #32]
 8002cf0:	f043 0304 	orr.w	r3, r3, #4
 8002cf4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
>>>>>>> ModeSelect_v2
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
<<<<<<< HEAD
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	61bb      	str	r3, [r7, #24]
=======
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	61bb      	str	r3, [r7, #24]
>>>>>>> ModeSelect_v2

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
<<<<<<< HEAD
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00b      	beq.n	8003c9a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003c82:	6a3b      	ldr	r3, [r7, #32]
 8003c84:	f043 0301 	orr.w	r3, r3, #1
 8003c88:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c92:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
=======
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00b      	beq.n	8002d26 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002d0e:	6a3b      	ldr	r3, [r7, #32]
 8002d10:	f043 0301 	orr.w	r3, r3, #1
 8002d14:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d1e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
>>>>>>> ModeSelect_v2
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
<<<<<<< HEAD
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00b      	beq.n	8003cbc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003ca4:	6a3b      	ldr	r3, [r7, #32]
 8003ca6:	f043 0308 	orr.w	r3, r3, #8
 8003caa:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003cb4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
=======
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00b      	beq.n	8002d48 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002d30:	6a3b      	ldr	r3, [r7, #32]
 8002d32:	f043 0308 	orr.w	r3, r3, #8
 8002d36:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d40:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
>>>>>>> ModeSelect_v2
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
<<<<<<< HEAD
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00b      	beq.n	8003cde <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003cc6:	6a3b      	ldr	r3, [r7, #32]
 8003cc8:	f043 0302 	orr.w	r3, r3, #2
 8003ccc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cd6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003cde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d01c      	beq.n	8003d20 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f7ff fddc 	bl	80038a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	6859      	ldr	r1, [r3, #4]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	4b0d      	ldr	r3, [pc, #52]	; (8003d2c <I2C_IsErrorOccurred+0x1d4>)
 8003cf8:	400b      	ands	r3, r1
 8003cfa:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d00:	6a3b      	ldr	r3, [r7, #32]
 8003d02:	431a      	orrs	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2220      	movs	r2, #32
 8003d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003d20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3728      	adds	r7, #40	; 0x28
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	fe00e800 	.word	0xfe00e800

08003d30 <I2C_TransferConfig>:
=======
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00b      	beq.n	8002d6a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002d52:	6a3b      	ldr	r3, [r7, #32]
 8002d54:	f043 0302 	orr.w	r3, r3, #2
 8002d58:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d62:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002d6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d01c      	beq.n	8002dac <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f7ff fddc 	bl	8002930 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6859      	ldr	r1, [r3, #4]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	4b0d      	ldr	r3, [pc, #52]	; (8002db8 <I2C_IsErrorOccurred+0x1d4>)
 8002d84:	400b      	ands	r3, r1
 8002d86:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2220      	movs	r2, #32
 8002d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002dac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3728      	adds	r7, #40	; 0x28
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	fe00e800 	.word	0xfe00e800

08002dbc <I2C_TransferConfig>:
>>>>>>> ModeSelect_v2
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
<<<<<<< HEAD
 8003d30:	b480      	push	{r7}
 8003d32:	b087      	sub	sp, #28
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	607b      	str	r3, [r7, #4]
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	817b      	strh	r3, [r7, #10]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	727b      	strb	r3, [r7, #9]
=======
 8002dbc:	b480      	push	{r7}
 8002dbe:	b087      	sub	sp, #28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	607b      	str	r3, [r7, #4]
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	817b      	strh	r3, [r7, #10]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	727b      	strb	r3, [r7, #9]
>>>>>>> ModeSelect_v2
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
<<<<<<< HEAD
 8003d42:	897b      	ldrh	r3, [r7, #10]
 8003d44:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d48:	7a7b      	ldrb	r3, [r7, #9]
 8003d4a:	041b      	lsls	r3, r3, #16
 8003d4c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d50:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d56:	6a3b      	ldr	r3, [r7, #32]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d5e:	617b      	str	r3, [r7, #20]
=======
 8002dce:	897b      	ldrh	r3, [r7, #10]
 8002dd0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002dd4:	7a7b      	ldrb	r3, [r7, #9]
 8002dd6:	041b      	lsls	r3, r3, #16
 8002dd8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ddc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002de2:	6a3b      	ldr	r3, [r7, #32]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002dea:	617b      	str	r3, [r7, #20]
>>>>>>> ModeSelect_v2
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
<<<<<<< HEAD
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	6a3b      	ldr	r3, [r7, #32]
 8003d68:	0d5b      	lsrs	r3, r3, #21
 8003d6a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003d6e:	4b08      	ldr	r3, [pc, #32]	; (8003d90 <I2C_TransferConfig+0x60>)
 8003d70:	430b      	orrs	r3, r1
 8003d72:	43db      	mvns	r3, r3
 8003d74:	ea02 0103 	and.w	r1, r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	605a      	str	r2, [r3, #4]
=======
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	6a3b      	ldr	r3, [r7, #32]
 8002df4:	0d5b      	lsrs	r3, r3, #21
 8002df6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002dfa:	4b08      	ldr	r3, [pc, #32]	; (8002e1c <I2C_TransferConfig+0x60>)
 8002dfc:	430b      	orrs	r3, r1
 8002dfe:	43db      	mvns	r3, r3
 8002e00:	ea02 0103 	and.w	r1, r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	605a      	str	r2, [r3, #4]
>>>>>>> ModeSelect_v2
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
<<<<<<< HEAD
 8003d82:	bf00      	nop
 8003d84:	371c      	adds	r7, #28
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	03ff63ff 	.word	0x03ff63ff

08003d94 <HAL_I2CEx_ConfigAnalogFilter>:
=======
 8002e0e:	bf00      	nop
 8002e10:	371c      	adds	r7, #28
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	03ff63ff 	.word	0x03ff63ff

08002e20 <HAL_I2CEx_ConfigAnalogFilter>:
>>>>>>> ModeSelect_v2
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
<<<<<<< HEAD
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
=======
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
>>>>>>> ModeSelect_v2
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
<<<<<<< HEAD
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b20      	cmp	r3, #32
 8003da8:	d138      	bne.n	8003e1c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d101      	bne.n	8003db8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003db4:	2302      	movs	r3, #2
 8003db6:	e032      	b.n	8003e1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2224      	movs	r2, #36	; 0x24
 8003dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f022 0201 	bic.w	r2, r2, #1
 8003dd6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003de6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	6819      	ldr	r1, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	430a      	orrs	r2, r1
 8003df6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f042 0201 	orr.w	r2, r2, #1
 8003e06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	e000      	b.n	8003e1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
=======
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b20      	cmp	r3, #32
 8002e34:	d138      	bne.n	8002ea8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d101      	bne.n	8002e44 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e40:	2302      	movs	r3, #2
 8002e42:	e032      	b.n	8002eaa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2224      	movs	r2, #36	; 0x24
 8002e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 0201 	bic.w	r2, r2, #1
 8002e62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e72:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6819      	ldr	r1, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	430a      	orrs	r2, r1
 8002e82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f042 0201 	orr.w	r2, r2, #1
 8002e92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2220      	movs	r2, #32
 8002e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	e000      	b.n	8002eaa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
>>>>>>> ModeSelect_v2
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8003e1c:	2302      	movs	r3, #2
  }
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <HAL_I2CEx_ConfigDigitalFilter>:
=======
 8002ea8:	2302      	movs	r3, #2
  }
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr

08002eb6 <HAL_I2CEx_ConfigDigitalFilter>:
>>>>>>> ModeSelect_v2
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
<<<<<<< HEAD
 8003e2a:	b480      	push	{r7}
 8003e2c:	b085      	sub	sp, #20
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
 8003e32:	6039      	str	r1, [r7, #0]
=======
 8002eb6:	b480      	push	{r7}
 8002eb8:	b085      	sub	sp, #20
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
 8002ebe:	6039      	str	r1, [r7, #0]
>>>>>>> ModeSelect_v2

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
<<<<<<< HEAD
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2b20      	cmp	r3, #32
 8003e3e:	d139      	bne.n	8003eb4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d101      	bne.n	8003e4e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	e033      	b.n	8003eb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2224      	movs	r2, #36	; 0x24
 8003e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f022 0201 	bic.w	r2, r2, #1
 8003e6c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003e7c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	021b      	lsls	r3, r3, #8
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f042 0201 	orr.w	r2, r2, #1
 8003e9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	e000      	b.n	8003eb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
=======
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b20      	cmp	r3, #32
 8002eca:	d139      	bne.n	8002f40 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d101      	bne.n	8002eda <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	e033      	b.n	8002f42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2224      	movs	r2, #36	; 0x24
 8002ee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 0201 	bic.w	r2, r2, #1
 8002ef8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f08:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	021b      	lsls	r3, r3, #8
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f042 0201 	orr.w	r2, r2, #1
 8002f2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	e000      	b.n	8002f42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
>>>>>>> ModeSelect_v2
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8003eb4:	2302      	movs	r3, #2
  }
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3714      	adds	r7, #20
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
	...

08003ec4 <HAL_PWREx_GetVoltageRange>:
=======
 8002f40:	2302      	movs	r3, #2
  }
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3714      	adds	r7, #20
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
	...

08002f50 <HAL_PWREx_GetVoltageRange>:
>>>>>>> ModeSelect_v2
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
<<<<<<< HEAD
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ec8:	4b0d      	ldr	r3, [pc, #52]	; (8003f00 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ed0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ed4:	d102      	bne.n	8003edc <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003ed6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003eda:	e00b      	b.n	8003ef4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003edc:	4b08      	ldr	r3, [pc, #32]	; (8003f00 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003ede:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eea:	d102      	bne.n	8003ef2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003eec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ef0:	e000      	b.n	8003ef4 <HAL_PWREx_GetVoltageRange+0x30>
=======
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f54:	4b0d      	ldr	r3, [pc, #52]	; (8002f8c <HAL_PWREx_GetVoltageRange+0x3c>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f60:	d102      	bne.n	8002f68 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002f62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f66:	e00b      	b.n	8002f80 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002f68:	4b08      	ldr	r3, [pc, #32]	; (8002f8c <HAL_PWREx_GetVoltageRange+0x3c>)
 8002f6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f76:	d102      	bne.n	8002f7e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002f78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f7c:	e000      	b.n	8002f80 <HAL_PWREx_GetVoltageRange+0x30>
>>>>>>> ModeSelect_v2
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
<<<<<<< HEAD
 8003ef2:	2300      	movs	r3, #0
=======
 8002f7e:	2300      	movs	r3, #0
>>>>>>> ModeSelect_v2
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
<<<<<<< HEAD
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	40007000 	.word	0x40007000

08003f04 <HAL_PWREx_ControlVoltageScaling>:
=======
 8002f80:	4618      	mov	r0, r3
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	40007000 	.word	0x40007000

08002f90 <HAL_PWREx_ControlVoltageScaling>:
>>>>>>> ModeSelect_v2
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
<<<<<<< HEAD
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
=======
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
>>>>>>> ModeSelect_v2
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
<<<<<<< HEAD
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d141      	bne.n	8003f96 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f12:	4b4b      	ldr	r3, [pc, #300]	; (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f1e:	d131      	bne.n	8003f84 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f20:	4b47      	ldr	r3, [pc, #284]	; (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f26:	4a46      	ldr	r2, [pc, #280]	; (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f30:	4b43      	ldr	r3, [pc, #268]	; (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f38:	4a41      	ldr	r2, [pc, #260]	; (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f3e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003f40:	4b40      	ldr	r3, [pc, #256]	; (8004044 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2232      	movs	r2, #50	; 0x32
 8003f46:	fb02 f303 	mul.w	r3, r2, r3
 8003f4a:	4a3f      	ldr	r2, [pc, #252]	; (8004048 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f50:	0c9b      	lsrs	r3, r3, #18
 8003f52:	3301      	adds	r3, #1
 8003f54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f56:	e002      	b.n	8003f5e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f5e:	4b38      	ldr	r3, [pc, #224]	; (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f6a:	d102      	bne.n	8003f72 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1f2      	bne.n	8003f58 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f72:	4b33      	ldr	r3, [pc, #204]	; (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f7e:	d158      	bne.n	8004032 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e057      	b.n	8004034 <HAL_PWREx_ControlVoltageScaling+0x130>
=======
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d141      	bne.n	8003022 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f9e:	4b4b      	ldr	r3, [pc, #300]	; (80030cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002fa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002faa:	d131      	bne.n	8003010 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fac:	4b47      	ldr	r3, [pc, #284]	; (80030cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fb2:	4a46      	ldr	r2, [pc, #280]	; (80030cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fb8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fbc:	4b43      	ldr	r3, [pc, #268]	; (80030cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002fc4:	4a41      	ldr	r2, [pc, #260]	; (80030cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002fcc:	4b40      	ldr	r3, [pc, #256]	; (80030d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2232      	movs	r2, #50	; 0x32
 8002fd2:	fb02 f303 	mul.w	r3, r2, r3
 8002fd6:	4a3f      	ldr	r2, [pc, #252]	; (80030d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fdc:	0c9b      	lsrs	r3, r3, #18
 8002fde:	3301      	adds	r3, #1
 8002fe0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fe2:	e002      	b.n	8002fea <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fea:	4b38      	ldr	r3, [pc, #224]	; (80030cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ff2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ff6:	d102      	bne.n	8002ffe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1f2      	bne.n	8002fe4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ffe:	4b33      	ldr	r3, [pc, #204]	; (80030cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003006:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800300a:	d158      	bne.n	80030be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e057      	b.n	80030c0 <HAL_PWREx_ControlVoltageScaling+0x130>
>>>>>>> ModeSelect_v2
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
<<<<<<< HEAD
 8003f84:	4b2e      	ldr	r3, [pc, #184]	; (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f8a:	4a2d      	ldr	r2, [pc, #180]	; (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003f94:	e04d      	b.n	8004032 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f9c:	d141      	bne.n	8004022 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f9e:	4b28      	ldr	r3, [pc, #160]	; (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003fa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003faa:	d131      	bne.n	8004010 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fac:	4b24      	ldr	r3, [pc, #144]	; (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fb2:	4a23      	ldr	r2, [pc, #140]	; (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fb8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fbc:	4b20      	ldr	r3, [pc, #128]	; (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003fc4:	4a1e      	ldr	r2, [pc, #120]	; (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003fcc:	4b1d      	ldr	r3, [pc, #116]	; (8004044 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2232      	movs	r2, #50	; 0x32
 8003fd2:	fb02 f303 	mul.w	r3, r2, r3
 8003fd6:	4a1c      	ldr	r2, [pc, #112]	; (8004048 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fdc:	0c9b      	lsrs	r3, r3, #18
 8003fde:	3301      	adds	r3, #1
 8003fe0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fe2:	e002      	b.n	8003fea <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fea:	4b15      	ldr	r3, [pc, #84]	; (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ff2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ff6:	d102      	bne.n	8003ffe <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1f2      	bne.n	8003fe4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ffe:	4b10      	ldr	r3, [pc, #64]	; (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004006:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800400a:	d112      	bne.n	8004032 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e011      	b.n	8004034 <HAL_PWREx_ControlVoltageScaling+0x130>
=======
 8003010:	4b2e      	ldr	r3, [pc, #184]	; (80030cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003012:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003016:	4a2d      	ldr	r2, [pc, #180]	; (80030cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003018:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800301c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003020:	e04d      	b.n	80030be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003028:	d141      	bne.n	80030ae <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800302a:	4b28      	ldr	r3, [pc, #160]	; (80030cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003032:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003036:	d131      	bne.n	800309c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003038:	4b24      	ldr	r3, [pc, #144]	; (80030cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800303a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800303e:	4a23      	ldr	r2, [pc, #140]	; (80030cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003044:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003048:	4b20      	ldr	r3, [pc, #128]	; (80030cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003050:	4a1e      	ldr	r2, [pc, #120]	; (80030cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003052:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003056:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003058:	4b1d      	ldr	r3, [pc, #116]	; (80030d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2232      	movs	r2, #50	; 0x32
 800305e:	fb02 f303 	mul.w	r3, r2, r3
 8003062:	4a1c      	ldr	r2, [pc, #112]	; (80030d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003064:	fba2 2303 	umull	r2, r3, r2, r3
 8003068:	0c9b      	lsrs	r3, r3, #18
 800306a:	3301      	adds	r3, #1
 800306c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800306e:	e002      	b.n	8003076 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	3b01      	subs	r3, #1
 8003074:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003076:	4b15      	ldr	r3, [pc, #84]	; (80030cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800307e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003082:	d102      	bne.n	800308a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1f2      	bne.n	8003070 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800308a:	4b10      	ldr	r3, [pc, #64]	; (80030cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003092:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003096:	d112      	bne.n	80030be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e011      	b.n	80030c0 <HAL_PWREx_ControlVoltageScaling+0x130>
>>>>>>> ModeSelect_v2
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
<<<<<<< HEAD
 8004010:	4b0b      	ldr	r3, [pc, #44]	; (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004012:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004016:	4a0a      	ldr	r2, [pc, #40]	; (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800401c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004020:	e007      	b.n	8004032 <HAL_PWREx_ControlVoltageScaling+0x12e>
=======
 800309c:	4b0b      	ldr	r3, [pc, #44]	; (80030cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800309e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030a2:	4a0a      	ldr	r2, [pc, #40]	; (80030cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80030ac:	e007      	b.n	80030be <HAL_PWREx_ControlVoltageScaling+0x12e>
>>>>>>> ModeSelect_v2
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
<<<<<<< HEAD
 8004022:	4b07      	ldr	r3, [pc, #28]	; (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800402a:	4a05      	ldr	r2, [pc, #20]	; (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800402c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004030:	6013      	str	r3, [r2, #0]
=======
 80030ae:	4b07      	ldr	r3, [pc, #28]	; (80030cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030b6:	4a05      	ldr	r2, [pc, #20]	; (80030cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030bc:	6013      	str	r3, [r2, #0]
>>>>>>> ModeSelect_v2
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
<<<<<<< HEAD
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	3714      	adds	r7, #20
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	40007000 	.word	0x40007000
 8004044:	20000004 	.word	0x20000004
 8004048:	431bde83 	.word	0x431bde83

0800404c <HAL_PWREx_EnableVddIO2>:
=======
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3714      	adds	r7, #20
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	40007000 	.word	0x40007000
 80030d0:	20000004 	.word	0x20000004
 80030d4:	431bde83 	.word	0x431bde83

080030d8 <HAL_PWREx_EnableVddIO2>:
>>>>>>> ModeSelect_v2
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
<<<<<<< HEAD
 800404c:	b480      	push	{r7}
 800404e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004050:	4b05      	ldr	r3, [pc, #20]	; (8004068 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	4a04      	ldr	r2, [pc, #16]	; (8004068 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004056:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800405a:	6053      	str	r3, [r2, #4]
}
 800405c:	bf00      	nop
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	40007000 	.word	0x40007000

0800406c <HAL_RCC_OscConfig>:
=======
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80030dc:	4b05      	ldr	r3, [pc, #20]	; (80030f4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	4a04      	ldr	r2, [pc, #16]	; (80030f4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80030e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030e6:	6053      	str	r3, [r2, #4]
}
 80030e8:	bf00      	nop
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	40007000 	.word	0x40007000

080030f8 <HAL_RCC_OscConfig>:
>>>>>>> ModeSelect_v2
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 800406c:	b580      	push	{r7, lr}
 800406e:	b08a      	sub	sp, #40	; 0x28
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
=======
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b08a      	sub	sp, #40	; 0x28
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
>>>>>>> ModeSelect_v2
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
<<<<<<< HEAD
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d102      	bne.n	8004080 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	f000 bc68 	b.w	8004950 <HAL_RCC_OscConfig+0x8e4>
=======
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d102      	bne.n	800310c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	f000 bc68 	b.w	80039dc <HAL_RCC_OscConfig+0x8e4>
>>>>>>> ModeSelect_v2
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< HEAD
 8004080:	4b97      	ldr	r3, [pc, #604]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f003 030c 	and.w	r3, r3, #12
 8004088:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800408a:	4b95      	ldr	r3, [pc, #596]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	f003 0303 	and.w	r3, r3, #3
 8004092:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0310 	and.w	r3, r3, #16
 800409c:	2b00      	cmp	r3, #0
 800409e:	f000 80e6 	beq.w	800426e <HAL_RCC_OscConfig+0x202>
=======
 800310c:	4b97      	ldr	r3, [pc, #604]	; (800336c <HAL_RCC_OscConfig+0x274>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f003 030c 	and.w	r3, r3, #12
 8003114:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003116:	4b95      	ldr	r3, [pc, #596]	; (800336c <HAL_RCC_OscConfig+0x274>)
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	f003 0303 	and.w	r3, r3, #3
 800311e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0310 	and.w	r3, r3, #16
 8003128:	2b00      	cmp	r3, #0
 800312a:	f000 80e6 	beq.w	80032fa <HAL_RCC_OscConfig+0x202>
>>>>>>> ModeSelect_v2
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
<<<<<<< HEAD
 80040a2:	6a3b      	ldr	r3, [r7, #32]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d007      	beq.n	80040b8 <HAL_RCC_OscConfig+0x4c>
 80040a8:	6a3b      	ldr	r3, [r7, #32]
 80040aa:	2b0c      	cmp	r3, #12
 80040ac:	f040 808d 	bne.w	80041ca <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	f040 8089 	bne.w	80041ca <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80040b8:	4b89      	ldr	r3, [pc, #548]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0302 	and.w	r3, r3, #2
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d006      	beq.n	80040d2 <HAL_RCC_OscConfig+0x66>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	69db      	ldr	r3, [r3, #28]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d102      	bne.n	80040d2 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	f000 bc3f 	b.w	8004950 <HAL_RCC_OscConfig+0x8e4>
=======
 800312e:	6a3b      	ldr	r3, [r7, #32]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d007      	beq.n	8003144 <HAL_RCC_OscConfig+0x4c>
 8003134:	6a3b      	ldr	r3, [r7, #32]
 8003136:	2b0c      	cmp	r3, #12
 8003138:	f040 808d 	bne.w	8003256 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	2b01      	cmp	r3, #1
 8003140:	f040 8089 	bne.w	8003256 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003144:	4b89      	ldr	r3, [pc, #548]	; (800336c <HAL_RCC_OscConfig+0x274>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d006      	beq.n	800315e <HAL_RCC_OscConfig+0x66>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	69db      	ldr	r3, [r3, #28]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d102      	bne.n	800315e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	f000 bc3f 	b.w	80039dc <HAL_RCC_OscConfig+0x8e4>
>>>>>>> ModeSelect_v2
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
<<<<<<< HEAD
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040d6:	4b82      	ldr	r3, [pc, #520]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0308 	and.w	r3, r3, #8
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d004      	beq.n	80040ec <HAL_RCC_OscConfig+0x80>
 80040e2:	4b7f      	ldr	r3, [pc, #508]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040ea:	e005      	b.n	80040f8 <HAL_RCC_OscConfig+0x8c>
 80040ec:	4b7c      	ldr	r3, [pc, #496]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 80040ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040f2:	091b      	lsrs	r3, r3, #4
 80040f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d224      	bcs.n	8004146 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004100:	4618      	mov	r0, r3
 8004102:	f000 fe2d 	bl	8004d60 <RCC_SetFlashLatencyFromMSIRange>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d002      	beq.n	8004112 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	f000 bc1f 	b.w	8004950 <HAL_RCC_OscConfig+0x8e4>
=======
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003162:	4b82      	ldr	r3, [pc, #520]	; (800336c <HAL_RCC_OscConfig+0x274>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0308 	and.w	r3, r3, #8
 800316a:	2b00      	cmp	r3, #0
 800316c:	d004      	beq.n	8003178 <HAL_RCC_OscConfig+0x80>
 800316e:	4b7f      	ldr	r3, [pc, #508]	; (800336c <HAL_RCC_OscConfig+0x274>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003176:	e005      	b.n	8003184 <HAL_RCC_OscConfig+0x8c>
 8003178:	4b7c      	ldr	r3, [pc, #496]	; (800336c <HAL_RCC_OscConfig+0x274>)
 800317a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800317e:	091b      	lsrs	r3, r3, #4
 8003180:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003184:	4293      	cmp	r3, r2
 8003186:	d224      	bcs.n	80031d2 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318c:	4618      	mov	r0, r3
 800318e:	f000 fe2d 	bl	8003dec <RCC_SetFlashLatencyFromMSIRange>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d002      	beq.n	800319e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	f000 bc1f 	b.w	80039dc <HAL_RCC_OscConfig+0x8e4>
>>>>>>> ModeSelect_v2
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
<<<<<<< HEAD
 8004112:	4b73      	ldr	r3, [pc, #460]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a72      	ldr	r2, [pc, #456]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 8004118:	f043 0308 	orr.w	r3, r3, #8
 800411c:	6013      	str	r3, [r2, #0]
 800411e:	4b70      	ldr	r3, [pc, #448]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412a:	496d      	ldr	r1, [pc, #436]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 800412c:	4313      	orrs	r3, r2
 800412e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004130:	4b6b      	ldr	r3, [pc, #428]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	021b      	lsls	r3, r3, #8
 800413e:	4968      	ldr	r1, [pc, #416]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 8004140:	4313      	orrs	r3, r2
 8004142:	604b      	str	r3, [r1, #4]
 8004144:	e025      	b.n	8004192 <HAL_RCC_OscConfig+0x126>
=======
 800319e:	4b73      	ldr	r3, [pc, #460]	; (800336c <HAL_RCC_OscConfig+0x274>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a72      	ldr	r2, [pc, #456]	; (800336c <HAL_RCC_OscConfig+0x274>)
 80031a4:	f043 0308 	orr.w	r3, r3, #8
 80031a8:	6013      	str	r3, [r2, #0]
 80031aa:	4b70      	ldr	r3, [pc, #448]	; (800336c <HAL_RCC_OscConfig+0x274>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b6:	496d      	ldr	r1, [pc, #436]	; (800336c <HAL_RCC_OscConfig+0x274>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031bc:	4b6b      	ldr	r3, [pc, #428]	; (800336c <HAL_RCC_OscConfig+0x274>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	021b      	lsls	r3, r3, #8
 80031ca:	4968      	ldr	r1, [pc, #416]	; (800336c <HAL_RCC_OscConfig+0x274>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	604b      	str	r3, [r1, #4]
 80031d0:	e025      	b.n	800321e <HAL_RCC_OscConfig+0x126>
>>>>>>> ModeSelect_v2
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
<<<<<<< HEAD
 8004146:	4b66      	ldr	r3, [pc, #408]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a65      	ldr	r2, [pc, #404]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 800414c:	f043 0308 	orr.w	r3, r3, #8
 8004150:	6013      	str	r3, [r2, #0]
 8004152:	4b63      	ldr	r3, [pc, #396]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415e:	4960      	ldr	r1, [pc, #384]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 8004160:	4313      	orrs	r3, r2
 8004162:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004164:	4b5e      	ldr	r3, [pc, #376]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a1b      	ldr	r3, [r3, #32]
 8004170:	021b      	lsls	r3, r3, #8
 8004172:	495b      	ldr	r1, [pc, #364]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 8004174:	4313      	orrs	r3, r2
 8004176:	604b      	str	r3, [r1, #4]
=======
 80031d2:	4b66      	ldr	r3, [pc, #408]	; (800336c <HAL_RCC_OscConfig+0x274>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a65      	ldr	r2, [pc, #404]	; (800336c <HAL_RCC_OscConfig+0x274>)
 80031d8:	f043 0308 	orr.w	r3, r3, #8
 80031dc:	6013      	str	r3, [r2, #0]
 80031de:	4b63      	ldr	r3, [pc, #396]	; (800336c <HAL_RCC_OscConfig+0x274>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ea:	4960      	ldr	r1, [pc, #384]	; (800336c <HAL_RCC_OscConfig+0x274>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031f0:	4b5e      	ldr	r3, [pc, #376]	; (800336c <HAL_RCC_OscConfig+0x274>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	021b      	lsls	r3, r3, #8
 80031fe:	495b      	ldr	r1, [pc, #364]	; (800336c <HAL_RCC_OscConfig+0x274>)
 8003200:	4313      	orrs	r3, r2
 8003202:	604b      	str	r3, [r1, #4]
>>>>>>> ModeSelect_v2

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
<<<<<<< HEAD
 8004178:	6a3b      	ldr	r3, [r7, #32]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d109      	bne.n	8004192 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004182:	4618      	mov	r0, r3
 8004184:	f000 fdec 	bl	8004d60 <RCC_SetFlashLatencyFromMSIRange>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e3de      	b.n	8004950 <HAL_RCC_OscConfig+0x8e4>
=======
 8003204:	6a3b      	ldr	r3, [r7, #32]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d109      	bne.n	800321e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320e:	4618      	mov	r0, r3
 8003210:	f000 fdec 	bl	8003dec <RCC_SetFlashLatencyFromMSIRange>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e3de      	b.n	80039dc <HAL_RCC_OscConfig+0x8e4>
>>>>>>> ModeSelect_v2
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
<<<<<<< HEAD
 8004192:	f000 fd21 	bl	8004bd8 <HAL_RCC_GetSysClockFreq>
 8004196:	4602      	mov	r2, r0
 8004198:	4b51      	ldr	r3, [pc, #324]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	091b      	lsrs	r3, r3, #4
 800419e:	f003 030f 	and.w	r3, r3, #15
 80041a2:	4950      	ldr	r1, [pc, #320]	; (80042e4 <HAL_RCC_OscConfig+0x278>)
 80041a4:	5ccb      	ldrb	r3, [r1, r3]
 80041a6:	f003 031f 	and.w	r3, r3, #31
 80041aa:	fa22 f303 	lsr.w	r3, r2, r3
 80041ae:	4a4e      	ldr	r2, [pc, #312]	; (80042e8 <HAL_RCC_OscConfig+0x27c>)
 80041b0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80041b2:	4b4e      	ldr	r3, [pc, #312]	; (80042ec <HAL_RCC_OscConfig+0x280>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7fe fcd4 	bl	8002b64 <HAL_InitTick>
 80041bc:	4603      	mov	r3, r0
 80041be:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80041c0:	7dfb      	ldrb	r3, [r7, #23]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d052      	beq.n	800426c <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80041c6:	7dfb      	ldrb	r3, [r7, #23]
 80041c8:	e3c2      	b.n	8004950 <HAL_RCC_OscConfig+0x8e4>
=======
 800321e:	f000 fd21 	bl	8003c64 <HAL_RCC_GetSysClockFreq>
 8003222:	4602      	mov	r2, r0
 8003224:	4b51      	ldr	r3, [pc, #324]	; (800336c <HAL_RCC_OscConfig+0x274>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	091b      	lsrs	r3, r3, #4
 800322a:	f003 030f 	and.w	r3, r3, #15
 800322e:	4950      	ldr	r1, [pc, #320]	; (8003370 <HAL_RCC_OscConfig+0x278>)
 8003230:	5ccb      	ldrb	r3, [r1, r3]
 8003232:	f003 031f 	and.w	r3, r3, #31
 8003236:	fa22 f303 	lsr.w	r3, r2, r3
 800323a:	4a4e      	ldr	r2, [pc, #312]	; (8003374 <HAL_RCC_OscConfig+0x27c>)
 800323c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800323e:	4b4e      	ldr	r3, [pc, #312]	; (8003378 <HAL_RCC_OscConfig+0x280>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4618      	mov	r0, r3
 8003244:	f7fe fcec 	bl	8001c20 <HAL_InitTick>
 8003248:	4603      	mov	r3, r0
 800324a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 800324c:	7dfb      	ldrb	r3, [r7, #23]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d052      	beq.n	80032f8 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8003252:	7dfb      	ldrb	r3, [r7, #23]
 8003254:	e3c2      	b.n	80039dc <HAL_RCC_OscConfig+0x8e4>
>>>>>>> ModeSelect_v2
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
<<<<<<< HEAD
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	69db      	ldr	r3, [r3, #28]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d032      	beq.n	8004238 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80041d2:	4b43      	ldr	r3, [pc, #268]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a42      	ldr	r2, [pc, #264]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 80041d8:	f043 0301 	orr.w	r3, r3, #1
 80041dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80041de:	f7fe fd11 	bl	8002c04 <HAL_GetTick>
 80041e2:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041e4:	e008      	b.n	80041f8 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041e6:	f7fe fd0d 	bl	8002c04 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d901      	bls.n	80041f8 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e3ab      	b.n	8004950 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041f8:	4b39      	ldr	r3, [pc, #228]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0302 	and.w	r3, r3, #2
 8004200:	2b00      	cmp	r3, #0
 8004202:	d0f0      	beq.n	80041e6 <HAL_RCC_OscConfig+0x17a>
=======
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	69db      	ldr	r3, [r3, #28]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d032      	beq.n	80032c4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800325e:	4b43      	ldr	r3, [pc, #268]	; (800336c <HAL_RCC_OscConfig+0x274>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a42      	ldr	r2, [pc, #264]	; (800336c <HAL_RCC_OscConfig+0x274>)
 8003264:	f043 0301 	orr.w	r3, r3, #1
 8003268:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800326a:	f7fe fd29 	bl	8001cc0 <HAL_GetTick>
 800326e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003270:	e008      	b.n	8003284 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003272:	f7fe fd25 	bl	8001cc0 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e3ab      	b.n	80039dc <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003284:	4b39      	ldr	r3, [pc, #228]	; (800336c <HAL_RCC_OscConfig+0x274>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0f0      	beq.n	8003272 <HAL_RCC_OscConfig+0x17a>
>>>>>>> ModeSelect_v2
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
<<<<<<< HEAD
 8004204:	4b36      	ldr	r3, [pc, #216]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a35      	ldr	r2, [pc, #212]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 800420a:	f043 0308 	orr.w	r3, r3, #8
 800420e:	6013      	str	r3, [r2, #0]
 8004210:	4b33      	ldr	r3, [pc, #204]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421c:	4930      	ldr	r1, [pc, #192]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 800421e:	4313      	orrs	r3, r2
 8004220:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004222:	4b2f      	ldr	r3, [pc, #188]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a1b      	ldr	r3, [r3, #32]
 800422e:	021b      	lsls	r3, r3, #8
 8004230:	492b      	ldr	r1, [pc, #172]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 8004232:	4313      	orrs	r3, r2
 8004234:	604b      	str	r3, [r1, #4]
 8004236:	e01a      	b.n	800426e <HAL_RCC_OscConfig+0x202>
=======
 8003290:	4b36      	ldr	r3, [pc, #216]	; (800336c <HAL_RCC_OscConfig+0x274>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a35      	ldr	r2, [pc, #212]	; (800336c <HAL_RCC_OscConfig+0x274>)
 8003296:	f043 0308 	orr.w	r3, r3, #8
 800329a:	6013      	str	r3, [r2, #0]
 800329c:	4b33      	ldr	r3, [pc, #204]	; (800336c <HAL_RCC_OscConfig+0x274>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	4930      	ldr	r1, [pc, #192]	; (800336c <HAL_RCC_OscConfig+0x274>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032ae:	4b2f      	ldr	r3, [pc, #188]	; (800336c <HAL_RCC_OscConfig+0x274>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a1b      	ldr	r3, [r3, #32]
 80032ba:	021b      	lsls	r3, r3, #8
 80032bc:	492b      	ldr	r1, [pc, #172]	; (800336c <HAL_RCC_OscConfig+0x274>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	604b      	str	r3, [r1, #4]
 80032c2:	e01a      	b.n	80032fa <HAL_RCC_OscConfig+0x202>
>>>>>>> ModeSelect_v2

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
<<<<<<< HEAD
 8004238:	4b29      	ldr	r3, [pc, #164]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a28      	ldr	r2, [pc, #160]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 800423e:	f023 0301 	bic.w	r3, r3, #1
 8004242:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004244:	f7fe fcde 	bl	8002c04 <HAL_GetTick>
 8004248:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800424a:	e008      	b.n	800425e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800424c:	f7fe fcda 	bl	8002c04 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b02      	cmp	r3, #2
 8004258:	d901      	bls.n	800425e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e378      	b.n	8004950 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800425e:	4b20      	ldr	r3, [pc, #128]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1f0      	bne.n	800424c <HAL_RCC_OscConfig+0x1e0>
 800426a:	e000      	b.n	800426e <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800426c:	bf00      	nop
=======
 80032c4:	4b29      	ldr	r3, [pc, #164]	; (800336c <HAL_RCC_OscConfig+0x274>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a28      	ldr	r2, [pc, #160]	; (800336c <HAL_RCC_OscConfig+0x274>)
 80032ca:	f023 0301 	bic.w	r3, r3, #1
 80032ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032d0:	f7fe fcf6 	bl	8001cc0 <HAL_GetTick>
 80032d4:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032d8:	f7fe fcf2 	bl	8001cc0 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e378      	b.n	80039dc <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032ea:	4b20      	ldr	r3, [pc, #128]	; (800336c <HAL_RCC_OscConfig+0x274>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1f0      	bne.n	80032d8 <HAL_RCC_OscConfig+0x1e0>
 80032f6:	e000      	b.n	80032fa <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80032f8:	bf00      	nop
>>>>>>> ModeSelect_v2
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	2b00      	cmp	r3, #0
 8004278:	d073      	beq.n	8004362 <HAL_RCC_OscConfig+0x2f6>
=======
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b00      	cmp	r3, #0
 8003304:	d073      	beq.n	80033ee <HAL_RCC_OscConfig+0x2f6>
>>>>>>> ModeSelect_v2
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
<<<<<<< HEAD
 800427a:	6a3b      	ldr	r3, [r7, #32]
 800427c:	2b08      	cmp	r3, #8
 800427e:	d005      	beq.n	800428c <HAL_RCC_OscConfig+0x220>
 8004280:	6a3b      	ldr	r3, [r7, #32]
 8004282:	2b0c      	cmp	r3, #12
 8004284:	d10e      	bne.n	80042a4 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	2b03      	cmp	r3, #3
 800428a:	d10b      	bne.n	80042a4 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800428c:	4b14      	ldr	r3, [pc, #80]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d063      	beq.n	8004360 <HAL_RCC_OscConfig+0x2f4>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d15f      	bne.n	8004360 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e355      	b.n	8004950 <HAL_RCC_OscConfig+0x8e4>
=======
 8003306:	6a3b      	ldr	r3, [r7, #32]
 8003308:	2b08      	cmp	r3, #8
 800330a:	d005      	beq.n	8003318 <HAL_RCC_OscConfig+0x220>
 800330c:	6a3b      	ldr	r3, [r7, #32]
 800330e:	2b0c      	cmp	r3, #12
 8003310:	d10e      	bne.n	8003330 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	2b03      	cmp	r3, #3
 8003316:	d10b      	bne.n	8003330 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003318:	4b14      	ldr	r3, [pc, #80]	; (800336c <HAL_RCC_OscConfig+0x274>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d063      	beq.n	80033ec <HAL_RCC_OscConfig+0x2f4>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d15f      	bne.n	80033ec <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e355      	b.n	80039dc <HAL_RCC_OscConfig+0x8e4>
>>>>>>> ModeSelect_v2
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ac:	d106      	bne.n	80042bc <HAL_RCC_OscConfig+0x250>
 80042ae:	4b0c      	ldr	r3, [pc, #48]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a0b      	ldr	r2, [pc, #44]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 80042b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042b8:	6013      	str	r3, [r2, #0]
 80042ba:	e025      	b.n	8004308 <HAL_RCC_OscConfig+0x29c>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042c4:	d114      	bne.n	80042f0 <HAL_RCC_OscConfig+0x284>
 80042c6:	4b06      	ldr	r3, [pc, #24]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a05      	ldr	r2, [pc, #20]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 80042cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042d0:	6013      	str	r3, [r2, #0]
 80042d2:	4b03      	ldr	r3, [pc, #12]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a02      	ldr	r2, [pc, #8]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 80042d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042dc:	6013      	str	r3, [r2, #0]
 80042de:	e013      	b.n	8004308 <HAL_RCC_OscConfig+0x29c>
 80042e0:	40021000 	.word	0x40021000
 80042e4:	0800e0cc 	.word	0x0800e0cc
 80042e8:	20000004 	.word	0x20000004
 80042ec:	20000008 	.word	0x20000008
 80042f0:	4b8f      	ldr	r3, [pc, #572]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a8e      	ldr	r2, [pc, #568]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 80042f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042fa:	6013      	str	r3, [r2, #0]
 80042fc:	4b8c      	ldr	r3, [pc, #560]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a8b      	ldr	r2, [pc, #556]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 8004302:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004306:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d013      	beq.n	8004338 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004310:	f7fe fc78 	bl	8002c04 <HAL_GetTick>
 8004314:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004316:	e008      	b.n	800432a <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004318:	f7fe fc74 	bl	8002c04 <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b64      	cmp	r3, #100	; 0x64
 8004324:	d901      	bls.n	800432a <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e312      	b.n	8004950 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800432a:	4b81      	ldr	r3, [pc, #516]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d0f0      	beq.n	8004318 <HAL_RCC_OscConfig+0x2ac>
 8004336:	e014      	b.n	8004362 <HAL_RCC_OscConfig+0x2f6>
=======
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003338:	d106      	bne.n	8003348 <HAL_RCC_OscConfig+0x250>
 800333a:	4b0c      	ldr	r3, [pc, #48]	; (800336c <HAL_RCC_OscConfig+0x274>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a0b      	ldr	r2, [pc, #44]	; (800336c <HAL_RCC_OscConfig+0x274>)
 8003340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003344:	6013      	str	r3, [r2, #0]
 8003346:	e025      	b.n	8003394 <HAL_RCC_OscConfig+0x29c>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003350:	d114      	bne.n	800337c <HAL_RCC_OscConfig+0x284>
 8003352:	4b06      	ldr	r3, [pc, #24]	; (800336c <HAL_RCC_OscConfig+0x274>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a05      	ldr	r2, [pc, #20]	; (800336c <HAL_RCC_OscConfig+0x274>)
 8003358:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800335c:	6013      	str	r3, [r2, #0]
 800335e:	4b03      	ldr	r3, [pc, #12]	; (800336c <HAL_RCC_OscConfig+0x274>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a02      	ldr	r2, [pc, #8]	; (800336c <HAL_RCC_OscConfig+0x274>)
 8003364:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003368:	6013      	str	r3, [r2, #0]
 800336a:	e013      	b.n	8003394 <HAL_RCC_OscConfig+0x29c>
 800336c:	40021000 	.word	0x40021000
 8003370:	0800d02c 	.word	0x0800d02c
 8003374:	20000004 	.word	0x20000004
 8003378:	20000008 	.word	0x20000008
 800337c:	4b8f      	ldr	r3, [pc, #572]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a8e      	ldr	r2, [pc, #568]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 8003382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003386:	6013      	str	r3, [r2, #0]
 8003388:	4b8c      	ldr	r3, [pc, #560]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a8b      	ldr	r2, [pc, #556]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 800338e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003392:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d013      	beq.n	80033c4 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800339c:	f7fe fc90 	bl	8001cc0 <HAL_GetTick>
 80033a0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033a4:	f7fe fc8c 	bl	8001cc0 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b64      	cmp	r3, #100	; 0x64
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e312      	b.n	80039dc <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033b6:	4b81      	ldr	r3, [pc, #516]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d0f0      	beq.n	80033a4 <HAL_RCC_OscConfig+0x2ac>
 80033c2:	e014      	b.n	80033ee <HAL_RCC_OscConfig+0x2f6>
>>>>>>> ModeSelect_v2
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 8004338:	f7fe fc64 	bl	8002c04 <HAL_GetTick>
 800433c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800433e:	e008      	b.n	8004352 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004340:	f7fe fc60 	bl	8002c04 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b64      	cmp	r3, #100	; 0x64
 800434c:	d901      	bls.n	8004352 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e2fe      	b.n	8004950 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004352:	4b77      	ldr	r3, [pc, #476]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1f0      	bne.n	8004340 <HAL_RCC_OscConfig+0x2d4>
 800435e:	e000      	b.n	8004362 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004360:	bf00      	nop
=======
 80033c4:	f7fe fc7c 	bl	8001cc0 <HAL_GetTick>
 80033c8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033cc:	f7fe fc78 	bl	8001cc0 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b64      	cmp	r3, #100	; 0x64
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e2fe      	b.n	80039dc <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033de:	4b77      	ldr	r3, [pc, #476]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1f0      	bne.n	80033cc <HAL_RCC_OscConfig+0x2d4>
 80033ea:	e000      	b.n	80033ee <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033ec:	bf00      	nop
>>>>>>> ModeSelect_v2
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d060      	beq.n	8004430 <HAL_RCC_OscConfig+0x3c4>
=======
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d060      	beq.n	80034bc <HAL_RCC_OscConfig+0x3c4>
>>>>>>> ModeSelect_v2
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
<<<<<<< HEAD
 800436e:	6a3b      	ldr	r3, [r7, #32]
 8004370:	2b04      	cmp	r3, #4
 8004372:	d005      	beq.n	8004380 <HAL_RCC_OscConfig+0x314>
 8004374:	6a3b      	ldr	r3, [r7, #32]
 8004376:	2b0c      	cmp	r3, #12
 8004378:	d119      	bne.n	80043ae <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	2b02      	cmp	r3, #2
 800437e:	d116      	bne.n	80043ae <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004380:	4b6b      	ldr	r3, [pc, #428]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004388:	2b00      	cmp	r3, #0
 800438a:	d005      	beq.n	8004398 <HAL_RCC_OscConfig+0x32c>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d101      	bne.n	8004398 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e2db      	b.n	8004950 <HAL_RCC_OscConfig+0x8e4>
=======
 80033fa:	6a3b      	ldr	r3, [r7, #32]
 80033fc:	2b04      	cmp	r3, #4
 80033fe:	d005      	beq.n	800340c <HAL_RCC_OscConfig+0x314>
 8003400:	6a3b      	ldr	r3, [r7, #32]
 8003402:	2b0c      	cmp	r3, #12
 8003404:	d119      	bne.n	800343a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	2b02      	cmp	r3, #2
 800340a:	d116      	bne.n	800343a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800340c:	4b6b      	ldr	r3, [pc, #428]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003414:	2b00      	cmp	r3, #0
 8003416:	d005      	beq.n	8003424 <HAL_RCC_OscConfig+0x32c>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d101      	bne.n	8003424 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e2db      	b.n	80039dc <HAL_RCC_OscConfig+0x8e4>
>>>>>>> ModeSelect_v2
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8004398:	4b65      	ldr	r3, [pc, #404]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	061b      	lsls	r3, r3, #24
 80043a6:	4962      	ldr	r1, [pc, #392]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043ac:	e040      	b.n	8004430 <HAL_RCC_OscConfig+0x3c4>
=======
 8003424:	4b65      	ldr	r3, [pc, #404]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	061b      	lsls	r3, r3, #24
 8003432:	4962      	ldr	r1, [pc, #392]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 8003434:	4313      	orrs	r3, r2
 8003436:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003438:	e040      	b.n	80034bc <HAL_RCC_OscConfig+0x3c4>
>>>>>>> ModeSelect_v2
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
<<<<<<< HEAD
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d023      	beq.n	80043fe <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043b6:	4b5e      	ldr	r3, [pc, #376]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a5d      	ldr	r2, [pc, #372]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 80043bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c2:	f7fe fc1f 	bl	8002c04 <HAL_GetTick>
 80043c6:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043c8:	e008      	b.n	80043dc <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043ca:	f7fe fc1b 	bl	8002c04 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d901      	bls.n	80043dc <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e2b9      	b.n	8004950 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043dc:	4b54      	ldr	r3, [pc, #336]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d0f0      	beq.n	80043ca <HAL_RCC_OscConfig+0x35e>
=======
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d023      	beq.n	800348a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003442:	4b5e      	ldr	r3, [pc, #376]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a5d      	ldr	r2, [pc, #372]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 8003448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800344c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800344e:	f7fe fc37 	bl	8001cc0 <HAL_GetTick>
 8003452:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003454:	e008      	b.n	8003468 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003456:	f7fe fc33 	bl	8001cc0 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b02      	cmp	r3, #2
 8003462:	d901      	bls.n	8003468 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e2b9      	b.n	80039dc <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003468:	4b54      	ldr	r3, [pc, #336]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003470:	2b00      	cmp	r3, #0
 8003472:	d0f0      	beq.n	8003456 <HAL_RCC_OscConfig+0x35e>
>>>>>>> ModeSelect_v2
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 80043e8:	4b51      	ldr	r3, [pc, #324]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	061b      	lsls	r3, r3, #24
 80043f6:	494e      	ldr	r1, [pc, #312]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	604b      	str	r3, [r1, #4]
 80043fc:	e018      	b.n	8004430 <HAL_RCC_OscConfig+0x3c4>
=======
 8003474:	4b51      	ldr	r3, [pc, #324]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	061b      	lsls	r3, r3, #24
 8003482:	494e      	ldr	r1, [pc, #312]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 8003484:	4313      	orrs	r3, r2
 8003486:	604b      	str	r3, [r1, #4]
 8003488:	e018      	b.n	80034bc <HAL_RCC_OscConfig+0x3c4>
>>>>>>> ModeSelect_v2
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 80043fe:	4b4c      	ldr	r3, [pc, #304]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a4b      	ldr	r2, [pc, #300]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 8004404:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004408:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800440a:	f7fe fbfb 	bl	8002c04 <HAL_GetTick>
 800440e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004410:	e008      	b.n	8004424 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004412:	f7fe fbf7 	bl	8002c04 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	2b02      	cmp	r3, #2
 800441e:	d901      	bls.n	8004424 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e295      	b.n	8004950 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004424:	4b42      	ldr	r3, [pc, #264]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1f0      	bne.n	8004412 <HAL_RCC_OscConfig+0x3a6>
=======
 800348a:	4b4c      	ldr	r3, [pc, #304]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a4b      	ldr	r2, [pc, #300]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 8003490:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003494:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003496:	f7fe fc13 	bl	8001cc0 <HAL_GetTick>
 800349a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800349c:	e008      	b.n	80034b0 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800349e:	f7fe fc0f 	bl	8001cc0 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e295      	b.n	80039dc <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034b0:	4b42      	ldr	r3, [pc, #264]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1f0      	bne.n	800349e <HAL_RCC_OscConfig+0x3a6>
>>>>>>> ModeSelect_v2
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0308 	and.w	r3, r3, #8
 8004438:	2b00      	cmp	r3, #0
 800443a:	f000 8082 	beq.w	8004542 <HAL_RCC_OscConfig+0x4d6>
=======
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0308 	and.w	r3, r3, #8
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f000 8082 	beq.w	80035ce <HAL_RCC_OscConfig+0x4d6>
>>>>>>> ModeSelect_v2
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
<<<<<<< HEAD
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d05f      	beq.n	8004506 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8004446:	4b3a      	ldr	r3, [pc, #232]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 8004448:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800444c:	613b      	str	r3, [r7, #16]
=======
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d05f      	beq.n	8003592 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80034d2:	4b3a      	ldr	r3, [pc, #232]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 80034d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034d8:	613b      	str	r3, [r7, #16]
>>>>>>> ModeSelect_v2

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
<<<<<<< HEAD
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	699a      	ldr	r2, [r3, #24]
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	f003 0310 	and.w	r3, r3, #16
 8004458:	429a      	cmp	r2, r3
 800445a:	d037      	beq.n	80044cc <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d006      	beq.n	8004474 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800446c:	2b00      	cmp	r3, #0
 800446e:	d101      	bne.n	8004474 <HAL_RCC_OscConfig+0x408>
=======
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	699a      	ldr	r2, [r3, #24]
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	f003 0310 	and.w	r3, r3, #16
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d037      	beq.n	8003558 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d006      	beq.n	8003500 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d101      	bne.n	8003500 <HAL_RCC_OscConfig+0x408>
>>>>>>> ModeSelect_v2
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
<<<<<<< HEAD
 8004470:	2301      	movs	r3, #1
 8004472:	e26d      	b.n	8004950 <HAL_RCC_OscConfig+0x8e4>
=======
 80034fc:	2301      	movs	r3, #1
 80034fe:	e26d      	b.n	80039dc <HAL_RCC_OscConfig+0x8e4>
>>>>>>> ModeSelect_v2
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
<<<<<<< HEAD
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b00      	cmp	r3, #0
 800447c:	d01b      	beq.n	80044b6 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 800447e:	4b2c      	ldr	r3, [pc, #176]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 8004480:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004484:	4a2a      	ldr	r2, [pc, #168]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 8004486:	f023 0301 	bic.w	r3, r3, #1
 800448a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800448e:	f7fe fbb9 	bl	8002c04 <HAL_GetTick>
 8004492:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004494:	e008      	b.n	80044a8 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004496:	f7fe fbb5 	bl	8002c04 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b11      	cmp	r3, #17
 80044a2:	d901      	bls.n	80044a8 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e253      	b.n	8004950 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044a8:	4b21      	ldr	r3, [pc, #132]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 80044aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1ef      	bne.n	8004496 <HAL_RCC_OscConfig+0x42a>
=======
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d01b      	beq.n	8003542 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 800350a:	4b2c      	ldr	r3, [pc, #176]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 800350c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003510:	4a2a      	ldr	r2, [pc, #168]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 8003512:	f023 0301 	bic.w	r3, r3, #1
 8003516:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800351a:	f7fe fbd1 	bl	8001cc0 <HAL_GetTick>
 800351e:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003520:	e008      	b.n	8003534 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003522:	f7fe fbcd 	bl	8001cc0 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	2b11      	cmp	r3, #17
 800352e:	d901      	bls.n	8003534 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e253      	b.n	80039dc <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003534:	4b21      	ldr	r3, [pc, #132]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 8003536:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1ef      	bne.n	8003522 <HAL_RCC_OscConfig+0x42a>
>>>>>>> ModeSelect_v2
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
<<<<<<< HEAD
 80044b6:	4b1e      	ldr	r3, [pc, #120]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 80044b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044bc:	f023 0210 	bic.w	r2, r3, #16
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	491a      	ldr	r1, [pc, #104]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
=======
 8003542:	4b1e      	ldr	r3, [pc, #120]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 8003544:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003548:	f023 0210 	bic.w	r2, r3, #16
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	491a      	ldr	r1, [pc, #104]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 8003552:	4313      	orrs	r3, r2
 8003554:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
>>>>>>> ModeSelect_v2
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
<<<<<<< HEAD
 80044cc:	4b18      	ldr	r3, [pc, #96]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 80044ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044d2:	4a17      	ldr	r2, [pc, #92]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 80044d4:	f043 0301 	orr.w	r3, r3, #1
 80044d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044dc:	f7fe fb92 	bl	8002c04 <HAL_GetTick>
 80044e0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044e2:	e008      	b.n	80044f6 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044e4:	f7fe fb8e 	bl	8002c04 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b11      	cmp	r3, #17
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e22c      	b.n	8004950 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044f6:	4b0e      	ldr	r3, [pc, #56]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 80044f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	2b00      	cmp	r3, #0
 8004502:	d0ef      	beq.n	80044e4 <HAL_RCC_OscConfig+0x478>
 8004504:	e01d      	b.n	8004542 <HAL_RCC_OscConfig+0x4d6>
=======
 8003558:	4b18      	ldr	r3, [pc, #96]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 800355a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800355e:	4a17      	ldr	r2, [pc, #92]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 8003560:	f043 0301 	orr.w	r3, r3, #1
 8003564:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003568:	f7fe fbaa 	bl	8001cc0 <HAL_GetTick>
 800356c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003570:	f7fe fba6 	bl	8001cc0 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b11      	cmp	r3, #17
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e22c      	b.n	80039dc <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003582:	4b0e      	ldr	r3, [pc, #56]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 8003584:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d0ef      	beq.n	8003570 <HAL_RCC_OscConfig+0x478>
 8003590:	e01d      	b.n	80035ce <HAL_RCC_OscConfig+0x4d6>
>>>>>>> ModeSelect_v2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
 8004506:	4b0a      	ldr	r3, [pc, #40]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 8004508:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800450c:	4a08      	ldr	r2, [pc, #32]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 800450e:	f023 0301 	bic.w	r3, r3, #1
 8004512:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004516:	f7fe fb75 	bl	8002c04 <HAL_GetTick>
 800451a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800451c:	e00a      	b.n	8004534 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800451e:	f7fe fb71 	bl	8002c04 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	2b11      	cmp	r3, #17
 800452a:	d903      	bls.n	8004534 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e20f      	b.n	8004950 <HAL_RCC_OscConfig+0x8e4>
 8004530:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004534:	4b83      	ldr	r3, [pc, #524]	; (8004744 <HAL_RCC_OscConfig+0x6d8>)
 8004536:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1ed      	bne.n	800451e <HAL_RCC_OscConfig+0x4b2>
=======
 8003592:	4b0a      	ldr	r3, [pc, #40]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 8003594:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003598:	4a08      	ldr	r2, [pc, #32]	; (80035bc <HAL_RCC_OscConfig+0x4c4>)
 800359a:	f023 0301 	bic.w	r3, r3, #1
 800359e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a2:	f7fe fb8d 	bl	8001cc0 <HAL_GetTick>
 80035a6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035a8:	e00a      	b.n	80035c0 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035aa:	f7fe fb89 	bl	8001cc0 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b11      	cmp	r3, #17
 80035b6:	d903      	bls.n	80035c0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e20f      	b.n	80039dc <HAL_RCC_OscConfig+0x8e4>
 80035bc:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035c0:	4b83      	ldr	r3, [pc, #524]	; (80037d0 <HAL_RCC_OscConfig+0x6d8>)
 80035c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1ed      	bne.n	80035aa <HAL_RCC_OscConfig+0x4b2>
>>>>>>> ModeSelect_v2
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0304 	and.w	r3, r3, #4
 800454a:	2b00      	cmp	r3, #0
 800454c:	f000 80bd 	beq.w	80046ca <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004550:	2300      	movs	r3, #0
 8004552:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
=======
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0304 	and.w	r3, r3, #4
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f000 80bd 	beq.w	8003756 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035dc:	2300      	movs	r3, #0
 80035de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
>>>>>>> ModeSelect_v2
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
<<<<<<< HEAD
 8004556:	4b7b      	ldr	r3, [pc, #492]	; (8004744 <HAL_RCC_OscConfig+0x6d8>)
 8004558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800455a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10e      	bne.n	8004580 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004562:	4b78      	ldr	r3, [pc, #480]	; (8004744 <HAL_RCC_OscConfig+0x6d8>)
 8004564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004566:	4a77      	ldr	r2, [pc, #476]	; (8004744 <HAL_RCC_OscConfig+0x6d8>)
 8004568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800456c:	6593      	str	r3, [r2, #88]	; 0x58
 800456e:	4b75      	ldr	r3, [pc, #468]	; (8004744 <HAL_RCC_OscConfig+0x6d8>)
 8004570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004576:	60fb      	str	r3, [r7, #12]
 8004578:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800457a:	2301      	movs	r3, #1
 800457c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004580:	4b71      	ldr	r3, [pc, #452]	; (8004748 <HAL_RCC_OscConfig+0x6dc>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004588:	2b00      	cmp	r3, #0
 800458a:	d118      	bne.n	80045be <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800458c:	4b6e      	ldr	r3, [pc, #440]	; (8004748 <HAL_RCC_OscConfig+0x6dc>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a6d      	ldr	r2, [pc, #436]	; (8004748 <HAL_RCC_OscConfig+0x6dc>)
 8004592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004596:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004598:	f7fe fb34 	bl	8002c04 <HAL_GetTick>
 800459c:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800459e:	e008      	b.n	80045b2 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045a0:	f7fe fb30 	bl	8002c04 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e1ce      	b.n	8004950 <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045b2:	4b65      	ldr	r3, [pc, #404]	; (8004748 <HAL_RCC_OscConfig+0x6dc>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d0f0      	beq.n	80045a0 <HAL_RCC_OscConfig+0x534>
=======
 80035e2:	4b7b      	ldr	r3, [pc, #492]	; (80037d0 <HAL_RCC_OscConfig+0x6d8>)
 80035e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10e      	bne.n	800360c <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ee:	4b78      	ldr	r3, [pc, #480]	; (80037d0 <HAL_RCC_OscConfig+0x6d8>)
 80035f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f2:	4a77      	ldr	r2, [pc, #476]	; (80037d0 <HAL_RCC_OscConfig+0x6d8>)
 80035f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035f8:	6593      	str	r3, [r2, #88]	; 0x58
 80035fa:	4b75      	ldr	r3, [pc, #468]	; (80037d0 <HAL_RCC_OscConfig+0x6d8>)
 80035fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003602:	60fb      	str	r3, [r7, #12]
 8003604:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003606:	2301      	movs	r3, #1
 8003608:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800360c:	4b71      	ldr	r3, [pc, #452]	; (80037d4 <HAL_RCC_OscConfig+0x6dc>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003614:	2b00      	cmp	r3, #0
 8003616:	d118      	bne.n	800364a <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003618:	4b6e      	ldr	r3, [pc, #440]	; (80037d4 <HAL_RCC_OscConfig+0x6dc>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a6d      	ldr	r2, [pc, #436]	; (80037d4 <HAL_RCC_OscConfig+0x6dc>)
 800361e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003622:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003624:	f7fe fb4c 	bl	8001cc0 <HAL_GetTick>
 8003628:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800362a:	e008      	b.n	800363e <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800362c:	f7fe fb48 	bl	8001cc0 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b02      	cmp	r3, #2
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e1ce      	b.n	80039dc <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800363e:	4b65      	ldr	r3, [pc, #404]	; (80037d4 <HAL_RCC_OscConfig+0x6dc>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003646:	2b00      	cmp	r3, #0
 8003648:	d0f0      	beq.n	800362c <HAL_RCC_OscConfig+0x534>
>>>>>>> ModeSelect_v2
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
<<<<<<< HEAD
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d02c      	beq.n	8004624 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80045ca:	4b5e      	ldr	r3, [pc, #376]	; (8004744 <HAL_RCC_OscConfig+0x6d8>)
 80045cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045dc:	4959      	ldr	r1, [pc, #356]	; (8004744 <HAL_RCC_OscConfig+0x6d8>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f003 0304 	and.w	r3, r3, #4
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d010      	beq.n	8004612 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80045f0:	4b54      	ldr	r3, [pc, #336]	; (8004744 <HAL_RCC_OscConfig+0x6d8>)
 80045f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f6:	4a53      	ldr	r2, [pc, #332]	; (8004744 <HAL_RCC_OscConfig+0x6d8>)
 80045f8:	f043 0304 	orr.w	r3, r3, #4
 80045fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004600:	4b50      	ldr	r3, [pc, #320]	; (8004744 <HAL_RCC_OscConfig+0x6d8>)
 8004602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004606:	4a4f      	ldr	r2, [pc, #316]	; (8004744 <HAL_RCC_OscConfig+0x6d8>)
 8004608:	f043 0301 	orr.w	r3, r3, #1
 800460c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004610:	e018      	b.n	8004644 <HAL_RCC_OscConfig+0x5d8>
=======
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	d02c      	beq.n	80036b0 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8003656:	4b5e      	ldr	r3, [pc, #376]	; (80037d0 <HAL_RCC_OscConfig+0x6d8>)
 8003658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800365c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003668:	4959      	ldr	r1, [pc, #356]	; (80037d0 <HAL_RCC_OscConfig+0x6d8>)
 800366a:	4313      	orrs	r3, r2
 800366c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f003 0304 	and.w	r3, r3, #4
 8003678:	2b00      	cmp	r3, #0
 800367a:	d010      	beq.n	800369e <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800367c:	4b54      	ldr	r3, [pc, #336]	; (80037d0 <HAL_RCC_OscConfig+0x6d8>)
 800367e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003682:	4a53      	ldr	r2, [pc, #332]	; (80037d0 <HAL_RCC_OscConfig+0x6d8>)
 8003684:	f043 0304 	orr.w	r3, r3, #4
 8003688:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800368c:	4b50      	ldr	r3, [pc, #320]	; (80037d0 <HAL_RCC_OscConfig+0x6d8>)
 800368e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003692:	4a4f      	ldr	r2, [pc, #316]	; (80037d0 <HAL_RCC_OscConfig+0x6d8>)
 8003694:	f043 0301 	orr.w	r3, r3, #1
 8003698:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800369c:	e018      	b.n	80036d0 <HAL_RCC_OscConfig+0x5d8>
>>>>>>> ModeSelect_v2
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
<<<<<<< HEAD
 8004612:	4b4c      	ldr	r3, [pc, #304]	; (8004744 <HAL_RCC_OscConfig+0x6d8>)
 8004614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004618:	4a4a      	ldr	r2, [pc, #296]	; (8004744 <HAL_RCC_OscConfig+0x6d8>)
 800461a:	f043 0301 	orr.w	r3, r3, #1
 800461e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004622:	e00f      	b.n	8004644 <HAL_RCC_OscConfig+0x5d8>
=======
 800369e:	4b4c      	ldr	r3, [pc, #304]	; (80037d0 <HAL_RCC_OscConfig+0x6d8>)
 80036a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a4:	4a4a      	ldr	r2, [pc, #296]	; (80037d0 <HAL_RCC_OscConfig+0x6d8>)
 80036a6:	f043 0301 	orr.w	r3, r3, #1
 80036aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036ae:	e00f      	b.n	80036d0 <HAL_RCC_OscConfig+0x5d8>
>>>>>>> ModeSelect_v2
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
<<<<<<< HEAD
 8004624:	4b47      	ldr	r3, [pc, #284]	; (8004744 <HAL_RCC_OscConfig+0x6d8>)
 8004626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800462a:	4a46      	ldr	r2, [pc, #280]	; (8004744 <HAL_RCC_OscConfig+0x6d8>)
 800462c:	f023 0301 	bic.w	r3, r3, #1
 8004630:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004634:	4b43      	ldr	r3, [pc, #268]	; (8004744 <HAL_RCC_OscConfig+0x6d8>)
 8004636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800463a:	4a42      	ldr	r2, [pc, #264]	; (8004744 <HAL_RCC_OscConfig+0x6d8>)
 800463c:	f023 0304 	bic.w	r3, r3, #4
 8004640:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
=======
 80036b0:	4b47      	ldr	r3, [pc, #284]	; (80037d0 <HAL_RCC_OscConfig+0x6d8>)
 80036b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b6:	4a46      	ldr	r2, [pc, #280]	; (80037d0 <HAL_RCC_OscConfig+0x6d8>)
 80036b8:	f023 0301 	bic.w	r3, r3, #1
 80036bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80036c0:	4b43      	ldr	r3, [pc, #268]	; (80037d0 <HAL_RCC_OscConfig+0x6d8>)
 80036c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c6:	4a42      	ldr	r2, [pc, #264]	; (80037d0 <HAL_RCC_OscConfig+0x6d8>)
 80036c8:	f023 0304 	bic.w	r3, r3, #4
 80036cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
>>>>>>> ModeSelect_v2
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
<<<<<<< HEAD
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d016      	beq.n	800467a <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800464c:	f7fe fada 	bl	8002c04 <HAL_GetTick>
 8004650:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004652:	e00a      	b.n	800466a <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004654:	f7fe fad6 	bl	8002c04 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004662:	4293      	cmp	r3, r2
 8004664:	d901      	bls.n	800466a <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e172      	b.n	8004950 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800466a:	4b36      	ldr	r3, [pc, #216]	; (8004744 <HAL_RCC_OscConfig+0x6d8>)
 800466c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004670:	f003 0302 	and.w	r3, r3, #2
 8004674:	2b00      	cmp	r3, #0
 8004676:	d0ed      	beq.n	8004654 <HAL_RCC_OscConfig+0x5e8>
 8004678:	e01d      	b.n	80046b6 <HAL_RCC_OscConfig+0x64a>
=======
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d016      	beq.n	8003706 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d8:	f7fe faf2 	bl	8001cc0 <HAL_GetTick>
 80036dc:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036de:	e00a      	b.n	80036f6 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036e0:	f7fe faee 	bl	8001cc0 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e172      	b.n	80039dc <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036f6:	4b36      	ldr	r3, [pc, #216]	; (80037d0 <HAL_RCC_OscConfig+0x6d8>)
 80036f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d0ed      	beq.n	80036e0 <HAL_RCC_OscConfig+0x5e8>
 8003704:	e01d      	b.n	8003742 <HAL_RCC_OscConfig+0x64a>
>>>>>>> ModeSelect_v2
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 800467a:	f7fe fac3 	bl	8002c04 <HAL_GetTick>
 800467e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004680:	e00a      	b.n	8004698 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004682:	f7fe fabf 	bl	8002c04 <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004690:	4293      	cmp	r3, r2
 8004692:	d901      	bls.n	8004698 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e15b      	b.n	8004950 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004698:	4b2a      	ldr	r3, [pc, #168]	; (8004744 <HAL_RCC_OscConfig+0x6d8>)
 800469a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1ed      	bne.n	8004682 <HAL_RCC_OscConfig+0x616>
=======
 8003706:	f7fe fadb 	bl	8001cc0 <HAL_GetTick>
 800370a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800370c:	e00a      	b.n	8003724 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800370e:	f7fe fad7 	bl	8001cc0 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	f241 3288 	movw	r2, #5000	; 0x1388
 800371c:	4293      	cmp	r3, r2
 800371e:	d901      	bls.n	8003724 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e15b      	b.n	80039dc <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003724:	4b2a      	ldr	r3, [pc, #168]	; (80037d0 <HAL_RCC_OscConfig+0x6d8>)
 8003726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1ed      	bne.n	800370e <HAL_RCC_OscConfig+0x616>
>>>>>>> ModeSelect_v2
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
<<<<<<< HEAD
 80046a6:	4b27      	ldr	r3, [pc, #156]	; (8004744 <HAL_RCC_OscConfig+0x6d8>)
 80046a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ac:	4a25      	ldr	r2, [pc, #148]	; (8004744 <HAL_RCC_OscConfig+0x6d8>)
 80046ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
=======
 8003732:	4b27      	ldr	r3, [pc, #156]	; (80037d0 <HAL_RCC_OscConfig+0x6d8>)
 8003734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003738:	4a25      	ldr	r2, [pc, #148]	; (80037d0 <HAL_RCC_OscConfig+0x6d8>)
 800373a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800373e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
>>>>>>> ModeSelect_v2
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
<<<<<<< HEAD
 80046b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d105      	bne.n	80046ca <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046be:	4b21      	ldr	r3, [pc, #132]	; (8004744 <HAL_RCC_OscConfig+0x6d8>)
 80046c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c2:	4a20      	ldr	r2, [pc, #128]	; (8004744 <HAL_RCC_OscConfig+0x6d8>)
 80046c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046c8:	6593      	str	r3, [r2, #88]	; 0x58
=======
 8003742:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003746:	2b01      	cmp	r3, #1
 8003748:	d105      	bne.n	8003756 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800374a:	4b21      	ldr	r3, [pc, #132]	; (80037d0 <HAL_RCC_OscConfig+0x6d8>)
 800374c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800374e:	4a20      	ldr	r2, [pc, #128]	; (80037d0 <HAL_RCC_OscConfig+0x6d8>)
 8003750:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003754:	6593      	str	r3, [r2, #88]	; 0x58
>>>>>>> ModeSelect_v2
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
<<<<<<< HEAD
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0320 	and.w	r3, r3, #32
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d041      	beq.n	800475a <HAL_RCC_OscConfig+0x6ee>
=======
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0320 	and.w	r3, r3, #32
 800375e:	2b00      	cmp	r3, #0
 8003760:	d041      	beq.n	80037e6 <HAL_RCC_OscConfig+0x6ee>
>>>>>>> ModeSelect_v2
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
<<<<<<< HEAD
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d01c      	beq.n	8004718 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80046de:	4b19      	ldr	r3, [pc, #100]	; (8004744 <HAL_RCC_OscConfig+0x6d8>)
 80046e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046e4:	4a17      	ldr	r2, [pc, #92]	; (8004744 <HAL_RCC_OscConfig+0x6d8>)
 80046e6:	f043 0301 	orr.w	r3, r3, #1
 80046ea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ee:	f7fe fa89 	bl	8002c04 <HAL_GetTick>
 80046f2:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80046f4:	e008      	b.n	8004708 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046f6:	f7fe fa85 	bl	8002c04 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	2b02      	cmp	r3, #2
 8004702:	d901      	bls.n	8004708 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e123      	b.n	8004950 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004708:	4b0e      	ldr	r3, [pc, #56]	; (8004744 <HAL_RCC_OscConfig+0x6d8>)
 800470a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d0ef      	beq.n	80046f6 <HAL_RCC_OscConfig+0x68a>
 8004716:	e020      	b.n	800475a <HAL_RCC_OscConfig+0x6ee>
=======
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003766:	2b00      	cmp	r3, #0
 8003768:	d01c      	beq.n	80037a4 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800376a:	4b19      	ldr	r3, [pc, #100]	; (80037d0 <HAL_RCC_OscConfig+0x6d8>)
 800376c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003770:	4a17      	ldr	r2, [pc, #92]	; (80037d0 <HAL_RCC_OscConfig+0x6d8>)
 8003772:	f043 0301 	orr.w	r3, r3, #1
 8003776:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800377a:	f7fe faa1 	bl	8001cc0 <HAL_GetTick>
 800377e:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003780:	e008      	b.n	8003794 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003782:	f7fe fa9d 	bl	8001cc0 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d901      	bls.n	8003794 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e123      	b.n	80039dc <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003794:	4b0e      	ldr	r3, [pc, #56]	; (80037d0 <HAL_RCC_OscConfig+0x6d8>)
 8003796:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d0ef      	beq.n	8003782 <HAL_RCC_OscConfig+0x68a>
 80037a2:	e020      	b.n	80037e6 <HAL_RCC_OscConfig+0x6ee>
>>>>>>> ModeSelect_v2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
<<<<<<< HEAD
 8004718:	4b0a      	ldr	r3, [pc, #40]	; (8004744 <HAL_RCC_OscConfig+0x6d8>)
 800471a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800471e:	4a09      	ldr	r2, [pc, #36]	; (8004744 <HAL_RCC_OscConfig+0x6d8>)
 8004720:	f023 0301 	bic.w	r3, r3, #1
 8004724:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004728:	f7fe fa6c 	bl	8002c04 <HAL_GetTick>
 800472c:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800472e:	e00d      	b.n	800474c <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004730:	f7fe fa68 	bl	8002c04 <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b02      	cmp	r3, #2
 800473c:	d906      	bls.n	800474c <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e106      	b.n	8004950 <HAL_RCC_OscConfig+0x8e4>
 8004742:	bf00      	nop
 8004744:	40021000 	.word	0x40021000
 8004748:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800474c:	4b82      	ldr	r3, [pc, #520]	; (8004958 <HAL_RCC_OscConfig+0x8ec>)
 800474e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1ea      	bne.n	8004730 <HAL_RCC_OscConfig+0x6c4>
=======
 80037a4:	4b0a      	ldr	r3, [pc, #40]	; (80037d0 <HAL_RCC_OscConfig+0x6d8>)
 80037a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037aa:	4a09      	ldr	r2, [pc, #36]	; (80037d0 <HAL_RCC_OscConfig+0x6d8>)
 80037ac:	f023 0301 	bic.w	r3, r3, #1
 80037b0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b4:	f7fe fa84 	bl	8001cc0 <HAL_GetTick>
 80037b8:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037ba:	e00d      	b.n	80037d8 <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037bc:	f7fe fa80 	bl	8001cc0 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d906      	bls.n	80037d8 <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e106      	b.n	80039dc <HAL_RCC_OscConfig+0x8e4>
 80037ce:	bf00      	nop
 80037d0:	40021000 	.word	0x40021000
 80037d4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037d8:	4b82      	ldr	r3, [pc, #520]	; (80039e4 <HAL_RCC_OscConfig+0x8ec>)
 80037da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1ea      	bne.n	80037bc <HAL_RCC_OscConfig+0x6c4>
>>>>>>> ModeSelect_v2
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
<<<<<<< HEAD
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475e:	2b00      	cmp	r3, #0
 8004760:	f000 80f5 	beq.w	800494e <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004768:	2b02      	cmp	r3, #2
 800476a:	f040 80cb 	bne.w	8004904 <HAL_RCC_OscConfig+0x898>
=======
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f000 80f5 	beq.w	80039da <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	f040 80cb 	bne.w	8003990 <HAL_RCC_OscConfig+0x898>
>>>>>>> ModeSelect_v2
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
<<<<<<< HEAD
 800476e:	4b7a      	ldr	r3, [pc, #488]	; (8004958 <HAL_RCC_OscConfig+0x8ec>)
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	f003 0203 	and.w	r2, r3, #3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477e:	429a      	cmp	r2, r3
 8004780:	d12c      	bne.n	80047dc <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800478c:	3b01      	subs	r3, #1
 800478e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004790:	429a      	cmp	r2, r3
 8004792:	d123      	bne.n	80047dc <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800479e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d11b      	bne.n	80047dc <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ae:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d113      	bne.n	80047dc <HAL_RCC_OscConfig+0x770>
=======
 80037fa:	4b7a      	ldr	r3, [pc, #488]	; (80039e4 <HAL_RCC_OscConfig+0x8ec>)
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	f003 0203 	and.w	r2, r3, #3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380a:	429a      	cmp	r2, r3
 800380c:	d12c      	bne.n	8003868 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003818:	3b01      	subs	r3, #1
 800381a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800381c:	429a      	cmp	r2, r3
 800381e:	d123      	bne.n	8003868 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800382c:	429a      	cmp	r2, r3
 800382e:	d11b      	bne.n	8003868 <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800383a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800383c:	429a      	cmp	r2, r3
 800383e:	d113      	bne.n	8003868 <HAL_RCC_OscConfig+0x770>
>>>>>>> ModeSelect_v2
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
<<<<<<< HEAD
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047be:	085b      	lsrs	r3, r3, #1
 80047c0:	3b01      	subs	r3, #1
 80047c2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d109      	bne.n	80047dc <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d2:	085b      	lsrs	r3, r3, #1
 80047d4:	3b01      	subs	r3, #1
 80047d6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047d8:	429a      	cmp	r2, r3
 80047da:	d06d      	beq.n	80048b8 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047dc:	6a3b      	ldr	r3, [r7, #32]
 80047de:	2b0c      	cmp	r3, #12
 80047e0:	d068      	beq.n	80048b4 <HAL_RCC_OscConfig+0x848>
=======
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384a:	085b      	lsrs	r3, r3, #1
 800384c:	3b01      	subs	r3, #1
 800384e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003850:	429a      	cmp	r2, r3
 8003852:	d109      	bne.n	8003868 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385e:	085b      	lsrs	r3, r3, #1
 8003860:	3b01      	subs	r3, #1
 8003862:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003864:	429a      	cmp	r2, r3
 8003866:	d06d      	beq.n	8003944 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003868:	6a3b      	ldr	r3, [r7, #32]
 800386a:	2b0c      	cmp	r3, #12
 800386c:	d068      	beq.n	8003940 <HAL_RCC_OscConfig+0x848>
>>>>>>> ModeSelect_v2
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
<<<<<<< HEAD
 80047e2:	4b5d      	ldr	r3, [pc, #372]	; (8004958 <HAL_RCC_OscConfig+0x8ec>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d105      	bne.n	80047fa <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80047ee:	4b5a      	ldr	r3, [pc, #360]	; (8004958 <HAL_RCC_OscConfig+0x8ec>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <HAL_RCC_OscConfig+0x792>
=======
 800386e:	4b5d      	ldr	r3, [pc, #372]	; (80039e4 <HAL_RCC_OscConfig+0x8ec>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d105      	bne.n	8003886 <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800387a:	4b5a      	ldr	r3, [pc, #360]	; (80039e4 <HAL_RCC_OscConfig+0x8ec>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <HAL_RCC_OscConfig+0x792>
>>>>>>> ModeSelect_v2
#endif
            )
          {
            return HAL_ERROR;
<<<<<<< HEAD
 80047fa:	2301      	movs	r3, #1
 80047fc:	e0a8      	b.n	8004950 <HAL_RCC_OscConfig+0x8e4>
=======
 8003886:	2301      	movs	r3, #1
 8003888:	e0a8      	b.n	80039dc <HAL_RCC_OscConfig+0x8e4>
>>>>>>> ModeSelect_v2
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 80047fe:	4b56      	ldr	r3, [pc, #344]	; (8004958 <HAL_RCC_OscConfig+0x8ec>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a55      	ldr	r2, [pc, #340]	; (8004958 <HAL_RCC_OscConfig+0x8ec>)
 8004804:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004808:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800480a:	f7fe f9fb 	bl	8002c04 <HAL_GetTick>
 800480e:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004810:	e008      	b.n	8004824 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004812:	f7fe f9f7 	bl	8002c04 <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	2b02      	cmp	r3, #2
 800481e:	d901      	bls.n	8004824 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e095      	b.n	8004950 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004824:	4b4c      	ldr	r3, [pc, #304]	; (8004958 <HAL_RCC_OscConfig+0x8ec>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d1f0      	bne.n	8004812 <HAL_RCC_OscConfig+0x7a6>
=======
 800388a:	4b56      	ldr	r3, [pc, #344]	; (80039e4 <HAL_RCC_OscConfig+0x8ec>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a55      	ldr	r2, [pc, #340]	; (80039e4 <HAL_RCC_OscConfig+0x8ec>)
 8003890:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003894:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003896:	f7fe fa13 	bl	8001cc0 <HAL_GetTick>
 800389a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800389c:	e008      	b.n	80038b0 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800389e:	f7fe fa0f 	bl	8001cc0 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d901      	bls.n	80038b0 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e095      	b.n	80039dc <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038b0:	4b4c      	ldr	r3, [pc, #304]	; (80039e4 <HAL_RCC_OscConfig+0x8ec>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1f0      	bne.n	800389e <HAL_RCC_OscConfig+0x7a6>
>>>>>>> ModeSelect_v2
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
<<<<<<< HEAD
 8004830:	4b49      	ldr	r3, [pc, #292]	; (8004958 <HAL_RCC_OscConfig+0x8ec>)
 8004832:	68da      	ldr	r2, [r3, #12]
 8004834:	4b49      	ldr	r3, [pc, #292]	; (800495c <HAL_RCC_OscConfig+0x8f0>)
 8004836:	4013      	ands	r3, r2
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004840:	3a01      	subs	r2, #1
 8004842:	0112      	lsls	r2, r2, #4
 8004844:	4311      	orrs	r1, r2
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800484a:	0212      	lsls	r2, r2, #8
 800484c:	4311      	orrs	r1, r2
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004852:	0852      	lsrs	r2, r2, #1
 8004854:	3a01      	subs	r2, #1
 8004856:	0552      	lsls	r2, r2, #21
 8004858:	4311      	orrs	r1, r2
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800485e:	0852      	lsrs	r2, r2, #1
 8004860:	3a01      	subs	r2, #1
 8004862:	0652      	lsls	r2, r2, #25
 8004864:	4311      	orrs	r1, r2
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800486a:	06d2      	lsls	r2, r2, #27
 800486c:	430a      	orrs	r2, r1
 800486e:	493a      	ldr	r1, [pc, #232]	; (8004958 <HAL_RCC_OscConfig+0x8ec>)
 8004870:	4313      	orrs	r3, r2
 8004872:	60cb      	str	r3, [r1, #12]
=======
 80038bc:	4b49      	ldr	r3, [pc, #292]	; (80039e4 <HAL_RCC_OscConfig+0x8ec>)
 80038be:	68da      	ldr	r2, [r3, #12]
 80038c0:	4b49      	ldr	r3, [pc, #292]	; (80039e8 <HAL_RCC_OscConfig+0x8f0>)
 80038c2:	4013      	ands	r3, r2
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80038cc:	3a01      	subs	r2, #1
 80038ce:	0112      	lsls	r2, r2, #4
 80038d0:	4311      	orrs	r1, r2
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038d6:	0212      	lsls	r2, r2, #8
 80038d8:	4311      	orrs	r1, r2
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80038de:	0852      	lsrs	r2, r2, #1
 80038e0:	3a01      	subs	r2, #1
 80038e2:	0552      	lsls	r2, r2, #21
 80038e4:	4311      	orrs	r1, r2
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80038ea:	0852      	lsrs	r2, r2, #1
 80038ec:	3a01      	subs	r2, #1
 80038ee:	0652      	lsls	r2, r2, #25
 80038f0:	4311      	orrs	r1, r2
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80038f6:	06d2      	lsls	r2, r2, #27
 80038f8:	430a      	orrs	r2, r1
 80038fa:	493a      	ldr	r1, [pc, #232]	; (80039e4 <HAL_RCC_OscConfig+0x8ec>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	60cb      	str	r3, [r1, #12]
>>>>>>> ModeSelect_v2
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
<<<<<<< HEAD
 8004874:	4b38      	ldr	r3, [pc, #224]	; (8004958 <HAL_RCC_OscConfig+0x8ec>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a37      	ldr	r2, [pc, #220]	; (8004958 <HAL_RCC_OscConfig+0x8ec>)
 800487a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800487e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004880:	4b35      	ldr	r3, [pc, #212]	; (8004958 <HAL_RCC_OscConfig+0x8ec>)
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	4a34      	ldr	r2, [pc, #208]	; (8004958 <HAL_RCC_OscConfig+0x8ec>)
 8004886:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800488a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800488c:	f7fe f9ba 	bl	8002c04 <HAL_GetTick>
 8004890:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004892:	e008      	b.n	80048a6 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004894:	f7fe f9b6 	bl	8002c04 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e054      	b.n	8004950 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048a6:	4b2c      	ldr	r3, [pc, #176]	; (8004958 <HAL_RCC_OscConfig+0x8ec>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d0f0      	beq.n	8004894 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048b2:	e04c      	b.n	800494e <HAL_RCC_OscConfig+0x8e2>
=======
 8003900:	4b38      	ldr	r3, [pc, #224]	; (80039e4 <HAL_RCC_OscConfig+0x8ec>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a37      	ldr	r2, [pc, #220]	; (80039e4 <HAL_RCC_OscConfig+0x8ec>)
 8003906:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800390a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800390c:	4b35      	ldr	r3, [pc, #212]	; (80039e4 <HAL_RCC_OscConfig+0x8ec>)
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	4a34      	ldr	r2, [pc, #208]	; (80039e4 <HAL_RCC_OscConfig+0x8ec>)
 8003912:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003916:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003918:	f7fe f9d2 	bl	8001cc0 <HAL_GetTick>
 800391c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003920:	f7fe f9ce 	bl	8001cc0 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e054      	b.n	80039dc <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003932:	4b2c      	ldr	r3, [pc, #176]	; (80039e4 <HAL_RCC_OscConfig+0x8ec>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d0f0      	beq.n	8003920 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800393e:	e04c      	b.n	80039da <HAL_RCC_OscConfig+0x8e2>
>>>>>>> ModeSelect_v2
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
<<<<<<< HEAD
 80048b4:	2301      	movs	r3, #1
 80048b6:	e04b      	b.n	8004950 <HAL_RCC_OscConfig+0x8e4>
=======
 8003940:	2301      	movs	r3, #1
 8003942:	e04b      	b.n	80039dc <HAL_RCC_OscConfig+0x8e4>
>>>>>>> ModeSelect_v2
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
<<<<<<< HEAD
 80048b8:	4b27      	ldr	r3, [pc, #156]	; (8004958 <HAL_RCC_OscConfig+0x8ec>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d144      	bne.n	800494e <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80048c4:	4b24      	ldr	r3, [pc, #144]	; (8004958 <HAL_RCC_OscConfig+0x8ec>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a23      	ldr	r2, [pc, #140]	; (8004958 <HAL_RCC_OscConfig+0x8ec>)
 80048ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048ce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80048d0:	4b21      	ldr	r3, [pc, #132]	; (8004958 <HAL_RCC_OscConfig+0x8ec>)
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	4a20      	ldr	r2, [pc, #128]	; (8004958 <HAL_RCC_OscConfig+0x8ec>)
 80048d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048da:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80048dc:	f7fe f992 	bl	8002c04 <HAL_GetTick>
 80048e0:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048e2:	e008      	b.n	80048f6 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048e4:	f7fe f98e 	bl	8002c04 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d901      	bls.n	80048f6 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e02c      	b.n	8004950 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048f6:	4b18      	ldr	r3, [pc, #96]	; (8004958 <HAL_RCC_OscConfig+0x8ec>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d0f0      	beq.n	80048e4 <HAL_RCC_OscConfig+0x878>
 8004902:	e024      	b.n	800494e <HAL_RCC_OscConfig+0x8e2>
=======
 8003944:	4b27      	ldr	r3, [pc, #156]	; (80039e4 <HAL_RCC_OscConfig+0x8ec>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d144      	bne.n	80039da <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003950:	4b24      	ldr	r3, [pc, #144]	; (80039e4 <HAL_RCC_OscConfig+0x8ec>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a23      	ldr	r2, [pc, #140]	; (80039e4 <HAL_RCC_OscConfig+0x8ec>)
 8003956:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800395a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800395c:	4b21      	ldr	r3, [pc, #132]	; (80039e4 <HAL_RCC_OscConfig+0x8ec>)
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	4a20      	ldr	r2, [pc, #128]	; (80039e4 <HAL_RCC_OscConfig+0x8ec>)
 8003962:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003966:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003968:	f7fe f9aa 	bl	8001cc0 <HAL_GetTick>
 800396c:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800396e:	e008      	b.n	8003982 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003970:	f7fe f9a6 	bl	8001cc0 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e02c      	b.n	80039dc <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003982:	4b18      	ldr	r3, [pc, #96]	; (80039e4 <HAL_RCC_OscConfig+0x8ec>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d0f0      	beq.n	8003970 <HAL_RCC_OscConfig+0x878>
 800398e:	e024      	b.n	80039da <HAL_RCC_OscConfig+0x8e2>
>>>>>>> ModeSelect_v2
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
<<<<<<< HEAD
 8004904:	6a3b      	ldr	r3, [r7, #32]
 8004906:	2b0c      	cmp	r3, #12
 8004908:	d01f      	beq.n	800494a <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800490a:	4b13      	ldr	r3, [pc, #76]	; (8004958 <HAL_RCC_OscConfig+0x8ec>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a12      	ldr	r2, [pc, #72]	; (8004958 <HAL_RCC_OscConfig+0x8ec>)
 8004910:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004914:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004916:	f7fe f975 	bl	8002c04 <HAL_GetTick>
 800491a:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800491c:	e008      	b.n	8004930 <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800491e:	f7fe f971 	bl	8002c04 <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	2b02      	cmp	r3, #2
 800492a:	d901      	bls.n	8004930 <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e00f      	b.n	8004950 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004930:	4b09      	ldr	r3, [pc, #36]	; (8004958 <HAL_RCC_OscConfig+0x8ec>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1f0      	bne.n	800491e <HAL_RCC_OscConfig+0x8b2>
=======
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	2b0c      	cmp	r3, #12
 8003994:	d01f      	beq.n	80039d6 <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003996:	4b13      	ldr	r3, [pc, #76]	; (80039e4 <HAL_RCC_OscConfig+0x8ec>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a12      	ldr	r2, [pc, #72]	; (80039e4 <HAL_RCC_OscConfig+0x8ec>)
 800399c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a2:	f7fe f98d 	bl	8001cc0 <HAL_GetTick>
 80039a6:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039a8:	e008      	b.n	80039bc <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039aa:	f7fe f989 	bl	8001cc0 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d901      	bls.n	80039bc <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e00f      	b.n	80039dc <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039bc:	4b09      	ldr	r3, [pc, #36]	; (80039e4 <HAL_RCC_OscConfig+0x8ec>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1f0      	bne.n	80039aa <HAL_RCC_OscConfig+0x8b2>
>>>>>>> ModeSelect_v2
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
<<<<<<< HEAD
 800493c:	4b06      	ldr	r3, [pc, #24]	; (8004958 <HAL_RCC_OscConfig+0x8ec>)
 800493e:	68da      	ldr	r2, [r3, #12]
 8004940:	4905      	ldr	r1, [pc, #20]	; (8004958 <HAL_RCC_OscConfig+0x8ec>)
 8004942:	4b07      	ldr	r3, [pc, #28]	; (8004960 <HAL_RCC_OscConfig+0x8f4>)
 8004944:	4013      	ands	r3, r2
 8004946:	60cb      	str	r3, [r1, #12]
 8004948:	e001      	b.n	800494e <HAL_RCC_OscConfig+0x8e2>
=======
 80039c8:	4b06      	ldr	r3, [pc, #24]	; (80039e4 <HAL_RCC_OscConfig+0x8ec>)
 80039ca:	68da      	ldr	r2, [r3, #12]
 80039cc:	4905      	ldr	r1, [pc, #20]	; (80039e4 <HAL_RCC_OscConfig+0x8ec>)
 80039ce:	4b07      	ldr	r3, [pc, #28]	; (80039ec <HAL_RCC_OscConfig+0x8f4>)
 80039d0:	4013      	ands	r3, r2
 80039d2:	60cb      	str	r3, [r1, #12]
 80039d4:	e001      	b.n	80039da <HAL_RCC_OscConfig+0x8e2>
>>>>>>> ModeSelect_v2
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
<<<<<<< HEAD
 800494a:	2301      	movs	r3, #1
 800494c:	e000      	b.n	8004950 <HAL_RCC_OscConfig+0x8e4>
=======
 80039d6:	2301      	movs	r3, #1
 80039d8:	e000      	b.n	80039dc <HAL_RCC_OscConfig+0x8e4>
>>>>>>> ModeSelect_v2
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3728      	adds	r7, #40	; 0x28
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	40021000 	.word	0x40021000
 800495c:	019d800c 	.word	0x019d800c
 8004960:	feeefffc 	.word	0xfeeefffc

08004964 <HAL_RCC_ClockConfig>:
=======
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3728      	adds	r7, #40	; 0x28
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	40021000 	.word	0x40021000
 80039e8:	019d800c 	.word	0x019d800c
 80039ec:	feeefffc 	.word	0xfeeefffc

080039f0 <HAL_RCC_ClockConfig>:
>>>>>>> ModeSelect_v2
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
=======
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
>>>>>>> ModeSelect_v2
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
<<<<<<< HEAD
 800496e:	2300      	movs	r3, #0
 8004970:	617b      	str	r3, [r7, #20]
=======
 80039fa:	2300      	movs	r3, #0
 80039fc:	617b      	str	r3, [r7, #20]
>>>>>>> ModeSelect_v2
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
<<<<<<< HEAD
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d101      	bne.n	800497c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e11d      	b.n	8004bb8 <HAL_RCC_ClockConfig+0x254>
=======
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d101      	bne.n	8003a08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e11d      	b.n	8003c44 <HAL_RCC_ClockConfig+0x254>
>>>>>>> ModeSelect_v2
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 800497c:	4b90      	ldr	r3, [pc, #576]	; (8004bc0 <HAL_RCC_ClockConfig+0x25c>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 030f 	and.w	r3, r3, #15
 8004984:	683a      	ldr	r2, [r7, #0]
 8004986:	429a      	cmp	r2, r3
 8004988:	d910      	bls.n	80049ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800498a:	4b8d      	ldr	r3, [pc, #564]	; (8004bc0 <HAL_RCC_ClockConfig+0x25c>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f023 020f 	bic.w	r2, r3, #15
 8004992:	498b      	ldr	r1, [pc, #556]	; (8004bc0 <HAL_RCC_ClockConfig+0x25c>)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	4313      	orrs	r3, r2
 8004998:	600b      	str	r3, [r1, #0]
=======
 8003a08:	4b90      	ldr	r3, [pc, #576]	; (8003c4c <HAL_RCC_ClockConfig+0x25c>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 030f 	and.w	r3, r3, #15
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d910      	bls.n	8003a38 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a16:	4b8d      	ldr	r3, [pc, #564]	; (8003c4c <HAL_RCC_ClockConfig+0x25c>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f023 020f 	bic.w	r2, r3, #15
 8003a1e:	498b      	ldr	r1, [pc, #556]	; (8003c4c <HAL_RCC_ClockConfig+0x25c>)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	600b      	str	r3, [r1, #0]
>>>>>>> ModeSelect_v2

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 800499a:	4b89      	ldr	r3, [pc, #548]	; (8004bc0 <HAL_RCC_ClockConfig+0x25c>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 030f 	and.w	r3, r3, #15
 80049a2:	683a      	ldr	r2, [r7, #0]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d001      	beq.n	80049ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e105      	b.n	8004bb8 <HAL_RCC_ClockConfig+0x254>
=======
 8003a26:	4b89      	ldr	r3, [pc, #548]	; (8003c4c <HAL_RCC_ClockConfig+0x25c>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 030f 	and.w	r3, r3, #15
 8003a2e:	683a      	ldr	r2, [r7, #0]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d001      	beq.n	8003a38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e105      	b.n	8003c44 <HAL_RCC_ClockConfig+0x254>
>>>>>>> ModeSelect_v2
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0302 	and.w	r3, r3, #2
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d010      	beq.n	80049da <HAL_RCC_ClockConfig+0x76>
=======
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0302 	and.w	r3, r3, #2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d010      	beq.n	8003a66 <HAL_RCC_ClockConfig+0x76>
>>>>>>> ModeSelect_v2
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
<<<<<<< HEAD
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	689a      	ldr	r2, [r3, #8]
 80049bc:	4b81      	ldr	r3, [pc, #516]	; (8004bc4 <HAL_RCC_ClockConfig+0x260>)
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d908      	bls.n	80049da <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049c8:	4b7e      	ldr	r3, [pc, #504]	; (8004bc4 <HAL_RCC_ClockConfig+0x260>)
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	497b      	ldr	r1, [pc, #492]	; (8004bc4 <HAL_RCC_ClockConfig+0x260>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	608b      	str	r3, [r1, #8]
=======
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689a      	ldr	r2, [r3, #8]
 8003a48:	4b81      	ldr	r3, [pc, #516]	; (8003c50 <HAL_RCC_ClockConfig+0x260>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d908      	bls.n	8003a66 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a54:	4b7e      	ldr	r3, [pc, #504]	; (8003c50 <HAL_RCC_ClockConfig+0x260>)
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	497b      	ldr	r1, [pc, #492]	; (8003c50 <HAL_RCC_ClockConfig+0x260>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	608b      	str	r3, [r1, #8]
>>>>>>> ModeSelect_v2
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d079      	beq.n	8004ada <HAL_RCC_ClockConfig+0x176>
=======
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d079      	beq.n	8003b66 <HAL_RCC_ClockConfig+0x176>
>>>>>>> ModeSelect_v2
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
<<<<<<< HEAD
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	2b03      	cmp	r3, #3
 80049ec:	d11e      	bne.n	8004a2c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049ee:	4b75      	ldr	r3, [pc, #468]	; (8004bc4 <HAL_RCC_ClockConfig+0x260>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d101      	bne.n	80049fe <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e0dc      	b.n	8004bb8 <HAL_RCC_ClockConfig+0x254>
=======
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	2b03      	cmp	r3, #3
 8003a78:	d11e      	bne.n	8003ab8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a7a:	4b75      	ldr	r3, [pc, #468]	; (8003c50 <HAL_RCC_ClockConfig+0x260>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e0dc      	b.n	8003c44 <HAL_RCC_ClockConfig+0x254>
>>>>>>> ModeSelect_v2
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
<<<<<<< HEAD
 80049fe:	f000 fa09 	bl	8004e14 <RCC_GetSysClockFreqFromPLLSource>
 8004a02:	4603      	mov	r3, r0
 8004a04:	4a70      	ldr	r2, [pc, #448]	; (8004bc8 <HAL_RCC_ClockConfig+0x264>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d946      	bls.n	8004a98 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004a0a:	4b6e      	ldr	r3, [pc, #440]	; (8004bc4 <HAL_RCC_ClockConfig+0x260>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d140      	bne.n	8004a98 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004a16:	4b6b      	ldr	r3, [pc, #428]	; (8004bc4 <HAL_RCC_ClockConfig+0x260>)
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a1e:	4a69      	ldr	r2, [pc, #420]	; (8004bc4 <HAL_RCC_ClockConfig+0x260>)
 8004a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a24:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004a26:	2380      	movs	r3, #128	; 0x80
 8004a28:	617b      	str	r3, [r7, #20]
 8004a2a:	e035      	b.n	8004a98 <HAL_RCC_ClockConfig+0x134>
=======
 8003a8a:	f000 fa09 	bl	8003ea0 <RCC_GetSysClockFreqFromPLLSource>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	4a70      	ldr	r2, [pc, #448]	; (8003c54 <HAL_RCC_ClockConfig+0x264>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d946      	bls.n	8003b24 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003a96:	4b6e      	ldr	r3, [pc, #440]	; (8003c50 <HAL_RCC_ClockConfig+0x260>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d140      	bne.n	8003b24 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003aa2:	4b6b      	ldr	r3, [pc, #428]	; (8003c50 <HAL_RCC_ClockConfig+0x260>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003aaa:	4a69      	ldr	r2, [pc, #420]	; (8003c50 <HAL_RCC_ClockConfig+0x260>)
 8003aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ab0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003ab2:	2380      	movs	r3, #128	; 0x80
 8003ab4:	617b      	str	r3, [r7, #20]
 8003ab6:	e035      	b.n	8003b24 <HAL_RCC_ClockConfig+0x134>
>>>>>>> ModeSelect_v2
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d107      	bne.n	8004a44 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a34:	4b63      	ldr	r3, [pc, #396]	; (8004bc4 <HAL_RCC_ClockConfig+0x260>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d115      	bne.n	8004a6c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e0b9      	b.n	8004bb8 <HAL_RCC_ClockConfig+0x254>
=======
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d107      	bne.n	8003ad0 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ac0:	4b63      	ldr	r3, [pc, #396]	; (8003c50 <HAL_RCC_ClockConfig+0x260>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d115      	bne.n	8003af8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e0b9      	b.n	8003c44 <HAL_RCC_ClockConfig+0x254>
>>>>>>> ModeSelect_v2
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
<<<<<<< HEAD
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d107      	bne.n	8004a5c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a4c:	4b5d      	ldr	r3, [pc, #372]	; (8004bc4 <HAL_RCC_ClockConfig+0x260>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0302 	and.w	r3, r3, #2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d109      	bne.n	8004a6c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e0ad      	b.n	8004bb8 <HAL_RCC_ClockConfig+0x254>
=======
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d107      	bne.n	8003ae8 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ad8:	4b5d      	ldr	r3, [pc, #372]	; (8003c50 <HAL_RCC_ClockConfig+0x260>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d109      	bne.n	8003af8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e0ad      	b.n	8003c44 <HAL_RCC_ClockConfig+0x254>
>>>>>>> ModeSelect_v2
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
<<<<<<< HEAD
 8004a5c:	4b59      	ldr	r3, [pc, #356]	; (8004bc4 <HAL_RCC_ClockConfig+0x260>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d101      	bne.n	8004a6c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e0a5      	b.n	8004bb8 <HAL_RCC_ClockConfig+0x254>
=======
 8003ae8:	4b59      	ldr	r3, [pc, #356]	; (8003c50 <HAL_RCC_ClockConfig+0x260>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d101      	bne.n	8003af8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e0a5      	b.n	8003c44 <HAL_RCC_ClockConfig+0x254>
>>>>>>> ModeSelect_v2
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
<<<<<<< HEAD
 8004a6c:	f000 f8b4 	bl	8004bd8 <HAL_RCC_GetSysClockFreq>
 8004a70:	4603      	mov	r3, r0
 8004a72:	4a55      	ldr	r2, [pc, #340]	; (8004bc8 <HAL_RCC_ClockConfig+0x264>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d90f      	bls.n	8004a98 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004a78:	4b52      	ldr	r3, [pc, #328]	; (8004bc4 <HAL_RCC_ClockConfig+0x260>)
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d109      	bne.n	8004a98 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004a84:	4b4f      	ldr	r3, [pc, #316]	; (8004bc4 <HAL_RCC_ClockConfig+0x260>)
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a8c:	4a4d      	ldr	r2, [pc, #308]	; (8004bc4 <HAL_RCC_ClockConfig+0x260>)
 8004a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a92:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004a94:	2380      	movs	r3, #128	; 0x80
 8004a96:	617b      	str	r3, [r7, #20]
=======
 8003af8:	f000 f8b4 	bl	8003c64 <HAL_RCC_GetSysClockFreq>
 8003afc:	4603      	mov	r3, r0
 8003afe:	4a55      	ldr	r2, [pc, #340]	; (8003c54 <HAL_RCC_ClockConfig+0x264>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d90f      	bls.n	8003b24 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003b04:	4b52      	ldr	r3, [pc, #328]	; (8003c50 <HAL_RCC_ClockConfig+0x260>)
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d109      	bne.n	8003b24 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b10:	4b4f      	ldr	r3, [pc, #316]	; (8003c50 <HAL_RCC_ClockConfig+0x260>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b18:	4a4d      	ldr	r2, [pc, #308]	; (8003c50 <HAL_RCC_ClockConfig+0x260>)
 8003b1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b1e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003b20:	2380      	movs	r3, #128	; 0x80
 8003b22:	617b      	str	r3, [r7, #20]
>>>>>>> ModeSelect_v2
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< HEAD
 8004a98:	4b4a      	ldr	r3, [pc, #296]	; (8004bc4 <HAL_RCC_ClockConfig+0x260>)
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f023 0203 	bic.w	r2, r3, #3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	4947      	ldr	r1, [pc, #284]	; (8004bc4 <HAL_RCC_ClockConfig+0x260>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aaa:	f7fe f8ab 	bl	8002c04 <HAL_GetTick>
 8004aae:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ab0:	e00a      	b.n	8004ac8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ab2:	f7fe f8a7 	bl	8002c04 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d901      	bls.n	8004ac8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e077      	b.n	8004bb8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ac8:	4b3e      	ldr	r3, [pc, #248]	; (8004bc4 <HAL_RCC_ClockConfig+0x260>)
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f003 020c 	and.w	r2, r3, #12
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d1eb      	bne.n	8004ab2 <HAL_RCC_ClockConfig+0x14e>
=======
 8003b24:	4b4a      	ldr	r3, [pc, #296]	; (8003c50 <HAL_RCC_ClockConfig+0x260>)
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f023 0203 	bic.w	r2, r3, #3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	4947      	ldr	r1, [pc, #284]	; (8003c50 <HAL_RCC_ClockConfig+0x260>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b36:	f7fe f8c3 	bl	8001cc0 <HAL_GetTick>
 8003b3a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b3c:	e00a      	b.n	8003b54 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b3e:	f7fe f8bf 	bl	8001cc0 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d901      	bls.n	8003b54 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e077      	b.n	8003c44 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b54:	4b3e      	ldr	r3, [pc, #248]	; (8003c50 <HAL_RCC_ClockConfig+0x260>)
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f003 020c 	and.w	r2, r3, #12
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d1eb      	bne.n	8003b3e <HAL_RCC_ClockConfig+0x14e>
>>>>>>> ModeSelect_v2
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
<<<<<<< HEAD
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	2b80      	cmp	r3, #128	; 0x80
 8004ade:	d105      	bne.n	8004aec <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004ae0:	4b38      	ldr	r3, [pc, #224]	; (8004bc4 <HAL_RCC_ClockConfig+0x260>)
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	4a37      	ldr	r2, [pc, #220]	; (8004bc4 <HAL_RCC_ClockConfig+0x260>)
 8004ae6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004aea:	6093      	str	r3, [r2, #8]
=======
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	2b80      	cmp	r3, #128	; 0x80
 8003b6a:	d105      	bne.n	8003b78 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003b6c:	4b38      	ldr	r3, [pc, #224]	; (8003c50 <HAL_RCC_ClockConfig+0x260>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	4a37      	ldr	r2, [pc, #220]	; (8003c50 <HAL_RCC_ClockConfig+0x260>)
 8003b72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b76:	6093      	str	r3, [r2, #8]
>>>>>>> ModeSelect_v2
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0302 	and.w	r3, r3, #2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d010      	beq.n	8004b1a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	689a      	ldr	r2, [r3, #8]
 8004afc:	4b31      	ldr	r3, [pc, #196]	; (8004bc4 <HAL_RCC_ClockConfig+0x260>)
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d208      	bcs.n	8004b1a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b08:	4b2e      	ldr	r3, [pc, #184]	; (8004bc4 <HAL_RCC_ClockConfig+0x260>)
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	492b      	ldr	r1, [pc, #172]	; (8004bc4 <HAL_RCC_ClockConfig+0x260>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	608b      	str	r3, [r1, #8]
=======
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d010      	beq.n	8003ba6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689a      	ldr	r2, [r3, #8]
 8003b88:	4b31      	ldr	r3, [pc, #196]	; (8003c50 <HAL_RCC_ClockConfig+0x260>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d208      	bcs.n	8003ba6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b94:	4b2e      	ldr	r3, [pc, #184]	; (8003c50 <HAL_RCC_ClockConfig+0x260>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	492b      	ldr	r1, [pc, #172]	; (8003c50 <HAL_RCC_ClockConfig+0x260>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	608b      	str	r3, [r1, #8]
>>>>>>> ModeSelect_v2
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8004b1a:	4b29      	ldr	r3, [pc, #164]	; (8004bc0 <HAL_RCC_ClockConfig+0x25c>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 030f 	and.w	r3, r3, #15
 8004b22:	683a      	ldr	r2, [r7, #0]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d210      	bcs.n	8004b4a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b28:	4b25      	ldr	r3, [pc, #148]	; (8004bc0 <HAL_RCC_ClockConfig+0x25c>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f023 020f 	bic.w	r2, r3, #15
 8004b30:	4923      	ldr	r1, [pc, #140]	; (8004bc0 <HAL_RCC_ClockConfig+0x25c>)
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	600b      	str	r3, [r1, #0]
=======
 8003ba6:	4b29      	ldr	r3, [pc, #164]	; (8003c4c <HAL_RCC_ClockConfig+0x25c>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 030f 	and.w	r3, r3, #15
 8003bae:	683a      	ldr	r2, [r7, #0]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d210      	bcs.n	8003bd6 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bb4:	4b25      	ldr	r3, [pc, #148]	; (8003c4c <HAL_RCC_ClockConfig+0x25c>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f023 020f 	bic.w	r2, r3, #15
 8003bbc:	4923      	ldr	r1, [pc, #140]	; (8003c4c <HAL_RCC_ClockConfig+0x25c>)
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	600b      	str	r3, [r1, #0]
>>>>>>> ModeSelect_v2

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8004b38:	4b21      	ldr	r3, [pc, #132]	; (8004bc0 <HAL_RCC_ClockConfig+0x25c>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 030f 	and.w	r3, r3, #15
 8004b40:	683a      	ldr	r2, [r7, #0]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d001      	beq.n	8004b4a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e036      	b.n	8004bb8 <HAL_RCC_ClockConfig+0x254>
=======
 8003bc4:	4b21      	ldr	r3, [pc, #132]	; (8003c4c <HAL_RCC_ClockConfig+0x25c>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 030f 	and.w	r3, r3, #15
 8003bcc:	683a      	ldr	r2, [r7, #0]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d001      	beq.n	8003bd6 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e036      	b.n	8003c44 <HAL_RCC_ClockConfig+0x254>
>>>>>>> ModeSelect_v2
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0304 	and.w	r3, r3, #4
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d008      	beq.n	8004b68 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b56:	4b1b      	ldr	r3, [pc, #108]	; (8004bc4 <HAL_RCC_ClockConfig+0x260>)
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	4918      	ldr	r1, [pc, #96]	; (8004bc4 <HAL_RCC_ClockConfig+0x260>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	608b      	str	r3, [r1, #8]
=======
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0304 	and.w	r3, r3, #4
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d008      	beq.n	8003bf4 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003be2:	4b1b      	ldr	r3, [pc, #108]	; (8003c50 <HAL_RCC_ClockConfig+0x260>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	4918      	ldr	r1, [pc, #96]	; (8003c50 <HAL_RCC_ClockConfig+0x260>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	608b      	str	r3, [r1, #8]
>>>>>>> ModeSelect_v2
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0308 	and.w	r3, r3, #8
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d009      	beq.n	8004b88 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b74:	4b13      	ldr	r3, [pc, #76]	; (8004bc4 <HAL_RCC_ClockConfig+0x260>)
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	00db      	lsls	r3, r3, #3
 8004b82:	4910      	ldr	r1, [pc, #64]	; (8004bc4 <HAL_RCC_ClockConfig+0x260>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	608b      	str	r3, [r1, #8]
=======
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0308 	and.w	r3, r3, #8
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d009      	beq.n	8003c14 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c00:	4b13      	ldr	r3, [pc, #76]	; (8003c50 <HAL_RCC_ClockConfig+0x260>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	00db      	lsls	r3, r3, #3
 8003c0e:	4910      	ldr	r1, [pc, #64]	; (8003c50 <HAL_RCC_ClockConfig+0x260>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	608b      	str	r3, [r1, #8]
>>>>>>> ModeSelect_v2
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
<<<<<<< HEAD
 8004b88:	f000 f826 	bl	8004bd8 <HAL_RCC_GetSysClockFreq>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	4b0d      	ldr	r3, [pc, #52]	; (8004bc4 <HAL_RCC_ClockConfig+0x260>)
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	091b      	lsrs	r3, r3, #4
 8004b94:	f003 030f 	and.w	r3, r3, #15
 8004b98:	490c      	ldr	r1, [pc, #48]	; (8004bcc <HAL_RCC_ClockConfig+0x268>)
 8004b9a:	5ccb      	ldrb	r3, [r1, r3]
 8004b9c:	f003 031f 	and.w	r3, r3, #31
 8004ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ba4:	4a0a      	ldr	r2, [pc, #40]	; (8004bd0 <HAL_RCC_ClockConfig+0x26c>)
 8004ba6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004ba8:	4b0a      	ldr	r3, [pc, #40]	; (8004bd4 <HAL_RCC_ClockConfig+0x270>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4618      	mov	r0, r3
 8004bae:	f7fd ffd9 	bl	8002b64 <HAL_InitTick>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	73fb      	strb	r3, [r7, #15]

  return status;
 8004bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3718      	adds	r7, #24
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	40022000 	.word	0x40022000
 8004bc4:	40021000 	.word	0x40021000
 8004bc8:	04c4b400 	.word	0x04c4b400
 8004bcc:	0800e0cc 	.word	0x0800e0cc
 8004bd0:	20000004 	.word	0x20000004
 8004bd4:	20000008 	.word	0x20000008

08004bd8 <HAL_RCC_GetSysClockFreq>:
=======
 8003c14:	f000 f826 	bl	8003c64 <HAL_RCC_GetSysClockFreq>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	4b0d      	ldr	r3, [pc, #52]	; (8003c50 <HAL_RCC_ClockConfig+0x260>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	091b      	lsrs	r3, r3, #4
 8003c20:	f003 030f 	and.w	r3, r3, #15
 8003c24:	490c      	ldr	r1, [pc, #48]	; (8003c58 <HAL_RCC_ClockConfig+0x268>)
 8003c26:	5ccb      	ldrb	r3, [r1, r3]
 8003c28:	f003 031f 	and.w	r3, r3, #31
 8003c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c30:	4a0a      	ldr	r2, [pc, #40]	; (8003c5c <HAL_RCC_ClockConfig+0x26c>)
 8003c32:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003c34:	4b0a      	ldr	r3, [pc, #40]	; (8003c60 <HAL_RCC_ClockConfig+0x270>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7fd fff1 	bl	8001c20 <HAL_InitTick>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	73fb      	strb	r3, [r7, #15]

  return status;
 8003c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3718      	adds	r7, #24
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	40022000 	.word	0x40022000
 8003c50:	40021000 	.word	0x40021000
 8003c54:	04c4b400 	.word	0x04c4b400
 8003c58:	0800d02c 	.word	0x0800d02c
 8003c5c:	20000004 	.word	0x20000004
 8003c60:	20000008 	.word	0x20000008

08003c64 <HAL_RCC_GetSysClockFreq>:
>>>>>>> ModeSelect_v2
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 8004bd8:	b480      	push	{r7}
 8004bda:	b089      	sub	sp, #36	; 0x24
 8004bdc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004bde:	2300      	movs	r3, #0
 8004be0:	61fb      	str	r3, [r7, #28]
 8004be2:	2300      	movs	r3, #0
 8004be4:	61bb      	str	r3, [r7, #24]
=======
 8003c64:	b480      	push	{r7}
 8003c66:	b089      	sub	sp, #36	; 0x24
 8003c68:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	61fb      	str	r3, [r7, #28]
 8003c6e:	2300      	movs	r3, #0
 8003c70:	61bb      	str	r3, [r7, #24]
>>>>>>> ModeSelect_v2
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< HEAD
 8004be6:	4b3e      	ldr	r3, [pc, #248]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f003 030c 	and.w	r3, r3, #12
 8004bee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004bf0:	4b3b      	ldr	r3, [pc, #236]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	f003 0303 	and.w	r3, r3, #3
 8004bf8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d005      	beq.n	8004c0c <HAL_RCC_GetSysClockFreq+0x34>
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	2b0c      	cmp	r3, #12
 8004c04:	d121      	bne.n	8004c4a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d11e      	bne.n	8004c4a <HAL_RCC_GetSysClockFreq+0x72>
=======
 8003c72:	4b3e      	ldr	r3, [pc, #248]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f003 030c 	and.w	r3, r3, #12
 8003c7a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c7c:	4b3b      	ldr	r3, [pc, #236]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	f003 0303 	and.w	r3, r3, #3
 8003c84:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d005      	beq.n	8003c98 <HAL_RCC_GetSysClockFreq+0x34>
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	2b0c      	cmp	r3, #12
 8003c90:	d121      	bne.n	8003cd6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d11e      	bne.n	8003cd6 <HAL_RCC_GetSysClockFreq+0x72>
>>>>>>> ModeSelect_v2
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
<<<<<<< HEAD
 8004c0c:	4b34      	ldr	r3, [pc, #208]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0308 	and.w	r3, r3, #8
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d107      	bne.n	8004c28 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004c18:	4b31      	ldr	r3, [pc, #196]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c1e:	0a1b      	lsrs	r3, r3, #8
 8004c20:	f003 030f 	and.w	r3, r3, #15
 8004c24:	61fb      	str	r3, [r7, #28]
 8004c26:	e005      	b.n	8004c34 <HAL_RCC_GetSysClockFreq+0x5c>
=======
 8003c98:	4b34      	ldr	r3, [pc, #208]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0308 	and.w	r3, r3, #8
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d107      	bne.n	8003cb4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003ca4:	4b31      	ldr	r3, [pc, #196]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8003ca6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003caa:	0a1b      	lsrs	r3, r3, #8
 8003cac:	f003 030f 	and.w	r3, r3, #15
 8003cb0:	61fb      	str	r3, [r7, #28]
 8003cb2:	e005      	b.n	8003cc0 <HAL_RCC_GetSysClockFreq+0x5c>
>>>>>>> ModeSelect_v2
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
<<<<<<< HEAD
 8004c28:	4b2d      	ldr	r3, [pc, #180]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	091b      	lsrs	r3, r3, #4
 8004c2e:	f003 030f 	and.w	r3, r3, #15
 8004c32:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004c34:	4a2b      	ldr	r2, [pc, #172]	; (8004ce4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c3c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d10d      	bne.n	8004c60 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c48:	e00a      	b.n	8004c60 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	2b04      	cmp	r3, #4
 8004c4e:	d102      	bne.n	8004c56 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004c50:	4b25      	ldr	r3, [pc, #148]	; (8004ce8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004c52:	61bb      	str	r3, [r7, #24]
 8004c54:	e004      	b.n	8004c60 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	2b08      	cmp	r3, #8
 8004c5a:	d101      	bne.n	8004c60 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004c5c:	4b23      	ldr	r3, [pc, #140]	; (8004cec <HAL_RCC_GetSysClockFreq+0x114>)
 8004c5e:	61bb      	str	r3, [r7, #24]
=======
 8003cb4:	4b2d      	ldr	r3, [pc, #180]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	091b      	lsrs	r3, r3, #4
 8003cba:	f003 030f 	and.w	r3, r3, #15
 8003cbe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003cc0:	4a2b      	ldr	r2, [pc, #172]	; (8003d70 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cc8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d10d      	bne.n	8003cec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003cd4:	e00a      	b.n	8003cec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	2b04      	cmp	r3, #4
 8003cda:	d102      	bne.n	8003ce2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003cdc:	4b25      	ldr	r3, [pc, #148]	; (8003d74 <HAL_RCC_GetSysClockFreq+0x110>)
 8003cde:	61bb      	str	r3, [r7, #24]
 8003ce0:	e004      	b.n	8003cec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	2b08      	cmp	r3, #8
 8003ce6:	d101      	bne.n	8003cec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ce8:	4b23      	ldr	r3, [pc, #140]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x114>)
 8003cea:	61bb      	str	r3, [r7, #24]
>>>>>>> ModeSelect_v2
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
<<<<<<< HEAD
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	2b0c      	cmp	r3, #12
 8004c64:	d134      	bne.n	8004cd0 <HAL_RCC_GetSysClockFreq+0xf8>
=======
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	2b0c      	cmp	r3, #12
 8003cf0:	d134      	bne.n	8003d5c <HAL_RCC_GetSysClockFreq+0xf8>
>>>>>>> ModeSelect_v2
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
<<<<<<< HEAD
 8004c66:	4b1e      	ldr	r3, [pc, #120]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	f003 0303 	and.w	r3, r3, #3
 8004c6e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d003      	beq.n	8004c7e <HAL_RCC_GetSysClockFreq+0xa6>
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	2b03      	cmp	r3, #3
 8004c7a:	d003      	beq.n	8004c84 <HAL_RCC_GetSysClockFreq+0xac>
 8004c7c:	e005      	b.n	8004c8a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004c7e:	4b1a      	ldr	r3, [pc, #104]	; (8004ce8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004c80:	617b      	str	r3, [r7, #20]
      break;
 8004c82:	e005      	b.n	8004c90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004c84:	4b19      	ldr	r3, [pc, #100]	; (8004cec <HAL_RCC_GetSysClockFreq+0x114>)
 8004c86:	617b      	str	r3, [r7, #20]
      break;
 8004c88:	e002      	b.n	8004c90 <HAL_RCC_GetSysClockFreq+0xb8>
=======
 8003cf2:	4b1e      	ldr	r3, [pc, #120]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	f003 0303 	and.w	r3, r3, #3
 8003cfa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d003      	beq.n	8003d0a <HAL_RCC_GetSysClockFreq+0xa6>
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	2b03      	cmp	r3, #3
 8003d06:	d003      	beq.n	8003d10 <HAL_RCC_GetSysClockFreq+0xac>
 8003d08:	e005      	b.n	8003d16 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003d0a:	4b1a      	ldr	r3, [pc, #104]	; (8003d74 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d0c:	617b      	str	r3, [r7, #20]
      break;
 8003d0e:	e005      	b.n	8003d1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003d10:	4b19      	ldr	r3, [pc, #100]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d12:	617b      	str	r3, [r7, #20]
      break;
 8003d14:	e002      	b.n	8003d1c <HAL_RCC_GetSysClockFreq+0xb8>
>>>>>>> ModeSelect_v2

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
<<<<<<< HEAD
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	617b      	str	r3, [r7, #20]
      break;
 8004c8e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c90:	4b13      	ldr	r3, [pc, #76]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	091b      	lsrs	r3, r3, #4
 8004c96:	f003 030f 	and.w	r3, r3, #15
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004c9e:	4b10      	ldr	r3, [pc, #64]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	0a1b      	lsrs	r3, r3, #8
 8004ca4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ca8:	697a      	ldr	r2, [r7, #20]
 8004caa:	fb03 f202 	mul.w	r2, r3, r2
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004cb6:	4b0a      	ldr	r3, [pc, #40]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	0e5b      	lsrs	r3, r3, #25
 8004cbc:	f003 0303 	and.w	r3, r3, #3
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	005b      	lsls	r3, r3, #1
 8004cc4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004cc6:	697a      	ldr	r2, [r7, #20]
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004cd0:	69bb      	ldr	r3, [r7, #24]
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3724      	adds	r7, #36	; 0x24
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	40021000 	.word	0x40021000
 8004ce4:	0800e0e4 	.word	0x0800e0e4
 8004ce8:	00f42400 	.word	0x00f42400
 8004cec:	007a1200 	.word	0x007a1200

08004cf0 <HAL_RCC_GetHCLKFreq>:
=======
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	617b      	str	r3, [r7, #20]
      break;
 8003d1a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d1c:	4b13      	ldr	r3, [pc, #76]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	091b      	lsrs	r3, r3, #4
 8003d22:	f003 030f 	and.w	r3, r3, #15
 8003d26:	3301      	adds	r3, #1
 8003d28:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d2a:	4b10      	ldr	r3, [pc, #64]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	0a1b      	lsrs	r3, r3, #8
 8003d30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	fb03 f202 	mul.w	r2, r3, r2
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d40:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d42:	4b0a      	ldr	r3, [pc, #40]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	0e5b      	lsrs	r3, r3, #25
 8003d48:	f003 0303 	and.w	r3, r3, #3
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	005b      	lsls	r3, r3, #1
 8003d50:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d5a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003d5c:	69bb      	ldr	r3, [r7, #24]
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3724      	adds	r7, #36	; 0x24
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	0800d044 	.word	0x0800d044
 8003d74:	00f42400 	.word	0x00f42400
 8003d78:	007a1200 	.word	0x007a1200

08003d7c <HAL_RCC_GetHCLKFreq>:
>>>>>>> ModeSelect_v2
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< HEAD
 8004cf0:	b480      	push	{r7}
 8004cf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cf4:	4b03      	ldr	r3, [pc, #12]	; (8004d04 <HAL_RCC_GetHCLKFreq+0x14>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	20000004 	.word	0x20000004

08004d08 <HAL_RCC_GetPCLK1Freq>:
=======
 8003d7c:	b480      	push	{r7}
 8003d7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d80:	4b03      	ldr	r3, [pc, #12]	; (8003d90 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d82:	681b      	ldr	r3, [r3, #0]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	20000004 	.word	0x20000004

08003d94 <HAL_RCC_GetPCLK1Freq>:
>>>>>>> ModeSelect_v2
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< HEAD
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004d0c:	f7ff fff0 	bl	8004cf0 <HAL_RCC_GetHCLKFreq>
 8004d10:	4602      	mov	r2, r0
 8004d12:	4b06      	ldr	r3, [pc, #24]	; (8004d2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	0a1b      	lsrs	r3, r3, #8
 8004d18:	f003 0307 	and.w	r3, r3, #7
 8004d1c:	4904      	ldr	r1, [pc, #16]	; (8004d30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d1e:	5ccb      	ldrb	r3, [r1, r3]
 8004d20:	f003 031f 	and.w	r3, r3, #31
 8004d24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	40021000 	.word	0x40021000
 8004d30:	0800e0dc 	.word	0x0800e0dc

08004d34 <HAL_RCC_GetPCLK2Freq>:
=======
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003d98:	f7ff fff0 	bl	8003d7c <HAL_RCC_GetHCLKFreq>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	4b06      	ldr	r3, [pc, #24]	; (8003db8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	0a1b      	lsrs	r3, r3, #8
 8003da4:	f003 0307 	and.w	r3, r3, #7
 8003da8:	4904      	ldr	r1, [pc, #16]	; (8003dbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003daa:	5ccb      	ldrb	r3, [r1, r3]
 8003dac:	f003 031f 	and.w	r3, r3, #31
 8003db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	40021000 	.word	0x40021000
 8003dbc:	0800d03c 	.word	0x0800d03c

08003dc0 <HAL_RCC_GetPCLK2Freq>:
>>>>>>> ModeSelect_v2
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< HEAD
 8004d34:	b580      	push	{r7, lr}
 8004d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004d38:	f7ff ffda 	bl	8004cf0 <HAL_RCC_GetHCLKFreq>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	4b06      	ldr	r3, [pc, #24]	; (8004d58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	0adb      	lsrs	r3, r3, #11
 8004d44:	f003 0307 	and.w	r3, r3, #7
 8004d48:	4904      	ldr	r1, [pc, #16]	; (8004d5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d4a:	5ccb      	ldrb	r3, [r1, r3]
 8004d4c:	f003 031f 	and.w	r3, r3, #31
 8004d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	40021000 	.word	0x40021000
 8004d5c:	0800e0dc 	.word	0x0800e0dc

08004d60 <RCC_SetFlashLatencyFromMSIRange>:
=======
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003dc4:	f7ff ffda 	bl	8003d7c <HAL_RCC_GetHCLKFreq>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	4b06      	ldr	r3, [pc, #24]	; (8003de4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	0adb      	lsrs	r3, r3, #11
 8003dd0:	f003 0307 	and.w	r3, r3, #7
 8003dd4:	4904      	ldr	r1, [pc, #16]	; (8003de8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003dd6:	5ccb      	ldrb	r3, [r1, r3]
 8003dd8:	f003 031f 	and.w	r3, r3, #31
 8003ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	40021000 	.word	0x40021000
 8003de8:	0800d03c 	.word	0x0800d03c

08003dec <RCC_SetFlashLatencyFromMSIRange>:
>>>>>>> ModeSelect_v2
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
<<<<<<< HEAD
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b086      	sub	sp, #24
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004d68:	2300      	movs	r3, #0
 8004d6a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004d6c:	4b27      	ldr	r3, [pc, #156]	; (8004e0c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d003      	beq.n	8004d80 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004d78:	f7ff f8a4 	bl	8003ec4 <HAL_PWREx_GetVoltageRange>
 8004d7c:	6178      	str	r0, [r7, #20]
 8004d7e:	e014      	b.n	8004daa <RCC_SetFlashLatencyFromMSIRange+0x4a>
=======
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b086      	sub	sp, #24
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003df4:	2300      	movs	r3, #0
 8003df6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003df8:	4b27      	ldr	r3, [pc, #156]	; (8003e98 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d003      	beq.n	8003e0c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003e04:	f7ff f8a4 	bl	8002f50 <HAL_PWREx_GetVoltageRange>
 8003e08:	6178      	str	r0, [r7, #20]
 8003e0a:	e014      	b.n	8003e36 <RCC_SetFlashLatencyFromMSIRange+0x4a>
>>>>>>> ModeSelect_v2
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< HEAD
 8004d80:	4b22      	ldr	r3, [pc, #136]	; (8004e0c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d84:	4a21      	ldr	r2, [pc, #132]	; (8004e0c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004d86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d8a:	6593      	str	r3, [r2, #88]	; 0x58
 8004d8c:	4b1f      	ldr	r3, [pc, #124]	; (8004e0c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d94:	60fb      	str	r3, [r7, #12]
 8004d96:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004d98:	f7ff f894 	bl	8003ec4 <HAL_PWREx_GetVoltageRange>
 8004d9c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004d9e:	4b1b      	ldr	r3, [pc, #108]	; (8004e0c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004da2:	4a1a      	ldr	r2, [pc, #104]	; (8004e0c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004da4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004da8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004db0:	d10b      	bne.n	8004dca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2b80      	cmp	r3, #128	; 0x80
 8004db6:	d913      	bls.n	8004de0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2ba0      	cmp	r3, #160	; 0xa0
 8004dbc:	d902      	bls.n	8004dc4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004dbe:	2302      	movs	r3, #2
 8004dc0:	613b      	str	r3, [r7, #16]
 8004dc2:	e00d      	b.n	8004de0 <RCC_SetFlashLatencyFromMSIRange+0x80>
=======
 8003e0c:	4b22      	ldr	r3, [pc, #136]	; (8003e98 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e10:	4a21      	ldr	r2, [pc, #132]	; (8003e98 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003e12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e16:	6593      	str	r3, [r2, #88]	; 0x58
 8003e18:	4b1f      	ldr	r3, [pc, #124]	; (8003e98 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e20:	60fb      	str	r3, [r7, #12]
 8003e22:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003e24:	f7ff f894 	bl	8002f50 <HAL_PWREx_GetVoltageRange>
 8003e28:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e2a:	4b1b      	ldr	r3, [pc, #108]	; (8003e98 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e2e:	4a1a      	ldr	r2, [pc, #104]	; (8003e98 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003e30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e34:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e3c:	d10b      	bne.n	8003e56 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2b80      	cmp	r3, #128	; 0x80
 8003e42:	d913      	bls.n	8003e6c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2ba0      	cmp	r3, #160	; 0xa0
 8003e48:	d902      	bls.n	8003e50 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	613b      	str	r3, [r7, #16]
 8003e4e:	e00d      	b.n	8003e6c <RCC_SetFlashLatencyFromMSIRange+0x80>
>>>>>>> ModeSelect_v2
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
<<<<<<< HEAD
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	613b      	str	r3, [r7, #16]
 8004dc8:	e00a      	b.n	8004de0 <RCC_SetFlashLatencyFromMSIRange+0x80>
=======
 8003e50:	2301      	movs	r3, #1
 8003e52:	613b      	str	r3, [r7, #16]
 8003e54:	e00a      	b.n	8003e6c <RCC_SetFlashLatencyFromMSIRange+0x80>
>>>>>>> ModeSelect_v2
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
<<<<<<< HEAD
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2b7f      	cmp	r3, #127	; 0x7f
 8004dce:	d902      	bls.n	8004dd6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	613b      	str	r3, [r7, #16]
 8004dd4:	e004      	b.n	8004de0 <RCC_SetFlashLatencyFromMSIRange+0x80>
=======
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2b7f      	cmp	r3, #127	; 0x7f
 8003e5a:	d902      	bls.n	8003e62 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	613b      	str	r3, [r7, #16]
 8003e60:	e004      	b.n	8003e6c <RCC_SetFlashLatencyFromMSIRange+0x80>
>>>>>>> ModeSelect_v2
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
<<<<<<< HEAD
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2b70      	cmp	r3, #112	; 0x70
 8004dda:	d101      	bne.n	8004de0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ddc:	2301      	movs	r3, #1
 8004dde:	613b      	str	r3, [r7, #16]
=======
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2b70      	cmp	r3, #112	; 0x70
 8003e66:	d101      	bne.n	8003e6c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e68:	2301      	movs	r3, #1
 8003e6a:	613b      	str	r3, [r7, #16]
>>>>>>> ModeSelect_v2
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
<<<<<<< HEAD
 8004de0:	4b0b      	ldr	r3, [pc, #44]	; (8004e10 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f023 020f 	bic.w	r2, r3, #15
 8004de8:	4909      	ldr	r1, [pc, #36]	; (8004e10 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	600b      	str	r3, [r1, #0]
=======
 8003e6c:	4b0b      	ldr	r3, [pc, #44]	; (8003e9c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f023 020f 	bic.w	r2, r3, #15
 8003e74:	4909      	ldr	r1, [pc, #36]	; (8003e9c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	600b      	str	r3, [r1, #0]
>>>>>>> ModeSelect_v2

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
<<<<<<< HEAD
 8004df0:	4b07      	ldr	r3, [pc, #28]	; (8004e10 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 030f 	and.w	r3, r3, #15
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d001      	beq.n	8004e02 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e000      	b.n	8004e04 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3718      	adds	r7, #24
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	40021000 	.word	0x40021000
 8004e10:	40022000 	.word	0x40022000

08004e14 <RCC_GetSysClockFreqFromPLLSource>:
=======
 8003e7c:	4b07      	ldr	r3, [pc, #28]	; (8003e9c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 030f 	and.w	r3, r3, #15
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d001      	beq.n	8003e8e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e000      	b.n	8003e90 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3718      	adds	r7, #24
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	40021000 	.word	0x40021000
 8003e9c:	40022000 	.word	0x40022000

08003ea0 <RCC_GetSysClockFreqFromPLLSource>:
>>>>>>> ModeSelect_v2
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
<<<<<<< HEAD
 8004e14:	b480      	push	{r7}
 8004e16:	b087      	sub	sp, #28
 8004e18:	af00      	add	r7, sp, #0
=======
 8003ea0:	b480      	push	{r7}
 8003ea2:	b087      	sub	sp, #28
 8003ea4:	af00      	add	r7, sp, #0
>>>>>>> ModeSelect_v2
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
<<<<<<< HEAD
 8004e1a:	4b2d      	ldr	r3, [pc, #180]	; (8004ed0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	f003 0303 	and.w	r3, r3, #3
 8004e22:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2b03      	cmp	r3, #3
 8004e28:	d00b      	beq.n	8004e42 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2b03      	cmp	r3, #3
 8004e2e:	d825      	bhi.n	8004e7c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d008      	beq.n	8004e48 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d11f      	bne.n	8004e7c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004e3c:	4b25      	ldr	r3, [pc, #148]	; (8004ed4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004e3e:	613b      	str	r3, [r7, #16]
    break;
 8004e40:	e01f      	b.n	8004e82 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004e42:	4b25      	ldr	r3, [pc, #148]	; (8004ed8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004e44:	613b      	str	r3, [r7, #16]
    break;
 8004e46:	e01c      	b.n	8004e82 <RCC_GetSysClockFreqFromPLLSource+0x6e>
=======
 8003ea6:	4b2d      	ldr	r3, [pc, #180]	; (8003f5c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	f003 0303 	and.w	r3, r3, #3
 8003eae:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2b03      	cmp	r3, #3
 8003eb4:	d00b      	beq.n	8003ece <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2b03      	cmp	r3, #3
 8003eba:	d825      	bhi.n	8003f08 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d008      	beq.n	8003ed4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d11f      	bne.n	8003f08 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003ec8:	4b25      	ldr	r3, [pc, #148]	; (8003f60 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003eca:	613b      	str	r3, [r7, #16]
    break;
 8003ecc:	e01f      	b.n	8003f0e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003ece:	4b25      	ldr	r3, [pc, #148]	; (8003f64 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003ed0:	613b      	str	r3, [r7, #16]
    break;
 8003ed2:	e01c      	b.n	8003f0e <RCC_GetSysClockFreqFromPLLSource+0x6e>
>>>>>>> ModeSelect_v2

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
<<<<<<< HEAD
 8004e48:	4b21      	ldr	r3, [pc, #132]	; (8004ed0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0308 	and.w	r3, r3, #8
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d107      	bne.n	8004e64 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004e54:	4b1e      	ldr	r3, [pc, #120]	; (8004ed0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004e56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e5a:	0a1b      	lsrs	r3, r3, #8
 8004e5c:	f003 030f 	and.w	r3, r3, #15
 8004e60:	617b      	str	r3, [r7, #20]
 8004e62:	e005      	b.n	8004e70 <RCC_GetSysClockFreqFromPLLSource+0x5c>
=======
 8003ed4:	4b21      	ldr	r3, [pc, #132]	; (8003f5c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0308 	and.w	r3, r3, #8
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d107      	bne.n	8003ef0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003ee0:	4b1e      	ldr	r3, [pc, #120]	; (8003f5c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ee6:	0a1b      	lsrs	r3, r3, #8
 8003ee8:	f003 030f 	and.w	r3, r3, #15
 8003eec:	617b      	str	r3, [r7, #20]
 8003eee:	e005      	b.n	8003efc <RCC_GetSysClockFreqFromPLLSource+0x5c>
>>>>>>> ModeSelect_v2
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
<<<<<<< HEAD
 8004e64:	4b1a      	ldr	r3, [pc, #104]	; (8004ed0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	091b      	lsrs	r3, r3, #4
 8004e6a:	f003 030f 	and.w	r3, r3, #15
 8004e6e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004e70:	4a1a      	ldr	r2, [pc, #104]	; (8004edc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e78:	613b      	str	r3, [r7, #16]
    break;
 8004e7a:	e002      	b.n	8004e82 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	613b      	str	r3, [r7, #16]
    break;
 8004e80:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e82:	4b13      	ldr	r3, [pc, #76]	; (8004ed0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	091b      	lsrs	r3, r3, #4
 8004e88:	f003 030f 	and.w	r3, r3, #15
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e90:	4b0f      	ldr	r3, [pc, #60]	; (8004ed0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	0a1b      	lsrs	r3, r3, #8
 8004e96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e9a:	693a      	ldr	r2, [r7, #16]
 8004e9c:	fb03 f202 	mul.w	r2, r3, r2
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ea8:	4b09      	ldr	r3, [pc, #36]	; (8004ed0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	0e5b      	lsrs	r3, r3, #25
 8004eae:	f003 0303 	and.w	r3, r3, #3
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	005b      	lsls	r3, r3, #1
 8004eb6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004eb8:	693a      	ldr	r2, [r7, #16]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ec0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004ec2:	683b      	ldr	r3, [r7, #0]
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	371c      	adds	r7, #28
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr
 8004ed0:	40021000 	.word	0x40021000
 8004ed4:	00f42400 	.word	0x00f42400
 8004ed8:	007a1200 	.word	0x007a1200
 8004edc:	0800e0e4 	.word	0x0800e0e4

08004ee0 <HAL_RCCEx_PeriphCLKConfig>:
=======
 8003ef0:	4b1a      	ldr	r3, [pc, #104]	; (8003f5c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	091b      	lsrs	r3, r3, #4
 8003ef6:	f003 030f 	and.w	r3, r3, #15
 8003efa:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003efc:	4a1a      	ldr	r2, [pc, #104]	; (8003f68 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f04:	613b      	str	r3, [r7, #16]
    break;
 8003f06:	e002      	b.n	8003f0e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	613b      	str	r3, [r7, #16]
    break;
 8003f0c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f0e:	4b13      	ldr	r3, [pc, #76]	; (8003f5c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	091b      	lsrs	r3, r3, #4
 8003f14:	f003 030f 	and.w	r3, r3, #15
 8003f18:	3301      	adds	r3, #1
 8003f1a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f1c:	4b0f      	ldr	r3, [pc, #60]	; (8003f5c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	0a1b      	lsrs	r3, r3, #8
 8003f22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	fb03 f202 	mul.w	r2, r3, r2
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f32:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f34:	4b09      	ldr	r3, [pc, #36]	; (8003f5c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	0e5b      	lsrs	r3, r3, #25
 8003f3a:	f003 0303 	and.w	r3, r3, #3
 8003f3e:	3301      	adds	r3, #1
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f4c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003f4e:	683b      	ldr	r3, [r7, #0]
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	371c      	adds	r7, #28
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr
 8003f5c:	40021000 	.word	0x40021000
 8003f60:	00f42400 	.word	0x00f42400
 8003f64:	007a1200 	.word	0x007a1200
 8003f68:	0800d044 	.word	0x0800d044

08003f6c <HAL_RCCEx_PeriphCLKConfig>:
>>>>>>> ModeSelect_v2
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
<<<<<<< HEAD
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b086      	sub	sp, #24
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ee8:	2300      	movs	r3, #0
 8004eea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004eec:	2300      	movs	r3, #0
 8004eee:	74bb      	strb	r3, [r7, #18]
=======
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f74:	2300      	movs	r3, #0
 8003f76:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f78:	2300      	movs	r3, #0
 8003f7a:	74bb      	strb	r3, [r7, #18]
>>>>>>> ModeSelect_v2
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
<<<<<<< HEAD
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d040      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x9e>
=======
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d040      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x9e>
>>>>>>> ModeSelect_v2
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
<<<<<<< HEAD
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f00:	2b80      	cmp	r3, #128	; 0x80
 8004f02:	d02a      	beq.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004f04:	2b80      	cmp	r3, #128	; 0x80
 8004f06:	d825      	bhi.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004f08:	2b60      	cmp	r3, #96	; 0x60
 8004f0a:	d026      	beq.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004f0c:	2b60      	cmp	r3, #96	; 0x60
 8004f0e:	d821      	bhi.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004f10:	2b40      	cmp	r3, #64	; 0x40
 8004f12:	d006      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004f14:	2b40      	cmp	r3, #64	; 0x40
 8004f16:	d81d      	bhi.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d009      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004f1c:	2b20      	cmp	r3, #32
 8004f1e:	d010      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004f20:	e018      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x74>
=======
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f8c:	2b80      	cmp	r3, #128	; 0x80
 8003f8e:	d02a      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003f90:	2b80      	cmp	r3, #128	; 0x80
 8003f92:	d825      	bhi.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003f94:	2b60      	cmp	r3, #96	; 0x60
 8003f96:	d026      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003f98:	2b60      	cmp	r3, #96	; 0x60
 8003f9a:	d821      	bhi.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003f9c:	2b40      	cmp	r3, #64	; 0x40
 8003f9e:	d006      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003fa0:	2b40      	cmp	r3, #64	; 0x40
 8003fa2:	d81d      	bhi.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d009      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003fa8:	2b20      	cmp	r3, #32
 8003faa:	d010      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003fac:	e018      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x74>
>>>>>>> ModeSelect_v2
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
<<<<<<< HEAD
 8004f22:	4b89      	ldr	r3, [pc, #548]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	4a88      	ldr	r2, [pc, #544]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f2c:	60d3      	str	r3, [r2, #12]
=======
 8003fae:	4b89      	ldr	r3, [pc, #548]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	4a88      	ldr	r2, [pc, #544]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fb8:	60d3      	str	r3, [r2, #12]
>>>>>>> ModeSelect_v2
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
<<<<<<< HEAD
 8004f2e:	e015      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x7c>
=======
 8003fba:	e015      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
>>>>>>> ModeSelect_v2

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
<<<<<<< HEAD
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	3304      	adds	r3, #4
 8004f34:	2100      	movs	r1, #0
 8004f36:	4618      	mov	r0, r3
 8004f38:	f000 fb3e 	bl	80055b8 <RCCEx_PLLSAI1_Config>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f40:	e00c      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x7c>
=======
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3304      	adds	r3, #4
 8003fc0:	2100      	movs	r1, #0
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f000 fb3e 	bl	8004644 <RCCEx_PLLSAI1_Config>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003fcc:	e00c      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
>>>>>>> ModeSelect_v2

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
<<<<<<< HEAD
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	3320      	adds	r3, #32
 8004f46:	2100      	movs	r1, #0
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f000 fc29 	bl	80057a0 <RCCEx_PLLSAI2_Config>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f52:	e003      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x7c>
=======
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	3320      	adds	r3, #32
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f000 fc29 	bl	800482c <RCCEx_PLLSAI2_Config>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003fde:	e003      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
>>>>>>> ModeSelect_v2
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
<<<<<<< HEAD
 8004f54:	2301      	movs	r3, #1
 8004f56:	74fb      	strb	r3, [r7, #19]
      break;
 8004f58:	e000      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004f5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f5c:	7cfb      	ldrb	r3, [r7, #19]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d10b      	bne.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f62:	4b79      	ldr	r3, [pc, #484]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f64:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f68:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f70:	4975      	ldr	r1, [pc, #468]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f72:	4313      	orrs	r3, r2
 8004f74:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004f78:	e001      	b.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x9e>
=======
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	74fb      	strb	r3, [r7, #19]
      break;
 8003fe4:	e000      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003fe6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fe8:	7cfb      	ldrb	r3, [r7, #19]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d10b      	bne.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fee:	4b79      	ldr	r3, [pc, #484]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ff0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ff4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ffc:	4975      	ldr	r1, [pc, #468]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004004:	e001      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x9e>
>>>>>>> ModeSelect_v2
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 8004f7a:	7cfb      	ldrb	r3, [r7, #19]
 8004f7c:	74bb      	strb	r3, [r7, #18]
=======
 8004006:	7cfb      	ldrb	r3, [r7, #19]
 8004008:	74bb      	strb	r3, [r7, #18]
>>>>>>> ModeSelect_v2
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
<<<<<<< HEAD
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d047      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x13a>
=======
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d047      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
>>>>>>> ModeSelect_v2
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
<<<<<<< HEAD
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f92:	d030      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004f94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f98:	d82a      	bhi.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004f9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f9e:	d02a      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004fa0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fa4:	d824      	bhi.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004fa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004faa:	d008      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004fac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fb0:	d81e      	bhi.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00a      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004fb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fba:	d010      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004fbc:	e018      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x110>
=======
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800401e:	d030      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004020:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004024:	d82a      	bhi.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004026:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800402a:	d02a      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800402c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004030:	d824      	bhi.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004032:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004036:	d008      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004038:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800403c:	d81e      	bhi.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x110>
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00a      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004042:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004046:	d010      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004048:	e018      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x110>
>>>>>>> ModeSelect_v2
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
<<<<<<< HEAD
 8004fbe:	4b62      	ldr	r3, [pc, #392]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	4a61      	ldr	r2, [pc, #388]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fc8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004fca:	e015      	b.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x118>
=======
 800404a:	4b62      	ldr	r3, [pc, #392]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	4a61      	ldr	r2, [pc, #388]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004054:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004056:	e015      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x118>
>>>>>>> ModeSelect_v2

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
<<<<<<< HEAD
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	3304      	adds	r3, #4
 8004fd0:	2100      	movs	r1, #0
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f000 faf0 	bl	80055b8 <RCCEx_PLLSAI1_Config>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004fdc:	e00c      	b.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x118>
=======
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	3304      	adds	r3, #4
 800405c:	2100      	movs	r1, #0
 800405e:	4618      	mov	r0, r3
 8004060:	f000 faf0 	bl	8004644 <RCCEx_PLLSAI1_Config>
 8004064:	4603      	mov	r3, r0
 8004066:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004068:	e00c      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x118>
>>>>>>> ModeSelect_v2

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
<<<<<<< HEAD
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	3320      	adds	r3, #32
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f000 fbdb 	bl	80057a0 <RCCEx_PLLSAI2_Config>
 8004fea:	4603      	mov	r3, r0
 8004fec:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004fee:	e003      	b.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x118>
=======
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	3320      	adds	r3, #32
 800406e:	2100      	movs	r1, #0
 8004070:	4618      	mov	r0, r3
 8004072:	f000 fbdb 	bl	800482c <RCCEx_PLLSAI2_Config>
 8004076:	4603      	mov	r3, r0
 8004078:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800407a:	e003      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x118>
>>>>>>> ModeSelect_v2
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
<<<<<<< HEAD
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	74fb      	strb	r3, [r7, #19]
      break;
 8004ff4:	e000      	b.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004ff6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ff8:	7cfb      	ldrb	r3, [r7, #19]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d10b      	bne.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ffe:	4b52      	ldr	r3, [pc, #328]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005000:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005004:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800500c:	494e      	ldr	r1, [pc, #312]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800500e:	4313      	orrs	r3, r2
 8005010:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005014:	e001      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x13a>
=======
 800407c:	2301      	movs	r3, #1
 800407e:	74fb      	strb	r3, [r7, #19]
      break;
 8004080:	e000      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004082:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004084:	7cfb      	ldrb	r3, [r7, #19]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10b      	bne.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800408a:	4b52      	ldr	r3, [pc, #328]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800408c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004090:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004098:	494e      	ldr	r1, [pc, #312]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800409a:	4313      	orrs	r3, r2
 800409c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80040a0:	e001      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
>>>>>>> ModeSelect_v2
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 8005016:	7cfb      	ldrb	r3, [r7, #19]
 8005018:	74bb      	strb	r3, [r7, #18]
=======
 80040a2:	7cfb      	ldrb	r3, [r7, #19]
 80040a4:	74bb      	strb	r3, [r7, #18]
>>>>>>> ModeSelect_v2
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
<<<<<<< HEAD
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005022:	2b00      	cmp	r3, #0
 8005024:	f000 809f 	beq.w	8005166 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005028:	2300      	movs	r3, #0
 800502a:	747b      	strb	r3, [r7, #17]
=======
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f000 809f 	beq.w	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040b4:	2300      	movs	r3, #0
 80040b6:	747b      	strb	r3, [r7, #17]
>>>>>>> ModeSelect_v2

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
<<<<<<< HEAD
 800502c:	4b46      	ldr	r3, [pc, #280]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800502e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d101      	bne.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005038:	2301      	movs	r3, #1
 800503a:	e000      	b.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800503c:	2300      	movs	r3, #0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00d      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005042:	4b41      	ldr	r3, [pc, #260]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005046:	4a40      	ldr	r2, [pc, #256]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800504c:	6593      	str	r3, [r2, #88]	; 0x58
 800504e:	4b3e      	ldr	r3, [pc, #248]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005056:	60bb      	str	r3, [r7, #8]
 8005058:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800505a:	2301      	movs	r3, #1
 800505c:	747b      	strb	r3, [r7, #17]
=======
 80040b8:	4b46      	ldr	r3, [pc, #280]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80040c4:	2301      	movs	r3, #1
 80040c6:	e000      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80040c8:	2300      	movs	r3, #0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00d      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040ce:	4b41      	ldr	r3, [pc, #260]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d2:	4a40      	ldr	r2, [pc, #256]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040d8:	6593      	str	r3, [r2, #88]	; 0x58
 80040da:	4b3e      	ldr	r3, [pc, #248]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040e2:	60bb      	str	r3, [r7, #8]
 80040e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040e6:	2301      	movs	r3, #1
 80040e8:	747b      	strb	r3, [r7, #17]
>>>>>>> ModeSelect_v2
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
<<<<<<< HEAD
 800505e:	4b3b      	ldr	r3, [pc, #236]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a3a      	ldr	r2, [pc, #232]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005068:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800506a:	f7fd fdcb 	bl	8002c04 <HAL_GetTick>
 800506e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005070:	e009      	b.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005072:	f7fd fdc7 	bl	8002c04 <HAL_GetTick>
 8005076:	4602      	mov	r2, r0
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	2b02      	cmp	r3, #2
 800507e:	d902      	bls.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	74fb      	strb	r3, [r7, #19]
        break;
 8005084:	e005      	b.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005086:	4b31      	ldr	r3, [pc, #196]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800508e:	2b00      	cmp	r3, #0
 8005090:	d0ef      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x192>
=======
 80040ea:	4b3b      	ldr	r3, [pc, #236]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a3a      	ldr	r2, [pc, #232]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80040f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80040f6:	f7fd fde3 	bl	8001cc0 <HAL_GetTick>
 80040fa:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80040fc:	e009      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040fe:	f7fd fddf 	bl	8001cc0 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	2b02      	cmp	r3, #2
 800410a:	d902      	bls.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	74fb      	strb	r3, [r7, #19]
        break;
 8004110:	e005      	b.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004112:	4b31      	ldr	r3, [pc, #196]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800411a:	2b00      	cmp	r3, #0
 800411c:	d0ef      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x192>
>>>>>>> ModeSelect_v2
      }
    }

    if(ret == HAL_OK)
<<<<<<< HEAD
 8005092:	7cfb      	ldrb	r3, [r7, #19]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d15b      	bne.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005098:	4b2b      	ldr	r3, [pc, #172]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800509a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800509e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050a2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d01f      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050b0:	697a      	ldr	r2, [r7, #20]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d019      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80050b6:	4b24      	ldr	r3, [pc, #144]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050c0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80050c2:	4b21      	ldr	r3, [pc, #132]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c8:	4a1f      	ldr	r2, [pc, #124]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050d2:	4b1d      	ldr	r3, [pc, #116]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d8:	4a1b      	ldr	r2, [pc, #108]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80050e2:	4a19      	ldr	r2, [pc, #100]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
=======
 800411e:	7cfb      	ldrb	r3, [r7, #19]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d15b      	bne.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004124:	4b2b      	ldr	r3, [pc, #172]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800412a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800412e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d01f      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	429a      	cmp	r2, r3
 8004140:	d019      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004142:	4b24      	ldr	r3, [pc, #144]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004148:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800414c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800414e:	4b21      	ldr	r3, [pc, #132]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004154:	4a1f      	ldr	r2, [pc, #124]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004156:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800415a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800415e:	4b1d      	ldr	r3, [pc, #116]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004164:	4a1b      	ldr	r2, [pc, #108]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004166:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800416a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800416e:	4a19      	ldr	r2, [pc, #100]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
>>>>>>> ModeSelect_v2
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
<<<<<<< HEAD
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	f003 0301 	and.w	r3, r3, #1
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d016      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f4:	f7fd fd86 	bl	8002c04 <HAL_GetTick>
 80050f8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050fa:	e00b      	b.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050fc:	f7fd fd82 	bl	8002c04 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	f241 3288 	movw	r2, #5000	; 0x1388
 800510a:	4293      	cmp	r3, r2
 800510c:	d902      	bls.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	74fb      	strb	r3, [r7, #19]
            break;
 8005112:	e006      	b.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005114:	4b0c      	ldr	r3, [pc, #48]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800511a:	f003 0302 	and.w	r3, r3, #2
 800511e:	2b00      	cmp	r3, #0
 8005120:	d0ec      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x21c>
=======
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	f003 0301 	and.w	r3, r3, #1
 800417c:	2b00      	cmp	r3, #0
 800417e:	d016      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004180:	f7fd fd9e 	bl	8001cc0 <HAL_GetTick>
 8004184:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004186:	e00b      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004188:	f7fd fd9a 	bl	8001cc0 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	f241 3288 	movw	r2, #5000	; 0x1388
 8004196:	4293      	cmp	r3, r2
 8004198:	d902      	bls.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	74fb      	strb	r3, [r7, #19]
            break;
 800419e:	e006      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041a0:	4b0c      	ldr	r3, [pc, #48]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d0ec      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x21c>
>>>>>>> ModeSelect_v2
          }
        }
      }

      if(ret == HAL_OK)
<<<<<<< HEAD
 8005122:	7cfb      	ldrb	r3, [r7, #19]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d10c      	bne.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005128:	4b07      	ldr	r3, [pc, #28]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800512a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800512e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005138:	4903      	ldr	r1, [pc, #12]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800513a:	4313      	orrs	r3, r2
 800513c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005140:	e008      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x274>
=======
 80041ae:	7cfb      	ldrb	r3, [r7, #19]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d10c      	bne.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041b4:	4b07      	ldr	r3, [pc, #28]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041c4:	4903      	ldr	r1, [pc, #12]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80041cc:	e008      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x274>
>>>>>>> ModeSelect_v2
      }
      else
      {
        /* set overall return value */
        status = ret;
<<<<<<< HEAD
 8005142:	7cfb      	ldrb	r3, [r7, #19]
 8005144:	74bb      	strb	r3, [r7, #18]
 8005146:	e005      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005148:	40021000 	.word	0x40021000
 800514c:	40007000 	.word	0x40007000
=======
 80041ce:	7cfb      	ldrb	r3, [r7, #19]
 80041d0:	74bb      	strb	r3, [r7, #18]
 80041d2:	e005      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80041d4:	40021000 	.word	0x40021000
 80041d8:	40007000 	.word	0x40007000
>>>>>>> ModeSelect_v2
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 8005150:	7cfb      	ldrb	r3, [r7, #19]
 8005152:	74bb      	strb	r3, [r7, #18]
=======
 80041dc:	7cfb      	ldrb	r3, [r7, #19]
 80041de:	74bb      	strb	r3, [r7, #18]
>>>>>>> ModeSelect_v2
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
<<<<<<< HEAD
 8005154:	7c7b      	ldrb	r3, [r7, #17]
 8005156:	2b01      	cmp	r3, #1
 8005158:	d105      	bne.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800515a:	4ba0      	ldr	r3, [pc, #640]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800515c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800515e:	4a9f      	ldr	r2, [pc, #636]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005160:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005164:	6593      	str	r3, [r2, #88]	; 0x58
=======
 80041e0:	7c7b      	ldrb	r3, [r7, #17]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d105      	bne.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041e6:	4ba0      	ldr	r3, [pc, #640]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ea:	4a9f      	ldr	r2, [pc, #636]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041f0:	6593      	str	r3, [r2, #88]	; 0x58
>>>>>>> ModeSelect_v2
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
<<<<<<< HEAD
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0301 	and.w	r3, r3, #1
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00a      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
=======
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00a      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
>>>>>>> ModeSelect_v2
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
<<<<<<< HEAD
 8005172:	4b9a      	ldr	r3, [pc, #616]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005178:	f023 0203 	bic.w	r2, r3, #3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005180:	4996      	ldr	r1, [pc, #600]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005182:	4313      	orrs	r3, r2
 8005184:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 80041fe:	4b9a      	ldr	r3, [pc, #616]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004204:	f023 0203 	bic.w	r2, r3, #3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800420c:	4996      	ldr	r1, [pc, #600]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800420e:	4313      	orrs	r3, r2
 8004210:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> ModeSelect_v2
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
<<<<<<< HEAD
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0302 	and.w	r3, r3, #2
 8005190:	2b00      	cmp	r3, #0
 8005192:	d00a      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
=======
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	2b00      	cmp	r3, #0
 800421e:	d00a      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
>>>>>>> ModeSelect_v2
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
<<<<<<< HEAD
 8005194:	4b91      	ldr	r3, [pc, #580]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800519a:	f023 020c 	bic.w	r2, r3, #12
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a2:	498e      	ldr	r1, [pc, #568]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 8004220:	4b91      	ldr	r3, [pc, #580]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004226:	f023 020c 	bic.w	r2, r3, #12
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422e:	498e      	ldr	r1, [pc, #568]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004230:	4313      	orrs	r3, r2
 8004232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> ModeSelect_v2
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
<<<<<<< HEAD
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0304 	and.w	r3, r3, #4
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00a      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x2ec>
=======
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0304 	and.w	r3, r3, #4
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00a      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
>>>>>>> ModeSelect_v2
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
<<<<<<< HEAD
 80051b6:	4b89      	ldr	r3, [pc, #548]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051c4:	4985      	ldr	r1, [pc, #532]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 8004242:	4b89      	ldr	r3, [pc, #548]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004248:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004250:	4985      	ldr	r1, [pc, #532]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004252:	4313      	orrs	r3, r2
 8004254:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> ModeSelect_v2
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
<<<<<<< HEAD
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0308 	and.w	r3, r3, #8
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d00a      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x30e>
=======
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0308 	and.w	r3, r3, #8
 8004260:	2b00      	cmp	r3, #0
 8004262:	d00a      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x30e>
>>>>>>> ModeSelect_v2
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
<<<<<<< HEAD
 80051d8:	4b80      	ldr	r3, [pc, #512]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051e6:	497d      	ldr	r1, [pc, #500]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051e8:	4313      	orrs	r3, r2
 80051ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 8004264:	4b80      	ldr	r3, [pc, #512]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800426a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004272:	497d      	ldr	r1, [pc, #500]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004274:	4313      	orrs	r3, r2
 8004276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> ModeSelect_v2
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
<<<<<<< HEAD
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0310 	and.w	r3, r3, #16
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00a      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x330>
=======
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0310 	and.w	r3, r3, #16
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00a      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x330>
>>>>>>> ModeSelect_v2
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
<<<<<<< HEAD
 80051fa:	4b78      	ldr	r3, [pc, #480]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005200:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005208:	4974      	ldr	r1, [pc, #464]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800520a:	4313      	orrs	r3, r2
 800520c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 8004286:	4b78      	ldr	r3, [pc, #480]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800428c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004294:	4974      	ldr	r1, [pc, #464]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004296:	4313      	orrs	r3, r2
 8004298:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> ModeSelect_v2
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
<<<<<<< HEAD
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0320 	and.w	r3, r3, #32
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00a      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x352>
=======
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0320 	and.w	r3, r3, #32
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d00a      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x352>
>>>>>>> ModeSelect_v2
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
<<<<<<< HEAD
 800521c:	4b6f      	ldr	r3, [pc, #444]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800521e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005222:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800522a:	496c      	ldr	r1, [pc, #432]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800522c:	4313      	orrs	r3, r2
 800522e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 80042a8:	4b6f      	ldr	r3, [pc, #444]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042b6:	496c      	ldr	r1, [pc, #432]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> ModeSelect_v2
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
<<<<<<< HEAD
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00a      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800523e:	4b67      	ldr	r3, [pc, #412]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005244:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800524c:	4963      	ldr	r1, [pc, #396]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800524e:	4313      	orrs	r3, r2
 8005250:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00a      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042ca:	4b67      	ldr	r3, [pc, #412]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042d8:	4963      	ldr	r1, [pc, #396]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> ModeSelect_v2
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
<<<<<<< HEAD
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00a      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005260:	4b5e      	ldr	r3, [pc, #376]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005266:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800526e:	495b      	ldr	r1, [pc, #364]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005270:	4313      	orrs	r3, r2
 8005272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00a      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042ec:	4b5e      	ldr	r3, [pc, #376]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042fa:	495b      	ldr	r1, [pc, #364]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042fc:	4313      	orrs	r3, r2
 80042fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> ModeSelect_v2
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
<<<<<<< HEAD
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00a      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
=======
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00a      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
>>>>>>> ModeSelect_v2
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
<<<<<<< HEAD
 8005282:	4b56      	ldr	r3, [pc, #344]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005288:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005290:	4952      	ldr	r1, [pc, #328]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005292:	4313      	orrs	r3, r2
 8005294:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 800430e:	4b56      	ldr	r3, [pc, #344]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004314:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800431c:	4952      	ldr	r1, [pc, #328]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800431e:	4313      	orrs	r3, r2
 8004320:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> ModeSelect_v2
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
<<<<<<< HEAD
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00a      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x3da>
=======
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800432c:	2b00      	cmp	r3, #0
 800432e:	d00a      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x3da>
>>>>>>> ModeSelect_v2
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
<<<<<<< HEAD
 80052a4:	4b4d      	ldr	r3, [pc, #308]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052aa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052b2:	494a      	ldr	r1, [pc, #296]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 8004330:	4b4d      	ldr	r3, [pc, #308]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004336:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800433e:	494a      	ldr	r1, [pc, #296]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004340:	4313      	orrs	r3, r2
 8004342:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> ModeSelect_v2
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
<<<<<<< HEAD
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00a      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
=======
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00a      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
>>>>>>> ModeSelect_v2
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
<<<<<<< HEAD
 80052c6:	4b45      	ldr	r3, [pc, #276]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052d4:	4941      	ldr	r1, [pc, #260]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052d6:	4313      	orrs	r3, r2
 80052d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 8004352:	4b45      	ldr	r3, [pc, #276]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004358:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004360:	4941      	ldr	r1, [pc, #260]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004362:	4313      	orrs	r3, r2
 8004364:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> ModeSelect_v2
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
<<<<<<< HEAD
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d00a      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x41e>
=======
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d00a      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x41e>
>>>>>>> ModeSelect_v2
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
<<<<<<< HEAD
 80052e8:	4b3c      	ldr	r3, [pc, #240]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052ee:	f023 0203 	bic.w	r2, r3, #3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052f6:	4939      	ldr	r1, [pc, #228]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052f8:	4313      	orrs	r3, r2
 80052fa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
=======
 8004374:	4b3c      	ldr	r3, [pc, #240]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004376:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800437a:	f023 0203 	bic.w	r2, r3, #3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004382:	4939      	ldr	r1, [pc, #228]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004384:	4313      	orrs	r3, r2
 8004386:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
>>>>>>> ModeSelect_v2
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
<<<<<<< HEAD
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d028      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800530a:	4b34      	ldr	r3, [pc, #208]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800530c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005310:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005318:	4930      	ldr	r1, [pc, #192]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800531a:	4313      	orrs	r3, r2
 800531c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005324:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005328:	d106      	bne.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800532a:	4b2c      	ldr	r3, [pc, #176]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	4a2b      	ldr	r2, [pc, #172]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005330:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005334:	60d3      	str	r3, [r2, #12]
 8005336:	e011      	b.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x47c>
=======
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d028      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004396:	4b34      	ldr	r3, [pc, #208]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800439c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043a4:	4930      	ldr	r1, [pc, #192]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043b4:	d106      	bne.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043b6:	4b2c      	ldr	r3, [pc, #176]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	4a2b      	ldr	r2, [pc, #172]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043c0:	60d3      	str	r3, [r2, #12]
 80043c2:	e011      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
>>>>>>> ModeSelect_v2
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
<<<<<<< HEAD
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800533c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005340:	d10c      	bne.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	3304      	adds	r3, #4
 8005346:	2101      	movs	r1, #1
 8005348:	4618      	mov	r0, r3
 800534a:	f000 f935 	bl	80055b8 <RCCEx_PLLSAI1_Config>
 800534e:	4603      	mov	r3, r0
 8005350:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005352:	7cfb      	ldrb	r3, [r7, #19]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d001      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005358:	7cfb      	ldrb	r3, [r7, #19]
 800535a:	74bb      	strb	r3, [r7, #18]
=======
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043cc:	d10c      	bne.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	3304      	adds	r3, #4
 80043d2:	2101      	movs	r1, #1
 80043d4:	4618      	mov	r0, r3
 80043d6:	f000 f935 	bl	8004644 <RCCEx_PLLSAI1_Config>
 80043da:	4603      	mov	r3, r0
 80043dc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80043de:	7cfb      	ldrb	r3, [r7, #19]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d001      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80043e4:	7cfb      	ldrb	r3, [r7, #19]
 80043e6:	74bb      	strb	r3, [r7, #18]
>>>>>>> ModeSelect_v2
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
<<<<<<< HEAD
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d04d      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800536c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005370:	d108      	bne.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005372:	4b1a      	ldr	r3, [pc, #104]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005374:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005378:	4a18      	ldr	r2, [pc, #96]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800537a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800537e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005382:	e012      	b.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005384:	4b15      	ldr	r3, [pc, #84]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005386:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800538a:	4a14      	ldr	r2, [pc, #80]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800538c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005390:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005394:	4b11      	ldr	r3, [pc, #68]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800539a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053a2:	490e      	ldr	r1, [pc, #56]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053a4:	4313      	orrs	r3, r2
 80053a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053b2:	d106      	bne.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053b4:	4b09      	ldr	r3, [pc, #36]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	4a08      	ldr	r2, [pc, #32]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053be:	60d3      	str	r3, [r2, #12]
 80053c0:	e020      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053ca:	d109      	bne.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80053cc:	4b03      	ldr	r3, [pc, #12]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	4a02      	ldr	r2, [pc, #8]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053d6:	60d3      	str	r3, [r2, #12]
 80053d8:	e014      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80053da:	bf00      	nop
 80053dc:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053e8:	d10c      	bne.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	3304      	adds	r3, #4
 80053ee:	2101      	movs	r1, #1
 80053f0:	4618      	mov	r0, r3
 80053f2:	f000 f8e1 	bl	80055b8 <RCCEx_PLLSAI1_Config>
 80053f6:	4603      	mov	r3, r0
 80053f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053fa:	7cfb      	ldrb	r3, [r7, #19]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d001      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005400:	7cfb      	ldrb	r3, [r7, #19]
 8005402:	74bb      	strb	r3, [r7, #18]
=======
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d04d      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043fc:	d108      	bne.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80043fe:	4b1a      	ldr	r3, [pc, #104]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004400:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004404:	4a18      	ldr	r2, [pc, #96]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004406:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800440a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800440e:	e012      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004410:	4b15      	ldr	r3, [pc, #84]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004412:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004416:	4a14      	ldr	r2, [pc, #80]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004418:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800441c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004420:	4b11      	ldr	r3, [pc, #68]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004426:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800442e:	490e      	ldr	r1, [pc, #56]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004430:	4313      	orrs	r3, r2
 8004432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800443a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800443e:	d106      	bne.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004440:	4b09      	ldr	r3, [pc, #36]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	4a08      	ldr	r2, [pc, #32]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004446:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800444a:	60d3      	str	r3, [r2, #12]
 800444c:	e020      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004452:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004456:	d109      	bne.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004458:	4b03      	ldr	r3, [pc, #12]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	4a02      	ldr	r2, [pc, #8]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800445e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004462:	60d3      	str	r3, [r2, #12]
 8004464:	e014      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004466:	bf00      	nop
 8004468:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004470:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004474:	d10c      	bne.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	3304      	adds	r3, #4
 800447a:	2101      	movs	r1, #1
 800447c:	4618      	mov	r0, r3
 800447e:	f000 f8e1 	bl	8004644 <RCCEx_PLLSAI1_Config>
 8004482:	4603      	mov	r3, r0
 8004484:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004486:	7cfb      	ldrb	r3, [r7, #19]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d001      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800448c:	7cfb      	ldrb	r3, [r7, #19]
 800448e:	74bb      	strb	r3, [r7, #18]
>>>>>>> ModeSelect_v2
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
<<<<<<< HEAD
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800540c:	2b00      	cmp	r3, #0
 800540e:	d028      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005410:	4b68      	ldr	r3, [pc, #416]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005416:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800541e:	4965      	ldr	r1, [pc, #404]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005420:	4313      	orrs	r3, r2
 8005422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800542a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800542e:	d106      	bne.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005430:	4b60      	ldr	r3, [pc, #384]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	4a5f      	ldr	r2, [pc, #380]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005436:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800543a:	60d3      	str	r3, [r2, #12]
 800543c:	e011      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005442:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005446:	d10c      	bne.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	3304      	adds	r3, #4
 800544c:	2101      	movs	r1, #1
 800544e:	4618      	mov	r0, r3
 8005450:	f000 f8b2 	bl	80055b8 <RCCEx_PLLSAI1_Config>
 8005454:	4603      	mov	r3, r0
 8005456:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005458:	7cfb      	ldrb	r3, [r7, #19]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d001      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800545e:	7cfb      	ldrb	r3, [r7, #19]
 8005460:	74bb      	strb	r3, [r7, #18]
=======
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d028      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800449c:	4b68      	ldr	r3, [pc, #416]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800449e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044aa:	4965      	ldr	r1, [pc, #404]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044ba:	d106      	bne.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044bc:	4b60      	ldr	r3, [pc, #384]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	4a5f      	ldr	r2, [pc, #380]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80044c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044c6:	60d3      	str	r3, [r2, #12]
 80044c8:	e011      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044d2:	d10c      	bne.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	3304      	adds	r3, #4
 80044d8:	2101      	movs	r1, #1
 80044da:	4618      	mov	r0, r3
 80044dc:	f000 f8b2 	bl	8004644 <RCCEx_PLLSAI1_Config>
 80044e0:	4603      	mov	r3, r0
 80044e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044e4:	7cfb      	ldrb	r3, [r7, #19]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80044ea:	7cfb      	ldrb	r3, [r7, #19]
 80044ec:	74bb      	strb	r3, [r7, #18]
>>>>>>> ModeSelect_v2
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
<<<<<<< HEAD
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d01e      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
=======
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d01e      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
>>>>>>> ModeSelect_v2
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
<<<<<<< HEAD
 800546e:	4b51      	ldr	r3, [pc, #324]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005474:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800547e:	494d      	ldr	r1, [pc, #308]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005480:	4313      	orrs	r3, r2
 8005482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800548c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005490:	d10c      	bne.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	3304      	adds	r3, #4
 8005496:	2102      	movs	r1, #2
 8005498:	4618      	mov	r0, r3
 800549a:	f000 f88d 	bl	80055b8 <RCCEx_PLLSAI1_Config>
 800549e:	4603      	mov	r3, r0
 80054a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054a2:	7cfb      	ldrb	r3, [r7, #19]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d001      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80054a8:	7cfb      	ldrb	r3, [r7, #19]
 80054aa:	74bb      	strb	r3, [r7, #18]
=======
 80044fa:	4b51      	ldr	r3, [pc, #324]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80044fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004500:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800450a:	494d      	ldr	r1, [pc, #308]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800450c:	4313      	orrs	r3, r2
 800450e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004518:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800451c:	d10c      	bne.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	3304      	adds	r3, #4
 8004522:	2102      	movs	r1, #2
 8004524:	4618      	mov	r0, r3
 8004526:	f000 f88d 	bl	8004644 <RCCEx_PLLSAI1_Config>
 800452a:	4603      	mov	r3, r0
 800452c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800452e:	7cfb      	ldrb	r3, [r7, #19]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d001      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004534:	7cfb      	ldrb	r3, [r7, #19]
 8004536:	74bb      	strb	r3, [r7, #18]
>>>>>>> ModeSelect_v2
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
<<<<<<< HEAD
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00b      	beq.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
=======
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00b      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
>>>>>>> ModeSelect_v2
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
<<<<<<< HEAD
 80054b8:	4b3e      	ldr	r3, [pc, #248]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80054ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054be:	f023 0204 	bic.w	r2, r3, #4
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054c8:	493a      	ldr	r1, [pc, #232]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
=======
 8004544:	4b3e      	ldr	r3, [pc, #248]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004546:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800454a:	f023 0204 	bic.w	r2, r3, #4
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004554:	493a      	ldr	r1, [pc, #232]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004556:	4313      	orrs	r3, r2
 8004558:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
>>>>>>> ModeSelect_v2
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
<<<<<<< HEAD
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00b      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x614>
=======
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00b      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x614>
>>>>>>> ModeSelect_v2
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
<<<<<<< HEAD
 80054dc:	4b35      	ldr	r3, [pc, #212]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80054de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054e2:	f023 0218 	bic.w	r2, r3, #24
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ec:	4931      	ldr	r1, [pc, #196]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
=======
 8004568:	4b35      	ldr	r3, [pc, #212]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800456a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800456e:	f023 0218 	bic.w	r2, r3, #24
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004578:	4931      	ldr	r1, [pc, #196]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800457a:	4313      	orrs	r3, r2
 800457c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
>>>>>>> ModeSelect_v2
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
<<<<<<< HEAD
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d035      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x68c>
=======
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d035      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
>>>>>>> ModeSelect_v2
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
<<<<<<< HEAD
 8005500:	4b2c      	ldr	r3, [pc, #176]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a2b      	ldr	r2, [pc, #172]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005506:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800550a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800550c:	f7fd fb7a 	bl	8002c04 <HAL_GetTick>
 8005510:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005512:	e009      	b.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005514:	f7fd fb76 	bl	8002c04 <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	2b02      	cmp	r3, #2
 8005520:	d902      	bls.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	74fb      	strb	r3, [r7, #19]
        break;
 8005526:	e005      	b.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005528:	4b22      	ldr	r3, [pc, #136]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d1ef      	bne.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x634>
=======
 800458c:	4b2c      	ldr	r3, [pc, #176]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a2b      	ldr	r2, [pc, #172]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004592:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004596:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004598:	f7fd fb92 	bl	8001cc0 <HAL_GetTick>
 800459c:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800459e:	e009      	b.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80045a0:	f7fd fb8e 	bl	8001cc0 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d902      	bls.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	74fb      	strb	r3, [r7, #19]
        break;
 80045b2:	e005      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80045b4:	4b22      	ldr	r3, [pc, #136]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d1ef      	bne.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x634>
>>>>>>> ModeSelect_v2
      }
    }

    if(ret == HAL_OK)
<<<<<<< HEAD
 8005534:	7cfb      	ldrb	r3, [r7, #19]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d113      	bne.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800553a:	4b1e      	ldr	r3, [pc, #120]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800553c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005540:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800554a:	491a      	ldr	r1, [pc, #104]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800554c:	4313      	orrs	r3, r2
 800554e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	3320      	adds	r3, #32
 8005556:	2102      	movs	r1, #2
 8005558:	4618      	mov	r0, r3
 800555a:	f000 f921 	bl	80057a0 <RCCEx_PLLSAI2_Config>
 800555e:	4603      	mov	r3, r0
 8005560:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8005562:	7cfb      	ldrb	r3, [r7, #19]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d001      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8005568:	7cfb      	ldrb	r3, [r7, #19]
 800556a:	74bb      	strb	r3, [r7, #18]
=======
 80045c0:	7cfb      	ldrb	r3, [r7, #19]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d113      	bne.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 80045c6:	4b1e      	ldr	r3, [pc, #120]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80045c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045d6:	491a      	ldr	r1, [pc, #104]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	3320      	adds	r3, #32
 80045e2:	2102      	movs	r1, #2
 80045e4:	4618      	mov	r0, r3
 80045e6:	f000 f921 	bl	800482c <RCCEx_PLLSAI2_Config>
 80045ea:	4603      	mov	r3, r0
 80045ec:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 80045ee:	7cfb      	ldrb	r3, [r7, #19]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d001      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 80045f4:	7cfb      	ldrb	r3, [r7, #19]
 80045f6:	74bb      	strb	r3, [r7, #18]
>>>>>>> ModeSelect_v2
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
<<<<<<< HEAD
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d017      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
=======
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d017      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
>>>>>>> ModeSelect_v2
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
<<<<<<< HEAD
 8005578:	4b0e      	ldr	r3, [pc, #56]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800557a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800557e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005588:	490a      	ldr	r1, [pc, #40]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800558a:	4313      	orrs	r3, r2
 800558c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005596:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800559a:	d105      	bne.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800559c:	4b05      	ldr	r3, [pc, #20]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	4a04      	ldr	r2, [pc, #16]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80055a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055a6:	60d3      	str	r3, [r2, #12]
=======
 8004604:	4b0e      	ldr	r3, [pc, #56]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004606:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800460a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004614:	490a      	ldr	r1, [pc, #40]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004616:	4313      	orrs	r3, r2
 8004618:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004622:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004626:	d105      	bne.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004628:	4b05      	ldr	r3, [pc, #20]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	4a04      	ldr	r2, [pc, #16]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800462e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004632:	60d3      	str	r3, [r2, #12]
>>>>>>> ModeSelect_v2
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
<<<<<<< HEAD
 80055a8:	7cbb      	ldrb	r3, [r7, #18]
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3718      	adds	r7, #24
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	40021000 	.word	0x40021000

080055b8 <RCCEx_PLLSAI1_Config>:
=======
 8004634:	7cbb      	ldrb	r3, [r7, #18]
}
 8004636:	4618      	mov	r0, r3
 8004638:	3718      	adds	r7, #24
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	40021000 	.word	0x40021000

08004644 <RCCEx_PLLSAI1_Config>:
>>>>>>> ModeSelect_v2
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
<<<<<<< HEAD
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055c2:	2300      	movs	r3, #0
 80055c4:	73fb      	strb	r3, [r7, #15]
=======
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800464e:	2300      	movs	r3, #0
 8004650:	73fb      	strb	r3, [r7, #15]
>>>>>>> ModeSelect_v2
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
<<<<<<< HEAD
 80055c6:	4b72      	ldr	r3, [pc, #456]	; (8005790 <RCCEx_PLLSAI1_Config+0x1d8>)
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	f003 0303 	and.w	r3, r3, #3
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00e      	beq.n	80055f0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80055d2:	4b6f      	ldr	r3, [pc, #444]	; (8005790 <RCCEx_PLLSAI1_Config+0x1d8>)
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	f003 0203 	and.w	r2, r3, #3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d103      	bne.n	80055ea <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
       ||
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d142      	bne.n	8005670 <RCCEx_PLLSAI1_Config+0xb8>
=======
 8004652:	4b72      	ldr	r3, [pc, #456]	; (800481c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	f003 0303 	and.w	r3, r3, #3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00e      	beq.n	800467c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800465e:	4b6f      	ldr	r3, [pc, #444]	; (800481c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	f003 0203 	and.w	r2, r3, #3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	429a      	cmp	r2, r3
 800466c:	d103      	bne.n	8004676 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
       ||
 8004672:	2b00      	cmp	r3, #0
 8004674:	d142      	bne.n	80046fc <RCCEx_PLLSAI1_Config+0xb8>
>>>>>>> ModeSelect_v2
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
<<<<<<< HEAD
 80055ea:	2301      	movs	r3, #1
 80055ec:	73fb      	strb	r3, [r7, #15]
 80055ee:	e03f      	b.n	8005670 <RCCEx_PLLSAI1_Config+0xb8>
=======
 8004676:	2301      	movs	r3, #1
 8004678:	73fb      	strb	r3, [r7, #15]
 800467a:	e03f      	b.n	80046fc <RCCEx_PLLSAI1_Config+0xb8>
>>>>>>> ModeSelect_v2
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
<<<<<<< HEAD
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2b03      	cmp	r3, #3
 80055f6:	d018      	beq.n	800562a <RCCEx_PLLSAI1_Config+0x72>
 80055f8:	2b03      	cmp	r3, #3
 80055fa:	d825      	bhi.n	8005648 <RCCEx_PLLSAI1_Config+0x90>
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d002      	beq.n	8005606 <RCCEx_PLLSAI1_Config+0x4e>
 8005600:	2b02      	cmp	r3, #2
 8005602:	d009      	beq.n	8005618 <RCCEx_PLLSAI1_Config+0x60>
 8005604:	e020      	b.n	8005648 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005606:	4b62      	ldr	r3, [pc, #392]	; (8005790 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0302 	and.w	r3, r3, #2
 800560e:	2b00      	cmp	r3, #0
 8005610:	d11d      	bne.n	800564e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005616:	e01a      	b.n	800564e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005618:	4b5d      	ldr	r3, [pc, #372]	; (8005790 <RCCEx_PLLSAI1_Config+0x1d8>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005620:	2b00      	cmp	r3, #0
 8005622:	d116      	bne.n	8005652 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005628:	e013      	b.n	8005652 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800562a:	4b59      	ldr	r3, [pc, #356]	; (8005790 <RCCEx_PLLSAI1_Config+0x1d8>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d10f      	bne.n	8005656 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005636:	4b56      	ldr	r3, [pc, #344]	; (8005790 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d109      	bne.n	8005656 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005646:	e006      	b.n	8005656 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	73fb      	strb	r3, [r7, #15]
      break;
 800564c:	e004      	b.n	8005658 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800564e:	bf00      	nop
 8005650:	e002      	b.n	8005658 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005652:	bf00      	nop
 8005654:	e000      	b.n	8005658 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005656:	bf00      	nop
    }

    if(status == HAL_OK)
 8005658:	7bfb      	ldrb	r3, [r7, #15]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d108      	bne.n	8005670 <RCCEx_PLLSAI1_Config+0xb8>
=======
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2b03      	cmp	r3, #3
 8004682:	d018      	beq.n	80046b6 <RCCEx_PLLSAI1_Config+0x72>
 8004684:	2b03      	cmp	r3, #3
 8004686:	d825      	bhi.n	80046d4 <RCCEx_PLLSAI1_Config+0x90>
 8004688:	2b01      	cmp	r3, #1
 800468a:	d002      	beq.n	8004692 <RCCEx_PLLSAI1_Config+0x4e>
 800468c:	2b02      	cmp	r3, #2
 800468e:	d009      	beq.n	80046a4 <RCCEx_PLLSAI1_Config+0x60>
 8004690:	e020      	b.n	80046d4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004692:	4b62      	ldr	r3, [pc, #392]	; (800481c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b00      	cmp	r3, #0
 800469c:	d11d      	bne.n	80046da <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046a2:	e01a      	b.n	80046da <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80046a4:	4b5d      	ldr	r3, [pc, #372]	; (800481c <RCCEx_PLLSAI1_Config+0x1d8>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d116      	bne.n	80046de <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046b4:	e013      	b.n	80046de <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80046b6:	4b59      	ldr	r3, [pc, #356]	; (800481c <RCCEx_PLLSAI1_Config+0x1d8>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d10f      	bne.n	80046e2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80046c2:	4b56      	ldr	r3, [pc, #344]	; (800481c <RCCEx_PLLSAI1_Config+0x1d8>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d109      	bne.n	80046e2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80046d2:	e006      	b.n	80046e2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	73fb      	strb	r3, [r7, #15]
      break;
 80046d8:	e004      	b.n	80046e4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80046da:	bf00      	nop
 80046dc:	e002      	b.n	80046e4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80046de:	bf00      	nop
 80046e0:	e000      	b.n	80046e4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80046e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80046e4:	7bfb      	ldrb	r3, [r7, #15]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d108      	bne.n	80046fc <RCCEx_PLLSAI1_Config+0xb8>
>>>>>>> ModeSelect_v2
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
<<<<<<< HEAD
 800565e:	4b4c      	ldr	r3, [pc, #304]	; (8005790 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	f023 0203 	bic.w	r2, r3, #3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4949      	ldr	r1, [pc, #292]	; (8005790 <RCCEx_PLLSAI1_Config+0x1d8>)
 800566c:	4313      	orrs	r3, r2
 800566e:	60cb      	str	r3, [r1, #12]
=======
 80046ea:	4b4c      	ldr	r3, [pc, #304]	; (800481c <RCCEx_PLLSAI1_Config+0x1d8>)
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	f023 0203 	bic.w	r2, r3, #3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4949      	ldr	r1, [pc, #292]	; (800481c <RCCEx_PLLSAI1_Config+0x1d8>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	60cb      	str	r3, [r1, #12]
>>>>>>> ModeSelect_v2
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
<<<<<<< HEAD
 8005670:	7bfb      	ldrb	r3, [r7, #15]
 8005672:	2b00      	cmp	r3, #0
 8005674:	f040 8086 	bne.w	8005784 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005678:	4b45      	ldr	r3, [pc, #276]	; (8005790 <RCCEx_PLLSAI1_Config+0x1d8>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a44      	ldr	r2, [pc, #272]	; (8005790 <RCCEx_PLLSAI1_Config+0x1d8>)
 800567e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005682:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005684:	f7fd fabe 	bl	8002c04 <HAL_GetTick>
 8005688:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800568a:	e009      	b.n	80056a0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800568c:	f7fd faba 	bl	8002c04 <HAL_GetTick>
 8005690:	4602      	mov	r2, r0
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	2b02      	cmp	r3, #2
 8005698:	d902      	bls.n	80056a0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	73fb      	strb	r3, [r7, #15]
        break;
 800569e:	e005      	b.n	80056ac <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80056a0:	4b3b      	ldr	r3, [pc, #236]	; (8005790 <RCCEx_PLLSAI1_Config+0x1d8>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1ef      	bne.n	800568c <RCCEx_PLLSAI1_Config+0xd4>
=======
 80046fc:	7bfb      	ldrb	r3, [r7, #15]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	f040 8086 	bne.w	8004810 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004704:	4b45      	ldr	r3, [pc, #276]	; (800481c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a44      	ldr	r2, [pc, #272]	; (800481c <RCCEx_PLLSAI1_Config+0x1d8>)
 800470a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800470e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004710:	f7fd fad6 	bl	8001cc0 <HAL_GetTick>
 8004714:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004716:	e009      	b.n	800472c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004718:	f7fd fad2 	bl	8001cc0 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b02      	cmp	r3, #2
 8004724:	d902      	bls.n	800472c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	73fb      	strb	r3, [r7, #15]
        break;
 800472a:	e005      	b.n	8004738 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800472c:	4b3b      	ldr	r3, [pc, #236]	; (800481c <RCCEx_PLLSAI1_Config+0x1d8>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d1ef      	bne.n	8004718 <RCCEx_PLLSAI1_Config+0xd4>
>>>>>>> ModeSelect_v2
      }
    }

    if(status == HAL_OK)
<<<<<<< HEAD
 80056ac:	7bfb      	ldrb	r3, [r7, #15]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d168      	bne.n	8005784 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d113      	bne.n	80056e0 <RCCEx_PLLSAI1_Config+0x128>
=======
 8004738:	7bfb      	ldrb	r3, [r7, #15]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d168      	bne.n	8004810 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d113      	bne.n	800476c <RCCEx_PLLSAI1_Config+0x128>
>>>>>>> ModeSelect_v2
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
<<<<<<< HEAD
 80056b8:	4b35      	ldr	r3, [pc, #212]	; (8005790 <RCCEx_PLLSAI1_Config+0x1d8>)
 80056ba:	691a      	ldr	r2, [r3, #16]
 80056bc:	4b35      	ldr	r3, [pc, #212]	; (8005794 <RCCEx_PLLSAI1_Config+0x1dc>)
 80056be:	4013      	ands	r3, r2
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	6892      	ldr	r2, [r2, #8]
 80056c4:	0211      	lsls	r1, r2, #8
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	68d2      	ldr	r2, [r2, #12]
 80056ca:	06d2      	lsls	r2, r2, #27
 80056cc:	4311      	orrs	r1, r2
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	6852      	ldr	r2, [r2, #4]
 80056d2:	3a01      	subs	r2, #1
 80056d4:	0112      	lsls	r2, r2, #4
 80056d6:	430a      	orrs	r2, r1
 80056d8:	492d      	ldr	r1, [pc, #180]	; (8005790 <RCCEx_PLLSAI1_Config+0x1d8>)
 80056da:	4313      	orrs	r3, r2
 80056dc:	610b      	str	r3, [r1, #16]
 80056de:	e02d      	b.n	800573c <RCCEx_PLLSAI1_Config+0x184>
=======
 8004744:	4b35      	ldr	r3, [pc, #212]	; (800481c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004746:	691a      	ldr	r2, [r3, #16]
 8004748:	4b35      	ldr	r3, [pc, #212]	; (8004820 <RCCEx_PLLSAI1_Config+0x1dc>)
 800474a:	4013      	ands	r3, r2
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	6892      	ldr	r2, [r2, #8]
 8004750:	0211      	lsls	r1, r2, #8
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	68d2      	ldr	r2, [r2, #12]
 8004756:	06d2      	lsls	r2, r2, #27
 8004758:	4311      	orrs	r1, r2
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	6852      	ldr	r2, [r2, #4]
 800475e:	3a01      	subs	r2, #1
 8004760:	0112      	lsls	r2, r2, #4
 8004762:	430a      	orrs	r2, r1
 8004764:	492d      	ldr	r1, [pc, #180]	; (800481c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004766:	4313      	orrs	r3, r2
 8004768:	610b      	str	r3, [r1, #16]
 800476a:	e02d      	b.n	80047c8 <RCCEx_PLLSAI1_Config+0x184>
>>>>>>> ModeSelect_v2
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
<<<<<<< HEAD
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d115      	bne.n	8005712 <RCCEx_PLLSAI1_Config+0x15a>
=======
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d115      	bne.n	800479e <RCCEx_PLLSAI1_Config+0x15a>
>>>>>>> ModeSelect_v2
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
<<<<<<< HEAD
 80056e6:	4b2a      	ldr	r3, [pc, #168]	; (8005790 <RCCEx_PLLSAI1_Config+0x1d8>)
 80056e8:	691a      	ldr	r2, [r3, #16]
 80056ea:	4b2b      	ldr	r3, [pc, #172]	; (8005798 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056ec:	4013      	ands	r3, r2
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	6892      	ldr	r2, [r2, #8]
 80056f2:	0211      	lsls	r1, r2, #8
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	6912      	ldr	r2, [r2, #16]
 80056f8:	0852      	lsrs	r2, r2, #1
 80056fa:	3a01      	subs	r2, #1
 80056fc:	0552      	lsls	r2, r2, #21
 80056fe:	4311      	orrs	r1, r2
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	6852      	ldr	r2, [r2, #4]
 8005704:	3a01      	subs	r2, #1
 8005706:	0112      	lsls	r2, r2, #4
 8005708:	430a      	orrs	r2, r1
 800570a:	4921      	ldr	r1, [pc, #132]	; (8005790 <RCCEx_PLLSAI1_Config+0x1d8>)
 800570c:	4313      	orrs	r3, r2
 800570e:	610b      	str	r3, [r1, #16]
 8005710:	e014      	b.n	800573c <RCCEx_PLLSAI1_Config+0x184>
=======
 8004772:	4b2a      	ldr	r3, [pc, #168]	; (800481c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004774:	691a      	ldr	r2, [r3, #16]
 8004776:	4b2b      	ldr	r3, [pc, #172]	; (8004824 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004778:	4013      	ands	r3, r2
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	6892      	ldr	r2, [r2, #8]
 800477e:	0211      	lsls	r1, r2, #8
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	6912      	ldr	r2, [r2, #16]
 8004784:	0852      	lsrs	r2, r2, #1
 8004786:	3a01      	subs	r2, #1
 8004788:	0552      	lsls	r2, r2, #21
 800478a:	4311      	orrs	r1, r2
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	6852      	ldr	r2, [r2, #4]
 8004790:	3a01      	subs	r2, #1
 8004792:	0112      	lsls	r2, r2, #4
 8004794:	430a      	orrs	r2, r1
 8004796:	4921      	ldr	r1, [pc, #132]	; (800481c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004798:	4313      	orrs	r3, r2
 800479a:	610b      	str	r3, [r1, #16]
 800479c:	e014      	b.n	80047c8 <RCCEx_PLLSAI1_Config+0x184>
>>>>>>> ModeSelect_v2
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
<<<<<<< HEAD
 8005712:	4b1f      	ldr	r3, [pc, #124]	; (8005790 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005714:	691a      	ldr	r2, [r3, #16]
 8005716:	4b21      	ldr	r3, [pc, #132]	; (800579c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005718:	4013      	ands	r3, r2
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	6892      	ldr	r2, [r2, #8]
 800571e:	0211      	lsls	r1, r2, #8
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	6952      	ldr	r2, [r2, #20]
 8005724:	0852      	lsrs	r2, r2, #1
 8005726:	3a01      	subs	r2, #1
 8005728:	0652      	lsls	r2, r2, #25
 800572a:	4311      	orrs	r1, r2
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	6852      	ldr	r2, [r2, #4]
 8005730:	3a01      	subs	r2, #1
 8005732:	0112      	lsls	r2, r2, #4
 8005734:	430a      	orrs	r2, r1
 8005736:	4916      	ldr	r1, [pc, #88]	; (8005790 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005738:	4313      	orrs	r3, r2
 800573a:	610b      	str	r3, [r1, #16]
=======
 800479e:	4b1f      	ldr	r3, [pc, #124]	; (800481c <RCCEx_PLLSAI1_Config+0x1d8>)
 80047a0:	691a      	ldr	r2, [r3, #16]
 80047a2:	4b21      	ldr	r3, [pc, #132]	; (8004828 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047a4:	4013      	ands	r3, r2
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	6892      	ldr	r2, [r2, #8]
 80047aa:	0211      	lsls	r1, r2, #8
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	6952      	ldr	r2, [r2, #20]
 80047b0:	0852      	lsrs	r2, r2, #1
 80047b2:	3a01      	subs	r2, #1
 80047b4:	0652      	lsls	r2, r2, #25
 80047b6:	4311      	orrs	r1, r2
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	6852      	ldr	r2, [r2, #4]
 80047bc:	3a01      	subs	r2, #1
 80047be:	0112      	lsls	r2, r2, #4
 80047c0:	430a      	orrs	r2, r1
 80047c2:	4916      	ldr	r1, [pc, #88]	; (800481c <RCCEx_PLLSAI1_Config+0x1d8>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	610b      	str	r3, [r1, #16]
>>>>>>> ModeSelect_v2
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
<<<<<<< HEAD
 800573c:	4b14      	ldr	r3, [pc, #80]	; (8005790 <RCCEx_PLLSAI1_Config+0x1d8>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a13      	ldr	r2, [pc, #76]	; (8005790 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005742:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005746:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005748:	f7fd fa5c 	bl	8002c04 <HAL_GetTick>
 800574c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800574e:	e009      	b.n	8005764 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005750:	f7fd fa58 	bl	8002c04 <HAL_GetTick>
 8005754:	4602      	mov	r2, r0
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	2b02      	cmp	r3, #2
 800575c:	d902      	bls.n	8005764 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800575e:	2303      	movs	r3, #3
 8005760:	73fb      	strb	r3, [r7, #15]
          break;
 8005762:	e005      	b.n	8005770 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005764:	4b0a      	ldr	r3, [pc, #40]	; (8005790 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d0ef      	beq.n	8005750 <RCCEx_PLLSAI1_Config+0x198>
=======
 80047c8:	4b14      	ldr	r3, [pc, #80]	; (800481c <RCCEx_PLLSAI1_Config+0x1d8>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a13      	ldr	r2, [pc, #76]	; (800481c <RCCEx_PLLSAI1_Config+0x1d8>)
 80047ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80047d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047d4:	f7fd fa74 	bl	8001cc0 <HAL_GetTick>
 80047d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047da:	e009      	b.n	80047f0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047dc:	f7fd fa70 	bl	8001cc0 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d902      	bls.n	80047f0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	73fb      	strb	r3, [r7, #15]
          break;
 80047ee:	e005      	b.n	80047fc <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047f0:	4b0a      	ldr	r3, [pc, #40]	; (800481c <RCCEx_PLLSAI1_Config+0x1d8>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d0ef      	beq.n	80047dc <RCCEx_PLLSAI1_Config+0x198>
>>>>>>> ModeSelect_v2
        }
      }

      if(status == HAL_OK)
<<<<<<< HEAD
 8005770:	7bfb      	ldrb	r3, [r7, #15]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d106      	bne.n	8005784 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005776:	4b06      	ldr	r3, [pc, #24]	; (8005790 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005778:	691a      	ldr	r2, [r3, #16]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	4904      	ldr	r1, [pc, #16]	; (8005790 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005780:	4313      	orrs	r3, r2
 8005782:	610b      	str	r3, [r1, #16]
=======
 80047fc:	7bfb      	ldrb	r3, [r7, #15]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d106      	bne.n	8004810 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004802:	4b06      	ldr	r3, [pc, #24]	; (800481c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004804:	691a      	ldr	r2, [r3, #16]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	4904      	ldr	r1, [pc, #16]	; (800481c <RCCEx_PLLSAI1_Config+0x1d8>)
 800480c:	4313      	orrs	r3, r2
 800480e:	610b      	str	r3, [r1, #16]
>>>>>>> ModeSelect_v2
      }
    }
  }

  return status;
<<<<<<< HEAD
 8005784:	7bfb      	ldrb	r3, [r7, #15]
}
 8005786:	4618      	mov	r0, r3
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	40021000 	.word	0x40021000
 8005794:	07ff800f 	.word	0x07ff800f
 8005798:	ff9f800f 	.word	0xff9f800f
 800579c:	f9ff800f 	.word	0xf9ff800f

080057a0 <RCCEx_PLLSAI2_Config>:
=======
 8004810:	7bfb      	ldrb	r3, [r7, #15]
}
 8004812:	4618      	mov	r0, r3
 8004814:	3710      	adds	r7, #16
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	40021000 	.word	0x40021000
 8004820:	07ff800f 	.word	0x07ff800f
 8004824:	ff9f800f 	.word	0xff9f800f
 8004828:	f9ff800f 	.word	0xf9ff800f

0800482c <RCCEx_PLLSAI2_Config>:
>>>>>>> ModeSelect_v2
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
<<<<<<< HEAD
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057aa:	2300      	movs	r3, #0
 80057ac:	73fb      	strb	r3, [r7, #15]
=======
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004836:	2300      	movs	r3, #0
 8004838:	73fb      	strb	r3, [r7, #15]
>>>>>>> ModeSelect_v2
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
<<<<<<< HEAD
 80057ae:	4b72      	ldr	r3, [pc, #456]	; (8005978 <RCCEx_PLLSAI2_Config+0x1d8>)
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	f003 0303 	and.w	r3, r3, #3
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00e      	beq.n	80057d8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80057ba:	4b6f      	ldr	r3, [pc, #444]	; (8005978 <RCCEx_PLLSAI2_Config+0x1d8>)
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	f003 0203 	and.w	r2, r3, #3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d103      	bne.n	80057d2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
       ||
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d142      	bne.n	8005858 <RCCEx_PLLSAI2_Config+0xb8>
=======
 800483a:	4b72      	ldr	r3, [pc, #456]	; (8004a04 <RCCEx_PLLSAI2_Config+0x1d8>)
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	f003 0303 	and.w	r3, r3, #3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00e      	beq.n	8004864 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004846:	4b6f      	ldr	r3, [pc, #444]	; (8004a04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	f003 0203 	and.w	r2, r3, #3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	429a      	cmp	r2, r3
 8004854:	d103      	bne.n	800485e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
       ||
 800485a:	2b00      	cmp	r3, #0
 800485c:	d142      	bne.n	80048e4 <RCCEx_PLLSAI2_Config+0xb8>
>>>>>>> ModeSelect_v2
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
<<<<<<< HEAD
 80057d2:	2301      	movs	r3, #1
 80057d4:	73fb      	strb	r3, [r7, #15]
 80057d6:	e03f      	b.n	8005858 <RCCEx_PLLSAI2_Config+0xb8>
=======
 800485e:	2301      	movs	r3, #1
 8004860:	73fb      	strb	r3, [r7, #15]
 8004862:	e03f      	b.n	80048e4 <RCCEx_PLLSAI2_Config+0xb8>
>>>>>>> ModeSelect_v2
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
<<<<<<< HEAD
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2b03      	cmp	r3, #3
 80057de:	d018      	beq.n	8005812 <RCCEx_PLLSAI2_Config+0x72>
 80057e0:	2b03      	cmp	r3, #3
 80057e2:	d825      	bhi.n	8005830 <RCCEx_PLLSAI2_Config+0x90>
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d002      	beq.n	80057ee <RCCEx_PLLSAI2_Config+0x4e>
 80057e8:	2b02      	cmp	r3, #2
 80057ea:	d009      	beq.n	8005800 <RCCEx_PLLSAI2_Config+0x60>
 80057ec:	e020      	b.n	8005830 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80057ee:	4b62      	ldr	r3, [pc, #392]	; (8005978 <RCCEx_PLLSAI2_Config+0x1d8>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0302 	and.w	r3, r3, #2
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d11d      	bne.n	8005836 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057fe:	e01a      	b.n	8005836 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005800:	4b5d      	ldr	r3, [pc, #372]	; (8005978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005808:	2b00      	cmp	r3, #0
 800580a:	d116      	bne.n	800583a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005810:	e013      	b.n	800583a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005812:	4b59      	ldr	r3, [pc, #356]	; (8005978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d10f      	bne.n	800583e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800581e:	4b56      	ldr	r3, [pc, #344]	; (8005978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d109      	bne.n	800583e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800582e:	e006      	b.n	800583e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	73fb      	strb	r3, [r7, #15]
      break;
 8005834:	e004      	b.n	8005840 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005836:	bf00      	nop
 8005838:	e002      	b.n	8005840 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800583a:	bf00      	nop
 800583c:	e000      	b.n	8005840 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800583e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005840:	7bfb      	ldrb	r3, [r7, #15]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d108      	bne.n	8005858 <RCCEx_PLLSAI2_Config+0xb8>
=======
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2b03      	cmp	r3, #3
 800486a:	d018      	beq.n	800489e <RCCEx_PLLSAI2_Config+0x72>
 800486c:	2b03      	cmp	r3, #3
 800486e:	d825      	bhi.n	80048bc <RCCEx_PLLSAI2_Config+0x90>
 8004870:	2b01      	cmp	r3, #1
 8004872:	d002      	beq.n	800487a <RCCEx_PLLSAI2_Config+0x4e>
 8004874:	2b02      	cmp	r3, #2
 8004876:	d009      	beq.n	800488c <RCCEx_PLLSAI2_Config+0x60>
 8004878:	e020      	b.n	80048bc <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800487a:	4b62      	ldr	r3, [pc, #392]	; (8004a04 <RCCEx_PLLSAI2_Config+0x1d8>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b00      	cmp	r3, #0
 8004884:	d11d      	bne.n	80048c2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800488a:	e01a      	b.n	80048c2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800488c:	4b5d      	ldr	r3, [pc, #372]	; (8004a04 <RCCEx_PLLSAI2_Config+0x1d8>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004894:	2b00      	cmp	r3, #0
 8004896:	d116      	bne.n	80048c6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800489c:	e013      	b.n	80048c6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800489e:	4b59      	ldr	r3, [pc, #356]	; (8004a04 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d10f      	bne.n	80048ca <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80048aa:	4b56      	ldr	r3, [pc, #344]	; (8004a04 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d109      	bne.n	80048ca <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80048ba:	e006      	b.n	80048ca <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	73fb      	strb	r3, [r7, #15]
      break;
 80048c0:	e004      	b.n	80048cc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80048c2:	bf00      	nop
 80048c4:	e002      	b.n	80048cc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80048c6:	bf00      	nop
 80048c8:	e000      	b.n	80048cc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80048ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80048cc:	7bfb      	ldrb	r3, [r7, #15]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d108      	bne.n	80048e4 <RCCEx_PLLSAI2_Config+0xb8>
>>>>>>> ModeSelect_v2
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
<<<<<<< HEAD
 8005846:	4b4c      	ldr	r3, [pc, #304]	; (8005978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	f023 0203 	bic.w	r2, r3, #3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4949      	ldr	r1, [pc, #292]	; (8005978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005854:	4313      	orrs	r3, r2
 8005856:	60cb      	str	r3, [r1, #12]
=======
 80048d2:	4b4c      	ldr	r3, [pc, #304]	; (8004a04 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	f023 0203 	bic.w	r2, r3, #3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4949      	ldr	r1, [pc, #292]	; (8004a04 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	60cb      	str	r3, [r1, #12]
>>>>>>> ModeSelect_v2
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
<<<<<<< HEAD
 8005858:	7bfb      	ldrb	r3, [r7, #15]
 800585a:	2b00      	cmp	r3, #0
 800585c:	f040 8086 	bne.w	800596c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005860:	4b45      	ldr	r3, [pc, #276]	; (8005978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a44      	ldr	r2, [pc, #272]	; (8005978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005866:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800586a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800586c:	f7fd f9ca 	bl	8002c04 <HAL_GetTick>
 8005870:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005872:	e009      	b.n	8005888 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005874:	f7fd f9c6 	bl	8002c04 <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	2b02      	cmp	r3, #2
 8005880:	d902      	bls.n	8005888 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	73fb      	strb	r3, [r7, #15]
        break;
 8005886:	e005      	b.n	8005894 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005888:	4b3b      	ldr	r3, [pc, #236]	; (8005978 <RCCEx_PLLSAI2_Config+0x1d8>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1ef      	bne.n	8005874 <RCCEx_PLLSAI2_Config+0xd4>
=======
 80048e4:	7bfb      	ldrb	r3, [r7, #15]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	f040 8086 	bne.w	80049f8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80048ec:	4b45      	ldr	r3, [pc, #276]	; (8004a04 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a44      	ldr	r2, [pc, #272]	; (8004a04 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048f8:	f7fd f9e2 	bl	8001cc0 <HAL_GetTick>
 80048fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80048fe:	e009      	b.n	8004914 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004900:	f7fd f9de 	bl	8001cc0 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	2b02      	cmp	r3, #2
 800490c:	d902      	bls.n	8004914 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	73fb      	strb	r3, [r7, #15]
        break;
 8004912:	e005      	b.n	8004920 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004914:	4b3b      	ldr	r3, [pc, #236]	; (8004a04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1ef      	bne.n	8004900 <RCCEx_PLLSAI2_Config+0xd4>
>>>>>>> ModeSelect_v2
      }
    }

    if(status == HAL_OK)
<<<<<<< HEAD
 8005894:	7bfb      	ldrb	r3, [r7, #15]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d168      	bne.n	800596c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d113      	bne.n	80058c8 <RCCEx_PLLSAI2_Config+0x128>
=======
 8004920:	7bfb      	ldrb	r3, [r7, #15]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d168      	bne.n	80049f8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d113      	bne.n	8004954 <RCCEx_PLLSAI2_Config+0x128>
>>>>>>> ModeSelect_v2
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
<<<<<<< HEAD
 80058a0:	4b35      	ldr	r3, [pc, #212]	; (8005978 <RCCEx_PLLSAI2_Config+0x1d8>)
 80058a2:	695a      	ldr	r2, [r3, #20]
 80058a4:	4b35      	ldr	r3, [pc, #212]	; (800597c <RCCEx_PLLSAI2_Config+0x1dc>)
 80058a6:	4013      	ands	r3, r2
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	6892      	ldr	r2, [r2, #8]
 80058ac:	0211      	lsls	r1, r2, #8
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	68d2      	ldr	r2, [r2, #12]
 80058b2:	06d2      	lsls	r2, r2, #27
 80058b4:	4311      	orrs	r1, r2
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	6852      	ldr	r2, [r2, #4]
 80058ba:	3a01      	subs	r2, #1
 80058bc:	0112      	lsls	r2, r2, #4
 80058be:	430a      	orrs	r2, r1
 80058c0:	492d      	ldr	r1, [pc, #180]	; (8005978 <RCCEx_PLLSAI2_Config+0x1d8>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	614b      	str	r3, [r1, #20]
 80058c6:	e02d      	b.n	8005924 <RCCEx_PLLSAI2_Config+0x184>
=======
 800492c:	4b35      	ldr	r3, [pc, #212]	; (8004a04 <RCCEx_PLLSAI2_Config+0x1d8>)
 800492e:	695a      	ldr	r2, [r3, #20]
 8004930:	4b35      	ldr	r3, [pc, #212]	; (8004a08 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004932:	4013      	ands	r3, r2
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	6892      	ldr	r2, [r2, #8]
 8004938:	0211      	lsls	r1, r2, #8
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	68d2      	ldr	r2, [r2, #12]
 800493e:	06d2      	lsls	r2, r2, #27
 8004940:	4311      	orrs	r1, r2
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	6852      	ldr	r2, [r2, #4]
 8004946:	3a01      	subs	r2, #1
 8004948:	0112      	lsls	r2, r2, #4
 800494a:	430a      	orrs	r2, r1
 800494c:	492d      	ldr	r1, [pc, #180]	; (8004a04 <RCCEx_PLLSAI2_Config+0x1d8>)
 800494e:	4313      	orrs	r3, r2
 8004950:	614b      	str	r3, [r1, #20]
 8004952:	e02d      	b.n	80049b0 <RCCEx_PLLSAI2_Config+0x184>
>>>>>>> ModeSelect_v2
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
<<<<<<< HEAD
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d115      	bne.n	80058fa <RCCEx_PLLSAI2_Config+0x15a>
=======
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d115      	bne.n	8004986 <RCCEx_PLLSAI2_Config+0x15a>
>>>>>>> ModeSelect_v2
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
<<<<<<< HEAD
 80058ce:	4b2a      	ldr	r3, [pc, #168]	; (8005978 <RCCEx_PLLSAI2_Config+0x1d8>)
 80058d0:	695a      	ldr	r2, [r3, #20]
 80058d2:	4b2b      	ldr	r3, [pc, #172]	; (8005980 <RCCEx_PLLSAI2_Config+0x1e0>)
 80058d4:	4013      	ands	r3, r2
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	6892      	ldr	r2, [r2, #8]
 80058da:	0211      	lsls	r1, r2, #8
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	6912      	ldr	r2, [r2, #16]
 80058e0:	0852      	lsrs	r2, r2, #1
 80058e2:	3a01      	subs	r2, #1
 80058e4:	0552      	lsls	r2, r2, #21
 80058e6:	4311      	orrs	r1, r2
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	6852      	ldr	r2, [r2, #4]
 80058ec:	3a01      	subs	r2, #1
 80058ee:	0112      	lsls	r2, r2, #4
 80058f0:	430a      	orrs	r2, r1
 80058f2:	4921      	ldr	r1, [pc, #132]	; (8005978 <RCCEx_PLLSAI2_Config+0x1d8>)
 80058f4:	4313      	orrs	r3, r2
 80058f6:	614b      	str	r3, [r1, #20]
 80058f8:	e014      	b.n	8005924 <RCCEx_PLLSAI2_Config+0x184>
=======
 800495a:	4b2a      	ldr	r3, [pc, #168]	; (8004a04 <RCCEx_PLLSAI2_Config+0x1d8>)
 800495c:	695a      	ldr	r2, [r3, #20]
 800495e:	4b2b      	ldr	r3, [pc, #172]	; (8004a0c <RCCEx_PLLSAI2_Config+0x1e0>)
 8004960:	4013      	ands	r3, r2
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	6892      	ldr	r2, [r2, #8]
 8004966:	0211      	lsls	r1, r2, #8
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	6912      	ldr	r2, [r2, #16]
 800496c:	0852      	lsrs	r2, r2, #1
 800496e:	3a01      	subs	r2, #1
 8004970:	0552      	lsls	r2, r2, #21
 8004972:	4311      	orrs	r1, r2
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	6852      	ldr	r2, [r2, #4]
 8004978:	3a01      	subs	r2, #1
 800497a:	0112      	lsls	r2, r2, #4
 800497c:	430a      	orrs	r2, r1
 800497e:	4921      	ldr	r1, [pc, #132]	; (8004a04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004980:	4313      	orrs	r3, r2
 8004982:	614b      	str	r3, [r1, #20]
 8004984:	e014      	b.n	80049b0 <RCCEx_PLLSAI2_Config+0x184>
>>>>>>> ModeSelect_v2
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
<<<<<<< HEAD
 80058fa:	4b1f      	ldr	r3, [pc, #124]	; (8005978 <RCCEx_PLLSAI2_Config+0x1d8>)
 80058fc:	695a      	ldr	r2, [r3, #20]
 80058fe:	4b21      	ldr	r3, [pc, #132]	; (8005984 <RCCEx_PLLSAI2_Config+0x1e4>)
 8005900:	4013      	ands	r3, r2
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	6892      	ldr	r2, [r2, #8]
 8005906:	0211      	lsls	r1, r2, #8
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	6952      	ldr	r2, [r2, #20]
 800590c:	0852      	lsrs	r2, r2, #1
 800590e:	3a01      	subs	r2, #1
 8005910:	0652      	lsls	r2, r2, #25
 8005912:	4311      	orrs	r1, r2
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	6852      	ldr	r2, [r2, #4]
 8005918:	3a01      	subs	r2, #1
 800591a:	0112      	lsls	r2, r2, #4
 800591c:	430a      	orrs	r2, r1
 800591e:	4916      	ldr	r1, [pc, #88]	; (8005978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005920:	4313      	orrs	r3, r2
 8005922:	614b      	str	r3, [r1, #20]
=======
 8004986:	4b1f      	ldr	r3, [pc, #124]	; (8004a04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004988:	695a      	ldr	r2, [r3, #20]
 800498a:	4b21      	ldr	r3, [pc, #132]	; (8004a10 <RCCEx_PLLSAI2_Config+0x1e4>)
 800498c:	4013      	ands	r3, r2
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	6892      	ldr	r2, [r2, #8]
 8004992:	0211      	lsls	r1, r2, #8
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	6952      	ldr	r2, [r2, #20]
 8004998:	0852      	lsrs	r2, r2, #1
 800499a:	3a01      	subs	r2, #1
 800499c:	0652      	lsls	r2, r2, #25
 800499e:	4311      	orrs	r1, r2
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	6852      	ldr	r2, [r2, #4]
 80049a4:	3a01      	subs	r2, #1
 80049a6:	0112      	lsls	r2, r2, #4
 80049a8:	430a      	orrs	r2, r1
 80049aa:	4916      	ldr	r1, [pc, #88]	; (8004a04 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	614b      	str	r3, [r1, #20]
>>>>>>> ModeSelect_v2
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
<<<<<<< HEAD
 8005924:	4b14      	ldr	r3, [pc, #80]	; (8005978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a13      	ldr	r2, [pc, #76]	; (8005978 <RCCEx_PLLSAI2_Config+0x1d8>)
 800592a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800592e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005930:	f7fd f968 	bl	8002c04 <HAL_GetTick>
 8005934:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005936:	e009      	b.n	800594c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005938:	f7fd f964 	bl	8002c04 <HAL_GetTick>
 800593c:	4602      	mov	r2, r0
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	2b02      	cmp	r3, #2
 8005944:	d902      	bls.n	800594c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	73fb      	strb	r3, [r7, #15]
          break;
 800594a:	e005      	b.n	8005958 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800594c:	4b0a      	ldr	r3, [pc, #40]	; (8005978 <RCCEx_PLLSAI2_Config+0x1d8>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d0ef      	beq.n	8005938 <RCCEx_PLLSAI2_Config+0x198>
=======
 80049b0:	4b14      	ldr	r3, [pc, #80]	; (8004a04 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a13      	ldr	r2, [pc, #76]	; (8004a04 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049bc:	f7fd f980 	bl	8001cc0 <HAL_GetTick>
 80049c0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80049c2:	e009      	b.n	80049d8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80049c4:	f7fd f97c 	bl	8001cc0 <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d902      	bls.n	80049d8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	73fb      	strb	r3, [r7, #15]
          break;
 80049d6:	e005      	b.n	80049e4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80049d8:	4b0a      	ldr	r3, [pc, #40]	; (8004a04 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d0ef      	beq.n	80049c4 <RCCEx_PLLSAI2_Config+0x198>
>>>>>>> ModeSelect_v2
        }
      }

      if(status == HAL_OK)
<<<<<<< HEAD
 8005958:	7bfb      	ldrb	r3, [r7, #15]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d106      	bne.n	800596c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800595e:	4b06      	ldr	r3, [pc, #24]	; (8005978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005960:	695a      	ldr	r2, [r3, #20]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	4904      	ldr	r1, [pc, #16]	; (8005978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005968:	4313      	orrs	r3, r2
 800596a:	614b      	str	r3, [r1, #20]
=======
 80049e4:	7bfb      	ldrb	r3, [r7, #15]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d106      	bne.n	80049f8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80049ea:	4b06      	ldr	r3, [pc, #24]	; (8004a04 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049ec:	695a      	ldr	r2, [r3, #20]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	4904      	ldr	r1, [pc, #16]	; (8004a04 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	614b      	str	r3, [r1, #20]
>>>>>>> ModeSelect_v2
      }
    }
  }

  return status;
<<<<<<< HEAD
 800596c:	7bfb      	ldrb	r3, [r7, #15]
}
 800596e:	4618      	mov	r0, r3
 8005970:	3710      	adds	r7, #16
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	40021000 	.word	0x40021000
 800597c:	07ff800f 	.word	0x07ff800f
 8005980:	ff9f800f 	.word	0xff9f800f
 8005984:	f9ff800f 	.word	0xf9ff800f

08005988 <HAL_TIM_Base_Init>:
=======
 80049f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	40021000 	.word	0x40021000
 8004a08:	07ff800f 	.word	0x07ff800f
 8004a0c:	ff9f800f 	.word	0xff9f800f
 8004a10:	f9ff800f 	.word	0xf9ff800f

08004a14 <HAL_TIM_Base_Init>:
>>>>>>> ModeSelect_v2
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d101      	bne.n	800599a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e049      	b.n	8005a2e <HAL_TIM_Base_Init+0xa6>
=======
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e049      	b.n	8004aba <HAL_TIM_Base_Init+0xa6>
>>>>>>> ModeSelect_v2
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d106      	bne.n	80059b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d106      	bne.n	8004a40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> ModeSelect_v2
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< HEAD
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f7fc ff30 	bl	8002814 <HAL_TIM_Base_MspInit>
=======
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f7fc fee2 	bl	8001804 <HAL_TIM_Base_MspInit>
>>>>>>> ModeSelect_v2
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2202      	movs	r2, #2
 80059b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	3304      	adds	r3, #4
 80059c4:	4619      	mov	r1, r3
 80059c6:	4610      	mov	r0, r2
 80059c8:	f000 fde8 	bl	800659c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3708      	adds	r7, #8
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
	...

08005a38 <HAL_TIM_Base_Start>:
=======
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2202      	movs	r2, #2
 8004a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	3304      	adds	r3, #4
 8004a50:	4619      	mov	r1, r3
 8004a52:	4610      	mov	r0, r2
 8004a54:	f000 fde8 	bl	8005628 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3708      	adds	r7, #8
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
	...

08004ac4 <HAL_TIM_Base_Start>:
>>>>>>> ModeSelect_v2
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005a38:	b480      	push	{r7}
 8005a3a:	b085      	sub	sp, #20
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
=======
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
>>>>>>> ModeSelect_v2

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
<<<<<<< HEAD
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d001      	beq.n	8005a50 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e047      	b.n	8005ae0 <HAL_TIM_Base_Start+0xa8>
=======
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d001      	beq.n	8004adc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e047      	b.n	8004b6c <HAL_TIM_Base_Start+0xa8>
>>>>>>> ModeSelect_v2
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2202      	movs	r2, #2
 8005a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a23      	ldr	r2, [pc, #140]	; (8005aec <HAL_TIM_Base_Start+0xb4>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d01d      	beq.n	8005a9e <HAL_TIM_Base_Start+0x66>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a6a:	d018      	beq.n	8005a9e <HAL_TIM_Base_Start+0x66>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a1f      	ldr	r2, [pc, #124]	; (8005af0 <HAL_TIM_Base_Start+0xb8>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d013      	beq.n	8005a9e <HAL_TIM_Base_Start+0x66>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a1e      	ldr	r2, [pc, #120]	; (8005af4 <HAL_TIM_Base_Start+0xbc>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d00e      	beq.n	8005a9e <HAL_TIM_Base_Start+0x66>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a1c      	ldr	r2, [pc, #112]	; (8005af8 <HAL_TIM_Base_Start+0xc0>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d009      	beq.n	8005a9e <HAL_TIM_Base_Start+0x66>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a1b      	ldr	r2, [pc, #108]	; (8005afc <HAL_TIM_Base_Start+0xc4>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d004      	beq.n	8005a9e <HAL_TIM_Base_Start+0x66>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a19      	ldr	r2, [pc, #100]	; (8005b00 <HAL_TIM_Base_Start+0xc8>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d115      	bne.n	8005aca <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	689a      	ldr	r2, [r3, #8]
 8005aa4:	4b17      	ldr	r3, [pc, #92]	; (8005b04 <HAL_TIM_Base_Start+0xcc>)
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2b06      	cmp	r3, #6
 8005aae:	d015      	beq.n	8005adc <HAL_TIM_Base_Start+0xa4>
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ab6:	d011      	beq.n	8005adc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f042 0201 	orr.w	r2, r2, #1
 8005ac6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ac8:	e008      	b.n	8005adc <HAL_TIM_Base_Start+0xa4>
=======
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2202      	movs	r2, #2
 8004ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a23      	ldr	r2, [pc, #140]	; (8004b78 <HAL_TIM_Base_Start+0xb4>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d01d      	beq.n	8004b2a <HAL_TIM_Base_Start+0x66>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004af6:	d018      	beq.n	8004b2a <HAL_TIM_Base_Start+0x66>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a1f      	ldr	r2, [pc, #124]	; (8004b7c <HAL_TIM_Base_Start+0xb8>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d013      	beq.n	8004b2a <HAL_TIM_Base_Start+0x66>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a1e      	ldr	r2, [pc, #120]	; (8004b80 <HAL_TIM_Base_Start+0xbc>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d00e      	beq.n	8004b2a <HAL_TIM_Base_Start+0x66>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a1c      	ldr	r2, [pc, #112]	; (8004b84 <HAL_TIM_Base_Start+0xc0>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d009      	beq.n	8004b2a <HAL_TIM_Base_Start+0x66>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a1b      	ldr	r2, [pc, #108]	; (8004b88 <HAL_TIM_Base_Start+0xc4>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d004      	beq.n	8004b2a <HAL_TIM_Base_Start+0x66>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a19      	ldr	r2, [pc, #100]	; (8004b8c <HAL_TIM_Base_Start+0xc8>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d115      	bne.n	8004b56 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	689a      	ldr	r2, [r3, #8]
 8004b30:	4b17      	ldr	r3, [pc, #92]	; (8004b90 <HAL_TIM_Base_Start+0xcc>)
 8004b32:	4013      	ands	r3, r2
 8004b34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2b06      	cmp	r3, #6
 8004b3a:	d015      	beq.n	8004b68 <HAL_TIM_Base_Start+0xa4>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b42:	d011      	beq.n	8004b68 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f042 0201 	orr.w	r2, r2, #1
 8004b52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b54:	e008      	b.n	8004b68 <HAL_TIM_Base_Start+0xa4>
>>>>>>> ModeSelect_v2
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f042 0201 	orr.w	r2, r2, #1
 8005ad8:	601a      	str	r2, [r3, #0]
 8005ada:	e000      	b.n	8005ade <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005adc:	bf00      	nop
=======
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f042 0201 	orr.w	r2, r2, #1
 8004b64:	601a      	str	r2, [r3, #0]
 8004b66:	e000      	b.n	8004b6a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b68:	bf00      	nop
>>>>>>> ModeSelect_v2
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3714      	adds	r7, #20
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr
 8005aec:	40012c00 	.word	0x40012c00
 8005af0:	40000400 	.word	0x40000400
 8005af4:	40000800 	.word	0x40000800
 8005af8:	40000c00 	.word	0x40000c00
 8005afc:	40013400 	.word	0x40013400
 8005b00:	40014000 	.word	0x40014000
 8005b04:	00010007 	.word	0x00010007

08005b08 <HAL_TIM_Base_Stop>:
=======
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3714      	adds	r7, #20
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr
 8004b78:	40012c00 	.word	0x40012c00
 8004b7c:	40000400 	.word	0x40000400
 8004b80:	40000800 	.word	0x40000800
 8004b84:	40000c00 	.word	0x40000c00
 8004b88:	40013400 	.word	0x40013400
 8004b8c:	40014000 	.word	0x40014000
 8004b90:	00010007 	.word	0x00010007

08004b94 <HAL_TIM_Base_Stop>:
>>>>>>> ModeSelect_v2
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
=======
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
>>>>>>> ModeSelect_v2
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
<<<<<<< HEAD
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	6a1a      	ldr	r2, [r3, #32]
 8005b16:	f241 1311 	movw	r3, #4369	; 0x1111
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d10f      	bne.n	8005b40 <HAL_TIM_Base_Stop+0x38>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	6a1a      	ldr	r2, [r3, #32]
 8005b26:	f240 4344 	movw	r3, #1092	; 0x444
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d107      	bne.n	8005b40 <HAL_TIM_Base_Stop+0x38>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f022 0201 	bic.w	r2, r2, #1
 8005b3e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	370c      	adds	r7, #12
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr

08005b56 <HAL_TIM_PWM_Init>:
=======
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6a1a      	ldr	r2, [r3, #32]
 8004ba2:	f241 1311 	movw	r3, #4369	; 0x1111
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d10f      	bne.n	8004bcc <HAL_TIM_Base_Stop+0x38>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6a1a      	ldr	r2, [r3, #32]
 8004bb2:	f240 4344 	movw	r3, #1092	; 0x444
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d107      	bne.n	8004bcc <HAL_TIM_Base_Stop+0x38>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f022 0201 	bic.w	r2, r2, #1
 8004bca:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	370c      	adds	r7, #12
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr

08004be2 <HAL_TIM_PWM_Init>:
>>>>>>> ModeSelect_v2
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b082      	sub	sp, #8
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d101      	bne.n	8005b68 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e049      	b.n	8005bfc <HAL_TIM_PWM_Init+0xa6>
=======
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b082      	sub	sp, #8
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d101      	bne.n	8004bf4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e049      	b.n	8004c88 <HAL_TIM_PWM_Init+0xa6>
>>>>>>> ModeSelect_v2
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d106      	bne.n	8005b82 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d106      	bne.n	8004c0e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> ModeSelect_v2
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
<<<<<<< HEAD
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 f841 	bl	8005c04 <HAL_TIM_PWM_MspInit>
=======
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 f841 	bl	8004c90 <HAL_TIM_PWM_MspInit>
>>>>>>> ModeSelect_v2
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2202      	movs	r2, #2
 8005b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	3304      	adds	r3, #4
 8005b92:	4619      	mov	r1, r3
 8005b94:	4610      	mov	r0, r2
 8005b96:	f000 fd01 	bl	800659c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2201      	movs	r2, #1
 8005bae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2201      	movs	r2, #1
 8005be6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2201      	movs	r2, #1
 8005bee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3708      	adds	r7, #8
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <HAL_TIM_PWM_MspInit>:
=======
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2202      	movs	r2, #2
 8004c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	3304      	adds	r3, #4
 8004c1e:	4619      	mov	r1, r3
 8004c20:	4610      	mov	r0, r2
 8004c22:	f000 fd01 	bl	8005628 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2201      	movs	r2, #1
 8004c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2201      	movs	r2, #1
 8004c52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3708      	adds	r7, #8
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <HAL_TIM_PWM_MspInit>:
>>>>>>> ModeSelect_v2
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
=======
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
>>>>>>> ModeSelect_v2
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
<<<<<<< HEAD
 8005c0c:	bf00      	nop
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <HAL_TIM_PWM_Start>:
=======
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <HAL_TIM_PWM_Start>:
>>>>>>> ModeSelect_v2
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< HEAD
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
=======
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
>>>>>>> ModeSelect_v2

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
<<<<<<< HEAD
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d109      	bne.n	8005c3c <HAL_TIM_PWM_Start+0x24>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	bf14      	ite	ne
 8005c34:	2301      	movne	r3, #1
 8005c36:	2300      	moveq	r3, #0
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	e03c      	b.n	8005cb6 <HAL_TIM_PWM_Start+0x9e>
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	2b04      	cmp	r3, #4
 8005c40:	d109      	bne.n	8005c56 <HAL_TIM_PWM_Start+0x3e>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	bf14      	ite	ne
 8005c4e:	2301      	movne	r3, #1
 8005c50:	2300      	moveq	r3, #0
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	e02f      	b.n	8005cb6 <HAL_TIM_PWM_Start+0x9e>
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	2b08      	cmp	r3, #8
 8005c5a:	d109      	bne.n	8005c70 <HAL_TIM_PWM_Start+0x58>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	bf14      	ite	ne
 8005c68:	2301      	movne	r3, #1
 8005c6a:	2300      	moveq	r3, #0
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	e022      	b.n	8005cb6 <HAL_TIM_PWM_Start+0x9e>
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	2b0c      	cmp	r3, #12
 8005c74:	d109      	bne.n	8005c8a <HAL_TIM_PWM_Start+0x72>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	bf14      	ite	ne
 8005c82:	2301      	movne	r3, #1
 8005c84:	2300      	moveq	r3, #0
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	e015      	b.n	8005cb6 <HAL_TIM_PWM_Start+0x9e>
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	2b10      	cmp	r3, #16
 8005c8e:	d109      	bne.n	8005ca4 <HAL_TIM_PWM_Start+0x8c>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	bf14      	ite	ne
 8005c9c:	2301      	movne	r3, #1
 8005c9e:	2300      	moveq	r3, #0
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	e008      	b.n	8005cb6 <HAL_TIM_PWM_Start+0x9e>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	bf14      	ite	ne
 8005cb0:	2301      	movne	r3, #1
 8005cb2:	2300      	moveq	r3, #0
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d001      	beq.n	8005cbe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e09c      	b.n	8005df8 <HAL_TIM_PWM_Start+0x1e0>
=======
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d109      	bne.n	8004cc8 <HAL_TIM_PWM_Start+0x24>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	bf14      	ite	ne
 8004cc0:	2301      	movne	r3, #1
 8004cc2:	2300      	moveq	r3, #0
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	e03c      	b.n	8004d42 <HAL_TIM_PWM_Start+0x9e>
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	2b04      	cmp	r3, #4
 8004ccc:	d109      	bne.n	8004ce2 <HAL_TIM_PWM_Start+0x3e>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	bf14      	ite	ne
 8004cda:	2301      	movne	r3, #1
 8004cdc:	2300      	moveq	r3, #0
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	e02f      	b.n	8004d42 <HAL_TIM_PWM_Start+0x9e>
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	2b08      	cmp	r3, #8
 8004ce6:	d109      	bne.n	8004cfc <HAL_TIM_PWM_Start+0x58>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	bf14      	ite	ne
 8004cf4:	2301      	movne	r3, #1
 8004cf6:	2300      	moveq	r3, #0
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	e022      	b.n	8004d42 <HAL_TIM_PWM_Start+0x9e>
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	2b0c      	cmp	r3, #12
 8004d00:	d109      	bne.n	8004d16 <HAL_TIM_PWM_Start+0x72>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	bf14      	ite	ne
 8004d0e:	2301      	movne	r3, #1
 8004d10:	2300      	moveq	r3, #0
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	e015      	b.n	8004d42 <HAL_TIM_PWM_Start+0x9e>
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	2b10      	cmp	r3, #16
 8004d1a:	d109      	bne.n	8004d30 <HAL_TIM_PWM_Start+0x8c>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	bf14      	ite	ne
 8004d28:	2301      	movne	r3, #1
 8004d2a:	2300      	moveq	r3, #0
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	e008      	b.n	8004d42 <HAL_TIM_PWM_Start+0x9e>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	bf14      	ite	ne
 8004d3c:	2301      	movne	r3, #1
 8004d3e:	2300      	moveq	r3, #0
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d001      	beq.n	8004d4a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e09c      	b.n	8004e84 <HAL_TIM_PWM_Start+0x1e0>
>>>>>>> ModeSelect_v2
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
<<<<<<< HEAD
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d104      	bne.n	8005cce <HAL_TIM_PWM_Start+0xb6>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2202      	movs	r2, #2
 8005cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ccc:	e023      	b.n	8005d16 <HAL_TIM_PWM_Start+0xfe>
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	2b04      	cmp	r3, #4
 8005cd2:	d104      	bne.n	8005cde <HAL_TIM_PWM_Start+0xc6>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2202      	movs	r2, #2
 8005cd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cdc:	e01b      	b.n	8005d16 <HAL_TIM_PWM_Start+0xfe>
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	2b08      	cmp	r3, #8
 8005ce2:	d104      	bne.n	8005cee <HAL_TIM_PWM_Start+0xd6>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cec:	e013      	b.n	8005d16 <HAL_TIM_PWM_Start+0xfe>
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	2b0c      	cmp	r3, #12
 8005cf2:	d104      	bne.n	8005cfe <HAL_TIM_PWM_Start+0xe6>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005cfc:	e00b      	b.n	8005d16 <HAL_TIM_PWM_Start+0xfe>
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	2b10      	cmp	r3, #16
 8005d02:	d104      	bne.n	8005d0e <HAL_TIM_PWM_Start+0xf6>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2202      	movs	r2, #2
 8005d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d0c:	e003      	b.n	8005d16 <HAL_TIM_PWM_Start+0xfe>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2202      	movs	r2, #2
 8005d12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	6839      	ldr	r1, [r7, #0]
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f001 f846 	bl	8006db0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a35      	ldr	r2, [pc, #212]	; (8005e00 <HAL_TIM_PWM_Start+0x1e8>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d013      	beq.n	8005d56 <HAL_TIM_PWM_Start+0x13e>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a34      	ldr	r2, [pc, #208]	; (8005e04 <HAL_TIM_PWM_Start+0x1ec>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d00e      	beq.n	8005d56 <HAL_TIM_PWM_Start+0x13e>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a32      	ldr	r2, [pc, #200]	; (8005e08 <HAL_TIM_PWM_Start+0x1f0>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d009      	beq.n	8005d56 <HAL_TIM_PWM_Start+0x13e>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a31      	ldr	r2, [pc, #196]	; (8005e0c <HAL_TIM_PWM_Start+0x1f4>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d004      	beq.n	8005d56 <HAL_TIM_PWM_Start+0x13e>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a2f      	ldr	r2, [pc, #188]	; (8005e10 <HAL_TIM_PWM_Start+0x1f8>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d101      	bne.n	8005d5a <HAL_TIM_PWM_Start+0x142>
 8005d56:	2301      	movs	r3, #1
 8005d58:	e000      	b.n	8005d5c <HAL_TIM_PWM_Start+0x144>
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d007      	beq.n	8005d70 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d6e:	645a      	str	r2, [r3, #68]	; 0x44
=======
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d104      	bne.n	8004d5a <HAL_TIM_PWM_Start+0xb6>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2202      	movs	r2, #2
 8004d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d58:	e023      	b.n	8004da2 <HAL_TIM_PWM_Start+0xfe>
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	2b04      	cmp	r3, #4
 8004d5e:	d104      	bne.n	8004d6a <HAL_TIM_PWM_Start+0xc6>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2202      	movs	r2, #2
 8004d64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d68:	e01b      	b.n	8004da2 <HAL_TIM_PWM_Start+0xfe>
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	2b08      	cmp	r3, #8
 8004d6e:	d104      	bne.n	8004d7a <HAL_TIM_PWM_Start+0xd6>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2202      	movs	r2, #2
 8004d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d78:	e013      	b.n	8004da2 <HAL_TIM_PWM_Start+0xfe>
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	2b0c      	cmp	r3, #12
 8004d7e:	d104      	bne.n	8004d8a <HAL_TIM_PWM_Start+0xe6>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2202      	movs	r2, #2
 8004d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d88:	e00b      	b.n	8004da2 <HAL_TIM_PWM_Start+0xfe>
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	2b10      	cmp	r3, #16
 8004d8e:	d104      	bne.n	8004d9a <HAL_TIM_PWM_Start+0xf6>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2202      	movs	r2, #2
 8004d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d98:	e003      	b.n	8004da2 <HAL_TIM_PWM_Start+0xfe>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2202      	movs	r2, #2
 8004d9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2201      	movs	r2, #1
 8004da8:	6839      	ldr	r1, [r7, #0]
 8004daa:	4618      	mov	r0, r3
 8004dac:	f001 f846 	bl	8005e3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a35      	ldr	r2, [pc, #212]	; (8004e8c <HAL_TIM_PWM_Start+0x1e8>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d013      	beq.n	8004de2 <HAL_TIM_PWM_Start+0x13e>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a34      	ldr	r2, [pc, #208]	; (8004e90 <HAL_TIM_PWM_Start+0x1ec>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d00e      	beq.n	8004de2 <HAL_TIM_PWM_Start+0x13e>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a32      	ldr	r2, [pc, #200]	; (8004e94 <HAL_TIM_PWM_Start+0x1f0>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d009      	beq.n	8004de2 <HAL_TIM_PWM_Start+0x13e>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a31      	ldr	r2, [pc, #196]	; (8004e98 <HAL_TIM_PWM_Start+0x1f4>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d004      	beq.n	8004de2 <HAL_TIM_PWM_Start+0x13e>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a2f      	ldr	r2, [pc, #188]	; (8004e9c <HAL_TIM_PWM_Start+0x1f8>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d101      	bne.n	8004de6 <HAL_TIM_PWM_Start+0x142>
 8004de2:	2301      	movs	r3, #1
 8004de4:	e000      	b.n	8004de8 <HAL_TIM_PWM_Start+0x144>
 8004de6:	2300      	movs	r3, #0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d007      	beq.n	8004dfc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004dfa:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> ModeSelect_v2
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
<<<<<<< HEAD
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a22      	ldr	r2, [pc, #136]	; (8005e00 <HAL_TIM_PWM_Start+0x1e8>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d01d      	beq.n	8005db6 <HAL_TIM_PWM_Start+0x19e>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d82:	d018      	beq.n	8005db6 <HAL_TIM_PWM_Start+0x19e>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a22      	ldr	r2, [pc, #136]	; (8005e14 <HAL_TIM_PWM_Start+0x1fc>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d013      	beq.n	8005db6 <HAL_TIM_PWM_Start+0x19e>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a21      	ldr	r2, [pc, #132]	; (8005e18 <HAL_TIM_PWM_Start+0x200>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d00e      	beq.n	8005db6 <HAL_TIM_PWM_Start+0x19e>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a1f      	ldr	r2, [pc, #124]	; (8005e1c <HAL_TIM_PWM_Start+0x204>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d009      	beq.n	8005db6 <HAL_TIM_PWM_Start+0x19e>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a17      	ldr	r2, [pc, #92]	; (8005e04 <HAL_TIM_PWM_Start+0x1ec>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d004      	beq.n	8005db6 <HAL_TIM_PWM_Start+0x19e>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a15      	ldr	r2, [pc, #84]	; (8005e08 <HAL_TIM_PWM_Start+0x1f0>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d115      	bne.n	8005de2 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	689a      	ldr	r2, [r3, #8]
 8005dbc:	4b18      	ldr	r3, [pc, #96]	; (8005e20 <HAL_TIM_PWM_Start+0x208>)
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2b06      	cmp	r3, #6
 8005dc6:	d015      	beq.n	8005df4 <HAL_TIM_PWM_Start+0x1dc>
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dce:	d011      	beq.n	8005df4 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f042 0201 	orr.w	r2, r2, #1
 8005dde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005de0:	e008      	b.n	8005df4 <HAL_TIM_PWM_Start+0x1dc>
=======
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a22      	ldr	r2, [pc, #136]	; (8004e8c <HAL_TIM_PWM_Start+0x1e8>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d01d      	beq.n	8004e42 <HAL_TIM_PWM_Start+0x19e>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e0e:	d018      	beq.n	8004e42 <HAL_TIM_PWM_Start+0x19e>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a22      	ldr	r2, [pc, #136]	; (8004ea0 <HAL_TIM_PWM_Start+0x1fc>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d013      	beq.n	8004e42 <HAL_TIM_PWM_Start+0x19e>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a21      	ldr	r2, [pc, #132]	; (8004ea4 <HAL_TIM_PWM_Start+0x200>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d00e      	beq.n	8004e42 <HAL_TIM_PWM_Start+0x19e>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a1f      	ldr	r2, [pc, #124]	; (8004ea8 <HAL_TIM_PWM_Start+0x204>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d009      	beq.n	8004e42 <HAL_TIM_PWM_Start+0x19e>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a17      	ldr	r2, [pc, #92]	; (8004e90 <HAL_TIM_PWM_Start+0x1ec>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d004      	beq.n	8004e42 <HAL_TIM_PWM_Start+0x19e>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a15      	ldr	r2, [pc, #84]	; (8004e94 <HAL_TIM_PWM_Start+0x1f0>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d115      	bne.n	8004e6e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	689a      	ldr	r2, [r3, #8]
 8004e48:	4b18      	ldr	r3, [pc, #96]	; (8004eac <HAL_TIM_PWM_Start+0x208>)
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2b06      	cmp	r3, #6
 8004e52:	d015      	beq.n	8004e80 <HAL_TIM_PWM_Start+0x1dc>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e5a:	d011      	beq.n	8004e80 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f042 0201 	orr.w	r2, r2, #1
 8004e6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e6c:	e008      	b.n	8004e80 <HAL_TIM_PWM_Start+0x1dc>
>>>>>>> ModeSelect_v2
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f042 0201 	orr.w	r2, r2, #1
 8005df0:	601a      	str	r2, [r3, #0]
 8005df2:	e000      	b.n	8005df6 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005df4:	bf00      	nop
=======
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f042 0201 	orr.w	r2, r2, #1
 8004e7c:	601a      	str	r2, [r3, #0]
 8004e7e:	e000      	b.n	8004e82 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e80:	bf00      	nop
>>>>>>> ModeSelect_v2
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3710      	adds	r7, #16
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	40012c00 	.word	0x40012c00
 8005e04:	40013400 	.word	0x40013400
 8005e08:	40014000 	.word	0x40014000
 8005e0c:	40014400 	.word	0x40014400
 8005e10:	40014800 	.word	0x40014800
 8005e14:	40000400 	.word	0x40000400
 8005e18:	40000800 	.word	0x40000800
 8005e1c:	40000c00 	.word	0x40000c00
 8005e20:	00010007 	.word	0x00010007

08005e24 <HAL_TIM_PWM_Stop>:
=======
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3710      	adds	r7, #16
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	40012c00 	.word	0x40012c00
 8004e90:	40013400 	.word	0x40013400
 8004e94:	40014000 	.word	0x40014000
 8004e98:	40014400 	.word	0x40014400
 8004e9c:	40014800 	.word	0x40014800
 8004ea0:	40000400 	.word	0x40000400
 8004ea4:	40000800 	.word	0x40000800
 8004ea8:	40000c00 	.word	0x40000c00
 8004eac:	00010007 	.word	0x00010007

08004eb0 <HAL_TIM_PWM_Stop>:
>>>>>>> ModeSelect_v2
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< HEAD
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b082      	sub	sp, #8
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
=======
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
>>>>>>> ModeSelect_v2
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
<<<<<<< HEAD
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2200      	movs	r2, #0
 8005e34:	6839      	ldr	r1, [r7, #0]
 8005e36:	4618      	mov	r0, r3
 8005e38:	f000 ffba 	bl	8006db0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a3e      	ldr	r2, [pc, #248]	; (8005f3c <HAL_TIM_PWM_Stop+0x118>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d013      	beq.n	8005e6e <HAL_TIM_PWM_Stop+0x4a>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a3d      	ldr	r2, [pc, #244]	; (8005f40 <HAL_TIM_PWM_Stop+0x11c>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d00e      	beq.n	8005e6e <HAL_TIM_PWM_Stop+0x4a>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a3b      	ldr	r2, [pc, #236]	; (8005f44 <HAL_TIM_PWM_Stop+0x120>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d009      	beq.n	8005e6e <HAL_TIM_PWM_Stop+0x4a>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a3a      	ldr	r2, [pc, #232]	; (8005f48 <HAL_TIM_PWM_Stop+0x124>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d004      	beq.n	8005e6e <HAL_TIM_PWM_Stop+0x4a>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a38      	ldr	r2, [pc, #224]	; (8005f4c <HAL_TIM_PWM_Stop+0x128>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d101      	bne.n	8005e72 <HAL_TIM_PWM_Stop+0x4e>
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e000      	b.n	8005e74 <HAL_TIM_PWM_Stop+0x50>
 8005e72:	2300      	movs	r3, #0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d017      	beq.n	8005ea8 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	6a1a      	ldr	r2, [r3, #32]
 8005e7e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005e82:	4013      	ands	r3, r2
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d10f      	bne.n	8005ea8 <HAL_TIM_PWM_Stop+0x84>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	6a1a      	ldr	r2, [r3, #32]
 8005e8e:	f240 4344 	movw	r3, #1092	; 0x444
 8005e92:	4013      	ands	r3, r2
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d107      	bne.n	8005ea8 <HAL_TIM_PWM_Stop+0x84>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ea6:	645a      	str	r2, [r3, #68]	; 0x44
=======
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	6839      	ldr	r1, [r7, #0]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f000 ffba 	bl	8005e3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a3e      	ldr	r2, [pc, #248]	; (8004fc8 <HAL_TIM_PWM_Stop+0x118>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d013      	beq.n	8004efa <HAL_TIM_PWM_Stop+0x4a>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a3d      	ldr	r2, [pc, #244]	; (8004fcc <HAL_TIM_PWM_Stop+0x11c>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d00e      	beq.n	8004efa <HAL_TIM_PWM_Stop+0x4a>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a3b      	ldr	r2, [pc, #236]	; (8004fd0 <HAL_TIM_PWM_Stop+0x120>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d009      	beq.n	8004efa <HAL_TIM_PWM_Stop+0x4a>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a3a      	ldr	r2, [pc, #232]	; (8004fd4 <HAL_TIM_PWM_Stop+0x124>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d004      	beq.n	8004efa <HAL_TIM_PWM_Stop+0x4a>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a38      	ldr	r2, [pc, #224]	; (8004fd8 <HAL_TIM_PWM_Stop+0x128>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d101      	bne.n	8004efe <HAL_TIM_PWM_Stop+0x4e>
 8004efa:	2301      	movs	r3, #1
 8004efc:	e000      	b.n	8004f00 <HAL_TIM_PWM_Stop+0x50>
 8004efe:	2300      	movs	r3, #0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d017      	beq.n	8004f34 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6a1a      	ldr	r2, [r3, #32]
 8004f0a:	f241 1311 	movw	r3, #4369	; 0x1111
 8004f0e:	4013      	ands	r3, r2
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d10f      	bne.n	8004f34 <HAL_TIM_PWM_Stop+0x84>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	6a1a      	ldr	r2, [r3, #32]
 8004f1a:	f240 4344 	movw	r3, #1092	; 0x444
 8004f1e:	4013      	ands	r3, r2
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d107      	bne.n	8004f34 <HAL_TIM_PWM_Stop+0x84>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f32:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> ModeSelect_v2
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
<<<<<<< HEAD
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	6a1a      	ldr	r2, [r3, #32]
 8005eae:	f241 1311 	movw	r3, #4369	; 0x1111
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d10f      	bne.n	8005ed8 <HAL_TIM_PWM_Stop+0xb4>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	6a1a      	ldr	r2, [r3, #32]
 8005ebe:	f240 4344 	movw	r3, #1092	; 0x444
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d107      	bne.n	8005ed8 <HAL_TIM_PWM_Stop+0xb4>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f022 0201 	bic.w	r2, r2, #1
 8005ed6:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d104      	bne.n	8005ee8 <HAL_TIM_PWM_Stop+0xc4>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ee6:	e023      	b.n	8005f30 <HAL_TIM_PWM_Stop+0x10c>
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	2b04      	cmp	r3, #4
 8005eec:	d104      	bne.n	8005ef8 <HAL_TIM_PWM_Stop+0xd4>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ef6:	e01b      	b.n	8005f30 <HAL_TIM_PWM_Stop+0x10c>
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	2b08      	cmp	r3, #8
 8005efc:	d104      	bne.n	8005f08 <HAL_TIM_PWM_Stop+0xe4>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2201      	movs	r2, #1
 8005f02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f06:	e013      	b.n	8005f30 <HAL_TIM_PWM_Stop+0x10c>
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	2b0c      	cmp	r3, #12
 8005f0c:	d104      	bne.n	8005f18 <HAL_TIM_PWM_Stop+0xf4>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2201      	movs	r2, #1
 8005f12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f16:	e00b      	b.n	8005f30 <HAL_TIM_PWM_Stop+0x10c>
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	2b10      	cmp	r3, #16
 8005f1c:	d104      	bne.n	8005f28 <HAL_TIM_PWM_Stop+0x104>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2201      	movs	r2, #1
 8005f22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f26:	e003      	b.n	8005f30 <HAL_TIM_PWM_Stop+0x10c>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3708      	adds	r7, #8
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	40012c00 	.word	0x40012c00
 8005f40:	40013400 	.word	0x40013400
 8005f44:	40014000 	.word	0x40014000
 8005f48:	40014400 	.word	0x40014400
 8005f4c:	40014800 	.word	0x40014800

08005f50 <HAL_TIM_IRQHandler>:
=======
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	6a1a      	ldr	r2, [r3, #32]
 8004f3a:	f241 1311 	movw	r3, #4369	; 0x1111
 8004f3e:	4013      	ands	r3, r2
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d10f      	bne.n	8004f64 <HAL_TIM_PWM_Stop+0xb4>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	6a1a      	ldr	r2, [r3, #32]
 8004f4a:	f240 4344 	movw	r3, #1092	; 0x444
 8004f4e:	4013      	ands	r3, r2
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d107      	bne.n	8004f64 <HAL_TIM_PWM_Stop+0xb4>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f022 0201 	bic.w	r2, r2, #1
 8004f62:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d104      	bne.n	8004f74 <HAL_TIM_PWM_Stop+0xc4>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f72:	e023      	b.n	8004fbc <HAL_TIM_PWM_Stop+0x10c>
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	2b04      	cmp	r3, #4
 8004f78:	d104      	bne.n	8004f84 <HAL_TIM_PWM_Stop+0xd4>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f82:	e01b      	b.n	8004fbc <HAL_TIM_PWM_Stop+0x10c>
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	2b08      	cmp	r3, #8
 8004f88:	d104      	bne.n	8004f94 <HAL_TIM_PWM_Stop+0xe4>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f92:	e013      	b.n	8004fbc <HAL_TIM_PWM_Stop+0x10c>
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	2b0c      	cmp	r3, #12
 8004f98:	d104      	bne.n	8004fa4 <HAL_TIM_PWM_Stop+0xf4>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fa2:	e00b      	b.n	8004fbc <HAL_TIM_PWM_Stop+0x10c>
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	2b10      	cmp	r3, #16
 8004fa8:	d104      	bne.n	8004fb4 <HAL_TIM_PWM_Stop+0x104>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2201      	movs	r2, #1
 8004fae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fb2:	e003      	b.n	8004fbc <HAL_TIM_PWM_Stop+0x10c>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3708      	adds	r7, #8
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	40012c00 	.word	0x40012c00
 8004fcc:	40013400 	.word	0x40013400
 8004fd0:	40014000 	.word	0x40014000
 8004fd4:	40014400 	.word	0x40014400
 8004fd8:	40014800 	.word	0x40014800

08004fdc <HAL_TIM_IRQHandler>:
>>>>>>> ModeSelect_v2
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	f003 0302 	and.w	r3, r3, #2
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	d122      	bne.n	8005fac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	f003 0302 	and.w	r3, r3, #2
 8005f70:	2b02      	cmp	r3, #2
 8005f72:	d11b      	bne.n	8005fac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f06f 0202 	mvn.w	r2, #2
 8005f7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2201      	movs	r2, #1
 8005f82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	699b      	ldr	r3, [r3, #24]
 8005f8a:	f003 0303 	and.w	r3, r3, #3
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d003      	beq.n	8005f9a <HAL_TIM_IRQHandler+0x4a>
=======
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	f003 0302 	and.w	r3, r3, #2
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d122      	bne.n	8005038 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	f003 0302 	and.w	r3, r3, #2
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d11b      	bne.n	8005038 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f06f 0202 	mvn.w	r2, #2
 8005008:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2201      	movs	r2, #1
 800500e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	f003 0303 	and.w	r3, r3, #3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d003      	beq.n	8005026 <HAL_TIM_IRQHandler+0x4a>
>>>>>>> ModeSelect_v2
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 fae3 	bl	800655e <HAL_TIM_IC_CaptureCallback>
 8005f98:	e005      	b.n	8005fa6 <HAL_TIM_IRQHandler+0x56>
=======
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 fae3 	bl	80055ea <HAL_TIM_IC_CaptureCallback>
 8005024:	e005      	b.n	8005032 <HAL_TIM_IRQHandler+0x56>
>>>>>>> ModeSelect_v2
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 fad5 	bl	800654a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 fae6 	bl	8006572 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	771a      	strb	r2, [r3, #28]
=======
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 fad5 	bl	80055d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f000 fae6 	bl	80055fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	771a      	strb	r2, [r3, #28]
>>>>>>> ModeSelect_v2
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
<<<<<<< HEAD
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	f003 0304 	and.w	r3, r3, #4
 8005fb6:	2b04      	cmp	r3, #4
 8005fb8:	d122      	bne.n	8006000 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	f003 0304 	and.w	r3, r3, #4
 8005fc4:	2b04      	cmp	r3, #4
 8005fc6:	d11b      	bne.n	8006000 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f06f 0204 	mvn.w	r2, #4
 8005fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2202      	movs	r2, #2
 8005fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	699b      	ldr	r3, [r3, #24]
 8005fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d003      	beq.n	8005fee <HAL_TIM_IRQHandler+0x9e>
=======
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	f003 0304 	and.w	r3, r3, #4
 8005042:	2b04      	cmp	r3, #4
 8005044:	d122      	bne.n	800508c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	f003 0304 	and.w	r3, r3, #4
 8005050:	2b04      	cmp	r3, #4
 8005052:	d11b      	bne.n	800508c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f06f 0204 	mvn.w	r2, #4
 800505c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2202      	movs	r2, #2
 8005062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800506e:	2b00      	cmp	r3, #0
 8005070:	d003      	beq.n	800507a <HAL_TIM_IRQHandler+0x9e>
>>>>>>> ModeSelect_v2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 fab9 	bl	800655e <HAL_TIM_IC_CaptureCallback>
 8005fec:	e005      	b.n	8005ffa <HAL_TIM_IRQHandler+0xaa>
=======
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 fab9 	bl	80055ea <HAL_TIM_IC_CaptureCallback>
 8005078:	e005      	b.n	8005086 <HAL_TIM_IRQHandler+0xaa>
>>>>>>> ModeSelect_v2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 faab 	bl	800654a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f000 fabc 	bl	8006572 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	771a      	strb	r2, [r3, #28]
=======
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 faab 	bl	80055d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 fabc 	bl	80055fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	771a      	strb	r2, [r3, #28]
>>>>>>> ModeSelect_v2
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
<<<<<<< HEAD
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	f003 0308 	and.w	r3, r3, #8
 800600a:	2b08      	cmp	r3, #8
 800600c:	d122      	bne.n	8006054 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	f003 0308 	and.w	r3, r3, #8
 8006018:	2b08      	cmp	r3, #8
 800601a:	d11b      	bne.n	8006054 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f06f 0208 	mvn.w	r2, #8
 8006024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2204      	movs	r2, #4
 800602a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	69db      	ldr	r3, [r3, #28]
 8006032:	f003 0303 	and.w	r3, r3, #3
 8006036:	2b00      	cmp	r3, #0
 8006038:	d003      	beq.n	8006042 <HAL_TIM_IRQHandler+0xf2>
=======
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	f003 0308 	and.w	r3, r3, #8
 8005096:	2b08      	cmp	r3, #8
 8005098:	d122      	bne.n	80050e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	f003 0308 	and.w	r3, r3, #8
 80050a4:	2b08      	cmp	r3, #8
 80050a6:	d11b      	bne.n	80050e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f06f 0208 	mvn.w	r2, #8
 80050b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2204      	movs	r2, #4
 80050b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	69db      	ldr	r3, [r3, #28]
 80050be:	f003 0303 	and.w	r3, r3, #3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d003      	beq.n	80050ce <HAL_TIM_IRQHandler+0xf2>
>>>>>>> ModeSelect_v2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 fa8f 	bl	800655e <HAL_TIM_IC_CaptureCallback>
 8006040:	e005      	b.n	800604e <HAL_TIM_IRQHandler+0xfe>
=======
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 fa8f 	bl	80055ea <HAL_TIM_IC_CaptureCallback>
 80050cc:	e005      	b.n	80050da <HAL_TIM_IRQHandler+0xfe>
>>>>>>> ModeSelect_v2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 fa81 	bl	800654a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 fa92 	bl	8006572 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	771a      	strb	r2, [r3, #28]
=======
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 fa81 	bl	80055d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f000 fa92 	bl	80055fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	771a      	strb	r2, [r3, #28]
>>>>>>> ModeSelect_v2
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
<<<<<<< HEAD
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	f003 0310 	and.w	r3, r3, #16
 800605e:	2b10      	cmp	r3, #16
 8006060:	d122      	bne.n	80060a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	f003 0310 	and.w	r3, r3, #16
 800606c:	2b10      	cmp	r3, #16
 800606e:	d11b      	bne.n	80060a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f06f 0210 	mvn.w	r2, #16
 8006078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2208      	movs	r2, #8
 800607e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	69db      	ldr	r3, [r3, #28]
 8006086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800608a:	2b00      	cmp	r3, #0
 800608c:	d003      	beq.n	8006096 <HAL_TIM_IRQHandler+0x146>
=======
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	f003 0310 	and.w	r3, r3, #16
 80050ea:	2b10      	cmp	r3, #16
 80050ec:	d122      	bne.n	8005134 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	f003 0310 	and.w	r3, r3, #16
 80050f8:	2b10      	cmp	r3, #16
 80050fa:	d11b      	bne.n	8005134 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f06f 0210 	mvn.w	r2, #16
 8005104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2208      	movs	r2, #8
 800510a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	69db      	ldr	r3, [r3, #28]
 8005112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005116:	2b00      	cmp	r3, #0
 8005118:	d003      	beq.n	8005122 <HAL_TIM_IRQHandler+0x146>
>>>>>>> ModeSelect_v2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 fa65 	bl	800655e <HAL_TIM_IC_CaptureCallback>
 8006094:	e005      	b.n	80060a2 <HAL_TIM_IRQHandler+0x152>
=======
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 fa65 	bl	80055ea <HAL_TIM_IC_CaptureCallback>
 8005120:	e005      	b.n	800512e <HAL_TIM_IRQHandler+0x152>
>>>>>>> ModeSelect_v2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 fa57 	bl	800654a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 fa68 	bl	8006572 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	771a      	strb	r2, [r3, #28]
=======
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 fa57 	bl	80055d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 fa68 	bl	80055fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	771a      	strb	r2, [r3, #28]
>>>>>>> ModeSelect_v2
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
<<<<<<< HEAD
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	f003 0301 	and.w	r3, r3, #1
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d10e      	bne.n	80060d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	f003 0301 	and.w	r3, r3, #1
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d107      	bne.n	80060d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f06f 0201 	mvn.w	r2, #1
 80060cc:	611a      	str	r2, [r3, #16]
=======
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	f003 0301 	and.w	r3, r3, #1
 800513e:	2b01      	cmp	r3, #1
 8005140:	d10e      	bne.n	8005160 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	f003 0301 	and.w	r3, r3, #1
 800514c:	2b01      	cmp	r3, #1
 800514e:	d107      	bne.n	8005160 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f06f 0201 	mvn.w	r2, #1
 8005158:	611a      	str	r2, [r3, #16]
>>>>>>> ModeSelect_v2
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< HEAD
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f7fb fdc0 	bl	8001c54 <HAL_TIM_PeriodElapsedCallback>
=======
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f7fc f816 	bl	800118c <HAL_TIM_PeriodElapsedCallback>
>>>>>>> ModeSelect_v2
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
<<<<<<< HEAD
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060de:	2b80      	cmp	r3, #128	; 0x80
 80060e0:	d10e      	bne.n	8006100 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ec:	2b80      	cmp	r3, #128	; 0x80
 80060ee:	d107      	bne.n	8006100 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80060f8:	611a      	str	r2, [r3, #16]
=======
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800516a:	2b80      	cmp	r3, #128	; 0x80
 800516c:	d10e      	bne.n	800518c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005178:	2b80      	cmp	r3, #128	; 0x80
 800517a:	d107      	bne.n	800518c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005184:	611a      	str	r2, [r3, #16]
>>>>>>> ModeSelect_v2
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< HEAD
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 ff10 	bl	8006f20 <HAL_TIMEx_BreakCallback>
=======
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 ff10 	bl	8005fac <HAL_TIMEx_BreakCallback>
>>>>>>> ModeSelect_v2
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
<<<<<<< HEAD
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800610a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800610e:	d10e      	bne.n	800612e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800611a:	2b80      	cmp	r3, #128	; 0x80
 800611c:	d107      	bne.n	800612e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006126:	611a      	str	r2, [r3, #16]
=======
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005196:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800519a:	d10e      	bne.n	80051ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a6:	2b80      	cmp	r3, #128	; 0x80
 80051a8:	d107      	bne.n	80051ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80051b2:	611a      	str	r2, [r3, #16]
>>>>>>> ModeSelect_v2
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
<<<<<<< HEAD
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 ff03 	bl	8006f34 <HAL_TIMEx_Break2Callback>
=======
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 ff03 	bl	8005fc0 <HAL_TIMEx_Break2Callback>
>>>>>>> ModeSelect_v2
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
<<<<<<< HEAD
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006138:	2b40      	cmp	r3, #64	; 0x40
 800613a:	d10e      	bne.n	800615a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006146:	2b40      	cmp	r3, #64	; 0x40
 8006148:	d107      	bne.n	800615a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006152:	611a      	str	r2, [r3, #16]
=======
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c4:	2b40      	cmp	r3, #64	; 0x40
 80051c6:	d10e      	bne.n	80051e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d2:	2b40      	cmp	r3, #64	; 0x40
 80051d4:	d107      	bne.n	80051e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051de:	611a      	str	r2, [r3, #16]
>>>>>>> ModeSelect_v2
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< HEAD
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 fa16 	bl	8006586 <HAL_TIM_TriggerCallback>
=======
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 fa16 	bl	8005612 <HAL_TIM_TriggerCallback>
>>>>>>> ModeSelect_v2
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
<<<<<<< HEAD
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	f003 0320 	and.w	r3, r3, #32
 8006164:	2b20      	cmp	r3, #32
 8006166:	d10e      	bne.n	8006186 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	f003 0320 	and.w	r3, r3, #32
 8006172:	2b20      	cmp	r3, #32
 8006174:	d107      	bne.n	8006186 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f06f 0220 	mvn.w	r2, #32
 800617e:	611a      	str	r2, [r3, #16]
=======
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	f003 0320 	and.w	r3, r3, #32
 80051f0:	2b20      	cmp	r3, #32
 80051f2:	d10e      	bne.n	8005212 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	f003 0320 	and.w	r3, r3, #32
 80051fe:	2b20      	cmp	r3, #32
 8005200:	d107      	bne.n	8005212 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f06f 0220 	mvn.w	r2, #32
 800520a:	611a      	str	r2, [r3, #16]
>>>>>>> ModeSelect_v2
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< HEAD
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 fec3 	bl	8006f0c <HAL_TIMEx_CommutCallback>
=======
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 fec3 	bl	8005f98 <HAL_TIMEx_CommutCallback>
>>>>>>> ModeSelect_v2
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< HEAD
 8006186:	bf00      	nop
 8006188:	3708      	adds	r7, #8
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
	...

08006190 <HAL_TIM_PWM_ConfigChannel>:
=======
 8005212:	bf00      	nop
 8005214:	3708      	adds	r7, #8
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
	...

0800521c <HAL_TIM_PWM_ConfigChannel>:
>>>>>>> ModeSelect_v2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
<<<<<<< HEAD
 8006190:	b580      	push	{r7, lr}
 8006192:	b086      	sub	sp, #24
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800619c:	2300      	movs	r3, #0
 800619e:	75fb      	strb	r3, [r7, #23]
=======
 800521c:	b580      	push	{r7, lr}
 800521e:	b086      	sub	sp, #24
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005228:	2300      	movs	r3, #0
 800522a:	75fb      	strb	r3, [r7, #23]
>>>>>>> ModeSelect_v2
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d101      	bne.n	80061ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80061aa:	2302      	movs	r3, #2
 80061ac:	e0ff      	b.n	80063ae <HAL_TIM_PWM_ConfigChannel+0x21e>
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2201      	movs	r2, #1
 80061b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2b14      	cmp	r3, #20
 80061ba:	f200 80f0 	bhi.w	800639e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80061be:	a201      	add	r2, pc, #4	; (adr r2, 80061c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80061c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c4:	08006219 	.word	0x08006219
 80061c8:	0800639f 	.word	0x0800639f
 80061cc:	0800639f 	.word	0x0800639f
 80061d0:	0800639f 	.word	0x0800639f
 80061d4:	08006259 	.word	0x08006259
 80061d8:	0800639f 	.word	0x0800639f
 80061dc:	0800639f 	.word	0x0800639f
 80061e0:	0800639f 	.word	0x0800639f
 80061e4:	0800629b 	.word	0x0800629b
 80061e8:	0800639f 	.word	0x0800639f
 80061ec:	0800639f 	.word	0x0800639f
 80061f0:	0800639f 	.word	0x0800639f
 80061f4:	080062db 	.word	0x080062db
 80061f8:	0800639f 	.word	0x0800639f
 80061fc:	0800639f 	.word	0x0800639f
 8006200:	0800639f 	.word	0x0800639f
 8006204:	0800631d 	.word	0x0800631d
 8006208:	0800639f 	.word	0x0800639f
 800620c:	0800639f 	.word	0x0800639f
 8006210:	0800639f 	.word	0x0800639f
 8006214:	0800635d 	.word	0x0800635d
=======
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005232:	2b01      	cmp	r3, #1
 8005234:	d101      	bne.n	800523a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005236:	2302      	movs	r3, #2
 8005238:	e0ff      	b.n	800543a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2201      	movs	r2, #1
 800523e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2b14      	cmp	r3, #20
 8005246:	f200 80f0 	bhi.w	800542a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800524a:	a201      	add	r2, pc, #4	; (adr r2, 8005250 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800524c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005250:	080052a5 	.word	0x080052a5
 8005254:	0800542b 	.word	0x0800542b
 8005258:	0800542b 	.word	0x0800542b
 800525c:	0800542b 	.word	0x0800542b
 8005260:	080052e5 	.word	0x080052e5
 8005264:	0800542b 	.word	0x0800542b
 8005268:	0800542b 	.word	0x0800542b
 800526c:	0800542b 	.word	0x0800542b
 8005270:	08005327 	.word	0x08005327
 8005274:	0800542b 	.word	0x0800542b
 8005278:	0800542b 	.word	0x0800542b
 800527c:	0800542b 	.word	0x0800542b
 8005280:	08005367 	.word	0x08005367
 8005284:	0800542b 	.word	0x0800542b
 8005288:	0800542b 	.word	0x0800542b
 800528c:	0800542b 	.word	0x0800542b
 8005290:	080053a9 	.word	0x080053a9
 8005294:	0800542b 	.word	0x0800542b
 8005298:	0800542b 	.word	0x0800542b
 800529c:	0800542b 	.word	0x0800542b
 80052a0:	080053e9 	.word	0x080053e9
>>>>>>> ModeSelect_v2
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68b9      	ldr	r1, [r7, #8]
 800621e:	4618      	mov	r0, r3
 8006220:	f000 fa56 	bl	80066d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	699a      	ldr	r2, [r3, #24]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f042 0208 	orr.w	r2, r2, #8
 8006232:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	699a      	ldr	r2, [r3, #24]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f022 0204 	bic.w	r2, r2, #4
 8006242:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	6999      	ldr	r1, [r3, #24]
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	691a      	ldr	r2, [r3, #16]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	430a      	orrs	r2, r1
 8006254:	619a      	str	r2, [r3, #24]
      break;
 8006256:	e0a5      	b.n	80063a4 <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68b9      	ldr	r1, [r7, #8]
 80052aa:	4618      	mov	r0, r3
 80052ac:	f000 fa56 	bl	800575c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	699a      	ldr	r2, [r3, #24]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f042 0208 	orr.w	r2, r2, #8
 80052be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	699a      	ldr	r2, [r3, #24]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f022 0204 	bic.w	r2, r2, #4
 80052ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6999      	ldr	r1, [r3, #24]
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	691a      	ldr	r2, [r3, #16]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	430a      	orrs	r2, r1
 80052e0:	619a      	str	r2, [r3, #24]
      break;
 80052e2:	e0a5      	b.n	8005430 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> ModeSelect_v2
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68b9      	ldr	r1, [r7, #8]
 800625e:	4618      	mov	r0, r3
 8006260:	f000 fac6 	bl	80067f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	699a      	ldr	r2, [r3, #24]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006272:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	699a      	ldr	r2, [r3, #24]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006282:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	6999      	ldr	r1, [r3, #24]
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	021a      	lsls	r2, r3, #8
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	430a      	orrs	r2, r1
 8006296:	619a      	str	r2, [r3, #24]
      break;
 8006298:	e084      	b.n	80063a4 <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68b9      	ldr	r1, [r7, #8]
 80052ea:	4618      	mov	r0, r3
 80052ec:	f000 fac6 	bl	800587c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	699a      	ldr	r2, [r3, #24]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	699a      	ldr	r2, [r3, #24]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800530e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6999      	ldr	r1, [r3, #24]
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	021a      	lsls	r2, r3, #8
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	430a      	orrs	r2, r1
 8005322:	619a      	str	r2, [r3, #24]
      break;
 8005324:	e084      	b.n	8005430 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> ModeSelect_v2
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68b9      	ldr	r1, [r7, #8]
 80062a0:	4618      	mov	r0, r3
 80062a2:	f000 fb2f 	bl	8006904 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	69da      	ldr	r2, [r3, #28]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f042 0208 	orr.w	r2, r2, #8
 80062b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	69da      	ldr	r2, [r3, #28]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f022 0204 	bic.w	r2, r2, #4
 80062c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	69d9      	ldr	r1, [r3, #28]
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	691a      	ldr	r2, [r3, #16]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	430a      	orrs	r2, r1
 80062d6:	61da      	str	r2, [r3, #28]
      break;
 80062d8:	e064      	b.n	80063a4 <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68b9      	ldr	r1, [r7, #8]
 800532c:	4618      	mov	r0, r3
 800532e:	f000 fb2f 	bl	8005990 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	69da      	ldr	r2, [r3, #28]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f042 0208 	orr.w	r2, r2, #8
 8005340:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	69da      	ldr	r2, [r3, #28]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f022 0204 	bic.w	r2, r2, #4
 8005350:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	69d9      	ldr	r1, [r3, #28]
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	691a      	ldr	r2, [r3, #16]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	430a      	orrs	r2, r1
 8005362:	61da      	str	r2, [r3, #28]
      break;
 8005364:	e064      	b.n	8005430 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> ModeSelect_v2
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68b9      	ldr	r1, [r7, #8]
 80062e0:	4618      	mov	r0, r3
 80062e2:	f000 fb97 	bl	8006a14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	69da      	ldr	r2, [r3, #28]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	69da      	ldr	r2, [r3, #28]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006304:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	69d9      	ldr	r1, [r3, #28]
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	021a      	lsls	r2, r3, #8
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	430a      	orrs	r2, r1
 8006318:	61da      	str	r2, [r3, #28]
      break;
 800631a:	e043      	b.n	80063a4 <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68b9      	ldr	r1, [r7, #8]
 800536c:	4618      	mov	r0, r3
 800536e:	f000 fb97 	bl	8005aa0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	69da      	ldr	r2, [r3, #28]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005380:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	69da      	ldr	r2, [r3, #28]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005390:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	69d9      	ldr	r1, [r3, #28]
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	021a      	lsls	r2, r3, #8
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	430a      	orrs	r2, r1
 80053a4:	61da      	str	r2, [r3, #28]
      break;
 80053a6:	e043      	b.n	8005430 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> ModeSelect_v2
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68b9      	ldr	r1, [r7, #8]
 8006322:	4618      	mov	r0, r3
 8006324:	f000 fbe0 	bl	8006ae8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f042 0208 	orr.w	r2, r2, #8
 8006336:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f022 0204 	bic.w	r2, r2, #4
 8006346:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	691a      	ldr	r2, [r3, #16]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	430a      	orrs	r2, r1
 8006358:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800635a:	e023      	b.n	80063a4 <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68b9      	ldr	r1, [r7, #8]
 80053ae:	4618      	mov	r0, r3
 80053b0:	f000 fbe0 	bl	8005b74 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f042 0208 	orr.w	r2, r2, #8
 80053c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f022 0204 	bic.w	r2, r2, #4
 80053d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	691a      	ldr	r2, [r3, #16]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	430a      	orrs	r2, r1
 80053e4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80053e6:	e023      	b.n	8005430 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> ModeSelect_v2
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68b9      	ldr	r1, [r7, #8]
 8006362:	4618      	mov	r0, r3
 8006364:	f000 fc24 	bl	8006bb0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006376:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006386:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	021a      	lsls	r2, r3, #8
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	430a      	orrs	r2, r1
 800639a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800639c:	e002      	b.n	80063a4 <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68b9      	ldr	r1, [r7, #8]
 80053ee:	4618      	mov	r0, r3
 80053f0:	f000 fc24 	bl	8005c3c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005402:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005412:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	021a      	lsls	r2, r3, #8
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	430a      	orrs	r2, r1
 8005426:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005428:	e002      	b.n	8005430 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> ModeSelect_v2
    }

    default:
      status = HAL_ERROR;
<<<<<<< HEAD
 800639e:	2301      	movs	r3, #1
 80063a0:	75fb      	strb	r3, [r7, #23]
      break;
 80063a2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80063ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3718      	adds	r7, #24
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop

080063b8 <HAL_TIM_ConfigClockSource>:
=======
 800542a:	2301      	movs	r3, #1
 800542c:	75fb      	strb	r3, [r7, #23]
      break;
 800542e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005438:	7dfb      	ldrb	r3, [r7, #23]
}
 800543a:	4618      	mov	r0, r3
 800543c:	3718      	adds	r7, #24
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop

08005444 <HAL_TIM_ConfigClockSource>:
>>>>>>> ModeSelect_v2
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
<<<<<<< HEAD
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063c2:	2300      	movs	r3, #0
 80063c4:	73fb      	strb	r3, [r7, #15]
=======
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800544e:	2300      	movs	r3, #0
 8005450:	73fb      	strb	r3, [r7, #15]
>>>>>>> ModeSelect_v2
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d101      	bne.n	80063d4 <HAL_TIM_ConfigClockSource+0x1c>
 80063d0:	2302      	movs	r3, #2
 80063d2:	e0b6      	b.n	8006542 <HAL_TIM_ConfigClockSource+0x18a>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2202      	movs	r2, #2
 80063e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005458:	2b01      	cmp	r3, #1
 800545a:	d101      	bne.n	8005460 <HAL_TIM_ConfigClockSource+0x1c>
 800545c:	2302      	movs	r3, #2
 800545e:	e0b6      	b.n	80055ce <HAL_TIM_ConfigClockSource+0x18a>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2202      	movs	r2, #2
 800546c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> ModeSelect_v2

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
<<<<<<< HEAD
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80063f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006410:	d03e      	beq.n	8006490 <HAL_TIM_ConfigClockSource+0xd8>
 8006412:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006416:	f200 8087 	bhi.w	8006528 <HAL_TIM_ConfigClockSource+0x170>
 800641a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800641e:	f000 8086 	beq.w	800652e <HAL_TIM_ConfigClockSource+0x176>
 8006422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006426:	d87f      	bhi.n	8006528 <HAL_TIM_ConfigClockSource+0x170>
 8006428:	2b70      	cmp	r3, #112	; 0x70
 800642a:	d01a      	beq.n	8006462 <HAL_TIM_ConfigClockSource+0xaa>
 800642c:	2b70      	cmp	r3, #112	; 0x70
 800642e:	d87b      	bhi.n	8006528 <HAL_TIM_ConfigClockSource+0x170>
 8006430:	2b60      	cmp	r3, #96	; 0x60
 8006432:	d050      	beq.n	80064d6 <HAL_TIM_ConfigClockSource+0x11e>
 8006434:	2b60      	cmp	r3, #96	; 0x60
 8006436:	d877      	bhi.n	8006528 <HAL_TIM_ConfigClockSource+0x170>
 8006438:	2b50      	cmp	r3, #80	; 0x50
 800643a:	d03c      	beq.n	80064b6 <HAL_TIM_ConfigClockSource+0xfe>
 800643c:	2b50      	cmp	r3, #80	; 0x50
 800643e:	d873      	bhi.n	8006528 <HAL_TIM_ConfigClockSource+0x170>
 8006440:	2b40      	cmp	r3, #64	; 0x40
 8006442:	d058      	beq.n	80064f6 <HAL_TIM_ConfigClockSource+0x13e>
 8006444:	2b40      	cmp	r3, #64	; 0x40
 8006446:	d86f      	bhi.n	8006528 <HAL_TIM_ConfigClockSource+0x170>
 8006448:	2b30      	cmp	r3, #48	; 0x30
 800644a:	d064      	beq.n	8006516 <HAL_TIM_ConfigClockSource+0x15e>
 800644c:	2b30      	cmp	r3, #48	; 0x30
 800644e:	d86b      	bhi.n	8006528 <HAL_TIM_ConfigClockSource+0x170>
 8006450:	2b20      	cmp	r3, #32
 8006452:	d060      	beq.n	8006516 <HAL_TIM_ConfigClockSource+0x15e>
 8006454:	2b20      	cmp	r3, #32
 8006456:	d867      	bhi.n	8006528 <HAL_TIM_ConfigClockSource+0x170>
 8006458:	2b00      	cmp	r3, #0
 800645a:	d05c      	beq.n	8006516 <HAL_TIM_ConfigClockSource+0x15e>
 800645c:	2b10      	cmp	r3, #16
 800645e:	d05a      	beq.n	8006516 <HAL_TIM_ConfigClockSource+0x15e>
 8006460:	e062      	b.n	8006528 <HAL_TIM_ConfigClockSource+0x170>
=======
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800547e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005482:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800548a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68ba      	ldr	r2, [r7, #8]
 8005492:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800549c:	d03e      	beq.n	800551c <HAL_TIM_ConfigClockSource+0xd8>
 800549e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054a2:	f200 8087 	bhi.w	80055b4 <HAL_TIM_ConfigClockSource+0x170>
 80054a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054aa:	f000 8086 	beq.w	80055ba <HAL_TIM_ConfigClockSource+0x176>
 80054ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054b2:	d87f      	bhi.n	80055b4 <HAL_TIM_ConfigClockSource+0x170>
 80054b4:	2b70      	cmp	r3, #112	; 0x70
 80054b6:	d01a      	beq.n	80054ee <HAL_TIM_ConfigClockSource+0xaa>
 80054b8:	2b70      	cmp	r3, #112	; 0x70
 80054ba:	d87b      	bhi.n	80055b4 <HAL_TIM_ConfigClockSource+0x170>
 80054bc:	2b60      	cmp	r3, #96	; 0x60
 80054be:	d050      	beq.n	8005562 <HAL_TIM_ConfigClockSource+0x11e>
 80054c0:	2b60      	cmp	r3, #96	; 0x60
 80054c2:	d877      	bhi.n	80055b4 <HAL_TIM_ConfigClockSource+0x170>
 80054c4:	2b50      	cmp	r3, #80	; 0x50
 80054c6:	d03c      	beq.n	8005542 <HAL_TIM_ConfigClockSource+0xfe>
 80054c8:	2b50      	cmp	r3, #80	; 0x50
 80054ca:	d873      	bhi.n	80055b4 <HAL_TIM_ConfigClockSource+0x170>
 80054cc:	2b40      	cmp	r3, #64	; 0x40
 80054ce:	d058      	beq.n	8005582 <HAL_TIM_ConfigClockSource+0x13e>
 80054d0:	2b40      	cmp	r3, #64	; 0x40
 80054d2:	d86f      	bhi.n	80055b4 <HAL_TIM_ConfigClockSource+0x170>
 80054d4:	2b30      	cmp	r3, #48	; 0x30
 80054d6:	d064      	beq.n	80055a2 <HAL_TIM_ConfigClockSource+0x15e>
 80054d8:	2b30      	cmp	r3, #48	; 0x30
 80054da:	d86b      	bhi.n	80055b4 <HAL_TIM_ConfigClockSource+0x170>
 80054dc:	2b20      	cmp	r3, #32
 80054de:	d060      	beq.n	80055a2 <HAL_TIM_ConfigClockSource+0x15e>
 80054e0:	2b20      	cmp	r3, #32
 80054e2:	d867      	bhi.n	80055b4 <HAL_TIM_ConfigClockSource+0x170>
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d05c      	beq.n	80055a2 <HAL_TIM_ConfigClockSource+0x15e>
 80054e8:	2b10      	cmp	r3, #16
 80054ea:	d05a      	beq.n	80055a2 <HAL_TIM_ConfigClockSource+0x15e>
 80054ec:	e062      	b.n	80055b4 <HAL_TIM_ConfigClockSource+0x170>
>>>>>>> ModeSelect_v2
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
<<<<<<< HEAD
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6818      	ldr	r0, [r3, #0]
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	6899      	ldr	r1, [r3, #8]
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	685a      	ldr	r2, [r3, #4]
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	f000 fc7d 	bl	8006d70 <TIM_ETR_SetConfig>
=======
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6818      	ldr	r0, [r3, #0]
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	6899      	ldr	r1, [r3, #8]
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	685a      	ldr	r2, [r3, #4]
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	f000 fc7d 	bl	8005dfc <TIM_ETR_SetConfig>
>>>>>>> ModeSelect_v2
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
<<<<<<< HEAD
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006484:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68ba      	ldr	r2, [r7, #8]
 800648c:	609a      	str	r2, [r3, #8]
      break;
 800648e:	e04f      	b.n	8006530 <HAL_TIM_ConfigClockSource+0x178>
=======
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005510:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68ba      	ldr	r2, [r7, #8]
 8005518:	609a      	str	r2, [r3, #8]
      break;
 800551a:	e04f      	b.n	80055bc <HAL_TIM_ConfigClockSource+0x178>
>>>>>>> ModeSelect_v2
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
<<<<<<< HEAD
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6818      	ldr	r0, [r3, #0]
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	6899      	ldr	r1, [r3, #8]
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	685a      	ldr	r2, [r3, #4]
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	f000 fc66 	bl	8006d70 <TIM_ETR_SetConfig>
=======
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6818      	ldr	r0, [r3, #0]
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	6899      	ldr	r1, [r3, #8]
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	685a      	ldr	r2, [r3, #4]
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	f000 fc66 	bl	8005dfc <TIM_ETR_SetConfig>
>>>>>>> ModeSelect_v2
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
<<<<<<< HEAD
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	689a      	ldr	r2, [r3, #8]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064b2:	609a      	str	r2, [r3, #8]
      break;
 80064b4:	e03c      	b.n	8006530 <HAL_TIM_ConfigClockSource+0x178>
=======
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	689a      	ldr	r2, [r3, #8]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800553e:	609a      	str	r2, [r3, #8]
      break;
 8005540:	e03c      	b.n	80055bc <HAL_TIM_ConfigClockSource+0x178>
>>>>>>> ModeSelect_v2

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
<<<<<<< HEAD
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6818      	ldr	r0, [r3, #0]
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	6859      	ldr	r1, [r3, #4]
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	461a      	mov	r2, r3
 80064c4:	f000 fbda 	bl	8006c7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2150      	movs	r1, #80	; 0x50
 80064ce:	4618      	mov	r0, r3
 80064d0:	f000 fc33 	bl	8006d3a <TIM_ITRx_SetConfig>
      break;
 80064d4:	e02c      	b.n	8006530 <HAL_TIM_ConfigClockSource+0x178>
=======
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6818      	ldr	r0, [r3, #0]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	6859      	ldr	r1, [r3, #4]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	461a      	mov	r2, r3
 8005550:	f000 fbda 	bl	8005d08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2150      	movs	r1, #80	; 0x50
 800555a:	4618      	mov	r0, r3
 800555c:	f000 fc33 	bl	8005dc6 <TIM_ITRx_SetConfig>
      break;
 8005560:	e02c      	b.n	80055bc <HAL_TIM_ConfigClockSource+0x178>
>>>>>>> ModeSelect_v2

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
<<<<<<< HEAD
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6818      	ldr	r0, [r3, #0]
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	6859      	ldr	r1, [r3, #4]
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	461a      	mov	r2, r3
 80064e4:	f000 fbf9 	bl	8006cda <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2160      	movs	r1, #96	; 0x60
 80064ee:	4618      	mov	r0, r3
 80064f0:	f000 fc23 	bl	8006d3a <TIM_ITRx_SetConfig>
      break;
 80064f4:	e01c      	b.n	8006530 <HAL_TIM_ConfigClockSource+0x178>
=======
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6818      	ldr	r0, [r3, #0]
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	6859      	ldr	r1, [r3, #4]
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	461a      	mov	r2, r3
 8005570:	f000 fbf9 	bl	8005d66 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2160      	movs	r1, #96	; 0x60
 800557a:	4618      	mov	r0, r3
 800557c:	f000 fc23 	bl	8005dc6 <TIM_ITRx_SetConfig>
      break;
 8005580:	e01c      	b.n	80055bc <HAL_TIM_ConfigClockSource+0x178>
>>>>>>> ModeSelect_v2

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
<<<<<<< HEAD
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6818      	ldr	r0, [r3, #0]
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	6859      	ldr	r1, [r3, #4]
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	461a      	mov	r2, r3
 8006504:	f000 fbba 	bl	8006c7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2140      	movs	r1, #64	; 0x40
 800650e:	4618      	mov	r0, r3
 8006510:	f000 fc13 	bl	8006d3a <TIM_ITRx_SetConfig>
      break;
 8006514:	e00c      	b.n	8006530 <HAL_TIM_ConfigClockSource+0x178>
=======
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6818      	ldr	r0, [r3, #0]
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	6859      	ldr	r1, [r3, #4]
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	461a      	mov	r2, r3
 8005590:	f000 fbba 	bl	8005d08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2140      	movs	r1, #64	; 0x40
 800559a:	4618      	mov	r0, r3
 800559c:	f000 fc13 	bl	8005dc6 <TIM_ITRx_SetConfig>
      break;
 80055a0:	e00c      	b.n	80055bc <HAL_TIM_ConfigClockSource+0x178>
>>>>>>> ModeSelect_v2
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
<<<<<<< HEAD
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4619      	mov	r1, r3
 8006520:	4610      	mov	r0, r2
 8006522:	f000 fc0a 	bl	8006d3a <TIM_ITRx_SetConfig>
      break;
 8006526:	e003      	b.n	8006530 <HAL_TIM_ConfigClockSource+0x178>
=======
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4619      	mov	r1, r3
 80055ac:	4610      	mov	r0, r2
 80055ae:	f000 fc0a 	bl	8005dc6 <TIM_ITRx_SetConfig>
      break;
 80055b2:	e003      	b.n	80055bc <HAL_TIM_ConfigClockSource+0x178>
>>>>>>> ModeSelect_v2
    }

    default:
      status = HAL_ERROR;
<<<<<<< HEAD
 8006528:	2301      	movs	r3, #1
 800652a:	73fb      	strb	r3, [r7, #15]
      break;
 800652c:	e000      	b.n	8006530 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800652e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006540:	7bfb      	ldrb	r3, [r7, #15]
}
 8006542:	4618      	mov	r0, r3
 8006544:	3710      	adds	r7, #16
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}

0800654a <HAL_TIM_OC_DelayElapsedCallback>:
=======
 80055b4:	2301      	movs	r3, #1
 80055b6:	73fb      	strb	r3, [r7, #15]
      break;
 80055b8:	e000      	b.n	80055bc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80055ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80055cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3710      	adds	r7, #16
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> ModeSelect_v2
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800654a:	b480      	push	{r7}
 800654c:	b083      	sub	sp, #12
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
=======
 80055d6:	b480      	push	{r7}
 80055d8:	b083      	sub	sp, #12
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
>>>>>>> ModeSelect_v2
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8006552:	bf00      	nop
 8006554:	370c      	adds	r7, #12
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr

0800655e <HAL_TIM_IC_CaptureCallback>:
=======
 80055de:	bf00      	nop
 80055e0:	370c      	adds	r7, #12
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr

080055ea <HAL_TIM_IC_CaptureCallback>:
>>>>>>> ModeSelect_v2
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800655e:	b480      	push	{r7}
 8006560:	b083      	sub	sp, #12
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
=======
 80055ea:	b480      	push	{r7}
 80055ec:	b083      	sub	sp, #12
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
>>>>>>> ModeSelect_v2
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8006566:	bf00      	nop
 8006568:	370c      	adds	r7, #12
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr

08006572 <HAL_TIM_PWM_PulseFinishedCallback>:
=======
 80055f2:	bf00      	nop
 80055f4:	370c      	adds	r7, #12
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr

080055fe <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> ModeSelect_v2
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8006572:	b480      	push	{r7}
 8006574:	b083      	sub	sp, #12
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
=======
 80055fe:	b480      	push	{r7}
 8005600:	b083      	sub	sp, #12
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
>>>>>>> ModeSelect_v2
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 800657a:	bf00      	nop
 800657c:	370c      	adds	r7, #12
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr

08006586 <HAL_TIM_TriggerCallback>:
=======
 8005606:	bf00      	nop
 8005608:	370c      	adds	r7, #12
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr

08005612 <HAL_TIM_TriggerCallback>:
>>>>>>> ModeSelect_v2
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8006586:	b480      	push	{r7}
 8006588:	b083      	sub	sp, #12
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
=======
 8005612:	b480      	push	{r7}
 8005614:	b083      	sub	sp, #12
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
>>>>>>> ModeSelect_v2
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 800658e:	bf00      	nop
 8006590:	370c      	adds	r7, #12
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr
	...

0800659c <TIM_Base_SetConfig>:
=======
 800561a:	bf00      	nop
 800561c:	370c      	adds	r7, #12
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
	...

08005628 <TIM_Base_SetConfig>:
>>>>>>> ModeSelect_v2
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
<<<<<<< HEAD
 800659c:	b480      	push	{r7}
 800659e:	b085      	sub	sp, #20
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4a40      	ldr	r2, [pc, #256]	; (80066b0 <TIM_Base_SetConfig+0x114>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d013      	beq.n	80065dc <TIM_Base_SetConfig+0x40>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065ba:	d00f      	beq.n	80065dc <TIM_Base_SetConfig+0x40>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a3d      	ldr	r2, [pc, #244]	; (80066b4 <TIM_Base_SetConfig+0x118>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d00b      	beq.n	80065dc <TIM_Base_SetConfig+0x40>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a3c      	ldr	r2, [pc, #240]	; (80066b8 <TIM_Base_SetConfig+0x11c>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d007      	beq.n	80065dc <TIM_Base_SetConfig+0x40>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4a3b      	ldr	r2, [pc, #236]	; (80066bc <TIM_Base_SetConfig+0x120>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d003      	beq.n	80065dc <TIM_Base_SetConfig+0x40>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a3a      	ldr	r2, [pc, #232]	; (80066c0 <TIM_Base_SetConfig+0x124>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d108      	bne.n	80065ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a2f      	ldr	r2, [pc, #188]	; (80066b0 <TIM_Base_SetConfig+0x114>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d01f      	beq.n	8006636 <TIM_Base_SetConfig+0x9a>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065fc:	d01b      	beq.n	8006636 <TIM_Base_SetConfig+0x9a>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a2c      	ldr	r2, [pc, #176]	; (80066b4 <TIM_Base_SetConfig+0x118>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d017      	beq.n	8006636 <TIM_Base_SetConfig+0x9a>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a2b      	ldr	r2, [pc, #172]	; (80066b8 <TIM_Base_SetConfig+0x11c>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d013      	beq.n	8006636 <TIM_Base_SetConfig+0x9a>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a2a      	ldr	r2, [pc, #168]	; (80066bc <TIM_Base_SetConfig+0x120>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d00f      	beq.n	8006636 <TIM_Base_SetConfig+0x9a>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a29      	ldr	r2, [pc, #164]	; (80066c0 <TIM_Base_SetConfig+0x124>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d00b      	beq.n	8006636 <TIM_Base_SetConfig+0x9a>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a28      	ldr	r2, [pc, #160]	; (80066c4 <TIM_Base_SetConfig+0x128>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d007      	beq.n	8006636 <TIM_Base_SetConfig+0x9a>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a27      	ldr	r2, [pc, #156]	; (80066c8 <TIM_Base_SetConfig+0x12c>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d003      	beq.n	8006636 <TIM_Base_SetConfig+0x9a>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a26      	ldr	r2, [pc, #152]	; (80066cc <TIM_Base_SetConfig+0x130>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d108      	bne.n	8006648 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800663c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	4313      	orrs	r3, r2
 8006646:	60fb      	str	r3, [r7, #12]
=======
 8005628:	b480      	push	{r7}
 800562a:	b085      	sub	sp, #20
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a40      	ldr	r2, [pc, #256]	; (800573c <TIM_Base_SetConfig+0x114>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d013      	beq.n	8005668 <TIM_Base_SetConfig+0x40>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005646:	d00f      	beq.n	8005668 <TIM_Base_SetConfig+0x40>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a3d      	ldr	r2, [pc, #244]	; (8005740 <TIM_Base_SetConfig+0x118>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d00b      	beq.n	8005668 <TIM_Base_SetConfig+0x40>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a3c      	ldr	r2, [pc, #240]	; (8005744 <TIM_Base_SetConfig+0x11c>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d007      	beq.n	8005668 <TIM_Base_SetConfig+0x40>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a3b      	ldr	r2, [pc, #236]	; (8005748 <TIM_Base_SetConfig+0x120>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d003      	beq.n	8005668 <TIM_Base_SetConfig+0x40>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a3a      	ldr	r2, [pc, #232]	; (800574c <TIM_Base_SetConfig+0x124>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d108      	bne.n	800567a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800566e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	4313      	orrs	r3, r2
 8005678:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a2f      	ldr	r2, [pc, #188]	; (800573c <TIM_Base_SetConfig+0x114>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d01f      	beq.n	80056c2 <TIM_Base_SetConfig+0x9a>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005688:	d01b      	beq.n	80056c2 <TIM_Base_SetConfig+0x9a>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a2c      	ldr	r2, [pc, #176]	; (8005740 <TIM_Base_SetConfig+0x118>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d017      	beq.n	80056c2 <TIM_Base_SetConfig+0x9a>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a2b      	ldr	r2, [pc, #172]	; (8005744 <TIM_Base_SetConfig+0x11c>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d013      	beq.n	80056c2 <TIM_Base_SetConfig+0x9a>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a2a      	ldr	r2, [pc, #168]	; (8005748 <TIM_Base_SetConfig+0x120>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d00f      	beq.n	80056c2 <TIM_Base_SetConfig+0x9a>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a29      	ldr	r2, [pc, #164]	; (800574c <TIM_Base_SetConfig+0x124>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d00b      	beq.n	80056c2 <TIM_Base_SetConfig+0x9a>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a28      	ldr	r2, [pc, #160]	; (8005750 <TIM_Base_SetConfig+0x128>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d007      	beq.n	80056c2 <TIM_Base_SetConfig+0x9a>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a27      	ldr	r2, [pc, #156]	; (8005754 <TIM_Base_SetConfig+0x12c>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d003      	beq.n	80056c2 <TIM_Base_SetConfig+0x9a>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a26      	ldr	r2, [pc, #152]	; (8005758 <TIM_Base_SetConfig+0x130>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d108      	bne.n	80056d4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	60fb      	str	r3, [r7, #12]
>>>>>>> ModeSelect_v2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< HEAD
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	4313      	orrs	r3, r2
 8006654:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	689a      	ldr	r2, [r3, #8]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a10      	ldr	r2, [pc, #64]	; (80066b0 <TIM_Base_SetConfig+0x114>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d00f      	beq.n	8006694 <TIM_Base_SetConfig+0xf8>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a12      	ldr	r2, [pc, #72]	; (80066c0 <TIM_Base_SetConfig+0x124>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d00b      	beq.n	8006694 <TIM_Base_SetConfig+0xf8>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4a11      	ldr	r2, [pc, #68]	; (80066c4 <TIM_Base_SetConfig+0x128>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d007      	beq.n	8006694 <TIM_Base_SetConfig+0xf8>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4a10      	ldr	r2, [pc, #64]	; (80066c8 <TIM_Base_SetConfig+0x12c>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d003      	beq.n	8006694 <TIM_Base_SetConfig+0xf8>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a0f      	ldr	r2, [pc, #60]	; (80066cc <TIM_Base_SetConfig+0x130>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d103      	bne.n	800669c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	691a      	ldr	r2, [r3, #16]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	631a      	str	r2, [r3, #48]	; 0x30
=======
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	4313      	orrs	r3, r2
 80056e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	689a      	ldr	r2, [r3, #8]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a10      	ldr	r2, [pc, #64]	; (800573c <TIM_Base_SetConfig+0x114>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d00f      	beq.n	8005720 <TIM_Base_SetConfig+0xf8>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a12      	ldr	r2, [pc, #72]	; (800574c <TIM_Base_SetConfig+0x124>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d00b      	beq.n	8005720 <TIM_Base_SetConfig+0xf8>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a11      	ldr	r2, [pc, #68]	; (8005750 <TIM_Base_SetConfig+0x128>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d007      	beq.n	8005720 <TIM_Base_SetConfig+0xf8>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a10      	ldr	r2, [pc, #64]	; (8005754 <TIM_Base_SetConfig+0x12c>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d003      	beq.n	8005720 <TIM_Base_SetConfig+0xf8>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a0f      	ldr	r2, [pc, #60]	; (8005758 <TIM_Base_SetConfig+0x130>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d103      	bne.n	8005728 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	691a      	ldr	r2, [r3, #16]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> ModeSelect_v2
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< HEAD
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	615a      	str	r2, [r3, #20]
}
 80066a2:	bf00      	nop
 80066a4:	3714      	adds	r7, #20
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr
 80066ae:	bf00      	nop
 80066b0:	40012c00 	.word	0x40012c00
 80066b4:	40000400 	.word	0x40000400
 80066b8:	40000800 	.word	0x40000800
 80066bc:	40000c00 	.word	0x40000c00
 80066c0:	40013400 	.word	0x40013400
 80066c4:	40014000 	.word	0x40014000
 80066c8:	40014400 	.word	0x40014400
 80066cc:	40014800 	.word	0x40014800

080066d0 <TIM_OC1_SetConfig>:
=======
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	615a      	str	r2, [r3, #20]
}
 800572e:	bf00      	nop
 8005730:	3714      	adds	r7, #20
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop
 800573c:	40012c00 	.word	0x40012c00
 8005740:	40000400 	.word	0x40000400
 8005744:	40000800 	.word	0x40000800
 8005748:	40000c00 	.word	0x40000c00
 800574c:	40013400 	.word	0x40013400
 8005750:	40014000 	.word	0x40014000
 8005754:	40014400 	.word	0x40014400
 8005758:	40014800 	.word	0x40014800

0800575c <TIM_OC1_SetConfig>:
>>>>>>> ModeSelect_v2
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 80066d0:	b480      	push	{r7}
 80066d2:	b087      	sub	sp, #28
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
=======
 800575c:	b480      	push	{r7}
 800575e:	b087      	sub	sp, #28
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
>>>>>>> ModeSelect_v2
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
<<<<<<< HEAD
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a1b      	ldr	r3, [r3, #32]
 80066de:	f023 0201 	bic.w	r2, r3, #1
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6a1b      	ldr	r3, [r3, #32]
 80066ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	699b      	ldr	r3, [r3, #24]
 80066f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f023 0303 	bic.w	r3, r3, #3
 800670a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	4313      	orrs	r3, r2
 8006714:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	f023 0302 	bic.w	r3, r3, #2
 800671c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	697a      	ldr	r2, [r7, #20]
 8006724:	4313      	orrs	r3, r2
 8006726:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a2c      	ldr	r2, [pc, #176]	; (80067dc <TIM_OC1_SetConfig+0x10c>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d00f      	beq.n	8006750 <TIM_OC1_SetConfig+0x80>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a2b      	ldr	r2, [pc, #172]	; (80067e0 <TIM_OC1_SetConfig+0x110>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d00b      	beq.n	8006750 <TIM_OC1_SetConfig+0x80>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a2a      	ldr	r2, [pc, #168]	; (80067e4 <TIM_OC1_SetConfig+0x114>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d007      	beq.n	8006750 <TIM_OC1_SetConfig+0x80>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4a29      	ldr	r2, [pc, #164]	; (80067e8 <TIM_OC1_SetConfig+0x118>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d003      	beq.n	8006750 <TIM_OC1_SetConfig+0x80>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a28      	ldr	r2, [pc, #160]	; (80067ec <TIM_OC1_SetConfig+0x11c>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d10c      	bne.n	800676a <TIM_OC1_SetConfig+0x9a>
=======
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a1b      	ldr	r3, [r3, #32]
 800576a:	f023 0201 	bic.w	r2, r3, #1
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a1b      	ldr	r3, [r3, #32]
 8005776:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800578a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800578e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f023 0303 	bic.w	r3, r3, #3
 8005796:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	4313      	orrs	r3, r2
 80057a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	f023 0302 	bic.w	r3, r3, #2
 80057a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	697a      	ldr	r2, [r7, #20]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a2c      	ldr	r2, [pc, #176]	; (8005868 <TIM_OC1_SetConfig+0x10c>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d00f      	beq.n	80057dc <TIM_OC1_SetConfig+0x80>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a2b      	ldr	r2, [pc, #172]	; (800586c <TIM_OC1_SetConfig+0x110>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d00b      	beq.n	80057dc <TIM_OC1_SetConfig+0x80>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a2a      	ldr	r2, [pc, #168]	; (8005870 <TIM_OC1_SetConfig+0x114>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d007      	beq.n	80057dc <TIM_OC1_SetConfig+0x80>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a29      	ldr	r2, [pc, #164]	; (8005874 <TIM_OC1_SetConfig+0x118>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d003      	beq.n	80057dc <TIM_OC1_SetConfig+0x80>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a28      	ldr	r2, [pc, #160]	; (8005878 <TIM_OC1_SetConfig+0x11c>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d10c      	bne.n	80057f6 <TIM_OC1_SetConfig+0x9a>
>>>>>>> ModeSelect_v2
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
<<<<<<< HEAD
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	f023 0308 	bic.w	r3, r3, #8
 8006756:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	697a      	ldr	r2, [r7, #20]
 800675e:	4313      	orrs	r3, r2
 8006760:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	f023 0304 	bic.w	r3, r3, #4
 8006768:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a1b      	ldr	r2, [pc, #108]	; (80067dc <TIM_OC1_SetConfig+0x10c>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d00f      	beq.n	8006792 <TIM_OC1_SetConfig+0xc2>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a1a      	ldr	r2, [pc, #104]	; (80067e0 <TIM_OC1_SetConfig+0x110>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d00b      	beq.n	8006792 <TIM_OC1_SetConfig+0xc2>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a19      	ldr	r2, [pc, #100]	; (80067e4 <TIM_OC1_SetConfig+0x114>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d007      	beq.n	8006792 <TIM_OC1_SetConfig+0xc2>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a18      	ldr	r2, [pc, #96]	; (80067e8 <TIM_OC1_SetConfig+0x118>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d003      	beq.n	8006792 <TIM_OC1_SetConfig+0xc2>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a17      	ldr	r2, [pc, #92]	; (80067ec <TIM_OC1_SetConfig+0x11c>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d111      	bne.n	80067b6 <TIM_OC1_SetConfig+0xe6>
=======
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	f023 0308 	bic.w	r3, r3, #8
 80057e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	697a      	ldr	r2, [r7, #20]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	f023 0304 	bic.w	r3, r3, #4
 80057f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a1b      	ldr	r2, [pc, #108]	; (8005868 <TIM_OC1_SetConfig+0x10c>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d00f      	beq.n	800581e <TIM_OC1_SetConfig+0xc2>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a1a      	ldr	r2, [pc, #104]	; (800586c <TIM_OC1_SetConfig+0x110>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d00b      	beq.n	800581e <TIM_OC1_SetConfig+0xc2>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a19      	ldr	r2, [pc, #100]	; (8005870 <TIM_OC1_SetConfig+0x114>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d007      	beq.n	800581e <TIM_OC1_SetConfig+0xc2>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a18      	ldr	r2, [pc, #96]	; (8005874 <TIM_OC1_SetConfig+0x118>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d003      	beq.n	800581e <TIM_OC1_SetConfig+0xc2>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a17      	ldr	r2, [pc, #92]	; (8005878 <TIM_OC1_SetConfig+0x11c>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d111      	bne.n	8005842 <TIM_OC1_SetConfig+0xe6>
>>>>>>> ModeSelect_v2
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
<<<<<<< HEAD
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006798:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	695b      	ldr	r3, [r3, #20]
 80067a6:	693a      	ldr	r2, [r7, #16]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	699b      	ldr	r3, [r3, #24]
 80067b0:	693a      	ldr	r2, [r7, #16]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	613b      	str	r3, [r7, #16]
=======
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005824:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800582c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	695b      	ldr	r3, [r3, #20]
 8005832:	693a      	ldr	r2, [r7, #16]
 8005834:	4313      	orrs	r3, r2
 8005836:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	693a      	ldr	r2, [r7, #16]
 800583e:	4313      	orrs	r3, r2
 8005840:	613b      	str	r3, [r7, #16]
>>>>>>> ModeSelect_v2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	693a      	ldr	r2, [r7, #16]
 80067ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	68fa      	ldr	r2, [r7, #12]
 80067c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	685a      	ldr	r2, [r3, #4]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	697a      	ldr	r2, [r7, #20]
 80067ce:	621a      	str	r2, [r3, #32]
}
 80067d0:	bf00      	nop
 80067d2:	371c      	adds	r7, #28
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr
 80067dc:	40012c00 	.word	0x40012c00
 80067e0:	40013400 	.word	0x40013400
 80067e4:	40014000 	.word	0x40014000
 80067e8:	40014400 	.word	0x40014400
 80067ec:	40014800 	.word	0x40014800

080067f0 <TIM_OC2_SetConfig>:
=======
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	685a      	ldr	r2, [r3, #4]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	697a      	ldr	r2, [r7, #20]
 800585a:	621a      	str	r2, [r3, #32]
}
 800585c:	bf00      	nop
 800585e:	371c      	adds	r7, #28
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr
 8005868:	40012c00 	.word	0x40012c00
 800586c:	40013400 	.word	0x40013400
 8005870:	40014000 	.word	0x40014000
 8005874:	40014400 	.word	0x40014400
 8005878:	40014800 	.word	0x40014800

0800587c <TIM_OC2_SetConfig>:
>>>>>>> ModeSelect_v2
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 80067f0:	b480      	push	{r7}
 80067f2:	b087      	sub	sp, #28
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
=======
 800587c:	b480      	push	{r7}
 800587e:	b087      	sub	sp, #28
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
>>>>>>> ModeSelect_v2
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< HEAD
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a1b      	ldr	r3, [r3, #32]
 80067fe:	f023 0210 	bic.w	r2, r3, #16
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a1b      	ldr	r3, [r3, #32]
 800680a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	699b      	ldr	r3, [r3, #24]
 8006816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800681e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800682a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	021b      	lsls	r3, r3, #8
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	4313      	orrs	r3, r2
 8006836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	f023 0320 	bic.w	r3, r3, #32
 800683e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	011b      	lsls	r3, r3, #4
 8006846:	697a      	ldr	r2, [r7, #20]
 8006848:	4313      	orrs	r3, r2
 800684a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4a28      	ldr	r2, [pc, #160]	; (80068f0 <TIM_OC2_SetConfig+0x100>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d003      	beq.n	800685c <TIM_OC2_SetConfig+0x6c>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4a27      	ldr	r2, [pc, #156]	; (80068f4 <TIM_OC2_SetConfig+0x104>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d10d      	bne.n	8006878 <TIM_OC2_SetConfig+0x88>
=======
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a1b      	ldr	r3, [r3, #32]
 800588a:	f023 0210 	bic.w	r2, r3, #16
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a1b      	ldr	r3, [r3, #32]
 8005896:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	021b      	lsls	r3, r3, #8
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	f023 0320 	bic.w	r3, r3, #32
 80058ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	011b      	lsls	r3, r3, #4
 80058d2:	697a      	ldr	r2, [r7, #20]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a28      	ldr	r2, [pc, #160]	; (800597c <TIM_OC2_SetConfig+0x100>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d003      	beq.n	80058e8 <TIM_OC2_SetConfig+0x6c>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a27      	ldr	r2, [pc, #156]	; (8005980 <TIM_OC2_SetConfig+0x104>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d10d      	bne.n	8005904 <TIM_OC2_SetConfig+0x88>
>>>>>>> ModeSelect_v2
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
<<<<<<< HEAD
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006862:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	011b      	lsls	r3, r3, #4
 800686a:	697a      	ldr	r2, [r7, #20]
 800686c:	4313      	orrs	r3, r2
 800686e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006876:	617b      	str	r3, [r7, #20]
=======
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	011b      	lsls	r3, r3, #4
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005902:	617b      	str	r3, [r7, #20]
>>>>>>> ModeSelect_v2

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
<<<<<<< HEAD
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a1d      	ldr	r2, [pc, #116]	; (80068f0 <TIM_OC2_SetConfig+0x100>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d00f      	beq.n	80068a0 <TIM_OC2_SetConfig+0xb0>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a1c      	ldr	r2, [pc, #112]	; (80068f4 <TIM_OC2_SetConfig+0x104>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d00b      	beq.n	80068a0 <TIM_OC2_SetConfig+0xb0>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a1b      	ldr	r2, [pc, #108]	; (80068f8 <TIM_OC2_SetConfig+0x108>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d007      	beq.n	80068a0 <TIM_OC2_SetConfig+0xb0>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a1a      	ldr	r2, [pc, #104]	; (80068fc <TIM_OC2_SetConfig+0x10c>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d003      	beq.n	80068a0 <TIM_OC2_SetConfig+0xb0>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a19      	ldr	r2, [pc, #100]	; (8006900 <TIM_OC2_SetConfig+0x110>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d113      	bne.n	80068c8 <TIM_OC2_SetConfig+0xd8>
=======
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	4a1d      	ldr	r2, [pc, #116]	; (800597c <TIM_OC2_SetConfig+0x100>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d00f      	beq.n	800592c <TIM_OC2_SetConfig+0xb0>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4a1c      	ldr	r2, [pc, #112]	; (8005980 <TIM_OC2_SetConfig+0x104>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d00b      	beq.n	800592c <TIM_OC2_SetConfig+0xb0>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a1b      	ldr	r2, [pc, #108]	; (8005984 <TIM_OC2_SetConfig+0x108>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d007      	beq.n	800592c <TIM_OC2_SetConfig+0xb0>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a1a      	ldr	r2, [pc, #104]	; (8005988 <TIM_OC2_SetConfig+0x10c>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d003      	beq.n	800592c <TIM_OC2_SetConfig+0xb0>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a19      	ldr	r2, [pc, #100]	; (800598c <TIM_OC2_SetConfig+0x110>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d113      	bne.n	8005954 <TIM_OC2_SetConfig+0xd8>
>>>>>>> ModeSelect_v2
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
<<<<<<< HEAD
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	695b      	ldr	r3, [r3, #20]
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	693a      	ldr	r2, [r7, #16]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	699b      	ldr	r3, [r3, #24]
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	693a      	ldr	r2, [r7, #16]
 80068c4:	4313      	orrs	r3, r2
 80068c6:	613b      	str	r3, [r7, #16]
=======
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005932:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800593a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	695b      	ldr	r3, [r3, #20]
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	4313      	orrs	r3, r2
 8005946:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	699b      	ldr	r3, [r3, #24]
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	4313      	orrs	r3, r2
 8005952:	613b      	str	r3, [r7, #16]
>>>>>>> ModeSelect_v2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	693a      	ldr	r2, [r7, #16]
 80068cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	685a      	ldr	r2, [r3, #4]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	697a      	ldr	r2, [r7, #20]
 80068e0:	621a      	str	r2, [r3, #32]
}
 80068e2:	bf00      	nop
 80068e4:	371c      	adds	r7, #28
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	40012c00 	.word	0x40012c00
 80068f4:	40013400 	.word	0x40013400
 80068f8:	40014000 	.word	0x40014000
 80068fc:	40014400 	.word	0x40014400
 8006900:	40014800 	.word	0x40014800

08006904 <TIM_OC3_SetConfig>:
=======
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	693a      	ldr	r2, [r7, #16]
 8005958:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	685a      	ldr	r2, [r3, #4]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	697a      	ldr	r2, [r7, #20]
 800596c:	621a      	str	r2, [r3, #32]
}
 800596e:	bf00      	nop
 8005970:	371c      	adds	r7, #28
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	40012c00 	.word	0x40012c00
 8005980:	40013400 	.word	0x40013400
 8005984:	40014000 	.word	0x40014000
 8005988:	40014400 	.word	0x40014400
 800598c:	40014800 	.word	0x40014800

08005990 <TIM_OC3_SetConfig>:
>>>>>>> ModeSelect_v2
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8006904:	b480      	push	{r7}
 8006906:	b087      	sub	sp, #28
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]
=======
 8005990:	b480      	push	{r7}
 8005992:	b087      	sub	sp, #28
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
>>>>>>> ModeSelect_v2
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
<<<<<<< HEAD
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a1b      	ldr	r3, [r3, #32]
 8006912:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a1b      	ldr	r3, [r3, #32]
 800691e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	69db      	ldr	r3, [r3, #28]
 800692a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f023 0303 	bic.w	r3, r3, #3
 800693e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config
		  ->OCMode;
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
  tmpccmrx |= OC_Config
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	4313      	orrs	r3, r2
 8006948:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006950:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	021b      	lsls	r3, r3, #8
 8006958:	697a      	ldr	r2, [r7, #20]
 800695a:	4313      	orrs	r3, r2
 800695c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a27      	ldr	r2, [pc, #156]	; (8006a00 <TIM_OC3_SetConfig+0xfc>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d003      	beq.n	800696e <TIM_OC3_SetConfig+0x6a>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a26      	ldr	r2, [pc, #152]	; (8006a04 <TIM_OC3_SetConfig+0x100>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d10d      	bne.n	800698a <TIM_OC3_SetConfig+0x86>
=======
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a1b      	ldr	r3, [r3, #32]
 80059aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	69db      	ldr	r3, [r3, #28]
 80059b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f023 0303 	bic.w	r3, r3, #3
 80059ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	021b      	lsls	r3, r3, #8
 80059e4:	697a      	ldr	r2, [r7, #20]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a27      	ldr	r2, [pc, #156]	; (8005a8c <TIM_OC3_SetConfig+0xfc>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d003      	beq.n	80059fa <TIM_OC3_SetConfig+0x6a>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a26      	ldr	r2, [pc, #152]	; (8005a90 <TIM_OC3_SetConfig+0x100>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d10d      	bne.n	8005a16 <TIM_OC3_SetConfig+0x86>
>>>>>>> ModeSelect_v2
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
<<<<<<< HEAD
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006974:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	021b      	lsls	r3, r3, #8
 800697c:	697a      	ldr	r2, [r7, #20]
 800697e:	4313      	orrs	r3, r2
 8006980:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006988:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a1c      	ldr	r2, [pc, #112]	; (8006a00 <TIM_OC3_SetConfig+0xfc>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d00f      	beq.n	80069b2 <TIM_OC3_SetConfig+0xae>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4a1b      	ldr	r2, [pc, #108]	; (8006a04 <TIM_OC3_SetConfig+0x100>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d00b      	beq.n	80069b2 <TIM_OC3_SetConfig+0xae>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4a1a      	ldr	r2, [pc, #104]	; (8006a08 <TIM_OC3_SetConfig+0x104>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d007      	beq.n	80069b2 <TIM_OC3_SetConfig+0xae>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a19      	ldr	r2, [pc, #100]	; (8006a0c <TIM_OC3_SetConfig+0x108>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d003      	beq.n	80069b2 <TIM_OC3_SetConfig+0xae>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a18      	ldr	r2, [pc, #96]	; (8006a10 <TIM_OC3_SetConfig+0x10c>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d113      	bne.n	80069da <TIM_OC3_SetConfig+0xd6>
=======
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	021b      	lsls	r3, r3, #8
 8005a08:	697a      	ldr	r2, [r7, #20]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a1c      	ldr	r2, [pc, #112]	; (8005a8c <TIM_OC3_SetConfig+0xfc>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d00f      	beq.n	8005a3e <TIM_OC3_SetConfig+0xae>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a1b      	ldr	r2, [pc, #108]	; (8005a90 <TIM_OC3_SetConfig+0x100>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d00b      	beq.n	8005a3e <TIM_OC3_SetConfig+0xae>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a1a      	ldr	r2, [pc, #104]	; (8005a94 <TIM_OC3_SetConfig+0x104>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d007      	beq.n	8005a3e <TIM_OC3_SetConfig+0xae>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a19      	ldr	r2, [pc, #100]	; (8005a98 <TIM_OC3_SetConfig+0x108>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d003      	beq.n	8005a3e <TIM_OC3_SetConfig+0xae>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a18      	ldr	r2, [pc, #96]	; (8005a9c <TIM_OC3_SetConfig+0x10c>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d113      	bne.n	8005a66 <TIM_OC3_SetConfig+0xd6>
>>>>>>> ModeSelect_v2
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
<<<<<<< HEAD
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	695b      	ldr	r3, [r3, #20]
 80069c6:	011b      	lsls	r3, r3, #4
 80069c8:	693a      	ldr	r2, [r7, #16]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	699b      	ldr	r3, [r3, #24]
 80069d2:	011b      	lsls	r3, r3, #4
 80069d4:	693a      	ldr	r2, [r7, #16]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	613b      	str	r3, [r7, #16]
=======
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	011b      	lsls	r3, r3, #4
 8005a54:	693a      	ldr	r2, [r7, #16]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	699b      	ldr	r3, [r3, #24]
 8005a5e:	011b      	lsls	r3, r3, #4
 8005a60:	693a      	ldr	r2, [r7, #16]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	613b      	str	r3, [r7, #16]
>>>>>>> ModeSelect_v2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	693a      	ldr	r2, [r7, #16]
 80069de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	68fa      	ldr	r2, [r7, #12]
 80069e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	685a      	ldr	r2, [r3, #4]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	697a      	ldr	r2, [r7, #20]
 80069f2:	621a      	str	r2, [r3, #32]
}
 80069f4:	bf00      	nop
 80069f6:	371c      	adds	r7, #28
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr
 8006a00:	40012c00 	.word	0x40012c00
 8006a04:	40013400 	.word	0x40013400
 8006a08:	40014000 	.word	0x40014000
 8006a0c:	40014400 	.word	0x40014400
 8006a10:	40014800 	.word	0x40014800

08006a14 <TIM_OC4_SetConfig>:
=======
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	68fa      	ldr	r2, [r7, #12]
 8005a70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	685a      	ldr	r2, [r3, #4]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	697a      	ldr	r2, [r7, #20]
 8005a7e:	621a      	str	r2, [r3, #32]
}
 8005a80:	bf00      	nop
 8005a82:	371c      	adds	r7, #28
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr
 8005a8c:	40012c00 	.word	0x40012c00
 8005a90:	40013400 	.word	0x40013400
 8005a94:	40014000 	.word	0x40014000
 8005a98:	40014400 	.word	0x40014400
 8005a9c:	40014800 	.word	0x40014800

08005aa0 <TIM_OC4_SetConfig>:
>>>>>>> ModeSelect_v2
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8006a14:	b480      	push	{r7}
 8006a16:	b087      	sub	sp, #28
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
=======
 8005aa0:	b480      	push	{r7}
 8005aa2:	b087      	sub	sp, #28
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
>>>>>>> ModeSelect_v2
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
<<<<<<< HEAD
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a1b      	ldr	r3, [r3, #32]
 8006a22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
 8006a2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	69db      	ldr	r3, [r3, #28]
 8006a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	021b      	lsls	r3, r3, #8
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	031b      	lsls	r3, r3, #12
 8006a6a:	693a      	ldr	r2, [r7, #16]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4a18      	ldr	r2, [pc, #96]	; (8006ad4 <TIM_OC4_SetConfig+0xc0>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d00f      	beq.n	8006a98 <TIM_OC4_SetConfig+0x84>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4a17      	ldr	r2, [pc, #92]	; (8006ad8 <TIM_OC4_SetConfig+0xc4>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d00b      	beq.n	8006a98 <TIM_OC4_SetConfig+0x84>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	4a16      	ldr	r2, [pc, #88]	; (8006adc <TIM_OC4_SetConfig+0xc8>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d007      	beq.n	8006a98 <TIM_OC4_SetConfig+0x84>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	4a15      	ldr	r2, [pc, #84]	; (8006ae0 <TIM_OC4_SetConfig+0xcc>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d003      	beq.n	8006a98 <TIM_OC4_SetConfig+0x84>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a14      	ldr	r2, [pc, #80]	; (8006ae4 <TIM_OC4_SetConfig+0xd0>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d109      	bne.n	8006aac <TIM_OC4_SetConfig+0x98>
=======
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a1b      	ldr	r3, [r3, #32]
 8005aae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	69db      	ldr	r3, [r3, #28]
 8005ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ace:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ada:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	021b      	lsls	r3, r3, #8
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005aee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	031b      	lsls	r3, r3, #12
 8005af6:	693a      	ldr	r2, [r7, #16]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a18      	ldr	r2, [pc, #96]	; (8005b60 <TIM_OC4_SetConfig+0xc0>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d00f      	beq.n	8005b24 <TIM_OC4_SetConfig+0x84>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a17      	ldr	r2, [pc, #92]	; (8005b64 <TIM_OC4_SetConfig+0xc4>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d00b      	beq.n	8005b24 <TIM_OC4_SetConfig+0x84>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a16      	ldr	r2, [pc, #88]	; (8005b68 <TIM_OC4_SetConfig+0xc8>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d007      	beq.n	8005b24 <TIM_OC4_SetConfig+0x84>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a15      	ldr	r2, [pc, #84]	; (8005b6c <TIM_OC4_SetConfig+0xcc>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d003      	beq.n	8005b24 <TIM_OC4_SetConfig+0x84>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a14      	ldr	r2, [pc, #80]	; (8005b70 <TIM_OC4_SetConfig+0xd0>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d109      	bne.n	8005b38 <TIM_OC4_SetConfig+0x98>
>>>>>>> ModeSelect_v2
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
<<<<<<< HEAD
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	695b      	ldr	r3, [r3, #20]
 8006aa4:	019b      	lsls	r3, r3, #6
 8006aa6:	697a      	ldr	r2, [r7, #20]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	617b      	str	r3, [r7, #20]
=======
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	695b      	ldr	r3, [r3, #20]
 8005b30:	019b      	lsls	r3, r3, #6
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	617b      	str	r3, [r7, #20]
>>>>>>> ModeSelect_v2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	697a      	ldr	r2, [r7, #20]
 8006ab0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	68fa      	ldr	r2, [r7, #12]
 8006ab6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	685a      	ldr	r2, [r3, #4]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	693a      	ldr	r2, [r7, #16]
 8006ac4:	621a      	str	r2, [r3, #32]
}
 8006ac6:	bf00      	nop
 8006ac8:	371c      	adds	r7, #28
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr
 8006ad2:	bf00      	nop
 8006ad4:	40012c00 	.word	0x40012c00
 8006ad8:	40013400 	.word	0x40013400
 8006adc:	40014000 	.word	0x40014000
 8006ae0:	40014400 	.word	0x40014400
 8006ae4:	40014800 	.word	0x40014800

08006ae8 <TIM_OC5_SetConfig>:
=======
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	685a      	ldr	r2, [r3, #4]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	693a      	ldr	r2, [r7, #16]
 8005b50:	621a      	str	r2, [r3, #32]
}
 8005b52:	bf00      	nop
 8005b54:	371c      	adds	r7, #28
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	40012c00 	.word	0x40012c00
 8005b64:	40013400 	.word	0x40013400
 8005b68:	40014000 	.word	0x40014000
 8005b6c:	40014400 	.word	0x40014400
 8005b70:	40014800 	.word	0x40014800

08005b74 <TIM_OC5_SetConfig>:
>>>>>>> ModeSelect_v2
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8006ae8:	b480      	push	{r7}
 8006aea:	b087      	sub	sp, #28
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
=======
 8005b74:	b480      	push	{r7}
 8005b76:	b087      	sub	sp, #28
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
>>>>>>> ModeSelect_v2
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
<<<<<<< HEAD
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6a1b      	ldr	r3, [r3, #32]
 8006af6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6a1b      	ldr	r3, [r3, #32]
 8006b02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006b2c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	041b      	lsls	r3, r3, #16
 8006b34:	693a      	ldr	r2, [r7, #16]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4a17      	ldr	r2, [pc, #92]	; (8006b9c <TIM_OC5_SetConfig+0xb4>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d00f      	beq.n	8006b62 <TIM_OC5_SetConfig+0x7a>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a16      	ldr	r2, [pc, #88]	; (8006ba0 <TIM_OC5_SetConfig+0xb8>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d00b      	beq.n	8006b62 <TIM_OC5_SetConfig+0x7a>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	4a15      	ldr	r2, [pc, #84]	; (8006ba4 <TIM_OC5_SetConfig+0xbc>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d007      	beq.n	8006b62 <TIM_OC5_SetConfig+0x7a>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	4a14      	ldr	r2, [pc, #80]	; (8006ba8 <TIM_OC5_SetConfig+0xc0>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d003      	beq.n	8006b62 <TIM_OC5_SetConfig+0x7a>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4a13      	ldr	r2, [pc, #76]	; (8006bac <TIM_OC5_SetConfig+0xc4>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d109      	bne.n	8006b76 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b68:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	695b      	ldr	r3, [r3, #20]
 8006b6e:	021b      	lsls	r3, r3, #8
 8006b70:	697a      	ldr	r2, [r7, #20]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	697a      	ldr	r2, [r7, #20]
 8006b7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	68fa      	ldr	r2, [r7, #12]
 8006b80:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	685a      	ldr	r2, [r3, #4]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	693a      	ldr	r2, [r7, #16]
 8006b8e:	621a      	str	r2, [r3, #32]
}
 8006b90:	bf00      	nop
 8006b92:	371c      	adds	r7, #28
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr
 8006b9c:	40012c00 	.word	0x40012c00
 8006ba0:	40013400 	.word	0x40013400
 8006ba4:	40014000 	.word	0x40014000
 8006ba8:	40014400 	.word	0x40014400
 8006bac:	40014800 	.word	0x40014800

08006bb0 <TIM_OC6_SetConfig>:
=======
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005bb8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	041b      	lsls	r3, r3, #16
 8005bc0:	693a      	ldr	r2, [r7, #16]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a17      	ldr	r2, [pc, #92]	; (8005c28 <TIM_OC5_SetConfig+0xb4>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d00f      	beq.n	8005bee <TIM_OC5_SetConfig+0x7a>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a16      	ldr	r2, [pc, #88]	; (8005c2c <TIM_OC5_SetConfig+0xb8>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d00b      	beq.n	8005bee <TIM_OC5_SetConfig+0x7a>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a15      	ldr	r2, [pc, #84]	; (8005c30 <TIM_OC5_SetConfig+0xbc>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d007      	beq.n	8005bee <TIM_OC5_SetConfig+0x7a>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a14      	ldr	r2, [pc, #80]	; (8005c34 <TIM_OC5_SetConfig+0xc0>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d003      	beq.n	8005bee <TIM_OC5_SetConfig+0x7a>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a13      	ldr	r2, [pc, #76]	; (8005c38 <TIM_OC5_SetConfig+0xc4>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d109      	bne.n	8005c02 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bf4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	695b      	ldr	r3, [r3, #20]
 8005bfa:	021b      	lsls	r3, r3, #8
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	697a      	ldr	r2, [r7, #20]
 8005c06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	685a      	ldr	r2, [r3, #4]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	621a      	str	r2, [r3, #32]
}
 8005c1c:	bf00      	nop
 8005c1e:	371c      	adds	r7, #28
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr
 8005c28:	40012c00 	.word	0x40012c00
 8005c2c:	40013400 	.word	0x40013400
 8005c30:	40014000 	.word	0x40014000
 8005c34:	40014400 	.word	0x40014400
 8005c38:	40014800 	.word	0x40014800

08005c3c <TIM_OC6_SetConfig>:
>>>>>>> ModeSelect_v2
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8006bb0:	b480      	push	{r7}
 8006bb2:	b087      	sub	sp, #28
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
=======
 8005c3c:	b480      	push	{r7}
 8005c3e:	b087      	sub	sp, #28
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
>>>>>>> ModeSelect_v2
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
<<<<<<< HEAD
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a1b      	ldr	r3, [r3, #32]
 8006bbe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
 8006bca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006bde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006be2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	021b      	lsls	r3, r3, #8
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006bf6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	051b      	lsls	r3, r3, #20
 8006bfe:	693a      	ldr	r2, [r7, #16]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	4a18      	ldr	r2, [pc, #96]	; (8006c68 <TIM_OC6_SetConfig+0xb8>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d00f      	beq.n	8006c2c <TIM_OC6_SetConfig+0x7c>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	4a17      	ldr	r2, [pc, #92]	; (8006c6c <TIM_OC6_SetConfig+0xbc>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d00b      	beq.n	8006c2c <TIM_OC6_SetConfig+0x7c>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4a16      	ldr	r2, [pc, #88]	; (8006c70 <TIM_OC6_SetConfig+0xc0>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d007      	beq.n	8006c2c <TIM_OC6_SetConfig+0x7c>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4a15      	ldr	r2, [pc, #84]	; (8006c74 <TIM_OC6_SetConfig+0xc4>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d003      	beq.n	8006c2c <TIM_OC6_SetConfig+0x7c>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	4a14      	ldr	r2, [pc, #80]	; (8006c78 <TIM_OC6_SetConfig+0xc8>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d109      	bne.n	8006c40 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c32:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	695b      	ldr	r3, [r3, #20]
 8006c38:	029b      	lsls	r3, r3, #10
 8006c3a:	697a      	ldr	r2, [r7, #20]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	617b      	str	r3, [r7, #20]
=======
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a1b      	ldr	r3, [r3, #32]
 8005c4a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	021b      	lsls	r3, r3, #8
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	051b      	lsls	r3, r3, #20
 8005c8a:	693a      	ldr	r2, [r7, #16]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a18      	ldr	r2, [pc, #96]	; (8005cf4 <TIM_OC6_SetConfig+0xb8>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d00f      	beq.n	8005cb8 <TIM_OC6_SetConfig+0x7c>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a17      	ldr	r2, [pc, #92]	; (8005cf8 <TIM_OC6_SetConfig+0xbc>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d00b      	beq.n	8005cb8 <TIM_OC6_SetConfig+0x7c>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a16      	ldr	r2, [pc, #88]	; (8005cfc <TIM_OC6_SetConfig+0xc0>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d007      	beq.n	8005cb8 <TIM_OC6_SetConfig+0x7c>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a15      	ldr	r2, [pc, #84]	; (8005d00 <TIM_OC6_SetConfig+0xc4>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d003      	beq.n	8005cb8 <TIM_OC6_SetConfig+0x7c>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a14      	ldr	r2, [pc, #80]	; (8005d04 <TIM_OC6_SetConfig+0xc8>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d109      	bne.n	8005ccc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cbe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	695b      	ldr	r3, [r3, #20]
 8005cc4:	029b      	lsls	r3, r3, #10
 8005cc6:	697a      	ldr	r2, [r7, #20]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	617b      	str	r3, [r7, #20]
>>>>>>> ModeSelect_v2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	697a      	ldr	r2, [r7, #20]
 8006c44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	68fa      	ldr	r2, [r7, #12]
 8006c4a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	685a      	ldr	r2, [r3, #4]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	693a      	ldr	r2, [r7, #16]
 8006c58:	621a      	str	r2, [r3, #32]
}
 8006c5a:	bf00      	nop
 8006c5c:	371c      	adds	r7, #28
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr
 8006c66:	bf00      	nop
 8006c68:	40012c00 	.word	0x40012c00
 8006c6c:	40013400 	.word	0x40013400
 8006c70:	40014000 	.word	0x40014000
 8006c74:	40014400 	.word	0x40014400
 8006c78:	40014800 	.word	0x40014800

08006c7c <TIM_TI1_ConfigInputStage>:
=======
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	685a      	ldr	r2, [r3, #4]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	693a      	ldr	r2, [r7, #16]
 8005ce4:	621a      	str	r2, [r3, #32]
}
 8005ce6:	bf00      	nop
 8005ce8:	371c      	adds	r7, #28
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
 8005cf2:	bf00      	nop
 8005cf4:	40012c00 	.word	0x40012c00
 8005cf8:	40013400 	.word	0x40013400
 8005cfc:	40014000 	.word	0x40014000
 8005d00:	40014400 	.word	0x40014400
 8005d04:	40014800 	.word	0x40014800

08005d08 <TIM_TI1_ConfigInputStage>:
>>>>>>> ModeSelect_v2
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 8006c7c:	b480      	push	{r7}
 8006c7e:	b087      	sub	sp, #28
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	607a      	str	r2, [r7, #4]
=======
 8005d08:	b480      	push	{r7}
 8005d0a:	b087      	sub	sp, #28
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
>>>>>>> ModeSelect_v2
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6a1b      	ldr	r3, [r3, #32]
 8006c8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6a1b      	ldr	r3, [r3, #32]
 8006c92:	f023 0201 	bic.w	r2, r3, #1
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	699b      	ldr	r3, [r3, #24]
 8006c9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ca6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	011b      	lsls	r3, r3, #4
 8006cac:	693a      	ldr	r2, [r7, #16]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	f023 030a 	bic.w	r3, r3, #10
 8006cb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006cba:	697a      	ldr	r2, [r7, #20]
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	693a      	ldr	r2, [r7, #16]
 8006cc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	697a      	ldr	r2, [r7, #20]
 8006ccc:	621a      	str	r2, [r3, #32]
}
 8006cce:	bf00      	nop
 8006cd0:	371c      	adds	r7, #28
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr

08006cda <TIM_TI2_ConfigInputStage>:
=======
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6a1b      	ldr	r3, [r3, #32]
 8005d18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6a1b      	ldr	r3, [r3, #32]
 8005d1e:	f023 0201 	bic.w	r2, r3, #1
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	699b      	ldr	r3, [r3, #24]
 8005d2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	011b      	lsls	r3, r3, #4
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	f023 030a 	bic.w	r3, r3, #10
 8005d44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d46:	697a      	ldr	r2, [r7, #20]
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	693a      	ldr	r2, [r7, #16]
 8005d52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	697a      	ldr	r2, [r7, #20]
 8005d58:	621a      	str	r2, [r3, #32]
}
 8005d5a:	bf00      	nop
 8005d5c:	371c      	adds	r7, #28
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <TIM_TI2_ConfigInputStage>:
>>>>>>> ModeSelect_v2
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 8006cda:	b480      	push	{r7}
 8006cdc:	b087      	sub	sp, #28
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	60f8      	str	r0, [r7, #12]
 8006ce2:	60b9      	str	r1, [r7, #8]
 8006ce4:	607a      	str	r2, [r7, #4]
=======
 8005d66:	b480      	push	{r7}
 8005d68:	b087      	sub	sp, #28
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	60f8      	str	r0, [r7, #12]
 8005d6e:	60b9      	str	r1, [r7, #8]
 8005d70:	607a      	str	r2, [r7, #4]
>>>>>>> ModeSelect_v2
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< HEAD
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	6a1b      	ldr	r3, [r3, #32]
 8006cea:	f023 0210 	bic.w	r2, r3, #16
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	699b      	ldr	r3, [r3, #24]
 8006cf6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6a1b      	ldr	r3, [r3, #32]
 8006cfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	031b      	lsls	r3, r3, #12
 8006d0a:	697a      	ldr	r2, [r7, #20]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	011b      	lsls	r3, r3, #4
 8006d1c:	693a      	ldr	r2, [r7, #16]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	697a      	ldr	r2, [r7, #20]
 8006d26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	693a      	ldr	r2, [r7, #16]
 8006d2c:	621a      	str	r2, [r3, #32]
}
 8006d2e:	bf00      	nop
 8006d30:	371c      	adds	r7, #28
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr

08006d3a <TIM_ITRx_SetConfig>:
=======
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6a1b      	ldr	r3, [r3, #32]
 8005d76:	f023 0210 	bic.w	r2, r3, #16
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6a1b      	ldr	r3, [r3, #32]
 8005d88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	031b      	lsls	r3, r3, #12
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005da2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	011b      	lsls	r3, r3, #4
 8005da8:	693a      	ldr	r2, [r7, #16]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	697a      	ldr	r2, [r7, #20]
 8005db2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	693a      	ldr	r2, [r7, #16]
 8005db8:	621a      	str	r2, [r3, #32]
}
 8005dba:	bf00      	nop
 8005dbc:	371c      	adds	r7, #28
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr

08005dc6 <TIM_ITRx_SetConfig>:
>>>>>>> ModeSelect_v2
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
<<<<<<< HEAD
 8006d3a:	b480      	push	{r7}
 8006d3c:	b085      	sub	sp, #20
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
 8006d42:	6039      	str	r1, [r7, #0]
=======
 8005dc6:	b480      	push	{r7}
 8005dc8:	b085      	sub	sp, #20
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
 8005dce:	6039      	str	r1, [r7, #0]
>>>>>>> ModeSelect_v2
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
<<<<<<< HEAD
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d52:	683a      	ldr	r2, [r7, #0]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	f043 0307 	orr.w	r3, r3, #7
 8006d5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	68fa      	ldr	r2, [r7, #12]
 8006d62:	609a      	str	r2, [r3, #8]
}
 8006d64:	bf00      	nop
 8006d66:	3714      	adds	r7, #20
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <TIM_ETR_SetConfig>:
=======
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ddc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005dde:	683a      	ldr	r2, [r7, #0]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	f043 0307 	orr.w	r3, r3, #7
 8005de8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	609a      	str	r2, [r3, #8]
}
 8005df0:	bf00      	nop
 8005df2:	3714      	adds	r7, #20
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <TIM_ETR_SetConfig>:
>>>>>>> ModeSelect_v2
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
<<<<<<< HEAD
 8006d70:	b480      	push	{r7}
 8006d72:	b087      	sub	sp, #28
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	60b9      	str	r1, [r7, #8]
 8006d7a:	607a      	str	r2, [r7, #4]
 8006d7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	021a      	lsls	r2, r3, #8
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	431a      	orrs	r2, r3
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	4313      	orrs	r3, r2
 8006d98:	697a      	ldr	r2, [r7, #20]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	697a      	ldr	r2, [r7, #20]
 8006da2:	609a      	str	r2, [r3, #8]
}
 8006da4:	bf00      	nop
 8006da6:	371c      	adds	r7, #28
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <TIM_CCxChannelCmd>:
=======
 8005dfc:	b480      	push	{r7}
 8005dfe:	b087      	sub	sp, #28
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
 8005e08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	021a      	lsls	r2, r3, #8
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	431a      	orrs	r2, r3
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	697a      	ldr	r2, [r7, #20]
 8005e2e:	609a      	str	r2, [r3, #8]
}
 8005e30:	bf00      	nop
 8005e32:	371c      	adds	r7, #28
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <TIM_CCxChannelCmd>:
>>>>>>> ModeSelect_v2
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
<<<<<<< HEAD
 8006db0:	b480      	push	{r7}
 8006db2:	b087      	sub	sp, #28
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	607a      	str	r2, [r7, #4]
=======
 8005e3c:	b480      	push	{r7}
 8005e3e:	b087      	sub	sp, #28
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	607a      	str	r2, [r7, #4]
>>>>>>> ModeSelect_v2

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
<<<<<<< HEAD
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	f003 031f 	and.w	r3, r3, #31
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	6a1a      	ldr	r2, [r3, #32]
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	43db      	mvns	r3, r3
 8006dd2:	401a      	ands	r2, r3
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6a1a      	ldr	r2, [r3, #32]
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	f003 031f 	and.w	r3, r3, #31
 8006de2:	6879      	ldr	r1, [r7, #4]
 8006de4:	fa01 f303 	lsl.w	r3, r1, r3
 8006de8:	431a      	orrs	r2, r3
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	621a      	str	r2, [r3, #32]
}
 8006dee:	bf00      	nop
 8006df0:	371c      	adds	r7, #28
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr
	...

08006dfc <HAL_TIMEx_MasterConfigSynchronization>:
=======
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	f003 031f 	and.w	r3, r3, #31
 8005e4e:	2201      	movs	r2, #1
 8005e50:	fa02 f303 	lsl.w	r3, r2, r3
 8005e54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6a1a      	ldr	r2, [r3, #32]
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	43db      	mvns	r3, r3
 8005e5e:	401a      	ands	r2, r3
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6a1a      	ldr	r2, [r3, #32]
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	f003 031f 	and.w	r3, r3, #31
 8005e6e:	6879      	ldr	r1, [r7, #4]
 8005e70:	fa01 f303 	lsl.w	r3, r1, r3
 8005e74:	431a      	orrs	r2, r3
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	621a      	str	r2, [r3, #32]
}
 8005e7a:	bf00      	nop
 8005e7c:	371c      	adds	r7, #28
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
	...

08005e88 <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> ModeSelect_v2
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< HEAD
 8006dfc:	b480      	push	{r7}
 8006dfe:	b085      	sub	sp, #20
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
=======
 8005e88:	b480      	push	{r7}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
>>>>>>> ModeSelect_v2
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d101      	bne.n	8006e14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e10:	2302      	movs	r3, #2
 8006e12:	e068      	b.n	8006ee6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2202      	movs	r2, #2
 8006e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a2e      	ldr	r2, [pc, #184]	; (8006ef4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d004      	beq.n	8006e48 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a2d      	ldr	r2, [pc, #180]	; (8006ef8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d108      	bne.n	8006e5a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
=======
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d101      	bne.n	8005ea0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	e068      	b.n	8005f72 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2202      	movs	r2, #2
 8005eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a2e      	ldr	r2, [pc, #184]	; (8005f80 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d004      	beq.n	8005ed4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a2d      	ldr	r2, [pc, #180]	; (8005f84 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d108      	bne.n	8005ee6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
>>>>>>> ModeSelect_v2
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
<<<<<<< HEAD
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006e4e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	60fb      	str	r3, [r7, #12]
=======
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005eda:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	60fb      	str	r3, [r7, #12]
>>>>>>> ModeSelect_v2
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
<<<<<<< HEAD
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e60:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	68fa      	ldr	r2, [r7, #12]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	68fa      	ldr	r2, [r7, #12]
 8006e72:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a1e      	ldr	r2, [pc, #120]	; (8006ef4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d01d      	beq.n	8006eba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e86:	d018      	beq.n	8006eba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a1b      	ldr	r2, [pc, #108]	; (8006efc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d013      	beq.n	8006eba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a1a      	ldr	r2, [pc, #104]	; (8006f00 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d00e      	beq.n	8006eba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a18      	ldr	r2, [pc, #96]	; (8006f04 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d009      	beq.n	8006eba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a13      	ldr	r2, [pc, #76]	; (8006ef8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d004      	beq.n	8006eba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a14      	ldr	r2, [pc, #80]	; (8006f08 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d10c      	bne.n	8006ed4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ec0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	68ba      	ldr	r2, [r7, #8]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68ba      	ldr	r2, [r7, #8]
 8006ed2:	609a      	str	r2, [r3, #8]
=======
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a1e      	ldr	r2, [pc, #120]	; (8005f80 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d01d      	beq.n	8005f46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f12:	d018      	beq.n	8005f46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a1b      	ldr	r2, [pc, #108]	; (8005f88 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d013      	beq.n	8005f46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a1a      	ldr	r2, [pc, #104]	; (8005f8c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d00e      	beq.n	8005f46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a18      	ldr	r2, [pc, #96]	; (8005f90 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d009      	beq.n	8005f46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a13      	ldr	r2, [pc, #76]	; (8005f84 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d004      	beq.n	8005f46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a14      	ldr	r2, [pc, #80]	; (8005f94 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d10c      	bne.n	8005f60 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68ba      	ldr	r2, [r7, #8]
 8005f5e:	609a      	str	r2, [r3, #8]
>>>>>>> ModeSelect_v2
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< HEAD
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3714      	adds	r7, #20
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop
 8006ef4:	40012c00 	.word	0x40012c00
 8006ef8:	40013400 	.word	0x40013400
 8006efc:	40000400 	.word	0x40000400
 8006f00:	40000800 	.word	0x40000800
 8006f04:	40000c00 	.word	0x40000c00
 8006f08:	40014000 	.word	0x40014000

08006f0c <HAL_TIMEx_CommutCallback>:
=======
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3714      	adds	r7, #20
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop
 8005f80:	40012c00 	.word	0x40012c00
 8005f84:	40013400 	.word	0x40013400
 8005f88:	40000400 	.word	0x40000400
 8005f8c:	40000800 	.word	0x40000800
 8005f90:	40000c00 	.word	0x40000c00
 8005f94:	40014000 	.word	0x40014000

08005f98 <HAL_TIMEx_CommutCallback>:
>>>>>>> ModeSelect_v2
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
=======
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
>>>>>>> ModeSelect_v2
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8006f14:	bf00      	nop
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <HAL_TIMEx_BreakCallback>:
=======
 8005fa0:	bf00      	nop
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <HAL_TIMEx_BreakCallback>:
>>>>>>> ModeSelect_v2
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
=======
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
>>>>>>> ModeSelect_v2
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8006f28:	bf00      	nop
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <HAL_TIMEx_Break2Callback>:
=======
 8005fb4:	bf00      	nop
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <HAL_TIMEx_Break2Callback>:
>>>>>>> ModeSelect_v2
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
=======
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
>>>>>>> ModeSelect_v2
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8006f3c:	bf00      	nop
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <HAL_UART_Init>:
=======
 8005fc8:	bf00      	nop
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <HAL_UART_Init>:
>>>>>>> ModeSelect_v2
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d101      	bne.n	8006f5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	e042      	b.n	8006fe0 <HAL_UART_Init+0x98>
=======
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d101      	bne.n	8005fe6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e042      	b.n	800606c <HAL_UART_Init+0x98>
>>>>>>> ModeSelect_v2
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< HEAD
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d106      	bne.n	8006f72 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
=======
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d106      	bne.n	8005ffe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
>>>>>>> ModeSelect_v2

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< HEAD
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f7fb fbe9 	bl	8002744 <HAL_UART_MspInit>
=======
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f7fb fb9b 	bl	8001734 <HAL_UART_MspInit>
>>>>>>> ModeSelect_v2
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< HEAD
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2224      	movs	r2, #36	; 0x24
 8006f76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f022 0201 	bic.w	r2, r2, #1
 8006f88:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 fc50 	bl	8007830 <UART_SetConfig>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d101      	bne.n	8006f9a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	e022      	b.n	8006fe0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d002      	beq.n	8006fa8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 ff40 	bl	8007e28 <UART_AdvFeatureConfig>
=======
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2224      	movs	r2, #36	; 0x24
 8006002:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f022 0201 	bic.w	r2, r2, #1
 8006014:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 fbba 	bl	8006790 <UART_SetConfig>
 800601c:	4603      	mov	r3, r0
 800601e:	2b01      	cmp	r3, #1
 8006020:	d101      	bne.n	8006026 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e022      	b.n	800606c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800602a:	2b00      	cmp	r3, #0
 800602c:	d002      	beq.n	8006034 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 feaa 	bl	8006d88 <UART_AdvFeatureConfig>
>>>>>>> ModeSelect_v2
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< HEAD
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	685a      	ldr	r2, [r3, #4]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006fb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	689a      	ldr	r2, [r3, #8]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006fc6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f042 0201 	orr.w	r2, r2, #1
 8006fd6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 ffc7 	bl	8007f6c <UART_CheckIdleState>
 8006fde:	4603      	mov	r3, r0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3708      	adds	r7, #8
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b08a      	sub	sp, #40	; 0x28
 8006fec:	af02      	add	r7, sp, #8
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	603b      	str	r3, [r7, #0]
 8006ff4:	4613      	mov	r3, r2
 8006ff6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ffe:	2b20      	cmp	r3, #32
 8007000:	f040 8083 	bne.w	800710a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d002      	beq.n	8007010 <HAL_UART_Transmit+0x28>
 800700a:	88fb      	ldrh	r3, [r7, #6]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d101      	bne.n	8007014 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	e07b      	b.n	800710c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800701a:	2b01      	cmp	r3, #1
 800701c:	d101      	bne.n	8007022 <HAL_UART_Transmit+0x3a>
 800701e:	2302      	movs	r3, #2
 8007020:	e074      	b.n	800710c <HAL_UART_Transmit+0x124>
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2201      	movs	r2, #1
 8007026:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2200      	movs	r2, #0
 800702e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2221      	movs	r2, #33	; 0x21
 8007036:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800703a:	f7fb fde3 	bl	8002c04 <HAL_GetTick>
 800703e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	88fa      	ldrh	r2, [r7, #6]
 8007044:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	88fa      	ldrh	r2, [r7, #6]
 800704c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007058:	d108      	bne.n	800706c <HAL_UART_Transmit+0x84>
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d104      	bne.n	800706c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007062:	2300      	movs	r3, #0
 8007064:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	61bb      	str	r3, [r7, #24]
 800706a:	e003      	b.n	8007074 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007070:	2300      	movs	r3, #0
 8007072:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2200      	movs	r2, #0
 8007078:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800707c:	e02c      	b.n	80070d8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	9300      	str	r3, [sp, #0]
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	2200      	movs	r2, #0
 8007086:	2180      	movs	r1, #128	; 0x80
 8007088:	68f8      	ldr	r0, [r7, #12]
 800708a:	f000 ffba 	bl	8008002 <UART_WaitOnFlagUntilTimeout>
 800708e:	4603      	mov	r3, r0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d001      	beq.n	8007098 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007094:	2303      	movs	r3, #3
 8007096:	e039      	b.n	800710c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007098:	69fb      	ldr	r3, [r7, #28]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d10b      	bne.n	80070b6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800709e:	69bb      	ldr	r3, [r7, #24]
 80070a0:	881b      	ldrh	r3, [r3, #0]
 80070a2:	461a      	mov	r2, r3
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070ac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	3302      	adds	r3, #2
 80070b2:	61bb      	str	r3, [r7, #24]
 80070b4:	e007      	b.n	80070c6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	781a      	ldrb	r2, [r3, #0]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	3301      	adds	r3, #1
 80070c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	3b01      	subs	r3, #1
 80070d0:	b29a      	uxth	r2, r3
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80070de:	b29b      	uxth	r3, r3
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d1cc      	bne.n	800707e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	9300      	str	r3, [sp, #0]
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	2200      	movs	r2, #0
 80070ec:	2140      	movs	r1, #64	; 0x40
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	f000 ff87 	bl	8008002 <UART_WaitOnFlagUntilTimeout>
 80070f4:	4603      	mov	r3, r0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d001      	beq.n	80070fe <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80070fa:	2303      	movs	r3, #3
 80070fc:	e006      	b.n	800710c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2220      	movs	r2, #32
 8007102:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007106:	2300      	movs	r3, #0
 8007108:	e000      	b.n	800710c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800710a:	2302      	movs	r3, #2
  }
}
 800710c:	4618      	mov	r0, r3
 800710e:	3720      	adds	r7, #32
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <HAL_UART_Receive_IT>:
=======
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	685a      	ldr	r2, [r3, #4]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006042:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	689a      	ldr	r2, [r3, #8]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006052:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f042 0201 	orr.w	r2, r2, #1
 8006062:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 ff31 	bl	8006ecc <UART_CheckIdleState>
 800606a:	4603      	mov	r3, r0
}
 800606c:	4618      	mov	r0, r3
 800606e:	3708      	adds	r7, #8
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <HAL_UART_Receive_IT>:
>>>>>>> ModeSelect_v2
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< HEAD
 8007114:	b580      	push	{r7, lr}
 8007116:	b08a      	sub	sp, #40	; 0x28
 8007118:	af00      	add	r7, sp, #0
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	4613      	mov	r3, r2
 8007120:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007128:	2b20      	cmp	r3, #32
 800712a:	d142      	bne.n	80071b2 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d002      	beq.n	8007138 <HAL_UART_Receive_IT+0x24>
 8007132:	88fb      	ldrh	r3, [r7, #6]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d101      	bne.n	800713c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	e03b      	b.n	80071b4 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007142:	2b01      	cmp	r3, #1
 8007144:	d101      	bne.n	800714a <HAL_UART_Receive_IT+0x36>
 8007146:	2302      	movs	r3, #2
 8007148:	e034      	b.n	80071b4 <HAL_UART_Receive_IT+0xa0>
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2201      	movs	r2, #1
 800714e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2200      	movs	r2, #0
 8007156:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a17      	ldr	r2, [pc, #92]	; (80071bc <HAL_UART_Receive_IT+0xa8>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d01f      	beq.n	80071a2 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800716c:	2b00      	cmp	r3, #0
 800716e:	d018      	beq.n	80071a2 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	617b      	str	r3, [r7, #20]
=======
 8006074:	b580      	push	{r7, lr}
 8006076:	b08a      	sub	sp, #40	; 0x28
 8006078:	af00      	add	r7, sp, #0
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	4613      	mov	r3, r2
 8006080:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006088:	2b20      	cmp	r3, #32
 800608a:	d142      	bne.n	8006112 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d002      	beq.n	8006098 <HAL_UART_Receive_IT+0x24>
 8006092:	88fb      	ldrh	r3, [r7, #6]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d101      	bne.n	800609c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	e03b      	b.n	8006114 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d101      	bne.n	80060aa <HAL_UART_Receive_IT+0x36>
 80060a6:	2302      	movs	r3, #2
 80060a8:	e034      	b.n	8006114 <HAL_UART_Receive_IT+0xa0>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2201      	movs	r2, #1
 80060ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2200      	movs	r2, #0
 80060b6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a17      	ldr	r2, [pc, #92]	; (800611c <HAL_UART_Receive_IT+0xa8>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d01f      	beq.n	8006102 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d018      	beq.n	8006102 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	617b      	str	r3, [r7, #20]
>>>>>>> ModeSelect_v2
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
<<<<<<< HEAD
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	e853 3f00 	ldrex	r3, [r3]
 800717c:	613b      	str	r3, [r7, #16]
   return(result);
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007184:	627b      	str	r3, [r7, #36]	; 0x24
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	461a      	mov	r2, r3
 800718c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718e:	623b      	str	r3, [r7, #32]
 8007190:	61fa      	str	r2, [r7, #28]
=======
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	e853 3f00 	ldrex	r3, [r3]
 80060dc:	613b      	str	r3, [r7, #16]
   return(result);
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80060e4:	627b      	str	r3, [r7, #36]	; 0x24
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	461a      	mov	r2, r3
 80060ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ee:	623b      	str	r3, [r7, #32]
 80060f0:	61fa      	str	r2, [r7, #28]
>>>>>>> ModeSelect_v2
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
<<<<<<< HEAD
 8007192:	69f9      	ldr	r1, [r7, #28]
 8007194:	6a3a      	ldr	r2, [r7, #32]
 8007196:	e841 2300 	strex	r3, r2, [r1]
 800719a:	61bb      	str	r3, [r7, #24]
   return(result);
 800719c:	69bb      	ldr	r3, [r7, #24]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d1e6      	bne.n	8007170 <HAL_UART_Receive_IT+0x5c>
=======
 80060f2:	69f9      	ldr	r1, [r7, #28]
 80060f4:	6a3a      	ldr	r2, [r7, #32]
 80060f6:	e841 2300 	strex	r3, r2, [r1]
 80060fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d1e6      	bne.n	80060d0 <HAL_UART_Receive_IT+0x5c>
>>>>>>> ModeSelect_v2
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
<<<<<<< HEAD
 80071a2:	88fb      	ldrh	r3, [r7, #6]
 80071a4:	461a      	mov	r2, r3
 80071a6:	68b9      	ldr	r1, [r7, #8]
 80071a8:	68f8      	ldr	r0, [r7, #12]
 80071aa:	f000 fff3 	bl	8008194 <UART_Start_Receive_IT>
 80071ae:	4603      	mov	r3, r0
 80071b0:	e000      	b.n	80071b4 <HAL_UART_Receive_IT+0xa0>
=======
 8006102:	88fb      	ldrh	r3, [r7, #6]
 8006104:	461a      	mov	r2, r3
 8006106:	68b9      	ldr	r1, [r7, #8]
 8006108:	68f8      	ldr	r0, [r7, #12]
 800610a:	f000 fff3 	bl	80070f4 <UART_Start_Receive_IT>
 800610e:	4603      	mov	r3, r0
 8006110:	e000      	b.n	8006114 <HAL_UART_Receive_IT+0xa0>
>>>>>>> ModeSelect_v2
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 80071b2:	2302      	movs	r3, #2
  }
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3728      	adds	r7, #40	; 0x28
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}
 80071bc:	40008000 	.word	0x40008000

080071c0 <HAL_UART_IRQHandler>:
=======
 8006112:	2302      	movs	r3, #2
  }
}
 8006114:	4618      	mov	r0, r3
 8006116:	3728      	adds	r7, #40	; 0x28
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}
 800611c:	40008000 	.word	0x40008000

08006120 <HAL_UART_IRQHandler>:
>>>>>>> ModeSelect_v2
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b0ba      	sub	sp, #232	; 0xe8
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	69db      	ldr	r3, [r3, #28]
 80071ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
=======
 8006120:	b580      	push	{r7, lr}
 8006122:	b0ba      	sub	sp, #232	; 0xe8
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	69db      	ldr	r3, [r3, #28]
 800612e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
>>>>>>> ModeSelect_v2

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
<<<<<<< HEAD
 80071e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80071ea:	f640 030f 	movw	r3, #2063	; 0x80f
 80071ee:	4013      	ands	r3, r2
 80071f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80071f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d11b      	bne.n	8007234 <HAL_UART_IRQHandler+0x74>
=======
 8006146:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800614a:	f640 030f 	movw	r3, #2063	; 0x80f
 800614e:	4013      	ands	r3, r2
 8006150:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006154:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006158:	2b00      	cmp	r3, #0
 800615a:	d11b      	bne.n	8006194 <HAL_UART_IRQHandler+0x74>
>>>>>>> ModeSelect_v2
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
<<<<<<< HEAD
 80071fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007200:	f003 0320 	and.w	r3, r3, #32
 8007204:	2b00      	cmp	r3, #0
 8007206:	d015      	beq.n	8007234 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800720c:	f003 0320 	and.w	r3, r3, #32
 8007210:	2b00      	cmp	r3, #0
 8007212:	d105      	bne.n	8007220 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007214:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800721c:	2b00      	cmp	r3, #0
 800721e:	d009      	beq.n	8007234 <HAL_UART_IRQHandler+0x74>
=======
 800615c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006160:	f003 0320 	and.w	r3, r3, #32
 8006164:	2b00      	cmp	r3, #0
 8006166:	d015      	beq.n	8006194 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800616c:	f003 0320 	and.w	r3, r3, #32
 8006170:	2b00      	cmp	r3, #0
 8006172:	d105      	bne.n	8006180 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006174:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800617c:	2b00      	cmp	r3, #0
 800617e:	d009      	beq.n	8006194 <HAL_UART_IRQHandler+0x74>
>>>>>>> ModeSelect_v2
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
<<<<<<< HEAD
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007224:	2b00      	cmp	r3, #0
 8007226:	f000 82d6 	beq.w	80077d6 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	4798      	blx	r3
      }
      return;
 8007232:	e2d0      	b.n	80077d6 <HAL_UART_IRQHandler+0x616>
=======
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006184:	2b00      	cmp	r3, #0
 8006186:	f000 82d6 	beq.w	8006736 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	4798      	blx	r3
      }
      return;
 8006192:	e2d0      	b.n	8006736 <HAL_UART_IRQHandler+0x616>
>>>>>>> ModeSelect_v2
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
<<<<<<< HEAD
 8007234:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007238:	2b00      	cmp	r3, #0
 800723a:	f000 811f 	beq.w	800747c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800723e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007242:	4b8b      	ldr	r3, [pc, #556]	; (8007470 <HAL_UART_IRQHandler+0x2b0>)
 8007244:	4013      	ands	r3, r2
 8007246:	2b00      	cmp	r3, #0
 8007248:	d106      	bne.n	8007258 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800724a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800724e:	4b89      	ldr	r3, [pc, #548]	; (8007474 <HAL_UART_IRQHandler+0x2b4>)
 8007250:	4013      	ands	r3, r2
 8007252:	2b00      	cmp	r3, #0
 8007254:	f000 8112 	beq.w	800747c <HAL_UART_IRQHandler+0x2bc>
=======
 8006194:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006198:	2b00      	cmp	r3, #0
 800619a:	f000 811f 	beq.w	80063dc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800619e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80061a2:	4b8b      	ldr	r3, [pc, #556]	; (80063d0 <HAL_UART_IRQHandler+0x2b0>)
 80061a4:	4013      	ands	r3, r2
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d106      	bne.n	80061b8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80061aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80061ae:	4b89      	ldr	r3, [pc, #548]	; (80063d4 <HAL_UART_IRQHandler+0x2b4>)
 80061b0:	4013      	ands	r3, r2
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	f000 8112 	beq.w	80063dc <HAL_UART_IRQHandler+0x2bc>
>>>>>>> ModeSelect_v2
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
<<<<<<< HEAD
 8007258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800725c:	f003 0301 	and.w	r3, r3, #1
 8007260:	2b00      	cmp	r3, #0
 8007262:	d011      	beq.n	8007288 <HAL_UART_IRQHandler+0xc8>
 8007264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800726c:	2b00      	cmp	r3, #0
 800726e:	d00b      	beq.n	8007288 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	2201      	movs	r2, #1
 8007276:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800727e:	f043 0201 	orr.w	r2, r3, #1
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
=======
 80061b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061bc:	f003 0301 	and.w	r3, r3, #1
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d011      	beq.n	80061e8 <HAL_UART_IRQHandler+0xc8>
 80061c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00b      	beq.n	80061e8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2201      	movs	r2, #1
 80061d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061de:	f043 0201 	orr.w	r2, r3, #1
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
>>>>>>> ModeSelect_v2
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< HEAD
 8007288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800728c:	f003 0302 	and.w	r3, r3, #2
 8007290:	2b00      	cmp	r3, #0
 8007292:	d011      	beq.n	80072b8 <HAL_UART_IRQHandler+0xf8>
 8007294:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007298:	f003 0301 	and.w	r3, r3, #1
 800729c:	2b00      	cmp	r3, #0
 800729e:	d00b      	beq.n	80072b8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	2202      	movs	r2, #2
 80072a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072ae:	f043 0204 	orr.w	r2, r3, #4
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
=======
 80061e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ec:	f003 0302 	and.w	r3, r3, #2
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d011      	beq.n	8006218 <HAL_UART_IRQHandler+0xf8>
 80061f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061f8:	f003 0301 	and.w	r3, r3, #1
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00b      	beq.n	8006218 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2202      	movs	r2, #2
 8006206:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800620e:	f043 0204 	orr.w	r2, r3, #4
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
>>>>>>> ModeSelect_v2
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< HEAD
 80072b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072bc:	f003 0304 	and.w	r3, r3, #4
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d011      	beq.n	80072e8 <HAL_UART_IRQHandler+0x128>
 80072c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072c8:	f003 0301 	and.w	r3, r3, #1
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d00b      	beq.n	80072e8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	2204      	movs	r2, #4
 80072d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072de:	f043 0202 	orr.w	r2, r3, #2
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
=======
 8006218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800621c:	f003 0304 	and.w	r3, r3, #4
 8006220:	2b00      	cmp	r3, #0
 8006222:	d011      	beq.n	8006248 <HAL_UART_IRQHandler+0x128>
 8006224:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006228:	f003 0301 	and.w	r3, r3, #1
 800622c:	2b00      	cmp	r3, #0
 800622e:	d00b      	beq.n	8006248 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2204      	movs	r2, #4
 8006236:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800623e:	f043 0202 	orr.w	r2, r3, #2
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
>>>>>>> ModeSelect_v2
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
<<<<<<< HEAD
 80072e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072ec:	f003 0308 	and.w	r3, r3, #8
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d017      	beq.n	8007324 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80072f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072f8:	f003 0320 	and.w	r3, r3, #32
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d105      	bne.n	800730c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007300:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007304:	4b5a      	ldr	r3, [pc, #360]	; (8007470 <HAL_UART_IRQHandler+0x2b0>)
 8007306:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007308:	2b00      	cmp	r3, #0
 800730a:	d00b      	beq.n	8007324 <HAL_UART_IRQHandler+0x164>
=======
 8006248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800624c:	f003 0308 	and.w	r3, r3, #8
 8006250:	2b00      	cmp	r3, #0
 8006252:	d017      	beq.n	8006284 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006258:	f003 0320 	and.w	r3, r3, #32
 800625c:	2b00      	cmp	r3, #0
 800625e:	d105      	bne.n	800626c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006260:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006264:	4b5a      	ldr	r3, [pc, #360]	; (80063d0 <HAL_UART_IRQHandler+0x2b0>)
 8006266:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00b      	beq.n	8006284 <HAL_UART_IRQHandler+0x164>
>>>>>>> ModeSelect_v2
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
<<<<<<< HEAD
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	2208      	movs	r2, #8
 8007312:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800731a:	f043 0208 	orr.w	r2, r3, #8
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
=======
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	2208      	movs	r2, #8
 8006272:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800627a:	f043 0208 	orr.w	r2, r3, #8
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
>>>>>>> ModeSelect_v2
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
<<<<<<< HEAD
 8007324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007328:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800732c:	2b00      	cmp	r3, #0
 800732e:	d012      	beq.n	8007356 <HAL_UART_IRQHandler+0x196>
 8007330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007334:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007338:	2b00      	cmp	r3, #0
 800733a:	d00c      	beq.n	8007356 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007344:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800734c:	f043 0220 	orr.w	r2, r3, #32
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
=======
 8006284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006288:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800628c:	2b00      	cmp	r3, #0
 800628e:	d012      	beq.n	80062b6 <HAL_UART_IRQHandler+0x196>
 8006290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006294:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00c      	beq.n	80062b6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062ac:	f043 0220 	orr.w	r2, r3, #32
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
>>>>>>> ModeSelect_v2
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
<<<<<<< HEAD
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800735c:	2b00      	cmp	r3, #0
 800735e:	f000 823c 	beq.w	80077da <HAL_UART_IRQHandler+0x61a>
=======
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062bc:	2b00      	cmp	r3, #0
 80062be:	f000 823c 	beq.w	800673a <HAL_UART_IRQHandler+0x61a>
>>>>>>> ModeSelect_v2
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
<<<<<<< HEAD
 8007362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007366:	f003 0320 	and.w	r3, r3, #32
 800736a:	2b00      	cmp	r3, #0
 800736c:	d013      	beq.n	8007396 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800736e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007372:	f003 0320 	and.w	r3, r3, #32
 8007376:	2b00      	cmp	r3, #0
 8007378:	d105      	bne.n	8007386 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800737a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800737e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007382:	2b00      	cmp	r3, #0
 8007384:	d007      	beq.n	8007396 <HAL_UART_IRQHandler+0x1d6>
=======
 80062c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062c6:	f003 0320 	and.w	r3, r3, #32
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d013      	beq.n	80062f6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80062ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062d2:	f003 0320 	and.w	r3, r3, #32
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d105      	bne.n	80062e6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80062da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d007      	beq.n	80062f6 <HAL_UART_IRQHandler+0x1d6>
>>>>>>> ModeSelect_v2
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
<<<<<<< HEAD
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800738a:	2b00      	cmp	r3, #0
 800738c:	d003      	beq.n	8007396 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	4798      	blx	r3
=======
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d003      	beq.n	80062f6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	4798      	blx	r3
>>>>>>> ModeSelect_v2
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
<<<<<<< HEAD
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800739c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073aa:	2b40      	cmp	r3, #64	; 0x40
 80073ac:	d005      	beq.n	80073ba <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80073ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80073b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d04f      	beq.n	800745a <HAL_UART_IRQHandler+0x29a>
=======
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800630a:	2b40      	cmp	r3, #64	; 0x40
 800630c:	d005      	beq.n	800631a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800630e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006312:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006316:	2b00      	cmp	r3, #0
 8006318:	d04f      	beq.n	80063ba <HAL_UART_IRQHandler+0x29a>
>>>>>>> ModeSelect_v2
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
<<<<<<< HEAD
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f001 f814 	bl	80083e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ca:	2b40      	cmp	r3, #64	; 0x40
 80073cc:	d141      	bne.n	8007452 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	3308      	adds	r3, #8
 80073d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80073dc:	e853 3f00 	ldrex	r3, [r3]
 80073e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80073e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80073e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	3308      	adds	r3, #8
 80073f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80073fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80073fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007402:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007406:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800740a:	e841 2300 	strex	r3, r2, [r1]
 800740e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007412:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007416:	2b00      	cmp	r3, #0
 8007418:	d1d9      	bne.n	80073ce <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800741e:	2b00      	cmp	r3, #0
 8007420:	d013      	beq.n	800744a <HAL_UART_IRQHandler+0x28a>
=======
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f001 f814 	bl	8007348 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800632a:	2b40      	cmp	r3, #64	; 0x40
 800632c:	d141      	bne.n	80063b2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	3308      	adds	r3, #8
 8006334:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006338:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800633c:	e853 3f00 	ldrex	r3, [r3]
 8006340:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006344:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006348:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800634c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	3308      	adds	r3, #8
 8006356:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800635a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800635e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006362:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006366:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800636a:	e841 2300 	strex	r3, r2, [r1]
 800636e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006372:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d1d9      	bne.n	800632e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800637e:	2b00      	cmp	r3, #0
 8006380:	d013      	beq.n	80063aa <HAL_UART_IRQHandler+0x28a>
>>>>>>> ModeSelect_v2
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
<<<<<<< HEAD
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007426:	4a14      	ldr	r2, [pc, #80]	; (8007478 <HAL_UART_IRQHandler+0x2b8>)
 8007428:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800742e:	4618      	mov	r0, r3
 8007430:	f7fb fd85 	bl	8002f3e <HAL_DMA_Abort_IT>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d017      	beq.n	800746a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800743e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007444:	4610      	mov	r0, r2
 8007446:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007448:	e00f      	b.n	800746a <HAL_UART_IRQHandler+0x2aa>
=======
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006386:	4a14      	ldr	r2, [pc, #80]	; (80063d8 <HAL_UART_IRQHandler+0x2b8>)
 8006388:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800638e:	4618      	mov	r0, r3
 8006390:	f7fb fe33 	bl	8001ffa <HAL_DMA_Abort_IT>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d017      	beq.n	80063ca <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800639e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80063a4:	4610      	mov	r0, r2
 80063a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063a8:	e00f      	b.n	80063ca <HAL_UART_IRQHandler+0x2aa>
>>>>>>> ModeSelect_v2
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 f9da 	bl	8007804 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007450:	e00b      	b.n	800746a <HAL_UART_IRQHandler+0x2aa>
=======
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 f9da 	bl	8006764 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063b0:	e00b      	b.n	80063ca <HAL_UART_IRQHandler+0x2aa>
>>>>>>> ModeSelect_v2
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 f9d6 	bl	8007804 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007458:	e007      	b.n	800746a <HAL_UART_IRQHandler+0x2aa>
=======
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 f9d6 	bl	8006764 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063b8:	e007      	b.n	80063ca <HAL_UART_IRQHandler+0x2aa>
>>>>>>> ModeSelect_v2
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 f9d2 	bl	8007804 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007468:	e1b7      	b.n	80077da <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800746a:	bf00      	nop
    return;
 800746c:	e1b5      	b.n	80077da <HAL_UART_IRQHandler+0x61a>
 800746e:	bf00      	nop
 8007470:	10000001 	.word	0x10000001
 8007474:	04000120 	.word	0x04000120
 8007478:	080084b5 	.word	0x080084b5
=======
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 f9d2 	bl	8006764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80063c8:	e1b7      	b.n	800673a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063ca:	bf00      	nop
    return;
 80063cc:	e1b5      	b.n	800673a <HAL_UART_IRQHandler+0x61a>
 80063ce:	bf00      	nop
 80063d0:	10000001 	.word	0x10000001
 80063d4:	04000120 	.word	0x04000120
 80063d8:	08007415 	.word	0x08007415
>>>>>>> ModeSelect_v2

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007480:	2b01      	cmp	r3, #1
 8007482:	f040 814a 	bne.w	800771a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800748a:	f003 0310 	and.w	r3, r3, #16
 800748e:	2b00      	cmp	r3, #0
 8007490:	f000 8143 	beq.w	800771a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007498:	f003 0310 	and.w	r3, r3, #16
 800749c:	2b00      	cmp	r3, #0
 800749e:	f000 813c 	beq.w	800771a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	2210      	movs	r2, #16
 80074a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074b4:	2b40      	cmp	r3, #64	; 0x40
 80074b6:	f040 80b5 	bne.w	8007624 <HAL_UART_IRQHandler+0x464>
=======
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	f040 814a 	bne.w	800667a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80063e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ea:	f003 0310 	and.w	r3, r3, #16
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	f000 8143 	beq.w	800667a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80063f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063f8:	f003 0310 	and.w	r3, r3, #16
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f000 813c 	beq.w	800667a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	2210      	movs	r2, #16
 8006408:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006414:	2b40      	cmp	r3, #64	; 0x40
 8006416:	f040 80b5 	bne.w	8006584 <HAL_UART_IRQHandler+0x464>
>>>>>>> ModeSelect_v2
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
<<<<<<< HEAD
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80074c6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	f000 8187 	beq.w	80077de <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80074d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80074da:	429a      	cmp	r2, r3
 80074dc:	f080 817f 	bcs.w	80077de <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80074e6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 0320 	and.w	r3, r3, #32
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	f040 8086 	bne.w	8007608 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007504:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007508:	e853 3f00 	ldrex	r3, [r3]
 800750c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007510:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007514:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007518:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	461a      	mov	r2, r3
 8007522:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007526:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800752a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007532:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007536:	e841 2300 	strex	r3, r2, [r1]
 800753a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800753e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007542:	2b00      	cmp	r3, #0
 8007544:	d1da      	bne.n	80074fc <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	3308      	adds	r3, #8
 800754c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800754e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007550:	e853 3f00 	ldrex	r3, [r3]
 8007554:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007556:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007558:	f023 0301 	bic.w	r3, r3, #1
 800755c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	3308      	adds	r3, #8
 8007566:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800756a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800756e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007570:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007572:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007576:	e841 2300 	strex	r3, r2, [r1]
 800757a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800757c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800757e:	2b00      	cmp	r3, #0
 8007580:	d1e1      	bne.n	8007546 <HAL_UART_IRQHandler+0x386>
=======
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006426:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800642a:	2b00      	cmp	r3, #0
 800642c:	f000 8187 	beq.w	800673e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006436:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800643a:	429a      	cmp	r2, r3
 800643c:	f080 817f 	bcs.w	800673e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006446:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 0320 	and.w	r3, r3, #32
 8006456:	2b00      	cmp	r3, #0
 8006458:	f040 8086 	bne.w	8006568 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006464:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006468:	e853 3f00 	ldrex	r3, [r3]
 800646c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006470:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006474:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006478:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	461a      	mov	r2, r3
 8006482:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006486:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800648a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006492:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006496:	e841 2300 	strex	r3, r2, [r1]
 800649a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800649e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d1da      	bne.n	800645c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	3308      	adds	r3, #8
 80064ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064b0:	e853 3f00 	ldrex	r3, [r3]
 80064b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80064b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064b8:	f023 0301 	bic.w	r3, r3, #1
 80064bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	3308      	adds	r3, #8
 80064c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80064ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80064ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80064d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80064d6:	e841 2300 	strex	r3, r2, [r1]
 80064da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80064dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1e1      	bne.n	80064a6 <HAL_UART_IRQHandler+0x386>
>>>>>>> ModeSelect_v2

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< HEAD
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	3308      	adds	r3, #8
 8007588:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800758a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800758c:	e853 3f00 	ldrex	r3, [r3]
 8007590:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007592:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007594:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007598:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	3308      	adds	r3, #8
 80075a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80075a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80075a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80075ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80075ae:	e841 2300 	strex	r3, r2, [r1]
 80075b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80075b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d1e3      	bne.n	8007582 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2220      	movs	r2, #32
 80075be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075d0:	e853 3f00 	ldrex	r3, [r3]
 80075d4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80075d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075d8:	f023 0310 	bic.w	r3, r3, #16
 80075dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	461a      	mov	r2, r3
 80075e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80075ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80075ec:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80075f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80075f2:	e841 2300 	strex	r3, r2, [r1]
 80075f6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80075f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d1e4      	bne.n	80075c8 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007602:	4618      	mov	r0, r3
 8007604:	f7fb fc3f 	bl	8002e86 <HAL_DMA_Abort>
=======
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	3308      	adds	r3, #8
 80064e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064ec:	e853 3f00 	ldrex	r3, [r3]
 80064f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80064f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	3308      	adds	r3, #8
 8006502:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006506:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006508:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800650a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800650c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800650e:	e841 2300 	strex	r3, r2, [r1]
 8006512:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006514:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1e3      	bne.n	80064e2 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2220      	movs	r2, #32
 800651e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006530:	e853 3f00 	ldrex	r3, [r3]
 8006534:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006536:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006538:	f023 0310 	bic.w	r3, r3, #16
 800653c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	461a      	mov	r2, r3
 8006546:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800654a:	65bb      	str	r3, [r7, #88]	; 0x58
 800654c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006550:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006552:	e841 2300 	strex	r3, r2, [r1]
 8006556:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006558:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800655a:	2b00      	cmp	r3, #0
 800655c:	d1e4      	bne.n	8006528 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006562:	4618      	mov	r0, r3
 8006564:	f7fb fced 	bl	8001f42 <HAL_DMA_Abort>
>>>>>>> ModeSelect_v2
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
<<<<<<< HEAD
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007614:	b29b      	uxth	r3, r3
 8007616:	1ad3      	subs	r3, r2, r3
 8007618:	b29b      	uxth	r3, r3
 800761a:	4619      	mov	r1, r3
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 f8fb 	bl	8007818 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007622:	e0dc      	b.n	80077de <HAL_UART_IRQHandler+0x61e>
=======
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006574:	b29b      	uxth	r3, r3
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	b29b      	uxth	r3, r3
 800657a:	4619      	mov	r1, r3
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 f8fb 	bl	8006778 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006582:	e0dc      	b.n	800673e <HAL_UART_IRQHandler+0x61e>
>>>>>>> ModeSelect_v2
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
<<<<<<< HEAD
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007630:	b29b      	uxth	r3, r3
 8007632:	1ad3      	subs	r3, r2, r3
 8007634:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800763e:	b29b      	uxth	r3, r3
 8007640:	2b00      	cmp	r3, #0
 8007642:	f000 80ce 	beq.w	80077e2 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8007646:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800764a:	2b00      	cmp	r3, #0
 800764c:	f000 80c9 	beq.w	80077e2 <HAL_UART_IRQHandler+0x622>
=======
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006590:	b29b      	uxth	r3, r3
 8006592:	1ad3      	subs	r3, r2, r3
 8006594:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800659e:	b29b      	uxth	r3, r3
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	f000 80ce 	beq.w	8006742 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 80065a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	f000 80c9 	beq.w	8006742 <HAL_UART_IRQHandler+0x622>
>>>>>>> ModeSelect_v2
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
<<<<<<< HEAD
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007658:	e853 3f00 	ldrex	r3, [r3]
 800765c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800765e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007660:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007664:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	461a      	mov	r2, r3
 800766e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007672:	647b      	str	r3, [r7, #68]	; 0x44
 8007674:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007676:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007678:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800767a:	e841 2300 	strex	r3, r2, [r1]
 800767e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007682:	2b00      	cmp	r3, #0
 8007684:	d1e4      	bne.n	8007650 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	3308      	adds	r3, #8
 800768c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800768e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007690:	e853 3f00 	ldrex	r3, [r3]
 8007694:	623b      	str	r3, [r7, #32]
   return(result);
 8007696:	6a3b      	ldr	r3, [r7, #32]
 8007698:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800769c:	f023 0301 	bic.w	r3, r3, #1
 80076a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	3308      	adds	r3, #8
 80076aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80076ae:	633a      	str	r2, [r7, #48]	; 0x30
 80076b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076b6:	e841 2300 	strex	r3, r2, [r1]
 80076ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80076bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d1e1      	bne.n	8007686 <HAL_UART_IRQHandler+0x4c6>
=======
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b8:	e853 3f00 	ldrex	r3, [r3]
 80065bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80065be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	461a      	mov	r2, r3
 80065ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065d2:	647b      	str	r3, [r7, #68]	; 0x44
 80065d4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065da:	e841 2300 	strex	r3, r2, [r1]
 80065de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80065e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d1e4      	bne.n	80065b0 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	3308      	adds	r3, #8
 80065ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f0:	e853 3f00 	ldrex	r3, [r3]
 80065f4:	623b      	str	r3, [r7, #32]
   return(result);
 80065f6:	6a3b      	ldr	r3, [r7, #32]
 80065f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065fc:	f023 0301 	bic.w	r3, r3, #1
 8006600:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	3308      	adds	r3, #8
 800660a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800660e:	633a      	str	r2, [r7, #48]	; 0x30
 8006610:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006612:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006614:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006616:	e841 2300 	strex	r3, r2, [r1]
 800661a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800661c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1e1      	bne.n	80065e6 <HAL_UART_IRQHandler+0x4c6>
>>>>>>> ModeSelect_v2
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2220      	movs	r2, #32
 80076c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	e853 3f00 	ldrex	r3, [r3]
 80076e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f023 0310 	bic.w	r3, r3, #16
 80076ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	461a      	mov	r2, r3
 80076f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80076f8:	61fb      	str	r3, [r7, #28]
 80076fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076fc:	69b9      	ldr	r1, [r7, #24]
 80076fe:	69fa      	ldr	r2, [r7, #28]
 8007700:	e841 2300 	strex	r3, r2, [r1]
 8007704:	617b      	str	r3, [r7, #20]
   return(result);
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d1e4      	bne.n	80076d6 <HAL_UART_IRQHandler+0x516>
=======
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2220      	movs	r2, #32
 8006626:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	e853 3f00 	ldrex	r3, [r3]
 8006642:	60fb      	str	r3, [r7, #12]
   return(result);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f023 0310 	bic.w	r3, r3, #16
 800664a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	461a      	mov	r2, r3
 8006654:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006658:	61fb      	str	r3, [r7, #28]
 800665a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665c:	69b9      	ldr	r1, [r7, #24]
 800665e:	69fa      	ldr	r2, [r7, #28]
 8006660:	e841 2300 	strex	r3, r2, [r1]
 8006664:	617b      	str	r3, [r7, #20]
   return(result);
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d1e4      	bne.n	8006636 <HAL_UART_IRQHandler+0x516>
>>>>>>> ModeSelect_v2
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
<<<<<<< HEAD
 800770c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007710:	4619      	mov	r1, r3
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 f880 	bl	8007818 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007718:	e063      	b.n	80077e2 <HAL_UART_IRQHandler+0x622>
=======
 800666c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006670:	4619      	mov	r1, r3
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 f880 	bl	8006778 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006678:	e063      	b.n	8006742 <HAL_UART_IRQHandler+0x622>
>>>>>>> ModeSelect_v2
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
<<<<<<< HEAD
 800771a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800771e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007722:	2b00      	cmp	r3, #0
 8007724:	d00e      	beq.n	8007744 <HAL_UART_IRQHandler+0x584>
 8007726:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800772a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800772e:	2b00      	cmp	r3, #0
 8007730:	d008      	beq.n	8007744 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800773a:	621a      	str	r2, [r3, #32]
=======
 800667a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800667e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006682:	2b00      	cmp	r3, #0
 8006684:	d00e      	beq.n	80066a4 <HAL_UART_IRQHandler+0x584>
 8006686:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800668a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800668e:	2b00      	cmp	r3, #0
 8006690:	d008      	beq.n	80066a4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800669a:	621a      	str	r2, [r3, #32]
>>>>>>> ModeSelect_v2
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
<<<<<<< HEAD
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f001 fb57 	bl	8008df0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007742:	e051      	b.n	80077e8 <HAL_UART_IRQHandler+0x628>
=======
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f001 fb57 	bl	8007d50 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80066a2:	e051      	b.n	8006748 <HAL_UART_IRQHandler+0x628>
>>>>>>> ModeSelect_v2
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
<<<<<<< HEAD
 8007744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800774c:	2b00      	cmp	r3, #0
 800774e:	d014      	beq.n	800777a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007758:	2b00      	cmp	r3, #0
 800775a:	d105      	bne.n	8007768 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800775c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007760:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007764:	2b00      	cmp	r3, #0
 8007766:	d008      	beq.n	800777a <HAL_UART_IRQHandler+0x5ba>
=======
 80066a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d014      	beq.n	80066da <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80066b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d105      	bne.n	80066c8 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80066bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d008      	beq.n	80066da <HAL_UART_IRQHandler+0x5ba>
>>>>>>> ModeSelect_v2
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
<<<<<<< HEAD
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800776c:	2b00      	cmp	r3, #0
 800776e:	d03a      	beq.n	80077e6 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	4798      	blx	r3
    }
    return;
 8007778:	e035      	b.n	80077e6 <HAL_UART_IRQHandler+0x626>
=======
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d03a      	beq.n	8006746 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	4798      	blx	r3
    }
    return;
 80066d8:	e035      	b.n	8006746 <HAL_UART_IRQHandler+0x626>
>>>>>>> ModeSelect_v2
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
<<<<<<< HEAD
 800777a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800777e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007782:	2b00      	cmp	r3, #0
 8007784:	d009      	beq.n	800779a <HAL_UART_IRQHandler+0x5da>
 8007786:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800778a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800778e:	2b00      	cmp	r3, #0
 8007790:	d003      	beq.n	800779a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 fea4 	bl	80084e0 <UART_EndTransmit_IT>
    return;
 8007798:	e026      	b.n	80077e8 <HAL_UART_IRQHandler+0x628>
=======
 80066da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d009      	beq.n	80066fa <HAL_UART_IRQHandler+0x5da>
 80066e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d003      	beq.n	80066fa <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 fea4 	bl	8007440 <UART_EndTransmit_IT>
    return;
 80066f8:	e026      	b.n	8006748 <HAL_UART_IRQHandler+0x628>
>>>>>>> ModeSelect_v2
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
<<<<<<< HEAD
 800779a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800779e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d009      	beq.n	80077ba <HAL_UART_IRQHandler+0x5fa>
 80077a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077aa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d003      	beq.n	80077ba <HAL_UART_IRQHandler+0x5fa>
=======
 80066fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006702:	2b00      	cmp	r3, #0
 8006704:	d009      	beq.n	800671a <HAL_UART_IRQHandler+0x5fa>
 8006706:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800670a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800670e:	2b00      	cmp	r3, #0
 8006710:	d003      	beq.n	800671a <HAL_UART_IRQHandler+0x5fa>
>>>>>>> ModeSelect_v2
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
<<<<<<< HEAD
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f001 fb30 	bl	8008e18 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80077b8:	e016      	b.n	80077e8 <HAL_UART_IRQHandler+0x628>
=======
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f001 fb30 	bl	8007d78 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006718:	e016      	b.n	8006748 <HAL_UART_IRQHandler+0x628>
>>>>>>> ModeSelect_v2
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
<<<<<<< HEAD
 80077ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d010      	beq.n	80077e8 <HAL_UART_IRQHandler+0x628>
 80077c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	da0c      	bge.n	80077e8 <HAL_UART_IRQHandler+0x628>
=======
 800671a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800671e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006722:	2b00      	cmp	r3, #0
 8006724:	d010      	beq.n	8006748 <HAL_UART_IRQHandler+0x628>
 8006726:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800672a:	2b00      	cmp	r3, #0
 800672c:	da0c      	bge.n	8006748 <HAL_UART_IRQHandler+0x628>
>>>>>>> ModeSelect_v2
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
<<<<<<< HEAD
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f001 fb18 	bl	8008e04 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80077d4:	e008      	b.n	80077e8 <HAL_UART_IRQHandler+0x628>
      return;
 80077d6:	bf00      	nop
 80077d8:	e006      	b.n	80077e8 <HAL_UART_IRQHandler+0x628>
    return;
 80077da:	bf00      	nop
 80077dc:	e004      	b.n	80077e8 <HAL_UART_IRQHandler+0x628>
      return;
 80077de:	bf00      	nop
 80077e0:	e002      	b.n	80077e8 <HAL_UART_IRQHandler+0x628>
      return;
 80077e2:	bf00      	nop
 80077e4:	e000      	b.n	80077e8 <HAL_UART_IRQHandler+0x628>
    return;
 80077e6:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 80077e8:	37e8      	adds	r7, #232	; 0xe8
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop

080077f0 <HAL_UART_TxCpltCallback>:
=======
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f001 fb18 	bl	8007d64 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006734:	e008      	b.n	8006748 <HAL_UART_IRQHandler+0x628>
      return;
 8006736:	bf00      	nop
 8006738:	e006      	b.n	8006748 <HAL_UART_IRQHandler+0x628>
    return;
 800673a:	bf00      	nop
 800673c:	e004      	b.n	8006748 <HAL_UART_IRQHandler+0x628>
      return;
 800673e:	bf00      	nop
 8006740:	e002      	b.n	8006748 <HAL_UART_IRQHandler+0x628>
      return;
 8006742:	bf00      	nop
 8006744:	e000      	b.n	8006748 <HAL_UART_IRQHandler+0x628>
    return;
 8006746:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8006748:	37e8      	adds	r7, #232	; 0xe8
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop

08006750 <HAL_UART_TxCpltCallback>:
>>>>>>> ModeSelect_v2
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80077f0:	b480      	push	{r7}
 80077f2:	b083      	sub	sp, #12
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
=======
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
>>>>>>> ModeSelect_v2
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 80077f8:	bf00      	nop
 80077fa:	370c      	adds	r7, #12
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <HAL_UART_ErrorCallback>:
=======
 8006758:	bf00      	nop
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <HAL_UART_ErrorCallback>:
>>>>>>> ModeSelect_v2
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
=======
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
>>>>>>> ModeSelect_v2
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 800780c:	bf00      	nop
 800780e:	370c      	adds	r7, #12
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr

08007818 <HAL_UARTEx_RxEventCallback>:
=======
 800676c:	bf00      	nop
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <HAL_UARTEx_RxEventCallback>:
>>>>>>> ModeSelect_v2
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
<<<<<<< HEAD
 8007818:	b480      	push	{r7}
 800781a:	b083      	sub	sp, #12
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	460b      	mov	r3, r1
 8007822:	807b      	strh	r3, [r7, #2]
=======
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	460b      	mov	r3, r1
 8006782:	807b      	strh	r3, [r7, #2]
>>>>>>> ModeSelect_v2
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 8007824:	bf00      	nop
 8007826:	370c      	adds	r7, #12
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <UART_SetConfig>:
=======
 8006784:	bf00      	nop
 8006786:	370c      	adds	r7, #12
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <UART_SetConfig>:
>>>>>>> ModeSelect_v2
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8007830:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007834:	b08c      	sub	sp, #48	; 0x30
 8007836:	af00      	add	r7, sp, #0
 8007838:	6178      	str	r0, [r7, #20]
=======
 8006790:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006794:	b08c      	sub	sp, #48	; 0x30
 8006796:	af00      	add	r7, sp, #0
 8006798:	6178      	str	r0, [r7, #20]
>>>>>>> ModeSelect_v2
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
<<<<<<< HEAD
 800783a:	2300      	movs	r3, #0
 800783c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
=======
 800679a:	2300      	movs	r3, #0
 800679c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
>>>>>>> ModeSelect_v2
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
<<<<<<< HEAD
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	689a      	ldr	r2, [r3, #8]
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	691b      	ldr	r3, [r3, #16]
 8007848:	431a      	orrs	r2, r3
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	695b      	ldr	r3, [r3, #20]
 800784e:	431a      	orrs	r2, r3
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	69db      	ldr	r3, [r3, #28]
 8007854:	4313      	orrs	r3, r2
 8007856:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	4baa      	ldr	r3, [pc, #680]	; (8007b08 <UART_SetConfig+0x2d8>)
 8007860:	4013      	ands	r3, r2
 8007862:	697a      	ldr	r2, [r7, #20]
 8007864:	6812      	ldr	r2, [r2, #0]
 8007866:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007868:	430b      	orrs	r3, r1
 800786a:	6013      	str	r3, [r2, #0]
=======
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	689a      	ldr	r2, [r3, #8]
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	691b      	ldr	r3, [r3, #16]
 80067a8:	431a      	orrs	r2, r3
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	695b      	ldr	r3, [r3, #20]
 80067ae:	431a      	orrs	r2, r3
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	69db      	ldr	r3, [r3, #28]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	4baa      	ldr	r3, [pc, #680]	; (8006a68 <UART_SetConfig+0x2d8>)
 80067c0:	4013      	ands	r3, r2
 80067c2:	697a      	ldr	r2, [r7, #20]
 80067c4:	6812      	ldr	r2, [r2, #0]
 80067c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80067c8:	430b      	orrs	r3, r1
 80067ca:	6013      	str	r3, [r2, #0]
>>>>>>> ModeSelect_v2

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< HEAD
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	68da      	ldr	r2, [r3, #12]
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	430a      	orrs	r2, r1
 8007880:	605a      	str	r2, [r3, #4]
=======
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	68da      	ldr	r2, [r3, #12]
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	430a      	orrs	r2, r1
 80067e0:	605a      	str	r2, [r3, #4]
>>>>>>> ModeSelect_v2
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
<<<<<<< HEAD
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	699b      	ldr	r3, [r3, #24]
 8007886:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a9f      	ldr	r2, [pc, #636]	; (8007b0c <UART_SetConfig+0x2dc>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d004      	beq.n	800789c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	6a1b      	ldr	r3, [r3, #32]
 8007896:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007898:	4313      	orrs	r3, r2
 800789a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80078a6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80078aa:	697a      	ldr	r2, [r7, #20]
 80078ac:	6812      	ldr	r2, [r2, #0]
 80078ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078b0:	430b      	orrs	r3, r1
 80078b2:	6093      	str	r3, [r2, #8]
=======
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	699b      	ldr	r3, [r3, #24]
 80067e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a9f      	ldr	r2, [pc, #636]	; (8006a6c <UART_SetConfig+0x2dc>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d004      	beq.n	80067fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	6a1b      	ldr	r3, [r3, #32]
 80067f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067f8:	4313      	orrs	r3, r2
 80067fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006806:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800680a:	697a      	ldr	r2, [r7, #20]
 800680c:	6812      	ldr	r2, [r2, #0]
 800680e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006810:	430b      	orrs	r3, r1
 8006812:	6093      	str	r3, [r2, #8]
>>>>>>> ModeSelect_v2

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
<<<<<<< HEAD
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ba:	f023 010f 	bic.w	r1, r3, #15
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	430a      	orrs	r2, r1
 80078c8:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800681a:	f023 010f 	bic.w	r1, r3, #15
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	430a      	orrs	r2, r1
 8006828:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> ModeSelect_v2
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
<<<<<<< HEAD
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a90      	ldr	r2, [pc, #576]	; (8007b10 <UART_SetConfig+0x2e0>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d125      	bne.n	8007920 <UART_SetConfig+0xf0>
 80078d4:	4b8f      	ldr	r3, [pc, #572]	; (8007b14 <UART_SetConfig+0x2e4>)
 80078d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078da:	f003 0303 	and.w	r3, r3, #3
 80078de:	2b03      	cmp	r3, #3
 80078e0:	d81a      	bhi.n	8007918 <UART_SetConfig+0xe8>
 80078e2:	a201      	add	r2, pc, #4	; (adr r2, 80078e8 <UART_SetConfig+0xb8>)
 80078e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e8:	080078f9 	.word	0x080078f9
 80078ec:	08007909 	.word	0x08007909
 80078f0:	08007901 	.word	0x08007901
 80078f4:	08007911 	.word	0x08007911
 80078f8:	2301      	movs	r3, #1
 80078fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80078fe:	e116      	b.n	8007b2e <UART_SetConfig+0x2fe>
 8007900:	2302      	movs	r3, #2
 8007902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007906:	e112      	b.n	8007b2e <UART_SetConfig+0x2fe>
 8007908:	2304      	movs	r3, #4
 800790a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800790e:	e10e      	b.n	8007b2e <UART_SetConfig+0x2fe>
 8007910:	2308      	movs	r3, #8
 8007912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007916:	e10a      	b.n	8007b2e <UART_SetConfig+0x2fe>
 8007918:	2310      	movs	r3, #16
 800791a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800791e:	e106      	b.n	8007b2e <UART_SetConfig+0x2fe>
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a7c      	ldr	r2, [pc, #496]	; (8007b18 <UART_SetConfig+0x2e8>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d138      	bne.n	800799c <UART_SetConfig+0x16c>
 800792a:	4b7a      	ldr	r3, [pc, #488]	; (8007b14 <UART_SetConfig+0x2e4>)
 800792c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007930:	f003 030c 	and.w	r3, r3, #12
 8007934:	2b0c      	cmp	r3, #12
 8007936:	d82d      	bhi.n	8007994 <UART_SetConfig+0x164>
 8007938:	a201      	add	r2, pc, #4	; (adr r2, 8007940 <UART_SetConfig+0x110>)
 800793a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800793e:	bf00      	nop
 8007940:	08007975 	.word	0x08007975
 8007944:	08007995 	.word	0x08007995
 8007948:	08007995 	.word	0x08007995
 800794c:	08007995 	.word	0x08007995
 8007950:	08007985 	.word	0x08007985
 8007954:	08007995 	.word	0x08007995
 8007958:	08007995 	.word	0x08007995
 800795c:	08007995 	.word	0x08007995
 8007960:	0800797d 	.word	0x0800797d
 8007964:	08007995 	.word	0x08007995
 8007968:	08007995 	.word	0x08007995
 800796c:	08007995 	.word	0x08007995
 8007970:	0800798d 	.word	0x0800798d
 8007974:	2300      	movs	r3, #0
 8007976:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800797a:	e0d8      	b.n	8007b2e <UART_SetConfig+0x2fe>
 800797c:	2302      	movs	r3, #2
 800797e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007982:	e0d4      	b.n	8007b2e <UART_SetConfig+0x2fe>
 8007984:	2304      	movs	r3, #4
 8007986:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800798a:	e0d0      	b.n	8007b2e <UART_SetConfig+0x2fe>
 800798c:	2308      	movs	r3, #8
 800798e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007992:	e0cc      	b.n	8007b2e <UART_SetConfig+0x2fe>
 8007994:	2310      	movs	r3, #16
 8007996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800799a:	e0c8      	b.n	8007b2e <UART_SetConfig+0x2fe>
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a5e      	ldr	r2, [pc, #376]	; (8007b1c <UART_SetConfig+0x2ec>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d125      	bne.n	80079f2 <UART_SetConfig+0x1c2>
 80079a6:	4b5b      	ldr	r3, [pc, #364]	; (8007b14 <UART_SetConfig+0x2e4>)
 80079a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079ac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80079b0:	2b30      	cmp	r3, #48	; 0x30
 80079b2:	d016      	beq.n	80079e2 <UART_SetConfig+0x1b2>
 80079b4:	2b30      	cmp	r3, #48	; 0x30
 80079b6:	d818      	bhi.n	80079ea <UART_SetConfig+0x1ba>
 80079b8:	2b20      	cmp	r3, #32
 80079ba:	d00a      	beq.n	80079d2 <UART_SetConfig+0x1a2>
 80079bc:	2b20      	cmp	r3, #32
 80079be:	d814      	bhi.n	80079ea <UART_SetConfig+0x1ba>
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d002      	beq.n	80079ca <UART_SetConfig+0x19a>
 80079c4:	2b10      	cmp	r3, #16
 80079c6:	d008      	beq.n	80079da <UART_SetConfig+0x1aa>
 80079c8:	e00f      	b.n	80079ea <UART_SetConfig+0x1ba>
 80079ca:	2300      	movs	r3, #0
 80079cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079d0:	e0ad      	b.n	8007b2e <UART_SetConfig+0x2fe>
 80079d2:	2302      	movs	r3, #2
 80079d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079d8:	e0a9      	b.n	8007b2e <UART_SetConfig+0x2fe>
 80079da:	2304      	movs	r3, #4
 80079dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079e0:	e0a5      	b.n	8007b2e <UART_SetConfig+0x2fe>
 80079e2:	2308      	movs	r3, #8
 80079e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079e8:	e0a1      	b.n	8007b2e <UART_SetConfig+0x2fe>
 80079ea:	2310      	movs	r3, #16
 80079ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079f0:	e09d      	b.n	8007b2e <UART_SetConfig+0x2fe>
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a4a      	ldr	r2, [pc, #296]	; (8007b20 <UART_SetConfig+0x2f0>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d125      	bne.n	8007a48 <UART_SetConfig+0x218>
 80079fc:	4b45      	ldr	r3, [pc, #276]	; (8007b14 <UART_SetConfig+0x2e4>)
 80079fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a02:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007a06:	2bc0      	cmp	r3, #192	; 0xc0
 8007a08:	d016      	beq.n	8007a38 <UART_SetConfig+0x208>
 8007a0a:	2bc0      	cmp	r3, #192	; 0xc0
 8007a0c:	d818      	bhi.n	8007a40 <UART_SetConfig+0x210>
 8007a0e:	2b80      	cmp	r3, #128	; 0x80
 8007a10:	d00a      	beq.n	8007a28 <UART_SetConfig+0x1f8>
 8007a12:	2b80      	cmp	r3, #128	; 0x80
 8007a14:	d814      	bhi.n	8007a40 <UART_SetConfig+0x210>
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d002      	beq.n	8007a20 <UART_SetConfig+0x1f0>
 8007a1a:	2b40      	cmp	r3, #64	; 0x40
 8007a1c:	d008      	beq.n	8007a30 <UART_SetConfig+0x200>
 8007a1e:	e00f      	b.n	8007a40 <UART_SetConfig+0x210>
 8007a20:	2300      	movs	r3, #0
 8007a22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a26:	e082      	b.n	8007b2e <UART_SetConfig+0x2fe>
 8007a28:	2302      	movs	r3, #2
 8007a2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a2e:	e07e      	b.n	8007b2e <UART_SetConfig+0x2fe>
 8007a30:	2304      	movs	r3, #4
 8007a32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a36:	e07a      	b.n	8007b2e <UART_SetConfig+0x2fe>
 8007a38:	2308      	movs	r3, #8
 8007a3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a3e:	e076      	b.n	8007b2e <UART_SetConfig+0x2fe>
 8007a40:	2310      	movs	r3, #16
 8007a42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a46:	e072      	b.n	8007b2e <UART_SetConfig+0x2fe>
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a35      	ldr	r2, [pc, #212]	; (8007b24 <UART_SetConfig+0x2f4>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d12a      	bne.n	8007aa8 <UART_SetConfig+0x278>
 8007a52:	4b30      	ldr	r3, [pc, #192]	; (8007b14 <UART_SetConfig+0x2e4>)
 8007a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a60:	d01a      	beq.n	8007a98 <UART_SetConfig+0x268>
 8007a62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a66:	d81b      	bhi.n	8007aa0 <UART_SetConfig+0x270>
 8007a68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a6c:	d00c      	beq.n	8007a88 <UART_SetConfig+0x258>
 8007a6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a72:	d815      	bhi.n	8007aa0 <UART_SetConfig+0x270>
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d003      	beq.n	8007a80 <UART_SetConfig+0x250>
 8007a78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a7c:	d008      	beq.n	8007a90 <UART_SetConfig+0x260>
 8007a7e:	e00f      	b.n	8007aa0 <UART_SetConfig+0x270>
 8007a80:	2300      	movs	r3, #0
 8007a82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a86:	e052      	b.n	8007b2e <UART_SetConfig+0x2fe>
 8007a88:	2302      	movs	r3, #2
 8007a8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a8e:	e04e      	b.n	8007b2e <UART_SetConfig+0x2fe>
 8007a90:	2304      	movs	r3, #4
 8007a92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a96:	e04a      	b.n	8007b2e <UART_SetConfig+0x2fe>
 8007a98:	2308      	movs	r3, #8
 8007a9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a9e:	e046      	b.n	8007b2e <UART_SetConfig+0x2fe>
 8007aa0:	2310      	movs	r3, #16
 8007aa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007aa6:	e042      	b.n	8007b2e <UART_SetConfig+0x2fe>
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a17      	ldr	r2, [pc, #92]	; (8007b0c <UART_SetConfig+0x2dc>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d13a      	bne.n	8007b28 <UART_SetConfig+0x2f8>
 8007ab2:	4b18      	ldr	r3, [pc, #96]	; (8007b14 <UART_SetConfig+0x2e4>)
 8007ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ab8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007abc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ac0:	d01a      	beq.n	8007af8 <UART_SetConfig+0x2c8>
 8007ac2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ac6:	d81b      	bhi.n	8007b00 <UART_SetConfig+0x2d0>
 8007ac8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007acc:	d00c      	beq.n	8007ae8 <UART_SetConfig+0x2b8>
 8007ace:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ad2:	d815      	bhi.n	8007b00 <UART_SetConfig+0x2d0>
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d003      	beq.n	8007ae0 <UART_SetConfig+0x2b0>
 8007ad8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007adc:	d008      	beq.n	8007af0 <UART_SetConfig+0x2c0>
 8007ade:	e00f      	b.n	8007b00 <UART_SetConfig+0x2d0>
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ae6:	e022      	b.n	8007b2e <UART_SetConfig+0x2fe>
 8007ae8:	2302      	movs	r3, #2
 8007aea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007aee:	e01e      	b.n	8007b2e <UART_SetConfig+0x2fe>
 8007af0:	2304      	movs	r3, #4
 8007af2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007af6:	e01a      	b.n	8007b2e <UART_SetConfig+0x2fe>
 8007af8:	2308      	movs	r3, #8
 8007afa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007afe:	e016      	b.n	8007b2e <UART_SetConfig+0x2fe>
 8007b00:	2310      	movs	r3, #16
 8007b02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b06:	e012      	b.n	8007b2e <UART_SetConfig+0x2fe>
 8007b08:	cfff69f3 	.word	0xcfff69f3
 8007b0c:	40008000 	.word	0x40008000
 8007b10:	40013800 	.word	0x40013800
 8007b14:	40021000 	.word	0x40021000
 8007b18:	40004400 	.word	0x40004400
 8007b1c:	40004800 	.word	0x40004800
 8007b20:	40004c00 	.word	0x40004c00
 8007b24:	40005000 	.word	0x40005000
 8007b28:	2310      	movs	r3, #16
 8007b2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4aae      	ldr	r2, [pc, #696]	; (8007dec <UART_SetConfig+0x5bc>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	f040 8097 	bne.w	8007c68 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007b3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007b3e:	2b08      	cmp	r3, #8
 8007b40:	d823      	bhi.n	8007b8a <UART_SetConfig+0x35a>
 8007b42:	a201      	add	r2, pc, #4	; (adr r2, 8007b48 <UART_SetConfig+0x318>)
 8007b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b48:	08007b6d 	.word	0x08007b6d
 8007b4c:	08007b8b 	.word	0x08007b8b
 8007b50:	08007b75 	.word	0x08007b75
 8007b54:	08007b8b 	.word	0x08007b8b
 8007b58:	08007b7b 	.word	0x08007b7b
 8007b5c:	08007b8b 	.word	0x08007b8b
 8007b60:	08007b8b 	.word	0x08007b8b
 8007b64:	08007b8b 	.word	0x08007b8b
 8007b68:	08007b83 	.word	0x08007b83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b6c:	f7fd f8cc 	bl	8004d08 <HAL_RCC_GetPCLK1Freq>
 8007b70:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007b72:	e010      	b.n	8007b96 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b74:	4b9e      	ldr	r3, [pc, #632]	; (8007df0 <UART_SetConfig+0x5c0>)
 8007b76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007b78:	e00d      	b.n	8007b96 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b7a:	f7fd f82d 	bl	8004bd8 <HAL_RCC_GetSysClockFreq>
 8007b7e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007b80:	e009      	b.n	8007b96 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007b88:	e005      	b.n	8007b96 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007b94:	bf00      	nop
=======
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a90      	ldr	r2, [pc, #576]	; (8006a70 <UART_SetConfig+0x2e0>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d125      	bne.n	8006880 <UART_SetConfig+0xf0>
 8006834:	4b8f      	ldr	r3, [pc, #572]	; (8006a74 <UART_SetConfig+0x2e4>)
 8006836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800683a:	f003 0303 	and.w	r3, r3, #3
 800683e:	2b03      	cmp	r3, #3
 8006840:	d81a      	bhi.n	8006878 <UART_SetConfig+0xe8>
 8006842:	a201      	add	r2, pc, #4	; (adr r2, 8006848 <UART_SetConfig+0xb8>)
 8006844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006848:	08006859 	.word	0x08006859
 800684c:	08006869 	.word	0x08006869
 8006850:	08006861 	.word	0x08006861
 8006854:	08006871 	.word	0x08006871
 8006858:	2301      	movs	r3, #1
 800685a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800685e:	e116      	b.n	8006a8e <UART_SetConfig+0x2fe>
 8006860:	2302      	movs	r3, #2
 8006862:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006866:	e112      	b.n	8006a8e <UART_SetConfig+0x2fe>
 8006868:	2304      	movs	r3, #4
 800686a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800686e:	e10e      	b.n	8006a8e <UART_SetConfig+0x2fe>
 8006870:	2308      	movs	r3, #8
 8006872:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006876:	e10a      	b.n	8006a8e <UART_SetConfig+0x2fe>
 8006878:	2310      	movs	r3, #16
 800687a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800687e:	e106      	b.n	8006a8e <UART_SetConfig+0x2fe>
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a7c      	ldr	r2, [pc, #496]	; (8006a78 <UART_SetConfig+0x2e8>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d138      	bne.n	80068fc <UART_SetConfig+0x16c>
 800688a:	4b7a      	ldr	r3, [pc, #488]	; (8006a74 <UART_SetConfig+0x2e4>)
 800688c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006890:	f003 030c 	and.w	r3, r3, #12
 8006894:	2b0c      	cmp	r3, #12
 8006896:	d82d      	bhi.n	80068f4 <UART_SetConfig+0x164>
 8006898:	a201      	add	r2, pc, #4	; (adr r2, 80068a0 <UART_SetConfig+0x110>)
 800689a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800689e:	bf00      	nop
 80068a0:	080068d5 	.word	0x080068d5
 80068a4:	080068f5 	.word	0x080068f5
 80068a8:	080068f5 	.word	0x080068f5
 80068ac:	080068f5 	.word	0x080068f5
 80068b0:	080068e5 	.word	0x080068e5
 80068b4:	080068f5 	.word	0x080068f5
 80068b8:	080068f5 	.word	0x080068f5
 80068bc:	080068f5 	.word	0x080068f5
 80068c0:	080068dd 	.word	0x080068dd
 80068c4:	080068f5 	.word	0x080068f5
 80068c8:	080068f5 	.word	0x080068f5
 80068cc:	080068f5 	.word	0x080068f5
 80068d0:	080068ed 	.word	0x080068ed
 80068d4:	2300      	movs	r3, #0
 80068d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068da:	e0d8      	b.n	8006a8e <UART_SetConfig+0x2fe>
 80068dc:	2302      	movs	r3, #2
 80068de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068e2:	e0d4      	b.n	8006a8e <UART_SetConfig+0x2fe>
 80068e4:	2304      	movs	r3, #4
 80068e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068ea:	e0d0      	b.n	8006a8e <UART_SetConfig+0x2fe>
 80068ec:	2308      	movs	r3, #8
 80068ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068f2:	e0cc      	b.n	8006a8e <UART_SetConfig+0x2fe>
 80068f4:	2310      	movs	r3, #16
 80068f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068fa:	e0c8      	b.n	8006a8e <UART_SetConfig+0x2fe>
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a5e      	ldr	r2, [pc, #376]	; (8006a7c <UART_SetConfig+0x2ec>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d125      	bne.n	8006952 <UART_SetConfig+0x1c2>
 8006906:	4b5b      	ldr	r3, [pc, #364]	; (8006a74 <UART_SetConfig+0x2e4>)
 8006908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800690c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006910:	2b30      	cmp	r3, #48	; 0x30
 8006912:	d016      	beq.n	8006942 <UART_SetConfig+0x1b2>
 8006914:	2b30      	cmp	r3, #48	; 0x30
 8006916:	d818      	bhi.n	800694a <UART_SetConfig+0x1ba>
 8006918:	2b20      	cmp	r3, #32
 800691a:	d00a      	beq.n	8006932 <UART_SetConfig+0x1a2>
 800691c:	2b20      	cmp	r3, #32
 800691e:	d814      	bhi.n	800694a <UART_SetConfig+0x1ba>
 8006920:	2b00      	cmp	r3, #0
 8006922:	d002      	beq.n	800692a <UART_SetConfig+0x19a>
 8006924:	2b10      	cmp	r3, #16
 8006926:	d008      	beq.n	800693a <UART_SetConfig+0x1aa>
 8006928:	e00f      	b.n	800694a <UART_SetConfig+0x1ba>
 800692a:	2300      	movs	r3, #0
 800692c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006930:	e0ad      	b.n	8006a8e <UART_SetConfig+0x2fe>
 8006932:	2302      	movs	r3, #2
 8006934:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006938:	e0a9      	b.n	8006a8e <UART_SetConfig+0x2fe>
 800693a:	2304      	movs	r3, #4
 800693c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006940:	e0a5      	b.n	8006a8e <UART_SetConfig+0x2fe>
 8006942:	2308      	movs	r3, #8
 8006944:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006948:	e0a1      	b.n	8006a8e <UART_SetConfig+0x2fe>
 800694a:	2310      	movs	r3, #16
 800694c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006950:	e09d      	b.n	8006a8e <UART_SetConfig+0x2fe>
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a4a      	ldr	r2, [pc, #296]	; (8006a80 <UART_SetConfig+0x2f0>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d125      	bne.n	80069a8 <UART_SetConfig+0x218>
 800695c:	4b45      	ldr	r3, [pc, #276]	; (8006a74 <UART_SetConfig+0x2e4>)
 800695e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006962:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006966:	2bc0      	cmp	r3, #192	; 0xc0
 8006968:	d016      	beq.n	8006998 <UART_SetConfig+0x208>
 800696a:	2bc0      	cmp	r3, #192	; 0xc0
 800696c:	d818      	bhi.n	80069a0 <UART_SetConfig+0x210>
 800696e:	2b80      	cmp	r3, #128	; 0x80
 8006970:	d00a      	beq.n	8006988 <UART_SetConfig+0x1f8>
 8006972:	2b80      	cmp	r3, #128	; 0x80
 8006974:	d814      	bhi.n	80069a0 <UART_SetConfig+0x210>
 8006976:	2b00      	cmp	r3, #0
 8006978:	d002      	beq.n	8006980 <UART_SetConfig+0x1f0>
 800697a:	2b40      	cmp	r3, #64	; 0x40
 800697c:	d008      	beq.n	8006990 <UART_SetConfig+0x200>
 800697e:	e00f      	b.n	80069a0 <UART_SetConfig+0x210>
 8006980:	2300      	movs	r3, #0
 8006982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006986:	e082      	b.n	8006a8e <UART_SetConfig+0x2fe>
 8006988:	2302      	movs	r3, #2
 800698a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800698e:	e07e      	b.n	8006a8e <UART_SetConfig+0x2fe>
 8006990:	2304      	movs	r3, #4
 8006992:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006996:	e07a      	b.n	8006a8e <UART_SetConfig+0x2fe>
 8006998:	2308      	movs	r3, #8
 800699a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800699e:	e076      	b.n	8006a8e <UART_SetConfig+0x2fe>
 80069a0:	2310      	movs	r3, #16
 80069a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069a6:	e072      	b.n	8006a8e <UART_SetConfig+0x2fe>
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a35      	ldr	r2, [pc, #212]	; (8006a84 <UART_SetConfig+0x2f4>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d12a      	bne.n	8006a08 <UART_SetConfig+0x278>
 80069b2:	4b30      	ldr	r3, [pc, #192]	; (8006a74 <UART_SetConfig+0x2e4>)
 80069b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069c0:	d01a      	beq.n	80069f8 <UART_SetConfig+0x268>
 80069c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069c6:	d81b      	bhi.n	8006a00 <UART_SetConfig+0x270>
 80069c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069cc:	d00c      	beq.n	80069e8 <UART_SetConfig+0x258>
 80069ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069d2:	d815      	bhi.n	8006a00 <UART_SetConfig+0x270>
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d003      	beq.n	80069e0 <UART_SetConfig+0x250>
 80069d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069dc:	d008      	beq.n	80069f0 <UART_SetConfig+0x260>
 80069de:	e00f      	b.n	8006a00 <UART_SetConfig+0x270>
 80069e0:	2300      	movs	r3, #0
 80069e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069e6:	e052      	b.n	8006a8e <UART_SetConfig+0x2fe>
 80069e8:	2302      	movs	r3, #2
 80069ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069ee:	e04e      	b.n	8006a8e <UART_SetConfig+0x2fe>
 80069f0:	2304      	movs	r3, #4
 80069f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069f6:	e04a      	b.n	8006a8e <UART_SetConfig+0x2fe>
 80069f8:	2308      	movs	r3, #8
 80069fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069fe:	e046      	b.n	8006a8e <UART_SetConfig+0x2fe>
 8006a00:	2310      	movs	r3, #16
 8006a02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a06:	e042      	b.n	8006a8e <UART_SetConfig+0x2fe>
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a17      	ldr	r2, [pc, #92]	; (8006a6c <UART_SetConfig+0x2dc>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d13a      	bne.n	8006a88 <UART_SetConfig+0x2f8>
 8006a12:	4b18      	ldr	r3, [pc, #96]	; (8006a74 <UART_SetConfig+0x2e4>)
 8006a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006a1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a20:	d01a      	beq.n	8006a58 <UART_SetConfig+0x2c8>
 8006a22:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a26:	d81b      	bhi.n	8006a60 <UART_SetConfig+0x2d0>
 8006a28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a2c:	d00c      	beq.n	8006a48 <UART_SetConfig+0x2b8>
 8006a2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a32:	d815      	bhi.n	8006a60 <UART_SetConfig+0x2d0>
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d003      	beq.n	8006a40 <UART_SetConfig+0x2b0>
 8006a38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a3c:	d008      	beq.n	8006a50 <UART_SetConfig+0x2c0>
 8006a3e:	e00f      	b.n	8006a60 <UART_SetConfig+0x2d0>
 8006a40:	2300      	movs	r3, #0
 8006a42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a46:	e022      	b.n	8006a8e <UART_SetConfig+0x2fe>
 8006a48:	2302      	movs	r3, #2
 8006a4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a4e:	e01e      	b.n	8006a8e <UART_SetConfig+0x2fe>
 8006a50:	2304      	movs	r3, #4
 8006a52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a56:	e01a      	b.n	8006a8e <UART_SetConfig+0x2fe>
 8006a58:	2308      	movs	r3, #8
 8006a5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a5e:	e016      	b.n	8006a8e <UART_SetConfig+0x2fe>
 8006a60:	2310      	movs	r3, #16
 8006a62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a66:	e012      	b.n	8006a8e <UART_SetConfig+0x2fe>
 8006a68:	cfff69f3 	.word	0xcfff69f3
 8006a6c:	40008000 	.word	0x40008000
 8006a70:	40013800 	.word	0x40013800
 8006a74:	40021000 	.word	0x40021000
 8006a78:	40004400 	.word	0x40004400
 8006a7c:	40004800 	.word	0x40004800
 8006a80:	40004c00 	.word	0x40004c00
 8006a84:	40005000 	.word	0x40005000
 8006a88:	2310      	movs	r3, #16
 8006a8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4aae      	ldr	r2, [pc, #696]	; (8006d4c <UART_SetConfig+0x5bc>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	f040 8097 	bne.w	8006bc8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006a9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006a9e:	2b08      	cmp	r3, #8
 8006aa0:	d823      	bhi.n	8006aea <UART_SetConfig+0x35a>
 8006aa2:	a201      	add	r2, pc, #4	; (adr r2, 8006aa8 <UART_SetConfig+0x318>)
 8006aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa8:	08006acd 	.word	0x08006acd
 8006aac:	08006aeb 	.word	0x08006aeb
 8006ab0:	08006ad5 	.word	0x08006ad5
 8006ab4:	08006aeb 	.word	0x08006aeb
 8006ab8:	08006adb 	.word	0x08006adb
 8006abc:	08006aeb 	.word	0x08006aeb
 8006ac0:	08006aeb 	.word	0x08006aeb
 8006ac4:	08006aeb 	.word	0x08006aeb
 8006ac8:	08006ae3 	.word	0x08006ae3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006acc:	f7fd f962 	bl	8003d94 <HAL_RCC_GetPCLK1Freq>
 8006ad0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ad2:	e010      	b.n	8006af6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ad4:	4b9e      	ldr	r3, [pc, #632]	; (8006d50 <UART_SetConfig+0x5c0>)
 8006ad6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006ad8:	e00d      	b.n	8006af6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ada:	f7fd f8c3 	bl	8003c64 <HAL_RCC_GetSysClockFreq>
 8006ade:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ae0:	e009      	b.n	8006af6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ae6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006ae8:	e005      	b.n	8006af6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006aea:	2300      	movs	r3, #0
 8006aec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006af4:	bf00      	nop
>>>>>>> ModeSelect_v2
    }

    /* If proper clock source reported */
    if (pclk != 0U)
<<<<<<< HEAD
 8007b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	f000 8130 	beq.w	8007dfe <UART_SetConfig+0x5ce>
=======
 8006af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	f000 8130 	beq.w	8006d5e <UART_SetConfig+0x5ce>
>>>>>>> ModeSelect_v2
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
<<<<<<< HEAD
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba2:	4a94      	ldr	r2, [pc, #592]	; (8007df4 <UART_SetConfig+0x5c4>)
 8007ba4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ba8:	461a      	mov	r2, r3
 8007baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bac:	fbb3 f3f2 	udiv	r3, r3, r2
 8007bb0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	685a      	ldr	r2, [r3, #4]
 8007bb6:	4613      	mov	r3, r2
 8007bb8:	005b      	lsls	r3, r3, #1
 8007bba:	4413      	add	r3, r2
 8007bbc:	69ba      	ldr	r2, [r7, #24]
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d305      	bcc.n	8007bce <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007bc8:	69ba      	ldr	r2, [r7, #24]
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d903      	bls.n	8007bd6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007bd4:	e113      	b.n	8007dfe <UART_SetConfig+0x5ce>
=======
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b02:	4a94      	ldr	r2, [pc, #592]	; (8006d54 <UART_SetConfig+0x5c4>)
 8006b04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b08:	461a      	mov	r2, r3
 8006b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b10:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	685a      	ldr	r2, [r3, #4]
 8006b16:	4613      	mov	r3, r2
 8006b18:	005b      	lsls	r3, r3, #1
 8006b1a:	4413      	add	r3, r2
 8006b1c:	69ba      	ldr	r2, [r7, #24]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d305      	bcc.n	8006b2e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b28:	69ba      	ldr	r2, [r7, #24]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d903      	bls.n	8006b36 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006b34:	e113      	b.n	8006d5e <UART_SetConfig+0x5ce>
>>>>>>> ModeSelect_v2
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
<<<<<<< HEAD
 8007bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd8:	2200      	movs	r2, #0
 8007bda:	60bb      	str	r3, [r7, #8]
 8007bdc:	60fa      	str	r2, [r7, #12]
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be2:	4a84      	ldr	r2, [pc, #528]	; (8007df4 <UART_SetConfig+0x5c4>)
 8007be4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	2200      	movs	r2, #0
 8007bec:	603b      	str	r3, [r7, #0]
 8007bee:	607a      	str	r2, [r7, #4]
 8007bf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bf4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007bf8:	f7f8 ffa8 	bl	8000b4c <__aeabi_uldivmod>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	460b      	mov	r3, r1
 8007c00:	4610      	mov	r0, r2
 8007c02:	4619      	mov	r1, r3
 8007c04:	f04f 0200 	mov.w	r2, #0
 8007c08:	f04f 0300 	mov.w	r3, #0
 8007c0c:	020b      	lsls	r3, r1, #8
 8007c0e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007c12:	0202      	lsls	r2, r0, #8
 8007c14:	6979      	ldr	r1, [r7, #20]
 8007c16:	6849      	ldr	r1, [r1, #4]
 8007c18:	0849      	lsrs	r1, r1, #1
 8007c1a:	2000      	movs	r0, #0
 8007c1c:	460c      	mov	r4, r1
 8007c1e:	4605      	mov	r5, r0
 8007c20:	eb12 0804 	adds.w	r8, r2, r4
 8007c24:	eb43 0905 	adc.w	r9, r3, r5
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	469a      	mov	sl, r3
 8007c30:	4693      	mov	fp, r2
 8007c32:	4652      	mov	r2, sl
 8007c34:	465b      	mov	r3, fp
 8007c36:	4640      	mov	r0, r8
 8007c38:	4649      	mov	r1, r9
 8007c3a:	f7f8 ff87 	bl	8000b4c <__aeabi_uldivmod>
 8007c3e:	4602      	mov	r2, r0
 8007c40:	460b      	mov	r3, r1
 8007c42:	4613      	mov	r3, r2
 8007c44:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007c46:	6a3b      	ldr	r3, [r7, #32]
 8007c48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c4c:	d308      	bcc.n	8007c60 <UART_SetConfig+0x430>
 8007c4e:	6a3b      	ldr	r3, [r7, #32]
 8007c50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c54:	d204      	bcs.n	8007c60 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	6a3a      	ldr	r2, [r7, #32]
 8007c5c:	60da      	str	r2, [r3, #12]
 8007c5e:	e0ce      	b.n	8007dfe <UART_SetConfig+0x5ce>
=======
 8006b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b38:	2200      	movs	r2, #0
 8006b3a:	60bb      	str	r3, [r7, #8]
 8006b3c:	60fa      	str	r2, [r7, #12]
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b42:	4a84      	ldr	r2, [pc, #528]	; (8006d54 <UART_SetConfig+0x5c4>)
 8006b44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	603b      	str	r3, [r7, #0]
 8006b4e:	607a      	str	r2, [r7, #4]
 8006b50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b54:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006b58:	f7f9 fb50 	bl	80001fc <__aeabi_uldivmod>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	460b      	mov	r3, r1
 8006b60:	4610      	mov	r0, r2
 8006b62:	4619      	mov	r1, r3
 8006b64:	f04f 0200 	mov.w	r2, #0
 8006b68:	f04f 0300 	mov.w	r3, #0
 8006b6c:	020b      	lsls	r3, r1, #8
 8006b6e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006b72:	0202      	lsls	r2, r0, #8
 8006b74:	6979      	ldr	r1, [r7, #20]
 8006b76:	6849      	ldr	r1, [r1, #4]
 8006b78:	0849      	lsrs	r1, r1, #1
 8006b7a:	2000      	movs	r0, #0
 8006b7c:	460c      	mov	r4, r1
 8006b7e:	4605      	mov	r5, r0
 8006b80:	eb12 0804 	adds.w	r8, r2, r4
 8006b84:	eb43 0905 	adc.w	r9, r3, r5
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	469a      	mov	sl, r3
 8006b90:	4693      	mov	fp, r2
 8006b92:	4652      	mov	r2, sl
 8006b94:	465b      	mov	r3, fp
 8006b96:	4640      	mov	r0, r8
 8006b98:	4649      	mov	r1, r9
 8006b9a:	f7f9 fb2f 	bl	80001fc <__aeabi_uldivmod>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	4613      	mov	r3, r2
 8006ba4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ba6:	6a3b      	ldr	r3, [r7, #32]
 8006ba8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bac:	d308      	bcc.n	8006bc0 <UART_SetConfig+0x430>
 8006bae:	6a3b      	ldr	r3, [r7, #32]
 8006bb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bb4:	d204      	bcs.n	8006bc0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	6a3a      	ldr	r2, [r7, #32]
 8006bbc:	60da      	str	r2, [r3, #12]
 8006bbe:	e0ce      	b.n	8006d5e <UART_SetConfig+0x5ce>
>>>>>>> ModeSelect_v2
        }
        else
        {
          ret = HAL_ERROR;
<<<<<<< HEAD
 8007c60:	2301      	movs	r3, #1
 8007c62:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007c66:	e0ca      	b.n	8007dfe <UART_SetConfig+0x5ce>
=======
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006bc6:	e0ca      	b.n	8006d5e <UART_SetConfig+0x5ce>
>>>>>>> ModeSelect_v2
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
<<<<<<< HEAD
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	69db      	ldr	r3, [r3, #28]
 8007c6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c70:	d166      	bne.n	8007d40 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007c72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007c76:	2b08      	cmp	r3, #8
 8007c78:	d827      	bhi.n	8007cca <UART_SetConfig+0x49a>
 8007c7a:	a201      	add	r2, pc, #4	; (adr r2, 8007c80 <UART_SetConfig+0x450>)
 8007c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c80:	08007ca5 	.word	0x08007ca5
 8007c84:	08007cad 	.word	0x08007cad
 8007c88:	08007cb5 	.word	0x08007cb5
 8007c8c:	08007ccb 	.word	0x08007ccb
 8007c90:	08007cbb 	.word	0x08007cbb
 8007c94:	08007ccb 	.word	0x08007ccb
 8007c98:	08007ccb 	.word	0x08007ccb
 8007c9c:	08007ccb 	.word	0x08007ccb
 8007ca0:	08007cc3 	.word	0x08007cc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ca4:	f7fd f830 	bl	8004d08 <HAL_RCC_GetPCLK1Freq>
 8007ca8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007caa:	e014      	b.n	8007cd6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007cac:	f7fd f842 	bl	8004d34 <HAL_RCC_GetPCLK2Freq>
 8007cb0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007cb2:	e010      	b.n	8007cd6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007cb4:	4b4e      	ldr	r3, [pc, #312]	; (8007df0 <UART_SetConfig+0x5c0>)
 8007cb6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007cb8:	e00d      	b.n	8007cd6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007cba:	f7fc ff8d 	bl	8004bd8 <HAL_RCC_GetSysClockFreq>
 8007cbe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007cc0:	e009      	b.n	8007cd6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cc6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007cc8:	e005      	b.n	8007cd6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007cd4:	bf00      	nop
=======
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	69db      	ldr	r3, [r3, #28]
 8006bcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bd0:	d166      	bne.n	8006ca0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006bd2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006bd6:	2b08      	cmp	r3, #8
 8006bd8:	d827      	bhi.n	8006c2a <UART_SetConfig+0x49a>
 8006bda:	a201      	add	r2, pc, #4	; (adr r2, 8006be0 <UART_SetConfig+0x450>)
 8006bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be0:	08006c05 	.word	0x08006c05
 8006be4:	08006c0d 	.word	0x08006c0d
 8006be8:	08006c15 	.word	0x08006c15
 8006bec:	08006c2b 	.word	0x08006c2b
 8006bf0:	08006c1b 	.word	0x08006c1b
 8006bf4:	08006c2b 	.word	0x08006c2b
 8006bf8:	08006c2b 	.word	0x08006c2b
 8006bfc:	08006c2b 	.word	0x08006c2b
 8006c00:	08006c23 	.word	0x08006c23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c04:	f7fd f8c6 	bl	8003d94 <HAL_RCC_GetPCLK1Freq>
 8006c08:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006c0a:	e014      	b.n	8006c36 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c0c:	f7fd f8d8 	bl	8003dc0 <HAL_RCC_GetPCLK2Freq>
 8006c10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006c12:	e010      	b.n	8006c36 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c14:	4b4e      	ldr	r3, [pc, #312]	; (8006d50 <UART_SetConfig+0x5c0>)
 8006c16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006c18:	e00d      	b.n	8006c36 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c1a:	f7fd f823 	bl	8003c64 <HAL_RCC_GetSysClockFreq>
 8006c1e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006c20:	e009      	b.n	8006c36 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006c28:	e005      	b.n	8006c36 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006c34:	bf00      	nop
>>>>>>> ModeSelect_v2
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
<<<<<<< HEAD
 8007cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	f000 8090 	beq.w	8007dfe <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce2:	4a44      	ldr	r2, [pc, #272]	; (8007df4 <UART_SetConfig+0x5c4>)
 8007ce4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ce8:	461a      	mov	r2, r3
 8007cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cec:	fbb3 f3f2 	udiv	r3, r3, r2
 8007cf0:	005a      	lsls	r2, r3, #1
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	085b      	lsrs	r3, r3, #1
 8007cf8:	441a      	add	r2, r3
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d02:	623b      	str	r3, [r7, #32]
=======
 8006c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	f000 8090 	beq.w	8006d5e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c42:	4a44      	ldr	r2, [pc, #272]	; (8006d54 <UART_SetConfig+0x5c4>)
 8006c44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c48:	461a      	mov	r2, r3
 8006c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c50:	005a      	lsls	r2, r3, #1
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	085b      	lsrs	r3, r3, #1
 8006c58:	441a      	add	r2, r3
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c62:	623b      	str	r3, [r7, #32]
>>>>>>> ModeSelect_v2
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
<<<<<<< HEAD
 8007d04:	6a3b      	ldr	r3, [r7, #32]
 8007d06:	2b0f      	cmp	r3, #15
 8007d08:	d916      	bls.n	8007d38 <UART_SetConfig+0x508>
 8007d0a:	6a3b      	ldr	r3, [r7, #32]
 8007d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d10:	d212      	bcs.n	8007d38 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d12:	6a3b      	ldr	r3, [r7, #32]
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	f023 030f 	bic.w	r3, r3, #15
 8007d1a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d1c:	6a3b      	ldr	r3, [r7, #32]
 8007d1e:	085b      	lsrs	r3, r3, #1
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	f003 0307 	and.w	r3, r3, #7
 8007d26:	b29a      	uxth	r2, r3
 8007d28:	8bfb      	ldrh	r3, [r7, #30]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	8bfa      	ldrh	r2, [r7, #30]
 8007d34:	60da      	str	r2, [r3, #12]
 8007d36:	e062      	b.n	8007dfe <UART_SetConfig+0x5ce>
=======
 8006c64:	6a3b      	ldr	r3, [r7, #32]
 8006c66:	2b0f      	cmp	r3, #15
 8006c68:	d916      	bls.n	8006c98 <UART_SetConfig+0x508>
 8006c6a:	6a3b      	ldr	r3, [r7, #32]
 8006c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c70:	d212      	bcs.n	8006c98 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c72:	6a3b      	ldr	r3, [r7, #32]
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	f023 030f 	bic.w	r3, r3, #15
 8006c7a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c7c:	6a3b      	ldr	r3, [r7, #32]
 8006c7e:	085b      	lsrs	r3, r3, #1
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	f003 0307 	and.w	r3, r3, #7
 8006c86:	b29a      	uxth	r2, r3
 8006c88:	8bfb      	ldrh	r3, [r7, #30]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	8bfa      	ldrh	r2, [r7, #30]
 8006c94:	60da      	str	r2, [r3, #12]
 8006c96:	e062      	b.n	8006d5e <UART_SetConfig+0x5ce>
>>>>>>> ModeSelect_v2
      }
      else
      {
        ret = HAL_ERROR;
<<<<<<< HEAD
 8007d38:	2301      	movs	r3, #1
 8007d3a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007d3e:	e05e      	b.n	8007dfe <UART_SetConfig+0x5ce>
=======
 8006c98:	2301      	movs	r3, #1
 8006c9a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006c9e:	e05e      	b.n	8006d5e <UART_SetConfig+0x5ce>
>>>>>>> ModeSelect_v2
      }
    }
  }
  else
  {
    switch (clocksource)
<<<<<<< HEAD
 8007d40:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007d44:	2b08      	cmp	r3, #8
 8007d46:	d828      	bhi.n	8007d9a <UART_SetConfig+0x56a>
 8007d48:	a201      	add	r2, pc, #4	; (adr r2, 8007d50 <UART_SetConfig+0x520>)
 8007d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d4e:	bf00      	nop
 8007d50:	08007d75 	.word	0x08007d75
 8007d54:	08007d7d 	.word	0x08007d7d
 8007d58:	08007d85 	.word	0x08007d85
 8007d5c:	08007d9b 	.word	0x08007d9b
 8007d60:	08007d8b 	.word	0x08007d8b
 8007d64:	08007d9b 	.word	0x08007d9b
 8007d68:	08007d9b 	.word	0x08007d9b
 8007d6c:	08007d9b 	.word	0x08007d9b
 8007d70:	08007d93 	.word	0x08007d93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d74:	f7fc ffc8 	bl	8004d08 <HAL_RCC_GetPCLK1Freq>
 8007d78:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007d7a:	e014      	b.n	8007da6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d7c:	f7fc ffda 	bl	8004d34 <HAL_RCC_GetPCLK2Freq>
 8007d80:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007d82:	e010      	b.n	8007da6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d84:	4b1a      	ldr	r3, [pc, #104]	; (8007df0 <UART_SetConfig+0x5c0>)
 8007d86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007d88:	e00d      	b.n	8007da6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d8a:	f7fc ff25 	bl	8004bd8 <HAL_RCC_GetSysClockFreq>
 8007d8e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007d90:	e009      	b.n	8007da6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007d98:	e005      	b.n	8007da6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007da4:	bf00      	nop
    }

    if (pclk != 0U)
 8007da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d028      	beq.n	8007dfe <UART_SetConfig+0x5ce>
=======
 8006ca0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006ca4:	2b08      	cmp	r3, #8
 8006ca6:	d828      	bhi.n	8006cfa <UART_SetConfig+0x56a>
 8006ca8:	a201      	add	r2, pc, #4	; (adr r2, 8006cb0 <UART_SetConfig+0x520>)
 8006caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cae:	bf00      	nop
 8006cb0:	08006cd5 	.word	0x08006cd5
 8006cb4:	08006cdd 	.word	0x08006cdd
 8006cb8:	08006ce5 	.word	0x08006ce5
 8006cbc:	08006cfb 	.word	0x08006cfb
 8006cc0:	08006ceb 	.word	0x08006ceb
 8006cc4:	08006cfb 	.word	0x08006cfb
 8006cc8:	08006cfb 	.word	0x08006cfb
 8006ccc:	08006cfb 	.word	0x08006cfb
 8006cd0:	08006cf3 	.word	0x08006cf3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cd4:	f7fd f85e 	bl	8003d94 <HAL_RCC_GetPCLK1Freq>
 8006cd8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006cda:	e014      	b.n	8006d06 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cdc:	f7fd f870 	bl	8003dc0 <HAL_RCC_GetPCLK2Freq>
 8006ce0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ce2:	e010      	b.n	8006d06 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ce4:	4b1a      	ldr	r3, [pc, #104]	; (8006d50 <UART_SetConfig+0x5c0>)
 8006ce6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006ce8:	e00d      	b.n	8006d06 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cea:	f7fc ffbb 	bl	8003c64 <HAL_RCC_GetSysClockFreq>
 8006cee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006cf0:	e009      	b.n	8006d06 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cf6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006cf8:	e005      	b.n	8006d06 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006d04:	bf00      	nop
    }

    if (pclk != 0U)
 8006d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d028      	beq.n	8006d5e <UART_SetConfig+0x5ce>
>>>>>>> ModeSelect_v2
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
<<<<<<< HEAD
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db0:	4a10      	ldr	r2, [pc, #64]	; (8007df4 <UART_SetConfig+0x5c4>)
 8007db2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007db6:	461a      	mov	r2, r3
 8007db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dba:	fbb3 f2f2 	udiv	r2, r3, r2
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	085b      	lsrs	r3, r3, #1
 8007dc4:	441a      	add	r2, r3
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dce:	623b      	str	r3, [r7, #32]
=======
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d10:	4a10      	ldr	r2, [pc, #64]	; (8006d54 <UART_SetConfig+0x5c4>)
 8006d12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d16:	461a      	mov	r2, r3
 8006d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1a:	fbb3 f2f2 	udiv	r2, r3, r2
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	085b      	lsrs	r3, r3, #1
 8006d24:	441a      	add	r2, r3
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d2e:	623b      	str	r3, [r7, #32]
>>>>>>> ModeSelect_v2
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
<<<<<<< HEAD
 8007dd0:	6a3b      	ldr	r3, [r7, #32]
 8007dd2:	2b0f      	cmp	r3, #15
 8007dd4:	d910      	bls.n	8007df8 <UART_SetConfig+0x5c8>
 8007dd6:	6a3b      	ldr	r3, [r7, #32]
 8007dd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ddc:	d20c      	bcs.n	8007df8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007dde:	6a3b      	ldr	r3, [r7, #32]
 8007de0:	b29a      	uxth	r2, r3
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	60da      	str	r2, [r3, #12]
 8007de8:	e009      	b.n	8007dfe <UART_SetConfig+0x5ce>
 8007dea:	bf00      	nop
 8007dec:	40008000 	.word	0x40008000
 8007df0:	00f42400 	.word	0x00f42400
 8007df4:	0800e114 	.word	0x0800e114
=======
 8006d30:	6a3b      	ldr	r3, [r7, #32]
 8006d32:	2b0f      	cmp	r3, #15
 8006d34:	d910      	bls.n	8006d58 <UART_SetConfig+0x5c8>
 8006d36:	6a3b      	ldr	r3, [r7, #32]
 8006d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d3c:	d20c      	bcs.n	8006d58 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d3e:	6a3b      	ldr	r3, [r7, #32]
 8006d40:	b29a      	uxth	r2, r3
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	60da      	str	r2, [r3, #12]
 8006d48:	e009      	b.n	8006d5e <UART_SetConfig+0x5ce>
 8006d4a:	bf00      	nop
 8006d4c:	40008000 	.word	0x40008000
 8006d50:	00f42400 	.word	0x00f42400
 8006d54:	0800d074 	.word	0x0800d074
>>>>>>> ModeSelect_v2
      }
      else
      {
        ret = HAL_ERROR;
<<<<<<< HEAD
 8007df8:	2301      	movs	r3, #1
 8007dfa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
=======
 8006d58:	2301      	movs	r3, #1
 8006d5a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
>>>>>>> ModeSelect_v2
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
<<<<<<< HEAD
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	2201      	movs	r2, #1
 8007e02:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	2201      	movs	r2, #1
 8007e0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
=======
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	2201      	movs	r2, #1
 8006d62:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	2201      	movs	r2, #1
 8006d6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
>>>>>>> ModeSelect_v2
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
<<<<<<< HEAD
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	2200      	movs	r2, #0
 8007e12:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	2200      	movs	r2, #0
 8007e18:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007e1a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3730      	adds	r7, #48	; 0x30
 8007e22:	46bd      	mov	sp, r7
 8007e24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007e28 <UART_AdvFeatureConfig>:
=======
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	2200      	movs	r2, #0
 8006d72:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	2200      	movs	r2, #0
 8006d78:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006d7a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3730      	adds	r7, #48	; 0x30
 8006d82:	46bd      	mov	sp, r7
 8006d84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006d88 <UART_AdvFeatureConfig>:
>>>>>>> ModeSelect_v2
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8007e28:	b480      	push	{r7}
 8007e2a:	b083      	sub	sp, #12
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
=======
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
>>>>>>> ModeSelect_v2
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
<<<<<<< HEAD
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e34:	f003 0301 	and.w	r3, r3, #1
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d00a      	beq.n	8007e52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	430a      	orrs	r2, r1
 8007e50:	605a      	str	r2, [r3, #4]
=======
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d94:	f003 0301 	and.w	r3, r3, #1
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d00a      	beq.n	8006db2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	430a      	orrs	r2, r1
 8006db0:	605a      	str	r2, [r3, #4]
>>>>>>> ModeSelect_v2
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
<<<<<<< HEAD
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e56:	f003 0302 	and.w	r3, r3, #2
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d00a      	beq.n	8007e74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	430a      	orrs	r2, r1
 8007e72:	605a      	str	r2, [r3, #4]
=======
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db6:	f003 0302 	and.w	r3, r3, #2
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d00a      	beq.n	8006dd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	430a      	orrs	r2, r1
 8006dd2:	605a      	str	r2, [r3, #4]
>>>>>>> ModeSelect_v2
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
<<<<<<< HEAD
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e78:	f003 0304 	and.w	r3, r3, #4
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d00a      	beq.n	8007e96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	430a      	orrs	r2, r1
 8007e94:	605a      	str	r2, [r3, #4]
=======
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dd8:	f003 0304 	and.w	r3, r3, #4
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00a      	beq.n	8006df6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	430a      	orrs	r2, r1
 8006df4:	605a      	str	r2, [r3, #4]
>>>>>>> ModeSelect_v2
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
<<<<<<< HEAD
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e9a:	f003 0308 	and.w	r3, r3, #8
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d00a      	beq.n	8007eb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	430a      	orrs	r2, r1
 8007eb6:	605a      	str	r2, [r3, #4]
=======
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dfa:	f003 0308 	and.w	r3, r3, #8
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d00a      	beq.n	8006e18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	430a      	orrs	r2, r1
 8006e16:	605a      	str	r2, [r3, #4]
>>>>>>> ModeSelect_v2
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
<<<<<<< HEAD
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ebc:	f003 0310 	and.w	r3, r3, #16
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d00a      	beq.n	8007eda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	430a      	orrs	r2, r1
 8007ed8:	609a      	str	r2, [r3, #8]
=======
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e1c:	f003 0310 	and.w	r3, r3, #16
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d00a      	beq.n	8006e3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	430a      	orrs	r2, r1
 8006e38:	609a      	str	r2, [r3, #8]
>>>>>>> ModeSelect_v2
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
<<<<<<< HEAD
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ede:	f003 0320 	and.w	r3, r3, #32
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d00a      	beq.n	8007efc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	430a      	orrs	r2, r1
 8007efa:	609a      	str	r2, [r3, #8]
=======
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e3e:	f003 0320 	and.w	r3, r3, #32
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d00a      	beq.n	8006e5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	430a      	orrs	r2, r1
 8006e5a:	609a      	str	r2, [r3, #8]
>>>>>>> ModeSelect_v2
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
<<<<<<< HEAD
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d01a      	beq.n	8007f3e <UART_AdvFeatureConfig+0x116>
=======
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d01a      	beq.n	8006e9e <UART_AdvFeatureConfig+0x116>
>>>>>>> ModeSelect_v2
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
<<<<<<< HEAD
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	430a      	orrs	r2, r1
 8007f1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f26:	d10a      	bne.n	8007f3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	430a      	orrs	r2, r1
 8007f3c:	605a      	str	r2, [r3, #4]
=======
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	430a      	orrs	r2, r1
 8006e7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e86:	d10a      	bne.n	8006e9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	430a      	orrs	r2, r1
 8006e9c:	605a      	str	r2, [r3, #4]
>>>>>>> ModeSelect_v2
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
<<<<<<< HEAD
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d00a      	beq.n	8007f60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	430a      	orrs	r2, r1
 8007f5e:	605a      	str	r2, [r3, #4]
  }
}
 8007f60:	bf00      	nop
 8007f62:	370c      	adds	r7, #12
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <UART_CheckIdleState>:
=======
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00a      	beq.n	8006ec0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	430a      	orrs	r2, r1
 8006ebe:	605a      	str	r2, [r3, #4]
  }
}
 8006ec0:	bf00      	nop
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <UART_CheckIdleState>:
>>>>>>> ModeSelect_v2
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b086      	sub	sp, #24
 8007f70:	af02      	add	r7, sp, #8
 8007f72:	6078      	str	r0, [r7, #4]
=======
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b086      	sub	sp, #24
 8006ed0:	af02      	add	r7, sp, #8
 8006ed2:	6078      	str	r0, [r7, #4]
>>>>>>> ModeSelect_v2
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
<<<<<<< HEAD
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007f7c:	f7fa fe42 	bl	8002c04 <HAL_GetTick>
 8007f80:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f003 0308 	and.w	r3, r3, #8
 8007f8c:	2b08      	cmp	r3, #8
 8007f8e:	d10e      	bne.n	8007fae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f94:	9300      	str	r3, [sp, #0]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 f82f 	bl	8008002 <UART_WaitOnFlagUntilTimeout>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d001      	beq.n	8007fae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007faa:	2303      	movs	r3, #3
 8007fac:	e025      	b.n	8007ffa <UART_CheckIdleState+0x8e>
=======
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006edc:	f7fa fef0 	bl	8001cc0 <HAL_GetTick>
 8006ee0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 0308 	and.w	r3, r3, #8
 8006eec:	2b08      	cmp	r3, #8
 8006eee:	d10e      	bne.n	8006f0e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ef0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ef4:	9300      	str	r3, [sp, #0]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 f82f 	bl	8006f62 <UART_WaitOnFlagUntilTimeout>
 8006f04:	4603      	mov	r3, r0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d001      	beq.n	8006f0e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f0a:	2303      	movs	r3, #3
 8006f0c:	e025      	b.n	8006f5a <UART_CheckIdleState+0x8e>
>>>>>>> ModeSelect_v2
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
<<<<<<< HEAD
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f003 0304 	and.w	r3, r3, #4
 8007fb8:	2b04      	cmp	r3, #4
 8007fba:	d10e      	bne.n	8007fda <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007fc0:	9300      	str	r3, [sp, #0]
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 f819 	bl	8008002 <UART_WaitOnFlagUntilTimeout>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d001      	beq.n	8007fda <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fd6:	2303      	movs	r3, #3
 8007fd8:	e00f      	b.n	8007ffa <UART_CheckIdleState+0x8e>
=======
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f003 0304 	and.w	r3, r3, #4
 8006f18:	2b04      	cmp	r3, #4
 8006f1a:	d10e      	bne.n	8006f3a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f20:	9300      	str	r3, [sp, #0]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2200      	movs	r2, #0
 8006f26:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 f819 	bl	8006f62 <UART_WaitOnFlagUntilTimeout>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d001      	beq.n	8006f3a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f36:	2303      	movs	r3, #3
 8006f38:	e00f      	b.n	8006f5a <UART_CheckIdleState+0x8e>
>>>>>>> ModeSelect_v2
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2220      	movs	r2, #32
 8007fde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2220      	movs	r2, #32
 8007fe6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007ff8:	2300      	movs	r3, #0
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3710      	adds	r7, #16
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}

08008002 <UART_WaitOnFlagUntilTimeout>:
=======
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2220      	movs	r2, #32
 8006f3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2220      	movs	r2, #32
 8006f46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3710      	adds	r7, #16
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <UART_WaitOnFlagUntilTimeout>:
>>>>>>> ModeSelect_v2
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
<<<<<<< HEAD
 8008002:	b580      	push	{r7, lr}
 8008004:	b09c      	sub	sp, #112	; 0x70
 8008006:	af00      	add	r7, sp, #0
 8008008:	60f8      	str	r0, [r7, #12]
 800800a:	60b9      	str	r1, [r7, #8]
 800800c:	603b      	str	r3, [r7, #0]
 800800e:	4613      	mov	r3, r2
 8008010:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008012:	e0a9      	b.n	8008168 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008014:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800801a:	f000 80a5 	beq.w	8008168 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800801e:	f7fa fdf1 	bl	8002c04 <HAL_GetTick>
 8008022:	4602      	mov	r2, r0
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	1ad3      	subs	r3, r2, r3
 8008028:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800802a:	429a      	cmp	r2, r3
 800802c:	d302      	bcc.n	8008034 <UART_WaitOnFlagUntilTimeout+0x32>
 800802e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008030:	2b00      	cmp	r3, #0
 8008032:	d140      	bne.n	80080b6 <UART_WaitOnFlagUntilTimeout+0xb4>
=======
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b09c      	sub	sp, #112	; 0x70
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	60f8      	str	r0, [r7, #12]
 8006f6a:	60b9      	str	r1, [r7, #8]
 8006f6c:	603b      	str	r3, [r7, #0]
 8006f6e:	4613      	mov	r3, r2
 8006f70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f72:	e0a9      	b.n	80070c8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f7a:	f000 80a5 	beq.w	80070c8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f7e:	f7fa fe9f 	bl	8001cc0 <HAL_GetTick>
 8006f82:	4602      	mov	r2, r0
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	1ad3      	subs	r3, r2, r3
 8006f88:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d302      	bcc.n	8006f94 <UART_WaitOnFlagUntilTimeout+0x32>
 8006f8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d140      	bne.n	8007016 <UART_WaitOnFlagUntilTimeout+0xb4>
>>>>>>> ModeSelect_v2
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
<<<<<<< HEAD
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800803a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800803c:	e853 3f00 	ldrex	r3, [r3]
 8008040:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008044:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008048:	667b      	str	r3, [r7, #100]	; 0x64
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	461a      	mov	r2, r3
 8008050:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008052:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008054:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008056:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008058:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800805a:	e841 2300 	strex	r3, r2, [r1]
 800805e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008060:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008062:	2b00      	cmp	r3, #0
 8008064:	d1e6      	bne.n	8008034 <UART_WaitOnFlagUntilTimeout+0x32>
=======
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f9c:	e853 3f00 	ldrex	r3, [r3]
 8006fa0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fa4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006fa8:	667b      	str	r3, [r7, #100]	; 0x64
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	461a      	mov	r2, r3
 8006fb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006fb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006fb4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006fb8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006fba:	e841 2300 	strex	r3, r2, [r1]
 8006fbe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006fc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d1e6      	bne.n	8006f94 <UART_WaitOnFlagUntilTimeout+0x32>
>>>>>>> ModeSelect_v2
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
<<<<<<< HEAD
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	3308      	adds	r3, #8
 800806c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800806e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008070:	e853 3f00 	ldrex	r3, [r3]
 8008074:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008078:	f023 0301 	bic.w	r3, r3, #1
 800807c:	663b      	str	r3, [r7, #96]	; 0x60
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	3308      	adds	r3, #8
 8008084:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008086:	64ba      	str	r2, [r7, #72]	; 0x48
 8008088:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800808a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800808c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800808e:	e841 2300 	strex	r3, r2, [r1]
 8008092:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008096:	2b00      	cmp	r3, #0
 8008098:	d1e5      	bne.n	8008066 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2220      	movs	r2, #32
 800809e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2220      	movs	r2, #32
 80080a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2200      	movs	r2, #0
 80080ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80080b2:	2303      	movs	r3, #3
 80080b4:	e069      	b.n	800818a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f003 0304 	and.w	r3, r3, #4
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d051      	beq.n	8008168 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	69db      	ldr	r3, [r3, #28]
 80080ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080d2:	d149      	bne.n	8008168 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80080dc:	621a      	str	r2, [r3, #32]
=======
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	3308      	adds	r3, #8
 8006fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fd0:	e853 3f00 	ldrex	r3, [r3]
 8006fd4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd8:	f023 0301 	bic.w	r3, r3, #1
 8006fdc:	663b      	str	r3, [r7, #96]	; 0x60
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	3308      	adds	r3, #8
 8006fe4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006fe6:	64ba      	str	r2, [r7, #72]	; 0x48
 8006fe8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006fec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fee:	e841 2300 	strex	r3, r2, [r1]
 8006ff2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006ff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d1e5      	bne.n	8006fc6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2220      	movs	r2, #32
 8006ffe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2220      	movs	r2, #32
 8007006:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2200      	movs	r2, #0
 800700e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007012:	2303      	movs	r3, #3
 8007014:	e069      	b.n	80070ea <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f003 0304 	and.w	r3, r3, #4
 8007020:	2b00      	cmp	r3, #0
 8007022:	d051      	beq.n	80070c8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	69db      	ldr	r3, [r3, #28]
 800702a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800702e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007032:	d149      	bne.n	80070c8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800703c:	621a      	str	r2, [r3, #32]
>>>>>>> ModeSelect_v2

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
<<<<<<< HEAD
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e6:	e853 3f00 	ldrex	r3, [r3]
 80080ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80080f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	461a      	mov	r2, r3
 80080fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080fc:	637b      	str	r3, [r7, #52]	; 0x34
 80080fe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008100:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008102:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008104:	e841 2300 	strex	r3, r2, [r1]
 8008108:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800810a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800810c:	2b00      	cmp	r3, #0
 800810e:	d1e6      	bne.n	80080de <UART_WaitOnFlagUntilTimeout+0xdc>
=======
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007046:	e853 3f00 	ldrex	r3, [r3]
 800704a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800704c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007052:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	461a      	mov	r2, r3
 800705a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800705c:	637b      	str	r3, [r7, #52]	; 0x34
 800705e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007060:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007062:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007064:	e841 2300 	strex	r3, r2, [r1]
 8007068:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800706a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800706c:	2b00      	cmp	r3, #0
 800706e:	d1e6      	bne.n	800703e <UART_WaitOnFlagUntilTimeout+0xdc>
>>>>>>> ModeSelect_v2
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
<<<<<<< HEAD
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	3308      	adds	r3, #8
 8008116:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	e853 3f00 	ldrex	r3, [r3]
 800811e:	613b      	str	r3, [r7, #16]
   return(result);
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	f023 0301 	bic.w	r3, r3, #1
 8008126:	66bb      	str	r3, [r7, #104]	; 0x68
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	3308      	adds	r3, #8
 800812e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008130:	623a      	str	r2, [r7, #32]
 8008132:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008134:	69f9      	ldr	r1, [r7, #28]
 8008136:	6a3a      	ldr	r2, [r7, #32]
 8008138:	e841 2300 	strex	r3, r2, [r1]
 800813c:	61bb      	str	r3, [r7, #24]
   return(result);
 800813e:	69bb      	ldr	r3, [r7, #24]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d1e5      	bne.n	8008110 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2220      	movs	r2, #32
 8008148:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2220      	movs	r2, #32
 8008150:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2220      	movs	r2, #32
 8008158:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2200      	movs	r2, #0
 8008160:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008164:	2303      	movs	r3, #3
 8008166:	e010      	b.n	800818a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	69da      	ldr	r2, [r3, #28]
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	4013      	ands	r3, r2
 8008172:	68ba      	ldr	r2, [r7, #8]
 8008174:	429a      	cmp	r2, r3
 8008176:	bf0c      	ite	eq
 8008178:	2301      	moveq	r3, #1
 800817a:	2300      	movne	r3, #0
 800817c:	b2db      	uxtb	r3, r3
 800817e:	461a      	mov	r2, r3
 8008180:	79fb      	ldrb	r3, [r7, #7]
 8008182:	429a      	cmp	r2, r3
 8008184:	f43f af46 	beq.w	8008014 <UART_WaitOnFlagUntilTimeout+0x12>
=======
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	3308      	adds	r3, #8
 8007076:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	e853 3f00 	ldrex	r3, [r3]
 800707e:	613b      	str	r3, [r7, #16]
   return(result);
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	f023 0301 	bic.w	r3, r3, #1
 8007086:	66bb      	str	r3, [r7, #104]	; 0x68
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	3308      	adds	r3, #8
 800708e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007090:	623a      	str	r2, [r7, #32]
 8007092:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007094:	69f9      	ldr	r1, [r7, #28]
 8007096:	6a3a      	ldr	r2, [r7, #32]
 8007098:	e841 2300 	strex	r3, r2, [r1]
 800709c:	61bb      	str	r3, [r7, #24]
   return(result);
 800709e:	69bb      	ldr	r3, [r7, #24]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d1e5      	bne.n	8007070 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2220      	movs	r2, #32
 80070a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2220      	movs	r2, #32
 80070b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2220      	movs	r2, #32
 80070b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2200      	movs	r2, #0
 80070c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80070c4:	2303      	movs	r3, #3
 80070c6:	e010      	b.n	80070ea <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	69da      	ldr	r2, [r3, #28]
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	4013      	ands	r3, r2
 80070d2:	68ba      	ldr	r2, [r7, #8]
 80070d4:	429a      	cmp	r2, r3
 80070d6:	bf0c      	ite	eq
 80070d8:	2301      	moveq	r3, #1
 80070da:	2300      	movne	r3, #0
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	461a      	mov	r2, r3
 80070e0:	79fb      	ldrb	r3, [r7, #7]
 80070e2:	429a      	cmp	r2, r3
 80070e4:	f43f af46 	beq.w	8006f74 <UART_WaitOnFlagUntilTimeout+0x12>
>>>>>>> ModeSelect_v2
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8008188:	2300      	movs	r3, #0
}
 800818a:	4618      	mov	r0, r3
 800818c:	3770      	adds	r7, #112	; 0x70
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
	...

08008194 <UART_Start_Receive_IT>:
=======
 80070e8:	2300      	movs	r3, #0
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3770      	adds	r7, #112	; 0x70
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
	...

080070f4 <UART_Start_Receive_IT>:
>>>>>>> ModeSelect_v2
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< HEAD
 8008194:	b480      	push	{r7}
 8008196:	b0a3      	sub	sp, #140	; 0x8c
 8008198:	af00      	add	r7, sp, #0
 800819a:	60f8      	str	r0, [r7, #12]
 800819c:	60b9      	str	r1, [r7, #8]
 800819e:	4613      	mov	r3, r2
 80081a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	68ba      	ldr	r2, [r7, #8]
 80081a6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	88fa      	ldrh	r2, [r7, #6]
 80081ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	88fa      	ldrh	r2, [r7, #6]
 80081b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2200      	movs	r2, #0
 80081bc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081c6:	d10e      	bne.n	80081e6 <UART_Start_Receive_IT+0x52>
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	691b      	ldr	r3, [r3, #16]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d105      	bne.n	80081dc <UART_Start_Receive_IT+0x48>
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80081d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80081da:	e02d      	b.n	8008238 <UART_Start_Receive_IT+0xa4>
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	22ff      	movs	r2, #255	; 0xff
 80081e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80081e4:	e028      	b.n	8008238 <UART_Start_Receive_IT+0xa4>
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	689b      	ldr	r3, [r3, #8]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d10d      	bne.n	800820a <UART_Start_Receive_IT+0x76>
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	691b      	ldr	r3, [r3, #16]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d104      	bne.n	8008200 <UART_Start_Receive_IT+0x6c>
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	22ff      	movs	r2, #255	; 0xff
 80081fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80081fe:	e01b      	b.n	8008238 <UART_Start_Receive_IT+0xa4>
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	227f      	movs	r2, #127	; 0x7f
 8008204:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008208:	e016      	b.n	8008238 <UART_Start_Receive_IT+0xa4>
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	689b      	ldr	r3, [r3, #8]
 800820e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008212:	d10d      	bne.n	8008230 <UART_Start_Receive_IT+0x9c>
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	691b      	ldr	r3, [r3, #16]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d104      	bne.n	8008226 <UART_Start_Receive_IT+0x92>
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	227f      	movs	r2, #127	; 0x7f
 8008220:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008224:	e008      	b.n	8008238 <UART_Start_Receive_IT+0xa4>
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	223f      	movs	r2, #63	; 0x3f
 800822a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800822e:	e003      	b.n	8008238 <UART_Start_Receive_IT+0xa4>
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2200      	movs	r2, #0
 8008234:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2200      	movs	r2, #0
 800823c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2222      	movs	r2, #34	; 0x22
 8008244:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	3308      	adds	r3, #8
 800824e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008250:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008252:	e853 3f00 	ldrex	r3, [r3]
 8008256:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008258:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800825a:	f043 0301 	orr.w	r3, r3, #1
 800825e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	3308      	adds	r3, #8
 8008268:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800826c:	673a      	str	r2, [r7, #112]	; 0x70
 800826e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008270:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008272:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008274:	e841 2300 	strex	r3, r2, [r1]
 8008278:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800827a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800827c:	2b00      	cmp	r3, #0
 800827e:	d1e3      	bne.n	8008248 <UART_Start_Receive_IT+0xb4>
=======
 80070f4:	b480      	push	{r7}
 80070f6:	b0a3      	sub	sp, #140	; 0x8c
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	4613      	mov	r3, r2
 8007100:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	68ba      	ldr	r2, [r7, #8]
 8007106:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	88fa      	ldrh	r2, [r7, #6]
 800710c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	88fa      	ldrh	r2, [r7, #6]
 8007114:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2200      	movs	r2, #0
 800711c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007126:	d10e      	bne.n	8007146 <UART_Start_Receive_IT+0x52>
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	691b      	ldr	r3, [r3, #16]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d105      	bne.n	800713c <UART_Start_Receive_IT+0x48>
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007136:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800713a:	e02d      	b.n	8007198 <UART_Start_Receive_IT+0xa4>
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	22ff      	movs	r2, #255	; 0xff
 8007140:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007144:	e028      	b.n	8007198 <UART_Start_Receive_IT+0xa4>
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d10d      	bne.n	800716a <UART_Start_Receive_IT+0x76>
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d104      	bne.n	8007160 <UART_Start_Receive_IT+0x6c>
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	22ff      	movs	r2, #255	; 0xff
 800715a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800715e:	e01b      	b.n	8007198 <UART_Start_Receive_IT+0xa4>
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	227f      	movs	r2, #127	; 0x7f
 8007164:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007168:	e016      	b.n	8007198 <UART_Start_Receive_IT+0xa4>
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007172:	d10d      	bne.n	8007190 <UART_Start_Receive_IT+0x9c>
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d104      	bne.n	8007186 <UART_Start_Receive_IT+0x92>
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	227f      	movs	r2, #127	; 0x7f
 8007180:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007184:	e008      	b.n	8007198 <UART_Start_Receive_IT+0xa4>
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	223f      	movs	r2, #63	; 0x3f
 800718a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800718e:	e003      	b.n	8007198 <UART_Start_Receive_IT+0xa4>
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2200      	movs	r2, #0
 8007194:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2200      	movs	r2, #0
 800719c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2222      	movs	r2, #34	; 0x22
 80071a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	3308      	adds	r3, #8
 80071ae:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071b2:	e853 3f00 	ldrex	r3, [r3]
 80071b6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80071b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80071ba:	f043 0301 	orr.w	r3, r3, #1
 80071be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	3308      	adds	r3, #8
 80071c8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80071cc:	673a      	str	r2, [r7, #112]	; 0x70
 80071ce:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80071d2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80071d4:	e841 2300 	strex	r3, r2, [r1]
 80071d8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80071da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d1e3      	bne.n	80071a8 <UART_Start_Receive_IT+0xb4>
>>>>>>> ModeSelect_v2

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
<<<<<<< HEAD
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008284:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008288:	d153      	bne.n	8008332 <UART_Start_Receive_IT+0x19e>
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008290:	88fa      	ldrh	r2, [r7, #6]
 8008292:	429a      	cmp	r2, r3
 8008294:	d34d      	bcc.n	8008332 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800829e:	d107      	bne.n	80082b0 <UART_Start_Receive_IT+0x11c>
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	691b      	ldr	r3, [r3, #16]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d103      	bne.n	80082b0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	4a4b      	ldr	r2, [pc, #300]	; (80083d8 <UART_Start_Receive_IT+0x244>)
 80082ac:	671a      	str	r2, [r3, #112]	; 0x70
 80082ae:	e002      	b.n	80082b6 <UART_Start_Receive_IT+0x122>
=======
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071e8:	d153      	bne.n	8007292 <UART_Start_Receive_IT+0x19e>
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80071f0:	88fa      	ldrh	r2, [r7, #6]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d34d      	bcc.n	8007292 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071fe:	d107      	bne.n	8007210 <UART_Start_Receive_IT+0x11c>
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d103      	bne.n	8007210 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	4a4b      	ldr	r2, [pc, #300]	; (8007338 <UART_Start_Receive_IT+0x244>)
 800720c:	671a      	str	r2, [r3, #112]	; 0x70
 800720e:	e002      	b.n	8007216 <UART_Start_Receive_IT+0x122>
>>>>>>> ModeSelect_v2
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
<<<<<<< HEAD
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	4a4a      	ldr	r2, [pc, #296]	; (80083dc <UART_Start_Receive_IT+0x248>)
 80082b4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2200      	movs	r2, #0
 80082ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	691b      	ldr	r3, [r3, #16]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d01a      	beq.n	80082fc <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082ce:	e853 3f00 	ldrex	r3, [r3]
 80082d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80082d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	461a      	mov	r2, r3
 80082e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80082e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80082ea:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80082ee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80082f0:	e841 2300 	strex	r3, r2, [r1]
 80082f4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80082f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d1e4      	bne.n	80082c6 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	3308      	adds	r3, #8
 8008302:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008306:	e853 3f00 	ldrex	r3, [r3]
 800830a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800830c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800830e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008312:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	3308      	adds	r3, #8
 800831a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800831c:	64ba      	str	r2, [r7, #72]	; 0x48
 800831e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008320:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008322:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008324:	e841 2300 	strex	r3, r2, [r1]
 8008328:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800832a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800832c:	2b00      	cmp	r3, #0
 800832e:	d1e5      	bne.n	80082fc <UART_Start_Receive_IT+0x168>
 8008330:	e04a      	b.n	80083c8 <UART_Start_Receive_IT+0x234>
=======
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	4a4a      	ldr	r2, [pc, #296]	; (800733c <UART_Start_Receive_IT+0x248>)
 8007214:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2200      	movs	r2, #0
 800721a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d01a      	beq.n	800725c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800722c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800722e:	e853 3f00 	ldrex	r3, [r3]
 8007232:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007234:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007236:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800723a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	461a      	mov	r2, r3
 8007244:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007248:	65fb      	str	r3, [r7, #92]	; 0x5c
 800724a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800724c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800724e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007250:	e841 2300 	strex	r3, r2, [r1]
 8007254:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007256:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007258:	2b00      	cmp	r3, #0
 800725a:	d1e4      	bne.n	8007226 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	3308      	adds	r3, #8
 8007262:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007266:	e853 3f00 	ldrex	r3, [r3]
 800726a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800726c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800726e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007272:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	3308      	adds	r3, #8
 800727a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800727c:	64ba      	str	r2, [r7, #72]	; 0x48
 800727e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007280:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007282:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007284:	e841 2300 	strex	r3, r2, [r1]
 8007288:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800728a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800728c:	2b00      	cmp	r3, #0
 800728e:	d1e5      	bne.n	800725c <UART_Start_Receive_IT+0x168>
 8007290:	e04a      	b.n	8007328 <UART_Start_Receive_IT+0x234>
>>>>>>> ModeSelect_v2
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
<<<<<<< HEAD
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800833a:	d107      	bne.n	800834c <UART_Start_Receive_IT+0x1b8>
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	691b      	ldr	r3, [r3, #16]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d103      	bne.n	800834c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	4a26      	ldr	r2, [pc, #152]	; (80083e0 <UART_Start_Receive_IT+0x24c>)
 8008348:	671a      	str	r2, [r3, #112]	; 0x70
 800834a:	e002      	b.n	8008352 <UART_Start_Receive_IT+0x1be>
=======
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800729a:	d107      	bne.n	80072ac <UART_Start_Receive_IT+0x1b8>
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	691b      	ldr	r3, [r3, #16]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d103      	bne.n	80072ac <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	4a26      	ldr	r2, [pc, #152]	; (8007340 <UART_Start_Receive_IT+0x24c>)
 80072a8:	671a      	str	r2, [r3, #112]	; 0x70
 80072aa:	e002      	b.n	80072b2 <UART_Start_Receive_IT+0x1be>
>>>>>>> ModeSelect_v2
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
<<<<<<< HEAD
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	4a25      	ldr	r2, [pc, #148]	; (80083e4 <UART_Start_Receive_IT+0x250>)
 8008350:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2200      	movs	r2, #0
 8008356:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	691b      	ldr	r3, [r3, #16]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d019      	beq.n	8008396 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800836a:	e853 3f00 	ldrex	r3, [r3]
 800836e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008372:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008376:	677b      	str	r3, [r7, #116]	; 0x74
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	461a      	mov	r2, r3
 800837e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008380:	637b      	str	r3, [r7, #52]	; 0x34
 8008382:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008384:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008386:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008388:	e841 2300 	strex	r3, r2, [r1]
 800838c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800838e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008390:	2b00      	cmp	r3, #0
 8008392:	d1e6      	bne.n	8008362 <UART_Start_Receive_IT+0x1ce>
 8008394:	e018      	b.n	80083c8 <UART_Start_Receive_IT+0x234>
=======
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	4a25      	ldr	r2, [pc, #148]	; (8007344 <UART_Start_Receive_IT+0x250>)
 80072b0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2200      	movs	r2, #0
 80072b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d019      	beq.n	80072f6 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ca:	e853 3f00 	ldrex	r3, [r3]
 80072ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80072d6:	677b      	str	r3, [r7, #116]	; 0x74
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	461a      	mov	r2, r3
 80072de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072e0:	637b      	str	r3, [r7, #52]	; 0x34
 80072e2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80072e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072e8:	e841 2300 	strex	r3, r2, [r1]
 80072ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80072ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d1e6      	bne.n	80072c2 <UART_Start_Receive_IT+0x1ce>
 80072f4:	e018      	b.n	8007328 <UART_Start_Receive_IT+0x234>
>>>>>>> ModeSelect_v2
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
<<<<<<< HEAD
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	e853 3f00 	ldrex	r3, [r3]
 80083a2:	613b      	str	r3, [r7, #16]
   return(result);
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	f043 0320 	orr.w	r3, r3, #32
 80083aa:	67bb      	str	r3, [r7, #120]	; 0x78
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	461a      	mov	r2, r3
 80083b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083b4:	623b      	str	r3, [r7, #32]
 80083b6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b8:	69f9      	ldr	r1, [r7, #28]
 80083ba:	6a3a      	ldr	r2, [r7, #32]
 80083bc:	e841 2300 	strex	r3, r2, [r1]
 80083c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80083c2:	69bb      	ldr	r3, [r7, #24]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d1e6      	bne.n	8008396 <UART_Start_Receive_IT+0x202>
=======
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	e853 3f00 	ldrex	r3, [r3]
 8007302:	613b      	str	r3, [r7, #16]
   return(result);
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	f043 0320 	orr.w	r3, r3, #32
 800730a:	67bb      	str	r3, [r7, #120]	; 0x78
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	461a      	mov	r2, r3
 8007312:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007314:	623b      	str	r3, [r7, #32]
 8007316:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007318:	69f9      	ldr	r1, [r7, #28]
 800731a:	6a3a      	ldr	r2, [r7, #32]
 800731c:	e841 2300 	strex	r3, r2, [r1]
 8007320:	61bb      	str	r3, [r7, #24]
   return(result);
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d1e6      	bne.n	80072f6 <UART_Start_Receive_IT+0x202>
>>>>>>> ModeSelect_v2
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
<<<<<<< HEAD
 80083c8:	2300      	movs	r3, #0
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	378c      	adds	r7, #140	; 0x8c
 80083ce:	46bd      	mov	sp, r7
 80083d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d4:	4770      	bx	lr
 80083d6:	bf00      	nop
 80083d8:	08008af1 	.word	0x08008af1
 80083dc:	080087f9 	.word	0x080087f9
 80083e0:	08008697 	.word	0x08008697
 80083e4:	08008537 	.word	0x08008537

080083e8 <UART_EndRxTransfer>:
=======
 8007328:	2300      	movs	r3, #0
}
 800732a:	4618      	mov	r0, r3
 800732c:	378c      	adds	r7, #140	; 0x8c
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr
 8007336:	bf00      	nop
 8007338:	08007a51 	.word	0x08007a51
 800733c:	08007759 	.word	0x08007759
 8007340:	080075f7 	.word	0x080075f7
 8007344:	08007497 	.word	0x08007497

08007348 <UART_EndRxTransfer>:
>>>>>>> ModeSelect_v2
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80083e8:	b480      	push	{r7}
 80083ea:	b095      	sub	sp, #84	; 0x54
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083f8:	e853 3f00 	ldrex	r3, [r3]
 80083fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80083fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008400:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008404:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	461a      	mov	r2, r3
 800840c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800840e:	643b      	str	r3, [r7, #64]	; 0x40
 8008410:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008412:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008414:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008416:	e841 2300 	strex	r3, r2, [r1]
 800841a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800841c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800841e:	2b00      	cmp	r3, #0
 8008420:	d1e6      	bne.n	80083f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	3308      	adds	r3, #8
 8008428:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800842a:	6a3b      	ldr	r3, [r7, #32]
 800842c:	e853 3f00 	ldrex	r3, [r3]
 8008430:	61fb      	str	r3, [r7, #28]
   return(result);
 8008432:	69fb      	ldr	r3, [r7, #28]
 8008434:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008438:	f023 0301 	bic.w	r3, r3, #1
 800843c:	64bb      	str	r3, [r7, #72]	; 0x48
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	3308      	adds	r3, #8
 8008444:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008446:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008448:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800844a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800844c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800844e:	e841 2300 	strex	r3, r2, [r1]
 8008452:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008456:	2b00      	cmp	r3, #0
 8008458:	d1e3      	bne.n	8008422 <UART_EndRxTransfer+0x3a>
=======
 8007348:	b480      	push	{r7}
 800734a:	b095      	sub	sp, #84	; 0x54
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007358:	e853 3f00 	ldrex	r3, [r3]
 800735c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800735e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007360:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007364:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	461a      	mov	r2, r3
 800736c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800736e:	643b      	str	r3, [r7, #64]	; 0x40
 8007370:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007372:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007374:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007376:	e841 2300 	strex	r3, r2, [r1]
 800737a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800737c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800737e:	2b00      	cmp	r3, #0
 8007380:	d1e6      	bne.n	8007350 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	3308      	adds	r3, #8
 8007388:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800738a:	6a3b      	ldr	r3, [r7, #32]
 800738c:	e853 3f00 	ldrex	r3, [r3]
 8007390:	61fb      	str	r3, [r7, #28]
   return(result);
 8007392:	69fb      	ldr	r3, [r7, #28]
 8007394:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007398:	f023 0301 	bic.w	r3, r3, #1
 800739c:	64bb      	str	r3, [r7, #72]	; 0x48
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	3308      	adds	r3, #8
 80073a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80073a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80073ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073ae:	e841 2300 	strex	r3, r2, [r1]
 80073b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d1e3      	bne.n	8007382 <UART_EndRxTransfer+0x3a>
>>>>>>> ModeSelect_v2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800845e:	2b01      	cmp	r3, #1
 8008460:	d118      	bne.n	8008494 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	e853 3f00 	ldrex	r3, [r3]
 800846e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	f023 0310 	bic.w	r3, r3, #16
 8008476:	647b      	str	r3, [r7, #68]	; 0x44
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	461a      	mov	r2, r3
 800847e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008480:	61bb      	str	r3, [r7, #24]
 8008482:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008484:	6979      	ldr	r1, [r7, #20]
 8008486:	69ba      	ldr	r2, [r7, #24]
 8008488:	e841 2300 	strex	r3, r2, [r1]
 800848c:	613b      	str	r3, [r7, #16]
   return(result);
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d1e6      	bne.n	8008462 <UART_EndRxTransfer+0x7a>
=======
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d118      	bne.n	80073f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	e853 3f00 	ldrex	r3, [r3]
 80073ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	f023 0310 	bic.w	r3, r3, #16
 80073d6:	647b      	str	r3, [r7, #68]	; 0x44
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	461a      	mov	r2, r3
 80073de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073e0:	61bb      	str	r3, [r7, #24]
 80073e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e4:	6979      	ldr	r1, [r7, #20]
 80073e6:	69ba      	ldr	r2, [r7, #24]
 80073e8:	e841 2300 	strex	r3, r2, [r1]
 80073ec:	613b      	str	r3, [r7, #16]
   return(result);
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d1e6      	bne.n	80073c2 <UART_EndRxTransfer+0x7a>
>>>>>>> ModeSelect_v2
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2220      	movs	r2, #32
 8008498:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2200      	movs	r2, #0
 80084a0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	671a      	str	r2, [r3, #112]	; 0x70
}
 80084a8:	bf00      	nop
 80084aa:	3754      	adds	r7, #84	; 0x54
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr

080084b4 <UART_DMAAbortOnError>:
=======
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2220      	movs	r2, #32
 80073f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007408:	bf00      	nop
 800740a:	3754      	adds	r7, #84	; 0x54
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr

08007414 <UART_DMAAbortOnError>:
>>>>>>> ModeSelect_v2
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2200      	movs	r2, #0
 80084c6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2200      	movs	r2, #0
 80084ce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
=======
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007420:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2200      	movs	r2, #0
 8007426:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2200      	movs	r2, #0
 800742e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
>>>>>>> ModeSelect_v2
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 80084d2:	68f8      	ldr	r0, [r7, #12]
 80084d4:	f7ff f996 	bl	8007804 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084d8:	bf00      	nop
 80084da:	3710      	adds	r7, #16
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <UART_EndTransmit_IT>:
=======
 8007432:	68f8      	ldr	r0, [r7, #12]
 8007434:	f7ff f996 	bl	8006764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007438:	bf00      	nop
 800743a:	3710      	adds	r7, #16
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <UART_EndTransmit_IT>:
>>>>>>> ModeSelect_v2
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b088      	sub	sp, #32
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	e853 3f00 	ldrex	r3, [r3]
 80084f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084fc:	61fb      	str	r3, [r7, #28]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	461a      	mov	r2, r3
 8008504:	69fb      	ldr	r3, [r7, #28]
 8008506:	61bb      	str	r3, [r7, #24]
 8008508:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800850a:	6979      	ldr	r1, [r7, #20]
 800850c:	69ba      	ldr	r2, [r7, #24]
 800850e:	e841 2300 	strex	r3, r2, [r1]
 8008512:	613b      	str	r3, [r7, #16]
   return(result);
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d1e6      	bne.n	80084e8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2220      	movs	r2, #32
 800851e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	675a      	str	r2, [r3, #116]	; 0x74
=======
 8007440:	b580      	push	{r7, lr}
 8007442:	b088      	sub	sp, #32
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	e853 3f00 	ldrex	r3, [r3]
 8007454:	60bb      	str	r3, [r7, #8]
   return(result);
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800745c:	61fb      	str	r3, [r7, #28]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	461a      	mov	r2, r3
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	61bb      	str	r3, [r7, #24]
 8007468:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800746a:	6979      	ldr	r1, [r7, #20]
 800746c:	69ba      	ldr	r2, [r7, #24]
 800746e:	e841 2300 	strex	r3, r2, [r1]
 8007472:	613b      	str	r3, [r7, #16]
   return(result);
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d1e6      	bne.n	8007448 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2220      	movs	r2, #32
 800747e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	675a      	str	r2, [r3, #116]	; 0x74
>>>>>>> ModeSelect_v2
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
<<<<<<< HEAD
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f7ff f961 	bl	80077f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800852e:	bf00      	nop
 8008530:	3720      	adds	r7, #32
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}

08008536 <UART_RxISR_8BIT>:
=======
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f7ff f961 	bl	8006750 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800748e:	bf00      	nop
 8007490:	3720      	adds	r7, #32
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}

08007496 <UART_RxISR_8BIT>:
>>>>>>> ModeSelect_v2
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8008536:	b580      	push	{r7, lr}
 8008538:	b096      	sub	sp, #88	; 0x58
 800853a:	af00      	add	r7, sp, #0
 800853c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008544:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
=======
 8007496:	b580      	push	{r7, lr}
 8007498:	b096      	sub	sp, #88	; 0x58
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80074a4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
>>>>>>> ModeSelect_v2
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
<<<<<<< HEAD
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800854e:	2b22      	cmp	r3, #34	; 0x22
 8008550:	f040 8095 	bne.w	800867e <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800855a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800855e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008562:	b2d9      	uxtb	r1, r3
 8008564:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008568:	b2da      	uxtb	r2, r3
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800856e:	400a      	ands	r2, r1
 8008570:	b2d2      	uxtb	r2, r2
 8008572:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008578:	1c5a      	adds	r2, r3, #1
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008584:	b29b      	uxth	r3, r3
 8008586:	3b01      	subs	r3, #1
 8008588:	b29a      	uxth	r2, r3
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008596:	b29b      	uxth	r3, r3
 8008598:	2b00      	cmp	r3, #0
 800859a:	d178      	bne.n	800868e <UART_RxISR_8BIT+0x158>
=======
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074ae:	2b22      	cmp	r3, #34	; 0x22
 80074b0:	f040 8095 	bne.w	80075de <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ba:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80074be:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80074c2:	b2d9      	uxtb	r1, r3
 80074c4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80074c8:	b2da      	uxtb	r2, r3
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074ce:	400a      	ands	r2, r1
 80074d0:	b2d2      	uxtb	r2, r2
 80074d2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074d8:	1c5a      	adds	r2, r3, #1
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	3b01      	subs	r3, #1
 80074e8:	b29a      	uxth	r2, r3
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d178      	bne.n	80075ee <UART_RxISR_8BIT+0x158>
>>>>>>> ModeSelect_v2
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
<<<<<<< HEAD
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a4:	e853 3f00 	ldrex	r3, [r3]
 80085a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80085aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80085b0:	653b      	str	r3, [r7, #80]	; 0x50
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	461a      	mov	r2, r3
 80085b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085ba:	647b      	str	r3, [r7, #68]	; 0x44
 80085bc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80085c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085c2:	e841 2300 	strex	r3, r2, [r1]
 80085c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80085c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d1e6      	bne.n	800859c <UART_RxISR_8BIT+0x66>
=======
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007504:	e853 3f00 	ldrex	r3, [r3]
 8007508:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800750a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800750c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007510:	653b      	str	r3, [r7, #80]	; 0x50
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	461a      	mov	r2, r3
 8007518:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800751a:	647b      	str	r3, [r7, #68]	; 0x44
 800751c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007520:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007522:	e841 2300 	strex	r3, r2, [r1]
 8007526:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800752a:	2b00      	cmp	r3, #0
 800752c:	d1e6      	bne.n	80074fc <UART_RxISR_8BIT+0x66>
>>>>>>> ModeSelect_v2
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
<<<<<<< HEAD
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	3308      	adds	r3, #8
 80085d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d8:	e853 3f00 	ldrex	r3, [r3]
 80085dc:	623b      	str	r3, [r7, #32]
   return(result);
 80085de:	6a3b      	ldr	r3, [r7, #32]
 80085e0:	f023 0301 	bic.w	r3, r3, #1
 80085e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	3308      	adds	r3, #8
 80085ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80085ee:	633a      	str	r2, [r7, #48]	; 0x30
 80085f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085f6:	e841 2300 	strex	r3, r2, [r1]
 80085fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80085fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d1e5      	bne.n	80085ce <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2220      	movs	r2, #32
 8008606:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2200      	movs	r2, #0
 800860e:	671a      	str	r2, [r3, #112]	; 0x70
=======
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	3308      	adds	r3, #8
 8007534:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007538:	e853 3f00 	ldrex	r3, [r3]
 800753c:	623b      	str	r3, [r7, #32]
   return(result);
 800753e:	6a3b      	ldr	r3, [r7, #32]
 8007540:	f023 0301 	bic.w	r3, r3, #1
 8007544:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	3308      	adds	r3, #8
 800754c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800754e:	633a      	str	r2, [r7, #48]	; 0x30
 8007550:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007552:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007554:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007556:	e841 2300 	strex	r3, r2, [r1]
 800755a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800755c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800755e:	2b00      	cmp	r3, #0
 8007560:	d1e5      	bne.n	800752e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2220      	movs	r2, #32
 8007566:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	671a      	str	r2, [r3, #112]	; 0x70
>>>>>>> ModeSelect_v2

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008614:	2b01      	cmp	r3, #1
 8008616:	d12e      	bne.n	8008676 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2200      	movs	r2, #0
 800861c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	e853 3f00 	ldrex	r3, [r3]
 800862a:	60fb      	str	r3, [r7, #12]
   return(result);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f023 0310 	bic.w	r3, r3, #16
 8008632:	64bb      	str	r3, [r7, #72]	; 0x48
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	461a      	mov	r2, r3
 800863a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800863c:	61fb      	str	r3, [r7, #28]
 800863e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008640:	69b9      	ldr	r1, [r7, #24]
 8008642:	69fa      	ldr	r2, [r7, #28]
 8008644:	e841 2300 	strex	r3, r2, [r1]
 8008648:	617b      	str	r3, [r7, #20]
   return(result);
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d1e6      	bne.n	800861e <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	69db      	ldr	r3, [r3, #28]
 8008656:	f003 0310 	and.w	r3, r3, #16
 800865a:	2b10      	cmp	r3, #16
 800865c:	d103      	bne.n	8008666 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	2210      	movs	r2, #16
 8008664:	621a      	str	r2, [r3, #32]
=======
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007574:	2b01      	cmp	r3, #1
 8007576:	d12e      	bne.n	80075d6 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	e853 3f00 	ldrex	r3, [r3]
 800758a:	60fb      	str	r3, [r7, #12]
   return(result);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f023 0310 	bic.w	r3, r3, #16
 8007592:	64bb      	str	r3, [r7, #72]	; 0x48
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	461a      	mov	r2, r3
 800759a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800759c:	61fb      	str	r3, [r7, #28]
 800759e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a0:	69b9      	ldr	r1, [r7, #24]
 80075a2:	69fa      	ldr	r2, [r7, #28]
 80075a4:	e841 2300 	strex	r3, r2, [r1]
 80075a8:	617b      	str	r3, [r7, #20]
   return(result);
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d1e6      	bne.n	800757e <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	69db      	ldr	r3, [r3, #28]
 80075b6:	f003 0310 	and.w	r3, r3, #16
 80075ba:	2b10      	cmp	r3, #16
 80075bc:	d103      	bne.n	80075c6 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	2210      	movs	r2, #16
 80075c4:	621a      	str	r2, [r3, #32]
>>>>>>> ModeSelect_v2
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
<<<<<<< HEAD
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800866c:	4619      	mov	r1, r3
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f7ff f8d2 	bl	8007818 <HAL_UARTEx_RxEventCallback>
=======
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80075cc:	4619      	mov	r1, r3
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f7ff f8d2 	bl	8006778 <HAL_UARTEx_RxEventCallback>
>>>>>>> ModeSelect_v2
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
<<<<<<< HEAD
 8008674:	e00b      	b.n	800868e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f7f9 fbc8 	bl	8001e0c <HAL_UART_RxCpltCallback>
}
 800867c:	e007      	b.n	800868e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	699a      	ldr	r2, [r3, #24]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f042 0208 	orr.w	r2, r2, #8
 800868c:	619a      	str	r2, [r3, #24]
}
 800868e:	bf00      	nop
 8008690:	3758      	adds	r7, #88	; 0x58
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}

08008696 <UART_RxISR_16BIT>:
=======
 80075d4:	e00b      	b.n	80075ee <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f7f9 fea4 	bl	8001324 <HAL_UART_RxCpltCallback>
}
 80075dc:	e007      	b.n	80075ee <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	699a      	ldr	r2, [r3, #24]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f042 0208 	orr.w	r2, r2, #8
 80075ec:	619a      	str	r2, [r3, #24]
}
 80075ee:	bf00      	nop
 80075f0:	3758      	adds	r7, #88	; 0x58
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}

080075f6 <UART_RxISR_16BIT>:
>>>>>>> ModeSelect_v2
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8008696:	b580      	push	{r7, lr}
 8008698:	b096      	sub	sp, #88	; 0x58
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80086a4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
=======
 80075f6:	b580      	push	{r7, lr}
 80075f8:	b096      	sub	sp, #88	; 0x58
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007604:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
>>>>>>> ModeSelect_v2
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
<<<<<<< HEAD
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086ae:	2b22      	cmp	r3, #34	; 0x22
 80086b0:	f040 8095 	bne.w	80087de <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ba:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086c2:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80086c4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80086c8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80086cc:	4013      	ands	r3, r2
 80086ce:	b29a      	uxth	r2, r3
 80086d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086d2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086d8:	1c9a      	adds	r2, r3, #2
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80086e4:	b29b      	uxth	r3, r3
 80086e6:	3b01      	subs	r3, #1
 80086e8:	b29a      	uxth	r2, r3
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d178      	bne.n	80087ee <UART_RxISR_16BIT+0x158>
=======
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800760e:	2b22      	cmp	r3, #34	; 0x22
 8007610:	f040 8095 	bne.w	800773e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007622:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007624:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007628:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800762c:	4013      	ands	r3, r2
 800762e:	b29a      	uxth	r2, r3
 8007630:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007632:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007638:	1c9a      	adds	r2, r3, #2
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007644:	b29b      	uxth	r3, r3
 8007646:	3b01      	subs	r3, #1
 8007648:	b29a      	uxth	r2, r3
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007656:	b29b      	uxth	r3, r3
 8007658:	2b00      	cmp	r3, #0
 800765a:	d178      	bne.n	800774e <UART_RxISR_16BIT+0x158>
>>>>>>> ModeSelect_v2
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
<<<<<<< HEAD
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008704:	e853 3f00 	ldrex	r3, [r3]
 8008708:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800870a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800870c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008710:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	461a      	mov	r2, r3
 8008718:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800871a:	643b      	str	r3, [r7, #64]	; 0x40
 800871c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800871e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008720:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008722:	e841 2300 	strex	r3, r2, [r1]
 8008726:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800872a:	2b00      	cmp	r3, #0
 800872c:	d1e6      	bne.n	80086fc <UART_RxISR_16BIT+0x66>
=======
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007664:	e853 3f00 	ldrex	r3, [r3]
 8007668:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800766a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800766c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007670:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	461a      	mov	r2, r3
 8007678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800767a:	643b      	str	r3, [r7, #64]	; 0x40
 800767c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800767e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007680:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007682:	e841 2300 	strex	r3, r2, [r1]
 8007686:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800768a:	2b00      	cmp	r3, #0
 800768c:	d1e6      	bne.n	800765c <UART_RxISR_16BIT+0x66>
>>>>>>> ModeSelect_v2
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
<<<<<<< HEAD
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	3308      	adds	r3, #8
 8008734:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008736:	6a3b      	ldr	r3, [r7, #32]
 8008738:	e853 3f00 	ldrex	r3, [r3]
 800873c:	61fb      	str	r3, [r7, #28]
   return(result);
 800873e:	69fb      	ldr	r3, [r7, #28]
 8008740:	f023 0301 	bic.w	r3, r3, #1
 8008744:	64bb      	str	r3, [r7, #72]	; 0x48
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	3308      	adds	r3, #8
 800874c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800874e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008750:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008752:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008754:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008756:	e841 2300 	strex	r3, r2, [r1]
 800875a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800875c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800875e:	2b00      	cmp	r3, #0
 8008760:	d1e5      	bne.n	800872e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2220      	movs	r2, #32
 8008766:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2200      	movs	r2, #0
 800876e:	671a      	str	r2, [r3, #112]	; 0x70
=======
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	3308      	adds	r3, #8
 8007694:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007696:	6a3b      	ldr	r3, [r7, #32]
 8007698:	e853 3f00 	ldrex	r3, [r3]
 800769c:	61fb      	str	r3, [r7, #28]
   return(result);
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	f023 0301 	bic.w	r3, r3, #1
 80076a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	3308      	adds	r3, #8
 80076ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80076b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076b6:	e841 2300 	strex	r3, r2, [r1]
 80076ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d1e5      	bne.n	800768e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2220      	movs	r2, #32
 80076c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	671a      	str	r2, [r3, #112]	; 0x70
>>>>>>> ModeSelect_v2

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008774:	2b01      	cmp	r3, #1
 8008776:	d12e      	bne.n	80087d6 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2200      	movs	r2, #0
 800877c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	e853 3f00 	ldrex	r3, [r3]
 800878a:	60bb      	str	r3, [r7, #8]
   return(result);
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	f023 0310 	bic.w	r3, r3, #16
 8008792:	647b      	str	r3, [r7, #68]	; 0x44
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	461a      	mov	r2, r3
 800879a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800879c:	61bb      	str	r3, [r7, #24]
 800879e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087a0:	6979      	ldr	r1, [r7, #20]
 80087a2:	69ba      	ldr	r2, [r7, #24]
 80087a4:	e841 2300 	strex	r3, r2, [r1]
 80087a8:	613b      	str	r3, [r7, #16]
   return(result);
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d1e6      	bne.n	800877e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	69db      	ldr	r3, [r3, #28]
 80087b6:	f003 0310 	and.w	r3, r3, #16
 80087ba:	2b10      	cmp	r3, #16
 80087bc:	d103      	bne.n	80087c6 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	2210      	movs	r2, #16
 80087c4:	621a      	str	r2, [r3, #32]
=======
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d12e      	bne.n	8007736 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	e853 3f00 	ldrex	r3, [r3]
 80076ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	f023 0310 	bic.w	r3, r3, #16
 80076f2:	647b      	str	r3, [r7, #68]	; 0x44
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	461a      	mov	r2, r3
 80076fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076fc:	61bb      	str	r3, [r7, #24]
 80076fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007700:	6979      	ldr	r1, [r7, #20]
 8007702:	69ba      	ldr	r2, [r7, #24]
 8007704:	e841 2300 	strex	r3, r2, [r1]
 8007708:	613b      	str	r3, [r7, #16]
   return(result);
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d1e6      	bne.n	80076de <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	69db      	ldr	r3, [r3, #28]
 8007716:	f003 0310 	and.w	r3, r3, #16
 800771a:	2b10      	cmp	r3, #16
 800771c:	d103      	bne.n	8007726 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	2210      	movs	r2, #16
 8007724:	621a      	str	r2, [r3, #32]
>>>>>>> ModeSelect_v2
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
<<<<<<< HEAD
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80087cc:	4619      	mov	r1, r3
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f7ff f822 	bl	8007818 <HAL_UARTEx_RxEventCallback>
=======
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800772c:	4619      	mov	r1, r3
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f7ff f822 	bl	8006778 <HAL_UARTEx_RxEventCallback>
>>>>>>> ModeSelect_v2
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
<<<<<<< HEAD
 80087d4:	e00b      	b.n	80087ee <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f7f9 fb18 	bl	8001e0c <HAL_UART_RxCpltCallback>
}
 80087dc:	e007      	b.n	80087ee <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	699a      	ldr	r2, [r3, #24]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f042 0208 	orr.w	r2, r2, #8
 80087ec:	619a      	str	r2, [r3, #24]
}
 80087ee:	bf00      	nop
 80087f0:	3758      	adds	r7, #88	; 0x58
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}
	...

080087f8 <UART_RxISR_8BIT_FIFOEN>:
=======
 8007734:	e00b      	b.n	800774e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f7f9 fdf4 	bl	8001324 <HAL_UART_RxCpltCallback>
}
 800773c:	e007      	b.n	800774e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	699a      	ldr	r2, [r3, #24]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f042 0208 	orr.w	r2, r2, #8
 800774c:	619a      	str	r2, [r3, #24]
}
 800774e:	bf00      	nop
 8007750:	3758      	adds	r7, #88	; 0x58
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
	...

08007758 <UART_RxISR_8BIT_FIFOEN>:
>>>>>>> ModeSelect_v2
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b0a6      	sub	sp, #152	; 0x98
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008806:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
=======
 8007758:	b580      	push	{r7, lr}
 800775a:	b0a6      	sub	sp, #152	; 0x98
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007766:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
>>>>>>> ModeSelect_v2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
<<<<<<< HEAD
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	69db      	ldr	r3, [r3, #28]
 8008810:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800882e:	2b22      	cmp	r3, #34	; 0x22
 8008830:	f040 814f 	bne.w	8008ad2 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800883a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800883e:	e0f6      	b.n	8008a2e <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008846:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800884a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800884e:	b2d9      	uxtb	r1, r3
 8008850:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8008854:	b2da      	uxtb	r2, r3
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800885a:	400a      	ands	r2, r1
 800885c:	b2d2      	uxtb	r2, r2
 800885e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008864:	1c5a      	adds	r2, r3, #1
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008870:	b29b      	uxth	r3, r3
 8008872:	3b01      	subs	r3, #1
 8008874:	b29a      	uxth	r2, r3
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	69db      	ldr	r3, [r3, #28]
 8008882:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008886:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800888a:	f003 0307 	and.w	r3, r3, #7
 800888e:	2b00      	cmp	r3, #0
 8008890:	d053      	beq.n	800893a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008892:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008896:	f003 0301 	and.w	r3, r3, #1
 800889a:	2b00      	cmp	r3, #0
 800889c:	d011      	beq.n	80088c2 <UART_RxISR_8BIT_FIFOEN+0xca>
 800889e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80088a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d00b      	beq.n	80088c2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	2201      	movs	r2, #1
 80088b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088b8:	f043 0201 	orr.w	r2, r3, #1
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
=======
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	69db      	ldr	r3, [r3, #28]
 8007770:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800778e:	2b22      	cmp	r3, #34	; 0x22
 8007790:	f040 814f 	bne.w	8007a32 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800779a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800779e:	e0f6      	b.n	800798e <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a6:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80077aa:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80077ae:	b2d9      	uxtb	r1, r3
 80077b0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80077b4:	b2da      	uxtb	r2, r3
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077ba:	400a      	ands	r2, r1
 80077bc:	b2d2      	uxtb	r2, r2
 80077be:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077c4:	1c5a      	adds	r2, r3, #1
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	3b01      	subs	r3, #1
 80077d4:	b29a      	uxth	r2, r3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	69db      	ldr	r3, [r3, #28]
 80077e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80077e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80077ea:	f003 0307 	and.w	r3, r3, #7
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d053      	beq.n	800789a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80077f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80077f6:	f003 0301 	and.w	r3, r3, #1
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d011      	beq.n	8007822 <UART_RxISR_8BIT_FIFOEN+0xca>
 80077fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007806:	2b00      	cmp	r3, #0
 8007808:	d00b      	beq.n	8007822 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	2201      	movs	r2, #1
 8007810:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007818:	f043 0201 	orr.w	r2, r3, #1
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
>>>>>>> ModeSelect_v2
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< HEAD
 80088c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80088c6:	f003 0302 	and.w	r3, r3, #2
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d011      	beq.n	80088f2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80088ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80088d2:	f003 0301 	and.w	r3, r3, #1
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d00b      	beq.n	80088f2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	2202      	movs	r2, #2
 80088e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088e8:	f043 0204 	orr.w	r2, r3, #4
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
=======
 8007822:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007826:	f003 0302 	and.w	r3, r3, #2
 800782a:	2b00      	cmp	r3, #0
 800782c:	d011      	beq.n	8007852 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800782e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007832:	f003 0301 	and.w	r3, r3, #1
 8007836:	2b00      	cmp	r3, #0
 8007838:	d00b      	beq.n	8007852 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	2202      	movs	r2, #2
 8007840:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007848:	f043 0204 	orr.w	r2, r3, #4
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
>>>>>>> ModeSelect_v2
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< HEAD
 80088f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80088f6:	f003 0304 	and.w	r3, r3, #4
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d011      	beq.n	8008922 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80088fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008902:	f003 0301 	and.w	r3, r3, #1
 8008906:	2b00      	cmp	r3, #0
 8008908:	d00b      	beq.n	8008922 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	2204      	movs	r2, #4
 8008910:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008918:	f043 0202 	orr.w	r2, r3, #2
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
=======
 8007852:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007856:	f003 0304 	and.w	r3, r3, #4
 800785a:	2b00      	cmp	r3, #0
 800785c:	d011      	beq.n	8007882 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800785e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007862:	f003 0301 	and.w	r3, r3, #1
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00b      	beq.n	8007882 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	2204      	movs	r2, #4
 8007870:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007878:	f043 0202 	orr.w	r2, r3, #2
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
>>>>>>> ModeSelect_v2
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
<<<<<<< HEAD
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008928:	2b00      	cmp	r3, #0
 800892a:	d006      	beq.n	800893a <UART_RxISR_8BIT_FIFOEN+0x142>
=======
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007888:	2b00      	cmp	r3, #0
 800788a:	d006      	beq.n	800789a <UART_RxISR_8BIT_FIFOEN+0x142>
>>>>>>> ModeSelect_v2
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f7fe ff69 	bl	8007804 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
=======
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f7fe ff69 	bl	8006764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
>>>>>>> ModeSelect_v2
        }
      }

      if (huart->RxXferCount == 0U)
<<<<<<< HEAD
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008940:	b29b      	uxth	r3, r3
 8008942:	2b00      	cmp	r3, #0
 8008944:	d173      	bne.n	8008a2e <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800894c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800894e:	e853 3f00 	ldrex	r3, [r3]
 8008952:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008954:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008956:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800895a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	461a      	mov	r2, r3
 8008964:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008968:	66bb      	str	r3, [r7, #104]	; 0x68
 800896a:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800896c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800896e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008970:	e841 2300 	strex	r3, r2, [r1]
 8008974:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008976:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008978:	2b00      	cmp	r3, #0
 800897a:	d1e4      	bne.n	8008946 <UART_RxISR_8BIT_FIFOEN+0x14e>
=======
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d173      	bne.n	800798e <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078ae:	e853 3f00 	ldrex	r3, [r3]
 80078b2:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80078b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80078b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	461a      	mov	r2, r3
 80078c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80078c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80078ca:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078cc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80078ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80078d0:	e841 2300 	strex	r3, r2, [r1]
 80078d4:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80078d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d1e4      	bne.n	80078a6 <UART_RxISR_8BIT_FIFOEN+0x14e>
>>>>>>> ModeSelect_v2

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
<<<<<<< HEAD
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	3308      	adds	r3, #8
 8008982:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008984:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008986:	e853 3f00 	ldrex	r3, [r3]
 800898a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800898c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800898e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008992:	f023 0301 	bic.w	r3, r3, #1
 8008996:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	3308      	adds	r3, #8
 800899e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80089a0:	657a      	str	r2, [r7, #84]	; 0x54
 80089a2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80089a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80089a8:	e841 2300 	strex	r3, r2, [r1]
 80089ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80089ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d1e3      	bne.n	800897c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2220      	movs	r2, #32
 80089b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	671a      	str	r2, [r3, #112]	; 0x70
=======
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	3308      	adds	r3, #8
 80078e2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078e6:	e853 3f00 	ldrex	r3, [r3]
 80078ea:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80078ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078f2:	f023 0301 	bic.w	r3, r3, #1
 80078f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	3308      	adds	r3, #8
 80078fe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007900:	657a      	str	r2, [r7, #84]	; 0x54
 8007902:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007904:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007906:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007908:	e841 2300 	strex	r3, r2, [r1]
 800790c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800790e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007910:	2b00      	cmp	r3, #0
 8007912:	d1e3      	bne.n	80078dc <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2220      	movs	r2, #32
 8007918:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	671a      	str	r2, [r3, #112]	; 0x70
>>>>>>> ModeSelect_v2

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	d12e      	bne.n	8008a28 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2200      	movs	r2, #0
 80089ce:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089d8:	e853 3f00 	ldrex	r3, [r3]
 80089dc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80089de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e0:	f023 0310 	bic.w	r3, r3, #16
 80089e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	461a      	mov	r2, r3
 80089ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089ee:	643b      	str	r3, [r7, #64]	; 0x40
 80089f0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80089f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80089f6:	e841 2300 	strex	r3, r2, [r1]
 80089fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80089fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d1e6      	bne.n	80089d0 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	69db      	ldr	r3, [r3, #28]
 8008a08:	f003 0310 	and.w	r3, r3, #16
 8008a0c:	2b10      	cmp	r3, #16
 8008a0e:	d103      	bne.n	8008a18 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	2210      	movs	r2, #16
 8008a16:	621a      	str	r2, [r3, #32]
=======
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007926:	2b01      	cmp	r3, #1
 8007928:	d12e      	bne.n	8007988 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2200      	movs	r2, #0
 800792e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007938:	e853 3f00 	ldrex	r3, [r3]
 800793c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800793e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007940:	f023 0310 	bic.w	r3, r3, #16
 8007944:	67bb      	str	r3, [r7, #120]	; 0x78
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	461a      	mov	r2, r3
 800794c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800794e:	643b      	str	r3, [r7, #64]	; 0x40
 8007950:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007952:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007954:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007956:	e841 2300 	strex	r3, r2, [r1]
 800795a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800795c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800795e:	2b00      	cmp	r3, #0
 8007960:	d1e6      	bne.n	8007930 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	69db      	ldr	r3, [r3, #28]
 8007968:	f003 0310 	and.w	r3, r3, #16
 800796c:	2b10      	cmp	r3, #16
 800796e:	d103      	bne.n	8007978 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	2210      	movs	r2, #16
 8007976:	621a      	str	r2, [r3, #32]
>>>>>>> ModeSelect_v2
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
<<<<<<< HEAD
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008a1e:	4619      	mov	r1, r3
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f7fe fef9 	bl	8007818 <HAL_UARTEx_RxEventCallback>
 8008a26:	e002      	b.n	8008a2e <UART_RxISR_8BIT_FIFOEN+0x236>
=======
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800797e:	4619      	mov	r1, r3
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f7fe fef9 	bl	8006778 <HAL_UARTEx_RxEventCallback>
 8007986:	e002      	b.n	800798e <UART_RxISR_8BIT_FIFOEN+0x236>
>>>>>>> ModeSelect_v2
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
<<<<<<< HEAD
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f7f9 f9ef 	bl	8001e0c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008a2e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d006      	beq.n	8008a44 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8008a36:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008a3a:	f003 0320 	and.w	r3, r3, #32
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	f47f aefe 	bne.w	8008840 <UART_RxISR_8BIT_FIFOEN+0x48>
=======
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f7f9 fccb 	bl	8001324 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800798e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007992:	2b00      	cmp	r3, #0
 8007994:	d006      	beq.n	80079a4 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8007996:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800799a:	f003 0320 	and.w	r3, r3, #32
 800799e:	2b00      	cmp	r3, #0
 80079a0:	f47f aefe 	bne.w	80077a0 <UART_RxISR_8BIT_FIFOEN+0x48>
>>>>>>> ModeSelect_v2

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
<<<<<<< HEAD
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a4a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008a4e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d045      	beq.n	8008ae2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008a5c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d23e      	bcs.n	8008ae2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	3308      	adds	r3, #8
 8008a6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a6c:	6a3b      	ldr	r3, [r7, #32]
 8008a6e:	e853 3f00 	ldrex	r3, [r3]
 8008a72:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a74:	69fb      	ldr	r3, [r7, #28]
 8008a76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a7a:	673b      	str	r3, [r7, #112]	; 0x70
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	3308      	adds	r3, #8
 8008a82:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008a84:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008a86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a8c:	e841 2300 	strex	r3, r2, [r1]
 8008a90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d1e5      	bne.n	8008a64 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	4a14      	ldr	r2, [pc, #80]	; (8008aec <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8008a9c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	e853 3f00 	ldrex	r3, [r3]
 8008aaa:	60bb      	str	r3, [r7, #8]
   return(result);
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	f043 0320 	orr.w	r3, r3, #32
 8008ab2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	461a      	mov	r2, r3
 8008aba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008abc:	61bb      	str	r3, [r7, #24]
 8008abe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac0:	6979      	ldr	r1, [r7, #20]
 8008ac2:	69ba      	ldr	r2, [r7, #24]
 8008ac4:	e841 2300 	strex	r3, r2, [r1]
 8008ac8:	613b      	str	r3, [r7, #16]
   return(result);
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d1e6      	bne.n	8008a9e <UART_RxISR_8BIT_FIFOEN+0x2a6>
=======
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80079aa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80079ae:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d045      	beq.n	8007a42 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80079bc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d23e      	bcs.n	8007a42 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	3308      	adds	r3, #8
 80079ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079cc:	6a3b      	ldr	r3, [r7, #32]
 80079ce:	e853 3f00 	ldrex	r3, [r3]
 80079d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079da:	673b      	str	r3, [r7, #112]	; 0x70
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	3308      	adds	r3, #8
 80079e2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80079e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80079e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079ec:	e841 2300 	strex	r3, r2, [r1]
 80079f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d1e5      	bne.n	80079c4 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	4a14      	ldr	r2, [pc, #80]	; (8007a4c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80079fc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	e853 3f00 	ldrex	r3, [r3]
 8007a0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	f043 0320 	orr.w	r3, r3, #32
 8007a12:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	461a      	mov	r2, r3
 8007a1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a1c:	61bb      	str	r3, [r7, #24]
 8007a1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a20:	6979      	ldr	r1, [r7, #20]
 8007a22:	69ba      	ldr	r2, [r7, #24]
 8007a24:	e841 2300 	strex	r3, r2, [r1]
 8007a28:	613b      	str	r3, [r7, #16]
   return(result);
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d1e6      	bne.n	80079fe <UART_RxISR_8BIT_FIFOEN+0x2a6>
>>>>>>> ModeSelect_v2
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
<<<<<<< HEAD
 8008ad0:	e007      	b.n	8008ae2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	699a      	ldr	r2, [r3, #24]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f042 0208 	orr.w	r2, r2, #8
 8008ae0:	619a      	str	r2, [r3, #24]
}
 8008ae2:	bf00      	nop
 8008ae4:	3798      	adds	r7, #152	; 0x98
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
 8008aea:	bf00      	nop
 8008aec:	08008537 	.word	0x08008537

08008af0 <UART_RxISR_16BIT_FIFOEN>:
=======
 8007a30:	e007      	b.n	8007a42 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	699a      	ldr	r2, [r3, #24]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f042 0208 	orr.w	r2, r2, #8
 8007a40:	619a      	str	r2, [r3, #24]
}
 8007a42:	bf00      	nop
 8007a44:	3798      	adds	r7, #152	; 0x98
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
 8007a4a:	bf00      	nop
 8007a4c:	08007497 	.word	0x08007497

08007a50 <UART_RxISR_16BIT_FIFOEN>:
>>>>>>> ModeSelect_v2
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b0a8      	sub	sp, #160	; 0xa0
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008afe:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
=======
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b0a8      	sub	sp, #160	; 0xa0
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007a5e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
>>>>>>> ModeSelect_v2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
<<<<<<< HEAD
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	69db      	ldr	r3, [r3, #28]
 8008b08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	689b      	ldr	r3, [r3, #8]
 8008b1c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b26:	2b22      	cmp	r3, #34	; 0x22
 8008b28:	f040 8153 	bne.w	8008dd2 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008b32:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008b36:	e0fa      	b.n	8008d2e <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b3e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8008b4a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8008b4e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008b52:	4013      	ands	r3, r2
 8008b54:	b29a      	uxth	r2, r3
 8008b56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008b5a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b60:	1c9a      	adds	r2, r3, #2
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	3b01      	subs	r3, #1
 8008b70:	b29a      	uxth	r2, r3
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	69db      	ldr	r3, [r3, #28]
 8008b7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008b82:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b86:	f003 0307 	and.w	r3, r3, #7
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d053      	beq.n	8008c36 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008b8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b92:	f003 0301 	and.w	r3, r3, #1
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d011      	beq.n	8008bbe <UART_RxISR_16BIT_FIFOEN+0xce>
 8008b9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d00b      	beq.n	8008bbe <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	2201      	movs	r2, #1
 8008bac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008bb4:	f043 0201 	orr.w	r2, r3, #1
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
=======
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	69db      	ldr	r3, [r3, #28]
 8007a68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a86:	2b22      	cmp	r3, #34	; 0x22
 8007a88:	f040 8153 	bne.w	8007d32 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007a92:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007a96:	e0fa      	b.n	8007c8e <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a9e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aa6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8007aaa:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8007aae:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007ab2:	4013      	ands	r3, r2
 8007ab4:	b29a      	uxth	r2, r3
 8007ab6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007aba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ac0:	1c9a      	adds	r2, r3, #2
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	3b01      	subs	r3, #1
 8007ad0:	b29a      	uxth	r2, r3
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	69db      	ldr	r3, [r3, #28]
 8007ade:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007ae2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ae6:	f003 0307 	and.w	r3, r3, #7
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d053      	beq.n	8007b96 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007aee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007af2:	f003 0301 	and.w	r3, r3, #1
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d011      	beq.n	8007b1e <UART_RxISR_16BIT_FIFOEN+0xce>
 8007afa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d00b      	beq.n	8007b1e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b14:	f043 0201 	orr.w	r2, r3, #1
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
>>>>>>> ModeSelect_v2
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< HEAD
 8008bbe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008bc2:	f003 0302 	and.w	r3, r3, #2
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d011      	beq.n	8008bee <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008bca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008bce:	f003 0301 	and.w	r3, r3, #1
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d00b      	beq.n	8008bee <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	2202      	movs	r2, #2
 8008bdc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008be4:	f043 0204 	orr.w	r2, r3, #4
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
=======
 8007b1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b22:	f003 0302 	and.w	r3, r3, #2
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d011      	beq.n	8007b4e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007b2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007b2e:	f003 0301 	and.w	r3, r3, #1
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d00b      	beq.n	8007b4e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	2202      	movs	r2, #2
 8007b3c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b44:	f043 0204 	orr.w	r2, r3, #4
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
>>>>>>> ModeSelect_v2
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< HEAD
 8008bee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008bf2:	f003 0304 	and.w	r3, r3, #4
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d011      	beq.n	8008c1e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008bfa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008bfe:	f003 0301 	and.w	r3, r3, #1
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d00b      	beq.n	8008c1e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	2204      	movs	r2, #4
 8008c0c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c14:	f043 0202 	orr.w	r2, r3, #2
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
=======
 8007b4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b52:	f003 0304 	and.w	r3, r3, #4
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d011      	beq.n	8007b7e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007b5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007b5e:	f003 0301 	and.w	r3, r3, #1
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d00b      	beq.n	8007b7e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	2204      	movs	r2, #4
 8007b6c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b74:	f043 0202 	orr.w	r2, r3, #2
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
>>>>>>> ModeSelect_v2
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
<<<<<<< HEAD
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d006      	beq.n	8008c36 <UART_RxISR_16BIT_FIFOEN+0x146>
=======
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d006      	beq.n	8007b96 <UART_RxISR_16BIT_FIFOEN+0x146>
>>>>>>> ModeSelect_v2
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f7fe fdeb 	bl	8007804 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2200      	movs	r2, #0
 8008c32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
=======
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f7fe fdeb 	bl	8006764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
>>>>>>> ModeSelect_v2
        }
      }

      if (huart->RxXferCount == 0U)
<<<<<<< HEAD
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d175      	bne.n	8008d2e <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008c4a:	e853 3f00 	ldrex	r3, [r3]
 8008c4e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008c50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c56:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	461a      	mov	r2, r3
 8008c60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008c64:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008c66:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c68:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008c6a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008c6c:	e841 2300 	strex	r3, r2, [r1]
 8008c70:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008c72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d1e4      	bne.n	8008c42 <UART_RxISR_16BIT_FIFOEN+0x152>
=======
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d175      	bne.n	8007c8e <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007baa:	e853 3f00 	ldrex	r3, [r3]
 8007bae:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007bb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007bb2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007bc4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007bc6:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007bca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007bcc:	e841 2300 	strex	r3, r2, [r1]
 8007bd0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007bd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d1e4      	bne.n	8007ba2 <UART_RxISR_16BIT_FIFOEN+0x152>
>>>>>>> ModeSelect_v2

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
<<<<<<< HEAD
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	3308      	adds	r3, #8
 8008c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c82:	e853 3f00 	ldrex	r3, [r3]
 8008c86:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008c88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c8e:	f023 0301 	bic.w	r3, r3, #1
 8008c92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	3308      	adds	r3, #8
 8008c9c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008ca0:	65ba      	str	r2, [r7, #88]	; 0x58
 8008ca2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008ca6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008ca8:	e841 2300 	strex	r3, r2, [r1]
 8008cac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008cae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d1e1      	bne.n	8008c78 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2220      	movs	r2, #32
 8008cb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	671a      	str	r2, [r3, #112]	; 0x70
=======
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	3308      	adds	r3, #8
 8007bde:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007be2:	e853 3f00 	ldrex	r3, [r3]
 8007be6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007be8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007bee:	f023 0301 	bic.w	r3, r3, #1
 8007bf2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	3308      	adds	r3, #8
 8007bfc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007c00:	65ba      	str	r2, [r7, #88]	; 0x58
 8007c02:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007c06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007c08:	e841 2300 	strex	r3, r2, [r1]
 8007c0c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007c0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d1e1      	bne.n	8007bd8 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2220      	movs	r2, #32
 8007c18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	671a      	str	r2, [r3, #112]	; 0x70
>>>>>>> ModeSelect_v2

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cc6:	2b01      	cmp	r3, #1
 8008cc8:	d12e      	bne.n	8008d28 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd8:	e853 3f00 	ldrex	r3, [r3]
 8008cdc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ce0:	f023 0310 	bic.w	r3, r3, #16
 8008ce4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	461a      	mov	r2, r3
 8008cec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008cee:	647b      	str	r3, [r7, #68]	; 0x44
 8008cf0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cf2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008cf4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008cf6:	e841 2300 	strex	r3, r2, [r1]
 8008cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008cfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d1e6      	bne.n	8008cd0 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	69db      	ldr	r3, [r3, #28]
 8008d08:	f003 0310 	and.w	r3, r3, #16
 8008d0c:	2b10      	cmp	r3, #16
 8008d0e:	d103      	bne.n	8008d18 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	2210      	movs	r2, #16
 8008d16:	621a      	str	r2, [r3, #32]
=======
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	d12e      	bne.n	8007c88 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c38:	e853 3f00 	ldrex	r3, [r3]
 8007c3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c40:	f023 0310 	bic.w	r3, r3, #16
 8007c44:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007c4e:	647b      	str	r3, [r7, #68]	; 0x44
 8007c50:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c56:	e841 2300 	strex	r3, r2, [r1]
 8007c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d1e6      	bne.n	8007c30 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	69db      	ldr	r3, [r3, #28]
 8007c68:	f003 0310 	and.w	r3, r3, #16
 8007c6c:	2b10      	cmp	r3, #16
 8007c6e:	d103      	bne.n	8007c78 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	2210      	movs	r2, #16
 8007c76:	621a      	str	r2, [r3, #32]
>>>>>>> ModeSelect_v2
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
<<<<<<< HEAD
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008d1e:	4619      	mov	r1, r3
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f7fe fd79 	bl	8007818 <HAL_UARTEx_RxEventCallback>
 8008d26:	e002      	b.n	8008d2e <UART_RxISR_16BIT_FIFOEN+0x23e>
=======
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007c7e:	4619      	mov	r1, r3
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f7fe fd79 	bl	8006778 <HAL_UARTEx_RxEventCallback>
 8007c86:	e002      	b.n	8007c8e <UART_RxISR_16BIT_FIFOEN+0x23e>
>>>>>>> ModeSelect_v2
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
<<<<<<< HEAD
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f7f9 f86f 	bl	8001e0c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008d2e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d006      	beq.n	8008d44 <UART_RxISR_16BIT_FIFOEN+0x254>
 8008d36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008d3a:	f003 0320 	and.w	r3, r3, #32
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	f47f aefa 	bne.w	8008b38 <UART_RxISR_16BIT_FIFOEN+0x48>
=======
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f7f9 fb4b 	bl	8001324 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007c8e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d006      	beq.n	8007ca4 <UART_RxISR_16BIT_FIFOEN+0x254>
 8007c96:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c9a:	f003 0320 	and.w	r3, r3, #32
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	f47f aefa 	bne.w	8007a98 <UART_RxISR_16BIT_FIFOEN+0x48>
>>>>>>> ModeSelect_v2

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
<<<<<<< HEAD
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008d4a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008d4e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d045      	beq.n	8008de2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008d5c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d23e      	bcs.n	8008de2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	3308      	adds	r3, #8
 8008d6a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6e:	e853 3f00 	ldrex	r3, [r3]
 8008d72:	623b      	str	r3, [r7, #32]
   return(result);
 8008d74:	6a3b      	ldr	r3, [r7, #32]
 8008d76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d7a:	677b      	str	r3, [r7, #116]	; 0x74
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	3308      	adds	r3, #8
 8008d82:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008d84:	633a      	str	r2, [r7, #48]	; 0x30
 8008d86:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d8c:	e841 2300 	strex	r3, r2, [r1]
 8008d90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d1e5      	bne.n	8008d64 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	4a14      	ldr	r2, [pc, #80]	; (8008dec <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8008d9c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	e853 3f00 	ldrex	r3, [r3]
 8008daa:	60fb      	str	r3, [r7, #12]
   return(result);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f043 0320 	orr.w	r3, r3, #32
 8008db2:	673b      	str	r3, [r7, #112]	; 0x70
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	461a      	mov	r2, r3
 8008dba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008dbc:	61fb      	str	r3, [r7, #28]
 8008dbe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc0:	69b9      	ldr	r1, [r7, #24]
 8008dc2:	69fa      	ldr	r2, [r7, #28]
 8008dc4:	e841 2300 	strex	r3, r2, [r1]
 8008dc8:	617b      	str	r3, [r7, #20]
   return(result);
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d1e6      	bne.n	8008d9e <UART_RxISR_16BIT_FIFOEN+0x2ae>
=======
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007caa:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007cae:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d045      	beq.n	8007d42 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007cbc:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d23e      	bcs.n	8007d42 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	3308      	adds	r3, #8
 8007cca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cce:	e853 3f00 	ldrex	r3, [r3]
 8007cd2:	623b      	str	r3, [r7, #32]
   return(result);
 8007cd4:	6a3b      	ldr	r3, [r7, #32]
 8007cd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007cda:	677b      	str	r3, [r7, #116]	; 0x74
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	3308      	adds	r3, #8
 8007ce2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007ce4:	633a      	str	r2, [r7, #48]	; 0x30
 8007ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007cea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cec:	e841 2300 	strex	r3, r2, [r1]
 8007cf0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d1e5      	bne.n	8007cc4 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	4a14      	ldr	r2, [pc, #80]	; (8007d4c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8007cfc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	e853 3f00 	ldrex	r3, [r3]
 8007d0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f043 0320 	orr.w	r3, r3, #32
 8007d12:	673b      	str	r3, [r7, #112]	; 0x70
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	461a      	mov	r2, r3
 8007d1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d1c:	61fb      	str	r3, [r7, #28]
 8007d1e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d20:	69b9      	ldr	r1, [r7, #24]
 8007d22:	69fa      	ldr	r2, [r7, #28]
 8007d24:	e841 2300 	strex	r3, r2, [r1]
 8007d28:	617b      	str	r3, [r7, #20]
   return(result);
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d1e6      	bne.n	8007cfe <UART_RxISR_16BIT_FIFOEN+0x2ae>
>>>>>>> ModeSelect_v2
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
<<<<<<< HEAD
 8008dd0:	e007      	b.n	8008de2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	699a      	ldr	r2, [r3, #24]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f042 0208 	orr.w	r2, r2, #8
 8008de0:	619a      	str	r2, [r3, #24]
}
 8008de2:	bf00      	nop
 8008de4:	37a0      	adds	r7, #160	; 0xa0
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	bf00      	nop
 8008dec:	08008697 	.word	0x08008697

08008df0 <HAL_UARTEx_WakeupCallback>:
=======
 8007d30:	e007      	b.n	8007d42 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	699a      	ldr	r2, [r3, #24]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f042 0208 	orr.w	r2, r2, #8
 8007d40:	619a      	str	r2, [r3, #24]
}
 8007d42:	bf00      	nop
 8007d44:	37a0      	adds	r7, #160	; 0xa0
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop
 8007d4c:	080075f7 	.word	0x080075f7

08007d50 <HAL_UARTEx_WakeupCallback>:
>>>>>>> ModeSelect_v2
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8008df0:	b480      	push	{r7}
 8008df2:	b083      	sub	sp, #12
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
=======
 8007d50:	b480      	push	{r7}
 8007d52:	b083      	sub	sp, #12
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
>>>>>>> ModeSelect_v2
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 8008df8:	bf00      	nop
 8008dfa:	370c      	adds	r7, #12
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <HAL_UARTEx_RxFifoFullCallback>:
=======
 8007d58:	bf00      	nop
 8007d5a:	370c      	adds	r7, #12
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr

08007d64 <HAL_UARTEx_RxFifoFullCallback>:
>>>>>>> ModeSelect_v2
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8008e04:	b480      	push	{r7}
 8008e06:	b083      	sub	sp, #12
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
=======
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
>>>>>>> ModeSelect_v2
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 8008e0c:	bf00      	nop
 8008e0e:	370c      	adds	r7, #12
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr

08008e18 <HAL_UARTEx_TxFifoEmptyCallback>:
=======
 8007d6c:	bf00      	nop
 8007d6e:	370c      	adds	r7, #12
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <HAL_UARTEx_TxFifoEmptyCallback>:
>>>>>>> ModeSelect_v2
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8008e18:	b480      	push	{r7}
 8008e1a:	b083      	sub	sp, #12
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
=======
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
>>>>>>> ModeSelect_v2
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 8008e20:	bf00      	nop
 8008e22:	370c      	adds	r7, #12
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr

08008e2c <HAL_UARTEx_DisableFifoMode>:
=======
 8007d80:	bf00      	nop
 8007d82:	370c      	adds	r7, #12
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr

08007d8c <HAL_UARTEx_DisableFifoMode>:
>>>>>>> ModeSelect_v2
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8008e2c:	b480      	push	{r7}
 8008e2e:	b085      	sub	sp, #20
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
=======
 8007d8c:	b480      	push	{r7}
 8007d8e:	b085      	sub	sp, #20
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
>>>>>>> ModeSelect_v2

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
<<<<<<< HEAD
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	d101      	bne.n	8008e42 <HAL_UARTEx_DisableFifoMode+0x16>
 8008e3e:	2302      	movs	r3, #2
 8008e40:	e027      	b.n	8008e92 <HAL_UARTEx_DisableFifoMode+0x66>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2201      	movs	r2, #1
 8008e46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2224      	movs	r2, #36	; 0x24
 8008e4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	681a      	ldr	r2, [r3, #0]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f022 0201 	bic.w	r2, r2, #1
 8008e68:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008e70:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2200      	movs	r2, #0
 8008e76:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	68fa      	ldr	r2, [r7, #12]
 8008e7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2220      	movs	r2, #32
 8008e84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008e90:	2300      	movs	r3, #0
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3714      	adds	r7, #20
 8008e96:	46bd      	mov	sp, r7
 8008e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9c:	4770      	bx	lr

08008e9e <HAL_UARTEx_SetTxFifoThreshold>:
=======
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d101      	bne.n	8007da2 <HAL_UARTEx_DisableFifoMode+0x16>
 8007d9e:	2302      	movs	r3, #2
 8007da0:	e027      	b.n	8007df2 <HAL_UARTEx_DisableFifoMode+0x66>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2201      	movs	r2, #1
 8007da6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2224      	movs	r2, #36	; 0x24
 8007dae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f022 0201 	bic.w	r2, r2, #1
 8007dc8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007dd0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	68fa      	ldr	r2, [r7, #12]
 8007dde:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2220      	movs	r2, #32
 8007de4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007df0:	2300      	movs	r3, #0
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3714      	adds	r7, #20
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr

08007dfe <HAL_UARTEx_SetTxFifoThreshold>:
>>>>>>> ModeSelect_v2
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
<<<<<<< HEAD
 8008e9e:	b580      	push	{r7, lr}
 8008ea0:	b084      	sub	sp, #16
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	6078      	str	r0, [r7, #4]
 8008ea6:	6039      	str	r1, [r7, #0]
=======
 8007dfe:	b580      	push	{r7, lr}
 8007e00:	b084      	sub	sp, #16
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
 8007e06:	6039      	str	r1, [r7, #0]
>>>>>>> ModeSelect_v2
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
<<<<<<< HEAD
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008eae:	2b01      	cmp	r3, #1
 8008eb0:	d101      	bne.n	8008eb6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008eb2:	2302      	movs	r3, #2
 8008eb4:	e02d      	b.n	8008f12 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2201      	movs	r2, #1
 8008eba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2224      	movs	r2, #36	; 0x24
 8008ec2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	681a      	ldr	r2, [r3, #0]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f022 0201 	bic.w	r2, r2, #1
 8008edc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	689b      	ldr	r3, [r3, #8]
 8008ee4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	683a      	ldr	r2, [r7, #0]
 8008eee:	430a      	orrs	r2, r1
 8008ef0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 f850 	bl	8008f98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	68fa      	ldr	r2, [r7, #12]
 8008efe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2220      	movs	r2, #32
 8008f04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008f10:	2300      	movs	r3, #0
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3710      	adds	r7, #16
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}

08008f1a <HAL_UARTEx_SetRxFifoThreshold>:
=======
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d101      	bne.n	8007e16 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007e12:	2302      	movs	r3, #2
 8007e14:	e02d      	b.n	8007e72 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2201      	movs	r2, #1
 8007e1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2224      	movs	r2, #36	; 0x24
 8007e22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f022 0201 	bic.w	r2, r2, #1
 8007e3c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	683a      	ldr	r2, [r7, #0]
 8007e4e:	430a      	orrs	r2, r1
 8007e50:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 f850 	bl	8007ef8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	68fa      	ldr	r2, [r7, #12]
 8007e5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2220      	movs	r2, #32
 8007e64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007e70:	2300      	movs	r3, #0
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3710      	adds	r7, #16
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}

08007e7a <HAL_UARTEx_SetRxFifoThreshold>:
>>>>>>> ModeSelect_v2
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
<<<<<<< HEAD
 8008f1a:	b580      	push	{r7, lr}
 8008f1c:	b084      	sub	sp, #16
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	6078      	str	r0, [r7, #4]
 8008f22:	6039      	str	r1, [r7, #0]
=======
 8007e7a:	b580      	push	{r7, lr}
 8007e7c:	b084      	sub	sp, #16
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
 8007e82:	6039      	str	r1, [r7, #0]
>>>>>>> ModeSelect_v2
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
<<<<<<< HEAD
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	d101      	bne.n	8008f32 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008f2e:	2302      	movs	r3, #2
 8008f30:	e02d      	b.n	8008f8e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2201      	movs	r2, #1
 8008f36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2224      	movs	r2, #36	; 0x24
 8008f3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	681a      	ldr	r2, [r3, #0]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f022 0201 	bic.w	r2, r2, #1
 8008f58:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	689b      	ldr	r3, [r3, #8]
 8008f60:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	683a      	ldr	r2, [r7, #0]
 8008f6a:	430a      	orrs	r2, r1
 8008f6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f000 f812 	bl	8008f98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	68fa      	ldr	r2, [r7, #12]
 8008f7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2220      	movs	r2, #32
 8008f80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2200      	movs	r2, #0
 8008f88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008f8c:	2300      	movs	r3, #0
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3710      	adds	r7, #16
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
	...

08008f98 <UARTEx_SetNbDataToProcess>:
=======
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d101      	bne.n	8007e92 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007e8e:	2302      	movs	r3, #2
 8007e90:	e02d      	b.n	8007eee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2201      	movs	r2, #1
 8007e96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2224      	movs	r2, #36	; 0x24
 8007e9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f022 0201 	bic.w	r2, r2, #1
 8007eb8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	683a      	ldr	r2, [r7, #0]
 8007eca:	430a      	orrs	r2, r1
 8007ecc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 f812 	bl	8007ef8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	68fa      	ldr	r2, [r7, #12]
 8007eda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2220      	movs	r2, #32
 8007ee0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007eec:	2300      	movs	r3, #0
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3710      	adds	r7, #16
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
	...

08007ef8 <UARTEx_SetNbDataToProcess>:
>>>>>>> ModeSelect_v2
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8008f98:	b480      	push	{r7}
 8008f9a:	b085      	sub	sp, #20
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
=======
 8007ef8:	b480      	push	{r7}
 8007efa:	b085      	sub	sp, #20
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
>>>>>>> ModeSelect_v2
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
<<<<<<< HEAD
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d108      	bne.n	8008fba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2201      	movs	r2, #1
 8008fac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
=======
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d108      	bne.n	8007f1a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2201      	movs	r2, #1
 8007f14:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
>>>>>>> ModeSelect_v2
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
<<<<<<< HEAD
 8008fb8:	e031      	b.n	800901e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008fba:	2308      	movs	r3, #8
 8008fbc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008fbe:	2308      	movs	r3, #8
 8008fc0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	689b      	ldr	r3, [r3, #8]
 8008fc8:	0e5b      	lsrs	r3, r3, #25
 8008fca:	b2db      	uxtb	r3, r3
 8008fcc:	f003 0307 	and.w	r3, r3, #7
 8008fd0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	689b      	ldr	r3, [r3, #8]
 8008fd8:	0f5b      	lsrs	r3, r3, #29
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	f003 0307 	and.w	r3, r3, #7
 8008fe0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008fe2:	7bbb      	ldrb	r3, [r7, #14]
 8008fe4:	7b3a      	ldrb	r2, [r7, #12]
 8008fe6:	4911      	ldr	r1, [pc, #68]	; (800902c <UARTEx_SetNbDataToProcess+0x94>)
 8008fe8:	5c8a      	ldrb	r2, [r1, r2]
 8008fea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008fee:	7b3a      	ldrb	r2, [r7, #12]
 8008ff0:	490f      	ldr	r1, [pc, #60]	; (8009030 <UARTEx_SetNbDataToProcess+0x98>)
 8008ff2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008ff4:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ff8:	b29a      	uxth	r2, r3
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009000:	7bfb      	ldrb	r3, [r7, #15]
 8009002:	7b7a      	ldrb	r2, [r7, #13]
 8009004:	4909      	ldr	r1, [pc, #36]	; (800902c <UARTEx_SetNbDataToProcess+0x94>)
 8009006:	5c8a      	ldrb	r2, [r1, r2]
 8009008:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800900c:	7b7a      	ldrb	r2, [r7, #13]
 800900e:	4908      	ldr	r1, [pc, #32]	; (8009030 <UARTEx_SetNbDataToProcess+0x98>)
 8009010:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009012:	fb93 f3f2 	sdiv	r3, r3, r2
 8009016:	b29a      	uxth	r2, r3
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800901e:	bf00      	nop
 8009020:	3714      	adds	r7, #20
 8009022:	46bd      	mov	sp, r7
 8009024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009028:	4770      	bx	lr
 800902a:	bf00      	nop
 800902c:	0800e12c 	.word	0x0800e12c
 8009030:	0800e134 	.word	0x0800e134

08009034 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
=======
 8007f18:	e031      	b.n	8007f7e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007f1a:	2308      	movs	r3, #8
 8007f1c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007f1e:	2308      	movs	r3, #8
 8007f20:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	689b      	ldr	r3, [r3, #8]
 8007f28:	0e5b      	lsrs	r3, r3, #25
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	f003 0307 	and.w	r3, r3, #7
 8007f30:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	689b      	ldr	r3, [r3, #8]
 8007f38:	0f5b      	lsrs	r3, r3, #29
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	f003 0307 	and.w	r3, r3, #7
 8007f40:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007f42:	7bbb      	ldrb	r3, [r7, #14]
 8007f44:	7b3a      	ldrb	r2, [r7, #12]
 8007f46:	4911      	ldr	r1, [pc, #68]	; (8007f8c <UARTEx_SetNbDataToProcess+0x94>)
 8007f48:	5c8a      	ldrb	r2, [r1, r2]
 8007f4a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007f4e:	7b3a      	ldrb	r2, [r7, #12]
 8007f50:	490f      	ldr	r1, [pc, #60]	; (8007f90 <UARTEx_SetNbDataToProcess+0x98>)
 8007f52:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007f54:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f58:	b29a      	uxth	r2, r3
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f60:	7bfb      	ldrb	r3, [r7, #15]
 8007f62:	7b7a      	ldrb	r2, [r7, #13]
 8007f64:	4909      	ldr	r1, [pc, #36]	; (8007f8c <UARTEx_SetNbDataToProcess+0x94>)
 8007f66:	5c8a      	ldrb	r2, [r1, r2]
 8007f68:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007f6c:	7b7a      	ldrb	r2, [r7, #13]
 8007f6e:	4908      	ldr	r1, [pc, #32]	; (8007f90 <UARTEx_SetNbDataToProcess+0x98>)
 8007f70:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f72:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f76:	b29a      	uxth	r2, r3
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007f7e:	bf00      	nop
 8007f80:	3714      	adds	r7, #20
 8007f82:	46bd      	mov	sp, r7
 8007f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f88:	4770      	bx	lr
 8007f8a:	bf00      	nop
 8007f8c:	0800d08c 	.word	0x0800d08c
 8007f90:	0800d094 	.word	0x0800d094

08007f94 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
>>>>>>> ModeSelect_v2
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
<<<<<<< HEAD
 8009034:	b580      	push	{r7, lr}
 8009036:	b084      	sub	sp, #16
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800903e:	2300      	movs	r3, #0
 8009040:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8009042:	6839      	ldr	r1, [r7, #0]
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f001 fcb2 	bl	800a9ae <VL53L0X_get_offset_calibration_data_micro_meter>
 800904a:	4603      	mov	r3, r0
 800904c:	73fb      	strb	r3, [r7, #15]
=======
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b084      	sub	sp, #16
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8007fa2:	6839      	ldr	r1, [r7, #0]
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f001 fcb2 	bl	800990e <VL53L0X_get_offset_calibration_data_micro_meter>
 8007faa:	4603      	mov	r3, r0
 8007fac:	73fb      	strb	r3, [r7, #15]
>>>>>>> ModeSelect_v2
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
<<<<<<< HEAD
 800904e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009052:	4618      	mov	r0, r3
 8009054:	3710      	adds	r7, #16
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
	...

0800905c <VL53L0X_DataInit>:
=======
 8007fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3710      	adds	r7, #16
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
	...

08007fbc <VL53L0X_DataInit>:
>>>>>>> ModeSelect_v2
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
<<<<<<< HEAD
 800905c:	b5b0      	push	{r4, r5, r7, lr}
 800905e:	b096      	sub	sp, #88	; 0x58
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009064:	2300      	movs	r3, #0
 8009066:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
=======
 8007fbc:	b5b0      	push	{r4, r5, r7, lr}
 8007fbe:	b096      	sub	sp, #88	; 0x58
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
>>>>>>> ModeSelect_v2
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
<<<<<<< HEAD
 800906a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800906e:	2b00      	cmp	r3, #0
 8009070:	d107      	bne.n	8009082 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8009072:	2200      	movs	r2, #0
 8009074:	2188      	movs	r1, #136	; 0x88
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f004 feaa 	bl	800ddd0 <VL53L0X_WrByte>
 800907c:	4603      	mov	r3, r0
 800907e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2200      	movs	r2, #0
 8009086:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
=======
 8007fca:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d107      	bne.n	8007fe2 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	2188      	movs	r1, #136	; 0x88
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f004 feaa 	bl	800cd30 <VL53L0X_WrByte>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
>>>>>>> ModeSelect_v2
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
<<<<<<< HEAD
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009090:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800909a:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	4a9e      	ldr	r2, [pc, #632]	; (800931c <VL53L0X_DataInit+0x2c0>)
 80090a2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
=======
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007ff0:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007ffa:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	4a9e      	ldr	r2, [pc, #632]	; (800827c <VL53L0X_DataInit+0x2c0>)
 8008002:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
>>>>>>> ModeSelect_v2
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
<<<<<<< HEAD
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	4a9d      	ldr	r2, [pc, #628]	; (8009320 <VL53L0X_DataInit+0x2c4>)
 80090aa:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2200      	movs	r2, #0
 80090b2:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80090b4:	f107 0310 	add.w	r3, r7, #16
 80090b8:	4619      	mov	r1, r3
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 fac2 	bl	8009644 <VL53L0X_GetDeviceParameters>
 80090c0:	4603      	mov	r3, r0
 80090c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 80090c6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d112      	bne.n	80090f4 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 80090ce:	2300      	movs	r3, #0
 80090d0:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 80090d2:	2300      	movs	r3, #0
 80090d4:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f103 0410 	add.w	r4, r3, #16
 80090dc:	f107 0510 	add.w	r5, r7, #16
 80090e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80090e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80090e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80090e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80090e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80090ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80090ec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80090f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
=======
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	4a9d      	ldr	r2, [pc, #628]	; (8008280 <VL53L0X_DataInit+0x2c4>)
 800800a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2200      	movs	r2, #0
 8008012:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8008014:	f107 0310 	add.w	r3, r7, #16
 8008018:	4619      	mov	r1, r3
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 fac2 	bl	80085a4 <VL53L0X_GetDeviceParameters>
 8008020:	4603      	mov	r3, r0
 8008022:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8008026:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800802a:	2b00      	cmp	r3, #0
 800802c:	d112      	bne.n	8008054 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 800802e:	2300      	movs	r3, #0
 8008030:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8008032:	2300      	movs	r3, #0
 8008034:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f103 0410 	add.w	r4, r3, #16
 800803c:	f107 0510 	add.w	r5, r7, #16
 8008040:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008042:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008044:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008046:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008048:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800804a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800804c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008050:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
>>>>>>> ModeSelect_v2
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
<<<<<<< HEAD
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2264      	movs	r2, #100	; 0x64
 80090f8:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f44f 7261 	mov.w	r2, #900	; 0x384
 8009102:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800910c:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8009116:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2201      	movs	r2, #1
 800911e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009122:	2201      	movs	r2, #1
 8009124:	2180      	movs	r1, #128	; 0x80
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f004 fe52 	bl	800ddd0 <VL53L0X_WrByte>
 800912c:	4603      	mov	r3, r0
 800912e:	461a      	mov	r2, r3
 8009130:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009134:	4313      	orrs	r3, r2
 8009136:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800913a:	2201      	movs	r2, #1
 800913c:	21ff      	movs	r1, #255	; 0xff
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f004 fe46 	bl	800ddd0 <VL53L0X_WrByte>
 8009144:	4603      	mov	r3, r0
 8009146:	461a      	mov	r2, r3
 8009148:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800914c:	4313      	orrs	r3, r2
 800914e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8009152:	2200      	movs	r2, #0
 8009154:	2100      	movs	r1, #0
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f004 fe3a 	bl	800ddd0 <VL53L0X_WrByte>
 800915c:	4603      	mov	r3, r0
 800915e:	461a      	mov	r2, r3
 8009160:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009164:	4313      	orrs	r3, r2
 8009166:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 800916a:	f107 030f 	add.w	r3, r7, #15
 800916e:	461a      	mov	r2, r3
 8009170:	2191      	movs	r1, #145	; 0x91
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f004 feae 	bl	800ded4 <VL53L0X_RdByte>
 8009178:	4603      	mov	r3, r0
 800917a:	461a      	mov	r2, r3
 800917c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009180:	4313      	orrs	r3, r2
 8009182:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8009186:	7bfa      	ldrb	r2, [r7, #15]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800918e:	2201      	movs	r2, #1
 8009190:	2100      	movs	r1, #0
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f004 fe1c 	bl	800ddd0 <VL53L0X_WrByte>
 8009198:	4603      	mov	r3, r0
 800919a:	461a      	mov	r2, r3
 800919c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80091a0:	4313      	orrs	r3, r2
 80091a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80091a6:	2200      	movs	r2, #0
 80091a8:	21ff      	movs	r1, #255	; 0xff
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f004 fe10 	bl	800ddd0 <VL53L0X_WrByte>
 80091b0:	4603      	mov	r3, r0
 80091b2:	461a      	mov	r2, r3
 80091b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80091b8:	4313      	orrs	r3, r2
 80091ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80091be:	2200      	movs	r2, #0
 80091c0:	2180      	movs	r1, #128	; 0x80
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f004 fe04 	bl	800ddd0 <VL53L0X_WrByte>
 80091c8:	4603      	mov	r3, r0
 80091ca:	461a      	mov	r2, r3
 80091cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80091d0:	4313      	orrs	r3, r2
 80091d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80091d6:	2300      	movs	r3, #0
 80091d8:	653b      	str	r3, [r7, #80]	; 0x50
 80091da:	e014      	b.n	8009206 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 80091dc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d114      	bne.n	800920e <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 80091e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091e6:	b29b      	uxth	r3, r3
 80091e8:	2201      	movs	r2, #1
 80091ea:	4619      	mov	r1, r3
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f000 fd35 	bl	8009c5c <VL53L0X_SetLimitCheckEnable>
 80091f2:	4603      	mov	r3, r0
 80091f4:	461a      	mov	r2, r3
 80091f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80091fa:	4313      	orrs	r3, r2
 80091fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8009200:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009202:	3301      	adds	r3, #1
 8009204:	653b      	str	r3, [r7, #80]	; 0x50
 8009206:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009208:	2b05      	cmp	r3, #5
 800920a:	dde7      	ble.n	80091dc <VL53L0X_DataInit+0x180>
 800920c:	e000      	b.n	8009210 <VL53L0X_DataInit+0x1b4>
		else
			break;
 800920e:	bf00      	nop
=======
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2264      	movs	r2, #100	; 0x64
 8008058:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f44f 7261 	mov.w	r2, #900	; 0x384
 8008062:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800806c:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8008076:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2201      	movs	r2, #1
 800807e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8008082:	2201      	movs	r2, #1
 8008084:	2180      	movs	r1, #128	; 0x80
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f004 fe52 	bl	800cd30 <VL53L0X_WrByte>
 800808c:	4603      	mov	r3, r0
 800808e:	461a      	mov	r2, r3
 8008090:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008094:	4313      	orrs	r3, r2
 8008096:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800809a:	2201      	movs	r2, #1
 800809c:	21ff      	movs	r1, #255	; 0xff
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f004 fe46 	bl	800cd30 <VL53L0X_WrByte>
 80080a4:	4603      	mov	r3, r0
 80080a6:	461a      	mov	r2, r3
 80080a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80080ac:	4313      	orrs	r3, r2
 80080ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80080b2:	2200      	movs	r2, #0
 80080b4:	2100      	movs	r1, #0
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f004 fe3a 	bl	800cd30 <VL53L0X_WrByte>
 80080bc:	4603      	mov	r3, r0
 80080be:	461a      	mov	r2, r3
 80080c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80080c4:	4313      	orrs	r3, r2
 80080c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 80080ca:	f107 030f 	add.w	r3, r7, #15
 80080ce:	461a      	mov	r2, r3
 80080d0:	2191      	movs	r1, #145	; 0x91
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f004 feae 	bl	800ce34 <VL53L0X_RdByte>
 80080d8:	4603      	mov	r3, r0
 80080da:	461a      	mov	r2, r3
 80080dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80080e0:	4313      	orrs	r3, r2
 80080e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 80080e6:	7bfa      	ldrb	r2, [r7, #15]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80080ee:	2201      	movs	r2, #1
 80080f0:	2100      	movs	r1, #0
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f004 fe1c 	bl	800cd30 <VL53L0X_WrByte>
 80080f8:	4603      	mov	r3, r0
 80080fa:	461a      	mov	r2, r3
 80080fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008100:	4313      	orrs	r3, r2
 8008102:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008106:	2200      	movs	r2, #0
 8008108:	21ff      	movs	r1, #255	; 0xff
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f004 fe10 	bl	800cd30 <VL53L0X_WrByte>
 8008110:	4603      	mov	r3, r0
 8008112:	461a      	mov	r2, r3
 8008114:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008118:	4313      	orrs	r3, r2
 800811a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800811e:	2200      	movs	r2, #0
 8008120:	2180      	movs	r1, #128	; 0x80
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f004 fe04 	bl	800cd30 <VL53L0X_WrByte>
 8008128:	4603      	mov	r3, r0
 800812a:	461a      	mov	r2, r3
 800812c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008130:	4313      	orrs	r3, r2
 8008132:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8008136:	2300      	movs	r3, #0
 8008138:	653b      	str	r3, [r7, #80]	; 0x50
 800813a:	e014      	b.n	8008166 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 800813c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008140:	2b00      	cmp	r3, #0
 8008142:	d114      	bne.n	800816e <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8008144:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008146:	b29b      	uxth	r3, r3
 8008148:	2201      	movs	r2, #1
 800814a:	4619      	mov	r1, r3
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 fd35 	bl	8008bbc <VL53L0X_SetLimitCheckEnable>
 8008152:	4603      	mov	r3, r0
 8008154:	461a      	mov	r2, r3
 8008156:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800815a:	4313      	orrs	r3, r2
 800815c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8008160:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008162:	3301      	adds	r3, #1
 8008164:	653b      	str	r3, [r7, #80]	; 0x50
 8008166:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008168:	2b05      	cmp	r3, #5
 800816a:	dde7      	ble.n	800813c <VL53L0X_DataInit+0x180>
 800816c:	e000      	b.n	8008170 <VL53L0X_DataInit+0x1b4>
		else
			break;
 800816e:	bf00      	nop
>>>>>>> ModeSelect_v2

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
<<<<<<< HEAD
 8009210:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009214:	2b00      	cmp	r3, #0
 8009216:	d107      	bne.n	8009228 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8009218:	2200      	movs	r2, #0
 800921a:	2102      	movs	r1, #2
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f000 fd1d 	bl	8009c5c <VL53L0X_SetLimitCheckEnable>
 8009222:	4603      	mov	r3, r0
 8009224:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8009228:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800922c:	2b00      	cmp	r3, #0
 800922e:	d107      	bne.n	8009240 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8009230:	2200      	movs	r2, #0
 8009232:	2103      	movs	r1, #3
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f000 fd11 	bl	8009c5c <VL53L0X_SetLimitCheckEnable>
 800923a:	4603      	mov	r3, r0
 800923c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8009240:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009244:	2b00      	cmp	r3, #0
 8009246:	d107      	bne.n	8009258 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8009248:	2200      	movs	r2, #0
 800924a:	2104      	movs	r1, #4
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 fd05 	bl	8009c5c <VL53L0X_SetLimitCheckEnable>
 8009252:	4603      	mov	r3, r0
 8009254:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8009258:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800925c:	2b00      	cmp	r3, #0
 800925e:	d107      	bne.n	8009270 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8009260:	2200      	movs	r2, #0
 8009262:	2105      	movs	r1, #5
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f000 fcf9 	bl	8009c5c <VL53L0X_SetLimitCheckEnable>
 800926a:	4603      	mov	r3, r0
 800926c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
=======
 8008170:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008174:	2b00      	cmp	r3, #0
 8008176:	d107      	bne.n	8008188 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8008178:	2200      	movs	r2, #0
 800817a:	2102      	movs	r1, #2
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f000 fd1d 	bl	8008bbc <VL53L0X_SetLimitCheckEnable>
 8008182:	4603      	mov	r3, r0
 8008184:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8008188:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800818c:	2b00      	cmp	r3, #0
 800818e:	d107      	bne.n	80081a0 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8008190:	2200      	movs	r2, #0
 8008192:	2103      	movs	r1, #3
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 fd11 	bl	8008bbc <VL53L0X_SetLimitCheckEnable>
 800819a:	4603      	mov	r3, r0
 800819c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80081a0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d107      	bne.n	80081b8 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80081a8:	2200      	movs	r2, #0
 80081aa:	2104      	movs	r1, #4
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 fd05 	bl	8008bbc <VL53L0X_SetLimitCheckEnable>
 80081b2:	4603      	mov	r3, r0
 80081b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80081b8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d107      	bne.n	80081d0 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80081c0:	2200      	movs	r2, #0
 80081c2:	2105      	movs	r1, #5
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f000 fcf9 	bl	8008bbc <VL53L0X_SetLimitCheckEnable>
 80081ca:	4603      	mov	r3, r0
 80081cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
>>>>>>> ModeSelect_v2
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 8009270:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009274:	2b00      	cmp	r3, #0
 8009276:	d108      	bne.n	800928a <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8009278:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 800927c:	2100      	movs	r1, #0
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f000 fd9c 	bl	8009dbc <VL53L0X_SetLimitCheckValue>
 8009284:	4603      	mov	r3, r0
 8009286:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
=======
 80081d0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d108      	bne.n	80081ea <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80081d8:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 80081dc:	2100      	movs	r1, #0
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 fd9c 	bl	8008d1c <VL53L0X_SetLimitCheckValue>
 80081e4:	4603      	mov	r3, r0
 80081e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
>>>>>>> ModeSelect_v2
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 800928a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800928e:	2b00      	cmp	r3, #0
 8009290:	d108      	bne.n	80092a4 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8009292:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009296:	2101      	movs	r1, #1
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f000 fd8f 	bl	8009dbc <VL53L0X_SetLimitCheckValue>
 800929e:	4603      	mov	r3, r0
 80092a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
=======
 80081ea:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d108      	bne.n	8008204 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80081f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80081f6:	2101      	movs	r1, #1
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f000 fd8f 	bl	8008d1c <VL53L0X_SetLimitCheckValue>
 80081fe:	4603      	mov	r3, r0
 8008200:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
>>>>>>> ModeSelect_v2
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 80092a4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d108      	bne.n	80092be <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80092ac:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 80092b0:	2102      	movs	r1, #2
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f000 fd82 	bl	8009dbc <VL53L0X_SetLimitCheckValue>
 80092b8:	4603      	mov	r3, r0
 80092ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
=======
 8008204:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008208:	2b00      	cmp	r3, #0
 800820a:	d108      	bne.n	800821e <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800820c:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8008210:	2102      	movs	r1, #2
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 fd82 	bl	8008d1c <VL53L0X_SetLimitCheckValue>
 8008218:	4603      	mov	r3, r0
 800821a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
>>>>>>> ModeSelect_v2
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 80092be:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d107      	bne.n	80092d6 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80092c6:	2200      	movs	r2, #0
 80092c8:	2103      	movs	r1, #3
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 fd76 	bl	8009dbc <VL53L0X_SetLimitCheckValue>
 80092d0:	4603      	mov	r3, r0
 80092d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
=======
 800821e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008222:	2b00      	cmp	r3, #0
 8008224:	d107      	bne.n	8008236 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8008226:	2200      	movs	r2, #0
 8008228:	2103      	movs	r1, #3
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 fd76 	bl	8008d1c <VL53L0X_SetLimitCheckValue>
 8008230:	4603      	mov	r3, r0
 8008232:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
>>>>>>> ModeSelect_v2
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 80092d6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d10f      	bne.n	80092fe <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	22ff      	movs	r2, #255	; 0xff
 80092e2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80092e6:	22ff      	movs	r2, #255	; 0xff
 80092e8:	2101      	movs	r1, #1
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f004 fd70 	bl	800ddd0 <VL53L0X_WrByte>
 80092f0:	4603      	mov	r3, r0
 80092f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
=======
 8008236:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800823a:	2b00      	cmp	r3, #0
 800823c:	d10f      	bne.n	800825e <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	22ff      	movs	r2, #255	; 0xff
 8008242:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008246:	22ff      	movs	r2, #255	; 0xff
 8008248:	2101      	movs	r1, #1
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f004 fd70 	bl	800cd30 <VL53L0X_WrByte>
 8008250:	4603      	mov	r3, r0
 8008252:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
>>>>>>> ModeSelect_v2
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
<<<<<<< HEAD
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2201      	movs	r2, #1
 80092fa:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 80092fe:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009302:	2b00      	cmp	r3, #0
 8009304:	d103      	bne.n	800930e <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2200      	movs	r2, #0
 800930a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
=======
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2201      	movs	r2, #1
 800825a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 800825e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008262:	2b00      	cmp	r3, #0
 8008264:	d103      	bne.n	800826e <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2200      	movs	r2, #0
 800826a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
>>>>>>> ModeSelect_v2


	LOG_FUNCTION_END(Status);
	return Status;
<<<<<<< HEAD
 800930e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8009312:	4618      	mov	r0, r3
 8009314:	3758      	adds	r7, #88	; 0x58
 8009316:	46bd      	mov	sp, r7
 8009318:	bdb0      	pop	{r4, r5, r7, pc}
 800931a:	bf00      	nop
 800931c:	00016b85 	.word	0x00016b85
 8009320:	000970a4 	.word	0x000970a4

08009324 <VL53L0X_StaticInit>:
=======
 800826e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8008272:	4618      	mov	r0, r3
 8008274:	3758      	adds	r7, #88	; 0x58
 8008276:	46bd      	mov	sp, r7
 8008278:	bdb0      	pop	{r4, r5, r7, pc}
 800827a:	bf00      	nop
 800827c:	00016b85 	.word	0x00016b85
 8008280:	000970a4 	.word	0x000970a4

08008284 <VL53L0X_StaticInit>:
>>>>>>> ModeSelect_v2
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
<<<<<<< HEAD
 8009324:	b5b0      	push	{r4, r5, r7, lr}
 8009326:	b09e      	sub	sp, #120	; 0x78
 8009328:	af02      	add	r7, sp, #8
 800932a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800932c:	2300      	movs	r3, #0
 800932e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8009332:	f107 031c 	add.w	r3, r7, #28
 8009336:	2240      	movs	r2, #64	; 0x40
 8009338:	2100      	movs	r1, #0
 800933a:	4618      	mov	r0, r3
 800933c:	f004 feaa 	bl	800e094 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8009340:	2300      	movs	r3, #0
 8009342:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8009344:	2300      	movs	r3, #0
 8009346:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8009348:	2300      	movs	r3, #0
 800934a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 800934e:	2300      	movs	r3, #0
 8009350:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8009352:	2300      	movs	r3, #0
 8009354:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8009356:	2300      	movs	r3, #0
 8009358:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 800935a:	2300      	movs	r3, #0
 800935c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
=======
 8008284:	b5b0      	push	{r4, r5, r7, lr}
 8008286:	b09e      	sub	sp, #120	; 0x78
 8008288:	af02      	add	r7, sp, #8
 800828a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800828c:	2300      	movs	r3, #0
 800828e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8008292:	f107 031c 	add.w	r3, r7, #28
 8008296:	2240      	movs	r2, #64	; 0x40
 8008298:	2100      	movs	r1, #0
 800829a:	4618      	mov	r0, r3
 800829c:	f004 feaa 	bl	800cff4 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 80082a0:	2300      	movs	r3, #0
 80082a2:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 80082a4:	2300      	movs	r3, #0
 80082a6:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 80082a8:	2300      	movs	r3, #0
 80082aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 80082ae:	2300      	movs	r3, #0
 80082b0:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 80082b2:	2300      	movs	r3, #0
 80082b4:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 80082b6:	2300      	movs	r3, #0
 80082b8:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 80082ba:	2300      	movs	r3, #0
 80082bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
>>>>>>> ModeSelect_v2
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
<<<<<<< HEAD
 8009360:	2101      	movs	r1, #1
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f002 fa79 	bl	800b85a <VL53L0X_get_info_from_device>
 8009368:	4603      	mov	r3, r0
 800936a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8009374:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 800937c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
=======
 80082c0:	2101      	movs	r1, #1
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f002 fa79 	bl	800a7ba <VL53L0X_get_info_from_device>
 80082c8:	4603      	mov	r3, r0
 80082ca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 80082d4:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80082dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
>>>>>>> ModeSelect_v2
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
<<<<<<< HEAD
 8009380:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009384:	2b01      	cmp	r3, #1
 8009386:	d80d      	bhi.n	80093a4 <VL53L0X_StaticInit+0x80>
 8009388:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800938c:	2b01      	cmp	r3, #1
 800938e:	d102      	bne.n	8009396 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8009390:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009392:	2b20      	cmp	r3, #32
 8009394:	d806      	bhi.n	80093a4 <VL53L0X_StaticInit+0x80>
 8009396:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800939a:	2b00      	cmp	r3, #0
 800939c:	d10e      	bne.n	80093bc <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 800939e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80093a0:	2b0c      	cmp	r3, #12
 80093a2:	d90b      	bls.n	80093bc <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 80093a4:	f107 0218 	add.w	r2, r7, #24
 80093a8:	f107 0314 	add.w	r3, r7, #20
 80093ac:	4619      	mov	r1, r3
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f001 fcf8 	bl	800ada4 <VL53L0X_perform_ref_spad_management>
 80093b4:	4603      	mov	r3, r0
 80093b6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80093ba:	e009      	b.n	80093d0 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 80093bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80093c0:	461a      	mov	r2, r3
 80093c2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f001 fef9 	bl	800b1bc <VL53L0X_set_reference_spads>
 80093ca:	4603      	mov	r3, r0
 80093cc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
=======
 80082e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d80d      	bhi.n	8008304 <VL53L0X_StaticInit+0x80>
 80082e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d102      	bne.n	80082f6 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 80082f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80082f2:	2b20      	cmp	r3, #32
 80082f4:	d806      	bhi.n	8008304 <VL53L0X_StaticInit+0x80>
 80082f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d10e      	bne.n	800831c <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 80082fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008300:	2b0c      	cmp	r3, #12
 8008302:	d90b      	bls.n	800831c <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8008304:	f107 0218 	add.w	r2, r7, #24
 8008308:	f107 0314 	add.w	r3, r7, #20
 800830c:	4619      	mov	r1, r3
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f001 fcf8 	bl	8009d04 <VL53L0X_perform_ref_spad_management>
 8008314:	4603      	mov	r3, r0
 8008316:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800831a:	e009      	b.n	8008330 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 800831c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008320:	461a      	mov	r2, r3
 8008322:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f001 fef9 	bl	800a11c <VL53L0X_set_reference_spads>
 800832a:	4603      	mov	r3, r0
 800832c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
>>>>>>> ModeSelect_v2


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
<<<<<<< HEAD
 80093d0:	4b94      	ldr	r3, [pc, #592]	; (8009624 <VL53L0X_StaticInit+0x300>)
 80093d2:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 80093d4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d10f      	bne.n	80093fc <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 80093e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 80093e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d104      	bne.n	80093f8 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80093f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80093f6:	e001      	b.n	80093fc <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 80093f8:	4b8a      	ldr	r3, [pc, #552]	; (8009624 <VL53L0X_StaticInit+0x300>)
 80093fa:	66bb      	str	r3, [r7, #104]	; 0x68
=======
 8008330:	4b94      	ldr	r3, [pc, #592]	; (8008584 <VL53L0X_StaticInit+0x300>)
 8008332:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8008334:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008338:	2b00      	cmp	r3, #0
 800833a:	d10f      	bne.n	800835c <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8008342:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8008346:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800834a:	2b00      	cmp	r3, #0
 800834c:	d104      	bne.n	8008358 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8008354:	66bb      	str	r3, [r7, #104]	; 0x68
 8008356:	e001      	b.n	800835c <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8008358:	4b8a      	ldr	r3, [pc, #552]	; (8008584 <VL53L0X_StaticInit+0x300>)
 800835a:	66bb      	str	r3, [r7, #104]	; 0x68
>>>>>>> ModeSelect_v2

	}

	if (Status == VL53L0X_ERROR_NONE)
<<<<<<< HEAD
 80093fc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009400:	2b00      	cmp	r3, #0
 8009402:	d106      	bne.n	8009412 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8009404:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f003 fdcc 	bl	800cfa4 <VL53L0X_load_tuning_settings>
 800940c:	4603      	mov	r3, r0
 800940e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
=======
 800835c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008360:	2b00      	cmp	r3, #0
 8008362:	d106      	bne.n	8008372 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8008364:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f003 fdcc 	bl	800bf04 <VL53L0X_load_tuning_settings>
 800836c:	4603      	mov	r3, r0
 800836e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
>>>>>>> ModeSelect_v2


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 8009412:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009416:	2b00      	cmp	r3, #0
 8009418:	d10a      	bne.n	8009430 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 800941a:	2300      	movs	r3, #0
 800941c:	9300      	str	r3, [sp, #0]
 800941e:	2304      	movs	r3, #4
 8009420:	2200      	movs	r2, #0
 8009422:	2100      	movs	r1, #0
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f001 f8f1 	bl	800a60c <VL53L0X_SetGpioConfig>
 800942a:	4603      	mov	r3, r0
 800942c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
=======
 8008372:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008376:	2b00      	cmp	r3, #0
 8008378:	d10a      	bne.n	8008390 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 800837a:	2300      	movs	r3, #0
 800837c:	9300      	str	r3, [sp, #0]
 800837e:	2304      	movs	r3, #4
 8008380:	2200      	movs	r2, #0
 8008382:	2100      	movs	r1, #0
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f001 f8f1 	bl	800956c <VL53L0X_SetGpioConfig>
 800838a:	4603      	mov	r3, r0
 800838c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
>>>>>>> ModeSelect_v2
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 8009430:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009434:	2b00      	cmp	r3, #0
 8009436:	d121      	bne.n	800947c <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009438:	2201      	movs	r2, #1
 800943a:	21ff      	movs	r1, #255	; 0xff
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f004 fcc7 	bl	800ddd0 <VL53L0X_WrByte>
 8009442:	4603      	mov	r3, r0
 8009444:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8009448:	f107 031a 	add.w	r3, r7, #26
 800944c:	461a      	mov	r2, r3
 800944e:	2184      	movs	r1, #132	; 0x84
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f004 fd69 	bl	800df28 <VL53L0X_RdWord>
 8009456:	4603      	mov	r3, r0
 8009458:	461a      	mov	r2, r3
 800945a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800945e:	4313      	orrs	r3, r2
 8009460:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009464:	2200      	movs	r2, #0
 8009466:	21ff      	movs	r1, #255	; 0xff
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f004 fcb1 	bl	800ddd0 <VL53L0X_WrByte>
 800946e:	4603      	mov	r3, r0
 8009470:	461a      	mov	r2, r3
 8009472:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009476:	4313      	orrs	r3, r2
 8009478:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800947c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009480:	2b00      	cmp	r3, #0
 8009482:	d105      	bne.n	8009490 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8009484:	8b7b      	ldrh	r3, [r7, #26]
 8009486:	011b      	lsls	r3, r3, #4
 8009488:	461a      	mov	r2, r3
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
=======
 8008390:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008394:	2b00      	cmp	r3, #0
 8008396:	d121      	bne.n	80083dc <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008398:	2201      	movs	r2, #1
 800839a:	21ff      	movs	r1, #255	; 0xff
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f004 fcc7 	bl	800cd30 <VL53L0X_WrByte>
 80083a2:	4603      	mov	r3, r0
 80083a4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80083a8:	f107 031a 	add.w	r3, r7, #26
 80083ac:	461a      	mov	r2, r3
 80083ae:	2184      	movs	r1, #132	; 0x84
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f004 fd69 	bl	800ce88 <VL53L0X_RdWord>
 80083b6:	4603      	mov	r3, r0
 80083b8:	461a      	mov	r2, r3
 80083ba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80083be:	4313      	orrs	r3, r2
 80083c0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80083c4:	2200      	movs	r2, #0
 80083c6:	21ff      	movs	r1, #255	; 0xff
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f004 fcb1 	bl	800cd30 <VL53L0X_WrByte>
 80083ce:	4603      	mov	r3, r0
 80083d0:	461a      	mov	r2, r3
 80083d2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80083d6:	4313      	orrs	r3, r2
 80083d8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80083dc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d105      	bne.n	80083f0 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 80083e4:	8b7b      	ldrh	r3, [r7, #26]
 80083e6:	011b      	lsls	r3, r3, #4
 80083e8:	461a      	mov	r2, r3
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
>>>>>>> ModeSelect_v2
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
<<<<<<< HEAD
 8009490:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009494:	2b00      	cmp	r3, #0
 8009496:	d108      	bne.n	80094aa <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8009498:	f107 031c 	add.w	r3, r7, #28
 800949c:	4619      	mov	r1, r3
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 f8d0 	bl	8009644 <VL53L0X_GetDeviceParameters>
 80094a4:	4603      	mov	r3, r0
 80094a6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 80094aa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d110      	bne.n	80094d4 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 80094b2:	f107 0319 	add.w	r3, r7, #25
 80094b6:	4619      	mov	r1, r3
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f000 f992 	bl	80097e2 <VL53L0X_GetFractionEnable>
 80094be:	4603      	mov	r3, r0
 80094c0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 80094c4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d103      	bne.n	80094d4 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 80094cc:	7e7a      	ldrb	r2, [r7, #25]
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
=======
 80083f0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d108      	bne.n	800840a <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80083f8:	f107 031c 	add.w	r3, r7, #28
 80083fc:	4619      	mov	r1, r3
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 f8d0 	bl	80085a4 <VL53L0X_GetDeviceParameters>
 8008404:	4603      	mov	r3, r0
 8008406:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 800840a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800840e:	2b00      	cmp	r3, #0
 8008410:	d110      	bne.n	8008434 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8008412:	f107 0319 	add.w	r3, r7, #25
 8008416:	4619      	mov	r1, r3
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 f992 	bl	8008742 <VL53L0X_GetFractionEnable>
 800841e:	4603      	mov	r3, r0
 8008420:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8008424:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008428:	2b00      	cmp	r3, #0
 800842a:	d103      	bne.n	8008434 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 800842c:	7e7a      	ldrb	r2, [r7, #25]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
>>>>>>> ModeSelect_v2

	}

	if (Status == VL53L0X_ERROR_NONE)
<<<<<<< HEAD
 80094d4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d10e      	bne.n	80094fa <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f103 0410 	add.w	r4, r3, #16
 80094e2:	f107 051c 	add.w	r5, r7, #28
 80094e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80094e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80094ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80094ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80094ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80094f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80094f2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80094f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
=======
 8008434:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008438:	2b00      	cmp	r3, #0
 800843a:	d10e      	bne.n	800845a <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f103 0410 	add.w	r4, r3, #16
 8008442:	f107 051c 	add.w	r5, r7, #28
 8008446:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008448:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800844a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800844c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800844e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008450:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008452:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008456:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
>>>>>>> ModeSelect_v2


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 80094fa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d111      	bne.n	8009526 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8009502:	f107 0319 	add.w	r3, r7, #25
 8009506:	461a      	mov	r2, r3
 8009508:	2101      	movs	r1, #1
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f004 fce2 	bl	800ded4 <VL53L0X_RdByte>
 8009510:	4603      	mov	r3, r0
 8009512:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8009516:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800951a:	2b00      	cmp	r3, #0
 800951c:	d103      	bne.n	8009526 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800951e:	7e7a      	ldrb	r2, [r7, #25]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
=======
 800845a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800845e:	2b00      	cmp	r3, #0
 8008460:	d111      	bne.n	8008486 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8008462:	f107 0319 	add.w	r3, r7, #25
 8008466:	461a      	mov	r2, r3
 8008468:	2101      	movs	r1, #1
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f004 fce2 	bl	800ce34 <VL53L0X_RdByte>
 8008470:	4603      	mov	r3, r0
 8008472:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8008476:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800847a:	2b00      	cmp	r3, #0
 800847c:	d103      	bne.n	8008486 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800847e:	7e7a      	ldrb	r2, [r7, #25]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
>>>>>>> ModeSelect_v2

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
<<<<<<< HEAD
 8009526:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800952a:	2b00      	cmp	r3, #0
 800952c:	d107      	bne.n	800953e <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800952e:	2200      	movs	r2, #0
 8009530:	2100      	movs	r1, #0
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f000 f9ca 	bl	80098cc <VL53L0X_SetSequenceStepEnable>
 8009538:	4603      	mov	r3, r0
 800953a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
=======
 8008486:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800848a:	2b00      	cmp	r3, #0
 800848c:	d107      	bne.n	800849e <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800848e:	2200      	movs	r2, #0
 8008490:	2100      	movs	r1, #0
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f000 f9ca 	bl	800882c <VL53L0X_SetSequenceStepEnable>
 8008498:	4603      	mov	r3, r0
 800849a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
>>>>>>> ModeSelect_v2
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
<<<<<<< HEAD
 800953e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009542:	2b00      	cmp	r3, #0
 8009544:	d107      	bne.n	8009556 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8009546:	2200      	movs	r2, #0
 8009548:	2102      	movs	r1, #2
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f000 f9be 	bl	80098cc <VL53L0X_SetSequenceStepEnable>
 8009550:	4603      	mov	r3, r0
 8009552:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
=======
 800849e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d107      	bne.n	80084b6 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80084a6:	2200      	movs	r2, #0
 80084a8:	2102      	movs	r1, #2
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 f9be 	bl	800882c <VL53L0X_SetSequenceStepEnable>
 80084b0:	4603      	mov	r3, r0
 80084b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
>>>>>>> ModeSelect_v2
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
<<<<<<< HEAD
 8009556:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800955a:	2b00      	cmp	r3, #0
 800955c:	d103      	bne.n	8009566 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2203      	movs	r2, #3
 8009562:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
=======
 80084b6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d103      	bne.n	80084c6 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2203      	movs	r2, #3
 80084c2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
>>>>>>> ModeSelect_v2



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 8009566:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800956a:	2b00      	cmp	r3, #0
 800956c:	d109      	bne.n	8009582 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 800956e:	f107 0313 	add.w	r3, r7, #19
 8009572:	461a      	mov	r2, r3
 8009574:	2100      	movs	r1, #0
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f000 f990 	bl	800989c <VL53L0X_GetVcselPulsePeriod>
 800957c:	4603      	mov	r3, r0
 800957e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
=======
 80084c6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d109      	bne.n	80084e2 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 80084ce:	f107 0313 	add.w	r3, r7, #19
 80084d2:	461a      	mov	r2, r3
 80084d4:	2100      	movs	r1, #0
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f000 f990 	bl	80087fc <VL53L0X_GetVcselPulsePeriod>
 80084dc:	4603      	mov	r3, r0
 80084de:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
>>>>>>> ModeSelect_v2
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 8009582:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009586:	2b00      	cmp	r3, #0
 8009588:	d103      	bne.n	8009592 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800958a:	7cfa      	ldrb	r2, [r7, #19]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
=======
 80084e2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d103      	bne.n	80084f2 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80084ea:	7cfa      	ldrb	r2, [r7, #19]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
>>>>>>> ModeSelect_v2
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 8009592:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009596:	2b00      	cmp	r3, #0
 8009598:	d109      	bne.n	80095ae <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 800959a:	f107 0313 	add.w	r3, r7, #19
 800959e:	461a      	mov	r2, r3
 80095a0:	2101      	movs	r1, #1
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 f97a 	bl	800989c <VL53L0X_GetVcselPulsePeriod>
 80095a8:	4603      	mov	r3, r0
 80095aa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
=======
 80084f2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d109      	bne.n	800850e <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 80084fa:	f107 0313 	add.w	r3, r7, #19
 80084fe:	461a      	mov	r2, r3
 8008500:	2101      	movs	r1, #1
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 f97a 	bl	80087fc <VL53L0X_GetVcselPulsePeriod>
 8008508:	4603      	mov	r3, r0
 800850a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
>>>>>>> ModeSelect_v2
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 80095ae:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d103      	bne.n	80095be <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80095b6:	7cfa      	ldrb	r2, [r7, #19]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
=======
 800850e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008512:	2b00      	cmp	r3, #0
 8008514:	d103      	bne.n	800851e <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008516:	7cfa      	ldrb	r2, [r7, #19]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
>>>>>>> ModeSelect_v2
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 80095be:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d109      	bne.n	80095da <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 80095c6:	f107 030c 	add.w	r3, r7, #12
 80095ca:	461a      	mov	r2, r3
 80095cc:	2103      	movs	r1, #3
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f002 fec4 	bl	800c35c <get_sequence_step_timeout>
 80095d4:	4603      	mov	r3, r0
 80095d6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
=======
 800851e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008522:	2b00      	cmp	r3, #0
 8008524:	d109      	bne.n	800853a <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8008526:	f107 030c 	add.w	r3, r7, #12
 800852a:	461a      	mov	r2, r3
 800852c:	2103      	movs	r1, #3
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f002 fec4 	bl	800b2bc <get_sequence_step_timeout>
 8008534:	4603      	mov	r3, r0
 8008536:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
>>>>>>> ModeSelect_v2
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 80095da:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d103      	bne.n	80095ea <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80095e2:	68fa      	ldr	r2, [r7, #12]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
=======
 800853a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800853e:	2b00      	cmp	r3, #0
 8008540:	d103      	bne.n	800854a <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008542:	68fa      	ldr	r2, [r7, #12]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
>>>>>>> ModeSelect_v2
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 80095ea:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d109      	bne.n	8009606 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 80095f2:	f107 030c 	add.w	r3, r7, #12
 80095f6:	461a      	mov	r2, r3
 80095f8:	2104      	movs	r1, #4
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f002 feae 	bl	800c35c <get_sequence_step_timeout>
 8009600:	4603      	mov	r3, r0
 8009602:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
=======
 800854a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800854e:	2b00      	cmp	r3, #0
 8008550:	d109      	bne.n	8008566 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8008552:	f107 030c 	add.w	r3, r7, #12
 8008556:	461a      	mov	r2, r3
 8008558:	2104      	movs	r1, #4
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f002 feae 	bl	800b2bc <get_sequence_step_timeout>
 8008560:	4603      	mov	r3, r0
 8008562:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
>>>>>>> ModeSelect_v2
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 8009606:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800960a:	2b00      	cmp	r3, #0
 800960c:	d103      	bne.n	8009616 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800960e:	68fa      	ldr	r2, [r7, #12]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
=======
 8008566:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800856a:	2b00      	cmp	r3, #0
 800856c:	d103      	bne.n	8008576 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800856e:	68fa      	ldr	r2, [r7, #12]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
>>>>>>> ModeSelect_v2
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
<<<<<<< HEAD
 8009616:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800961a:	4618      	mov	r0, r3
 800961c:	3770      	adds	r7, #112	; 0x70
 800961e:	46bd      	mov	sp, r7
 8009620:	bdb0      	pop	{r4, r5, r7, pc}
 8009622:	bf00      	nop
 8009624:	20000010 	.word	0x20000010

08009628 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 8009628:	b480      	push	{r7}
 800962a:	b085      	sub	sp, #20
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8009630:	239d      	movs	r3, #157	; 0x9d
 8009632:	73fb      	strb	r3, [r7, #15]
=======
 8008576:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800857a:	4618      	mov	r0, r3
 800857c:	3770      	adds	r7, #112	; 0x70
 800857e:	46bd      	mov	sp, r7
 8008580:	bdb0      	pop	{r4, r5, r7, pc}
 8008582:	bf00      	nop
 8008584:	20000010 	.word	0x20000010

08008588 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 8008588:	b480      	push	{r7}
 800858a:	b085      	sub	sp, #20
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8008590:	239d      	movs	r3, #157	; 0x9d
 8008592:	73fb      	strb	r3, [r7, #15]
>>>>>>> ModeSelect_v2
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
<<<<<<< HEAD
 8009634:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009638:	4618      	mov	r0, r3
 800963a:	3714      	adds	r7, #20
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr

08009644 <VL53L0X_GetDeviceParameters>:
=======
 8008594:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008598:	4618      	mov	r0, r3
 800859a:	3714      	adds	r7, #20
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr

080085a4 <VL53L0X_GetDeviceParameters>:
>>>>>>> ModeSelect_v2
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
<<<<<<< HEAD
 8009644:	b580      	push	{r7, lr}
 8009646:	b084      	sub	sp, #16
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800964e:	2300      	movs	r3, #0
 8009650:	73fb      	strb	r3, [r7, #15]
=======
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b084      	sub	sp, #16
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80085ae:	2300      	movs	r3, #0
 80085b0:	73fb      	strb	r3, [r7, #15]
>>>>>>> ModeSelect_v2
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
<<<<<<< HEAD
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	4619      	mov	r1, r3
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f000 f8b0 	bl	80097bc <VL53L0X_GetDeviceMode>
 800965c:	4603      	mov	r3, r0
 800965e:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8009660:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d107      	bne.n	8009678 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	3308      	adds	r3, #8
 800966c:	4619      	mov	r1, r3
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f000 fa78 	bl	8009b64 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8009674:	4603      	mov	r3, r0
 8009676:	73fb      	strb	r3, [r7, #15]
=======
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	4619      	mov	r1, r3
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 f8b0 	bl	800871c <VL53L0X_GetDeviceMode>
 80085bc:	4603      	mov	r3, r0
 80085be:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80085c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d107      	bne.n	80085d8 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	3308      	adds	r3, #8
 80085cc:	4619      	mov	r1, r3
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 fa78 	bl	8008ac4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 80085d4:	4603      	mov	r3, r0
 80085d6:	73fb      	strb	r3, [r7, #15]
>>>>>>> ModeSelect_v2
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
<<<<<<< HEAD
 8009678:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d102      	bne.n	8009686 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	2200      	movs	r2, #0
 8009684:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8009686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d107      	bne.n	800969e <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	3310      	adds	r3, #16
 8009692:	4619      	mov	r1, r3
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f000 faae 	bl	8009bf6 <VL53L0X_GetXTalkCompensationRateMegaCps>
 800969a:	4603      	mov	r3, r0
 800969c:	73fb      	strb	r3, [r7, #15]
=======
 80085d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d102      	bne.n	80085e6 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	2200      	movs	r2, #0
 80085e4:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 80085e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d107      	bne.n	80085fe <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	3310      	adds	r3, #16
 80085f2:	4619      	mov	r1, r3
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 faae 	bl	8008b56 <VL53L0X_GetXTalkCompensationRateMegaCps>
 80085fa:	4603      	mov	r3, r0
 80085fc:	73fb      	strb	r3, [r7, #15]
>>>>>>> ModeSelect_v2
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
<<<<<<< HEAD
 800969e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d107      	bne.n	80096b6 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	3314      	adds	r3, #20
 80096aa:	4619      	mov	r1, r3
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f7ff fcc1 	bl	8009034 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 80096b2:	4603      	mov	r3, r0
 80096b4:	73fb      	strb	r3, [r7, #15]
=======
 80085fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d107      	bne.n	8008616 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	3314      	adds	r3, #20
 800860a:	4619      	mov	r1, r3
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f7ff fcc1 	bl	8007f94 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8008612:	4603      	mov	r3, r0
 8008614:	73fb      	strb	r3, [r7, #15]
>>>>>>> ModeSelect_v2
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 80096b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d134      	bne.n	8009728 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80096be:	2300      	movs	r3, #0
 80096c0:	60bb      	str	r3, [r7, #8]
 80096c2:	e02a      	b.n	800971a <VL53L0X_GetDeviceParameters+0xd6>
=======
 8008616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d134      	bne.n	8008688 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800861e:	2300      	movs	r3, #0
 8008620:	60bb      	str	r3, [r7, #8]
 8008622:	e02a      	b.n	800867a <VL53L0X_GetDeviceParameters+0xd6>
>>>>>>> ModeSelect_v2
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 80096c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d12a      	bne.n	8009722 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	b299      	uxth	r1, r3
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	3308      	adds	r3, #8
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	683a      	ldr	r2, [r7, #0]
 80096d8:	4413      	add	r3, r2
 80096da:	3304      	adds	r3, #4
 80096dc:	461a      	mov	r2, r3
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f000 fbce 	bl	8009e80 <VL53L0X_GetLimitCheckValue>
 80096e4:	4603      	mov	r3, r0
 80096e6:	461a      	mov	r2, r3
 80096e8:	7bfb      	ldrb	r3, [r7, #15]
 80096ea:	4313      	orrs	r3, r2
 80096ec:	73fb      	strb	r3, [r7, #15]
=======
 8008624:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d12a      	bne.n	8008682 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	b299      	uxth	r1, r3
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	3308      	adds	r3, #8
 8008634:	009b      	lsls	r3, r3, #2
 8008636:	683a      	ldr	r2, [r7, #0]
 8008638:	4413      	add	r3, r2
 800863a:	3304      	adds	r3, #4
 800863c:	461a      	mov	r2, r3
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 fbce 	bl	8008de0 <VL53L0X_GetLimitCheckValue>
 8008644:	4603      	mov	r3, r0
 8008646:	461a      	mov	r2, r3
 8008648:	7bfb      	ldrb	r3, [r7, #15]
 800864a:	4313      	orrs	r3, r2
 800864c:	73fb      	strb	r3, [r7, #15]
>>>>>>> ModeSelect_v2
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 80096ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d117      	bne.n	8009726 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	b299      	uxth	r1, r3
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	3318      	adds	r3, #24
 80096fe:	683a      	ldr	r2, [r7, #0]
 8009700:	4413      	add	r3, r2
 8009702:	461a      	mov	r2, r3
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f000 fb35 	bl	8009d74 <VL53L0X_GetLimitCheckEnable>
 800970a:	4603      	mov	r3, r0
 800970c:	461a      	mov	r2, r3
 800970e:	7bfb      	ldrb	r3, [r7, #15]
 8009710:	4313      	orrs	r3, r2
 8009712:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	3301      	adds	r3, #1
 8009718:	60bb      	str	r3, [r7, #8]
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	2b05      	cmp	r3, #5
 800971e:	ddd1      	ble.n	80096c4 <VL53L0X_GetDeviceParameters+0x80>
 8009720:	e002      	b.n	8009728 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8009722:	bf00      	nop
 8009724:	e000      	b.n	8009728 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8009726:	bf00      	nop
=======
 800864e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d117      	bne.n	8008686 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	b299      	uxth	r1, r3
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	3318      	adds	r3, #24
 800865e:	683a      	ldr	r2, [r7, #0]
 8008660:	4413      	add	r3, r2
 8008662:	461a      	mov	r2, r3
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f000 fb35 	bl	8008cd4 <VL53L0X_GetLimitCheckEnable>
 800866a:	4603      	mov	r3, r0
 800866c:	461a      	mov	r2, r3
 800866e:	7bfb      	ldrb	r3, [r7, #15]
 8008670:	4313      	orrs	r3, r2
 8008672:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	3301      	adds	r3, #1
 8008678:	60bb      	str	r3, [r7, #8]
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	2b05      	cmp	r3, #5
 800867e:	ddd1      	ble.n	8008624 <VL53L0X_GetDeviceParameters+0x80>
 8008680:	e002      	b.n	8008688 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8008682:	bf00      	nop
 8008684:	e000      	b.n	8008688 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8008686:	bf00      	nop
>>>>>>> ModeSelect_v2
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 8009728:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d107      	bne.n	8009740 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	333c      	adds	r3, #60	; 0x3c
 8009734:	4619      	mov	r1, r3
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f000 fc30 	bl	8009f9c <VL53L0X_GetWrapAroundCheckEnable>
 800973c:	4603      	mov	r3, r0
 800973e:	73fb      	strb	r3, [r7, #15]
=======
 8008688:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d107      	bne.n	80086a0 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	333c      	adds	r3, #60	; 0x3c
 8008694:	4619      	mov	r1, r3
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 fc30 	bl	8008efc <VL53L0X_GetWrapAroundCheckEnable>
 800869c:	4603      	mov	r3, r0
 800869e:	73fb      	strb	r3, [r7, #15]
>>>>>>> ModeSelect_v2
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 8009740:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d107      	bne.n	8009758 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	3304      	adds	r3, #4
 800974c:	4619      	mov	r1, r3
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f000 f879 	bl	8009846 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8009754:	4603      	mov	r3, r0
 8009756:	73fb      	strb	r3, [r7, #15]
=======
 80086a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d107      	bne.n	80086b8 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	3304      	adds	r3, #4
 80086ac:	4619      	mov	r1, r3
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 f879 	bl	80087a6 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 80086b4:	4603      	mov	r3, r0
 80086b6:	73fb      	strb	r3, [r7, #15]
>>>>>>> ModeSelect_v2
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
<<<<<<< HEAD
 8009758:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800975c:	4618      	mov	r0, r3
 800975e:	3710      	adds	r7, #16
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}

08009764 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8009764:	b480      	push	{r7}
 8009766:	b085      	sub	sp, #20
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	460b      	mov	r3, r1
 800976e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009770:	2300      	movs	r3, #0
 8009772:	73fb      	strb	r3, [r7, #15]
=======
 80086b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3710      	adds	r7, #16
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b085      	sub	sp, #20
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	460b      	mov	r3, r1
 80086ce:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80086d0:	2300      	movs	r3, #0
 80086d2:	73fb      	strb	r3, [r7, #15]
>>>>>>> ModeSelect_v2

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
<<<<<<< HEAD
 8009774:	78fb      	ldrb	r3, [r7, #3]
 8009776:	2b15      	cmp	r3, #21
 8009778:	bf8c      	ite	hi
 800977a:	2201      	movhi	r2, #1
 800977c:	2200      	movls	r2, #0
 800977e:	b2d2      	uxtb	r2, r2
 8009780:	2a00      	cmp	r2, #0
 8009782:	d10e      	bne.n	80097a2 <VL53L0X_SetDeviceMode+0x3e>
 8009784:	2201      	movs	r2, #1
 8009786:	409a      	lsls	r2, r3
 8009788:	4b0b      	ldr	r3, [pc, #44]	; (80097b8 <VL53L0X_SetDeviceMode+0x54>)
 800978a:	4013      	ands	r3, r2
 800978c:	2b00      	cmp	r3, #0
 800978e:	bf14      	ite	ne
 8009790:	2301      	movne	r3, #1
 8009792:	2300      	moveq	r3, #0
 8009794:	b2db      	uxtb	r3, r3
 8009796:	2b00      	cmp	r3, #0
 8009798:	d003      	beq.n	80097a2 <VL53L0X_SetDeviceMode+0x3e>
=======
 80086d4:	78fb      	ldrb	r3, [r7, #3]
 80086d6:	2b15      	cmp	r3, #21
 80086d8:	bf8c      	ite	hi
 80086da:	2201      	movhi	r2, #1
 80086dc:	2200      	movls	r2, #0
 80086de:	b2d2      	uxtb	r2, r2
 80086e0:	2a00      	cmp	r2, #0
 80086e2:	d10e      	bne.n	8008702 <VL53L0X_SetDeviceMode+0x3e>
 80086e4:	2201      	movs	r2, #1
 80086e6:	409a      	lsls	r2, r3
 80086e8:	4b0b      	ldr	r3, [pc, #44]	; (8008718 <VL53L0X_SetDeviceMode+0x54>)
 80086ea:	4013      	ands	r3, r2
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	bf14      	ite	ne
 80086f0:	2301      	movne	r3, #1
 80086f2:	2300      	moveq	r3, #0
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d003      	beq.n	8008702 <VL53L0X_SetDeviceMode+0x3e>
>>>>>>> ModeSelect_v2
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
<<<<<<< HEAD
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	78fa      	ldrb	r2, [r7, #3]
 800979e:	741a      	strb	r2, [r3, #16]
		break;
 80097a0:	e001      	b.n	80097a6 <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80097a2:	23f8      	movs	r3, #248	; 0xf8
 80097a4:	73fb      	strb	r3, [r7, #15]
=======
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	78fa      	ldrb	r2, [r7, #3]
 80086fe:	741a      	strb	r2, [r3, #16]
		break;
 8008700:	e001      	b.n	8008706 <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8008702:	23f8      	movs	r3, #248	; 0xf8
 8008704:	73fb      	strb	r3, [r7, #15]
>>>>>>> ModeSelect_v2
	}

	LOG_FUNCTION_END(Status);
	return Status;
<<<<<<< HEAD
 80097a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3714      	adds	r7, #20
 80097ae:	46bd      	mov	sp, r7
 80097b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b4:	4770      	bx	lr
 80097b6:	bf00      	nop
 80097b8:	0030000b 	.word	0x0030000b

080097bc <VL53L0X_GetDeviceMode>:
=======
 8008706:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800870a:	4618      	mov	r0, r3
 800870c:	3714      	adds	r7, #20
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr
 8008716:	bf00      	nop
 8008718:	0030000b 	.word	0x0030000b

0800871c <VL53L0X_GetDeviceMode>:
>>>>>>> ModeSelect_v2

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
<<<<<<< HEAD
 80097bc:	b480      	push	{r7}
 80097be:	b085      	sub	sp, #20
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80097c6:	2300      	movs	r3, #0
 80097c8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	7c1a      	ldrb	r2, [r3, #16]
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80097d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3714      	adds	r7, #20
 80097da:	46bd      	mov	sp, r7
 80097dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e0:	4770      	bx	lr

080097e2 <VL53L0X_GetFractionEnable>:
=======
 800871c:	b480      	push	{r7}
 800871e:	b085      	sub	sp, #20
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008726:	2300      	movs	r3, #0
 8008728:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	7c1a      	ldrb	r2, [r3, #16]
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8008732:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008736:	4618      	mov	r0, r3
 8008738:	3714      	adds	r7, #20
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr

08008742 <VL53L0X_GetFractionEnable>:
>>>>>>> ModeSelect_v2
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
<<<<<<< HEAD
 80097e2:	b580      	push	{r7, lr}
 80097e4:	b084      	sub	sp, #16
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	6078      	str	r0, [r7, #4]
 80097ea:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80097ec:	2300      	movs	r3, #0
 80097ee:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 80097f0:	683a      	ldr	r2, [r7, #0]
 80097f2:	2109      	movs	r1, #9
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f004 fb6d 	bl	800ded4 <VL53L0X_RdByte>
 80097fa:	4603      	mov	r3, r0
 80097fc:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80097fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d106      	bne.n	8009814 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	781b      	ldrb	r3, [r3, #0]
 800980a:	f003 0301 	and.w	r3, r3, #1
 800980e:	b2da      	uxtb	r2, r3
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8009814:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009818:	4618      	mov	r0, r3
 800981a:	3710      	adds	r7, #16
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}

08009820 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
=======
 8008742:	b580      	push	{r7, lr}
 8008744:	b084      	sub	sp, #16
 8008746:	af00      	add	r7, sp, #0
 8008748:	6078      	str	r0, [r7, #4]
 800874a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800874c:	2300      	movs	r3, #0
 800874e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8008750:	683a      	ldr	r2, [r7, #0]
 8008752:	2109      	movs	r1, #9
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f004 fb6d 	bl	800ce34 <VL53L0X_RdByte>
 800875a:	4603      	mov	r3, r0
 800875c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800875e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d106      	bne.n	8008774 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	f003 0301 	and.w	r3, r3, #1
 800876e:	b2da      	uxtb	r2, r3
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8008774:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008778:	4618      	mov	r0, r3
 800877a:	3710      	adds	r7, #16
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
>>>>>>> ModeSelect_v2
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
<<<<<<< HEAD
 8009820:	b580      	push	{r7, lr}
 8009822:	b084      	sub	sp, #16
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
 8009828:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800982a:	2300      	movs	r3, #0
 800982c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800982e:	6839      	ldr	r1, [r7, #0]
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f003 fa26 	bl	800cc82 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8009836:	4603      	mov	r3, r0
 8009838:	73fb      	strb	r3, [r7, #15]
=======
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800878a:	2300      	movs	r3, #0
 800878c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800878e:	6839      	ldr	r1, [r7, #0]
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f003 fa26 	bl	800bbe2 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8008796:	4603      	mov	r3, r0
 8008798:	73fb      	strb	r3, [r7, #15]
>>>>>>> ModeSelect_v2
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
<<<<<<< HEAD
 800983a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800983e:	4618      	mov	r0, r3
 8009840:	3710      	adds	r7, #16
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}

08009846 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:
=======
 800879a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3710      	adds	r7, #16
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}

080087a6 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:
>>>>>>> ModeSelect_v2

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
<<<<<<< HEAD
 8009846:	b580      	push	{r7, lr}
 8009848:	b084      	sub	sp, #16
 800984a:	af00      	add	r7, sp, #0
 800984c:	6078      	str	r0, [r7, #4]
 800984e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009850:	2300      	movs	r3, #0
 8009852:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8009854:	6839      	ldr	r1, [r7, #0]
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f003 faf3 	bl	800ce42 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 800985c:	4603      	mov	r3, r0
 800985e:	73fb      	strb	r3, [r7, #15]
=======
 80087a6:	b580      	push	{r7, lr}
 80087a8:	b084      	sub	sp, #16
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	6078      	str	r0, [r7, #4]
 80087ae:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80087b0:	2300      	movs	r3, #0
 80087b2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 80087b4:	6839      	ldr	r1, [r7, #0]
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f003 faf3 	bl	800bda2 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 80087bc:	4603      	mov	r3, r0
 80087be:	73fb      	strb	r3, [r7, #15]
>>>>>>> ModeSelect_v2
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
<<<<<<< HEAD
 8009860:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009864:	4618      	mov	r0, r3
 8009866:	3710      	adds	r7, #16
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}

0800986c <VL53L0X_SetVcselPulsePeriod>:
=======
 80087c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3710      	adds	r7, #16
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <VL53L0X_SetVcselPulsePeriod>:
>>>>>>> ModeSelect_v2

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
<<<<<<< HEAD
 800986c:	b580      	push	{r7, lr}
 800986e:	b084      	sub	sp, #16
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	460b      	mov	r3, r1
 8009876:	70fb      	strb	r3, [r7, #3]
 8009878:	4613      	mov	r3, r2
 800987a:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800987c:	2300      	movs	r3, #0
 800987e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8009880:	78ba      	ldrb	r2, [r7, #2]
 8009882:	78fb      	ldrb	r3, [r7, #3]
 8009884:	4619      	mov	r1, r3
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f002 ff3b 	bl	800c702 <VL53L0X_set_vcsel_pulse_period>
 800988c:	4603      	mov	r3, r0
 800988e:	73fb      	strb	r3, [r7, #15]
=======
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	460b      	mov	r3, r1
 80087d6:	70fb      	strb	r3, [r7, #3]
 80087d8:	4613      	mov	r3, r2
 80087da:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80087dc:	2300      	movs	r3, #0
 80087de:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 80087e0:	78ba      	ldrb	r2, [r7, #2]
 80087e2:	78fb      	ldrb	r3, [r7, #3]
 80087e4:	4619      	mov	r1, r3
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f002 ff3b 	bl	800b662 <VL53L0X_set_vcsel_pulse_period>
 80087ec:	4603      	mov	r3, r0
 80087ee:	73fb      	strb	r3, [r7, #15]
>>>>>>> ModeSelect_v2
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
<<<<<<< HEAD
 8009890:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009894:	4618      	mov	r0, r3
 8009896:	3710      	adds	r7, #16
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}

0800989c <VL53L0X_GetVcselPulsePeriod>:
=======
 80087f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3710      	adds	r7, #16
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <VL53L0X_GetVcselPulsePeriod>:
>>>>>>> ModeSelect_v2

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
<<<<<<< HEAD
 800989c:	b580      	push	{r7, lr}
 800989e:	b086      	sub	sp, #24
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	60f8      	str	r0, [r7, #12]
 80098a4:	460b      	mov	r3, r1
 80098a6:	607a      	str	r2, [r7, #4]
 80098a8:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80098aa:	2300      	movs	r3, #0
 80098ac:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80098ae:	7afb      	ldrb	r3, [r7, #11]
 80098b0:	687a      	ldr	r2, [r7, #4]
 80098b2:	4619      	mov	r1, r3
 80098b4:	68f8      	ldr	r0, [r7, #12]
 80098b6:	f003 f9ad 	bl	800cc14 <VL53L0X_get_vcsel_pulse_period>
 80098ba:	4603      	mov	r3, r0
 80098bc:	75fb      	strb	r3, [r7, #23]
=======
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b086      	sub	sp, #24
 8008800:	af00      	add	r7, sp, #0
 8008802:	60f8      	str	r0, [r7, #12]
 8008804:	460b      	mov	r3, r1
 8008806:	607a      	str	r2, [r7, #4]
 8008808:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800880a:	2300      	movs	r3, #0
 800880c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800880e:	7afb      	ldrb	r3, [r7, #11]
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	4619      	mov	r1, r3
 8008814:	68f8      	ldr	r0, [r7, #12]
 8008816:	f003 f9ad 	bl	800bb74 <VL53L0X_get_vcsel_pulse_period>
 800881a:	4603      	mov	r3, r0
 800881c:	75fb      	strb	r3, [r7, #23]
>>>>>>> ModeSelect_v2
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
<<<<<<< HEAD
 80098be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3718      	adds	r7, #24
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}
	...

080098cc <VL53L0X_SetSequenceStepEnable>:
=======
 800881e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008822:	4618      	mov	r0, r3
 8008824:	3718      	adds	r7, #24
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
	...

0800882c <VL53L0X_SetSequenceStepEnable>:
>>>>>>> ModeSelect_v2

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
<<<<<<< HEAD
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b086      	sub	sp, #24
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	460b      	mov	r3, r1
 80098d6:	70fb      	strb	r3, [r7, #3]
 80098d8:	4613      	mov	r3, r2
 80098da:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80098dc:	2300      	movs	r3, #0
 80098de:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80098e0:	2300      	movs	r3, #0
 80098e2:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 80098e4:	2300      	movs	r3, #0
 80098e6:	75bb      	strb	r3, [r7, #22]
=======
 800882c:	b580      	push	{r7, lr}
 800882e:	b086      	sub	sp, #24
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	460b      	mov	r3, r1
 8008836:	70fb      	strb	r3, [r7, #3]
 8008838:	4613      	mov	r3, r2
 800883a:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800883c:	2300      	movs	r3, #0
 800883e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8008840:	2300      	movs	r3, #0
 8008842:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8008844:	2300      	movs	r3, #0
 8008846:	75bb      	strb	r3, [r7, #22]
>>>>>>> ModeSelect_v2
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
<<<<<<< HEAD
 80098e8:	f107 030f 	add.w	r3, r7, #15
 80098ec:	461a      	mov	r2, r3
 80098ee:	2101      	movs	r1, #1
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f004 faef 	bl	800ded4 <VL53L0X_RdByte>
 80098f6:	4603      	mov	r3, r0
 80098f8:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 80098fa:	7bfb      	ldrb	r3, [r7, #15]
 80098fc:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 80098fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d15a      	bne.n	80099bc <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8009906:	78bb      	ldrb	r3, [r7, #2]
 8009908:	2b01      	cmp	r3, #1
 800990a:	d12b      	bne.n	8009964 <VL53L0X_SetSequenceStepEnable+0x98>
=======
 8008848:	f107 030f 	add.w	r3, r7, #15
 800884c:	461a      	mov	r2, r3
 800884e:	2101      	movs	r1, #1
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f004 faef 	bl	800ce34 <VL53L0X_RdByte>
 8008856:	4603      	mov	r3, r0
 8008858:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800885a:	7bfb      	ldrb	r3, [r7, #15]
 800885c:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800885e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d15a      	bne.n	800891c <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8008866:	78bb      	ldrb	r3, [r7, #2]
 8008868:	2b01      	cmp	r3, #1
 800886a:	d12b      	bne.n	80088c4 <VL53L0X_SetSequenceStepEnable+0x98>
>>>>>>> ModeSelect_v2

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
<<<<<<< HEAD
 800990c:	78fb      	ldrb	r3, [r7, #3]
 800990e:	2b04      	cmp	r3, #4
 8009910:	d825      	bhi.n	800995e <VL53L0X_SetSequenceStepEnable+0x92>
 8009912:	a201      	add	r2, pc, #4	; (adr r2, 8009918 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8009914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009918:	0800992d 	.word	0x0800992d
 800991c:	08009937 	.word	0x08009937
 8009920:	08009941 	.word	0x08009941
 8009924:	0800994b 	.word	0x0800994b
 8009928:	08009955 	.word	0x08009955
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 800992c:	7dbb      	ldrb	r3, [r7, #22]
 800992e:	f043 0310 	orr.w	r3, r3, #16
 8009932:	75bb      	strb	r3, [r7, #22]
				break;
 8009934:	e043      	b.n	80099be <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8009936:	7dbb      	ldrb	r3, [r7, #22]
 8009938:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800993c:	75bb      	strb	r3, [r7, #22]
				break;
 800993e:	e03e      	b.n	80099be <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8009940:	7dbb      	ldrb	r3, [r7, #22]
 8009942:	f043 0304 	orr.w	r3, r3, #4
 8009946:	75bb      	strb	r3, [r7, #22]
				break;
 8009948:	e039      	b.n	80099be <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800994a:	7dbb      	ldrb	r3, [r7, #22]
 800994c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009950:	75bb      	strb	r3, [r7, #22]
				break;
 8009952:	e034      	b.n	80099be <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8009954:	7dbb      	ldrb	r3, [r7, #22]
 8009956:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800995a:	75bb      	strb	r3, [r7, #22]
				break;
 800995c:	e02f      	b.n	80099be <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800995e:	23fc      	movs	r3, #252	; 0xfc
 8009960:	75fb      	strb	r3, [r7, #23]
 8009962:	e02c      	b.n	80099be <VL53L0X_SetSequenceStepEnable+0xf2>
=======
 800886c:	78fb      	ldrb	r3, [r7, #3]
 800886e:	2b04      	cmp	r3, #4
 8008870:	d825      	bhi.n	80088be <VL53L0X_SetSequenceStepEnable+0x92>
 8008872:	a201      	add	r2, pc, #4	; (adr r2, 8008878 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8008874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008878:	0800888d 	.word	0x0800888d
 800887c:	08008897 	.word	0x08008897
 8008880:	080088a1 	.word	0x080088a1
 8008884:	080088ab 	.word	0x080088ab
 8008888:	080088b5 	.word	0x080088b5
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 800888c:	7dbb      	ldrb	r3, [r7, #22]
 800888e:	f043 0310 	orr.w	r3, r3, #16
 8008892:	75bb      	strb	r3, [r7, #22]
				break;
 8008894:	e043      	b.n	800891e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8008896:	7dbb      	ldrb	r3, [r7, #22]
 8008898:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800889c:	75bb      	strb	r3, [r7, #22]
				break;
 800889e:	e03e      	b.n	800891e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 80088a0:	7dbb      	ldrb	r3, [r7, #22]
 80088a2:	f043 0304 	orr.w	r3, r3, #4
 80088a6:	75bb      	strb	r3, [r7, #22]
				break;
 80088a8:	e039      	b.n	800891e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 80088aa:	7dbb      	ldrb	r3, [r7, #22]
 80088ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088b0:	75bb      	strb	r3, [r7, #22]
				break;
 80088b2:	e034      	b.n	800891e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 80088b4:	7dbb      	ldrb	r3, [r7, #22]
 80088b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80088ba:	75bb      	strb	r3, [r7, #22]
				break;
 80088bc:	e02f      	b.n	800891e <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80088be:	23fc      	movs	r3, #252	; 0xfc
 80088c0:	75fb      	strb	r3, [r7, #23]
 80088c2:	e02c      	b.n	800891e <VL53L0X_SetSequenceStepEnable+0xf2>
>>>>>>> ModeSelect_v2
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
<<<<<<< HEAD
 8009964:	78fb      	ldrb	r3, [r7, #3]
 8009966:	2b04      	cmp	r3, #4
 8009968:	d825      	bhi.n	80099b6 <VL53L0X_SetSequenceStepEnable+0xea>
 800996a:	a201      	add	r2, pc, #4	; (adr r2, 8009970 <VL53L0X_SetSequenceStepEnable+0xa4>)
 800996c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009970:	08009985 	.word	0x08009985
 8009974:	0800998f 	.word	0x0800998f
 8009978:	08009999 	.word	0x08009999
 800997c:	080099a3 	.word	0x080099a3
 8009980:	080099ad 	.word	0x080099ad
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8009984:	7dbb      	ldrb	r3, [r7, #22]
 8009986:	f023 0310 	bic.w	r3, r3, #16
 800998a:	75bb      	strb	r3, [r7, #22]
				break;
 800998c:	e017      	b.n	80099be <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800998e:	7dbb      	ldrb	r3, [r7, #22]
 8009990:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8009994:	75bb      	strb	r3, [r7, #22]
				break;
 8009996:	e012      	b.n	80099be <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8009998:	7dbb      	ldrb	r3, [r7, #22]
 800999a:	f023 0304 	bic.w	r3, r3, #4
 800999e:	75bb      	strb	r3, [r7, #22]
				break;
 80099a0:	e00d      	b.n	80099be <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 80099a2:	7dbb      	ldrb	r3, [r7, #22]
 80099a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099a8:	75bb      	strb	r3, [r7, #22]
				break;
 80099aa:	e008      	b.n	80099be <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 80099ac:	7dbb      	ldrb	r3, [r7, #22]
 80099ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099b2:	75bb      	strb	r3, [r7, #22]
				break;
 80099b4:	e003      	b.n	80099be <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80099b6:	23fc      	movs	r3, #252	; 0xfc
 80099b8:	75fb      	strb	r3, [r7, #23]
 80099ba:	e000      	b.n	80099be <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 80099bc:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 80099be:	7bfb      	ldrb	r3, [r7, #15]
 80099c0:	7dba      	ldrb	r2, [r7, #22]
 80099c2:	429a      	cmp	r2, r3
 80099c4:	d01e      	beq.n	8009a04 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 80099c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d107      	bne.n	80099de <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 80099ce:	7dbb      	ldrb	r3, [r7, #22]
 80099d0:	461a      	mov	r2, r3
 80099d2:	2101      	movs	r1, #1
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f004 f9fb 	bl	800ddd0 <VL53L0X_WrByte>
 80099da:	4603      	mov	r3, r0
 80099dc:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 80099de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d103      	bne.n	80099ee <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	7dba      	ldrb	r2, [r7, #22]
 80099ea:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
=======
 80088c4:	78fb      	ldrb	r3, [r7, #3]
 80088c6:	2b04      	cmp	r3, #4
 80088c8:	d825      	bhi.n	8008916 <VL53L0X_SetSequenceStepEnable+0xea>
 80088ca:	a201      	add	r2, pc, #4	; (adr r2, 80088d0 <VL53L0X_SetSequenceStepEnable+0xa4>)
 80088cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088d0:	080088e5 	.word	0x080088e5
 80088d4:	080088ef 	.word	0x080088ef
 80088d8:	080088f9 	.word	0x080088f9
 80088dc:	08008903 	.word	0x08008903
 80088e0:	0800890d 	.word	0x0800890d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 80088e4:	7dbb      	ldrb	r3, [r7, #22]
 80088e6:	f023 0310 	bic.w	r3, r3, #16
 80088ea:	75bb      	strb	r3, [r7, #22]
				break;
 80088ec:	e017      	b.n	800891e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 80088ee:	7dbb      	ldrb	r3, [r7, #22]
 80088f0:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80088f4:	75bb      	strb	r3, [r7, #22]
				break;
 80088f6:	e012      	b.n	800891e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 80088f8:	7dbb      	ldrb	r3, [r7, #22]
 80088fa:	f023 0304 	bic.w	r3, r3, #4
 80088fe:	75bb      	strb	r3, [r7, #22]
				break;
 8008900:	e00d      	b.n	800891e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8008902:	7dbb      	ldrb	r3, [r7, #22]
 8008904:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008908:	75bb      	strb	r3, [r7, #22]
				break;
 800890a:	e008      	b.n	800891e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 800890c:	7dbb      	ldrb	r3, [r7, #22]
 800890e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008912:	75bb      	strb	r3, [r7, #22]
				break;
 8008914:	e003      	b.n	800891e <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008916:	23fc      	movs	r3, #252	; 0xfc
 8008918:	75fb      	strb	r3, [r7, #23]
 800891a:	e000      	b.n	800891e <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 800891c:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 800891e:	7bfb      	ldrb	r3, [r7, #15]
 8008920:	7dba      	ldrb	r2, [r7, #22]
 8008922:	429a      	cmp	r2, r3
 8008924:	d01e      	beq.n	8008964 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8008926:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d107      	bne.n	800893e <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 800892e:	7dbb      	ldrb	r3, [r7, #22]
 8008930:	461a      	mov	r2, r3
 8008932:	2101      	movs	r1, #1
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f004 f9fb 	bl	800cd30 <VL53L0X_WrByte>
 800893a:	4603      	mov	r3, r0
 800893c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800893e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d103      	bne.n	800894e <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	7dba      	ldrb	r2, [r7, #22]
 800894a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
>>>>>>> ModeSelect_v2


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 80099ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d106      	bne.n	8009a04 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	695b      	ldr	r3, [r3, #20]
 80099fa:	613b      	str	r3, [r7, #16]
=======
 800894e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d106      	bne.n	8008964 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	695b      	ldr	r3, [r3, #20]
 800895a:	613b      	str	r3, [r7, #16]
>>>>>>> ModeSelect_v2
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
<<<<<<< HEAD
 80099fc:	6939      	ldr	r1, [r7, #16]
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f7ff ff0e 	bl	8009820 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
=======
 800895c:	6939      	ldr	r1, [r7, #16]
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f7ff ff0e 	bl	8008780 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
>>>>>>> ModeSelect_v2
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
<<<<<<< HEAD
 8009a04:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3718      	adds	r7, #24
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}

08009a10 <sequence_step_enabled>:
=======
 8008964:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008968:	4618      	mov	r0, r3
 800896a:	3718      	adds	r7, #24
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <sequence_step_enabled>:
>>>>>>> ModeSelect_v2

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
<<<<<<< HEAD
 8009a10:	b480      	push	{r7}
 8009a12:	b087      	sub	sp, #28
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	60f8      	str	r0, [r7, #12]
 8009a18:	607b      	str	r3, [r7, #4]
 8009a1a:	460b      	mov	r3, r1
 8009a1c:	72fb      	strb	r3, [r7, #11]
 8009a1e:	4613      	mov	r3, r2
 8009a20:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009a22:	2300      	movs	r3, #0
 8009a24:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8009a2c:	7afb      	ldrb	r3, [r7, #11]
 8009a2e:	2b04      	cmp	r3, #4
 8009a30:	d836      	bhi.n	8009aa0 <sequence_step_enabled+0x90>
 8009a32:	a201      	add	r2, pc, #4	; (adr r2, 8009a38 <sequence_step_enabled+0x28>)
 8009a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a38:	08009a4d 	.word	0x08009a4d
 8009a3c:	08009a5f 	.word	0x08009a5f
 8009a40:	08009a71 	.word	0x08009a71
 8009a44:	08009a83 	.word	0x08009a83
 8009a48:	08009a95 	.word	0x08009a95
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8009a4c:	7abb      	ldrb	r3, [r7, #10]
 8009a4e:	111b      	asrs	r3, r3, #4
 8009a50:	b2db      	uxtb	r3, r3
 8009a52:	f003 0301 	and.w	r3, r3, #1
 8009a56:	b2da      	uxtb	r2, r3
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	701a      	strb	r2, [r3, #0]
		break;
 8009a5c:	e022      	b.n	8009aa4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8009a5e:	7abb      	ldrb	r3, [r7, #10]
 8009a60:	10db      	asrs	r3, r3, #3
 8009a62:	b2db      	uxtb	r3, r3
 8009a64:	f003 0301 	and.w	r3, r3, #1
 8009a68:	b2da      	uxtb	r2, r3
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	701a      	strb	r2, [r3, #0]
		break;
 8009a6e:	e019      	b.n	8009aa4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8009a70:	7abb      	ldrb	r3, [r7, #10]
 8009a72:	109b      	asrs	r3, r3, #2
 8009a74:	b2db      	uxtb	r3, r3
 8009a76:	f003 0301 	and.w	r3, r3, #1
 8009a7a:	b2da      	uxtb	r2, r3
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	701a      	strb	r2, [r3, #0]
		break;
 8009a80:	e010      	b.n	8009aa4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8009a82:	7abb      	ldrb	r3, [r7, #10]
 8009a84:	119b      	asrs	r3, r3, #6
 8009a86:	b2db      	uxtb	r3, r3
 8009a88:	f003 0301 	and.w	r3, r3, #1
 8009a8c:	b2da      	uxtb	r2, r3
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	701a      	strb	r2, [r3, #0]
		break;
 8009a92:	e007      	b.n	8009aa4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8009a94:	7abb      	ldrb	r3, [r7, #10]
 8009a96:	09db      	lsrs	r3, r3, #7
 8009a98:	b2da      	uxtb	r2, r3
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	701a      	strb	r2, [r3, #0]
		break;
 8009a9e:	e001      	b.n	8009aa4 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009aa0:	23fc      	movs	r3, #252	; 0xfc
 8009aa2:	75fb      	strb	r3, [r7, #23]
=======
 8008970:	b480      	push	{r7}
 8008972:	b087      	sub	sp, #28
 8008974:	af00      	add	r7, sp, #0
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	607b      	str	r3, [r7, #4]
 800897a:	460b      	mov	r3, r1
 800897c:	72fb      	strb	r3, [r7, #11]
 800897e:	4613      	mov	r3, r2
 8008980:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008982:	2300      	movs	r3, #0
 8008984:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2200      	movs	r2, #0
 800898a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 800898c:	7afb      	ldrb	r3, [r7, #11]
 800898e:	2b04      	cmp	r3, #4
 8008990:	d836      	bhi.n	8008a00 <sequence_step_enabled+0x90>
 8008992:	a201      	add	r2, pc, #4	; (adr r2, 8008998 <sequence_step_enabled+0x28>)
 8008994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008998:	080089ad 	.word	0x080089ad
 800899c:	080089bf 	.word	0x080089bf
 80089a0:	080089d1 	.word	0x080089d1
 80089a4:	080089e3 	.word	0x080089e3
 80089a8:	080089f5 	.word	0x080089f5
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 80089ac:	7abb      	ldrb	r3, [r7, #10]
 80089ae:	111b      	asrs	r3, r3, #4
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	f003 0301 	and.w	r3, r3, #1
 80089b6:	b2da      	uxtb	r2, r3
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	701a      	strb	r2, [r3, #0]
		break;
 80089bc:	e022      	b.n	8008a04 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 80089be:	7abb      	ldrb	r3, [r7, #10]
 80089c0:	10db      	asrs	r3, r3, #3
 80089c2:	b2db      	uxtb	r3, r3
 80089c4:	f003 0301 	and.w	r3, r3, #1
 80089c8:	b2da      	uxtb	r2, r3
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	701a      	strb	r2, [r3, #0]
		break;
 80089ce:	e019      	b.n	8008a04 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 80089d0:	7abb      	ldrb	r3, [r7, #10]
 80089d2:	109b      	asrs	r3, r3, #2
 80089d4:	b2db      	uxtb	r3, r3
 80089d6:	f003 0301 	and.w	r3, r3, #1
 80089da:	b2da      	uxtb	r2, r3
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	701a      	strb	r2, [r3, #0]
		break;
 80089e0:	e010      	b.n	8008a04 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 80089e2:	7abb      	ldrb	r3, [r7, #10]
 80089e4:	119b      	asrs	r3, r3, #6
 80089e6:	b2db      	uxtb	r3, r3
 80089e8:	f003 0301 	and.w	r3, r3, #1
 80089ec:	b2da      	uxtb	r2, r3
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	701a      	strb	r2, [r3, #0]
		break;
 80089f2:	e007      	b.n	8008a04 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80089f4:	7abb      	ldrb	r3, [r7, #10]
 80089f6:	09db      	lsrs	r3, r3, #7
 80089f8:	b2da      	uxtb	r2, r3
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	701a      	strb	r2, [r3, #0]
		break;
 80089fe:	e001      	b.n	8008a04 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008a00:	23fc      	movs	r3, #252	; 0xfc
 8008a02:	75fb      	strb	r3, [r7, #23]
>>>>>>> ModeSelect_v2
	}

	LOG_FUNCTION_END(Status);
	return Status;
<<<<<<< HEAD
 8009aa4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	371c      	adds	r7, #28
 8009aac:	46bd      	mov	sp, r7
 8009aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab2:	4770      	bx	lr

08009ab4 <VL53L0X_GetSequenceStepEnables>:
=======
 8008a04:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	371c      	adds	r7, #28
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr

08008a14 <VL53L0X_GetSequenceStepEnables>:
>>>>>>> ModeSelect_v2
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
<<<<<<< HEAD
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b084      	sub	sp, #16
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009ac6:	f107 030e 	add.w	r3, r7, #14
 8009aca:	461a      	mov	r2, r3
 8009acc:	2101      	movs	r1, #1
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f004 fa00 	bl	800ded4 <VL53L0X_RdByte>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8009ad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d107      	bne.n	8009af0 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8009ae0:	7bba      	ldrb	r2, [r7, #14]
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	2100      	movs	r1, #0
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f7ff ff92 	bl	8009a10 <sequence_step_enabled>
 8009aec:	4603      	mov	r3, r0
 8009aee:	73fb      	strb	r3, [r7, #15]
=======
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b084      	sub	sp, #16
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8008a22:	2300      	movs	r3, #0
 8008a24:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008a26:	f107 030e 	add.w	r3, r7, #14
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	2101      	movs	r1, #1
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f004 fa00 	bl	800ce34 <VL53L0X_RdByte>
 8008a34:	4603      	mov	r3, r0
 8008a36:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8008a38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d107      	bne.n	8008a50 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8008a40:	7bba      	ldrb	r2, [r7, #14]
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	2100      	movs	r1, #0
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f7ff ff92 	bl	8008970 <sequence_step_enabled>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	73fb      	strb	r3, [r7, #15]
>>>>>>> ModeSelect_v2
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 8009af0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d108      	bne.n	8009b0a <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8009af8:	7bba      	ldrb	r2, [r7, #14]
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	3302      	adds	r3, #2
 8009afe:	2101      	movs	r1, #1
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f7ff ff85 	bl	8009a10 <sequence_step_enabled>
 8009b06:	4603      	mov	r3, r0
 8009b08:	73fb      	strb	r3, [r7, #15]
=======
 8008a50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d108      	bne.n	8008a6a <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8008a58:	7bba      	ldrb	r2, [r7, #14]
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	3302      	adds	r3, #2
 8008a5e:	2101      	movs	r1, #1
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f7ff ff85 	bl	8008970 <sequence_step_enabled>
 8008a66:	4603      	mov	r3, r0
 8008a68:	73fb      	strb	r3, [r7, #15]
>>>>>>> ModeSelect_v2
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 8009b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d108      	bne.n	8009b24 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8009b12:	7bba      	ldrb	r2, [r7, #14]
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	3301      	adds	r3, #1
 8009b18:	2102      	movs	r1, #2
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f7ff ff78 	bl	8009a10 <sequence_step_enabled>
 8009b20:	4603      	mov	r3, r0
 8009b22:	73fb      	strb	r3, [r7, #15]
=======
 8008a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d108      	bne.n	8008a84 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8008a72:	7bba      	ldrb	r2, [r7, #14]
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	3301      	adds	r3, #1
 8008a78:	2102      	movs	r1, #2
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f7ff ff78 	bl	8008970 <sequence_step_enabled>
 8008a80:	4603      	mov	r3, r0
 8008a82:	73fb      	strb	r3, [r7, #15]
>>>>>>> ModeSelect_v2
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 8009b24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d108      	bne.n	8009b3e <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8009b2c:	7bba      	ldrb	r2, [r7, #14]
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	3303      	adds	r3, #3
 8009b32:	2103      	movs	r1, #3
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f7ff ff6b 	bl	8009a10 <sequence_step_enabled>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	73fb      	strb	r3, [r7, #15]
=======
 8008a84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d108      	bne.n	8008a9e <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8008a8c:	7bba      	ldrb	r2, [r7, #14]
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	3303      	adds	r3, #3
 8008a92:	2103      	movs	r1, #3
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f7ff ff6b 	bl	8008970 <sequence_step_enabled>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	73fb      	strb	r3, [r7, #15]
>>>>>>> ModeSelect_v2
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 8009b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d108      	bne.n	8009b58 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8009b46:	7bba      	ldrb	r2, [r7, #14]
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	3304      	adds	r3, #4
 8009b4c:	2104      	movs	r1, #4
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f7ff ff5e 	bl	8009a10 <sequence_step_enabled>
 8009b54:	4603      	mov	r3, r0
 8009b56:	73fb      	strb	r3, [r7, #15]
=======
 8008a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d108      	bne.n	8008ab8 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8008aa6:	7bba      	ldrb	r2, [r7, #14]
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	3304      	adds	r3, #4
 8008aac:	2104      	movs	r1, #4
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f7ff ff5e 	bl	8008970 <sequence_step_enabled>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	73fb      	strb	r3, [r7, #15]
>>>>>>> ModeSelect_v2
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
<<<<<<< HEAD
 8009b58:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3710      	adds	r7, #16
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}

08009b64 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
=======
 8008ab8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3710      	adds	r7, #16
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
>>>>>>> ModeSelect_v2
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
<<<<<<< HEAD
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b084      	sub	sp, #16
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	73fb      	strb	r3, [r7, #15]
=======
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	73fb      	strb	r3, [r7, #15]
>>>>>>> ModeSelect_v2
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
<<<<<<< HEAD
 8009b72:	f107 030c 	add.w	r3, r7, #12
 8009b76:	461a      	mov	r2, r3
 8009b78:	21f8      	movs	r1, #248	; 0xf8
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f004 f9d4 	bl	800df28 <VL53L0X_RdWord>
 8009b80:	4603      	mov	r3, r0
 8009b82:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8009b84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d108      	bne.n	8009b9e <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8009b8c:	f107 0308 	add.w	r3, r7, #8
 8009b90:	461a      	mov	r2, r3
 8009b92:	2104      	movs	r1, #4
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f004 f9ff 	bl	800df98 <VL53L0X_RdDWord>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	73fb      	strb	r3, [r7, #15]
=======
 8008ad2:	f107 030c 	add.w	r3, r7, #12
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	21f8      	movs	r1, #248	; 0xf8
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f004 f9d4 	bl	800ce88 <VL53L0X_RdWord>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8008ae4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d108      	bne.n	8008afe <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8008aec:	f107 0308 	add.w	r3, r7, #8
 8008af0:	461a      	mov	r2, r3
 8008af2:	2104      	movs	r1, #4
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f004 f9ff 	bl	800cef8 <VL53L0X_RdDWord>
 8008afa:	4603      	mov	r3, r0
 8008afc:	73fb      	strb	r3, [r7, #15]
>>>>>>> ModeSelect_v2
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 8009b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d10c      	bne.n	8009bc0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8009ba6:	89bb      	ldrh	r3, [r7, #12]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d005      	beq.n	8009bb8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	89ba      	ldrh	r2, [r7, #12]
 8009bb0:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	681a      	ldr	r2, [r3, #0]
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	619a      	str	r2, [r3, #24]
=======
 8008afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d10c      	bne.n	8008b20 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8008b06:	89bb      	ldrh	r3, [r7, #12]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d005      	beq.n	8008b18 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	89ba      	ldrh	r2, [r7, #12]
 8008b10:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	619a      	str	r2, [r3, #24]
>>>>>>> ModeSelect_v2
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
<<<<<<< HEAD
 8009bc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3710      	adds	r7, #16
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}

08009bcc <VL53L0X_GetXTalkCompensationEnable>:
=======
 8008b20:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3710      	adds	r7, #16
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <VL53L0X_GetXTalkCompensationEnable>:
>>>>>>> ModeSelect_v2
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
<<<<<<< HEAD
 8009bcc:	b480      	push	{r7}
 8009bce:	b085      	sub	sp, #20
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
 8009bd4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	73fb      	strb	r3, [r7, #15]
=======
 8008b2c:	b480      	push	{r7}
 8008b2e:	b085      	sub	sp, #20
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008b36:	2300      	movs	r3, #0
 8008b38:	73fb      	strb	r3, [r7, #15]
>>>>>>> ModeSelect_v2
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
<<<<<<< HEAD
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	7f1b      	ldrb	r3, [r3, #28]
 8009bde:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	7bba      	ldrb	r2, [r7, #14]
 8009be4:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8009be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3714      	adds	r7, #20
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf4:	4770      	bx	lr

08009bf6 <VL53L0X_GetXTalkCompensationRateMegaCps>:
=======
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	7f1b      	ldrb	r3, [r3, #28]
 8008b3e:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	7bba      	ldrb	r2, [r7, #14]
 8008b44:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8008b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3714      	adds	r7, #20
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr

08008b56 <VL53L0X_GetXTalkCompensationRateMegaCps>:
>>>>>>> ModeSelect_v2
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
<<<<<<< HEAD
 8009bf6:	b580      	push	{r7, lr}
 8009bf8:	b086      	sub	sp, #24
 8009bfa:	af00      	add	r7, sp, #0
 8009bfc:	6078      	str	r0, [r7, #4]
 8009bfe:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009c00:	2300      	movs	r3, #0
 8009c02:	75fb      	strb	r3, [r7, #23]
=======
 8008b56:	b580      	push	{r7, lr}
 8008b58:	b086      	sub	sp, #24
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
 8008b5e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008b60:	2300      	movs	r3, #0
 8008b62:	75fb      	strb	r3, [r7, #23]
>>>>>>> ModeSelect_v2
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
<<<<<<< HEAD
 8009c04:	f107 030e 	add.w	r3, r7, #14
 8009c08:	461a      	mov	r2, r3
 8009c0a:	2120      	movs	r1, #32
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f004 f98b 	bl	800df28 <VL53L0X_RdWord>
 8009c12:	4603      	mov	r3, r0
 8009c14:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8009c16:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d118      	bne.n	8009c50 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8009c1e:	89fb      	ldrh	r3, [r7, #14]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d109      	bne.n	8009c38 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6a1b      	ldr	r3, [r3, #32]
 8009c28:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	693a      	ldr	r2, [r7, #16]
 8009c2e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2200      	movs	r2, #0
 8009c34:	771a      	strb	r2, [r3, #28]
 8009c36:	e00b      	b.n	8009c50 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8009c38:	89fb      	ldrh	r3, [r7, #14]
 8009c3a:	00db      	lsls	r3, r3, #3
 8009c3c:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	693a      	ldr	r2, [r7, #16]
 8009c42:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	693a      	ldr	r2, [r7, #16]
 8009c48:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2201      	movs	r2, #1
 8009c4e:	771a      	strb	r2, [r3, #28]
=======
 8008b64:	f107 030e 	add.w	r3, r7, #14
 8008b68:	461a      	mov	r2, r3
 8008b6a:	2120      	movs	r1, #32
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f004 f98b 	bl	800ce88 <VL53L0X_RdWord>
 8008b72:	4603      	mov	r3, r0
 8008b74:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8008b76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d118      	bne.n	8008bb0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8008b7e:	89fb      	ldrh	r3, [r7, #14]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d109      	bne.n	8008b98 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6a1b      	ldr	r3, [r3, #32]
 8008b88:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	693a      	ldr	r2, [r7, #16]
 8008b8e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2200      	movs	r2, #0
 8008b94:	771a      	strb	r2, [r3, #28]
 8008b96:	e00b      	b.n	8008bb0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8008b98:	89fb      	ldrh	r3, [r7, #14]
 8008b9a:	00db      	lsls	r3, r3, #3
 8008b9c:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	693a      	ldr	r2, [r7, #16]
 8008ba2:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	693a      	ldr	r2, [r7, #16]
 8008ba8:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2201      	movs	r2, #1
 8008bae:	771a      	strb	r2, [r3, #28]
>>>>>>> ModeSelect_v2
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
<<<<<<< HEAD
 8009c50:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	3718      	adds	r7, #24
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}

08009c5c <VL53L0X_SetLimitCheckEnable>:
=======
 8008bb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3718      	adds	r7, #24
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <VL53L0X_SetLimitCheckEnable>:
>>>>>>> ModeSelect_v2
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
<<<<<<< HEAD
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b086      	sub	sp, #24
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	460b      	mov	r3, r1
 8009c66:	807b      	strh	r3, [r7, #2]
 8009c68:	4613      	mov	r3, r2
 8009c6a:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8009c70:	2300      	movs	r3, #0
 8009c72:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8009c74:	2300      	movs	r3, #0
 8009c76:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	73bb      	strb	r3, [r7, #14]
=======
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b086      	sub	sp, #24
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	807b      	strh	r3, [r7, #2]
 8008bc8:	4613      	mov	r3, r2
 8008bca:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	73bb      	strb	r3, [r7, #14]
>>>>>>> ModeSelect_v2
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
<<<<<<< HEAD
 8009c7c:	887b      	ldrh	r3, [r7, #2]
 8009c7e:	2b05      	cmp	r3, #5
 8009c80:	d902      	bls.n	8009c88 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009c82:	23fc      	movs	r3, #252	; 0xfc
 8009c84:	75fb      	strb	r3, [r7, #23]
 8009c86:	e05b      	b.n	8009d40 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8009c88:	787b      	ldrb	r3, [r7, #1]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d106      	bne.n	8009c9c <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8009c92:	2300      	movs	r3, #0
 8009c94:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8009c96:	2301      	movs	r3, #1
 8009c98:	73bb      	strb	r3, [r7, #14]
 8009c9a:	e00a      	b.n	8009cb2 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009c9c:	887b      	ldrh	r3, [r7, #2]
 8009c9e:	687a      	ldr	r2, [r7, #4]
 8009ca0:	330c      	adds	r3, #12
 8009ca2:	009b      	lsls	r3, r3, #2
 8009ca4:	4413      	add	r3, r2
 8009ca6:	685b      	ldr	r3, [r3, #4]
 8009ca8:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8009caa:	2300      	movs	r3, #0
 8009cac:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8009cae:	2301      	movs	r3, #1
 8009cb0:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8009cb2:	887b      	ldrh	r3, [r7, #2]
 8009cb4:	2b05      	cmp	r3, #5
 8009cb6:	d841      	bhi.n	8009d3c <VL53L0X_SetLimitCheckEnable+0xe0>
 8009cb8:	a201      	add	r2, pc, #4	; (adr r2, 8009cc0 <VL53L0X_SetLimitCheckEnable+0x64>)
 8009cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cbe:	bf00      	nop
 8009cc0:	08009cd9 	.word	0x08009cd9
 8009cc4:	08009ce3 	.word	0x08009ce3
 8009cc8:	08009cf9 	.word	0x08009cf9
 8009ccc:	08009d03 	.word	0x08009d03
 8009cd0:	08009d0d 	.word	0x08009d0d
 8009cd4:	08009d25 	.word	0x08009d25
=======
 8008bdc:	887b      	ldrh	r3, [r7, #2]
 8008bde:	2b05      	cmp	r3, #5
 8008be0:	d902      	bls.n	8008be8 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008be2:	23fc      	movs	r3, #252	; 0xfc
 8008be4:	75fb      	strb	r3, [r7, #23]
 8008be6:	e05b      	b.n	8008ca0 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8008be8:	787b      	ldrb	r3, [r7, #1]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d106      	bne.n	8008bfc <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	73bb      	strb	r3, [r7, #14]
 8008bfa:	e00a      	b.n	8008c12 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008bfc:	887b      	ldrh	r3, [r7, #2]
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	330c      	adds	r3, #12
 8008c02:	009b      	lsls	r3, r3, #2
 8008c04:	4413      	add	r3, r2
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8008c12:	887b      	ldrh	r3, [r7, #2]
 8008c14:	2b05      	cmp	r3, #5
 8008c16:	d841      	bhi.n	8008c9c <VL53L0X_SetLimitCheckEnable+0xe0>
 8008c18:	a201      	add	r2, pc, #4	; (adr r2, 8008c20 <VL53L0X_SetLimitCheckEnable+0x64>)
 8008c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c1e:	bf00      	nop
 8008c20:	08008c39 	.word	0x08008c39
 8008c24:	08008c43 	.word	0x08008c43
 8008c28:	08008c59 	.word	0x08008c59
 8008c2c:	08008c63 	.word	0x08008c63
 8008c30:	08008c6d 	.word	0x08008c6d
 8008c34:	08008c85 	.word	0x08008c85
>>>>>>> ModeSelect_v2

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
<<<<<<< HEAD
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	7bfa      	ldrb	r2, [r7, #15]
 8009cdc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
=======
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	7bfa      	ldrb	r2, [r7, #15]
 8008c3c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
>>>>>>> ModeSelect_v2
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
<<<<<<< HEAD
 8009ce0:	e02e      	b.n	8009d40 <VL53L0X_SetLimitCheckEnable+0xe4>
=======
 8008c40:	e02e      	b.n	8008ca0 <VL53L0X_SetLimitCheckEnable+0xe4>
>>>>>>> ModeSelect_v2

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
<<<<<<< HEAD
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8009ce6:	b29b      	uxth	r3, r3
 8009ce8:	461a      	mov	r2, r3
 8009cea:	2144      	movs	r1, #68	; 0x44
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f004 f893 	bl	800de18 <VL53L0X_WrWord>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	75fb      	strb	r3, [r7, #23]

			break;
 8009cf6:	e023      	b.n	8009d40 <VL53L0X_SetLimitCheckEnable+0xe4>
=======
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	461a      	mov	r2, r3
 8008c4a:	2144      	movs	r1, #68	; 0x44
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f004 f893 	bl	800cd78 <VL53L0X_WrWord>
 8008c52:	4603      	mov	r3, r0
 8008c54:	75fb      	strb	r3, [r7, #23]

			break;
 8008c56:	e023      	b.n	8008ca0 <VL53L0X_SetLimitCheckEnable+0xe4>
>>>>>>> ModeSelect_v2

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
<<<<<<< HEAD
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	7bfa      	ldrb	r2, [r7, #15]
 8009cfc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
=======
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	7bfa      	ldrb	r2, [r7, #15]
 8008c5c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
>>>>>>> ModeSelect_v2
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
<<<<<<< HEAD
 8009d00:	e01e      	b.n	8009d40 <VL53L0X_SetLimitCheckEnable+0xe4>
=======
 8008c60:	e01e      	b.n	8008ca0 <VL53L0X_SetLimitCheckEnable+0xe4>
>>>>>>> ModeSelect_v2

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
<<<<<<< HEAD
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	7bfa      	ldrb	r2, [r7, #15]
 8009d06:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
=======
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	7bfa      	ldrb	r2, [r7, #15]
 8008c66:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
>>>>>>> ModeSelect_v2
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
<<<<<<< HEAD
 8009d0a:	e019      	b.n	8009d40 <VL53L0X_SetLimitCheckEnable+0xe4>
=======
 8008c6a:	e019      	b.n	8008ca0 <VL53L0X_SetLimitCheckEnable+0xe4>
>>>>>>> ModeSelect_v2

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
<<<<<<< HEAD
 8009d0c:	7bbb      	ldrb	r3, [r7, #14]
 8009d0e:	005b      	lsls	r3, r3, #1
 8009d10:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8009d12:	7b7b      	ldrb	r3, [r7, #13]
 8009d14:	22fe      	movs	r2, #254	; 0xfe
 8009d16:	2160      	movs	r1, #96	; 0x60
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f004 f8a7 	bl	800de6c <VL53L0X_UpdateByte>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	75fb      	strb	r3, [r7, #23]
=======
 8008c6c:	7bbb      	ldrb	r3, [r7, #14]
 8008c6e:	005b      	lsls	r3, r3, #1
 8008c70:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8008c72:	7b7b      	ldrb	r3, [r7, #13]
 8008c74:	22fe      	movs	r2, #254	; 0xfe
 8008c76:	2160      	movs	r1, #96	; 0x60
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f004 f8a7 	bl	800cdcc <VL53L0X_UpdateByte>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	75fb      	strb	r3, [r7, #23]
>>>>>>> ModeSelect_v2
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
<<<<<<< HEAD
 8009d22:	e00d      	b.n	8009d40 <VL53L0X_SetLimitCheckEnable+0xe4>
=======
 8008c82:	e00d      	b.n	8008ca0 <VL53L0X_SetLimitCheckEnable+0xe4>
>>>>>>> ModeSelect_v2

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
<<<<<<< HEAD
 8009d24:	7bbb      	ldrb	r3, [r7, #14]
 8009d26:	011b      	lsls	r3, r3, #4
 8009d28:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8009d2a:	7b7b      	ldrb	r3, [r7, #13]
 8009d2c:	22ef      	movs	r2, #239	; 0xef
 8009d2e:	2160      	movs	r1, #96	; 0x60
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f004 f89b 	bl	800de6c <VL53L0X_UpdateByte>
 8009d36:	4603      	mov	r3, r0
 8009d38:	75fb      	strb	r3, [r7, #23]
=======
 8008c84:	7bbb      	ldrb	r3, [r7, #14]
 8008c86:	011b      	lsls	r3, r3, #4
 8008c88:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8008c8a:	7b7b      	ldrb	r3, [r7, #13]
 8008c8c:	22ef      	movs	r2, #239	; 0xef
 8008c8e:	2160      	movs	r1, #96	; 0x60
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f004 f89b 	bl	800cdcc <VL53L0X_UpdateByte>
 8008c96:	4603      	mov	r3, r0
 8008c98:	75fb      	strb	r3, [r7, #23]
>>>>>>> ModeSelect_v2
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
<<<<<<< HEAD
 8009d3a:	e001      	b.n	8009d40 <VL53L0X_SetLimitCheckEnable+0xe4>
=======
 8008c9a:	e001      	b.n	8008ca0 <VL53L0X_SetLimitCheckEnable+0xe4>
>>>>>>> ModeSelect_v2


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
<<<<<<< HEAD
 8009d3c:	23fc      	movs	r3, #252	; 0xfc
 8009d3e:	75fb      	strb	r3, [r7, #23]
=======
 8008c9c:	23fc      	movs	r3, #252	; 0xfc
 8008c9e:	75fb      	strb	r3, [r7, #23]
>>>>>>> ModeSelect_v2

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 8009d40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d10f      	bne.n	8009d68 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8009d48:	787b      	ldrb	r3, [r7, #1]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d106      	bne.n	8009d5c <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009d4e:	887b      	ldrh	r3, [r7, #2]
 8009d50:	687a      	ldr	r2, [r7, #4]
 8009d52:	4413      	add	r3, r2
 8009d54:	2200      	movs	r2, #0
 8009d56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8009d5a:	e005      	b.n	8009d68 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009d5c:	887b      	ldrh	r3, [r7, #2]
 8009d5e:	687a      	ldr	r2, [r7, #4]
 8009d60:	4413      	add	r3, r2
 8009d62:	2201      	movs	r2, #1
 8009d64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
=======
 8008ca0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d10f      	bne.n	8008cc8 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8008ca8:	787b      	ldrb	r3, [r7, #1]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d106      	bne.n	8008cbc <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008cae:	887b      	ldrh	r3, [r7, #2]
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	4413      	add	r3, r2
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8008cba:	e005      	b.n	8008cc8 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008cbc:	887b      	ldrh	r3, [r7, #2]
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	4413      	add	r3, r2
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
>>>>>>> ModeSelect_v2
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
<<<<<<< HEAD
 8009d68:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	3718      	adds	r7, #24
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}

08009d74 <VL53L0X_GetLimitCheckEnable>:
=======
 8008cc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3718      	adds	r7, #24
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <VL53L0X_GetLimitCheckEnable>:
>>>>>>> ModeSelect_v2

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
<<<<<<< HEAD
 8009d74:	b480      	push	{r7}
 8009d76:	b087      	sub	sp, #28
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	60f8      	str	r0, [r7, #12]
 8009d7c:	460b      	mov	r3, r1
 8009d7e:	607a      	str	r2, [r7, #4]
 8009d80:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009d82:	2300      	movs	r3, #0
 8009d84:	75fb      	strb	r3, [r7, #23]
=======
 8008cd4:	b480      	push	{r7}
 8008cd6:	b087      	sub	sp, #28
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	60f8      	str	r0, [r7, #12]
 8008cdc:	460b      	mov	r3, r1
 8008cde:	607a      	str	r2, [r7, #4]
 8008ce0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	75fb      	strb	r3, [r7, #23]
>>>>>>> ModeSelect_v2
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
<<<<<<< HEAD
 8009d86:	897b      	ldrh	r3, [r7, #10]
 8009d88:	2b05      	cmp	r3, #5
 8009d8a:	d905      	bls.n	8009d98 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009d8c:	23fc      	movs	r3, #252	; 0xfc
 8009d8e:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2200      	movs	r2, #0
 8009d94:	701a      	strb	r2, [r3, #0]
 8009d96:	e008      	b.n	8009daa <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009d98:	897b      	ldrh	r3, [r7, #10]
 8009d9a:	68fa      	ldr	r2, [r7, #12]
 8009d9c:	4413      	add	r3, r2
 8009d9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009da2:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	7dba      	ldrb	r2, [r7, #22]
 8009da8:	701a      	strb	r2, [r3, #0]
=======
 8008ce6:	897b      	ldrh	r3, [r7, #10]
 8008ce8:	2b05      	cmp	r3, #5
 8008cea:	d905      	bls.n	8008cf8 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008cec:	23fc      	movs	r3, #252	; 0xfc
 8008cee:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	701a      	strb	r2, [r3, #0]
 8008cf6:	e008      	b.n	8008d0a <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008cf8:	897b      	ldrh	r3, [r7, #10]
 8008cfa:	68fa      	ldr	r2, [r7, #12]
 8008cfc:	4413      	add	r3, r2
 8008cfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d02:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	7dba      	ldrb	r2, [r7, #22]
 8008d08:	701a      	strb	r2, [r3, #0]
>>>>>>> ModeSelect_v2
	}

	LOG_FUNCTION_END(Status);
	return Status;
<<<<<<< HEAD
 8009daa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	371c      	adds	r7, #28
 8009db2:	46bd      	mov	sp, r7
 8009db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db8:	4770      	bx	lr
	...

08009dbc <VL53L0X_SetLimitCheckValue>:
=======
 8008d0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	371c      	adds	r7, #28
 8008d12:	46bd      	mov	sp, r7
 8008d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d18:	4770      	bx	lr
	...

08008d1c <VL53L0X_SetLimitCheckValue>:
>>>>>>> ModeSelect_v2

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
<<<<<<< HEAD
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b086      	sub	sp, #24
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	60f8      	str	r0, [r7, #12]
 8009dc4:	460b      	mov	r3, r1
 8009dc6:	607a      	str	r2, [r7, #4]
 8009dc8:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	75fb      	strb	r3, [r7, #23]
=======
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b086      	sub	sp, #24
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	60f8      	str	r0, [r7, #12]
 8008d24:	460b      	mov	r3, r1
 8008d26:	607a      	str	r2, [r7, #4]
 8008d28:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	75fb      	strb	r3, [r7, #23]
>>>>>>> ModeSelect_v2
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
<<<<<<< HEAD
 8009dce:	897b      	ldrh	r3, [r7, #10]
 8009dd0:	68fa      	ldr	r2, [r7, #12]
 8009dd2:	4413      	add	r3, r2
 8009dd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009dd8:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8009dda:	7dbb      	ldrb	r3, [r7, #22]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d107      	bne.n	8009df0 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009de0:	897b      	ldrh	r3, [r7, #10]
 8009de2:	68fa      	ldr	r2, [r7, #12]
 8009de4:	330c      	adds	r3, #12
 8009de6:	009b      	lsls	r3, r3, #2
 8009de8:	4413      	add	r3, r2
 8009dea:	687a      	ldr	r2, [r7, #4]
 8009dec:	605a      	str	r2, [r3, #4]
 8009dee:	e040      	b.n	8009e72 <VL53L0X_SetLimitCheckValue+0xb6>
=======
 8008d2e:	897b      	ldrh	r3, [r7, #10]
 8008d30:	68fa      	ldr	r2, [r7, #12]
 8008d32:	4413      	add	r3, r2
 8008d34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d38:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8008d3a:	7dbb      	ldrb	r3, [r7, #22]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d107      	bne.n	8008d50 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008d40:	897b      	ldrh	r3, [r7, #10]
 8008d42:	68fa      	ldr	r2, [r7, #12]
 8008d44:	330c      	adds	r3, #12
 8008d46:	009b      	lsls	r3, r3, #2
 8008d48:	4413      	add	r3, r2
 8008d4a:	687a      	ldr	r2, [r7, #4]
 8008d4c:	605a      	str	r2, [r3, #4]
 8008d4e:	e040      	b.n	8008dd2 <VL53L0X_SetLimitCheckValue+0xb6>
>>>>>>> ModeSelect_v2
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
<<<<<<< HEAD
 8009df0:	897b      	ldrh	r3, [r7, #10]
 8009df2:	2b05      	cmp	r3, #5
 8009df4:	d830      	bhi.n	8009e58 <VL53L0X_SetLimitCheckValue+0x9c>
 8009df6:	a201      	add	r2, pc, #4	; (adr r2, 8009dfc <VL53L0X_SetLimitCheckValue+0x40>)
 8009df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dfc:	08009e15 	.word	0x08009e15
 8009e00:	08009e1d 	.word	0x08009e1d
 8009e04:	08009e33 	.word	0x08009e33
 8009e08:	08009e3b 	.word	0x08009e3b
 8009e0c:	08009e43 	.word	0x08009e43
 8009e10:	08009e43 	.word	0x08009e43
=======
 8008d50:	897b      	ldrh	r3, [r7, #10]
 8008d52:	2b05      	cmp	r3, #5
 8008d54:	d830      	bhi.n	8008db8 <VL53L0X_SetLimitCheckValue+0x9c>
 8008d56:	a201      	add	r2, pc, #4	; (adr r2, 8008d5c <VL53L0X_SetLimitCheckValue+0x40>)
 8008d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d5c:	08008d75 	.word	0x08008d75
 8008d60:	08008d7d 	.word	0x08008d7d
 8008d64:	08008d93 	.word	0x08008d93
 8008d68:	08008d9b 	.word	0x08008d9b
 8008d6c:	08008da3 	.word	0x08008da3
 8008d70:	08008da3 	.word	0x08008da3
>>>>>>> ModeSelect_v2

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
<<<<<<< HEAD
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	687a      	ldr	r2, [r7, #4]
 8009e18:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8009e1a:	e01f      	b.n	8009e5c <VL53L0X_SetLimitCheckValue+0xa0>
=======
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	687a      	ldr	r2, [r7, #4]
 8008d78:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8008d7a:	e01f      	b.n	8008dbc <VL53L0X_SetLimitCheckValue+0xa0>
>>>>>>> ModeSelect_v2

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
<<<<<<< HEAD
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8009e20:	b29b      	uxth	r3, r3
 8009e22:	461a      	mov	r2, r3
 8009e24:	2144      	movs	r1, #68	; 0x44
 8009e26:	68f8      	ldr	r0, [r7, #12]
 8009e28:	f003 fff6 	bl	800de18 <VL53L0X_WrWord>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8009e30:	e014      	b.n	8009e5c <VL53L0X_SetLimitCheckValue+0xa0>
=======
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8008d80:	b29b      	uxth	r3, r3
 8008d82:	461a      	mov	r2, r3
 8008d84:	2144      	movs	r1, #68	; 0x44
 8008d86:	68f8      	ldr	r0, [r7, #12]
 8008d88:	f003 fff6 	bl	800cd78 <VL53L0X_WrWord>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8008d90:	e014      	b.n	8008dbc <VL53L0X_SetLimitCheckValue+0xa0>
>>>>>>> ModeSelect_v2

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
<<<<<<< HEAD
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	687a      	ldr	r2, [r7, #4]
 8009e36:	63da      	str	r2, [r3, #60]	; 0x3c
=======
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	63da      	str	r2, [r3, #60]	; 0x3c
>>>>>>> ModeSelect_v2
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
<<<<<<< HEAD
 8009e38:	e010      	b.n	8009e5c <VL53L0X_SetLimitCheckValue+0xa0>
=======
 8008d98:	e010      	b.n	8008dbc <VL53L0X_SetLimitCheckValue+0xa0>
>>>>>>> ModeSelect_v2

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
<<<<<<< HEAD
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	687a      	ldr	r2, [r7, #4]
 8009e3e:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	687a      	ldr	r2, [r7, #4]
 8008d9e:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> ModeSelect_v2
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
<<<<<<< HEAD
 8009e40:	e00c      	b.n	8009e5c <VL53L0X_SetLimitCheckValue+0xa0>
=======
 8008da0:	e00c      	b.n	8008dbc <VL53L0X_SetLimitCheckValue+0xa0>
>>>>>>> ModeSelect_v2
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
<<<<<<< HEAD
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8009e46:	b29b      	uxth	r3, r3
 8009e48:	461a      	mov	r2, r3
 8009e4a:	2164      	movs	r1, #100	; 0x64
 8009e4c:	68f8      	ldr	r0, [r7, #12]
 8009e4e:	f003 ffe3 	bl	800de18 <VL53L0X_WrWord>
 8009e52:	4603      	mov	r3, r0
 8009e54:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8009e56:	e001      	b.n	8009e5c <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009e58:	23fc      	movs	r3, #252	; 0xfc
 8009e5a:	75fb      	strb	r3, [r7, #23]
=======
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8008da6:	b29b      	uxth	r3, r3
 8008da8:	461a      	mov	r2, r3
 8008daa:	2164      	movs	r1, #100	; 0x64
 8008dac:	68f8      	ldr	r0, [r7, #12]
 8008dae:	f003 ffe3 	bl	800cd78 <VL53L0X_WrWord>
 8008db2:	4603      	mov	r3, r0
 8008db4:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8008db6:	e001      	b.n	8008dbc <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008db8:	23fc      	movs	r3, #252	; 0xfc
 8008dba:	75fb      	strb	r3, [r7, #23]
>>>>>>> ModeSelect_v2

		}

		if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 8009e5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d106      	bne.n	8009e72 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009e64:	897b      	ldrh	r3, [r7, #10]
 8009e66:	68fa      	ldr	r2, [r7, #12]
 8009e68:	330c      	adds	r3, #12
 8009e6a:	009b      	lsls	r3, r3, #2
 8009e6c:	4413      	add	r3, r2
 8009e6e:	687a      	ldr	r2, [r7, #4]
 8009e70:	605a      	str	r2, [r3, #4]
=======
 8008dbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d106      	bne.n	8008dd2 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008dc4:	897b      	ldrh	r3, [r7, #10]
 8008dc6:	68fa      	ldr	r2, [r7, #12]
 8008dc8:	330c      	adds	r3, #12
 8008dca:	009b      	lsls	r3, r3, #2
 8008dcc:	4413      	add	r3, r2
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	605a      	str	r2, [r3, #4]
>>>>>>> ModeSelect_v2
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
<<<<<<< HEAD
 8009e72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3718      	adds	r7, #24
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}
 8009e7e:	bf00      	nop

08009e80 <VL53L0X_GetLimitCheckValue>:
=======
 8008dd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3718      	adds	r7, #24
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop

08008de0 <VL53L0X_GetLimitCheckValue>:
>>>>>>> ModeSelect_v2

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
<<<<<<< HEAD
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b088      	sub	sp, #32
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	60f8      	str	r0, [r7, #12]
 8009e88:	460b      	mov	r3, r1
 8009e8a:	607a      	str	r2, [r7, #4]
 8009e8c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8009e92:	2300      	movs	r3, #0
 8009e94:	77bb      	strb	r3, [r7, #30]
=======
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b088      	sub	sp, #32
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	60f8      	str	r0, [r7, #12]
 8008de8:	460b      	mov	r3, r1
 8008dea:	607a      	str	r2, [r7, #4]
 8008dec:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008dee:	2300      	movs	r3, #0
 8008df0:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8008df2:	2300      	movs	r3, #0
 8008df4:	77bb      	strb	r3, [r7, #30]
>>>>>>> ModeSelect_v2
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
<<<<<<< HEAD
 8009e96:	897b      	ldrh	r3, [r7, #10]
 8009e98:	2b05      	cmp	r3, #5
 8009e9a:	d847      	bhi.n	8009f2c <VL53L0X_GetLimitCheckValue+0xac>
 8009e9c:	a201      	add	r2, pc, #4	; (adr r2, 8009ea4 <VL53L0X_GetLimitCheckValue+0x24>)
 8009e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ea2:	bf00      	nop
 8009ea4:	08009ebd 	.word	0x08009ebd
 8009ea8:	08009ec9 	.word	0x08009ec9
 8009eac:	08009eef 	.word	0x08009eef
 8009eb0:	08009efb 	.word	0x08009efb
 8009eb4:	08009f07 	.word	0x08009f07
 8009eb8:	08009f07 	.word	0x08009f07
=======
 8008df6:	897b      	ldrh	r3, [r7, #10]
 8008df8:	2b05      	cmp	r3, #5
 8008dfa:	d847      	bhi.n	8008e8c <VL53L0X_GetLimitCheckValue+0xac>
 8008dfc:	a201      	add	r2, pc, #4	; (adr r2, 8008e04 <VL53L0X_GetLimitCheckValue+0x24>)
 8008dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e02:	bf00      	nop
 8008e04:	08008e1d 	.word	0x08008e1d
 8008e08:	08008e29 	.word	0x08008e29
 8008e0c:	08008e4f 	.word	0x08008e4f
 8008e10:	08008e5b 	.word	0x08008e5b
 8008e14:	08008e67 	.word	0x08008e67
 8008e18:	08008e67 	.word	0x08008e67
>>>>>>> ModeSelect_v2

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
<<<<<<< HEAD
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ec0:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	77bb      	strb	r3, [r7, #30]
		break;
 8009ec6:	e033      	b.n	8009f30 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8009ec8:	f107 0316 	add.w	r3, r7, #22
 8009ecc:	461a      	mov	r2, r3
 8009ece:	2144      	movs	r1, #68	; 0x44
 8009ed0:	68f8      	ldr	r0, [r7, #12]
 8009ed2:	f004 f829 	bl	800df28 <VL53L0X_RdWord>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8009eda:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d102      	bne.n	8009ee8 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8009ee2:	8afb      	ldrh	r3, [r7, #22]
 8009ee4:	025b      	lsls	r3, r3, #9
 8009ee6:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8009ee8:	2301      	movs	r3, #1
 8009eea:	77bb      	strb	r3, [r7, #30]
		break;
 8009eec:	e020      	b.n	8009f30 <VL53L0X_GetLimitCheckValue+0xb0>
=======
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e20:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8008e22:	2300      	movs	r3, #0
 8008e24:	77bb      	strb	r3, [r7, #30]
		break;
 8008e26:	e033      	b.n	8008e90 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8008e28:	f107 0316 	add.w	r3, r7, #22
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	2144      	movs	r1, #68	; 0x44
 8008e30:	68f8      	ldr	r0, [r7, #12]
 8008e32:	f004 f829 	bl	800ce88 <VL53L0X_RdWord>
 8008e36:	4603      	mov	r3, r0
 8008e38:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8008e3a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d102      	bne.n	8008e48 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8008e42:	8afb      	ldrh	r3, [r7, #22]
 8008e44:	025b      	lsls	r3, r3, #9
 8008e46:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8008e48:	2301      	movs	r3, #1
 8008e4a:	77bb      	strb	r3, [r7, #30]
		break;
 8008e4c:	e020      	b.n	8008e90 <VL53L0X_GetLimitCheckValue+0xb0>
>>>>>>> ModeSelect_v2

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
<<<<<<< HEAD
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ef2:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	77bb      	strb	r3, [r7, #30]
		break;
 8009ef8:	e01a      	b.n	8009f30 <VL53L0X_GetLimitCheckValue+0xb0>
=======
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e52:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8008e54:	2300      	movs	r3, #0
 8008e56:	77bb      	strb	r3, [r7, #30]
		break;
 8008e58:	e01a      	b.n	8008e90 <VL53L0X_GetLimitCheckValue+0xb0>
>>>>>>> ModeSelect_v2

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
<<<<<<< HEAD
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009efe:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8009f00:	2300      	movs	r3, #0
 8009f02:	77bb      	strb	r3, [r7, #30]
		break;
 8009f04:	e014      	b.n	8009f30 <VL53L0X_GetLimitCheckValue+0xb0>
=======
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e5e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8008e60:	2300      	movs	r3, #0
 8008e62:	77bb      	strb	r3, [r7, #30]
		break;
 8008e64:	e014      	b.n	8008e90 <VL53L0X_GetLimitCheckValue+0xb0>
>>>>>>> ModeSelect_v2

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
<<<<<<< HEAD
 8009f06:	f107 0316 	add.w	r3, r7, #22
 8009f0a:	461a      	mov	r2, r3
 8009f0c:	2164      	movs	r1, #100	; 0x64
 8009f0e:	68f8      	ldr	r0, [r7, #12]
 8009f10:	f004 f80a 	bl	800df28 <VL53L0X_RdWord>
 8009f14:	4603      	mov	r3, r0
 8009f16:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8009f18:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d102      	bne.n	8009f26 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8009f20:	8afb      	ldrh	r3, [r7, #22]
 8009f22:	025b      	lsls	r3, r3, #9
 8009f24:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8009f26:	2300      	movs	r3, #0
 8009f28:	77bb      	strb	r3, [r7, #30]
		break;
 8009f2a:	e001      	b.n	8009f30 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009f2c:	23fc      	movs	r3, #252	; 0xfc
 8009f2e:	77fb      	strb	r3, [r7, #31]
=======
 8008e66:	f107 0316 	add.w	r3, r7, #22
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	2164      	movs	r1, #100	; 0x64
 8008e6e:	68f8      	ldr	r0, [r7, #12]
 8008e70:	f004 f80a 	bl	800ce88 <VL53L0X_RdWord>
 8008e74:	4603      	mov	r3, r0
 8008e76:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8008e78:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d102      	bne.n	8008e86 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8008e80:	8afb      	ldrh	r3, [r7, #22]
 8008e82:	025b      	lsls	r3, r3, #9
 8008e84:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8008e86:	2300      	movs	r3, #0
 8008e88:	77bb      	strb	r3, [r7, #30]
		break;
 8008e8a:	e001      	b.n	8008e90 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008e8c:	23fc      	movs	r3, #252	; 0xfc
 8008e8e:	77fb      	strb	r3, [r7, #31]
>>>>>>> ModeSelect_v2

	}

	if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 8009f30:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d12a      	bne.n	8009f8e <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8009f38:	7fbb      	ldrb	r3, [r7, #30]
 8009f3a:	2b01      	cmp	r3, #1
 8009f3c:	d124      	bne.n	8009f88 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8009f3e:	69bb      	ldr	r3, [r7, #24]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d110      	bne.n	8009f66 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8009f44:	897b      	ldrh	r3, [r7, #10]
 8009f46:	68fa      	ldr	r2, [r7, #12]
 8009f48:	330c      	adds	r3, #12
 8009f4a:	009b      	lsls	r3, r3, #2
 8009f4c:	4413      	add	r3, r2
 8009f4e:	685b      	ldr	r3, [r3, #4]
 8009f50:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	69ba      	ldr	r2, [r7, #24]
 8009f56:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8009f58:	897b      	ldrh	r3, [r7, #10]
 8009f5a:	68fa      	ldr	r2, [r7, #12]
 8009f5c:	4413      	add	r3, r2
 8009f5e:	2200      	movs	r2, #0
 8009f60:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8009f64:	e013      	b.n	8009f8e <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	69ba      	ldr	r2, [r7, #24]
 8009f6a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8009f6c:	897b      	ldrh	r3, [r7, #10]
 8009f6e:	68fa      	ldr	r2, [r7, #12]
 8009f70:	330c      	adds	r3, #12
 8009f72:	009b      	lsls	r3, r3, #2
 8009f74:	4413      	add	r3, r2
 8009f76:	69ba      	ldr	r2, [r7, #24]
 8009f78:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8009f7a:	897b      	ldrh	r3, [r7, #10]
 8009f7c:	68fa      	ldr	r2, [r7, #12]
 8009f7e:	4413      	add	r3, r2
 8009f80:	2201      	movs	r2, #1
 8009f82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8009f86:	e002      	b.n	8009f8e <VL53L0X_GetLimitCheckValue+0x10e>
=======
 8008e90:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d12a      	bne.n	8008eee <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8008e98:	7fbb      	ldrb	r3, [r7, #30]
 8008e9a:	2b01      	cmp	r3, #1
 8008e9c:	d124      	bne.n	8008ee8 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8008e9e:	69bb      	ldr	r3, [r7, #24]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d110      	bne.n	8008ec6 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8008ea4:	897b      	ldrh	r3, [r7, #10]
 8008ea6:	68fa      	ldr	r2, [r7, #12]
 8008ea8:	330c      	adds	r3, #12
 8008eaa:	009b      	lsls	r3, r3, #2
 8008eac:	4413      	add	r3, r2
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	69ba      	ldr	r2, [r7, #24]
 8008eb6:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8008eb8:	897b      	ldrh	r3, [r7, #10]
 8008eba:	68fa      	ldr	r2, [r7, #12]
 8008ebc:	4413      	add	r3, r2
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8008ec4:	e013      	b.n	8008eee <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	69ba      	ldr	r2, [r7, #24]
 8008eca:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8008ecc:	897b      	ldrh	r3, [r7, #10]
 8008ece:	68fa      	ldr	r2, [r7, #12]
 8008ed0:	330c      	adds	r3, #12
 8008ed2:	009b      	lsls	r3, r3, #2
 8008ed4:	4413      	add	r3, r2
 8008ed6:	69ba      	ldr	r2, [r7, #24]
 8008ed8:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8008eda:	897b      	ldrh	r3, [r7, #10]
 8008edc:	68fa      	ldr	r2, [r7, #12]
 8008ede:	4413      	add	r3, r2
 8008ee0:	2201      	movs	r2, #1
 8008ee2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8008ee6:	e002      	b.n	8008eee <VL53L0X_GetLimitCheckValue+0x10e>
>>>>>>> ModeSelect_v2
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
<<<<<<< HEAD
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	69ba      	ldr	r2, [r7, #24]
 8009f8c:	601a      	str	r2, [r3, #0]
=======
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	69ba      	ldr	r2, [r7, #24]
 8008eec:	601a      	str	r2, [r3, #0]
>>>>>>> ModeSelect_v2
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
<<<<<<< HEAD
 8009f8e:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3720      	adds	r7, #32
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}
 8009f9a:	bf00      	nop

08009f9c <VL53L0X_GetWrapAroundCheckEnable>:
=======
 8008eee:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3720      	adds	r7, #32
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	bf00      	nop

08008efc <VL53L0X_GetWrapAroundCheckEnable>:
>>>>>>> ModeSelect_v2
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
<<<<<<< HEAD
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b084      	sub	sp, #16
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	73fb      	strb	r3, [r7, #15]
=======
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008f06:	2300      	movs	r3, #0
 8008f08:	73fb      	strb	r3, [r7, #15]
>>>>>>> ModeSelect_v2
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
<<<<<<< HEAD
 8009faa:	f107 030e 	add.w	r3, r7, #14
 8009fae:	461a      	mov	r2, r3
 8009fb0:	2101      	movs	r1, #1
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f003 ff8e 	bl	800ded4 <VL53L0X_RdByte>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8009fbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d10e      	bne.n	8009fe2 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8009fc4:	7bba      	ldrb	r2, [r7, #14]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8009fcc:	7bbb      	ldrb	r3, [r7, #14]
 8009fce:	b25b      	sxtb	r3, r3
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	da03      	bge.n	8009fdc <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	701a      	strb	r2, [r3, #0]
 8009fda:	e002      	b.n	8009fe2 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8009fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d104      	bne.n	8009ff4 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	781a      	ldrb	r2, [r3, #0]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
=======
 8008f0a:	f107 030e 	add.w	r3, r7, #14
 8008f0e:	461a      	mov	r2, r3
 8008f10:	2101      	movs	r1, #1
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f003 ff8e 	bl	800ce34 <VL53L0X_RdByte>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8008f1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d10e      	bne.n	8008f42 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8008f24:	7bba      	ldrb	r2, [r7, #14]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8008f2c:	7bbb      	ldrb	r3, [r7, #14]
 8008f2e:	b25b      	sxtb	r3, r3
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	da03      	bge.n	8008f3c <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	2201      	movs	r2, #1
 8008f38:	701a      	strb	r2, [r3, #0]
 8008f3a:	e002      	b.n	8008f42 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008f42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d104      	bne.n	8008f54 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	781a      	ldrb	r2, [r3, #0]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
>>>>>>> ModeSelect_v2
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
<<<<<<< HEAD
 8009ff4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	3710      	adds	r7, #16
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}

0800a000 <VL53L0X_PerformSingleMeasurement>:
=======
 8008f54:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3710      	adds	r7, #16
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <VL53L0X_PerformSingleMeasurement>:
>>>>>>> ModeSelect_v2

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
<<<<<<< HEAD
 800a000:	b580      	push	{r7, lr}
 800a002:	b084      	sub	sp, #16
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a008:	2300      	movs	r3, #0
 800a00a:	73fb      	strb	r3, [r7, #15]
=======
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b084      	sub	sp, #16
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	73fb      	strb	r3, [r7, #15]
>>>>>>> ModeSelect_v2
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
<<<<<<< HEAD
 800a00c:	f107 030e 	add.w	r3, r7, #14
 800a010:	4619      	mov	r1, r3
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f7ff fbd2 	bl	80097bc <VL53L0X_GetDeviceMode>
 800a018:	4603      	mov	r3, r0
 800a01a:	73fb      	strb	r3, [r7, #15]
=======
 8008f6c:	f107 030e 	add.w	r3, r7, #14
 8008f70:	4619      	mov	r1, r3
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f7ff fbd2 	bl	800871c <VL53L0X_GetDeviceMode>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	73fb      	strb	r3, [r7, #15]
>>>>>>> ModeSelect_v2

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
<<<<<<< HEAD
 800a01c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d107      	bne.n	800a034 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800a024:	7bbb      	ldrb	r3, [r7, #14]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d104      	bne.n	800a034 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f000 f898 	bl	800a160 <VL53L0X_StartMeasurement>
 800a030:	4603      	mov	r3, r0
 800a032:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800a034:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d104      	bne.n	800a046 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800a03c:	6878      	ldr	r0, [r7, #4]
 800a03e:	f001 fb3f 	bl	800b6c0 <VL53L0X_measurement_poll_for_completion>
 800a042:	4603      	mov	r3, r0
 800a044:	73fb      	strb	r3, [r7, #15]
=======
 8008f7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d107      	bne.n	8008f94 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8008f84:	7bbb      	ldrb	r3, [r7, #14]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d104      	bne.n	8008f94 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f000 f898 	bl	80090c0 <VL53L0X_StartMeasurement>
 8008f90:	4603      	mov	r3, r0
 8008f92:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8008f94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d104      	bne.n	8008fa6 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f001 fb3f 	bl	800a620 <VL53L0X_measurement_poll_for_completion>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	73fb      	strb	r3, [r7, #15]
>>>>>>> ModeSelect_v2


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
<<<<<<< HEAD
 800a046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d106      	bne.n	800a05c <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800a04e:	7bbb      	ldrb	r3, [r7, #14]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d103      	bne.n	800a05c <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2203      	movs	r2, #3
 800a058:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
=======
 8008fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d106      	bne.n	8008fbc <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8008fae:	7bbb      	ldrb	r3, [r7, #14]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d103      	bne.n	8008fbc <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2203      	movs	r2, #3
 8008fb8:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
>>>>>>> ModeSelect_v2


	LOG_FUNCTION_END(Status);
	return Status;
<<<<<<< HEAD
 800a05c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a060:	4618      	mov	r0, r3
 800a062:	3710      	adds	r7, #16
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}

0800a068 <VL53L0X_PerformRefCalibration>:
=======
 8008fbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3710      	adds	r7, #16
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <VL53L0X_PerformRefCalibration>:
>>>>>>> ModeSelect_v2
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
<<<<<<< HEAD
 800a068:	b580      	push	{r7, lr}
 800a06a:	b086      	sub	sp, #24
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	60f8      	str	r0, [r7, #12]
 800a070:	60b9      	str	r1, [r7, #8]
 800a072:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a074:	2300      	movs	r3, #0
 800a076:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 800a078:	2301      	movs	r3, #1
 800a07a:	687a      	ldr	r2, [r7, #4]
 800a07c:	68b9      	ldr	r1, [r7, #8]
 800a07e:	68f8      	ldr	r0, [r7, #12]
 800a080:	f001 fae1 	bl	800b646 <VL53L0X_perform_ref_calibration>
 800a084:	4603      	mov	r3, r0
 800a086:	75fb      	strb	r3, [r7, #23]
=======
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b086      	sub	sp, #24
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	60f8      	str	r0, [r7, #12]
 8008fd0:	60b9      	str	r1, [r7, #8]
 8008fd2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8008fd8:	2301      	movs	r3, #1
 8008fda:	687a      	ldr	r2, [r7, #4]
 8008fdc:	68b9      	ldr	r1, [r7, #8]
 8008fde:	68f8      	ldr	r0, [r7, #12]
 8008fe0:	f001 fae1 	bl	800a5a6 <VL53L0X_perform_ref_calibration>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	75fb      	strb	r3, [r7, #23]
>>>>>>> ModeSelect_v2
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
<<<<<<< HEAD
 800a088:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	3718      	adds	r7, #24
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}

0800a094 <VL53L0X_CheckAndLoadInterruptSettings>:
=======
 8008fe8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3718      	adds	r7, #24
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <VL53L0X_CheckAndLoadInterruptSettings>:
>>>>>>> ModeSelect_v2
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
<<<<<<< HEAD
 800a094:	b580      	push	{r7, lr}
 800a096:	b086      	sub	sp, #24
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
 800a09c:	460b      	mov	r3, r1
 800a09e:	70fb      	strb	r3, [r7, #3]
=======
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b086      	sub	sp, #24
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	460b      	mov	r3, r1
 8008ffe:	70fb      	strb	r3, [r7, #3]
>>>>>>> ModeSelect_v2
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
<<<<<<< HEAD
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800a0aa:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 800a0ac:	7dbb      	ldrb	r3, [r7, #22]
 800a0ae:	2b01      	cmp	r3, #1
 800a0b0:	d005      	beq.n	800a0be <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 800a0b2:	7dbb      	ldrb	r3, [r7, #22]
 800a0b4:	2b02      	cmp	r3, #2
 800a0b6:	d002      	beq.n	800a0be <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 800a0b8:	7dbb      	ldrb	r3, [r7, #22]
 800a0ba:	2b03      	cmp	r3, #3
 800a0bc:	d147      	bne.n	800a14e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
=======
 8009000:	2300      	movs	r3, #0
 8009002:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800900a:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 800900c:	7dbb      	ldrb	r3, [r7, #22]
 800900e:	2b01      	cmp	r3, #1
 8009010:	d005      	beq.n	800901e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8009012:	7dbb      	ldrb	r3, [r7, #22]
 8009014:	2b02      	cmp	r3, #2
 8009016:	d002      	beq.n	800901e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8009018:	7dbb      	ldrb	r3, [r7, #22]
 800901a:	2b03      	cmp	r3, #3
 800901c:	d147      	bne.n	80090ae <VL53L0X_CheckAndLoadInterruptSettings+0xba>
>>>>>>> ModeSelect_v2
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
<<<<<<< HEAD
 800a0be:	f107 030c 	add.w	r3, r7, #12
 800a0c2:	f107 0210 	add.w	r2, r7, #16
 800a0c6:	2101      	movs	r1, #1
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f000 fbc3 	bl	800a854 <VL53L0X_GetInterruptThresholds>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	75fb      	strb	r3, [r7, #23]
=======
 800901e:	f107 030c 	add.w	r3, r7, #12
 8009022:	f107 0210 	add.w	r2, r7, #16
 8009026:	2101      	movs	r1, #1
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f000 fbc3 	bl	80097b4 <VL53L0X_GetInterruptThresholds>
 800902e:	4603      	mov	r3, r0
 8009030:	75fb      	strb	r3, [r7, #23]
>>>>>>> ModeSelect_v2
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
<<<<<<< HEAD
 800a0d2:	693b      	ldr	r3, [r7, #16]
 800a0d4:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800a0d8:	d803      	bhi.n	800a0e2 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 800a0da:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 800a0dc:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800a0e0:	d935      	bls.n	800a14e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 800a0e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d131      	bne.n	800a14e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800a0ea:	78fb      	ldrb	r3, [r7, #3]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d006      	beq.n	800a0fe <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 800a0f0:	491a      	ldr	r1, [pc, #104]	; (800a15c <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f002 ff56 	bl	800cfa4 <VL53L0X_load_tuning_settings>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	75fb      	strb	r3, [r7, #23]
 800a0fc:	e027      	b.n	800a14e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800a0fe:	2204      	movs	r2, #4
 800a100:	21ff      	movs	r1, #255	; 0xff
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f003 fe64 	bl	800ddd0 <VL53L0X_WrByte>
 800a108:	4603      	mov	r3, r0
 800a10a:	461a      	mov	r2, r3
 800a10c:	7dfb      	ldrb	r3, [r7, #23]
 800a10e:	4313      	orrs	r3, r2
 800a110:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800a112:	2200      	movs	r2, #0
 800a114:	2170      	movs	r1, #112	; 0x70
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f003 fe5a 	bl	800ddd0 <VL53L0X_WrByte>
 800a11c:	4603      	mov	r3, r0
 800a11e:	461a      	mov	r2, r3
 800a120:	7dfb      	ldrb	r3, [r7, #23]
 800a122:	4313      	orrs	r3, r2
 800a124:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a126:	2200      	movs	r2, #0
 800a128:	21ff      	movs	r1, #255	; 0xff
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f003 fe50 	bl	800ddd0 <VL53L0X_WrByte>
 800a130:	4603      	mov	r3, r0
 800a132:	461a      	mov	r2, r3
 800a134:	7dfb      	ldrb	r3, [r7, #23]
 800a136:	4313      	orrs	r3, r2
 800a138:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800a13a:	2200      	movs	r2, #0
 800a13c:	2180      	movs	r1, #128	; 0x80
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f003 fe46 	bl	800ddd0 <VL53L0X_WrByte>
 800a144:	4603      	mov	r3, r0
 800a146:	461a      	mov	r2, r3
 800a148:	7dfb      	ldrb	r3, [r7, #23]
 800a14a:	4313      	orrs	r3, r2
 800a14c:	75fb      	strb	r3, [r7, #23]
=======
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8009038:	d803      	bhi.n	8009042 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 800903a:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 800903c:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8009040:	d935      	bls.n	80090ae <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8009042:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d131      	bne.n	80090ae <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800904a:	78fb      	ldrb	r3, [r7, #3]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d006      	beq.n	800905e <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8009050:	491a      	ldr	r1, [pc, #104]	; (80090bc <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f002 ff56 	bl	800bf04 <VL53L0X_load_tuning_settings>
 8009058:	4603      	mov	r3, r0
 800905a:	75fb      	strb	r3, [r7, #23]
 800905c:	e027      	b.n	80090ae <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800905e:	2204      	movs	r2, #4
 8009060:	21ff      	movs	r1, #255	; 0xff
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f003 fe64 	bl	800cd30 <VL53L0X_WrByte>
 8009068:	4603      	mov	r3, r0
 800906a:	461a      	mov	r2, r3
 800906c:	7dfb      	ldrb	r3, [r7, #23]
 800906e:	4313      	orrs	r3, r2
 8009070:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8009072:	2200      	movs	r2, #0
 8009074:	2170      	movs	r1, #112	; 0x70
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f003 fe5a 	bl	800cd30 <VL53L0X_WrByte>
 800907c:	4603      	mov	r3, r0
 800907e:	461a      	mov	r2, r3
 8009080:	7dfb      	ldrb	r3, [r7, #23]
 8009082:	4313      	orrs	r3, r2
 8009084:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009086:	2200      	movs	r2, #0
 8009088:	21ff      	movs	r1, #255	; 0xff
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f003 fe50 	bl	800cd30 <VL53L0X_WrByte>
 8009090:	4603      	mov	r3, r0
 8009092:	461a      	mov	r2, r3
 8009094:	7dfb      	ldrb	r3, [r7, #23]
 8009096:	4313      	orrs	r3, r2
 8009098:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800909a:	2200      	movs	r2, #0
 800909c:	2180      	movs	r1, #128	; 0x80
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f003 fe46 	bl	800cd30 <VL53L0X_WrByte>
 80090a4:	4603      	mov	r3, r0
 80090a6:	461a      	mov	r2, r3
 80090a8:	7dfb      	ldrb	r3, [r7, #23]
 80090aa:	4313      	orrs	r3, r2
 80090ac:	75fb      	strb	r3, [r7, #23]
>>>>>>> ModeSelect_v2
		}


	}

	return Status;
<<<<<<< HEAD
 800a14e:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800a152:	4618      	mov	r0, r3
 800a154:	3718      	adds	r7, #24
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}
 800a15a:	bf00      	nop
 800a15c:	20000104 	.word	0x20000104

0800a160 <VL53L0X_StartMeasurement>:
=======
 80090ae:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3718      	adds	r7, #24
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	20000104 	.word	0x20000104

080090c0 <VL53L0X_StartMeasurement>:
>>>>>>> ModeSelect_v2


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
<<<<<<< HEAD
 800a160:	b580      	push	{r7, lr}
 800a162:	b086      	sub	sp, #24
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a168:	2300      	movs	r3, #0
 800a16a:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 800a16c:	2301      	movs	r3, #1
 800a16e:	73fb      	strb	r3, [r7, #15]
=======
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b086      	sub	sp, #24
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80090c8:	2300      	movs	r3, #0
 80090ca:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 80090cc:	2301      	movs	r3, #1
 80090ce:	73fb      	strb	r3, [r7, #15]
>>>>>>> ModeSelect_v2
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
<<<<<<< HEAD
 800a170:	f107 030e 	add.w	r3, r7, #14
 800a174:	4619      	mov	r1, r3
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f7ff fb20 	bl	80097bc <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 800a17c:	2201      	movs	r2, #1
 800a17e:	2180      	movs	r1, #128	; 0x80
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f003 fe25 	bl	800ddd0 <VL53L0X_WrByte>
 800a186:	4603      	mov	r3, r0
 800a188:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a18a:	2201      	movs	r2, #1
 800a18c:	21ff      	movs	r1, #255	; 0xff
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f003 fe1e 	bl	800ddd0 <VL53L0X_WrByte>
 800a194:	4603      	mov	r3, r0
 800a196:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a198:	2200      	movs	r2, #0
 800a19a:	2100      	movs	r1, #0
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f003 fe17 	bl	800ddd0 <VL53L0X_WrByte>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800a1ac:	461a      	mov	r2, r3
 800a1ae:	2191      	movs	r1, #145	; 0x91
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f003 fe0d 	bl	800ddd0 <VL53L0X_WrByte>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	2100      	movs	r1, #0
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f003 fe06 	bl	800ddd0 <VL53L0X_WrByte>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	21ff      	movs	r1, #255	; 0xff
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f003 fdff 	bl	800ddd0 <VL53L0X_WrByte>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	2180      	movs	r1, #128	; 0x80
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	f003 fdf8 	bl	800ddd0 <VL53L0X_WrByte>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 800a1e4:	7bbb      	ldrb	r3, [r7, #14]
 800a1e6:	2b03      	cmp	r3, #3
 800a1e8:	d054      	beq.n	800a294 <VL53L0X_StartMeasurement+0x134>
 800a1ea:	2b03      	cmp	r3, #3
 800a1ec:	dc6c      	bgt.n	800a2c8 <VL53L0X_StartMeasurement+0x168>
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d002      	beq.n	800a1f8 <VL53L0X_StartMeasurement+0x98>
 800a1f2:	2b01      	cmp	r3, #1
 800a1f4:	d034      	beq.n	800a260 <VL53L0X_StartMeasurement+0x100>
 800a1f6:	e067      	b.n	800a2c8 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 800a1f8:	2201      	movs	r2, #1
 800a1fa:	2100      	movs	r1, #0
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f003 fde7 	bl	800ddd0 <VL53L0X_WrByte>
 800a202:	4603      	mov	r3, r0
 800a204:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 800a206:	7bfb      	ldrb	r3, [r7, #15]
 800a208:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 800a20a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d15d      	bne.n	800a2ce <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 800a212:	2300      	movs	r3, #0
 800a214:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800a216:	693b      	ldr	r3, [r7, #16]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d008      	beq.n	800a22e <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 800a21c:	f107 030d 	add.w	r3, r7, #13
 800a220:	461a      	mov	r2, r3
 800a222:	2100      	movs	r1, #0
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f003 fe55 	bl	800ded4 <VL53L0X_RdByte>
 800a22a:	4603      	mov	r3, r0
 800a22c:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	3301      	adds	r3, #1
 800a232:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 800a234:	7b7a      	ldrb	r2, [r7, #13]
 800a236:	7bfb      	ldrb	r3, [r7, #15]
 800a238:	4013      	ands	r3, r2
 800a23a:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800a23c:	7bfa      	ldrb	r2, [r7, #15]
 800a23e:	429a      	cmp	r2, r3
 800a240:	d107      	bne.n	800a252 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 800a242:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d103      	bne.n	800a252 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a250:	d3e1      	bcc.n	800a216 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a258:	d339      	bcc.n	800a2ce <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 800a25a:	23f9      	movs	r3, #249	; 0xf9
 800a25c:	75fb      	strb	r3, [r7, #23]
=======
 80090d0:	f107 030e 	add.w	r3, r7, #14
 80090d4:	4619      	mov	r1, r3
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f7ff fb20 	bl	800871c <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 80090dc:	2201      	movs	r2, #1
 80090de:	2180      	movs	r1, #128	; 0x80
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f003 fe25 	bl	800cd30 <VL53L0X_WrByte>
 80090e6:	4603      	mov	r3, r0
 80090e8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80090ea:	2201      	movs	r2, #1
 80090ec:	21ff      	movs	r1, #255	; 0xff
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f003 fe1e 	bl	800cd30 <VL53L0X_WrByte>
 80090f4:	4603      	mov	r3, r0
 80090f6:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 80090f8:	2200      	movs	r2, #0
 80090fa:	2100      	movs	r1, #0
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f003 fe17 	bl	800cd30 <VL53L0X_WrByte>
 8009102:	4603      	mov	r3, r0
 8009104:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800910c:	461a      	mov	r2, r3
 800910e:	2191      	movs	r1, #145	; 0x91
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f003 fe0d 	bl	800cd30 <VL53L0X_WrByte>
 8009116:	4603      	mov	r3, r0
 8009118:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800911a:	2201      	movs	r2, #1
 800911c:	2100      	movs	r1, #0
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f003 fe06 	bl	800cd30 <VL53L0X_WrByte>
 8009124:	4603      	mov	r3, r0
 8009126:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009128:	2200      	movs	r2, #0
 800912a:	21ff      	movs	r1, #255	; 0xff
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f003 fdff 	bl	800cd30 <VL53L0X_WrByte>
 8009132:	4603      	mov	r3, r0
 8009134:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8009136:	2200      	movs	r2, #0
 8009138:	2180      	movs	r1, #128	; 0x80
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f003 fdf8 	bl	800cd30 <VL53L0X_WrByte>
 8009140:	4603      	mov	r3, r0
 8009142:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8009144:	7bbb      	ldrb	r3, [r7, #14]
 8009146:	2b03      	cmp	r3, #3
 8009148:	d054      	beq.n	80091f4 <VL53L0X_StartMeasurement+0x134>
 800914a:	2b03      	cmp	r3, #3
 800914c:	dc6c      	bgt.n	8009228 <VL53L0X_StartMeasurement+0x168>
 800914e:	2b00      	cmp	r3, #0
 8009150:	d002      	beq.n	8009158 <VL53L0X_StartMeasurement+0x98>
 8009152:	2b01      	cmp	r3, #1
 8009154:	d034      	beq.n	80091c0 <VL53L0X_StartMeasurement+0x100>
 8009156:	e067      	b.n	8009228 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8009158:	2201      	movs	r2, #1
 800915a:	2100      	movs	r1, #0
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f003 fde7 	bl	800cd30 <VL53L0X_WrByte>
 8009162:	4603      	mov	r3, r0
 8009164:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8009166:	7bfb      	ldrb	r3, [r7, #15]
 8009168:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 800916a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d15d      	bne.n	800922e <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8009172:	2300      	movs	r3, #0
 8009174:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d008      	beq.n	800918e <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 800917c:	f107 030d 	add.w	r3, r7, #13
 8009180:	461a      	mov	r2, r3
 8009182:	2100      	movs	r1, #0
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f003 fe55 	bl	800ce34 <VL53L0X_RdByte>
 800918a:	4603      	mov	r3, r0
 800918c:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	3301      	adds	r3, #1
 8009192:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8009194:	7b7a      	ldrb	r2, [r7, #13]
 8009196:	7bfb      	ldrb	r3, [r7, #15]
 8009198:	4013      	ands	r3, r2
 800919a:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800919c:	7bfa      	ldrb	r2, [r7, #15]
 800919e:	429a      	cmp	r2, r3
 80091a0:	d107      	bne.n	80091b2 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 80091a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d103      	bne.n	80091b2 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80091b0:	d3e1      	bcc.n	8009176 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80091b8:	d339      	bcc.n	800922e <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 80091ba:	23f9      	movs	r3, #249	; 0xf9
 80091bc:	75fb      	strb	r3, [r7, #23]
>>>>>>> ModeSelect_v2

		}

		break;
<<<<<<< HEAD
 800a25e:	e036      	b.n	800a2ce <VL53L0X_StartMeasurement+0x16e>
=======
 80091be:	e036      	b.n	800922e <VL53L0X_StartMeasurement+0x16e>
>>>>>>> ModeSelect_v2
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
<<<<<<< HEAD
 800a260:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d105      	bne.n	800a274 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800a268:	2101      	movs	r1, #1
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f7ff ff12 	bl	800a094 <VL53L0X_CheckAndLoadInterruptSettings>
 800a270:	4603      	mov	r3, r0
 800a272:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800a274:	2202      	movs	r2, #2
 800a276:	2100      	movs	r1, #0
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f003 fda9 	bl	800ddd0 <VL53L0X_WrByte>
 800a27e:	4603      	mov	r3, r0
 800a280:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 800a282:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d123      	bne.n	800a2d2 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2204      	movs	r2, #4
 800a28e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800a292:	e01e      	b.n	800a2d2 <VL53L0X_StartMeasurement+0x172>
=======
 80091c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d105      	bne.n	80091d4 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80091c8:	2101      	movs	r1, #1
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f7ff ff12 	bl	8008ff4 <VL53L0X_CheckAndLoadInterruptSettings>
 80091d0:	4603      	mov	r3, r0
 80091d2:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80091d4:	2202      	movs	r2, #2
 80091d6:	2100      	movs	r1, #0
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f003 fda9 	bl	800cd30 <VL53L0X_WrByte>
 80091de:	4603      	mov	r3, r0
 80091e0:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 80091e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d123      	bne.n	8009232 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2204      	movs	r2, #4
 80091ee:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 80091f2:	e01e      	b.n	8009232 <VL53L0X_StartMeasurement+0x172>
>>>>>>> ModeSelect_v2
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
<<<<<<< HEAD
 800a294:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d105      	bne.n	800a2a8 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800a29c:	2101      	movs	r1, #1
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f7ff fef8 	bl	800a094 <VL53L0X_CheckAndLoadInterruptSettings>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800a2a8:	2204      	movs	r2, #4
 800a2aa:	2100      	movs	r1, #0
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f003 fd8f 	bl	800ddd0 <VL53L0X_WrByte>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	75fb      	strb	r3, [r7, #23]
=======
 80091f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d105      	bne.n	8009208 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80091fc:	2101      	movs	r1, #1
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f7ff fef8 	bl	8008ff4 <VL53L0X_CheckAndLoadInterruptSettings>
 8009204:	4603      	mov	r3, r0
 8009206:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8009208:	2204      	movs	r2, #4
 800920a:	2100      	movs	r1, #0
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f003 fd8f 	bl	800cd30 <VL53L0X_WrByte>
 8009212:	4603      	mov	r3, r0
 8009214:	75fb      	strb	r3, [r7, #23]
>>>>>>> ModeSelect_v2
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 800a2b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d10b      	bne.n	800a2d6 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2204      	movs	r2, #4
 800a2c2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800a2c6:	e006      	b.n	800a2d6 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800a2c8:	23f8      	movs	r3, #248	; 0xf8
 800a2ca:	75fb      	strb	r3, [r7, #23]
 800a2cc:	e004      	b.n	800a2d8 <VL53L0X_StartMeasurement+0x178>
		break;
 800a2ce:	bf00      	nop
 800a2d0:	e002      	b.n	800a2d8 <VL53L0X_StartMeasurement+0x178>
		break;
 800a2d2:	bf00      	nop
 800a2d4:	e000      	b.n	800a2d8 <VL53L0X_StartMeasurement+0x178>
		break;
 800a2d6:	bf00      	nop
=======
 8009216:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d10b      	bne.n	8009236 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2204      	movs	r2, #4
 8009222:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8009226:	e006      	b.n	8009236 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8009228:	23f8      	movs	r3, #248	; 0xf8
 800922a:	75fb      	strb	r3, [r7, #23]
 800922c:	e004      	b.n	8009238 <VL53L0X_StartMeasurement+0x178>
		break;
 800922e:	bf00      	nop
 8009230:	e002      	b.n	8009238 <VL53L0X_StartMeasurement+0x178>
		break;
 8009232:	bf00      	nop
 8009234:	e000      	b.n	8009238 <VL53L0X_StartMeasurement+0x178>
		break;
 8009236:	bf00      	nop
>>>>>>> ModeSelect_v2
	}


	LOG_FUNCTION_END(Status);
	return Status;
<<<<<<< HEAD
 800a2d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3718      	adds	r7, #24
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}

0800a2e4 <VL53L0X_GetMeasurementDataReady>:
=======
 8009238:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800923c:	4618      	mov	r0, r3
 800923e:	3718      	adds	r7, #24
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}

08009244 <VL53L0X_GetMeasurementDataReady>:
>>>>>>> ModeSelect_v2
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
<<<<<<< HEAD
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b084      	sub	sp, #16
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
 800a2ec:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	73fb      	strb	r3, [r7, #15]
=======
 8009244:	b580      	push	{r7, lr}
 8009246:	b084      	sub	sp, #16
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800924e:	2300      	movs	r3, #0
 8009250:	73fb      	strb	r3, [r7, #15]
>>>>>>> ModeSelect_v2
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
<<<<<<< HEAD
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800a2f8:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800a2fa:	7bbb      	ldrb	r3, [r7, #14]
 800a2fc:	2b04      	cmp	r3, #4
 800a2fe:	d112      	bne.n	800a326 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 800a300:	f107 0308 	add.w	r3, r7, #8
 800a304:	4619      	mov	r1, r3
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f000 fb1a 	bl	800a940 <VL53L0X_GetInterruptMaskStatus>
 800a30c:	4603      	mov	r3, r0
 800a30e:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	2b04      	cmp	r3, #4
 800a314:	d103      	bne.n	800a31e <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	2201      	movs	r2, #1
 800a31a:	701a      	strb	r2, [r3, #0]
 800a31c:	e01c      	b.n	800a358 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	2200      	movs	r2, #0
 800a322:	701a      	strb	r2, [r3, #0]
 800a324:	e018      	b.n	800a358 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800a326:	f107 030d 	add.w	r3, r7, #13
 800a32a:	461a      	mov	r2, r3
 800a32c:	2114      	movs	r1, #20
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f003 fdd0 	bl	800ded4 <VL53L0X_RdByte>
 800a334:	4603      	mov	r3, r0
 800a336:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800a338:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d10b      	bne.n	800a358 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 800a340:	7b7b      	ldrb	r3, [r7, #13]
 800a342:	f003 0301 	and.w	r3, r3, #1
 800a346:	2b00      	cmp	r3, #0
 800a348:	d003      	beq.n	800a352 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	2201      	movs	r2, #1
 800a34e:	701a      	strb	r2, [r3, #0]
 800a350:	e002      	b.n	800a358 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	2200      	movs	r2, #0
 800a356:	701a      	strb	r2, [r3, #0]
=======
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8009258:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800925a:	7bbb      	ldrb	r3, [r7, #14]
 800925c:	2b04      	cmp	r3, #4
 800925e:	d112      	bne.n	8009286 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8009260:	f107 0308 	add.w	r3, r7, #8
 8009264:	4619      	mov	r1, r3
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 fb1a 	bl	80098a0 <VL53L0X_GetInterruptMaskStatus>
 800926c:	4603      	mov	r3, r0
 800926e:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	2b04      	cmp	r3, #4
 8009274:	d103      	bne.n	800927e <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	2201      	movs	r2, #1
 800927a:	701a      	strb	r2, [r3, #0]
 800927c:	e01c      	b.n	80092b8 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	2200      	movs	r2, #0
 8009282:	701a      	strb	r2, [r3, #0]
 8009284:	e018      	b.n	80092b8 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8009286:	f107 030d 	add.w	r3, r7, #13
 800928a:	461a      	mov	r2, r3
 800928c:	2114      	movs	r1, #20
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f003 fdd0 	bl	800ce34 <VL53L0X_RdByte>
 8009294:	4603      	mov	r3, r0
 8009296:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8009298:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d10b      	bne.n	80092b8 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 80092a0:	7b7b      	ldrb	r3, [r7, #13]
 80092a2:	f003 0301 	and.w	r3, r3, #1
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d003      	beq.n	80092b2 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	2201      	movs	r2, #1
 80092ae:	701a      	strb	r2, [r3, #0]
 80092b0:	e002      	b.n	80092b8 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	2200      	movs	r2, #0
 80092b6:	701a      	strb	r2, [r3, #0]
>>>>>>> ModeSelect_v2
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
<<<<<<< HEAD
 800a358:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	3710      	adds	r7, #16
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}

0800a364 <VL53L0X_GetRangingMeasurementData>:
=======
 80092b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3710      	adds	r7, #16
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <VL53L0X_GetRangingMeasurementData>:
>>>>>>> ModeSelect_v2
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
<<<<<<< HEAD
 800a364:	b5b0      	push	{r4, r5, r7, lr}
 800a366:	b096      	sub	sp, #88	; 0x58
 800a368:	af02      	add	r7, sp, #8
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a36e:	2300      	movs	r3, #0
 800a370:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
=======
 80092c4:	b5b0      	push	{r4, r5, r7, lr}
 80092c6:	b096      	sub	sp, #88	; 0x58
 80092c8:	af02      	add	r7, sp, #8
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80092ce:	2300      	movs	r3, #0
 80092d0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
>>>>>>> ModeSelect_v2
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
<<<<<<< HEAD
 800a374:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800a378:	230c      	movs	r3, #12
 800a37a:	2114      	movs	r1, #20
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f003 fcfb 	bl	800dd78 <VL53L0X_ReadMulti>
 800a382:	4603      	mov	r3, r0
 800a384:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 800a388:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	f040 80d1 	bne.w	800a534 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	2200      	movs	r2, #0
 800a396:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	2200      	movs	r2, #0
 800a39c:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800a39e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a3a2:	b29b      	uxth	r3, r3
 800a3a4:	021b      	lsls	r3, r3, #8
 800a3a6:	b29a      	uxth	r2, r3
 800a3a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a3ac:	b29b      	uxth	r3, r3
 800a3ae:	4413      	add	r3, r2
 800a3b0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
=======
 80092d4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80092d8:	230c      	movs	r3, #12
 80092da:	2114      	movs	r1, #20
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f003 fcfb 	bl	800ccd8 <VL53L0X_ReadMulti>
 80092e2:	4603      	mov	r3, r0
 80092e4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 80092e8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	f040 80d1 	bne.w	8009494 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	2200      	movs	r2, #0
 80092f6:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	2200      	movs	r2, #0
 80092fc:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 80092fe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009302:	b29b      	uxth	r3, r3
 8009304:	021b      	lsls	r3, r3, #8
 8009306:	b29a      	uxth	r2, r3
 8009308:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800930c:	b29b      	uxth	r3, r3
 800930e:	4413      	add	r3, r2
 8009310:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
>>>>>>> ModeSelect_v2
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
<<<<<<< HEAD
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800a3ba:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a3be:	b29b      	uxth	r3, r3
 800a3c0:	021b      	lsls	r3, r3, #8
 800a3c2:	b29a      	uxth	r2, r3
 800a3c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a3c8:	b29b      	uxth	r3, r3
 800a3ca:	4413      	add	r3, r2
 800a3cc:	b29b      	uxth	r3, r3
 800a3ce:	025b      	lsls	r3, r3, #9
 800a3d0:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a3d6:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 800a3d8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800a3dc:	b29b      	uxth	r3, r3
 800a3de:	021b      	lsls	r3, r3, #8
 800a3e0:	b29a      	uxth	r2, r3
 800a3e2:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800a3e6:	b29b      	uxth	r3, r3
 800a3e8:	4413      	add	r3, r2
 800a3ea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800a3ee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a3f2:	025b      	lsls	r3, r3, #9
 800a3f4:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800a3fa:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800a3fe:	b29b      	uxth	r3, r3
 800a400:	021b      	lsls	r3, r3, #8
 800a402:	b29a      	uxth	r2, r3
 800a404:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a408:	b29b      	uxth	r3, r3
 800a40a:	4413      	add	r3, r2
 800a40c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800a416:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 800a418:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a41c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 800a426:	87bb      	strh	r3, [r7, #60]	; 0x3c
=======
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	2200      	movs	r2, #0
 8009318:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800931a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800931e:	b29b      	uxth	r3, r3
 8009320:	021b      	lsls	r3, r3, #8
 8009322:	b29a      	uxth	r2, r3
 8009324:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009328:	b29b      	uxth	r3, r3
 800932a:	4413      	add	r3, r2
 800932c:	b29b      	uxth	r3, r3
 800932e:	025b      	lsls	r3, r3, #9
 8009330:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009336:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8009338:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800933c:	b29b      	uxth	r3, r3
 800933e:	021b      	lsls	r3, r3, #8
 8009340:	b29a      	uxth	r2, r3
 8009342:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8009346:	b29b      	uxth	r3, r3
 8009348:	4413      	add	r3, r2
 800934a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800934e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009352:	025b      	lsls	r3, r3, #9
 8009354:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800935a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800935e:	b29b      	uxth	r3, r3
 8009360:	021b      	lsls	r3, r3, #8
 8009362:	b29a      	uxth	r2, r3
 8009364:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009368:	b29b      	uxth	r3, r3
 800936a:	4413      	add	r3, r2
 800936c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8009376:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8009378:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800937c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8009386:	87bb      	strh	r3, [r7, #60]	; 0x3c
>>>>>>> ModeSelect_v2
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
<<<<<<< HEAD
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800a42e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800a432:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a434:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a438:	d046      	beq.n	800a4c8 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800a43a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a43c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800a440:	fb02 f303 	mul.w	r3, r2, r3
 800a444:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a448:	4a57      	ldr	r2, [pc, #348]	; (800a5a8 <VL53L0X_GetRangingMeasurementData+0x244>)
 800a44a:	fb82 1203 	smull	r1, r2, r2, r3
 800a44e:	1192      	asrs	r2, r2, #6
 800a450:	17db      	asrs	r3, r3, #31
 800a452:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 800a454:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6a1b      	ldr	r3, [r3, #32]
 800a45c:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	7f1b      	ldrb	r3, [r3, #28]
 800a462:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800a466:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d02c      	beq.n	800a4c8 <VL53L0X_GetRangingMeasurementData+0x164>
=======
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800938e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8009392:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009394:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009398:	d046      	beq.n	8009428 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800939a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800939c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80093a0:	fb02 f303 	mul.w	r3, r2, r3
 80093a4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80093a8:	4a57      	ldr	r2, [pc, #348]	; (8009508 <VL53L0X_GetRangingMeasurementData+0x244>)
 80093aa:	fb82 1203 	smull	r1, r2, r2, r3
 80093ae:	1192      	asrs	r2, r2, #6
 80093b0:	17db      	asrs	r3, r3, #31
 80093b2:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 80093b4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6a1b      	ldr	r3, [r3, #32]
 80093bc:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	7f1b      	ldrb	r3, [r3, #28]
 80093c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 80093c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d02c      	beq.n	8009428 <VL53L0X_GetRangingMeasurementData+0x164>
>>>>>>> ModeSelect_v2

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
<<<<<<< HEAD
 800a46e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a470:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800a474:	fb02 f303 	mul.w	r3, r2, r3
 800a478:	121a      	asrs	r2, r3, #8
					<= 0) {
 800a47a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 800a47c:	429a      	cmp	r2, r3
 800a47e:	d10d      	bne.n	800a49c <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 800a480:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a484:	2b00      	cmp	r3, #0
 800a486:	d004      	beq.n	800a492 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 800a488:	f242 23b8 	movw	r3, #8888	; 0x22b8
 800a48c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800a490:	e016      	b.n	800a4c0 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 800a492:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 800a496:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800a49a:	e011      	b.n	800a4c0 <VL53L0X_GetRangingMeasurementData+0x15c>
=======
 80093ce:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80093d0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80093d4:	fb02 f303 	mul.w	r3, r2, r3
 80093d8:	121a      	asrs	r2, r3, #8
					<= 0) {
 80093da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 80093dc:	429a      	cmp	r2, r3
 80093de:	d10d      	bne.n	80093fc <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 80093e0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d004      	beq.n	80093f2 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 80093e8:	f242 23b8 	movw	r3, #8888	; 0x22b8
 80093ec:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80093f0:	e016      	b.n	8009420 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 80093f2:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 80093f6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80093fa:	e011      	b.n	8009420 <VL53L0X_GetRangingMeasurementData+0x15c>
>>>>>>> ModeSelect_v2
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
<<<<<<< HEAD
 800a49c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a4a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a4a2:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 800a4a6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a4a8:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800a4ac:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800a4b0:	121b      	asrs	r3, r3, #8
 800a4b2:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 800a4b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4b6:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 800a4b8:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 800a4bc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800a4c0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a4c4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
=======
 80093fc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009400:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009402:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8009406:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009408:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800940c:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8009410:	121b      	asrs	r3, r3, #8
 8009412:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8009414:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009416:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8009418:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 800941c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8009420:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009424:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
>>>>>>> ModeSelect_v2
			}

		}

		if (RangeFractionalEnable) {
<<<<<<< HEAD
 800a4c8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d00d      	beq.n	800a4ec <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800a4d0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a4d4:	089b      	lsrs	r3, r3, #2
 800a4d6:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800a4dc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a4e0:	b2db      	uxtb	r3, r3
 800a4e2:	019b      	lsls	r3, r3, #6
 800a4e4:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	75da      	strb	r2, [r3, #23]
 800a4ea:	e006      	b.n	800a4fa <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800a4f2:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	75da      	strb	r2, [r3, #23]
=======
 8009428:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800942c:	2b00      	cmp	r3, #0
 800942e:	d00d      	beq.n	800944c <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8009430:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009434:	089b      	lsrs	r3, r3, #2
 8009436:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800943c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009440:	b2db      	uxtb	r3, r3
 8009442:	019b      	lsls	r3, r3, #6
 8009444:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	75da      	strb	r2, [r3, #23]
 800944a:	e006      	b.n	800945a <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8009452:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	2200      	movs	r2, #0
 8009458:	75da      	strb	r2, [r3, #23]
>>>>>>> ModeSelect_v2
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
<<<<<<< HEAD
 800a4fa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800a4fe:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800a502:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800a506:	9301      	str	r3, [sp, #4]
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	9300      	str	r3, [sp, #0]
 800a50c:	4613      	mov	r3, r2
 800a50e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f003 f9e5 	bl	800d8e0 <VL53L0X_get_pal_range_status>
 800a516:	4603      	mov	r3, r0
 800a518:	461a      	mov	r2, r3
 800a51a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a51e:	4313      	orrs	r3, r2
 800a520:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
=======
 800945a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800945e:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8009462:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8009466:	9301      	str	r3, [sp, #4]
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	9300      	str	r3, [sp, #0]
 800946c:	4613      	mov	r3, r2
 800946e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f003 f9e5 	bl	800c840 <VL53L0X_get_pal_range_status>
 8009476:	4603      	mov	r3, r0
 8009478:	461a      	mov	r2, r3
 800947a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800947e:	4313      	orrs	r3, r2
 8009480:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
>>>>>>> ModeSelect_v2
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
<<<<<<< HEAD
 800a524:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d103      	bne.n	800a534 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800a52c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	761a      	strb	r2, [r3, #24]
=======
 8009484:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8009488:	2b00      	cmp	r3, #0
 800948a:	d103      	bne.n	8009494 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800948c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	761a      	strb	r2, [r3, #24]
>>>>>>> ModeSelect_v2

	}

	if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 800a534:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d12f      	bne.n	800a59c <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f107 040c 	add.w	r4, r7, #12
 800a542:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800a546:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a548:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a54a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a54e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800a556:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800a55c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800a564:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800a56a:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800a570:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800a576:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800a57c:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800a582:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f103 0450 	add.w	r4, r3, #80	; 0x50
 800a58c:	f107 050c 	add.w	r5, r7, #12
 800a590:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a592:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a594:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a598:	e884 0007 	stmia.w	r4, {r0, r1, r2}
=======
 8009494:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8009498:	2b00      	cmp	r3, #0
 800949a:	d12f      	bne.n	80094fc <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f107 040c 	add.w	r4, r7, #12
 80094a2:	f103 0550 	add.w	r5, r3, #80	; 0x50
 80094a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80094a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80094aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80094ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 80094b6:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 80094bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 80094c4:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 80094ca:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 80094d0:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 80094d6:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 80094dc:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 80094e2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f103 0450 	add.w	r4, r3, #80	; 0x50
 80094ec:	f107 050c 	add.w	r5, r7, #12
 80094f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80094f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80094f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80094f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
>>>>>>> ModeSelect_v2
	}

	LOG_FUNCTION_END(Status);
	return Status;
<<<<<<< HEAD
 800a59c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3750      	adds	r7, #80	; 0x50
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bdb0      	pop	{r4, r5, r7, pc}
 800a5a8:	10624dd3 	.word	0x10624dd3

0800a5ac <VL53L0X_PerformSingleRangingMeasurement>:
=======
 80094fc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8009500:	4618      	mov	r0, r3
 8009502:	3750      	adds	r7, #80	; 0x50
 8009504:	46bd      	mov	sp, r7
 8009506:	bdb0      	pop	{r4, r5, r7, pc}
 8009508:	10624dd3 	.word	0x10624dd3

0800950c <VL53L0X_PerformSingleRangingMeasurement>:
>>>>>>> ModeSelect_v2
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
<<<<<<< HEAD
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b084      	sub	sp, #16
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
 800a5b4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	73fb      	strb	r3, [r7, #15]
=======
 800950c:	b580      	push	{r7, lr}
 800950e:	b084      	sub	sp, #16
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009516:	2300      	movs	r3, #0
 8009518:	73fb      	strb	r3, [r7, #15]
>>>>>>> ModeSelect_v2

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
<<<<<<< HEAD
 800a5ba:	2100      	movs	r1, #0
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f7ff f8d1 	bl	8009764 <VL53L0X_SetDeviceMode>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800a5c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d104      	bne.n	800a5d8 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f7ff fd16 	bl	800a000 <VL53L0X_PerformSingleMeasurement>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800a5d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d105      	bne.n	800a5ec <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 800a5e0:	6839      	ldr	r1, [r7, #0]
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f7ff febe 	bl	800a364 <VL53L0X_GetRangingMeasurementData>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	73fb      	strb	r3, [r7, #15]
=======
 800951a:	2100      	movs	r1, #0
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f7ff f8d1 	bl	80086c4 <VL53L0X_SetDeviceMode>
 8009522:	4603      	mov	r3, r0
 8009524:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8009526:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d104      	bne.n	8009538 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f7ff fd16 	bl	8008f60 <VL53L0X_PerformSingleMeasurement>
 8009534:	4603      	mov	r3, r0
 8009536:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8009538:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d105      	bne.n	800954c <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8009540:	6839      	ldr	r1, [r7, #0]
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f7ff febe 	bl	80092c4 <VL53L0X_GetRangingMeasurementData>
 8009548:	4603      	mov	r3, r0
 800954a:	73fb      	strb	r3, [r7, #15]
>>>>>>> ModeSelect_v2
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
<<<<<<< HEAD
 800a5ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d105      	bne.n	800a600 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800a5f4:	2100      	movs	r1, #0
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f000 f962 	bl	800a8c0 <VL53L0X_ClearInterruptMask>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	73fb      	strb	r3, [r7, #15]
=======
 800954c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d105      	bne.n	8009560 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8009554:	2100      	movs	r1, #0
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 f962 	bl	8009820 <VL53L0X_ClearInterruptMask>
 800955c:	4603      	mov	r3, r0
 800955e:	73fb      	strb	r3, [r7, #15]
>>>>>>> ModeSelect_v2


	LOG_FUNCTION_END(Status);
	return Status;
<<<<<<< HEAD
 800a600:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a604:	4618      	mov	r0, r3
 800a606:	3710      	adds	r7, #16
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <VL53L0X_SetGpioConfig>:
=======
 8009560:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009564:	4618      	mov	r0, r3
 8009566:	3710      	adds	r7, #16
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}

0800956c <VL53L0X_SetGpioConfig>:
>>>>>>> ModeSelect_v2
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
<<<<<<< HEAD
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b084      	sub	sp, #16
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	4608      	mov	r0, r1
 800a616:	4611      	mov	r1, r2
 800a618:	461a      	mov	r2, r3
 800a61a:	4603      	mov	r3, r0
 800a61c:	70fb      	strb	r3, [r7, #3]
 800a61e:	460b      	mov	r3, r1
 800a620:	70bb      	strb	r3, [r7, #2]
 800a622:	4613      	mov	r3, r2
 800a624:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a626:	2300      	movs	r3, #0
 800a628:	73fb      	strb	r3, [r7, #15]
=======
 800956c:	b580      	push	{r7, lr}
 800956e:	b084      	sub	sp, #16
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
 8009574:	4608      	mov	r0, r1
 8009576:	4611      	mov	r1, r2
 8009578:	461a      	mov	r2, r3
 800957a:	4603      	mov	r3, r0
 800957c:	70fb      	strb	r3, [r7, #3]
 800957e:	460b      	mov	r3, r1
 8009580:	70bb      	strb	r3, [r7, #2]
 8009582:	4613      	mov	r3, r2
 8009584:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009586:	2300      	movs	r3, #0
 8009588:	73fb      	strb	r3, [r7, #15]
>>>>>>> ModeSelect_v2
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
<<<<<<< HEAD
 800a62a:	78fb      	ldrb	r3, [r7, #3]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d002      	beq.n	800a636 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 800a630:	23f6      	movs	r3, #246	; 0xf6
 800a632:	73fb      	strb	r3, [r7, #15]
 800a634:	e107      	b.n	800a846 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800a636:	78bb      	ldrb	r3, [r7, #2]
 800a638:	2b14      	cmp	r3, #20
 800a63a:	d110      	bne.n	800a65e <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800a63c:	7e3b      	ldrb	r3, [r7, #24]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d102      	bne.n	800a648 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800a642:	2310      	movs	r3, #16
 800a644:	73bb      	strb	r3, [r7, #14]
 800a646:	e001      	b.n	800a64c <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 800a648:	2301      	movs	r3, #1
 800a64a:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 800a64c:	7bbb      	ldrb	r3, [r7, #14]
 800a64e:	461a      	mov	r2, r3
 800a650:	2184      	movs	r1, #132	; 0x84
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f003 fbbc 	bl	800ddd0 <VL53L0X_WrByte>
 800a658:	4603      	mov	r3, r0
 800a65a:	73fb      	strb	r3, [r7, #15]
 800a65c:	e0f3      	b.n	800a846 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800a65e:	78bb      	ldrb	r3, [r7, #2]
 800a660:	2b15      	cmp	r3, #21
 800a662:	f040 8097 	bne.w	800a794 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a666:	2201      	movs	r2, #1
 800a668:	21ff      	movs	r1, #255	; 0xff
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f003 fbb0 	bl	800ddd0 <VL53L0X_WrByte>
 800a670:	4603      	mov	r3, r0
 800a672:	461a      	mov	r2, r3
 800a674:	7bfb      	ldrb	r3, [r7, #15]
 800a676:	4313      	orrs	r3, r2
 800a678:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a67a:	2200      	movs	r2, #0
 800a67c:	2100      	movs	r1, #0
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f003 fba6 	bl	800ddd0 <VL53L0X_WrByte>
 800a684:	4603      	mov	r3, r0
 800a686:	461a      	mov	r2, r3
 800a688:	7bfb      	ldrb	r3, [r7, #15]
 800a68a:	4313      	orrs	r3, r2
 800a68c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a68e:	2200      	movs	r2, #0
 800a690:	21ff      	movs	r1, #255	; 0xff
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f003 fb9c 	bl	800ddd0 <VL53L0X_WrByte>
 800a698:	4603      	mov	r3, r0
 800a69a:	461a      	mov	r2, r3
 800a69c:	7bfb      	ldrb	r3, [r7, #15]
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	2180      	movs	r1, #128	; 0x80
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f003 fb92 	bl	800ddd0 <VL53L0X_WrByte>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	461a      	mov	r2, r3
 800a6b0:	7bfb      	ldrb	r3, [r7, #15]
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800a6b6:	2202      	movs	r2, #2
 800a6b8:	2185      	movs	r1, #133	; 0x85
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f003 fb88 	bl	800ddd0 <VL53L0X_WrByte>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	7bfb      	ldrb	r3, [r7, #15]
 800a6c6:	4313      	orrs	r3, r2
 800a6c8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800a6ca:	2204      	movs	r2, #4
 800a6cc:	21ff      	movs	r1, #255	; 0xff
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f003 fb7e 	bl	800ddd0 <VL53L0X_WrByte>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	7bfb      	ldrb	r3, [r7, #15]
 800a6da:	4313      	orrs	r3, r2
 800a6dc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800a6de:	2200      	movs	r2, #0
 800a6e0:	21cd      	movs	r1, #205	; 0xcd
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f003 fb74 	bl	800ddd0 <VL53L0X_WrByte>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	461a      	mov	r2, r3
 800a6ec:	7bfb      	ldrb	r3, [r7, #15]
 800a6ee:	4313      	orrs	r3, r2
 800a6f0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800a6f2:	2211      	movs	r2, #17
 800a6f4:	21cc      	movs	r1, #204	; 0xcc
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f003 fb6a 	bl	800ddd0 <VL53L0X_WrByte>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	461a      	mov	r2, r3
 800a700:	7bfb      	ldrb	r3, [r7, #15]
 800a702:	4313      	orrs	r3, r2
 800a704:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800a706:	2207      	movs	r2, #7
 800a708:	21ff      	movs	r1, #255	; 0xff
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f003 fb60 	bl	800ddd0 <VL53L0X_WrByte>
 800a710:	4603      	mov	r3, r0
 800a712:	461a      	mov	r2, r3
 800a714:	7bfb      	ldrb	r3, [r7, #15]
 800a716:	4313      	orrs	r3, r2
 800a718:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800a71a:	2200      	movs	r2, #0
 800a71c:	21be      	movs	r1, #190	; 0xbe
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f003 fb56 	bl	800ddd0 <VL53L0X_WrByte>
 800a724:	4603      	mov	r3, r0
 800a726:	461a      	mov	r2, r3
 800a728:	7bfb      	ldrb	r3, [r7, #15]
 800a72a:	4313      	orrs	r3, r2
 800a72c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800a72e:	2206      	movs	r2, #6
 800a730:	21ff      	movs	r1, #255	; 0xff
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f003 fb4c 	bl	800ddd0 <VL53L0X_WrByte>
 800a738:	4603      	mov	r3, r0
 800a73a:	461a      	mov	r2, r3
 800a73c:	7bfb      	ldrb	r3, [r7, #15]
 800a73e:	4313      	orrs	r3, r2
 800a740:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800a742:	2209      	movs	r2, #9
 800a744:	21cc      	movs	r1, #204	; 0xcc
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f003 fb42 	bl	800ddd0 <VL53L0X_WrByte>
 800a74c:	4603      	mov	r3, r0
 800a74e:	461a      	mov	r2, r3
 800a750:	7bfb      	ldrb	r3, [r7, #15]
 800a752:	4313      	orrs	r3, r2
 800a754:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a756:	2200      	movs	r2, #0
 800a758:	21ff      	movs	r1, #255	; 0xff
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f003 fb38 	bl	800ddd0 <VL53L0X_WrByte>
 800a760:	4603      	mov	r3, r0
 800a762:	461a      	mov	r2, r3
 800a764:	7bfb      	ldrb	r3, [r7, #15]
 800a766:	4313      	orrs	r3, r2
 800a768:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a76a:	2201      	movs	r2, #1
 800a76c:	21ff      	movs	r1, #255	; 0xff
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f003 fb2e 	bl	800ddd0 <VL53L0X_WrByte>
 800a774:	4603      	mov	r3, r0
 800a776:	461a      	mov	r2, r3
 800a778:	7bfb      	ldrb	r3, [r7, #15]
 800a77a:	4313      	orrs	r3, r2
 800a77c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a77e:	2200      	movs	r2, #0
 800a780:	2100      	movs	r1, #0
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f003 fb24 	bl	800ddd0 <VL53L0X_WrByte>
 800a788:	4603      	mov	r3, r0
 800a78a:	461a      	mov	r2, r3
 800a78c:	7bfb      	ldrb	r3, [r7, #15]
 800a78e:	4313      	orrs	r3, r2
 800a790:	73fb      	strb	r3, [r7, #15]
 800a792:	e058      	b.n	800a846 <VL53L0X_SetGpioConfig+0x23a>
=======
 800958a:	78fb      	ldrb	r3, [r7, #3]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d002      	beq.n	8009596 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8009590:	23f6      	movs	r3, #246	; 0xf6
 8009592:	73fb      	strb	r3, [r7, #15]
 8009594:	e107      	b.n	80097a6 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8009596:	78bb      	ldrb	r3, [r7, #2]
 8009598:	2b14      	cmp	r3, #20
 800959a:	d110      	bne.n	80095be <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800959c:	7e3b      	ldrb	r3, [r7, #24]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d102      	bne.n	80095a8 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 80095a2:	2310      	movs	r3, #16
 80095a4:	73bb      	strb	r3, [r7, #14]
 80095a6:	e001      	b.n	80095ac <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 80095a8:	2301      	movs	r3, #1
 80095aa:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 80095ac:	7bbb      	ldrb	r3, [r7, #14]
 80095ae:	461a      	mov	r2, r3
 80095b0:	2184      	movs	r1, #132	; 0x84
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f003 fbbc 	bl	800cd30 <VL53L0X_WrByte>
 80095b8:	4603      	mov	r3, r0
 80095ba:	73fb      	strb	r3, [r7, #15]
 80095bc:	e0f3      	b.n	80097a6 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 80095be:	78bb      	ldrb	r3, [r7, #2]
 80095c0:	2b15      	cmp	r3, #21
 80095c2:	f040 8097 	bne.w	80096f4 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80095c6:	2201      	movs	r2, #1
 80095c8:	21ff      	movs	r1, #255	; 0xff
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f003 fbb0 	bl	800cd30 <VL53L0X_WrByte>
 80095d0:	4603      	mov	r3, r0
 80095d2:	461a      	mov	r2, r3
 80095d4:	7bfb      	ldrb	r3, [r7, #15]
 80095d6:	4313      	orrs	r3, r2
 80095d8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80095da:	2200      	movs	r2, #0
 80095dc:	2100      	movs	r1, #0
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f003 fba6 	bl	800cd30 <VL53L0X_WrByte>
 80095e4:	4603      	mov	r3, r0
 80095e6:	461a      	mov	r2, r3
 80095e8:	7bfb      	ldrb	r3, [r7, #15]
 80095ea:	4313      	orrs	r3, r2
 80095ec:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80095ee:	2200      	movs	r2, #0
 80095f0:	21ff      	movs	r1, #255	; 0xff
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f003 fb9c 	bl	800cd30 <VL53L0X_WrByte>
 80095f8:	4603      	mov	r3, r0
 80095fa:	461a      	mov	r2, r3
 80095fc:	7bfb      	ldrb	r3, [r7, #15]
 80095fe:	4313      	orrs	r3, r2
 8009600:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009602:	2201      	movs	r2, #1
 8009604:	2180      	movs	r1, #128	; 0x80
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f003 fb92 	bl	800cd30 <VL53L0X_WrByte>
 800960c:	4603      	mov	r3, r0
 800960e:	461a      	mov	r2, r3
 8009610:	7bfb      	ldrb	r3, [r7, #15]
 8009612:	4313      	orrs	r3, r2
 8009614:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8009616:	2202      	movs	r2, #2
 8009618:	2185      	movs	r1, #133	; 0x85
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f003 fb88 	bl	800cd30 <VL53L0X_WrByte>
 8009620:	4603      	mov	r3, r0
 8009622:	461a      	mov	r2, r3
 8009624:	7bfb      	ldrb	r3, [r7, #15]
 8009626:	4313      	orrs	r3, r2
 8009628:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800962a:	2204      	movs	r2, #4
 800962c:	21ff      	movs	r1, #255	; 0xff
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f003 fb7e 	bl	800cd30 <VL53L0X_WrByte>
 8009634:	4603      	mov	r3, r0
 8009636:	461a      	mov	r2, r3
 8009638:	7bfb      	ldrb	r3, [r7, #15]
 800963a:	4313      	orrs	r3, r2
 800963c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800963e:	2200      	movs	r2, #0
 8009640:	21cd      	movs	r1, #205	; 0xcd
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f003 fb74 	bl	800cd30 <VL53L0X_WrByte>
 8009648:	4603      	mov	r3, r0
 800964a:	461a      	mov	r2, r3
 800964c:	7bfb      	ldrb	r3, [r7, #15]
 800964e:	4313      	orrs	r3, r2
 8009650:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8009652:	2211      	movs	r2, #17
 8009654:	21cc      	movs	r1, #204	; 0xcc
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f003 fb6a 	bl	800cd30 <VL53L0X_WrByte>
 800965c:	4603      	mov	r3, r0
 800965e:	461a      	mov	r2, r3
 8009660:	7bfb      	ldrb	r3, [r7, #15]
 8009662:	4313      	orrs	r3, r2
 8009664:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8009666:	2207      	movs	r2, #7
 8009668:	21ff      	movs	r1, #255	; 0xff
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f003 fb60 	bl	800cd30 <VL53L0X_WrByte>
 8009670:	4603      	mov	r3, r0
 8009672:	461a      	mov	r2, r3
 8009674:	7bfb      	ldrb	r3, [r7, #15]
 8009676:	4313      	orrs	r3, r2
 8009678:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800967a:	2200      	movs	r2, #0
 800967c:	21be      	movs	r1, #190	; 0xbe
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f003 fb56 	bl	800cd30 <VL53L0X_WrByte>
 8009684:	4603      	mov	r3, r0
 8009686:	461a      	mov	r2, r3
 8009688:	7bfb      	ldrb	r3, [r7, #15]
 800968a:	4313      	orrs	r3, r2
 800968c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800968e:	2206      	movs	r2, #6
 8009690:	21ff      	movs	r1, #255	; 0xff
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f003 fb4c 	bl	800cd30 <VL53L0X_WrByte>
 8009698:	4603      	mov	r3, r0
 800969a:	461a      	mov	r2, r3
 800969c:	7bfb      	ldrb	r3, [r7, #15]
 800969e:	4313      	orrs	r3, r2
 80096a0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 80096a2:	2209      	movs	r2, #9
 80096a4:	21cc      	movs	r1, #204	; 0xcc
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f003 fb42 	bl	800cd30 <VL53L0X_WrByte>
 80096ac:	4603      	mov	r3, r0
 80096ae:	461a      	mov	r2, r3
 80096b0:	7bfb      	ldrb	r3, [r7, #15]
 80096b2:	4313      	orrs	r3, r2
 80096b4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80096b6:	2200      	movs	r2, #0
 80096b8:	21ff      	movs	r1, #255	; 0xff
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f003 fb38 	bl	800cd30 <VL53L0X_WrByte>
 80096c0:	4603      	mov	r3, r0
 80096c2:	461a      	mov	r2, r3
 80096c4:	7bfb      	ldrb	r3, [r7, #15]
 80096c6:	4313      	orrs	r3, r2
 80096c8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80096ca:	2201      	movs	r2, #1
 80096cc:	21ff      	movs	r1, #255	; 0xff
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f003 fb2e 	bl	800cd30 <VL53L0X_WrByte>
 80096d4:	4603      	mov	r3, r0
 80096d6:	461a      	mov	r2, r3
 80096d8:	7bfb      	ldrb	r3, [r7, #15]
 80096da:	4313      	orrs	r3, r2
 80096dc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80096de:	2200      	movs	r2, #0
 80096e0:	2100      	movs	r1, #0
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f003 fb24 	bl	800cd30 <VL53L0X_WrByte>
 80096e8:	4603      	mov	r3, r0
 80096ea:	461a      	mov	r2, r3
 80096ec:	7bfb      	ldrb	r3, [r7, #15]
 80096ee:	4313      	orrs	r3, r2
 80096f0:	73fb      	strb	r3, [r7, #15]
 80096f2:	e058      	b.n	80097a6 <VL53L0X_SetGpioConfig+0x23a>
>>>>>>> ModeSelect_v2

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 800a794:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d121      	bne.n	800a7e0 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 800a79c:	787b      	ldrb	r3, [r7, #1]
 800a79e:	2b04      	cmp	r3, #4
 800a7a0:	d81b      	bhi.n	800a7da <VL53L0X_SetGpioConfig+0x1ce>
 800a7a2:	a201      	add	r2, pc, #4	; (adr r2, 800a7a8 <VL53L0X_SetGpioConfig+0x19c>)
 800a7a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7a8:	0800a7bd 	.word	0x0800a7bd
 800a7ac:	0800a7c3 	.word	0x0800a7c3
 800a7b0:	0800a7c9 	.word	0x0800a7c9
 800a7b4:	0800a7cf 	.word	0x0800a7cf
 800a7b8:	0800a7d5 	.word	0x0800a7d5
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	73bb      	strb	r3, [r7, #14]
				break;
 800a7c0:	e00f      	b.n	800a7e2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	73bb      	strb	r3, [r7, #14]
				break;
 800a7c6:	e00c      	b.n	800a7e2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 800a7c8:	2302      	movs	r3, #2
 800a7ca:	73bb      	strb	r3, [r7, #14]
				break;
 800a7cc:	e009      	b.n	800a7e2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800a7ce:	2303      	movs	r3, #3
 800a7d0:	73bb      	strb	r3, [r7, #14]
				break;
 800a7d2:	e006      	b.n	800a7e2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 800a7d4:	2304      	movs	r3, #4
 800a7d6:	73bb      	strb	r3, [r7, #14]
				break;
 800a7d8:	e003      	b.n	800a7e2 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 800a7da:	23f5      	movs	r3, #245	; 0xf5
 800a7dc:	73fb      	strb	r3, [r7, #15]
 800a7de:	e000      	b.n	800a7e2 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 800a7e0:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 800a7e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d107      	bne.n	800a7fa <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 800a7ea:	7bbb      	ldrb	r3, [r7, #14]
 800a7ec:	461a      	mov	r2, r3
 800a7ee:	210a      	movs	r1, #10
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f003 faed 	bl	800ddd0 <VL53L0X_WrByte>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800a7fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d10f      	bne.n	800a822 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800a802:	7e3b      	ldrb	r3, [r7, #24]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d102      	bne.n	800a80e <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 800a808:	2300      	movs	r3, #0
 800a80a:	73bb      	strb	r3, [r7, #14]
 800a80c:	e001      	b.n	800a812 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 800a80e:	2310      	movs	r3, #16
 800a810:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800a812:	7bbb      	ldrb	r3, [r7, #14]
 800a814:	22ef      	movs	r2, #239	; 0xef
 800a816:	2184      	movs	r1, #132	; 0x84
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f003 fb27 	bl	800de6c <VL53L0X_UpdateByte>
 800a81e:	4603      	mov	r3, r0
 800a820:	73fb      	strb	r3, [r7, #15]
=======
 80096f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d121      	bne.n	8009740 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 80096fc:	787b      	ldrb	r3, [r7, #1]
 80096fe:	2b04      	cmp	r3, #4
 8009700:	d81b      	bhi.n	800973a <VL53L0X_SetGpioConfig+0x1ce>
 8009702:	a201      	add	r2, pc, #4	; (adr r2, 8009708 <VL53L0X_SetGpioConfig+0x19c>)
 8009704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009708:	0800971d 	.word	0x0800971d
 800970c:	08009723 	.word	0x08009723
 8009710:	08009729 	.word	0x08009729
 8009714:	0800972f 	.word	0x0800972f
 8009718:	08009735 	.word	0x08009735
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 800971c:	2300      	movs	r3, #0
 800971e:	73bb      	strb	r3, [r7, #14]
				break;
 8009720:	e00f      	b.n	8009742 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8009722:	2301      	movs	r3, #1
 8009724:	73bb      	strb	r3, [r7, #14]
				break;
 8009726:	e00c      	b.n	8009742 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8009728:	2302      	movs	r3, #2
 800972a:	73bb      	strb	r3, [r7, #14]
				break;
 800972c:	e009      	b.n	8009742 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800972e:	2303      	movs	r3, #3
 8009730:	73bb      	strb	r3, [r7, #14]
				break;
 8009732:	e006      	b.n	8009742 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8009734:	2304      	movs	r3, #4
 8009736:	73bb      	strb	r3, [r7, #14]
				break;
 8009738:	e003      	b.n	8009742 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 800973a:	23f5      	movs	r3, #245	; 0xf5
 800973c:	73fb      	strb	r3, [r7, #15]
 800973e:	e000      	b.n	8009742 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8009740:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 8009742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d107      	bne.n	800975a <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 800974a:	7bbb      	ldrb	r3, [r7, #14]
 800974c:	461a      	mov	r2, r3
 800974e:	210a      	movs	r1, #10
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f003 faed 	bl	800cd30 <VL53L0X_WrByte>
 8009756:	4603      	mov	r3, r0
 8009758:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800975a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d10f      	bne.n	8009782 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8009762:	7e3b      	ldrb	r3, [r7, #24]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d102      	bne.n	800976e <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8009768:	2300      	movs	r3, #0
 800976a:	73bb      	strb	r3, [r7, #14]
 800976c:	e001      	b.n	8009772 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 800976e:	2310      	movs	r3, #16
 8009770:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8009772:	7bbb      	ldrb	r3, [r7, #14]
 8009774:	22ef      	movs	r2, #239	; 0xef
 8009776:	2184      	movs	r1, #132	; 0x84
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f003 fb27 	bl	800cdcc <VL53L0X_UpdateByte>
 800977e:	4603      	mov	r3, r0
 8009780:	73fb      	strb	r3, [r7, #15]
>>>>>>> ModeSelect_v2
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
<<<<<<< HEAD
 800a822:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d103      	bne.n	800a832 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	787a      	ldrb	r2, [r7, #1]
 800a82e:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800a832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d105      	bne.n	800a846 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800a83a:	2100      	movs	r1, #0
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f000 f83f 	bl	800a8c0 <VL53L0X_ClearInterruptMask>
 800a842:	4603      	mov	r3, r0
 800a844:	73fb      	strb	r3, [r7, #15]
=======
 8009782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d103      	bne.n	8009792 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	787a      	ldrb	r2, [r7, #1]
 800978e:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8009792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d105      	bne.n	80097a6 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800979a:	2100      	movs	r1, #0
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f000 f83f 	bl	8009820 <VL53L0X_ClearInterruptMask>
 80097a2:	4603      	mov	r3, r0
 80097a4:	73fb      	strb	r3, [r7, #15]
>>>>>>> ModeSelect_v2

	}

	LOG_FUNCTION_END(Status);
	return Status;
<<<<<<< HEAD
 800a846:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	3710      	adds	r7, #16
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}
 800a852:	bf00      	nop

0800a854 <VL53L0X_GetInterruptThresholds>:
=======
 80097a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3710      	adds	r7, #16
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	bf00      	nop

080097b4 <VL53L0X_GetInterruptThresholds>:
>>>>>>> ModeSelect_v2
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
<<<<<<< HEAD
 800a854:	b580      	push	{r7, lr}
 800a856:	b086      	sub	sp, #24
 800a858:	af00      	add	r7, sp, #0
 800a85a:	60f8      	str	r0, [r7, #12]
 800a85c:	607a      	str	r2, [r7, #4]
 800a85e:	603b      	str	r3, [r7, #0]
 800a860:	460b      	mov	r3, r1
 800a862:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a864:	2300      	movs	r3, #0
 800a866:	75fb      	strb	r3, [r7, #23]
=======
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b086      	sub	sp, #24
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	60f8      	str	r0, [r7, #12]
 80097bc:	607a      	str	r2, [r7, #4]
 80097be:	603b      	str	r3, [r7, #0]
 80097c0:	460b      	mov	r3, r1
 80097c2:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80097c4:	2300      	movs	r3, #0
 80097c6:	75fb      	strb	r3, [r7, #23]
>>>>>>> ModeSelect_v2
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
<<<<<<< HEAD
 800a868:	f107 0314 	add.w	r3, r7, #20
 800a86c:	461a      	mov	r2, r3
 800a86e:	210e      	movs	r1, #14
 800a870:	68f8      	ldr	r0, [r7, #12]
 800a872:	f003 fb59 	bl	800df28 <VL53L0X_RdWord>
 800a876:	4603      	mov	r3, r0
 800a878:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800a87a:	8abb      	ldrh	r3, [r7, #20]
 800a87c:	045b      	lsls	r3, r3, #17
 800a87e:	461a      	mov	r2, r3
 800a880:	4b0e      	ldr	r3, [pc, #56]	; (800a8bc <VL53L0X_GetInterruptThresholds+0x68>)
 800a882:	4013      	ands	r3, r2
 800a884:	687a      	ldr	r2, [r7, #4]
 800a886:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800a888:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d10f      	bne.n	800a8b0 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800a890:	f107 0314 	add.w	r3, r7, #20
 800a894:	461a      	mov	r2, r3
 800a896:	210c      	movs	r1, #12
 800a898:	68f8      	ldr	r0, [r7, #12]
 800a89a:	f003 fb45 	bl	800df28 <VL53L0X_RdWord>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	75fb      	strb	r3, [r7, #23]
=======
 80097c8:	f107 0314 	add.w	r3, r7, #20
 80097cc:	461a      	mov	r2, r3
 80097ce:	210e      	movs	r1, #14
 80097d0:	68f8      	ldr	r0, [r7, #12]
 80097d2:	f003 fb59 	bl	800ce88 <VL53L0X_RdWord>
 80097d6:	4603      	mov	r3, r0
 80097d8:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80097da:	8abb      	ldrh	r3, [r7, #20]
 80097dc:	045b      	lsls	r3, r3, #17
 80097de:	461a      	mov	r2, r3
 80097e0:	4b0e      	ldr	r3, [pc, #56]	; (800981c <VL53L0X_GetInterruptThresholds+0x68>)
 80097e2:	4013      	ands	r3, r2
 80097e4:	687a      	ldr	r2, [r7, #4]
 80097e6:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 80097e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d10f      	bne.n	8009810 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 80097f0:	f107 0314 	add.w	r3, r7, #20
 80097f4:	461a      	mov	r2, r3
 80097f6:	210c      	movs	r1, #12
 80097f8:	68f8      	ldr	r0, [r7, #12]
 80097fa:	f003 fb45 	bl	800ce88 <VL53L0X_RdWord>
 80097fe:	4603      	mov	r3, r0
 8009800:	75fb      	strb	r3, [r7, #23]
>>>>>>> ModeSelect_v2
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
<<<<<<< HEAD
 800a8a2:	8abb      	ldrh	r3, [r7, #20]
 800a8a4:	045b      	lsls	r3, r3, #17
 800a8a6:	461a      	mov	r2, r3
 800a8a8:	4b04      	ldr	r3, [pc, #16]	; (800a8bc <VL53L0X_GetInterruptThresholds+0x68>)
 800a8aa:	4013      	ands	r3, r2
		*pThresholdHigh =
 800a8ac:	683a      	ldr	r2, [r7, #0]
 800a8ae:	6013      	str	r3, [r2, #0]
=======
 8009802:	8abb      	ldrh	r3, [r7, #20]
 8009804:	045b      	lsls	r3, r3, #17
 8009806:	461a      	mov	r2, r3
 8009808:	4b04      	ldr	r3, [pc, #16]	; (800981c <VL53L0X_GetInterruptThresholds+0x68>)
 800980a:	4013      	ands	r3, r2
		*pThresholdHigh =
 800980c:	683a      	ldr	r2, [r7, #0]
 800980e:	6013      	str	r3, [r2, #0]
>>>>>>> ModeSelect_v2
	}

	LOG_FUNCTION_END(Status);
	return Status;
<<<<<<< HEAD
 800a8b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	3718      	adds	r7, #24
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}
 800a8bc:	1ffe0000 	.word	0x1ffe0000

0800a8c0 <VL53L0X_ClearInterruptMask>:
=======
 8009810:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009814:	4618      	mov	r0, r3
 8009816:	3718      	adds	r7, #24
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}
 800981c:	1ffe0000 	.word	0x1ffe0000

08009820 <VL53L0X_ClearInterruptMask>:
>>>>>>> ModeSelect_v2
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
<<<<<<< HEAD
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b084      	sub	sp, #16
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
 800a8c8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	73fb      	strb	r3, [r7, #15]
=======
 8009820:	b580      	push	{r7, lr}
 8009822:	b084      	sub	sp, #16
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
 8009828:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800982a:	2300      	movs	r3, #0
 800982c:	73fb      	strb	r3, [r7, #15]
>>>>>>> ModeSelect_v2
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
<<<<<<< HEAD
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800a8d2:	2201      	movs	r2, #1
 800a8d4:	210b      	movs	r1, #11
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f003 fa7a 	bl	800ddd0 <VL53L0X_WrByte>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	210b      	movs	r1, #11
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f003 fa73 	bl	800ddd0 <VL53L0X_WrByte>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	461a      	mov	r2, r3
 800a8ee:	7bfb      	ldrb	r3, [r7, #15]
 800a8f0:	4313      	orrs	r3, r2
 800a8f2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800a8f4:	f107 030d 	add.w	r3, r7, #13
 800a8f8:	461a      	mov	r2, r3
 800a8fa:	2113      	movs	r1, #19
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f003 fae9 	bl	800ded4 <VL53L0X_RdByte>
 800a902:	4603      	mov	r3, r0
 800a904:	461a      	mov	r2, r3
 800a906:	7bfb      	ldrb	r3, [r7, #15]
 800a908:	4313      	orrs	r3, r2
 800a90a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 800a90c:	7bbb      	ldrb	r3, [r7, #14]
 800a90e:	3301      	adds	r3, #1
 800a910:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800a912:	7b7b      	ldrb	r3, [r7, #13]
 800a914:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d006      	beq.n	800a92a <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 800a91c:	7bbb      	ldrb	r3, [r7, #14]
 800a91e:	2b02      	cmp	r3, #2
 800a920:	d803      	bhi.n	800a92a <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800a922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d0d3      	beq.n	800a8d2 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800a92a:	7bbb      	ldrb	r3, [r7, #14]
 800a92c:	2b02      	cmp	r3, #2
 800a92e:	d901      	bls.n	800a934 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800a930:	23f4      	movs	r3, #244	; 0xf4
 800a932:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800a934:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3710      	adds	r7, #16
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}

0800a940 <VL53L0X_GetInterruptMaskStatus>:
=======
 800982e:	2300      	movs	r3, #0
 8009830:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8009832:	2201      	movs	r2, #1
 8009834:	210b      	movs	r1, #11
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f003 fa7a 	bl	800cd30 <VL53L0X_WrByte>
 800983c:	4603      	mov	r3, r0
 800983e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8009840:	2200      	movs	r2, #0
 8009842:	210b      	movs	r1, #11
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f003 fa73 	bl	800cd30 <VL53L0X_WrByte>
 800984a:	4603      	mov	r3, r0
 800984c:	461a      	mov	r2, r3
 800984e:	7bfb      	ldrb	r3, [r7, #15]
 8009850:	4313      	orrs	r3, r2
 8009852:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8009854:	f107 030d 	add.w	r3, r7, #13
 8009858:	461a      	mov	r2, r3
 800985a:	2113      	movs	r1, #19
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f003 fae9 	bl	800ce34 <VL53L0X_RdByte>
 8009862:	4603      	mov	r3, r0
 8009864:	461a      	mov	r2, r3
 8009866:	7bfb      	ldrb	r3, [r7, #15]
 8009868:	4313      	orrs	r3, r2
 800986a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 800986c:	7bbb      	ldrb	r3, [r7, #14]
 800986e:	3301      	adds	r3, #1
 8009870:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8009872:	7b7b      	ldrb	r3, [r7, #13]
 8009874:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8009878:	2b00      	cmp	r3, #0
 800987a:	d006      	beq.n	800988a <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 800987c:	7bbb      	ldrb	r3, [r7, #14]
 800987e:	2b02      	cmp	r3, #2
 8009880:	d803      	bhi.n	800988a <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8009882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d0d3      	beq.n	8009832 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800988a:	7bbb      	ldrb	r3, [r7, #14]
 800988c:	2b02      	cmp	r3, #2
 800988e:	d901      	bls.n	8009894 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8009890:	23f4      	movs	r3, #244	; 0xf4
 8009892:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8009894:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009898:	4618      	mov	r0, r3
 800989a:	3710      	adds	r7, #16
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}

080098a0 <VL53L0X_GetInterruptMaskStatus>:
>>>>>>> ModeSelect_v2

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
<<<<<<< HEAD
 800a940:	b580      	push	{r7, lr}
 800a942:	b084      	sub	sp, #16
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
 800a948:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a94a:	2300      	movs	r3, #0
 800a94c:	73fb      	strb	r3, [r7, #15]
=======
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b084      	sub	sp, #16
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
 80098a8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80098aa:	2300      	movs	r3, #0
 80098ac:	73fb      	strb	r3, [r7, #15]
>>>>>>> ModeSelect_v2
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
<<<<<<< HEAD
 800a94e:	f107 030e 	add.w	r3, r7, #14
 800a952:	461a      	mov	r2, r3
 800a954:	2113      	movs	r1, #19
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f003 fabc 	bl	800ded4 <VL53L0X_RdByte>
 800a95c:	4603      	mov	r3, r0
 800a95e:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 800a960:	7bbb      	ldrb	r3, [r7, #14]
 800a962:	f003 0207 	and.w	r2, r3, #7
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800a96a:	7bbb      	ldrb	r3, [r7, #14]
 800a96c:	f003 0318 	and.w	r3, r3, #24
 800a970:	2b00      	cmp	r3, #0
 800a972:	d001      	beq.n	800a978 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800a974:	23fa      	movs	r3, #250	; 0xfa
 800a976:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800a978:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a97c:	4618      	mov	r0, r3
 800a97e:	3710      	adds	r7, #16
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}

0800a984 <VL53L0X_PerformRefSpadManagement>:
=======
 80098ae:	f107 030e 	add.w	r3, r7, #14
 80098b2:	461a      	mov	r2, r3
 80098b4:	2113      	movs	r1, #19
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f003 fabc 	bl	800ce34 <VL53L0X_RdByte>
 80098bc:	4603      	mov	r3, r0
 80098be:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 80098c0:	7bbb      	ldrb	r3, [r7, #14]
 80098c2:	f003 0207 	and.w	r2, r3, #7
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 80098ca:	7bbb      	ldrb	r3, [r7, #14]
 80098cc:	f003 0318 	and.w	r3, r3, #24
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d001      	beq.n	80098d8 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 80098d4:	23fa      	movs	r3, #250	; 0xfa
 80098d6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80098d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80098dc:	4618      	mov	r0, r3
 80098de:	3710      	adds	r7, #16
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}

080098e4 <VL53L0X_PerformRefSpadManagement>:
>>>>>>> ModeSelect_v2
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
<<<<<<< HEAD
 800a984:	b580      	push	{r7, lr}
 800a986:	b086      	sub	sp, #24
 800a988:	af00      	add	r7, sp, #0
 800a98a:	60f8      	str	r0, [r7, #12]
 800a98c:	60b9      	str	r1, [r7, #8]
 800a98e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a990:	2300      	movs	r3, #0
 800a992:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800a994:	687a      	ldr	r2, [r7, #4]
 800a996:	68b9      	ldr	r1, [r7, #8]
 800a998:	68f8      	ldr	r0, [r7, #12]
 800a99a:	f000 fa03 	bl	800ada4 <VL53L0X_perform_ref_spad_management>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	75fb      	strb	r3, [r7, #23]
=======
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b086      	sub	sp, #24
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	60f8      	str	r0, [r7, #12]
 80098ec:	60b9      	str	r1, [r7, #8]
 80098ee:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80098f0:	2300      	movs	r3, #0
 80098f2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 80098f4:	687a      	ldr	r2, [r7, #4]
 80098f6:	68b9      	ldr	r1, [r7, #8]
 80098f8:	68f8      	ldr	r0, [r7, #12]
 80098fa:	f000 fa03 	bl	8009d04 <VL53L0X_perform_ref_spad_management>
 80098fe:	4603      	mov	r3, r0
 8009900:	75fb      	strb	r3, [r7, #23]
>>>>>>> ModeSelect_v2
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
<<<<<<< HEAD
 800a9a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3718      	adds	r7, #24
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}

0800a9ae <VL53L0X_get_offset_calibration_data_micro_meter>:
=======
 8009902:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009906:	4618      	mov	r0, r3
 8009908:	3718      	adds	r7, #24
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}

0800990e <VL53L0X_get_offset_calibration_data_micro_meter>:
>>>>>>> ModeSelect_v2
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
<<<<<<< HEAD
 800a9ae:	b580      	push	{r7, lr}
 800a9b0:	b084      	sub	sp, #16
 800a9b2:	af00      	add	r7, sp, #0
 800a9b4:	6078      	str	r0, [r7, #4]
 800a9b6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 800a9bc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800a9c0:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800a9c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a9c6:	817b      	strh	r3, [r7, #10]
=======
 800990e:	b580      	push	{r7, lr}
 8009910:	b084      	sub	sp, #16
 8009912:	af00      	add	r7, sp, #0
 8009914:	6078      	str	r0, [r7, #4]
 8009916:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009918:	2300      	movs	r3, #0
 800991a:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 800991c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8009920:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8009922:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009926:	817b      	strh	r3, [r7, #10]
>>>>>>> ModeSelect_v2

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
<<<<<<< HEAD
 800a9c8:	f107 0308 	add.w	r3, r7, #8
 800a9cc:	461a      	mov	r2, r3
 800a9ce:	2128      	movs	r1, #40	; 0x28
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f003 faa9 	bl	800df28 <VL53L0X_RdWord>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	73fb      	strb	r3, [r7, #15]
=======
 8009928:	f107 0308 	add.w	r3, r7, #8
 800992c:	461a      	mov	r2, r3
 800992e:	2128      	movs	r1, #40	; 0x28
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f003 faa9 	bl	800ce88 <VL53L0X_RdWord>
 8009936:	4603      	mov	r3, r0
 8009938:	73fb      	strb	r3, [r7, #15]
>>>>>>> ModeSelect_v2
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 800a9da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d11e      	bne.n	800aa20 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800a9e2:	893b      	ldrh	r3, [r7, #8]
 800a9e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a9e8:	b29b      	uxth	r3, r3
 800a9ea:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800a9ec:	893b      	ldrh	r3, [r7, #8]
 800a9ee:	461a      	mov	r2, r3
 800a9f0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	dd0b      	ble.n	800aa10 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800a9f8:	893a      	ldrh	r2, [r7, #8]
 800a9fa:	897b      	ldrh	r3, [r7, #10]
 800a9fc:	1ad3      	subs	r3, r2, r3
 800a9fe:	b29b      	uxth	r3, r3
 800aa00:	b21b      	sxth	r3, r3
 800aa02:	461a      	mov	r2, r3
					* 250;
 800aa04:	23fa      	movs	r3, #250	; 0xfa
 800aa06:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	601a      	str	r2, [r3, #0]
 800aa0e:	e007      	b.n	800aa20 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 800aa10:	893b      	ldrh	r3, [r7, #8]
 800aa12:	b21b      	sxth	r3, r3
 800aa14:	461a      	mov	r2, r3
 800aa16:	23fa      	movs	r3, #250	; 0xfa
 800aa18:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	601a      	str	r2, [r3, #0]
=======
 800993a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d11e      	bne.n	8009980 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8009942:	893b      	ldrh	r3, [r7, #8]
 8009944:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009948:	b29b      	uxth	r3, r3
 800994a:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800994c:	893b      	ldrh	r3, [r7, #8]
 800994e:	461a      	mov	r2, r3
 8009950:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009954:	429a      	cmp	r2, r3
 8009956:	dd0b      	ble.n	8009970 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8009958:	893a      	ldrh	r2, [r7, #8]
 800995a:	897b      	ldrh	r3, [r7, #10]
 800995c:	1ad3      	subs	r3, r2, r3
 800995e:	b29b      	uxth	r3, r3
 8009960:	b21b      	sxth	r3, r3
 8009962:	461a      	mov	r2, r3
					* 250;
 8009964:	23fa      	movs	r3, #250	; 0xfa
 8009966:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	601a      	str	r2, [r3, #0]
 800996e:	e007      	b.n	8009980 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8009970:	893b      	ldrh	r3, [r7, #8]
 8009972:	b21b      	sxth	r3, r3
 8009974:	461a      	mov	r2, r3
 8009976:	23fa      	movs	r3, #250	; 0xfa
 8009978:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	601a      	str	r2, [r3, #0]
>>>>>>> ModeSelect_v2

	}

	return Status;
<<<<<<< HEAD
 800aa20:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	3710      	adds	r7, #16
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}

0800aa2c <get_next_good_spad>:
=======
 8009980:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009984:	4618      	mov	r0, r3
 8009986:	3710      	adds	r7, #16
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}

0800998c <get_next_good_spad>:
>>>>>>> ModeSelect_v2
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
<<<<<<< HEAD
 800aa2c:	b480      	push	{r7}
 800aa2e:	b08b      	sub	sp, #44	; 0x2c
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	60f8      	str	r0, [r7, #12]
 800aa34:	60b9      	str	r1, [r7, #8]
 800aa36:	607a      	str	r2, [r7, #4]
 800aa38:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800aa3a:	2308      	movs	r3, #8
 800aa3c:	61bb      	str	r3, [r7, #24]
=======
 800998c:	b480      	push	{r7}
 800998e:	b08b      	sub	sp, #44	; 0x2c
 8009990:	af00      	add	r7, sp, #0
 8009992:	60f8      	str	r0, [r7, #12]
 8009994:	60b9      	str	r1, [r7, #8]
 8009996:	607a      	str	r2, [r7, #4]
 8009998:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800999a:	2308      	movs	r3, #8
 800999c:	61bb      	str	r3, [r7, #24]
>>>>>>> ModeSelect_v2
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
<<<<<<< HEAD
 800aa3e:	2300      	movs	r3, #0
 800aa40:	77bb      	strb	r3, [r7, #30]
=======
 800999e:	2300      	movs	r3, #0
 80099a0:	77bb      	strb	r3, [r7, #30]
>>>>>>> ModeSelect_v2
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
<<<<<<< HEAD
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	f04f 32ff 	mov.w	r2, #4294967295
 800aa48:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800aa4a:	687a      	ldr	r2, [r7, #4]
 800aa4c:	69bb      	ldr	r3, [r7, #24]
 800aa4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa52:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	69ba      	ldr	r2, [r7, #24]
 800aa58:	fbb3 f2f2 	udiv	r2, r3, r2
 800aa5c:	69b9      	ldr	r1, [r7, #24]
 800aa5e:	fb01 f202 	mul.w	r2, r1, r2
 800aa62:	1a9b      	subs	r3, r3, r2
 800aa64:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	627b      	str	r3, [r7, #36]	; 0x24
 800aa6a:	e030      	b.n	800aace <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800aa70:	68fa      	ldr	r2, [r7, #12]
 800aa72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa74:	4413      	add	r3, r2
 800aa76:	781b      	ldrb	r3, [r3, #0]
 800aa78:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800aa7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	429a      	cmp	r2, r3
 800aa80:	d11e      	bne.n	800aac0 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800aa82:	7ffa      	ldrb	r2, [r7, #31]
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	fa42 f303 	asr.w	r3, r2, r3
 800aa8a:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 800aa8c:	693b      	ldr	r3, [r7, #16]
 800aa8e:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800aa90:	e016      	b.n	800aac0 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800aa92:	7ffb      	ldrb	r3, [r7, #31]
 800aa94:	f003 0301 	and.w	r3, r3, #1
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d00b      	beq.n	800aab4 <get_next_good_spad+0x88>
				success = 1;
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800aaa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa2:	69ba      	ldr	r2, [r7, #24]
 800aaa4:	fb03 f202 	mul.w	r2, r3, r2
 800aaa8:	6a3b      	ldr	r3, [r7, #32]
 800aaaa:	4413      	add	r3, r2
 800aaac:	461a      	mov	r2, r3
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	601a      	str	r2, [r3, #0]
				break;
 800aab2:	e009      	b.n	800aac8 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 800aab4:	7ffb      	ldrb	r3, [r7, #31]
 800aab6:	085b      	lsrs	r3, r3, #1
 800aab8:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800aaba:	6a3b      	ldr	r3, [r7, #32]
 800aabc:	3301      	adds	r3, #1
 800aabe:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 800aac0:	6a3a      	ldr	r2, [r7, #32]
 800aac2:	69bb      	ldr	r3, [r7, #24]
 800aac4:	429a      	cmp	r2, r3
 800aac6:	d3e4      	bcc.n	800aa92 <get_next_good_spad+0x66>
				coarseIndex++) {
 800aac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaca:	3301      	adds	r3, #1
 800aacc:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800aace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	429a      	cmp	r2, r3
 800aad4:	d202      	bcs.n	800aadc <get_next_good_spad+0xb0>
 800aad6:	7fbb      	ldrb	r3, [r7, #30]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d0c7      	beq.n	800aa6c <get_next_good_spad+0x40>
		}
	}
}
 800aadc:	bf00      	nop
 800aade:	372c      	adds	r7, #44	; 0x2c
 800aae0:	46bd      	mov	sp, r7
 800aae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae6:	4770      	bx	lr

0800aae8 <is_aperture>:
=======
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	f04f 32ff 	mov.w	r2, #4294967295
 80099a8:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 80099aa:	687a      	ldr	r2, [r7, #4]
 80099ac:	69bb      	ldr	r3, [r7, #24]
 80099ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80099b2:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	69ba      	ldr	r2, [r7, #24]
 80099b8:	fbb3 f2f2 	udiv	r2, r3, r2
 80099bc:	69b9      	ldr	r1, [r7, #24]
 80099be:	fb01 f202 	mul.w	r2, r1, r2
 80099c2:	1a9b      	subs	r3, r3, r2
 80099c4:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	627b      	str	r3, [r7, #36]	; 0x24
 80099ca:	e030      	b.n	8009a2e <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 80099cc:	2300      	movs	r3, #0
 80099ce:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 80099d0:	68fa      	ldr	r2, [r7, #12]
 80099d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d4:	4413      	add	r3, r2
 80099d6:	781b      	ldrb	r3, [r3, #0]
 80099d8:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 80099da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	429a      	cmp	r2, r3
 80099e0:	d11e      	bne.n	8009a20 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 80099e2:	7ffa      	ldrb	r2, [r7, #31]
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	fa42 f303 	asr.w	r3, r2, r3
 80099ea:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 80099f0:	e016      	b.n	8009a20 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 80099f2:	7ffb      	ldrb	r3, [r7, #31]
 80099f4:	f003 0301 	and.w	r3, r3, #1
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d00b      	beq.n	8009a14 <get_next_good_spad+0x88>
				success = 1;
 80099fc:	2301      	movs	r3, #1
 80099fe:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8009a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a02:	69ba      	ldr	r2, [r7, #24]
 8009a04:	fb03 f202 	mul.w	r2, r3, r2
 8009a08:	6a3b      	ldr	r3, [r7, #32]
 8009a0a:	4413      	add	r3, r2
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	601a      	str	r2, [r3, #0]
				break;
 8009a12:	e009      	b.n	8009a28 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8009a14:	7ffb      	ldrb	r3, [r7, #31]
 8009a16:	085b      	lsrs	r3, r3, #1
 8009a18:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8009a1a:	6a3b      	ldr	r3, [r7, #32]
 8009a1c:	3301      	adds	r3, #1
 8009a1e:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8009a20:	6a3a      	ldr	r2, [r7, #32]
 8009a22:	69bb      	ldr	r3, [r7, #24]
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d3e4      	bcc.n	80099f2 <get_next_good_spad+0x66>
				coarseIndex++) {
 8009a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a2a:	3301      	adds	r3, #1
 8009a2c:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8009a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d202      	bcs.n	8009a3c <get_next_good_spad+0xb0>
 8009a36:	7fbb      	ldrb	r3, [r7, #30]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d0c7      	beq.n	80099cc <get_next_good_spad+0x40>
		}
	}
}
 8009a3c:	bf00      	nop
 8009a3e:	372c      	adds	r7, #44	; 0x2c
 8009a40:	46bd      	mov	sp, r7
 8009a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a46:	4770      	bx	lr

08009a48 <is_aperture>:
>>>>>>> ModeSelect_v2


uint8_t is_aperture(uint32_t spadIndex)
{
<<<<<<< HEAD
 800aae8:	b480      	push	{r7}
 800aaea:	b085      	sub	sp, #20
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
=======
 8009a48:	b480      	push	{r7}
 8009a4a:	b085      	sub	sp, #20
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
>>>>>>> ModeSelect_v2
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
<<<<<<< HEAD
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	099b      	lsrs	r3, r3, #6
 800aaf8:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800aafa:	4a07      	ldr	r2, [pc, #28]	; (800ab18 <is_aperture+0x30>)
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d101      	bne.n	800ab0a <is_aperture+0x22>
		isAperture = 0;
 800ab06:	2300      	movs	r3, #0
 800ab08:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800ab0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3714      	adds	r7, #20
 800ab10:	46bd      	mov	sp, r7
 800ab12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab16:	4770      	bx	lr
 800ab18:	200002bc 	.word	0x200002bc

0800ab1c <enable_spad_bit>:
=======
 8009a50:	2301      	movs	r3, #1
 8009a52:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	099b      	lsrs	r3, r3, #6
 8009a58:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8009a5a:	4a07      	ldr	r2, [pc, #28]	; (8009a78 <is_aperture+0x30>)
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d101      	bne.n	8009a6a <is_aperture+0x22>
		isAperture = 0;
 8009a66:	2300      	movs	r3, #0
 8009a68:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8009a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3714      	adds	r7, #20
 8009a70:	46bd      	mov	sp, r7
 8009a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a76:	4770      	bx	lr
 8009a78:	200002bc 	.word	0x200002bc

08009a7c <enable_spad_bit>:
>>>>>>> ModeSelect_v2


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
<<<<<<< HEAD
 800ab1c:	b480      	push	{r7}
 800ab1e:	b089      	sub	sp, #36	; 0x24
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	60f8      	str	r0, [r7, #12]
 800ab24:	60b9      	str	r1, [r7, #8]
 800ab26:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 800ab2c:	2308      	movs	r3, #8
 800ab2e:	61bb      	str	r3, [r7, #24]
=======
 8009a7c:	b480      	push	{r7}
 8009a7e:	b089      	sub	sp, #36	; 0x24
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	60f8      	str	r0, [r7, #12]
 8009a84:	60b9      	str	r1, [r7, #8]
 8009a86:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8009a8c:	2308      	movs	r3, #8
 8009a8e:	61bb      	str	r3, [r7, #24]
>>>>>>> ModeSelect_v2
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
<<<<<<< HEAD
 800ab30:	687a      	ldr	r2, [r7, #4]
 800ab32:	69bb      	ldr	r3, [r7, #24]
 800ab34:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab38:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	69ba      	ldr	r2, [r7, #24]
 800ab3e:	fbb3 f2f2 	udiv	r2, r3, r2
 800ab42:	69b9      	ldr	r1, [r7, #24]
 800ab44:	fb01 f202 	mul.w	r2, r1, r2
 800ab48:	1a9b      	subs	r3, r3, r2
 800ab4a:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 800ab4c:	697a      	ldr	r2, [r7, #20]
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	429a      	cmp	r2, r3
 800ab52:	d302      	bcc.n	800ab5a <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800ab54:	23ce      	movs	r3, #206	; 0xce
 800ab56:	77fb      	strb	r3, [r7, #31]
 800ab58:	e010      	b.n	800ab7c <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800ab5a:	68fa      	ldr	r2, [r7, #12]
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	4413      	add	r3, r2
 800ab60:	781b      	ldrb	r3, [r3, #0]
 800ab62:	b25a      	sxtb	r2, r3
 800ab64:	2101      	movs	r1, #1
 800ab66:	693b      	ldr	r3, [r7, #16]
 800ab68:	fa01 f303 	lsl.w	r3, r1, r3
 800ab6c:	b25b      	sxtb	r3, r3
 800ab6e:	4313      	orrs	r3, r2
 800ab70:	b259      	sxtb	r1, r3
 800ab72:	68fa      	ldr	r2, [r7, #12]
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	4413      	add	r3, r2
 800ab78:	b2ca      	uxtb	r2, r1
 800ab7a:	701a      	strb	r2, [r3, #0]

	return status;
 800ab7c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	3724      	adds	r7, #36	; 0x24
 800ab84:	46bd      	mov	sp, r7
 800ab86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8a:	4770      	bx	lr

0800ab8c <set_ref_spad_map>:
=======
 8009a90:	687a      	ldr	r2, [r7, #4]
 8009a92:	69bb      	ldr	r3, [r7, #24]
 8009a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a98:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	69ba      	ldr	r2, [r7, #24]
 8009a9e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009aa2:	69b9      	ldr	r1, [r7, #24]
 8009aa4:	fb01 f202 	mul.w	r2, r1, r2
 8009aa8:	1a9b      	subs	r3, r3, r2
 8009aaa:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8009aac:	697a      	ldr	r2, [r7, #20]
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d302      	bcc.n	8009aba <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8009ab4:	23ce      	movs	r3, #206	; 0xce
 8009ab6:	77fb      	strb	r3, [r7, #31]
 8009ab8:	e010      	b.n	8009adc <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8009aba:	68fa      	ldr	r2, [r7, #12]
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	4413      	add	r3, r2
 8009ac0:	781b      	ldrb	r3, [r3, #0]
 8009ac2:	b25a      	sxtb	r2, r3
 8009ac4:	2101      	movs	r1, #1
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8009acc:	b25b      	sxtb	r3, r3
 8009ace:	4313      	orrs	r3, r2
 8009ad0:	b259      	sxtb	r1, r3
 8009ad2:	68fa      	ldr	r2, [r7, #12]
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	4413      	add	r3, r2
 8009ad8:	b2ca      	uxtb	r2, r1
 8009ada:	701a      	strb	r2, [r3, #0]

	return status;
 8009adc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3724      	adds	r7, #36	; 0x24
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr

08009aec <set_ref_spad_map>:
>>>>>>> ModeSelect_v2

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
<<<<<<< HEAD
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b084      	sub	sp, #16
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
 800ab94:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800ab96:	2306      	movs	r3, #6
 800ab98:	683a      	ldr	r2, [r7, #0]
 800ab9a:	21b0      	movs	r1, #176	; 0xb0
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f003 f8bb 	bl	800dd18 <VL53L0X_WriteMulti>
 800aba2:	4603      	mov	r3, r0
 800aba4:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800aba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800abaa:	4618      	mov	r0, r3
 800abac:	3710      	adds	r7, #16
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}

0800abb2 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800abb2:	b580      	push	{r7, lr}
 800abb4:	b084      	sub	sp, #16
 800abb6:	af00      	add	r7, sp, #0
 800abb8:	6078      	str	r0, [r7, #4]
 800abba:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 800abbc:	2306      	movs	r3, #6
 800abbe:	683a      	ldr	r2, [r7, #0]
 800abc0:	21b0      	movs	r1, #176	; 0xb0
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f003 f8d8 	bl	800dd78 <VL53L0X_ReadMulti>
 800abc8:	4603      	mov	r3, r0
 800abca:	73fb      	strb	r3, [r7, #15]
=======
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b084      	sub	sp, #16
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8009af6:	2306      	movs	r3, #6
 8009af8:	683a      	ldr	r2, [r7, #0]
 8009afa:	21b0      	movs	r1, #176	; 0xb0
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f003 f8bb 	bl	800cc78 <VL53L0X_WriteMulti>
 8009b02:	4603      	mov	r3, r0
 8009b04:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8009b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3710      	adds	r7, #16
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}

08009b12 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8009b12:	b580      	push	{r7, lr}
 8009b14:	b084      	sub	sp, #16
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	6078      	str	r0, [r7, #4]
 8009b1a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8009b1c:	2306      	movs	r3, #6
 8009b1e:	683a      	ldr	r2, [r7, #0]
 8009b20:	21b0      	movs	r1, #176	; 0xb0
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f003 f8d8 	bl	800ccd8 <VL53L0X_ReadMulti>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	73fb      	strb	r3, [r7, #15]
>>>>>>> ModeSelect_v2
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
<<<<<<< HEAD
 800abcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	3710      	adds	r7, #16
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}

0800abd8 <enable_ref_spads>:
=======
 8009b2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	3710      	adds	r7, #16
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}

08009b38 <enable_ref_spads>:
>>>>>>> ModeSelect_v2
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
<<<<<<< HEAD
 800abd8:	b580      	push	{r7, lr}
 800abda:	b08c      	sub	sp, #48	; 0x30
 800abdc:	af00      	add	r7, sp, #0
 800abde:	60f8      	str	r0, [r7, #12]
 800abe0:	607a      	str	r2, [r7, #4]
 800abe2:	603b      	str	r3, [r7, #0]
 800abe4:	460b      	mov	r3, r1
 800abe6:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800abe8:	2300      	movs	r3, #0
 800abea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800abee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abf0:	61fb      	str	r3, [r7, #28]
=======
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b08c      	sub	sp, #48	; 0x30
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	60f8      	str	r0, [r7, #12]
 8009b40:	607a      	str	r2, [r7, #4]
 8009b42:	603b      	str	r3, [r7, #0]
 8009b44:	460b      	mov	r3, r1
 8009b46:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8009b4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b50:	61fb      	str	r3, [r7, #28]
>>>>>>> ModeSelect_v2
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
<<<<<<< HEAD
 800abf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abf4:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800abf6:	2300      	movs	r3, #0
 800abf8:	62bb      	str	r3, [r7, #40]	; 0x28
 800abfa:	e02b      	b.n	800ac54 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 800abfc:	f107 031c 	add.w	r3, r7, #28
 800ac00:	6a3a      	ldr	r2, [r7, #32]
 800ac02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ac04:	6878      	ldr	r0, [r7, #4]
 800ac06:	f7ff ff11 	bl	800aa2c <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800ac0a:	69fb      	ldr	r3, [r7, #28]
 800ac0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac10:	d103      	bne.n	800ac1a <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800ac12:	23ce      	movs	r3, #206	; 0xce
 800ac14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800ac18:	e020      	b.n	800ac5c <enable_ref_spads+0x84>
=======
 8009b52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b54:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8009b56:	2300      	movs	r3, #0
 8009b58:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b5a:	e02b      	b.n	8009bb4 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8009b5c:	f107 031c 	add.w	r3, r7, #28
 8009b60:	6a3a      	ldr	r2, [r7, #32]
 8009b62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f7ff ff11 	bl	800998c <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8009b6a:	69fb      	ldr	r3, [r7, #28]
 8009b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b70:	d103      	bne.n	8009b7a <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8009b72:	23ce      	movs	r3, #206	; 0xce
 8009b74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8009b78:	e020      	b.n	8009bbc <enable_ref_spads+0x84>
>>>>>>> ModeSelect_v2
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
<<<<<<< HEAD
 800ac1a:	69fb      	ldr	r3, [r7, #28]
 800ac1c:	461a      	mov	r2, r3
 800ac1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac20:	4413      	add	r3, r2
 800ac22:	4618      	mov	r0, r3
 800ac24:	f7ff ff60 	bl	800aae8 <is_aperture>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	461a      	mov	r2, r3
 800ac2c:	7afb      	ldrb	r3, [r7, #11]
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d003      	beq.n	800ac3a <enable_ref_spads+0x62>
=======
 8009b7a:	69fb      	ldr	r3, [r7, #28]
 8009b7c:	461a      	mov	r2, r3
 8009b7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b80:	4413      	add	r3, r2
 8009b82:	4618      	mov	r0, r3
 8009b84:	f7ff ff60 	bl	8009a48 <is_aperture>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	461a      	mov	r2, r3
 8009b8c:	7afb      	ldrb	r3, [r7, #11]
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d003      	beq.n	8009b9a <enable_ref_spads+0x62>
>>>>>>> ModeSelect_v2
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
<<<<<<< HEAD
 800ac32:	23ce      	movs	r3, #206	; 0xce
 800ac34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800ac38:	e010      	b.n	800ac5c <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800ac3a:	69fb      	ldr	r3, [r7, #28]
 800ac3c:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800ac3e:	6a3a      	ldr	r2, [r7, #32]
 800ac40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ac42:	6838      	ldr	r0, [r7, #0]
 800ac44:	f7ff ff6a 	bl	800ab1c <enable_spad_bit>
		currentSpad++;
 800ac48:	6a3b      	ldr	r3, [r7, #32]
 800ac4a:	3301      	adds	r3, #1
 800ac4c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800ac4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac50:	3301      	adds	r3, #1
 800ac52:	62bb      	str	r3, [r7, #40]	; 0x28
 800ac54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac58:	429a      	cmp	r2, r3
 800ac5a:	d3cf      	bcc.n	800abfc <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 800ac5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac5e:	6a3a      	ldr	r2, [r7, #32]
 800ac60:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800ac62:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d106      	bne.n	800ac78 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800ac6a:	6839      	ldr	r1, [r7, #0]
 800ac6c:	68f8      	ldr	r0, [r7, #12]
 800ac6e:	f7ff ff8d 	bl	800ab8c <set_ref_spad_map>
 800ac72:	4603      	mov	r3, r0
 800ac74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 800ac78:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d121      	bne.n	800acc4 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800ac80:	f107 0314 	add.w	r3, r7, #20
 800ac84:	4619      	mov	r1, r3
 800ac86:	68f8      	ldr	r0, [r7, #12]
 800ac88:	f7ff ff93 	bl	800abb2 <get_ref_spad_map>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 800ac92:	2300      	movs	r3, #0
 800ac94:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800ac96:	e011      	b.n	800acbc <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 800ac98:	683a      	ldr	r2, [r7, #0]
 800ac9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac9c:	4413      	add	r3, r2
 800ac9e:	781a      	ldrb	r2, [r3, #0]
 800aca0:	f107 0114 	add.w	r1, r7, #20
 800aca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca6:	440b      	add	r3, r1
 800aca8:	781b      	ldrb	r3, [r3, #0]
 800acaa:	429a      	cmp	r2, r3
 800acac:	d003      	beq.n	800acb6 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800acae:	23ce      	movs	r3, #206	; 0xce
 800acb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800acb4:	e006      	b.n	800acc4 <enable_ref_spads+0xec>
			}
			i++;
 800acb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb8:	3301      	adds	r3, #1
 800acba:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 800acbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acc0:	429a      	cmp	r2, r3
 800acc2:	d3e9      	bcc.n	800ac98 <enable_ref_spads+0xc0>
		}
	}
	return status;
 800acc4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800acc8:	4618      	mov	r0, r3
 800acca:	3730      	adds	r7, #48	; 0x30
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}

0800acd0 <perform_ref_signal_measurement>:
=======
 8009b92:	23ce      	movs	r3, #206	; 0xce
 8009b94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8009b98:	e010      	b.n	8009bbc <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8009b9a:	69fb      	ldr	r3, [r7, #28]
 8009b9c:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8009b9e:	6a3a      	ldr	r2, [r7, #32]
 8009ba0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009ba2:	6838      	ldr	r0, [r7, #0]
 8009ba4:	f7ff ff6a 	bl	8009a7c <enable_spad_bit>
		currentSpad++;
 8009ba8:	6a3b      	ldr	r3, [r7, #32]
 8009baa:	3301      	adds	r3, #1
 8009bac:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8009bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bb0:	3301      	adds	r3, #1
 8009bb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8009bb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009bb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	d3cf      	bcc.n	8009b5c <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8009bbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bbe:	6a3a      	ldr	r2, [r7, #32]
 8009bc0:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8009bc2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d106      	bne.n	8009bd8 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8009bca:	6839      	ldr	r1, [r7, #0]
 8009bcc:	68f8      	ldr	r0, [r7, #12]
 8009bce:	f7ff ff8d 	bl	8009aec <set_ref_spad_map>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8009bd8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d121      	bne.n	8009c24 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8009be0:	f107 0314 	add.w	r3, r7, #20
 8009be4:	4619      	mov	r1, r3
 8009be6:	68f8      	ldr	r0, [r7, #12]
 8009be8:	f7ff ff93 	bl	8009b12 <get_ref_spad_map>
 8009bec:	4603      	mov	r3, r0
 8009bee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8009bf6:	e011      	b.n	8009c1c <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8009bf8:	683a      	ldr	r2, [r7, #0]
 8009bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bfc:	4413      	add	r3, r2
 8009bfe:	781a      	ldrb	r2, [r3, #0]
 8009c00:	f107 0114 	add.w	r1, r7, #20
 8009c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c06:	440b      	add	r3, r1
 8009c08:	781b      	ldrb	r3, [r3, #0]
 8009c0a:	429a      	cmp	r2, r3
 8009c0c:	d003      	beq.n	8009c16 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8009c0e:	23ce      	movs	r3, #206	; 0xce
 8009c10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8009c14:	e006      	b.n	8009c24 <enable_ref_spads+0xec>
			}
			i++;
 8009c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c18:	3301      	adds	r3, #1
 8009c1a:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8009c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c20:	429a      	cmp	r2, r3
 8009c22:	d3e9      	bcc.n	8009bf8 <enable_ref_spads+0xc0>
		}
	}
	return status;
 8009c24:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3730      	adds	r7, #48	; 0x30
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <perform_ref_signal_measurement>:
>>>>>>> ModeSelect_v2


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
<<<<<<< HEAD
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b08a      	sub	sp, #40	; 0x28
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
 800acd8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800acda:	2300      	movs	r3, #0
 800acdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 800ace0:	2300      	movs	r3, #0
 800ace2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
=======
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b08a      	sub	sp, #40	; 0x28
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
 8009c38:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8009c40:	2300      	movs	r3, #0
 8009c42:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
>>>>>>> ModeSelect_v2

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
<<<<<<< HEAD
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800acec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
=======
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8009c4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
>>>>>>> ModeSelect_v2

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
<<<<<<< HEAD
 800acf0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d107      	bne.n	800ad08 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 800acf8:	22c0      	movs	r2, #192	; 0xc0
 800acfa:	2101      	movs	r1, #1
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f003 f867 	bl	800ddd0 <VL53L0X_WrByte>
 800ad02:	4603      	mov	r3, r0
 800ad04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800ad08:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d108      	bne.n	800ad22 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800ad10:	f107 0308 	add.w	r3, r7, #8
 800ad14:	4619      	mov	r1, r3
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f7ff fc48 	bl	800a5ac <VL53L0X_PerformSingleRangingMeasurement>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800ad22:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d107      	bne.n	800ad3a <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800ad2a:	2201      	movs	r2, #1
 800ad2c:	21ff      	movs	r1, #255	; 0xff
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f003 f84e 	bl	800ddd0 <VL53L0X_WrByte>
 800ad34:	4603      	mov	r3, r0
 800ad36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 800ad3a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d107      	bne.n	800ad52 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800ad42:	683a      	ldr	r2, [r7, #0]
 800ad44:	21b6      	movs	r1, #182	; 0xb6
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f003 f8ee 	bl	800df28 <VL53L0X_RdWord>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
=======
 8009c50:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d107      	bne.n	8009c68 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8009c58:	22c0      	movs	r2, #192	; 0xc0
 8009c5a:	2101      	movs	r1, #1
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f003 f867 	bl	800cd30 <VL53L0X_WrByte>
 8009c62:	4603      	mov	r3, r0
 8009c64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8009c68:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d108      	bne.n	8009c82 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8009c70:	f107 0308 	add.w	r3, r7, #8
 8009c74:	4619      	mov	r1, r3
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f7ff fc48 	bl	800950c <VL53L0X_PerformSingleRangingMeasurement>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8009c82:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d107      	bne.n	8009c9a <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009c8a:	2201      	movs	r2, #1
 8009c8c:	21ff      	movs	r1, #255	; 0xff
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f003 f84e 	bl	800cd30 <VL53L0X_WrByte>
 8009c94:	4603      	mov	r3, r0
 8009c96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8009c9a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d107      	bne.n	8009cb2 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8009ca2:	683a      	ldr	r2, [r7, #0]
 8009ca4:	21b6      	movs	r1, #182	; 0xb6
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f003 f8ee 	bl	800ce88 <VL53L0X_RdWord>
 8009cac:	4603      	mov	r3, r0
 8009cae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
>>>>>>> ModeSelect_v2
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
<<<<<<< HEAD
 800ad52:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d107      	bne.n	800ad6a <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	21ff      	movs	r1, #255	; 0xff
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f003 f836 	bl	800ddd0 <VL53L0X_WrByte>
 800ad64:	4603      	mov	r3, r0
 800ad66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800ad6a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d112      	bne.n	800ad98 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800ad72:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ad76:	461a      	mov	r2, r3
 800ad78:	2101      	movs	r1, #1
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f003 f828 	bl	800ddd0 <VL53L0X_WrByte>
 800ad80:	4603      	mov	r3, r0
 800ad82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800ad86:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d104      	bne.n	800ad98 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ad94:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 800ad98:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3728      	adds	r7, #40	; 0x28
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}

0800ada4 <VL53L0X_perform_ref_spad_management>:
=======
 8009cb2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d107      	bne.n	8009cca <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009cba:	2200      	movs	r2, #0
 8009cbc:	21ff      	movs	r1, #255	; 0xff
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f003 f836 	bl	800cd30 <VL53L0X_WrByte>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8009cca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d112      	bne.n	8009cf8 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009cd2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009cd6:	461a      	mov	r2, r3
 8009cd8:	2101      	movs	r1, #1
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f003 f828 	bl	800cd30 <VL53L0X_WrByte>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8009ce6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d104      	bne.n	8009cf8 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009cf4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8009cf8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3728      	adds	r7, #40	; 0x28
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <VL53L0X_perform_ref_spad_management>:
>>>>>>> ModeSelect_v2

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
<<<<<<< HEAD
 800ada4:	b590      	push	{r4, r7, lr}
 800ada6:	b09d      	sub	sp, #116	; 0x74
 800ada8:	af06      	add	r7, sp, #24
 800adaa:	60f8      	str	r0, [r7, #12]
 800adac:	60b9      	str	r1, [r7, #8]
 800adae:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800adb0:	2300      	movs	r3, #0
 800adb2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800adb6:	23b4      	movs	r3, #180	; 0xb4
 800adb8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 800adbc:	2303      	movs	r3, #3
 800adbe:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 800adc0:	232c      	movs	r3, #44	; 0x2c
 800adc2:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 800adc4:	2300      	movs	r3, #0
 800adc6:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 800adc8:	2300      	movs	r3, #0
 800adca:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 800adcc:	2300      	movs	r3, #0
 800adce:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800add0:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800add4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800add6:	2300      	movs	r3, #0
 800add8:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800adda:	2300      	movs	r3, #0
 800addc:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800adde:	2306      	movs	r3, #6
 800ade0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 800ade2:	2300      	movs	r3, #0
 800ade4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 800ade6:	2300      	movs	r3, #0
 800ade8:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 800adea:	2300      	movs	r3, #0
 800adec:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 800adf0:	2300      	movs	r3, #0
 800adf2:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 800adf4:	2300      	movs	r3, #0
 800adf6:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800adf8:	2300      	movs	r3, #0
 800adfa:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800adfc:	2300      	movs	r3, #0
 800adfe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
=======
 8009d04:	b590      	push	{r4, r7, lr}
 8009d06:	b09d      	sub	sp, #116	; 0x74
 8009d08:	af06      	add	r7, sp, #24
 8009d0a:	60f8      	str	r0, [r7, #12]
 8009d0c:	60b9      	str	r1, [r7, #8]
 8009d0e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009d10:	2300      	movs	r3, #0
 8009d12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8009d16:	23b4      	movs	r3, #180	; 0xb4
 8009d18:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8009d1c:	2303      	movs	r3, #3
 8009d1e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8009d20:	232c      	movs	r3, #44	; 0x2c
 8009d22:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8009d24:	2300      	movs	r3, #0
 8009d26:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8009d30:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8009d34:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8009d36:	2300      	movs	r3, #0
 8009d38:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8009d3e:	2306      	movs	r3, #6
 8009d40:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8009d42:	2300      	movs	r3, #0
 8009d44:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8009d46:	2300      	movs	r3, #0
 8009d48:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8009d50:	2300      	movs	r3, #0
 8009d52:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8009d54:	2300      	movs	r3, #0
 8009d56:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
>>>>>>> ModeSelect_v2
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
<<<<<<< HEAD
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 800ae08:	85fb      	strh	r3, [r7, #46]	; 0x2e
=======
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8009d68:	85fb      	strh	r3, [r7, #46]	; 0x2e
>>>>>>> ModeSelect_v2
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
<<<<<<< HEAD
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ae0e:	e009      	b.n	800ae24 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800ae10:	68fa      	ldr	r2, [r7, #12]
 800ae12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae14:	4413      	add	r3, r2
 800ae16:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800ae1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae20:	3301      	adds	r3, #1
 800ae22:	64bb      	str	r3, [r7, #72]	; 0x48
 800ae24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ae26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae28:	429a      	cmp	r2, r3
 800ae2a:	d3f1      	bcc.n	800ae10 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800ae2c:	2201      	movs	r2, #1
 800ae2e:	21ff      	movs	r1, #255	; 0xff
 800ae30:	68f8      	ldr	r0, [r7, #12]
 800ae32:	f002 ffcd 	bl	800ddd0 <VL53L0X_WrByte>
 800ae36:	4603      	mov	r3, r0
 800ae38:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800ae3c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d107      	bne.n	800ae54 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800ae44:	2200      	movs	r2, #0
 800ae46:	214f      	movs	r1, #79	; 0x4f
 800ae48:	68f8      	ldr	r0, [r7, #12]
 800ae4a:	f002 ffc1 	bl	800ddd0 <VL53L0X_WrByte>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800ae54:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d107      	bne.n	800ae6c <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 800ae5c:	222c      	movs	r2, #44	; 0x2c
 800ae5e:	214e      	movs	r1, #78	; 0x4e
 800ae60:	68f8      	ldr	r0, [r7, #12]
 800ae62:	f002 ffb5 	bl	800ddd0 <VL53L0X_WrByte>
 800ae66:	4603      	mov	r3, r0
 800ae68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800ae6c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d107      	bne.n	800ae84 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800ae74:	2200      	movs	r2, #0
 800ae76:	21ff      	movs	r1, #255	; 0xff
 800ae78:	68f8      	ldr	r0, [r7, #12]
 800ae7a:	f002 ffa9 	bl	800ddd0 <VL53L0X_WrByte>
 800ae7e:	4603      	mov	r3, r0
 800ae80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800ae84:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d109      	bne.n	800aea0 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 800ae8c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800ae90:	461a      	mov	r2, r3
 800ae92:	21b6      	movs	r1, #182	; 0xb6
 800ae94:	68f8      	ldr	r0, [r7, #12]
 800ae96:	f002 ff9b 	bl	800ddd0 <VL53L0X_WrByte>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
=======
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d6e:	e009      	b.n	8009d84 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8009d70:	68fa      	ldr	r2, [r7, #12]
 8009d72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d74:	4413      	add	r3, r2
 8009d76:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8009d7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d80:	3301      	adds	r3, #1
 8009d82:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d3f1      	bcc.n	8009d70 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009d8c:	2201      	movs	r2, #1
 8009d8e:	21ff      	movs	r1, #255	; 0xff
 8009d90:	68f8      	ldr	r0, [r7, #12]
 8009d92:	f002 ffcd 	bl	800cd30 <VL53L0X_WrByte>
 8009d96:	4603      	mov	r3, r0
 8009d98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8009d9c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d107      	bne.n	8009db4 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8009da4:	2200      	movs	r2, #0
 8009da6:	214f      	movs	r1, #79	; 0x4f
 8009da8:	68f8      	ldr	r0, [r7, #12]
 8009daa:	f002 ffc1 	bl	800cd30 <VL53L0X_WrByte>
 8009dae:	4603      	mov	r3, r0
 8009db0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8009db4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d107      	bne.n	8009dcc <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8009dbc:	222c      	movs	r2, #44	; 0x2c
 8009dbe:	214e      	movs	r1, #78	; 0x4e
 8009dc0:	68f8      	ldr	r0, [r7, #12]
 8009dc2:	f002 ffb5 	bl	800cd30 <VL53L0X_WrByte>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8009dcc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d107      	bne.n	8009de4 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	21ff      	movs	r1, #255	; 0xff
 8009dd8:	68f8      	ldr	r0, [r7, #12]
 8009dda:	f002 ffa9 	bl	800cd30 <VL53L0X_WrByte>
 8009dde:	4603      	mov	r3, r0
 8009de0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8009de4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d109      	bne.n	8009e00 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8009dec:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8009df0:	461a      	mov	r2, r3
 8009df2:	21b6      	movs	r1, #182	; 0xb6
 8009df4:	68f8      	ldr	r0, [r7, #12]
 8009df6:	f002 ff9b 	bl	800cd30 <VL53L0X_WrByte>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
>>>>>>> ModeSelect_v2
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
<<<<<<< HEAD
 800aea0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d107      	bne.n	800aeb8 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 800aea8:	2200      	movs	r2, #0
 800aeaa:	2180      	movs	r1, #128	; 0x80
 800aeac:	68f8      	ldr	r0, [r7, #12]
 800aeae:	f002 ff8f 	bl	800ddd0 <VL53L0X_WrByte>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
=======
 8009e00:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d107      	bne.n	8009e18 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8009e08:	2200      	movs	r2, #0
 8009e0a:	2180      	movs	r1, #128	; 0x80
 8009e0c:	68f8      	ldr	r0, [r7, #12]
 8009e0e:	f002 ff8f 	bl	800cd30 <VL53L0X_WrByte>
 8009e12:	4603      	mov	r3, r0
 8009e14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
>>>>>>> ModeSelect_v2
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
<<<<<<< HEAD
 800aeb8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d10a      	bne.n	800aed6 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800aec0:	f107 0210 	add.w	r2, r7, #16
 800aec4:	f107 0111 	add.w	r1, r7, #17
 800aec8:	2300      	movs	r3, #0
 800aeca:	68f8      	ldr	r0, [r7, #12]
 800aecc:	f000 fbbb 	bl	800b646 <VL53L0X_perform_ref_calibration>
 800aed0:	4603      	mov	r3, r0
 800aed2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800aed6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d121      	bne.n	800af22 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800aede:	2300      	movs	r3, #0
 800aee0:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 800aee2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aee4:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800aee6:	2300      	movs	r3, #0
 800aee8:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800aeea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aeec:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 800aefa:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800aefe:	f107 0218 	add.w	r2, r7, #24
 800af02:	9204      	str	r2, [sp, #16]
 800af04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800af06:	9203      	str	r2, [sp, #12]
 800af08:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800af0a:	9202      	str	r2, [sp, #8]
 800af0c:	9301      	str	r3, [sp, #4]
 800af0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af10:	9300      	str	r3, [sp, #0]
 800af12:	4623      	mov	r3, r4
 800af14:	4602      	mov	r2, r0
 800af16:	68f8      	ldr	r0, [r7, #12]
 800af18:	f7ff fe5e 	bl	800abd8 <enable_ref_spads>
 800af1c:	4603      	mov	r3, r0
 800af1e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
=======
 8009e18:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d10a      	bne.n	8009e36 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8009e20:	f107 0210 	add.w	r2, r7, #16
 8009e24:	f107 0111 	add.w	r1, r7, #17
 8009e28:	2300      	movs	r3, #0
 8009e2a:	68f8      	ldr	r0, [r7, #12]
 8009e2c:	f000 fbbb 	bl	800a5a6 <VL53L0X_perform_ref_calibration>
 8009e30:	4603      	mov	r3, r0
 8009e32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8009e36:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d121      	bne.n	8009e82 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8009e42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e44:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8009e46:	2300      	movs	r3, #0
 8009e48:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8009e4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e4c:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8009e5a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8009e5e:	f107 0218 	add.w	r2, r7, #24
 8009e62:	9204      	str	r2, [sp, #16]
 8009e64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e66:	9203      	str	r2, [sp, #12]
 8009e68:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009e6a:	9202      	str	r2, [sp, #8]
 8009e6c:	9301      	str	r3, [sp, #4]
 8009e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e70:	9300      	str	r3, [sp, #0]
 8009e72:	4623      	mov	r3, r4
 8009e74:	4602      	mov	r2, r0
 8009e76:	68f8      	ldr	r0, [r7, #12]
 8009e78:	f7ff fe5e 	bl	8009b38 <enable_ref_spads>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
>>>>>>> ModeSelect_v2
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 800af22:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800af26:	2b00      	cmp	r3, #0
 800af28:	d174      	bne.n	800b014 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800af2a:	69bb      	ldr	r3, [r7, #24]
 800af2c:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800af2e:	f107 0312 	add.w	r3, r7, #18
 800af32:	4619      	mov	r1, r3
 800af34:	68f8      	ldr	r0, [r7, #12]
 800af36:	f7ff fecb 	bl	800acd0 <perform_ref_signal_measurement>
 800af3a:	4603      	mov	r3, r0
 800af3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 800af40:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800af44:	2b00      	cmp	r3, #0
 800af46:	d161      	bne.n	800b00c <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 800af48:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800af4a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800af4c:	429a      	cmp	r2, r3
 800af4e:	d25d      	bcs.n	800b00c <VL53L0X_perform_ref_spad_management+0x268>
=======
 8009e82:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d174      	bne.n	8009f74 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8009e8a:	69bb      	ldr	r3, [r7, #24]
 8009e8c:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8009e8e:	f107 0312 	add.w	r3, r7, #18
 8009e92:	4619      	mov	r1, r3
 8009e94:	68f8      	ldr	r0, [r7, #12]
 8009e96:	f7ff fecb 	bl	8009c30 <perform_ref_signal_measurement>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8009ea0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d161      	bne.n	8009f6c <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8009ea8:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8009eaa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009eac:	429a      	cmp	r2, r3
 8009eae:	d25d      	bcs.n	8009f6c <VL53L0X_perform_ref_spad_management+0x268>
>>>>>>> ModeSelect_v2
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
<<<<<<< HEAD
 800af50:	2300      	movs	r3, #0
 800af52:	64bb      	str	r3, [r7, #72]	; 0x48
 800af54:	e009      	b.n	800af6a <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800af56:	68fa      	ldr	r2, [r7, #12]
 800af58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af5a:	4413      	add	r3, r2
 800af5c:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800af60:	2200      	movs	r2, #0
 800af62:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800af64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af66:	3301      	adds	r3, #1
 800af68:	64bb      	str	r3, [r7, #72]	; 0x48
 800af6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af6e:	429a      	cmp	r2, r3
 800af70:	d3f1      	bcc.n	800af56 <VL53L0X_perform_ref_spad_management+0x1b2>
=======
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8009eb4:	e009      	b.n	8009eca <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8009eb6:	68fa      	ldr	r2, [r7, #12]
 8009eb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009eba:	4413      	add	r3, r2
 8009ebc:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8009ec4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ec6:	3301      	adds	r3, #1
 8009ec8:	64bb      	str	r3, [r7, #72]	; 0x48
 8009eca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d3f1      	bcc.n	8009eb6 <VL53L0X_perform_ref_spad_management+0x1b2>
>>>>>>> ModeSelect_v2


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
<<<<<<< HEAD
 800af72:	e002      	b.n	800af7a <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 800af74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af76:	3301      	adds	r3, #1
 800af78:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800af7a:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800af7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af80:	4413      	add	r3, r2
 800af82:	4618      	mov	r0, r3
 800af84:	f7ff fdb0 	bl	800aae8 <is_aperture>
 800af88:	4603      	mov	r3, r0
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d103      	bne.n	800af96 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800af8e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800af90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af92:	429a      	cmp	r2, r3
 800af94:	d3ee      	bcc.n	800af74 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 800af96:	2301      	movs	r3, #1
 800af98:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 800af9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af9c:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 800afaa:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800afae:	f107 0218 	add.w	r2, r7, #24
 800afb2:	9204      	str	r2, [sp, #16]
 800afb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800afb6:	9203      	str	r2, [sp, #12]
 800afb8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800afba:	9202      	str	r2, [sp, #8]
 800afbc:	9301      	str	r3, [sp, #4]
 800afbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afc0:	9300      	str	r3, [sp, #0]
 800afc2:	4623      	mov	r3, r4
 800afc4:	4602      	mov	r2, r0
 800afc6:	68f8      	ldr	r0, [r7, #12]
 800afc8:	f7ff fe06 	bl	800abd8 <enable_ref_spads>
 800afcc:	4603      	mov	r3, r0
 800afce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
=======
 8009ed2:	e002      	b.n	8009eda <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8009ed4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ed6:	3301      	adds	r3, #1
 8009ed8:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8009eda:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8009ede:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ee0:	4413      	add	r3, r2
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f7ff fdb0 	bl	8009a48 <is_aperture>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d103      	bne.n	8009ef6 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8009eee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	d3ee      	bcc.n	8009ed4 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8009efa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009efc:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8009f0a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8009f0e:	f107 0218 	add.w	r2, r7, #24
 8009f12:	9204      	str	r2, [sp, #16]
 8009f14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f16:	9203      	str	r2, [sp, #12]
 8009f18:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009f1a:	9202      	str	r2, [sp, #8]
 8009f1c:	9301      	str	r3, [sp, #4]
 8009f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f20:	9300      	str	r3, [sp, #0]
 8009f22:	4623      	mov	r3, r4
 8009f24:	4602      	mov	r2, r0
 8009f26:	68f8      	ldr	r0, [r7, #12]
 8009f28:	f7ff fe06 	bl	8009b38 <enable_ref_spads>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
>>>>>>> ModeSelect_v2
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 800afd2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d11b      	bne.n	800b012 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800afda:	69bb      	ldr	r3, [r7, #24]
 800afdc:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800afde:	f107 0312 	add.w	r3, r7, #18
 800afe2:	4619      	mov	r1, r3
 800afe4:	68f8      	ldr	r0, [r7, #12]
 800afe6:	f7ff fe73 	bl	800acd0 <perform_ref_signal_measurement>
 800afea:	4603      	mov	r3, r0
 800afec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 800aff0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d10c      	bne.n	800b012 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 800aff8:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800affa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800affc:	429a      	cmp	r2, r3
 800affe:	d208      	bcs.n	800b012 <VL53L0X_perform_ref_spad_management+0x26e>
=======
 8009f32:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d11b      	bne.n	8009f72 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8009f3a:	69bb      	ldr	r3, [r7, #24]
 8009f3c:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8009f3e:	f107 0312 	add.w	r3, r7, #18
 8009f42:	4619      	mov	r1, r3
 8009f44:	68f8      	ldr	r0, [r7, #12]
 8009f46:	f7ff fe73 	bl	8009c30 <perform_ref_signal_measurement>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8009f50:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d10c      	bne.n	8009f72 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8009f58:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8009f5a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009f5c:	429a      	cmp	r2, r3
 8009f5e:	d208      	bcs.n	8009f72 <VL53L0X_perform_ref_spad_management+0x26e>
>>>>>>> ModeSelect_v2
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
<<<<<<< HEAD
 800b000:	2301      	movs	r3, #1
 800b002:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 800b006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b008:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800b00a:	e002      	b.n	800b012 <VL53L0X_perform_ref_spad_management+0x26e>
=======
 8009f60:	2301      	movs	r3, #1
 8009f62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8009f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f68:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8009f6a:	e002      	b.n	8009f72 <VL53L0X_perform_ref_spad_management+0x26e>
>>>>>>> ModeSelect_v2
				}
			}
		} else {
			needAptSpads = 0;
<<<<<<< HEAD
 800b00c:	2300      	movs	r3, #0
 800b00e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b010:	e000      	b.n	800b014 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800b012:	bf00      	nop
=======
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f70:	e000      	b.n	8009f74 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8009f72:	bf00      	nop
>>>>>>> ModeSelect_v2
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
<<<<<<< HEAD
 800b014:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b018:	2b00      	cmp	r3, #0
 800b01a:	f040 80af 	bne.w	800b17c <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800b01e:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 800b020:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b022:	429a      	cmp	r2, r3
 800b024:	f240 80aa 	bls.w	800b17c <VL53L0X_perform_ref_spad_management+0x3d8>
=======
 8009f74:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	f040 80af 	bne.w	800a0dc <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8009f7e:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8009f80:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009f82:	429a      	cmp	r2, r3
 8009f84:	f240 80aa 	bls.w	800a0dc <VL53L0X_perform_ref_spad_management+0x3d8>
>>>>>>> ModeSelect_v2
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
<<<<<<< HEAD
 800b028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b02a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 800b02e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b030:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	f503 7192 	add.w	r1, r3, #292	; 0x124
 800b038:	f107 031c 	add.w	r3, r7, #28
 800b03c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b03e:	4618      	mov	r0, r3
 800b040:	f003 f81a 	bl	800e078 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800b044:	8a7b      	ldrh	r3, [r7, #18]
 800b046:	461a      	mov	r2, r3
 800b048:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b04a:	1ad3      	subs	r3, r2, r3
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	bfb8      	it	lt
 800b050:	425b      	neglt	r3, r3
 800b052:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 800b054:	2300      	movs	r3, #0
 800b056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 800b05a:	e086      	b.n	800b16a <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 800b062:	f107 0314 	add.w	r3, r7, #20
 800b066:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b068:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b06a:	f7ff fcdf 	bl	800aa2c <get_next_good_spad>
=======
 8009f88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8009f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f90:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8009f98:	f107 031c 	add.w	r3, r7, #28
 8009f9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f003 f81a 	bl	800cfd8 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8009fa4:	8a7b      	ldrh	r3, [r7, #18]
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009faa:	1ad3      	subs	r3, r2, r3
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	bfb8      	it	lt
 8009fb0:	425b      	neglt	r3, r3
 8009fb2:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8009fba:	e086      	b.n	800a0ca <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8009fc2:	f107 0314 	add.w	r3, r7, #20
 8009fc6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009fc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009fca:	f7ff fcdf 	bl	800998c <get_next_good_spad>
>>>>>>> ModeSelect_v2
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
<<<<<<< HEAD
 800b06e:	697b      	ldr	r3, [r7, #20]
 800b070:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b074:	d103      	bne.n	800b07e <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800b076:	23ce      	movs	r3, #206	; 0xce
 800b078:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 800b07c:	e07e      	b.n	800b17c <VL53L0X_perform_ref_spad_management+0x3d8>
=======
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fd4:	d103      	bne.n	8009fde <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8009fd6:	23ce      	movs	r3, #206	; 0xce
 8009fd8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8009fdc:	e07e      	b.n	800a0dc <VL53L0X_perform_ref_spad_management+0x3d8>
>>>>>>> ModeSelect_v2
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
<<<<<<< HEAD
 800b07e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800b082:	697a      	ldr	r2, [r7, #20]
 800b084:	4413      	add	r3, r2
 800b086:	4618      	mov	r0, r3
 800b088:	f7ff fd2e 	bl	800aae8 <is_aperture>
 800b08c:	4603      	mov	r3, r0
 800b08e:	461a      	mov	r2, r3
 800b090:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b092:	4293      	cmp	r3, r2
 800b094:	d003      	beq.n	800b09e <VL53L0X_perform_ref_spad_management+0x2fa>
=======
 8009fde:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8009fe2:	697a      	ldr	r2, [r7, #20]
 8009fe4:	4413      	add	r3, r2
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f7ff fd2e 	bl	8009a48 <is_aperture>
 8009fec:	4603      	mov	r3, r0
 8009fee:	461a      	mov	r2, r3
 8009ff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d003      	beq.n	8009ffe <VL53L0X_perform_ref_spad_management+0x2fa>
>>>>>>> ModeSelect_v2
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
<<<<<<< HEAD
 800b096:	2301      	movs	r3, #1
 800b098:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 800b09c:	e06e      	b.n	800b17c <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800b09e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0a0:	3301      	adds	r3, #1
 800b0a2:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 800b0ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b0b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	f7ff fd32 	bl	800ab1c <enable_spad_bit>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800b0be:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d10c      	bne.n	800b0e0 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800b0c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0c8:	3301      	adds	r3, #1
 800b0ca:	653b      	str	r3, [r7, #80]	; 0x50
=======
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8009ffc:	e06e      	b.n	800a0dc <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8009ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a000:	3301      	adds	r3, #1
 800a002:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 800a00e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a010:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a012:	4618      	mov	r0, r3
 800a014:	f7ff fd32 	bl	8009a7c <enable_spad_bit>
 800a018:	4603      	mov	r3, r0
 800a01a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800a01e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a022:	2b00      	cmp	r3, #0
 800a024:	d10c      	bne.n	800a040 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800a026:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a028:	3301      	adds	r3, #1
 800a02a:	653b      	str	r3, [r7, #80]	; 0x50
>>>>>>> ModeSelect_v2
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
<<<<<<< HEAD
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 800b0d2:	4619      	mov	r1, r3
 800b0d4:	68f8      	ldr	r0, [r7, #12]
 800b0d6:	f7ff fd59 	bl	800ab8c <set_ref_spad_map>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 800b0e0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d146      	bne.n	800b176 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800b0e8:	f107 0312 	add.w	r3, r7, #18
 800b0ec:	4619      	mov	r1, r3
 800b0ee:	68f8      	ldr	r0, [r7, #12]
 800b0f0:	f7ff fdee 	bl	800acd0 <perform_ref_signal_measurement>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800b0fa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d13b      	bne.n	800b17a <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800b102:	8a7b      	ldrh	r3, [r7, #18]
 800b104:	461a      	mov	r2, r3
 800b106:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b108:	1ad3      	subs	r3, r2, r3
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	bfb8      	it	lt
 800b10e:	425b      	neglt	r3, r3
 800b110:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 800b112:	8a7b      	ldrh	r3, [r7, #18]
 800b114:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b116:	429a      	cmp	r2, r3
 800b118:	d21c      	bcs.n	800b154 <VL53L0X_perform_ref_spad_management+0x3b0>
=======
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 800a032:	4619      	mov	r1, r3
 800a034:	68f8      	ldr	r0, [r7, #12]
 800a036:	f7ff fd59 	bl	8009aec <set_ref_spad_map>
 800a03a:	4603      	mov	r3, r0
 800a03c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 800a040:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a044:	2b00      	cmp	r3, #0
 800a046:	d146      	bne.n	800a0d6 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800a048:	f107 0312 	add.w	r3, r7, #18
 800a04c:	4619      	mov	r1, r3
 800a04e:	68f8      	ldr	r0, [r7, #12]
 800a050:	f7ff fdee 	bl	8009c30 <perform_ref_signal_measurement>
 800a054:	4603      	mov	r3, r0
 800a056:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800a05a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d13b      	bne.n	800a0da <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800a062:	8a7b      	ldrh	r3, [r7, #18]
 800a064:	461a      	mov	r2, r3
 800a066:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a068:	1ad3      	subs	r3, r2, r3
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	bfb8      	it	lt
 800a06e:	425b      	neglt	r3, r3
 800a070:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 800a072:	8a7b      	ldrh	r3, [r7, #18]
 800a074:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a076:	429a      	cmp	r2, r3
 800a078:	d21c      	bcs.n	800a0b4 <VL53L0X_perform_ref_spad_management+0x3b0>
>>>>>>> ModeSelect_v2
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
<<<<<<< HEAD
 800b11a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b11c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b11e:	429a      	cmp	r2, r3
 800b120:	d914      	bls.n	800b14c <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800b122:	f107 031c 	add.w	r3, r7, #28
 800b126:	4619      	mov	r1, r3
 800b128:	68f8      	ldr	r0, [r7, #12]
 800b12a:	f7ff fd2f 	bl	800ab8c <set_ref_spad_map>
 800b12e:	4603      	mov	r3, r0
 800b130:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 800b13a:	f107 011c 	add.w	r1, r7, #28
 800b13e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b140:	4618      	mov	r0, r3
 800b142:	f002 ff99 	bl	800e078 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800b146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b148:	3b01      	subs	r3, #1
 800b14a:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 800b14c:	2301      	movs	r3, #1
 800b14e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b152:	e00a      	b.n	800b16a <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800b154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b156:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 800b15e:	f107 031c 	add.w	r3, r7, #28
 800b162:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b164:	4618      	mov	r0, r3
 800b166:	f002 ff87 	bl	800e078 <memcpy>
		while (!complete) {
 800b16a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b16e:	2b00      	cmp	r3, #0
 800b170:	f43f af74 	beq.w	800b05c <VL53L0X_perform_ref_spad_management+0x2b8>
 800b174:	e002      	b.n	800b17c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800b176:	bf00      	nop
 800b178:	e000      	b.n	800b17c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800b17a:	bf00      	nop
=======
 800a07a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a07c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a07e:	429a      	cmp	r2, r3
 800a080:	d914      	bls.n	800a0ac <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800a082:	f107 031c 	add.w	r3, r7, #28
 800a086:	4619      	mov	r1, r3
 800a088:	68f8      	ldr	r0, [r7, #12]
 800a08a:	f7ff fd2f 	bl	8009aec <set_ref_spad_map>
 800a08e:	4603      	mov	r3, r0
 800a090:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 800a09a:	f107 011c 	add.w	r1, r7, #28
 800a09e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f002 ff99 	bl	800cfd8 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800a0a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0a8:	3b01      	subs	r3, #1
 800a0aa:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0b2:	e00a      	b.n	800a0ca <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800a0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b6:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 800a0be:	f107 031c 	add.w	r3, r7, #28
 800a0c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f002 ff87 	bl	800cfd8 <memcpy>
		while (!complete) {
 800a0ca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	f43f af74 	beq.w	8009fbc <VL53L0X_perform_ref_spad_management+0x2b8>
 800a0d4:	e002      	b.n	800a0dc <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800a0d6:	bf00      	nop
 800a0d8:	e000      	b.n	800a0dc <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800a0da:	bf00      	nop
>>>>>>> ModeSelect_v2
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 800b17c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b180:	2b00      	cmp	r3, #0
 800b182:	d115      	bne.n	800b1b0 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b188:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800b190:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	2201      	movs	r2, #1
 800b196:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	b2da      	uxtb	r2, r3
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	781a      	ldrb	r2, [r3, #0]
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
=======
 800a0dc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d115      	bne.n	800a110 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a0e8:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800a0f0:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	2201      	movs	r2, #1
 800a0f6:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	b2da      	uxtb	r2, r3
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	781a      	ldrb	r2, [r3, #0]
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
>>>>>>> ModeSelect_v2
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
<<<<<<< HEAD
 800b1b0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	375c      	adds	r7, #92	; 0x5c
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd90      	pop	{r4, r7, pc}

0800b1bc <VL53L0X_set_reference_spads>:
=======
 800a110:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800a114:	4618      	mov	r0, r3
 800a116:	375c      	adds	r7, #92	; 0x5c
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd90      	pop	{r4, r7, pc}

0800a11c <VL53L0X_set_reference_spads>:
>>>>>>> ModeSelect_v2

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
<<<<<<< HEAD
 800b1bc:	b590      	push	{r4, r7, lr}
 800b1be:	b093      	sub	sp, #76	; 0x4c
 800b1c0:	af06      	add	r7, sp, #24
 800b1c2:	60f8      	str	r0, [r7, #12]
 800b1c4:	60b9      	str	r1, [r7, #8]
 800b1c6:	4613      	mov	r3, r2
 800b1c8:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 800b1d4:	23b4      	movs	r3, #180	; 0xb4
 800b1d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 800b1da:	2306      	movs	r3, #6
 800b1dc:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800b1de:	232c      	movs	r3, #44	; 0x2c
 800b1e0:	61bb      	str	r3, [r7, #24]
=======
 800a11c:	b590      	push	{r4, r7, lr}
 800a11e:	b093      	sub	sp, #76	; 0x4c
 800a120:	af06      	add	r7, sp, #24
 800a122:	60f8      	str	r0, [r7, #12]
 800a124:	60b9      	str	r1, [r7, #8]
 800a126:	4613      	mov	r3, r2
 800a128:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a12a:	2300      	movs	r3, #0
 800a12c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 800a130:	2300      	movs	r3, #0
 800a132:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 800a134:	23b4      	movs	r3, #180	; 0xb4
 800a136:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 800a13a:	2306      	movs	r3, #6
 800a13c:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800a13e:	232c      	movs	r3, #44	; 0x2c
 800a140:	61bb      	str	r3, [r7, #24]
>>>>>>> ModeSelect_v2
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
<<<<<<< HEAD
 800b1e2:	2201      	movs	r2, #1
 800b1e4:	21ff      	movs	r1, #255	; 0xff
 800b1e6:	68f8      	ldr	r0, [r7, #12]
 800b1e8:	f002 fdf2 	bl	800ddd0 <VL53L0X_WrByte>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800b1f2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d107      	bne.n	800b20a <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	214f      	movs	r1, #79	; 0x4f
 800b1fe:	68f8      	ldr	r0, [r7, #12]
 800b200:	f002 fde6 	bl	800ddd0 <VL53L0X_WrByte>
 800b204:	4603      	mov	r3, r0
 800b206:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800b20a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d107      	bne.n	800b222 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800b212:	222c      	movs	r2, #44	; 0x2c
 800b214:	214e      	movs	r1, #78	; 0x4e
 800b216:	68f8      	ldr	r0, [r7, #12]
 800b218:	f002 fdda 	bl	800ddd0 <VL53L0X_WrByte>
 800b21c:	4603      	mov	r3, r0
 800b21e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800b222:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b226:	2b00      	cmp	r3, #0
 800b228:	d107      	bne.n	800b23a <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b22a:	2200      	movs	r2, #0
 800b22c:	21ff      	movs	r1, #255	; 0xff
 800b22e:	68f8      	ldr	r0, [r7, #12]
 800b230:	f002 fdce 	bl	800ddd0 <VL53L0X_WrByte>
 800b234:	4603      	mov	r3, r0
 800b236:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800b23a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d109      	bne.n	800b256 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800b242:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b246:	461a      	mov	r2, r3
 800b248:	21b6      	movs	r1, #182	; 0xb6
 800b24a:	68f8      	ldr	r0, [r7, #12]
 800b24c:	f002 fdc0 	bl	800ddd0 <VL53L0X_WrByte>
 800b250:	4603      	mov	r3, r0
 800b252:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
=======
 800a142:	2201      	movs	r2, #1
 800a144:	21ff      	movs	r1, #255	; 0xff
 800a146:	68f8      	ldr	r0, [r7, #12]
 800a148:	f002 fdf2 	bl	800cd30 <VL53L0X_WrByte>
 800a14c:	4603      	mov	r3, r0
 800a14e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800a152:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a156:	2b00      	cmp	r3, #0
 800a158:	d107      	bne.n	800a16a <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800a15a:	2200      	movs	r2, #0
 800a15c:	214f      	movs	r1, #79	; 0x4f
 800a15e:	68f8      	ldr	r0, [r7, #12]
 800a160:	f002 fde6 	bl	800cd30 <VL53L0X_WrByte>
 800a164:	4603      	mov	r3, r0
 800a166:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800a16a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d107      	bne.n	800a182 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800a172:	222c      	movs	r2, #44	; 0x2c
 800a174:	214e      	movs	r1, #78	; 0x4e
 800a176:	68f8      	ldr	r0, [r7, #12]
 800a178:	f002 fdda 	bl	800cd30 <VL53L0X_WrByte>
 800a17c:	4603      	mov	r3, r0
 800a17e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800a182:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a186:	2b00      	cmp	r3, #0
 800a188:	d107      	bne.n	800a19a <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a18a:	2200      	movs	r2, #0
 800a18c:	21ff      	movs	r1, #255	; 0xff
 800a18e:	68f8      	ldr	r0, [r7, #12]
 800a190:	f002 fdce 	bl	800cd30 <VL53L0X_WrByte>
 800a194:	4603      	mov	r3, r0
 800a196:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800a19a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d109      	bne.n	800a1b6 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800a1a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a1a6:	461a      	mov	r2, r3
 800a1a8:	21b6      	movs	r1, #182	; 0xb6
 800a1aa:	68f8      	ldr	r0, [r7, #12]
 800a1ac:	f002 fdc0 	bl	800cd30 <VL53L0X_WrByte>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
>>>>>>> ModeSelect_v2
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
<<<<<<< HEAD
 800b256:	2300      	movs	r3, #0
 800b258:	627b      	str	r3, [r7, #36]	; 0x24
 800b25a:	e009      	b.n	800b270 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800b25c:	68fa      	ldr	r2, [r7, #12]
 800b25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b260:	4413      	add	r3, r2
 800b262:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800b266:	2200      	movs	r2, #0
 800b268:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800b26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b26c:	3301      	adds	r3, #1
 800b26e:	627b      	str	r3, [r7, #36]	; 0x24
 800b270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b272:	69fb      	ldr	r3, [r7, #28]
 800b274:	429a      	cmp	r2, r3
 800b276:	d3f1      	bcc.n	800b25c <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 800b278:	79fb      	ldrb	r3, [r7, #7]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d011      	beq.n	800b2a2 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800b27e:	e002      	b.n	800b286 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800b280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b282:	3301      	adds	r3, #1
 800b284:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800b286:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800b28a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b28c:	4413      	add	r3, r2
 800b28e:	4618      	mov	r0, r3
 800b290:	f7ff fc2a 	bl	800aae8 <is_aperture>
 800b294:	4603      	mov	r3, r0
 800b296:	2b00      	cmp	r3, #0
 800b298:	d103      	bne.n	800b2a2 <VL53L0X_set_reference_spads+0xe6>
 800b29a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b29c:	69bb      	ldr	r3, [r7, #24]
 800b29e:	429a      	cmp	r2, r3
 800b2a0:	d3ee      	bcc.n	800b280 <VL53L0X_set_reference_spads+0xc4>
=======
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	627b      	str	r3, [r7, #36]	; 0x24
 800a1ba:	e009      	b.n	800a1d0 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800a1bc:	68fa      	ldr	r2, [r7, #12]
 800a1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c0:	4413      	add	r3, r2
 800a1c2:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800a1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1cc:	3301      	adds	r3, #1
 800a1ce:	627b      	str	r3, [r7, #36]	; 0x24
 800a1d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1d2:	69fb      	ldr	r3, [r7, #28]
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d3f1      	bcc.n	800a1bc <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 800a1d8:	79fb      	ldrb	r3, [r7, #7]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d011      	beq.n	800a202 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800a1de:	e002      	b.n	800a1e6 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800a1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e2:	3301      	adds	r3, #1
 800a1e4:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800a1e6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800a1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ec:	4413      	add	r3, r2
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f7ff fc2a 	bl	8009a48 <is_aperture>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d103      	bne.n	800a202 <VL53L0X_set_reference_spads+0xe6>
 800a1fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1fc:	69bb      	ldr	r3, [r7, #24]
 800a1fe:	429a      	cmp	r2, r3
 800a200:	d3ee      	bcc.n	800a1e0 <VL53L0X_set_reference_spads+0xc4>
>>>>>>> ModeSelect_v2
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
<<<<<<< HEAD
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 800b2ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b2b2:	79f9      	ldrb	r1, [r7, #7]
 800b2b4:	f107 0214 	add.w	r2, r7, #20
 800b2b8:	9204      	str	r2, [sp, #16]
 800b2ba:	68ba      	ldr	r2, [r7, #8]
 800b2bc:	9203      	str	r2, [sp, #12]
 800b2be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2c0:	9202      	str	r2, [sp, #8]
 800b2c2:	9301      	str	r3, [sp, #4]
 800b2c4:	69fb      	ldr	r3, [r7, #28]
 800b2c6:	9300      	str	r3, [sp, #0]
 800b2c8:	4623      	mov	r3, r4
 800b2ca:	4602      	mov	r2, r0
 800b2cc:	68f8      	ldr	r0, [r7, #12]
 800b2ce:	f7ff fc83 	bl	800abd8 <enable_ref_spads>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
=======
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 800a20e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a212:	79f9      	ldrb	r1, [r7, #7]
 800a214:	f107 0214 	add.w	r2, r7, #20
 800a218:	9204      	str	r2, [sp, #16]
 800a21a:	68ba      	ldr	r2, [r7, #8]
 800a21c:	9203      	str	r2, [sp, #12]
 800a21e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a220:	9202      	str	r2, [sp, #8]
 800a222:	9301      	str	r3, [sp, #4]
 800a224:	69fb      	ldr	r3, [r7, #28]
 800a226:	9300      	str	r3, [sp, #0]
 800a228:	4623      	mov	r3, r4
 800a22a:	4602      	mov	r2, r0
 800a22c:	68f8      	ldr	r0, [r7, #12]
 800a22e:	f7ff fc83 	bl	8009b38 <enable_ref_spads>
 800a232:	4603      	mov	r3, r0
 800a234:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
>>>>>>> ModeSelect_v2
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 800b2d8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d10c      	bne.n	800b2fa <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	2201      	movs	r2, #1
 800b2e4:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	b2da      	uxtb	r2, r3
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	79fa      	ldrb	r2, [r7, #7]
 800b2f6:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
=======
 800a238:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d10c      	bne.n	800a25a <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	2201      	movs	r2, #1
 800a244:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	b2da      	uxtb	r2, r3
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	79fa      	ldrb	r2, [r7, #7]
 800a256:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
>>>>>>> ModeSelect_v2
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
<<<<<<< HEAD
 800b2fa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b2fe:	4618      	mov	r0, r3
 800b300:	3734      	adds	r7, #52	; 0x34
 800b302:	46bd      	mov	sp, r7
 800b304:	bd90      	pop	{r4, r7, pc}

0800b306 <VL53L0X_perform_single_ref_calibration>:
=======
 800a25a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a25e:	4618      	mov	r0, r3
 800a260:	3734      	adds	r7, #52	; 0x34
 800a262:	46bd      	mov	sp, r7
 800a264:	bd90      	pop	{r4, r7, pc}

0800a266 <VL53L0X_perform_single_ref_calibration>:
>>>>>>> ModeSelect_v2
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
<<<<<<< HEAD
 800b306:	b580      	push	{r7, lr}
 800b308:	b084      	sub	sp, #16
 800b30a:	af00      	add	r7, sp, #0
 800b30c:	6078      	str	r0, [r7, #4]
 800b30e:	460b      	mov	r3, r1
 800b310:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b312:	2300      	movs	r3, #0
 800b314:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d10a      	bne.n	800b334 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800b31e:	78fb      	ldrb	r3, [r7, #3]
 800b320:	f043 0301 	orr.w	r3, r3, #1
 800b324:	b2db      	uxtb	r3, r3
 800b326:	461a      	mov	r2, r3
 800b328:	2100      	movs	r1, #0
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f002 fd50 	bl	800ddd0 <VL53L0X_WrByte>
 800b330:	4603      	mov	r3, r0
 800b332:	73fb      	strb	r3, [r7, #15]
=======
 800a266:	b580      	push	{r7, lr}
 800a268:	b084      	sub	sp, #16
 800a26a:	af00      	add	r7, sp, #0
 800a26c:	6078      	str	r0, [r7, #4]
 800a26e:	460b      	mov	r3, r1
 800a270:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a272:	2300      	movs	r3, #0
 800a274:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800a276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d10a      	bne.n	800a294 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800a27e:	78fb      	ldrb	r3, [r7, #3]
 800a280:	f043 0301 	orr.w	r3, r3, #1
 800a284:	b2db      	uxtb	r3, r3
 800a286:	461a      	mov	r2, r3
 800a288:	2100      	movs	r1, #0
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f002 fd50 	bl	800cd30 <VL53L0X_WrByte>
 800a290:	4603      	mov	r3, r0
 800a292:	73fb      	strb	r3, [r7, #15]
>>>>>>> ModeSelect_v2
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
<<<<<<< HEAD
 800b334:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d104      	bne.n	800b346 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f000 f9bf 	bl	800b6c0 <VL53L0X_measurement_poll_for_completion>
 800b342:	4603      	mov	r3, r0
 800b344:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d105      	bne.n	800b35a <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800b34e:	2100      	movs	r1, #0
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f7ff fab5 	bl	800a8c0 <VL53L0X_ClearInterruptMask>
 800b356:	4603      	mov	r3, r0
 800b358:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b35a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d106      	bne.n	800b370 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800b362:	2200      	movs	r2, #0
 800b364:	2100      	movs	r1, #0
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f002 fd32 	bl	800ddd0 <VL53L0X_WrByte>
 800b36c:	4603      	mov	r3, r0
 800b36e:	73fb      	strb	r3, [r7, #15]

	return Status;
 800b370:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b374:	4618      	mov	r0, r3
 800b376:	3710      	adds	r7, #16
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}

0800b37c <VL53L0X_ref_calibration_io>:
=======
 800a294:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d104      	bne.n	800a2a6 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	f000 f9bf 	bl	800a620 <VL53L0X_measurement_poll_for_completion>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800a2a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d105      	bne.n	800a2ba <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800a2ae:	2100      	movs	r1, #0
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f7ff fab5 	bl	8009820 <VL53L0X_ClearInterruptMask>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800a2ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d106      	bne.n	800a2d0 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	2100      	movs	r1, #0
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f002 fd32 	bl	800cd30 <VL53L0X_WrByte>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	73fb      	strb	r3, [r7, #15]

	return Status;
 800a2d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3710      	adds	r7, #16
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <VL53L0X_ref_calibration_io>:
>>>>>>> ModeSelect_v2

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
<<<<<<< HEAD
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b084      	sub	sp, #16
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
 800b384:	4608      	mov	r0, r1
 800b386:	4611      	mov	r1, r2
 800b388:	461a      	mov	r2, r3
 800b38a:	4603      	mov	r3, r0
 800b38c:	70fb      	strb	r3, [r7, #3]
 800b38e:	460b      	mov	r3, r1
 800b390:	70bb      	strb	r3, [r7, #2]
 800b392:	4613      	mov	r3, r2
 800b394:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b396:	2300      	movs	r3, #0
 800b398:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800b39a:	2300      	movs	r3, #0
 800b39c:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b39e:	2201      	movs	r2, #1
 800b3a0:	21ff      	movs	r1, #255	; 0xff
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f002 fd14 	bl	800ddd0 <VL53L0X_WrByte>
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	461a      	mov	r2, r3
 800b3ac:	7bfb      	ldrb	r3, [r7, #15]
 800b3ae:	4313      	orrs	r3, r2
 800b3b0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	2100      	movs	r1, #0
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f002 fd0a 	bl	800ddd0 <VL53L0X_WrByte>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	461a      	mov	r2, r3
 800b3c0:	7bfb      	ldrb	r3, [r7, #15]
 800b3c2:	4313      	orrs	r3, r2
 800b3c4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	21ff      	movs	r1, #255	; 0xff
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f002 fd00 	bl	800ddd0 <VL53L0X_WrByte>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	461a      	mov	r2, r3
 800b3d4:	7bfb      	ldrb	r3, [r7, #15]
 800b3d6:	4313      	orrs	r3, r2
 800b3d8:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800b3da:	78fb      	ldrb	r3, [r7, #3]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d01e      	beq.n	800b41e <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800b3e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d009      	beq.n	800b3fc <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800b3e8:	69ba      	ldr	r2, [r7, #24]
 800b3ea:	21cb      	movs	r1, #203	; 0xcb
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f002 fd71 	bl	800ded4 <VL53L0X_RdByte>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	461a      	mov	r2, r3
 800b3f6:	7bfb      	ldrb	r3, [r7, #15]
 800b3f8:	4313      	orrs	r3, r2
 800b3fa:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800b3fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b400:	2b00      	cmp	r3, #0
 800b402:	d02a      	beq.n	800b45a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800b404:	f107 030e 	add.w	r3, r7, #14
 800b408:	461a      	mov	r2, r3
 800b40a:	21ee      	movs	r1, #238	; 0xee
 800b40c:	6878      	ldr	r0, [r7, #4]
 800b40e:	f002 fd61 	bl	800ded4 <VL53L0X_RdByte>
 800b412:	4603      	mov	r3, r0
 800b414:	461a      	mov	r2, r3
 800b416:	7bfb      	ldrb	r3, [r7, #15]
 800b418:	4313      	orrs	r3, r2
 800b41a:	73fb      	strb	r3, [r7, #15]
 800b41c:	e01d      	b.n	800b45a <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800b41e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d00a      	beq.n	800b43c <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800b426:	78bb      	ldrb	r3, [r7, #2]
 800b428:	461a      	mov	r2, r3
 800b42a:	21cb      	movs	r1, #203	; 0xcb
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f002 fccf 	bl	800ddd0 <VL53L0X_WrByte>
 800b432:	4603      	mov	r3, r0
 800b434:	461a      	mov	r2, r3
 800b436:	7bfb      	ldrb	r3, [r7, #15]
 800b438:	4313      	orrs	r3, r2
 800b43a:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800b43c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b440:	2b00      	cmp	r3, #0
 800b442:	d00a      	beq.n	800b45a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800b444:	787b      	ldrb	r3, [r7, #1]
 800b446:	2280      	movs	r2, #128	; 0x80
 800b448:	21ee      	movs	r1, #238	; 0xee
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f002 fd0e 	bl	800de6c <VL53L0X_UpdateByte>
 800b450:	4603      	mov	r3, r0
 800b452:	461a      	mov	r2, r3
 800b454:	7bfb      	ldrb	r3, [r7, #15]
 800b456:	4313      	orrs	r3, r2
 800b458:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b45a:	2201      	movs	r2, #1
 800b45c:	21ff      	movs	r1, #255	; 0xff
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f002 fcb6 	bl	800ddd0 <VL53L0X_WrByte>
 800b464:	4603      	mov	r3, r0
 800b466:	461a      	mov	r2, r3
 800b468:	7bfb      	ldrb	r3, [r7, #15]
 800b46a:	4313      	orrs	r3, r2
 800b46c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800b46e:	2201      	movs	r2, #1
 800b470:	2100      	movs	r1, #0
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f002 fcac 	bl	800ddd0 <VL53L0X_WrByte>
 800b478:	4603      	mov	r3, r0
 800b47a:	461a      	mov	r2, r3
 800b47c:	7bfb      	ldrb	r3, [r7, #15]
 800b47e:	4313      	orrs	r3, r2
 800b480:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b482:	2200      	movs	r2, #0
 800b484:	21ff      	movs	r1, #255	; 0xff
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f002 fca2 	bl	800ddd0 <VL53L0X_WrByte>
 800b48c:	4603      	mov	r3, r0
 800b48e:	461a      	mov	r2, r3
 800b490:	7bfb      	ldrb	r3, [r7, #15]
 800b492:	4313      	orrs	r3, r2
 800b494:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800b496:	7bbb      	ldrb	r3, [r7, #14]
 800b498:	f023 0310 	bic.w	r3, r3, #16
 800b49c:	b2da      	uxtb	r2, r3
 800b49e:	69fb      	ldr	r3, [r7, #28]
 800b4a0:	701a      	strb	r2, [r3, #0]

	return Status;
 800b4a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3710      	adds	r7, #16
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}

0800b4ae <VL53L0X_perform_vhv_calibration>:
=======
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b084      	sub	sp, #16
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	4608      	mov	r0, r1
 800a2e6:	4611      	mov	r1, r2
 800a2e8:	461a      	mov	r2, r3
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	70fb      	strb	r3, [r7, #3]
 800a2ee:	460b      	mov	r3, r1
 800a2f0:	70bb      	strb	r3, [r7, #2]
 800a2f2:	4613      	mov	r3, r2
 800a2f4:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a2fe:	2201      	movs	r2, #1
 800a300:	21ff      	movs	r1, #255	; 0xff
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f002 fd14 	bl	800cd30 <VL53L0X_WrByte>
 800a308:	4603      	mov	r3, r0
 800a30a:	461a      	mov	r2, r3
 800a30c:	7bfb      	ldrb	r3, [r7, #15]
 800a30e:	4313      	orrs	r3, r2
 800a310:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a312:	2200      	movs	r2, #0
 800a314:	2100      	movs	r1, #0
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f002 fd0a 	bl	800cd30 <VL53L0X_WrByte>
 800a31c:	4603      	mov	r3, r0
 800a31e:	461a      	mov	r2, r3
 800a320:	7bfb      	ldrb	r3, [r7, #15]
 800a322:	4313      	orrs	r3, r2
 800a324:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a326:	2200      	movs	r2, #0
 800a328:	21ff      	movs	r1, #255	; 0xff
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f002 fd00 	bl	800cd30 <VL53L0X_WrByte>
 800a330:	4603      	mov	r3, r0
 800a332:	461a      	mov	r2, r3
 800a334:	7bfb      	ldrb	r3, [r7, #15]
 800a336:	4313      	orrs	r3, r2
 800a338:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800a33a:	78fb      	ldrb	r3, [r7, #3]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d01e      	beq.n	800a37e <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800a340:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d009      	beq.n	800a35c <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800a348:	69ba      	ldr	r2, [r7, #24]
 800a34a:	21cb      	movs	r1, #203	; 0xcb
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f002 fd71 	bl	800ce34 <VL53L0X_RdByte>
 800a352:	4603      	mov	r3, r0
 800a354:	461a      	mov	r2, r3
 800a356:	7bfb      	ldrb	r3, [r7, #15]
 800a358:	4313      	orrs	r3, r2
 800a35a:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800a35c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a360:	2b00      	cmp	r3, #0
 800a362:	d02a      	beq.n	800a3ba <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800a364:	f107 030e 	add.w	r3, r7, #14
 800a368:	461a      	mov	r2, r3
 800a36a:	21ee      	movs	r1, #238	; 0xee
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f002 fd61 	bl	800ce34 <VL53L0X_RdByte>
 800a372:	4603      	mov	r3, r0
 800a374:	461a      	mov	r2, r3
 800a376:	7bfb      	ldrb	r3, [r7, #15]
 800a378:	4313      	orrs	r3, r2
 800a37a:	73fb      	strb	r3, [r7, #15]
 800a37c:	e01d      	b.n	800a3ba <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800a37e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d00a      	beq.n	800a39c <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800a386:	78bb      	ldrb	r3, [r7, #2]
 800a388:	461a      	mov	r2, r3
 800a38a:	21cb      	movs	r1, #203	; 0xcb
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f002 fccf 	bl	800cd30 <VL53L0X_WrByte>
 800a392:	4603      	mov	r3, r0
 800a394:	461a      	mov	r2, r3
 800a396:	7bfb      	ldrb	r3, [r7, #15]
 800a398:	4313      	orrs	r3, r2
 800a39a:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800a39c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d00a      	beq.n	800a3ba <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800a3a4:	787b      	ldrb	r3, [r7, #1]
 800a3a6:	2280      	movs	r2, #128	; 0x80
 800a3a8:	21ee      	movs	r1, #238	; 0xee
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f002 fd0e 	bl	800cdcc <VL53L0X_UpdateByte>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	461a      	mov	r2, r3
 800a3b4:	7bfb      	ldrb	r3, [r7, #15]
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a3ba:	2201      	movs	r2, #1
 800a3bc:	21ff      	movs	r1, #255	; 0xff
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f002 fcb6 	bl	800cd30 <VL53L0X_WrByte>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	461a      	mov	r2, r3
 800a3c8:	7bfb      	ldrb	r3, [r7, #15]
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	2100      	movs	r1, #0
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f002 fcac 	bl	800cd30 <VL53L0X_WrByte>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	461a      	mov	r2, r3
 800a3dc:	7bfb      	ldrb	r3, [r7, #15]
 800a3de:	4313      	orrs	r3, r2
 800a3e0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	21ff      	movs	r1, #255	; 0xff
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f002 fca2 	bl	800cd30 <VL53L0X_WrByte>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	461a      	mov	r2, r3
 800a3f0:	7bfb      	ldrb	r3, [r7, #15]
 800a3f2:	4313      	orrs	r3, r2
 800a3f4:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800a3f6:	7bbb      	ldrb	r3, [r7, #14]
 800a3f8:	f023 0310 	bic.w	r3, r3, #16
 800a3fc:	b2da      	uxtb	r2, r3
 800a3fe:	69fb      	ldr	r3, [r7, #28]
 800a400:	701a      	strb	r2, [r3, #0]

	return Status;
 800a402:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a406:	4618      	mov	r0, r3
 800a408:	3710      	adds	r7, #16
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}

0800a40e <VL53L0X_perform_vhv_calibration>:
>>>>>>> ModeSelect_v2


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
<<<<<<< HEAD
 800b4ae:	b580      	push	{r7, lr}
 800b4b0:	b08a      	sub	sp, #40	; 0x28
 800b4b2:	af04      	add	r7, sp, #16
 800b4b4:	60f8      	str	r0, [r7, #12]
 800b4b6:	60b9      	str	r1, [r7, #8]
 800b4b8:	4611      	mov	r1, r2
 800b4ba:	461a      	mov	r2, r3
 800b4bc:	460b      	mov	r3, r1
 800b4be:	71fb      	strb	r3, [r7, #7]
 800b4c0:	4613      	mov	r3, r2
 800b4c2:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	74fb      	strb	r3, [r7, #19]
=======
 800a40e:	b580      	push	{r7, lr}
 800a410:	b08a      	sub	sp, #40	; 0x28
 800a412:	af04      	add	r7, sp, #16
 800a414:	60f8      	str	r0, [r7, #12]
 800a416:	60b9      	str	r1, [r7, #8]
 800a418:	4611      	mov	r1, r2
 800a41a:	461a      	mov	r2, r3
 800a41c:	460b      	mov	r3, r1
 800a41e:	71fb      	strb	r3, [r7, #7]
 800a420:	4613      	mov	r3, r2
 800a422:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a424:	2300      	movs	r3, #0
 800a426:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800a428:	2300      	movs	r3, #0
 800a42a:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800a42c:	2300      	movs	r3, #0
 800a42e:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800a430:	2300      	movs	r3, #0
 800a432:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800a434:	2300      	movs	r3, #0
 800a436:	74fb      	strb	r3, [r7, #19]
>>>>>>> ModeSelect_v2

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
<<<<<<< HEAD
 800b4d8:	79bb      	ldrb	r3, [r7, #6]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d003      	beq.n	800b4e6 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800b4e4:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800b4e6:	2201      	movs	r2, #1
 800b4e8:	2101      	movs	r1, #1
 800b4ea:	68f8      	ldr	r0, [r7, #12]
 800b4ec:	f002 fc70 	bl	800ddd0 <VL53L0X_WrByte>
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800b4f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d105      	bne.n	800b508 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800b4fc:	2140      	movs	r1, #64	; 0x40
 800b4fe:	68f8      	ldr	r0, [r7, #12]
 800b500:	f7ff ff01 	bl	800b306 <VL53L0X_perform_single_ref_calibration>
 800b504:	4603      	mov	r3, r0
 800b506:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800b508:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d115      	bne.n	800b53c <VL53L0X_perform_vhv_calibration+0x8e>
 800b510:	79fb      	ldrb	r3, [r7, #7]
 800b512:	2b01      	cmp	r3, #1
 800b514:	d112      	bne.n	800b53c <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800b516:	7d39      	ldrb	r1, [r7, #20]
 800b518:	7d7a      	ldrb	r2, [r7, #21]
 800b51a:	2300      	movs	r3, #0
 800b51c:	9303      	str	r3, [sp, #12]
 800b51e:	2301      	movs	r3, #1
 800b520:	9302      	str	r3, [sp, #8]
 800b522:	f107 0313 	add.w	r3, r7, #19
 800b526:	9301      	str	r3, [sp, #4]
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	9300      	str	r3, [sp, #0]
 800b52c:	460b      	mov	r3, r1
 800b52e:	2101      	movs	r1, #1
 800b530:	68f8      	ldr	r0, [r7, #12]
 800b532:	f7ff ff23 	bl	800b37c <VL53L0X_ref_calibration_io>
 800b536:	4603      	mov	r3, r0
 800b538:	75fb      	strb	r3, [r7, #23]
 800b53a:	e002      	b.n	800b542 <VL53L0X_perform_vhv_calibration+0x94>
=======
 800a438:	79bb      	ldrb	r3, [r7, #6]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d003      	beq.n	800a446 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800a444:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800a446:	2201      	movs	r2, #1
 800a448:	2101      	movs	r1, #1
 800a44a:	68f8      	ldr	r0, [r7, #12]
 800a44c:	f002 fc70 	bl	800cd30 <VL53L0X_WrByte>
 800a450:	4603      	mov	r3, r0
 800a452:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800a454:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d105      	bne.n	800a468 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800a45c:	2140      	movs	r1, #64	; 0x40
 800a45e:	68f8      	ldr	r0, [r7, #12]
 800a460:	f7ff ff01 	bl	800a266 <VL53L0X_perform_single_ref_calibration>
 800a464:	4603      	mov	r3, r0
 800a466:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800a468:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d115      	bne.n	800a49c <VL53L0X_perform_vhv_calibration+0x8e>
 800a470:	79fb      	ldrb	r3, [r7, #7]
 800a472:	2b01      	cmp	r3, #1
 800a474:	d112      	bne.n	800a49c <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800a476:	7d39      	ldrb	r1, [r7, #20]
 800a478:	7d7a      	ldrb	r2, [r7, #21]
 800a47a:	2300      	movs	r3, #0
 800a47c:	9303      	str	r3, [sp, #12]
 800a47e:	2301      	movs	r3, #1
 800a480:	9302      	str	r3, [sp, #8]
 800a482:	f107 0313 	add.w	r3, r7, #19
 800a486:	9301      	str	r3, [sp, #4]
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	9300      	str	r3, [sp, #0]
 800a48c:	460b      	mov	r3, r1
 800a48e:	2101      	movs	r1, #1
 800a490:	68f8      	ldr	r0, [r7, #12]
 800a492:	f7ff ff23 	bl	800a2dc <VL53L0X_ref_calibration_io>
 800a496:	4603      	mov	r3, r0
 800a498:	75fb      	strb	r3, [r7, #23]
 800a49a:	e002      	b.n	800a4a2 <VL53L0X_perform_vhv_calibration+0x94>
>>>>>>> ModeSelect_v2
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
<<<<<<< HEAD
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	2200      	movs	r2, #0
 800b540:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800b542:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d112      	bne.n	800b570 <VL53L0X_perform_vhv_calibration+0xc2>
 800b54a:	79bb      	ldrb	r3, [r7, #6]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d00f      	beq.n	800b570 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b550:	7dbb      	ldrb	r3, [r7, #22]
 800b552:	461a      	mov	r2, r3
 800b554:	2101      	movs	r1, #1
 800b556:	68f8      	ldr	r0, [r7, #12]
 800b558:	f002 fc3a 	bl	800ddd0 <VL53L0X_WrByte>
 800b55c:	4603      	mov	r3, r0
 800b55e:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800b560:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d103      	bne.n	800b570 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	7dba      	ldrb	r2, [r7, #22]
 800b56c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
=======
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800a4a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d112      	bne.n	800a4d0 <VL53L0X_perform_vhv_calibration+0xc2>
 800a4aa:	79bb      	ldrb	r3, [r7, #6]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d00f      	beq.n	800a4d0 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a4b0:	7dbb      	ldrb	r3, [r7, #22]
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	2101      	movs	r1, #1
 800a4b6:	68f8      	ldr	r0, [r7, #12]
 800a4b8:	f002 fc3a 	bl	800cd30 <VL53L0X_WrByte>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800a4c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d103      	bne.n	800a4d0 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	7dba      	ldrb	r2, [r7, #22]
 800a4cc:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
>>>>>>> ModeSelect_v2

	}

	return Status;
<<<<<<< HEAD
 800b570:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b574:	4618      	mov	r0, r3
 800b576:	3718      	adds	r7, #24
 800b578:	46bd      	mov	sp, r7
 800b57a:	bd80      	pop	{r7, pc}

0800b57c <VL53L0X_perform_phase_calibration>:
=======
 800a4d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3718      	adds	r7, #24
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}

0800a4dc <VL53L0X_perform_phase_calibration>:
>>>>>>> ModeSelect_v2

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
<<<<<<< HEAD
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b08a      	sub	sp, #40	; 0x28
 800b580:	af04      	add	r7, sp, #16
 800b582:	60f8      	str	r0, [r7, #12]
 800b584:	60b9      	str	r1, [r7, #8]
 800b586:	4611      	mov	r1, r2
 800b588:	461a      	mov	r2, r3
 800b58a:	460b      	mov	r3, r1
 800b58c:	71fb      	strb	r3, [r7, #7]
 800b58e:	4613      	mov	r3, r2
 800b590:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b592:	2300      	movs	r3, #0
 800b594:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800b596:	2300      	movs	r3, #0
 800b598:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800b59a:	2300      	movs	r3, #0
 800b59c:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	753b      	strb	r3, [r7, #20]
=======
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b08a      	sub	sp, #40	; 0x28
 800a4e0:	af04      	add	r7, sp, #16
 800a4e2:	60f8      	str	r0, [r7, #12]
 800a4e4:	60b9      	str	r1, [r7, #8]
 800a4e6:	4611      	mov	r1, r2
 800a4e8:	461a      	mov	r2, r3
 800a4ea:	460b      	mov	r3, r1
 800a4ec:	71fb      	strb	r3, [r7, #7]
 800a4ee:	4613      	mov	r3, r2
 800a4f0:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800a4fe:	2300      	movs	r3, #0
 800a500:	753b      	strb	r3, [r7, #20]
>>>>>>> ModeSelect_v2

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
<<<<<<< HEAD
 800b5a2:	79bb      	ldrb	r3, [r7, #6]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d003      	beq.n	800b5b0 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800b5ae:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800b5b0:	2202      	movs	r2, #2
 800b5b2:	2101      	movs	r1, #1
 800b5b4:	68f8      	ldr	r0, [r7, #12]
 800b5b6:	f002 fc0b 	bl	800ddd0 <VL53L0X_WrByte>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800b5be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d105      	bne.n	800b5d2 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800b5c6:	2100      	movs	r1, #0
 800b5c8:	68f8      	ldr	r0, [r7, #12]
 800b5ca:	f7ff fe9c 	bl	800b306 <VL53L0X_perform_single_ref_calibration>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800b5d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d115      	bne.n	800b606 <VL53L0X_perform_phase_calibration+0x8a>
 800b5da:	79fb      	ldrb	r3, [r7, #7]
 800b5dc:	2b01      	cmp	r3, #1
 800b5de:	d112      	bne.n	800b606 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800b5e0:	7d39      	ldrb	r1, [r7, #20]
 800b5e2:	7d7a      	ldrb	r2, [r7, #21]
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	9303      	str	r3, [sp, #12]
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	9302      	str	r3, [sp, #8]
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	9301      	str	r3, [sp, #4]
 800b5f0:	f107 0313 	add.w	r3, r7, #19
 800b5f4:	9300      	str	r3, [sp, #0]
 800b5f6:	460b      	mov	r3, r1
 800b5f8:	2101      	movs	r1, #1
 800b5fa:	68f8      	ldr	r0, [r7, #12]
 800b5fc:	f7ff febe 	bl	800b37c <VL53L0X_ref_calibration_io>
 800b600:	4603      	mov	r3, r0
 800b602:	75fb      	strb	r3, [r7, #23]
 800b604:	e002      	b.n	800b60c <VL53L0X_perform_phase_calibration+0x90>
=======
 800a502:	79bb      	ldrb	r3, [r7, #6]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d003      	beq.n	800a510 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800a50e:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800a510:	2202      	movs	r2, #2
 800a512:	2101      	movs	r1, #1
 800a514:	68f8      	ldr	r0, [r7, #12]
 800a516:	f002 fc0b 	bl	800cd30 <VL53L0X_WrByte>
 800a51a:	4603      	mov	r3, r0
 800a51c:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800a51e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d105      	bne.n	800a532 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800a526:	2100      	movs	r1, #0
 800a528:	68f8      	ldr	r0, [r7, #12]
 800a52a:	f7ff fe9c 	bl	800a266 <VL53L0X_perform_single_ref_calibration>
 800a52e:	4603      	mov	r3, r0
 800a530:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800a532:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d115      	bne.n	800a566 <VL53L0X_perform_phase_calibration+0x8a>
 800a53a:	79fb      	ldrb	r3, [r7, #7]
 800a53c:	2b01      	cmp	r3, #1
 800a53e:	d112      	bne.n	800a566 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800a540:	7d39      	ldrb	r1, [r7, #20]
 800a542:	7d7a      	ldrb	r2, [r7, #21]
 800a544:	2301      	movs	r3, #1
 800a546:	9303      	str	r3, [sp, #12]
 800a548:	2300      	movs	r3, #0
 800a54a:	9302      	str	r3, [sp, #8]
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	9301      	str	r3, [sp, #4]
 800a550:	f107 0313 	add.w	r3, r7, #19
 800a554:	9300      	str	r3, [sp, #0]
 800a556:	460b      	mov	r3, r1
 800a558:	2101      	movs	r1, #1
 800a55a:	68f8      	ldr	r0, [r7, #12]
 800a55c:	f7ff febe 	bl	800a2dc <VL53L0X_ref_calibration_io>
 800a560:	4603      	mov	r3, r0
 800a562:	75fb      	strb	r3, [r7, #23]
 800a564:	e002      	b.n	800a56c <VL53L0X_perform_phase_calibration+0x90>
>>>>>>> ModeSelect_v2
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
<<<<<<< HEAD
 800b606:	68bb      	ldr	r3, [r7, #8]
 800b608:	2200      	movs	r2, #0
 800b60a:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800b60c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d112      	bne.n	800b63a <VL53L0X_perform_phase_calibration+0xbe>
 800b614:	79bb      	ldrb	r3, [r7, #6]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d00f      	beq.n	800b63a <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b61a:	7dbb      	ldrb	r3, [r7, #22]
 800b61c:	461a      	mov	r2, r3
 800b61e:	2101      	movs	r1, #1
 800b620:	68f8      	ldr	r0, [r7, #12]
 800b622:	f002 fbd5 	bl	800ddd0 <VL53L0X_WrByte>
 800b626:	4603      	mov	r3, r0
 800b628:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800b62a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d103      	bne.n	800b63a <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	7dba      	ldrb	r2, [r7, #22]
 800b636:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
=======
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	2200      	movs	r2, #0
 800a56a:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800a56c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d112      	bne.n	800a59a <VL53L0X_perform_phase_calibration+0xbe>
 800a574:	79bb      	ldrb	r3, [r7, #6]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d00f      	beq.n	800a59a <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a57a:	7dbb      	ldrb	r3, [r7, #22]
 800a57c:	461a      	mov	r2, r3
 800a57e:	2101      	movs	r1, #1
 800a580:	68f8      	ldr	r0, [r7, #12]
 800a582:	f002 fbd5 	bl	800cd30 <VL53L0X_WrByte>
 800a586:	4603      	mov	r3, r0
 800a588:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800a58a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d103      	bne.n	800a59a <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	7dba      	ldrb	r2, [r7, #22]
 800a596:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
>>>>>>> ModeSelect_v2

	}

	return Status;
<<<<<<< HEAD
 800b63a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b63e:	4618      	mov	r0, r3
 800b640:	3718      	adds	r7, #24
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}

0800b646 <VL53L0X_perform_ref_calibration>:
=======
 800a59a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3718      	adds	r7, #24
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}

0800a5a6 <VL53L0X_perform_ref_calibration>:
>>>>>>> ModeSelect_v2

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
<<<<<<< HEAD
 800b646:	b580      	push	{r7, lr}
 800b648:	b086      	sub	sp, #24
 800b64a:	af00      	add	r7, sp, #0
 800b64c:	60f8      	str	r0, [r7, #12]
 800b64e:	60b9      	str	r1, [r7, #8]
 800b650:	607a      	str	r2, [r7, #4]
 800b652:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b654:	2300      	movs	r3, #0
 800b656:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800b658:	2300      	movs	r3, #0
 800b65a:	75bb      	strb	r3, [r7, #22]
=======
 800a5a6:	b580      	push	{r7, lr}
 800a5a8:	b086      	sub	sp, #24
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	60f8      	str	r0, [r7, #12]
 800a5ae:	60b9      	str	r1, [r7, #8]
 800a5b0:	607a      	str	r2, [r7, #4]
 800a5b2:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	75bb      	strb	r3, [r7, #22]
>>>>>>> ModeSelect_v2

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
<<<<<<< HEAD
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800b662:	75bb      	strb	r3, [r7, #22]
=======
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800a5c2:	75bb      	strb	r3, [r7, #22]
>>>>>>> ModeSelect_v2

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
<<<<<<< HEAD
 800b664:	78fa      	ldrb	r2, [r7, #3]
 800b666:	2300      	movs	r3, #0
 800b668:	68b9      	ldr	r1, [r7, #8]
 800b66a:	68f8      	ldr	r0, [r7, #12]
 800b66c:	f7ff ff1f 	bl	800b4ae <VL53L0X_perform_vhv_calibration>
 800b670:	4603      	mov	r3, r0
 800b672:	75fb      	strb	r3, [r7, #23]
=======
 800a5c4:	78fa      	ldrb	r2, [r7, #3]
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	68b9      	ldr	r1, [r7, #8]
 800a5ca:	68f8      	ldr	r0, [r7, #12]
 800a5cc:	f7ff ff1f 	bl	800a40e <VL53L0X_perform_vhv_calibration>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	75fb      	strb	r3, [r7, #23]
>>>>>>> ModeSelect_v2
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
<<<<<<< HEAD
 800b674:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d107      	bne.n	800b68c <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800b67c:	78fa      	ldrb	r2, [r7, #3]
 800b67e:	2300      	movs	r3, #0
 800b680:	6879      	ldr	r1, [r7, #4]
 800b682:	68f8      	ldr	r0, [r7, #12]
 800b684:	f7ff ff7a 	bl	800b57c <VL53L0X_perform_phase_calibration>
 800b688:	4603      	mov	r3, r0
 800b68a:	75fb      	strb	r3, [r7, #23]
=======
 800a5d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d107      	bne.n	800a5ec <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800a5dc:	78fa      	ldrb	r2, [r7, #3]
 800a5de:	2300      	movs	r3, #0
 800a5e0:	6879      	ldr	r1, [r7, #4]
 800a5e2:	68f8      	ldr	r0, [r7, #12]
 800a5e4:	f7ff ff7a 	bl	800a4dc <VL53L0X_perform_phase_calibration>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	75fb      	strb	r3, [r7, #23]
>>>>>>> ModeSelect_v2
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 800b68c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d10f      	bne.n	800b6b4 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b694:	7dbb      	ldrb	r3, [r7, #22]
 800b696:	461a      	mov	r2, r3
 800b698:	2101      	movs	r1, #1
 800b69a:	68f8      	ldr	r0, [r7, #12]
 800b69c:	f002 fb98 	bl	800ddd0 <VL53L0X_WrByte>
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800b6a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d103      	bne.n	800b6b4 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	7dba      	ldrb	r2, [r7, #22]
 800b6b0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
=======
 800a5ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d10f      	bne.n	800a614 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a5f4:	7dbb      	ldrb	r3, [r7, #22]
 800a5f6:	461a      	mov	r2, r3
 800a5f8:	2101      	movs	r1, #1
 800a5fa:	68f8      	ldr	r0, [r7, #12]
 800a5fc:	f002 fb98 	bl	800cd30 <VL53L0X_WrByte>
 800a600:	4603      	mov	r3, r0
 800a602:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800a604:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d103      	bne.n	800a614 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	7dba      	ldrb	r2, [r7, #22]
 800a610:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
>>>>>>> ModeSelect_v2

	}

	return Status;
<<<<<<< HEAD
 800b6b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	3718      	adds	r7, #24
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bd80      	pop	{r7, pc}

0800b6c0 <VL53L0X_measurement_poll_for_completion>:
=======
 800a614:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a618:	4618      	mov	r0, r3
 800a61a:	3718      	adds	r7, #24
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}

0800a620 <VL53L0X_measurement_poll_for_completion>:
>>>>>>> ModeSelect_v2
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
<<<<<<< HEAD
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b086      	sub	sp, #24
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	73fb      	strb	r3, [r7, #15]
=======
 800a620:	b580      	push	{r7, lr}
 800a622:	b086      	sub	sp, #24
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a628:	2300      	movs	r3, #0
 800a62a:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800a62c:	2300      	movs	r3, #0
 800a62e:	73fb      	strb	r3, [r7, #15]
>>>>>>> ModeSelect_v2
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
<<<<<<< HEAD
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800b6d4:	f107 030f 	add.w	r3, r7, #15
 800b6d8:	4619      	mov	r1, r3
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f7fe fe02 	bl	800a2e4 <VL53L0X_GetMeasurementDataReady>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800b6e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d110      	bne.n	800b70e <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800b6ec:	7bfb      	ldrb	r3, [r7, #15]
 800b6ee:	2b01      	cmp	r3, #1
 800b6f0:	d00f      	beq.n	800b712 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800b6f2:	693b      	ldr	r3, [r7, #16]
 800b6f4:	3301      	adds	r3, #1
 800b6f6:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800b6f8:	693b      	ldr	r3, [r7, #16]
 800b6fa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b6fe:	d302      	bcc.n	800b706 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800b700:	23f9      	movs	r3, #249	; 0xf9
 800b702:	75fb      	strb	r3, [r7, #23]
			break;
 800b704:	e006      	b.n	800b714 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f002 fc82 	bl	800e010 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800b70c:	e7e2      	b.n	800b6d4 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800b70e:	bf00      	nop
 800b710:	e000      	b.n	800b714 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800b712:	bf00      	nop
=======
 800a630:	2300      	movs	r3, #0
 800a632:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800a634:	f107 030f 	add.w	r3, r7, #15
 800a638:	4619      	mov	r1, r3
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f7fe fe02 	bl	8009244 <VL53L0X_GetMeasurementDataReady>
 800a640:	4603      	mov	r3, r0
 800a642:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800a644:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d110      	bne.n	800a66e <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800a64c:	7bfb      	ldrb	r3, [r7, #15]
 800a64e:	2b01      	cmp	r3, #1
 800a650:	d00f      	beq.n	800a672 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	3301      	adds	r3, #1
 800a656:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800a658:	693b      	ldr	r3, [r7, #16]
 800a65a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a65e:	d302      	bcc.n	800a666 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800a660:	23f9      	movs	r3, #249	; 0xf9
 800a662:	75fb      	strb	r3, [r7, #23]
			break;
 800a664:	e006      	b.n	800a674 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f002 fc82 	bl	800cf70 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800a66c:	e7e2      	b.n	800a634 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800a66e:	bf00      	nop
 800a670:	e000      	b.n	800a674 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800a672:	bf00      	nop
>>>>>>> ModeSelect_v2
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
<<<<<<< HEAD
 800b714:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b718:	4618      	mov	r0, r3
 800b71a:	3718      	adds	r7, #24
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}

0800b720 <VL53L0X_decode_vcsel_period>:
=======
 800a674:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a678:	4618      	mov	r0, r3
 800a67a:	3718      	adds	r7, #24
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}

0800a680 <VL53L0X_decode_vcsel_period>:
>>>>>>> ModeSelect_v2


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
<<<<<<< HEAD
 800b720:	b480      	push	{r7}
 800b722:	b085      	sub	sp, #20
 800b724:	af00      	add	r7, sp, #0
 800b726:	4603      	mov	r3, r0
 800b728:	71fb      	strb	r3, [r7, #7]
=======
 800a680:	b480      	push	{r7}
 800a682:	b085      	sub	sp, #20
 800a684:	af00      	add	r7, sp, #0
 800a686:	4603      	mov	r3, r0
 800a688:	71fb      	strb	r3, [r7, #7]
>>>>>>> ModeSelect_v2
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
<<<<<<< HEAD
 800b72a:	2300      	movs	r3, #0
 800b72c:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800b72e:	79fb      	ldrb	r3, [r7, #7]
 800b730:	3301      	adds	r3, #1
 800b732:	b2db      	uxtb	r3, r3
 800b734:	005b      	lsls	r3, r3, #1
 800b736:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800b738:	7bfb      	ldrb	r3, [r7, #15]
}
 800b73a:	4618      	mov	r0, r3
 800b73c:	3714      	adds	r7, #20
 800b73e:	46bd      	mov	sp, r7
 800b740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b744:	4770      	bx	lr

0800b746 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800b746:	b480      	push	{r7}
 800b748:	b085      	sub	sp, #20
 800b74a:	af00      	add	r7, sp, #0
 800b74c:	4603      	mov	r3, r0
 800b74e:	71fb      	strb	r3, [r7, #7]
=======
 800a68a:	2300      	movs	r3, #0
 800a68c:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800a68e:	79fb      	ldrb	r3, [r7, #7]
 800a690:	3301      	adds	r3, #1
 800a692:	b2db      	uxtb	r3, r3
 800a694:	005b      	lsls	r3, r3, #1
 800a696:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800a698:	7bfb      	ldrb	r3, [r7, #15]
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	3714      	adds	r7, #20
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a4:	4770      	bx	lr

0800a6a6 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800a6a6:	b480      	push	{r7}
 800a6a8:	b085      	sub	sp, #20
 800a6aa:	af00      	add	r7, sp, #0
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	71fb      	strb	r3, [r7, #7]
>>>>>>> ModeSelect_v2
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
<<<<<<< HEAD
 800b750:	2300      	movs	r3, #0
 800b752:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 800b754:	79fb      	ldrb	r3, [r7, #7]
 800b756:	085b      	lsrs	r3, r3, #1
 800b758:	b2db      	uxtb	r3, r3
 800b75a:	3b01      	subs	r3, #1
 800b75c:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800b75e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b760:	4618      	mov	r0, r3
 800b762:	3714      	adds	r7, #20
 800b764:	46bd      	mov	sp, r7
 800b766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76a:	4770      	bx	lr

0800b76c <VL53L0X_isqrt>:
=======
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 800a6b4:	79fb      	ldrb	r3, [r7, #7]
 800a6b6:	085b      	lsrs	r3, r3, #1
 800a6b8:	b2db      	uxtb	r3, r3
 800a6ba:	3b01      	subs	r3, #1
 800a6bc:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800a6be:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3714      	adds	r7, #20
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ca:	4770      	bx	lr

0800a6cc <VL53L0X_isqrt>:
>>>>>>> ModeSelect_v2


uint32_t VL53L0X_isqrt(uint32_t num)
{
<<<<<<< HEAD
 800b76c:	b480      	push	{r7}
 800b76e:	b085      	sub	sp, #20
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
=======
 800a6cc:	b480      	push	{r7}
 800a6ce:	b085      	sub	sp, #20
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
>>>>>>> ModeSelect_v2
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
<<<<<<< HEAD
 800b774:	2300      	movs	r3, #0
 800b776:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800b778:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b77c:	60bb      	str	r3, [r7, #8]
=======
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800a6d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a6dc:	60bb      	str	r3, [r7, #8]
>>>>>>> ModeSelect_v2
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
<<<<<<< HEAD
 800b77e:	e002      	b.n	800b786 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	089b      	lsrs	r3, r3, #2
 800b784:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800b786:	68ba      	ldr	r2, [r7, #8]
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	429a      	cmp	r2, r3
 800b78c:	d8f8      	bhi.n	800b780 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800b78e:	e017      	b.n	800b7c0 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800b790:	68fa      	ldr	r2, [r7, #12]
 800b792:	68bb      	ldr	r3, [r7, #8]
 800b794:	4413      	add	r3, r2
 800b796:	687a      	ldr	r2, [r7, #4]
 800b798:	429a      	cmp	r2, r3
 800b79a:	d30b      	bcc.n	800b7b4 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800b79c:	68fa      	ldr	r2, [r7, #12]
 800b79e:	68bb      	ldr	r3, [r7, #8]
 800b7a0:	4413      	add	r3, r2
 800b7a2:	687a      	ldr	r2, [r7, #4]
 800b7a4:	1ad3      	subs	r3, r2, r3
 800b7a6:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	085b      	lsrs	r3, r3, #1
 800b7ac:	68ba      	ldr	r2, [r7, #8]
 800b7ae:	4413      	add	r3, r2
 800b7b0:	60fb      	str	r3, [r7, #12]
 800b7b2:	e002      	b.n	800b7ba <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	085b      	lsrs	r3, r3, #1
 800b7b8:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	089b      	lsrs	r3, r3, #2
 800b7be:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d1e4      	bne.n	800b790 <VL53L0X_isqrt+0x24>
	}

	return res;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	3714      	adds	r7, #20
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d2:	4770      	bx	lr

0800b7d4 <VL53L0X_device_read_strobe>:
=======
 800a6de:	e002      	b.n	800a6e6 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	089b      	lsrs	r3, r3, #2
 800a6e4:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800a6e6:	68ba      	ldr	r2, [r7, #8]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	429a      	cmp	r2, r3
 800a6ec:	d8f8      	bhi.n	800a6e0 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800a6ee:	e017      	b.n	800a720 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800a6f0:	68fa      	ldr	r2, [r7, #12]
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	4413      	add	r3, r2
 800a6f6:	687a      	ldr	r2, [r7, #4]
 800a6f8:	429a      	cmp	r2, r3
 800a6fa:	d30b      	bcc.n	800a714 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800a6fc:	68fa      	ldr	r2, [r7, #12]
 800a6fe:	68bb      	ldr	r3, [r7, #8]
 800a700:	4413      	add	r3, r2
 800a702:	687a      	ldr	r2, [r7, #4]
 800a704:	1ad3      	subs	r3, r2, r3
 800a706:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	085b      	lsrs	r3, r3, #1
 800a70c:	68ba      	ldr	r2, [r7, #8]
 800a70e:	4413      	add	r3, r2
 800a710:	60fb      	str	r3, [r7, #12]
 800a712:	e002      	b.n	800a71a <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	085b      	lsrs	r3, r3, #1
 800a718:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	089b      	lsrs	r3, r3, #2
 800a71e:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d1e4      	bne.n	800a6f0 <VL53L0X_isqrt+0x24>
	}

	return res;
 800a726:	68fb      	ldr	r3, [r7, #12]
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3714      	adds	r7, #20
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr

0800a734 <VL53L0X_device_read_strobe>:
>>>>>>> ModeSelect_v2
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
<<<<<<< HEAD
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b086      	sub	sp, #24
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	75fb      	strb	r3, [r7, #23]
=======
 800a734:	b580      	push	{r7, lr}
 800a736:	b086      	sub	sp, #24
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a73c:	2300      	movs	r3, #0
 800a73e:	75fb      	strb	r3, [r7, #23]
>>>>>>> ModeSelect_v2
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
<<<<<<< HEAD
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	2183      	movs	r1, #131	; 0x83
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	f002 faf3 	bl	800ddd0 <VL53L0X_WrByte>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	461a      	mov	r2, r3
 800b7ee:	7dfb      	ldrb	r3, [r7, #23]
 800b7f0:	4313      	orrs	r3, r2
 800b7f2:	75fb      	strb	r3, [r7, #23]
=======
 800a740:	2200      	movs	r2, #0
 800a742:	2183      	movs	r1, #131	; 0x83
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f002 faf3 	bl	800cd30 <VL53L0X_WrByte>
 800a74a:	4603      	mov	r3, r0
 800a74c:	461a      	mov	r2, r3
 800a74e:	7dfb      	ldrb	r3, [r7, #23]
 800a750:	4313      	orrs	r3, r2
 800a752:	75fb      	strb	r3, [r7, #23]
>>>>>>> ModeSelect_v2

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 800b7f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d11e      	bne.n	800b83a <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800b800:	f107 030f 	add.w	r3, r7, #15
 800b804:	461a      	mov	r2, r3
 800b806:	2183      	movs	r1, #131	; 0x83
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f002 fb63 	bl	800ded4 <VL53L0X_RdByte>
 800b80e:	4603      	mov	r3, r0
 800b810:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800b812:	7bfb      	ldrb	r3, [r7, #15]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d10a      	bne.n	800b82e <VL53L0X_device_read_strobe+0x5a>
 800b818:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d106      	bne.n	800b82e <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 800b820:	693b      	ldr	r3, [r7, #16]
 800b822:	3301      	adds	r3, #1
 800b824:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800b826:	693b      	ldr	r3, [r7, #16]
 800b828:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b82c:	d3e8      	bcc.n	800b800 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800b82e:	693b      	ldr	r3, [r7, #16]
 800b830:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b834:	d301      	bcc.n	800b83a <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800b836:	23f9      	movs	r3, #249	; 0xf9
 800b838:	75fb      	strb	r3, [r7, #23]
=======
 800a754:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d11e      	bne.n	800a79a <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 800a75c:	2300      	movs	r3, #0
 800a75e:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800a760:	f107 030f 	add.w	r3, r7, #15
 800a764:	461a      	mov	r2, r3
 800a766:	2183      	movs	r1, #131	; 0x83
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f002 fb63 	bl	800ce34 <VL53L0X_RdByte>
 800a76e:	4603      	mov	r3, r0
 800a770:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800a772:	7bfb      	ldrb	r3, [r7, #15]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d10a      	bne.n	800a78e <VL53L0X_device_read_strobe+0x5a>
 800a778:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d106      	bne.n	800a78e <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	3301      	adds	r3, #1
 800a784:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800a786:	693b      	ldr	r3, [r7, #16]
 800a788:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a78c:	d3e8      	bcc.n	800a760 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a794:	d301      	bcc.n	800a79a <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800a796:	23f9      	movs	r3, #249	; 0xf9
 800a798:	75fb      	strb	r3, [r7, #23]
>>>>>>> ModeSelect_v2

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
<<<<<<< HEAD
 800b83a:	2201      	movs	r2, #1
 800b83c:	2183      	movs	r1, #131	; 0x83
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f002 fac6 	bl	800ddd0 <VL53L0X_WrByte>
 800b844:	4603      	mov	r3, r0
 800b846:	461a      	mov	r2, r3
 800b848:	7dfb      	ldrb	r3, [r7, #23]
 800b84a:	4313      	orrs	r3, r2
 800b84c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800b84e:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800b852:	4618      	mov	r0, r3
 800b854:	3718      	adds	r7, #24
 800b856:	46bd      	mov	sp, r7
 800b858:	bd80      	pop	{r7, pc}

0800b85a <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800b85a:	b580      	push	{r7, lr}
 800b85c:	b098      	sub	sp, #96	; 0x60
 800b85e:	af00      	add	r7, sp, #0
 800b860:	6078      	str	r0, [r7, #4]
 800b862:	460b      	mov	r3, r1
 800b864:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b866:	2300      	movs	r3, #0
 800b868:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
=======
 800a79a:	2201      	movs	r2, #1
 800a79c:	2183      	movs	r1, #131	; 0x83
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f002 fac6 	bl	800cd30 <VL53L0X_WrByte>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	461a      	mov	r2, r3
 800a7a8:	7dfb      	ldrb	r3, [r7, #23]
 800a7aa:	4313      	orrs	r3, r2
 800a7ac:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800a7ae:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3718      	adds	r7, #24
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}

0800a7ba <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800a7ba:	b580      	push	{r7, lr}
 800a7bc:	b098      	sub	sp, #96	; 0x60
 800a7be:	af00      	add	r7, sp, #0
 800a7c0:	6078      	str	r0, [r7, #4]
 800a7c2:	460b      	mov	r3, r1
 800a7c4:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
>>>>>>> ModeSelect_v2
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
<<<<<<< HEAD
 800b86c:	2300      	movs	r3, #0
 800b86e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800b872:	2300      	movs	r3, #0
 800b874:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800b878:	2300      	movs	r3, #0
 800b87a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800b87c:	2300      	movs	r3, #0
 800b87e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800b880:	2300      	movs	r3, #0
 800b882:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800b884:	2300      	movs	r3, #0
 800b886:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800b88a:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800b88e:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800b890:	2300      	movs	r3, #0
 800b892:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800b894:	2300      	movs	r3, #0
 800b896:	653b      	str	r3, [r7, #80]	; 0x50
=======
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800a7ea:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800a7ee:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	653b      	str	r3, [r7, #80]	; 0x50
>>>>>>> ModeSelect_v2
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
<<<<<<< HEAD
 800b898:	2300      	movs	r3, #0
 800b89a:	643b      	str	r3, [r7, #64]	; 0x40
=======
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	643b      	str	r3, [r7, #64]	; 0x40
>>>>>>> ModeSelect_v2
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
<<<<<<< HEAD
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800b8a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
=======
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800a802:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
>>>>>>> ModeSelect_v2
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
<<<<<<< HEAD
 800b8a6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b8aa:	2b07      	cmp	r3, #7
 800b8ac:	f000 8408 	beq.w	800c0c0 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800b8b0:	2201      	movs	r2, #1
 800b8b2:	2180      	movs	r1, #128	; 0x80
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f002 fa8b 	bl	800ddd0 <VL53L0X_WrByte>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	461a      	mov	r2, r3
 800b8be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b8c2:	4313      	orrs	r3, r2
 800b8c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b8c8:	2201      	movs	r2, #1
 800b8ca:	21ff      	movs	r1, #255	; 0xff
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f002 fa7f 	bl	800ddd0 <VL53L0X_WrByte>
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	461a      	mov	r2, r3
 800b8d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b8da:	4313      	orrs	r3, r2
 800b8dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	2100      	movs	r1, #0
 800b8e4:	6878      	ldr	r0, [r7, #4]
 800b8e6:	f002 fa73 	bl	800ddd0 <VL53L0X_WrByte>
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	461a      	mov	r2, r3
 800b8ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b8f2:	4313      	orrs	r3, r2
 800b8f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800b8f8:	2206      	movs	r2, #6
 800b8fa:	21ff      	movs	r1, #255	; 0xff
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f002 fa67 	bl	800ddd0 <VL53L0X_WrByte>
 800b902:	4603      	mov	r3, r0
 800b904:	461a      	mov	r2, r3
 800b906:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b90a:	4313      	orrs	r3, r2
 800b90c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800b910:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800b914:	461a      	mov	r2, r3
 800b916:	2183      	movs	r1, #131	; 0x83
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	f002 fadb 	bl	800ded4 <VL53L0X_RdByte>
 800b91e:	4603      	mov	r3, r0
 800b920:	461a      	mov	r2, r3
 800b922:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b926:	4313      	orrs	r3, r2
 800b928:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800b92c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b930:	f043 0304 	orr.w	r3, r3, #4
 800b934:	b2db      	uxtb	r3, r3
 800b936:	461a      	mov	r2, r3
 800b938:	2183      	movs	r1, #131	; 0x83
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f002 fa48 	bl	800ddd0 <VL53L0X_WrByte>
 800b940:	4603      	mov	r3, r0
 800b942:	461a      	mov	r2, r3
 800b944:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b948:	4313      	orrs	r3, r2
 800b94a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800b94e:	2207      	movs	r2, #7
 800b950:	21ff      	movs	r1, #255	; 0xff
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f002 fa3c 	bl	800ddd0 <VL53L0X_WrByte>
 800b958:	4603      	mov	r3, r0
 800b95a:	461a      	mov	r2, r3
 800b95c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b960:	4313      	orrs	r3, r2
 800b962:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800b966:	2201      	movs	r2, #1
 800b968:	2181      	movs	r1, #129	; 0x81
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f002 fa30 	bl	800ddd0 <VL53L0X_WrByte>
 800b970:	4603      	mov	r3, r0
 800b972:	461a      	mov	r2, r3
 800b974:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b978:	4313      	orrs	r3, r2
 800b97a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	f002 fb46 	bl	800e010 <VL53L0X_PollingDelay>
 800b984:	4603      	mov	r3, r0
 800b986:	461a      	mov	r2, r3
 800b988:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b98c:	4313      	orrs	r3, r2
 800b98e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800b992:	2201      	movs	r2, #1
 800b994:	2180      	movs	r1, #128	; 0x80
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f002 fa1a 	bl	800ddd0 <VL53L0X_WrByte>
 800b99c:	4603      	mov	r3, r0
 800b99e:	461a      	mov	r2, r3
 800b9a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b9a4:	4313      	orrs	r3, r2
 800b9a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800b9aa:	78fb      	ldrb	r3, [r7, #3]
 800b9ac:	f003 0301 	and.w	r3, r3, #1
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	f000 8098 	beq.w	800bae6 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800b9b6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b9ba:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	f040 8091 	bne.w	800bae6 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800b9c4:	226b      	movs	r2, #107	; 0x6b
 800b9c6:	2194      	movs	r1, #148	; 0x94
 800b9c8:	6878      	ldr	r0, [r7, #4]
 800b9ca:	f002 fa01 	bl	800ddd0 <VL53L0X_WrByte>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	461a      	mov	r2, r3
 800b9d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b9d6:	4313      	orrs	r3, r2
 800b9d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b9dc:	6878      	ldr	r0, [r7, #4]
 800b9de:	f7ff fef9 	bl	800b7d4 <VL53L0X_device_read_strobe>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	461a      	mov	r2, r3
 800b9e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b9ea:	4313      	orrs	r3, r2
 800b9ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b9f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b9f4:	461a      	mov	r2, r3
 800b9f6:	2190      	movs	r1, #144	; 0x90
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f002 facd 	bl	800df98 <VL53L0X_RdDWord>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	461a      	mov	r2, r3
 800ba02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba06:	4313      	orrs	r3, r2
 800ba08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800ba0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba0e:	0a1b      	lsrs	r3, r3, #8
 800ba10:	b2db      	uxtb	r3, r3
 800ba12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba16:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800ba1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba1c:	0bdb      	lsrs	r3, r3, #15
 800ba1e:	b2db      	uxtb	r3, r3
 800ba20:	f003 0301 	and.w	r3, r3, #1
 800ba24:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800ba28:	2224      	movs	r2, #36	; 0x24
 800ba2a:	2194      	movs	r1, #148	; 0x94
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f002 f9cf 	bl	800ddd0 <VL53L0X_WrByte>
 800ba32:	4603      	mov	r3, r0
 800ba34:	461a      	mov	r2, r3
 800ba36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba3a:	4313      	orrs	r3, r2
 800ba3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ba40:	6878      	ldr	r0, [r7, #4]
 800ba42:	f7ff fec7 	bl	800b7d4 <VL53L0X_device_read_strobe>
 800ba46:	4603      	mov	r3, r0
 800ba48:	461a      	mov	r2, r3
 800ba4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba4e:	4313      	orrs	r3, r2
 800ba50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ba54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ba58:	461a      	mov	r2, r3
 800ba5a:	2190      	movs	r1, #144	; 0x90
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	f002 fa9b 	bl	800df98 <VL53L0X_RdDWord>
 800ba62:	4603      	mov	r3, r0
 800ba64:	461a      	mov	r2, r3
 800ba66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba6a:	4313      	orrs	r3, r2
 800ba6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800ba70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba72:	0e1b      	lsrs	r3, r3, #24
 800ba74:	b2db      	uxtb	r3, r3
 800ba76:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800ba78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba7a:	0c1b      	lsrs	r3, r3, #16
 800ba7c:	b2db      	uxtb	r3, r3
 800ba7e:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800ba80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba82:	0a1b      	lsrs	r3, r3, #8
 800ba84:	b2db      	uxtb	r3, r3
 800ba86:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800ba88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba8a:	b2db      	uxtb	r3, r3
 800ba8c:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800ba8e:	2225      	movs	r2, #37	; 0x25
 800ba90:	2194      	movs	r1, #148	; 0x94
 800ba92:	6878      	ldr	r0, [r7, #4]
 800ba94:	f002 f99c 	bl	800ddd0 <VL53L0X_WrByte>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	461a      	mov	r2, r3
 800ba9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800baa0:	4313      	orrs	r3, r2
 800baa2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800baa6:	6878      	ldr	r0, [r7, #4]
 800baa8:	f7ff fe94 	bl	800b7d4 <VL53L0X_device_read_strobe>
 800baac:	4603      	mov	r3, r0
 800baae:	461a      	mov	r2, r3
 800bab0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bab4:	4313      	orrs	r3, r2
 800bab6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800baba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800babe:	461a      	mov	r2, r3
 800bac0:	2190      	movs	r1, #144	; 0x90
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f002 fa68 	bl	800df98 <VL53L0X_RdDWord>
 800bac8:	4603      	mov	r3, r0
 800baca:	461a      	mov	r2, r3
 800bacc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bad0:	4313      	orrs	r3, r2
 800bad2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800bad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bad8:	0e1b      	lsrs	r3, r3, #24
 800bada:	b2db      	uxtb	r3, r3
 800badc:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800bade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae0:	0c1b      	lsrs	r3, r3, #16
 800bae2:	b2db      	uxtb	r3, r3
 800bae4:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800bae6:	78fb      	ldrb	r3, [r7, #3]
 800bae8:	f003 0302 	and.w	r3, r3, #2
 800baec:	2b00      	cmp	r3, #0
 800baee:	f000 8189 	beq.w	800be04 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800baf2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800baf6:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	f040 8182 	bne.w	800be04 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800bb00:	2202      	movs	r2, #2
 800bb02:	2194      	movs	r1, #148	; 0x94
 800bb04:	6878      	ldr	r0, [r7, #4]
 800bb06:	f002 f963 	bl	800ddd0 <VL53L0X_WrByte>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	461a      	mov	r2, r3
 800bb0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb12:	4313      	orrs	r3, r2
 800bb14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bb18:	6878      	ldr	r0, [r7, #4]
 800bb1a:	f7ff fe5b 	bl	800b7d4 <VL53L0X_device_read_strobe>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	461a      	mov	r2, r3
 800bb22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb26:	4313      	orrs	r3, r2
 800bb28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800bb2c:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800bb30:	461a      	mov	r2, r3
 800bb32:	2190      	movs	r1, #144	; 0x90
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f002 f9cd 	bl	800ded4 <VL53L0X_RdByte>
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	461a      	mov	r2, r3
 800bb3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb42:	4313      	orrs	r3, r2
 800bb44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800bb48:	227b      	movs	r2, #123	; 0x7b
 800bb4a:	2194      	movs	r1, #148	; 0x94
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f002 f93f 	bl	800ddd0 <VL53L0X_WrByte>
 800bb52:	4603      	mov	r3, r0
 800bb54:	461a      	mov	r2, r3
 800bb56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb5a:	4313      	orrs	r3, r2
 800bb5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f7ff fe37 	bl	800b7d4 <VL53L0X_device_read_strobe>
 800bb66:	4603      	mov	r3, r0
 800bb68:	461a      	mov	r2, r3
 800bb6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb6e:	4313      	orrs	r3, r2
 800bb70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800bb74:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800bb78:	461a      	mov	r2, r3
 800bb7a:	2190      	movs	r1, #144	; 0x90
 800bb7c:	6878      	ldr	r0, [r7, #4]
 800bb7e:	f002 f9a9 	bl	800ded4 <VL53L0X_RdByte>
 800bb82:	4603      	mov	r3, r0
 800bb84:	461a      	mov	r2, r3
 800bb86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb8a:	4313      	orrs	r3, r2
 800bb8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800bb90:	2277      	movs	r2, #119	; 0x77
 800bb92:	2194      	movs	r1, #148	; 0x94
 800bb94:	6878      	ldr	r0, [r7, #4]
 800bb96:	f002 f91b 	bl	800ddd0 <VL53L0X_WrByte>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	461a      	mov	r2, r3
 800bb9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bba2:	4313      	orrs	r3, r2
 800bba4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f7ff fe13 	bl	800b7d4 <VL53L0X_device_read_strobe>
 800bbae:	4603      	mov	r3, r0
 800bbb0:	461a      	mov	r2, r3
 800bbb2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bbb6:	4313      	orrs	r3, r2
 800bbb8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bbbc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bbc0:	461a      	mov	r2, r3
 800bbc2:	2190      	movs	r1, #144	; 0x90
 800bbc4:	6878      	ldr	r0, [r7, #4]
 800bbc6:	f002 f9e7 	bl	800df98 <VL53L0X_RdDWord>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	461a      	mov	r2, r3
 800bbce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bbd2:	4313      	orrs	r3, r2
 800bbd4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800bbd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbda:	0e5b      	lsrs	r3, r3, #25
 800bbdc:	b2db      	uxtb	r3, r3
 800bbde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbe2:	b2db      	uxtb	r3, r3
 800bbe4:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800bbe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbe8:	0c9b      	lsrs	r3, r3, #18
 800bbea:	b2db      	uxtb	r3, r3
 800bbec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbf0:	b2db      	uxtb	r3, r3
 800bbf2:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800bbf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbf6:	0adb      	lsrs	r3, r3, #11
 800bbf8:	b2db      	uxtb	r3, r3
 800bbfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbfe:	b2db      	uxtb	r3, r3
 800bc00:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800bc02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc04:	091b      	lsrs	r3, r3, #4
 800bc06:	b2db      	uxtb	r3, r3
 800bc08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc0c:	b2db      	uxtb	r3, r3
 800bc0e:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800bc10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc12:	b2db      	uxtb	r3, r3
 800bc14:	00db      	lsls	r3, r3, #3
 800bc16:	b2db      	uxtb	r3, r3
 800bc18:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800bc1c:	b2db      	uxtb	r3, r3
 800bc1e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800bc22:	2278      	movs	r2, #120	; 0x78
 800bc24:	2194      	movs	r1, #148	; 0x94
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f002 f8d2 	bl	800ddd0 <VL53L0X_WrByte>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	461a      	mov	r2, r3
 800bc30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc34:	4313      	orrs	r3, r2
 800bc36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	f7ff fdca 	bl	800b7d4 <VL53L0X_device_read_strobe>
 800bc40:	4603      	mov	r3, r0
 800bc42:	461a      	mov	r2, r3
 800bc44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc48:	4313      	orrs	r3, r2
 800bc4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bc4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bc52:	461a      	mov	r2, r3
 800bc54:	2190      	movs	r1, #144	; 0x90
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f002 f99e 	bl	800df98 <VL53L0X_RdDWord>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	461a      	mov	r2, r3
 800bc60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc64:	4313      	orrs	r3, r2
 800bc66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800bc6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc6c:	0f5b      	lsrs	r3, r3, #29
 800bc6e:	b2db      	uxtb	r3, r3
 800bc70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc74:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800bc76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bc7a:	4413      	add	r3, r2
 800bc7c:	b2db      	uxtb	r3, r3
 800bc7e:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800bc80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc82:	0d9b      	lsrs	r3, r3, #22
 800bc84:	b2db      	uxtb	r3, r3
 800bc86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc8a:	b2db      	uxtb	r3, r3
 800bc8c:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800bc8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc90:	0bdb      	lsrs	r3, r3, #15
 800bc92:	b2db      	uxtb	r3, r3
 800bc94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc98:	b2db      	uxtb	r3, r3
 800bc9a:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800bc9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc9e:	0a1b      	lsrs	r3, r3, #8
 800bca0:	b2db      	uxtb	r3, r3
 800bca2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bca6:	b2db      	uxtb	r3, r3
 800bca8:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800bcaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcac:	085b      	lsrs	r3, r3, #1
 800bcae:	b2db      	uxtb	r3, r3
 800bcb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bcb4:	b2db      	uxtb	r3, r3
 800bcb6:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800bcb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcba:	b2db      	uxtb	r3, r3
 800bcbc:	019b      	lsls	r3, r3, #6
 800bcbe:	b2db      	uxtb	r3, r3
 800bcc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcc4:	b2db      	uxtb	r3, r3
 800bcc6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800bcca:	2279      	movs	r2, #121	; 0x79
 800bccc:	2194      	movs	r1, #148	; 0x94
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f002 f87e 	bl	800ddd0 <VL53L0X_WrByte>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	461a      	mov	r2, r3
 800bcd8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bcdc:	4313      	orrs	r3, r2
 800bcde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f7ff fd76 	bl	800b7d4 <VL53L0X_device_read_strobe>
 800bce8:	4603      	mov	r3, r0
 800bcea:	461a      	mov	r2, r3
 800bcec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bcf0:	4313      	orrs	r3, r2
 800bcf2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bcf6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bcfa:	461a      	mov	r2, r3
 800bcfc:	2190      	movs	r1, #144	; 0x90
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	f002 f94a 	bl	800df98 <VL53L0X_RdDWord>
 800bd04:	4603      	mov	r3, r0
 800bd06:	461a      	mov	r2, r3
 800bd08:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd0c:	4313      	orrs	r3, r2
 800bd0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800bd12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd14:	0e9b      	lsrs	r3, r3, #26
 800bd16:	b2db      	uxtb	r3, r3
 800bd18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd1c:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800bd1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bd22:	4413      	add	r3, r2
 800bd24:	b2db      	uxtb	r3, r3
 800bd26:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800bd28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd2a:	0cdb      	lsrs	r3, r3, #19
 800bd2c:	b2db      	uxtb	r3, r3
 800bd2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd32:	b2db      	uxtb	r3, r3
 800bd34:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800bd36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd38:	0b1b      	lsrs	r3, r3, #12
 800bd3a:	b2db      	uxtb	r3, r3
 800bd3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd40:	b2db      	uxtb	r3, r3
 800bd42:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800bd44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd46:	095b      	lsrs	r3, r3, #5
 800bd48:	b2db      	uxtb	r3, r3
 800bd4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd4e:	b2db      	uxtb	r3, r3
 800bd50:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800bd52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd54:	b2db      	uxtb	r3, r3
 800bd56:	009b      	lsls	r3, r3, #2
 800bd58:	b2db      	uxtb	r3, r3
 800bd5a:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800bd5e:	b2db      	uxtb	r3, r3
 800bd60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800bd64:	227a      	movs	r2, #122	; 0x7a
 800bd66:	2194      	movs	r1, #148	; 0x94
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f002 f831 	bl	800ddd0 <VL53L0X_WrByte>
 800bd6e:	4603      	mov	r3, r0
 800bd70:	461a      	mov	r2, r3
 800bd72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd76:	4313      	orrs	r3, r2
 800bd78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800bd7c:	6878      	ldr	r0, [r7, #4]
 800bd7e:	f7ff fd29 	bl	800b7d4 <VL53L0X_device_read_strobe>
 800bd82:	4603      	mov	r3, r0
 800bd84:	461a      	mov	r2, r3
 800bd86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd8a:	4313      	orrs	r3, r2
 800bd8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bd90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bd94:	461a      	mov	r2, r3
 800bd96:	2190      	movs	r1, #144	; 0x90
 800bd98:	6878      	ldr	r0, [r7, #4]
 800bd9a:	f002 f8fd 	bl	800df98 <VL53L0X_RdDWord>
 800bd9e:	4603      	mov	r3, r0
 800bda0:	461a      	mov	r2, r3
 800bda2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bda6:	4313      	orrs	r3, r2
 800bda8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800bdac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdae:	0f9b      	lsrs	r3, r3, #30
 800bdb0:	b2db      	uxtb	r3, r3
 800bdb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdb6:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800bdb8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bdbc:	4413      	add	r3, r2
 800bdbe:	b2db      	uxtb	r3, r3
 800bdc0:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800bdc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdc4:	0ddb      	lsrs	r3, r3, #23
 800bdc6:	b2db      	uxtb	r3, r3
 800bdc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdcc:	b2db      	uxtb	r3, r3
 800bdce:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800bdd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd2:	0c1b      	lsrs	r3, r3, #16
 800bdd4:	b2db      	uxtb	r3, r3
 800bdd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdda:	b2db      	uxtb	r3, r3
 800bddc:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800bdde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bde0:	0a5b      	lsrs	r3, r3, #9
 800bde2:	b2db      	uxtb	r3, r3
 800bde4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bde8:	b2db      	uxtb	r3, r3
 800bdea:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800bdee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdf0:	089b      	lsrs	r3, r3, #2
 800bdf2:	b2db      	uxtb	r3, r3
 800bdf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdf8:	b2db      	uxtb	r3, r3
 800bdfa:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800bdfe:	2300      	movs	r3, #0
 800be00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
=======
 800a806:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a80a:	2b07      	cmp	r3, #7
 800a80c:	f000 8408 	beq.w	800b020 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800a810:	2201      	movs	r2, #1
 800a812:	2180      	movs	r1, #128	; 0x80
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f002 fa8b 	bl	800cd30 <VL53L0X_WrByte>
 800a81a:	4603      	mov	r3, r0
 800a81c:	461a      	mov	r2, r3
 800a81e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a822:	4313      	orrs	r3, r2
 800a824:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a828:	2201      	movs	r2, #1
 800a82a:	21ff      	movs	r1, #255	; 0xff
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f002 fa7f 	bl	800cd30 <VL53L0X_WrByte>
 800a832:	4603      	mov	r3, r0
 800a834:	461a      	mov	r2, r3
 800a836:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a83a:	4313      	orrs	r3, r2
 800a83c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a840:	2200      	movs	r2, #0
 800a842:	2100      	movs	r1, #0
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f002 fa73 	bl	800cd30 <VL53L0X_WrByte>
 800a84a:	4603      	mov	r3, r0
 800a84c:	461a      	mov	r2, r3
 800a84e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a852:	4313      	orrs	r3, r2
 800a854:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800a858:	2206      	movs	r2, #6
 800a85a:	21ff      	movs	r1, #255	; 0xff
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f002 fa67 	bl	800cd30 <VL53L0X_WrByte>
 800a862:	4603      	mov	r3, r0
 800a864:	461a      	mov	r2, r3
 800a866:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a86a:	4313      	orrs	r3, r2
 800a86c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800a870:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800a874:	461a      	mov	r2, r3
 800a876:	2183      	movs	r1, #131	; 0x83
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f002 fadb 	bl	800ce34 <VL53L0X_RdByte>
 800a87e:	4603      	mov	r3, r0
 800a880:	461a      	mov	r2, r3
 800a882:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a886:	4313      	orrs	r3, r2
 800a888:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800a88c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a890:	f043 0304 	orr.w	r3, r3, #4
 800a894:	b2db      	uxtb	r3, r3
 800a896:	461a      	mov	r2, r3
 800a898:	2183      	movs	r1, #131	; 0x83
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f002 fa48 	bl	800cd30 <VL53L0X_WrByte>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	461a      	mov	r2, r3
 800a8a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8a8:	4313      	orrs	r3, r2
 800a8aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800a8ae:	2207      	movs	r2, #7
 800a8b0:	21ff      	movs	r1, #255	; 0xff
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f002 fa3c 	bl	800cd30 <VL53L0X_WrByte>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	461a      	mov	r2, r3
 800a8bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8c0:	4313      	orrs	r3, r2
 800a8c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	2181      	movs	r1, #129	; 0x81
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f002 fa30 	bl	800cd30 <VL53L0X_WrByte>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	461a      	mov	r2, r3
 800a8d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8d8:	4313      	orrs	r3, r2
 800a8da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f002 fb46 	bl	800cf70 <VL53L0X_PollingDelay>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	461a      	mov	r2, r3
 800a8e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8ec:	4313      	orrs	r3, r2
 800a8ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800a8f2:	2201      	movs	r2, #1
 800a8f4:	2180      	movs	r1, #128	; 0x80
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f002 fa1a 	bl	800cd30 <VL53L0X_WrByte>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	461a      	mov	r2, r3
 800a900:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a904:	4313      	orrs	r3, r2
 800a906:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800a90a:	78fb      	ldrb	r3, [r7, #3]
 800a90c:	f003 0301 	and.w	r3, r3, #1
 800a910:	2b00      	cmp	r3, #0
 800a912:	f000 8098 	beq.w	800aa46 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800a916:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a91a:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800a91e:	2b00      	cmp	r3, #0
 800a920:	f040 8091 	bne.w	800aa46 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800a924:	226b      	movs	r2, #107	; 0x6b
 800a926:	2194      	movs	r1, #148	; 0x94
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f002 fa01 	bl	800cd30 <VL53L0X_WrByte>
 800a92e:	4603      	mov	r3, r0
 800a930:	461a      	mov	r2, r3
 800a932:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a936:	4313      	orrs	r3, r2
 800a938:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f7ff fef9 	bl	800a734 <VL53L0X_device_read_strobe>
 800a942:	4603      	mov	r3, r0
 800a944:	461a      	mov	r2, r3
 800a946:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a94a:	4313      	orrs	r3, r2
 800a94c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a950:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a954:	461a      	mov	r2, r3
 800a956:	2190      	movs	r1, #144	; 0x90
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f002 facd 	bl	800cef8 <VL53L0X_RdDWord>
 800a95e:	4603      	mov	r3, r0
 800a960:	461a      	mov	r2, r3
 800a962:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a966:	4313      	orrs	r3, r2
 800a968:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800a96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a96e:	0a1b      	lsrs	r3, r3, #8
 800a970:	b2db      	uxtb	r3, r3
 800a972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a976:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800a97a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a97c:	0bdb      	lsrs	r3, r3, #15
 800a97e:	b2db      	uxtb	r3, r3
 800a980:	f003 0301 	and.w	r3, r3, #1
 800a984:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800a988:	2224      	movs	r2, #36	; 0x24
 800a98a:	2194      	movs	r1, #148	; 0x94
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f002 f9cf 	bl	800cd30 <VL53L0X_WrByte>
 800a992:	4603      	mov	r3, r0
 800a994:	461a      	mov	r2, r3
 800a996:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a99a:	4313      	orrs	r3, r2
 800a99c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f7ff fec7 	bl	800a734 <VL53L0X_device_read_strobe>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	461a      	mov	r2, r3
 800a9aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a9ae:	4313      	orrs	r3, r2
 800a9b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a9b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a9b8:	461a      	mov	r2, r3
 800a9ba:	2190      	movs	r1, #144	; 0x90
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f002 fa9b 	bl	800cef8 <VL53L0X_RdDWord>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	461a      	mov	r2, r3
 800a9c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a9ca:	4313      	orrs	r3, r2
 800a9cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800a9d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9d2:	0e1b      	lsrs	r3, r3, #24
 800a9d4:	b2db      	uxtb	r3, r3
 800a9d6:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800a9d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9da:	0c1b      	lsrs	r3, r3, #16
 800a9dc:	b2db      	uxtb	r3, r3
 800a9de:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800a9e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e2:	0a1b      	lsrs	r3, r3, #8
 800a9e4:	b2db      	uxtb	r3, r3
 800a9e6:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800a9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ea:	b2db      	uxtb	r3, r3
 800a9ec:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800a9ee:	2225      	movs	r2, #37	; 0x25
 800a9f0:	2194      	movs	r1, #148	; 0x94
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f002 f99c 	bl	800cd30 <VL53L0X_WrByte>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	461a      	mov	r2, r3
 800a9fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa00:	4313      	orrs	r3, r2
 800aa02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f7ff fe94 	bl	800a734 <VL53L0X_device_read_strobe>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	461a      	mov	r2, r3
 800aa10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa14:	4313      	orrs	r3, r2
 800aa16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800aa1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800aa1e:	461a      	mov	r2, r3
 800aa20:	2190      	movs	r1, #144	; 0x90
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f002 fa68 	bl	800cef8 <VL53L0X_RdDWord>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	461a      	mov	r2, r3
 800aa2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa30:	4313      	orrs	r3, r2
 800aa32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800aa36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa38:	0e1b      	lsrs	r3, r3, #24
 800aa3a:	b2db      	uxtb	r3, r3
 800aa3c:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800aa3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa40:	0c1b      	lsrs	r3, r3, #16
 800aa42:	b2db      	uxtb	r3, r3
 800aa44:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800aa46:	78fb      	ldrb	r3, [r7, #3]
 800aa48:	f003 0302 	and.w	r3, r3, #2
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	f000 8189 	beq.w	800ad64 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800aa52:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800aa56:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	f040 8182 	bne.w	800ad64 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800aa60:	2202      	movs	r2, #2
 800aa62:	2194      	movs	r1, #148	; 0x94
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f002 f963 	bl	800cd30 <VL53L0X_WrByte>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	461a      	mov	r2, r3
 800aa6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa72:	4313      	orrs	r3, r2
 800aa74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f7ff fe5b 	bl	800a734 <VL53L0X_device_read_strobe>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	461a      	mov	r2, r3
 800aa82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa86:	4313      	orrs	r3, r2
 800aa88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800aa8c:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800aa90:	461a      	mov	r2, r3
 800aa92:	2190      	movs	r1, #144	; 0x90
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f002 f9cd 	bl	800ce34 <VL53L0X_RdByte>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	461a      	mov	r2, r3
 800aa9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aaa2:	4313      	orrs	r3, r2
 800aaa4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800aaa8:	227b      	movs	r2, #123	; 0x7b
 800aaaa:	2194      	movs	r1, #148	; 0x94
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f002 f93f 	bl	800cd30 <VL53L0X_WrByte>
 800aab2:	4603      	mov	r3, r0
 800aab4:	461a      	mov	r2, r3
 800aab6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aaba:	4313      	orrs	r3, r2
 800aabc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f7ff fe37 	bl	800a734 <VL53L0X_device_read_strobe>
 800aac6:	4603      	mov	r3, r0
 800aac8:	461a      	mov	r2, r3
 800aaca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aace:	4313      	orrs	r3, r2
 800aad0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800aad4:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800aad8:	461a      	mov	r2, r3
 800aada:	2190      	movs	r1, #144	; 0x90
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f002 f9a9 	bl	800ce34 <VL53L0X_RdByte>
 800aae2:	4603      	mov	r3, r0
 800aae4:	461a      	mov	r2, r3
 800aae6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aaea:	4313      	orrs	r3, r2
 800aaec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800aaf0:	2277      	movs	r2, #119	; 0x77
 800aaf2:	2194      	movs	r1, #148	; 0x94
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f002 f91b 	bl	800cd30 <VL53L0X_WrByte>
 800aafa:	4603      	mov	r3, r0
 800aafc:	461a      	mov	r2, r3
 800aafe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab02:	4313      	orrs	r3, r2
 800ab04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f7ff fe13 	bl	800a734 <VL53L0X_device_read_strobe>
 800ab0e:	4603      	mov	r3, r0
 800ab10:	461a      	mov	r2, r3
 800ab12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab16:	4313      	orrs	r3, r2
 800ab18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ab1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ab20:	461a      	mov	r2, r3
 800ab22:	2190      	movs	r1, #144	; 0x90
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f002 f9e7 	bl	800cef8 <VL53L0X_RdDWord>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	461a      	mov	r2, r3
 800ab2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab32:	4313      	orrs	r3, r2
 800ab34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800ab38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab3a:	0e5b      	lsrs	r3, r3, #25
 800ab3c:	b2db      	uxtb	r3, r3
 800ab3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab42:	b2db      	uxtb	r3, r3
 800ab44:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800ab46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab48:	0c9b      	lsrs	r3, r3, #18
 800ab4a:	b2db      	uxtb	r3, r3
 800ab4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab50:	b2db      	uxtb	r3, r3
 800ab52:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800ab54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab56:	0adb      	lsrs	r3, r3, #11
 800ab58:	b2db      	uxtb	r3, r3
 800ab5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab5e:	b2db      	uxtb	r3, r3
 800ab60:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800ab62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab64:	091b      	lsrs	r3, r3, #4
 800ab66:	b2db      	uxtb	r3, r3
 800ab68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab6c:	b2db      	uxtb	r3, r3
 800ab6e:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800ab70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab72:	b2db      	uxtb	r3, r3
 800ab74:	00db      	lsls	r3, r3, #3
 800ab76:	b2db      	uxtb	r3, r3
 800ab78:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800ab7c:	b2db      	uxtb	r3, r3
 800ab7e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800ab82:	2278      	movs	r2, #120	; 0x78
 800ab84:	2194      	movs	r1, #148	; 0x94
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f002 f8d2 	bl	800cd30 <VL53L0X_WrByte>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	461a      	mov	r2, r3
 800ab90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab94:	4313      	orrs	r3, r2
 800ab96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f7ff fdca 	bl	800a734 <VL53L0X_device_read_strobe>
 800aba0:	4603      	mov	r3, r0
 800aba2:	461a      	mov	r2, r3
 800aba4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aba8:	4313      	orrs	r3, r2
 800abaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800abae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800abb2:	461a      	mov	r2, r3
 800abb4:	2190      	movs	r1, #144	; 0x90
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f002 f99e 	bl	800cef8 <VL53L0X_RdDWord>
 800abbc:	4603      	mov	r3, r0
 800abbe:	461a      	mov	r2, r3
 800abc0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800abc4:	4313      	orrs	r3, r2
 800abc6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800abca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abcc:	0f5b      	lsrs	r3, r3, #29
 800abce:	b2db      	uxtb	r3, r3
 800abd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abd4:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800abd6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800abda:	4413      	add	r3, r2
 800abdc:	b2db      	uxtb	r3, r3
 800abde:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800abe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abe2:	0d9b      	lsrs	r3, r3, #22
 800abe4:	b2db      	uxtb	r3, r3
 800abe6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abea:	b2db      	uxtb	r3, r3
 800abec:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800abee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf0:	0bdb      	lsrs	r3, r3, #15
 800abf2:	b2db      	uxtb	r3, r3
 800abf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abf8:	b2db      	uxtb	r3, r3
 800abfa:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800abfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abfe:	0a1b      	lsrs	r3, r3, #8
 800ac00:	b2db      	uxtb	r3, r3
 800ac02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac06:	b2db      	uxtb	r3, r3
 800ac08:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800ac0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac0c:	085b      	lsrs	r3, r3, #1
 800ac0e:	b2db      	uxtb	r3, r3
 800ac10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac14:	b2db      	uxtb	r3, r3
 800ac16:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800ac18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac1a:	b2db      	uxtb	r3, r3
 800ac1c:	019b      	lsls	r3, r3, #6
 800ac1e:	b2db      	uxtb	r3, r3
 800ac20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac24:	b2db      	uxtb	r3, r3
 800ac26:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800ac2a:	2279      	movs	r2, #121	; 0x79
 800ac2c:	2194      	movs	r1, #148	; 0x94
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f002 f87e 	bl	800cd30 <VL53L0X_WrByte>
 800ac34:	4603      	mov	r3, r0
 800ac36:	461a      	mov	r2, r3
 800ac38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac3c:	4313      	orrs	r3, r2
 800ac3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f7ff fd76 	bl	800a734 <VL53L0X_device_read_strobe>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	461a      	mov	r2, r3
 800ac4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac50:	4313      	orrs	r3, r2
 800ac52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ac56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ac5a:	461a      	mov	r2, r3
 800ac5c:	2190      	movs	r1, #144	; 0x90
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f002 f94a 	bl	800cef8 <VL53L0X_RdDWord>
 800ac64:	4603      	mov	r3, r0
 800ac66:	461a      	mov	r2, r3
 800ac68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac6c:	4313      	orrs	r3, r2
 800ac6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800ac72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac74:	0e9b      	lsrs	r3, r3, #26
 800ac76:	b2db      	uxtb	r3, r3
 800ac78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac7c:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800ac7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ac82:	4413      	add	r3, r2
 800ac84:	b2db      	uxtb	r3, r3
 800ac86:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800ac88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac8a:	0cdb      	lsrs	r3, r3, #19
 800ac8c:	b2db      	uxtb	r3, r3
 800ac8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac92:	b2db      	uxtb	r3, r3
 800ac94:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800ac96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac98:	0b1b      	lsrs	r3, r3, #12
 800ac9a:	b2db      	uxtb	r3, r3
 800ac9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aca0:	b2db      	uxtb	r3, r3
 800aca2:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800aca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aca6:	095b      	lsrs	r3, r3, #5
 800aca8:	b2db      	uxtb	r3, r3
 800acaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acae:	b2db      	uxtb	r3, r3
 800acb0:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800acb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acb4:	b2db      	uxtb	r3, r3
 800acb6:	009b      	lsls	r3, r3, #2
 800acb8:	b2db      	uxtb	r3, r3
 800acba:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800acbe:	b2db      	uxtb	r3, r3
 800acc0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800acc4:	227a      	movs	r2, #122	; 0x7a
 800acc6:	2194      	movs	r1, #148	; 0x94
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f002 f831 	bl	800cd30 <VL53L0X_WrByte>
 800acce:	4603      	mov	r3, r0
 800acd0:	461a      	mov	r2, r3
 800acd2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800acd6:	4313      	orrs	r3, r2
 800acd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f7ff fd29 	bl	800a734 <VL53L0X_device_read_strobe>
 800ace2:	4603      	mov	r3, r0
 800ace4:	461a      	mov	r2, r3
 800ace6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800acea:	4313      	orrs	r3, r2
 800acec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800acf0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800acf4:	461a      	mov	r2, r3
 800acf6:	2190      	movs	r1, #144	; 0x90
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	f002 f8fd 	bl	800cef8 <VL53L0X_RdDWord>
 800acfe:	4603      	mov	r3, r0
 800ad00:	461a      	mov	r2, r3
 800ad02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad06:	4313      	orrs	r3, r2
 800ad08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800ad0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad0e:	0f9b      	lsrs	r3, r3, #30
 800ad10:	b2db      	uxtb	r3, r3
 800ad12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad16:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800ad18:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ad1c:	4413      	add	r3, r2
 800ad1e:	b2db      	uxtb	r3, r3
 800ad20:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800ad22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad24:	0ddb      	lsrs	r3, r3, #23
 800ad26:	b2db      	uxtb	r3, r3
 800ad28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad2c:	b2db      	uxtb	r3, r3
 800ad2e:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800ad30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad32:	0c1b      	lsrs	r3, r3, #16
 800ad34:	b2db      	uxtb	r3, r3
 800ad36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad3a:	b2db      	uxtb	r3, r3
 800ad3c:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800ad3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad40:	0a5b      	lsrs	r3, r3, #9
 800ad42:	b2db      	uxtb	r3, r3
 800ad44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad48:	b2db      	uxtb	r3, r3
 800ad4a:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800ad4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad50:	089b      	lsrs	r3, r3, #2
 800ad52:	b2db      	uxtb	r3, r3
 800ad54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad58:	b2db      	uxtb	r3, r3
 800ad5a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800ad5e:	2300      	movs	r3, #0
 800ad60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
>>>>>>> ModeSelect_v2

		}

		if (((option & 4) == 4) &&
<<<<<<< HEAD
 800be04:	78fb      	ldrb	r3, [r7, #3]
 800be06:	f003 0304 	and.w	r3, r3, #4
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	f000 80f1 	beq.w	800bff2 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800be10:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800be14:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800be18:	2b00      	cmp	r3, #0
 800be1a:	f040 80ea 	bne.w	800bff2 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800be1e:	227b      	movs	r2, #123	; 0x7b
 800be20:	2194      	movs	r1, #148	; 0x94
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f001 ffd4 	bl	800ddd0 <VL53L0X_WrByte>
 800be28:	4603      	mov	r3, r0
 800be2a:	461a      	mov	r2, r3
 800be2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800be30:	4313      	orrs	r3, r2
 800be32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f7ff fccc 	bl	800b7d4 <VL53L0X_device_read_strobe>
 800be3c:	4603      	mov	r3, r0
 800be3e:	461a      	mov	r2, r3
 800be40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800be44:	4313      	orrs	r3, r2
 800be46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800be4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800be4e:	461a      	mov	r2, r3
 800be50:	2190      	movs	r1, #144	; 0x90
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f002 f8a0 	bl	800df98 <VL53L0X_RdDWord>
 800be58:	4603      	mov	r3, r0
 800be5a:	461a      	mov	r2, r3
 800be5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800be60:	4313      	orrs	r3, r2
 800be62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800be66:	227c      	movs	r2, #124	; 0x7c
 800be68:	2194      	movs	r1, #148	; 0x94
 800be6a:	6878      	ldr	r0, [r7, #4]
 800be6c:	f001 ffb0 	bl	800ddd0 <VL53L0X_WrByte>
 800be70:	4603      	mov	r3, r0
 800be72:	461a      	mov	r2, r3
 800be74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800be78:	4313      	orrs	r3, r2
 800be7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f7ff fca8 	bl	800b7d4 <VL53L0X_device_read_strobe>
 800be84:	4603      	mov	r3, r0
 800be86:	461a      	mov	r2, r3
 800be88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800be8c:	4313      	orrs	r3, r2
 800be8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800be92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800be96:	461a      	mov	r2, r3
 800be98:	2190      	movs	r1, #144	; 0x90
 800be9a:	6878      	ldr	r0, [r7, #4]
 800be9c:	f002 f87c 	bl	800df98 <VL53L0X_RdDWord>
 800bea0:	4603      	mov	r3, r0
 800bea2:	461a      	mov	r2, r3
 800bea4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bea8:	4313      	orrs	r3, r2
 800beaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800beae:	2273      	movs	r2, #115	; 0x73
 800beb0:	2194      	movs	r1, #148	; 0x94
 800beb2:	6878      	ldr	r0, [r7, #4]
 800beb4:	f001 ff8c 	bl	800ddd0 <VL53L0X_WrByte>
 800beb8:	4603      	mov	r3, r0
 800beba:	461a      	mov	r2, r3
 800bebc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bec0:	4313      	orrs	r3, r2
 800bec2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f7ff fc84 	bl	800b7d4 <VL53L0X_device_read_strobe>
 800becc:	4603      	mov	r3, r0
 800bece:	461a      	mov	r2, r3
 800bed0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bed4:	4313      	orrs	r3, r2
 800bed6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800beda:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bede:	461a      	mov	r2, r3
 800bee0:	2190      	movs	r1, #144	; 0x90
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	f002 f858 	bl	800df98 <VL53L0X_RdDWord>
 800bee8:	4603      	mov	r3, r0
 800beea:	461a      	mov	r2, r3
 800beec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bef0:	4313      	orrs	r3, r2
 800bef2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800bef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef8:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800befa:	b29b      	uxth	r3, r3
 800befc:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800befe:	2274      	movs	r2, #116	; 0x74
 800bf00:	2194      	movs	r1, #148	; 0x94
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	f001 ff64 	bl	800ddd0 <VL53L0X_WrByte>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	461a      	mov	r2, r3
 800bf0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf10:	4313      	orrs	r3, r2
 800bf12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f7ff fc5c 	bl	800b7d4 <VL53L0X_device_read_strobe>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	461a      	mov	r2, r3
 800bf20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf24:	4313      	orrs	r3, r2
 800bf26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bf2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bf2e:	461a      	mov	r2, r3
 800bf30:	2190      	movs	r1, #144	; 0x90
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	f002 f830 	bl	800df98 <VL53L0X_RdDWord>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	461a      	mov	r2, r3
 800bf3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf40:	4313      	orrs	r3, r2
 800bf42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800bf46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf48:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800bf4a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bf4c:	4313      	orrs	r3, r2
 800bf4e:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800bf50:	2275      	movs	r2, #117	; 0x75
 800bf52:	2194      	movs	r1, #148	; 0x94
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	f001 ff3b 	bl	800ddd0 <VL53L0X_WrByte>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	461a      	mov	r2, r3
 800bf5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf62:	4313      	orrs	r3, r2
 800bf64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bf68:	6878      	ldr	r0, [r7, #4]
 800bf6a:	f7ff fc33 	bl	800b7d4 <VL53L0X_device_read_strobe>
 800bf6e:	4603      	mov	r3, r0
 800bf70:	461a      	mov	r2, r3
 800bf72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf76:	4313      	orrs	r3, r2
 800bf78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bf7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bf80:	461a      	mov	r2, r3
 800bf82:	2190      	movs	r1, #144	; 0x90
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f002 f807 	bl	800df98 <VL53L0X_RdDWord>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	461a      	mov	r2, r3
 800bf8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf92:	4313      	orrs	r3, r2
 800bf94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800bf98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf9a:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800bf9c:	b29b      	uxth	r3, r3
 800bf9e:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800bfa0:	2276      	movs	r2, #118	; 0x76
 800bfa2:	2194      	movs	r1, #148	; 0x94
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f001 ff13 	bl	800ddd0 <VL53L0X_WrByte>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	461a      	mov	r2, r3
 800bfae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bfb2:	4313      	orrs	r3, r2
 800bfb4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f7ff fc0b 	bl	800b7d4 <VL53L0X_device_read_strobe>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	461a      	mov	r2, r3
 800bfc2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bfc6:	4313      	orrs	r3, r2
 800bfc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bfcc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bfd0:	461a      	mov	r2, r3
 800bfd2:	2190      	movs	r1, #144	; 0x90
 800bfd4:	6878      	ldr	r0, [r7, #4]
 800bfd6:	f001 ffdf 	bl	800df98 <VL53L0X_RdDWord>
 800bfda:	4603      	mov	r3, r0
 800bfdc:	461a      	mov	r2, r3
 800bfde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bfe2:	4313      	orrs	r3, r2
 800bfe4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800bfe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfea:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800bfec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bfee:	4313      	orrs	r3, r2
 800bff0:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800bff2:	2200      	movs	r2, #0
 800bff4:	2181      	movs	r1, #129	; 0x81
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f001 feea 	bl	800ddd0 <VL53L0X_WrByte>
 800bffc:	4603      	mov	r3, r0
 800bffe:	461a      	mov	r2, r3
 800c000:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c004:	4313      	orrs	r3, r2
 800c006:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800c00a:	2206      	movs	r2, #6
 800c00c:	21ff      	movs	r1, #255	; 0xff
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	f001 fede 	bl	800ddd0 <VL53L0X_WrByte>
 800c014:	4603      	mov	r3, r0
 800c016:	461a      	mov	r2, r3
 800c018:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c01c:	4313      	orrs	r3, r2
 800c01e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800c022:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800c026:	461a      	mov	r2, r3
 800c028:	2183      	movs	r1, #131	; 0x83
 800c02a:	6878      	ldr	r0, [r7, #4]
 800c02c:	f001 ff52 	bl	800ded4 <VL53L0X_RdByte>
 800c030:	4603      	mov	r3, r0
 800c032:	461a      	mov	r2, r3
 800c034:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c038:	4313      	orrs	r3, r2
 800c03a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800c03e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c042:	f023 0304 	bic.w	r3, r3, #4
 800c046:	b2db      	uxtb	r3, r3
 800c048:	461a      	mov	r2, r3
 800c04a:	2183      	movs	r1, #131	; 0x83
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f001 febf 	bl	800ddd0 <VL53L0X_WrByte>
 800c052:	4603      	mov	r3, r0
 800c054:	461a      	mov	r2, r3
 800c056:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c05a:	4313      	orrs	r3, r2
 800c05c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c060:	2201      	movs	r2, #1
 800c062:	21ff      	movs	r1, #255	; 0xff
 800c064:	6878      	ldr	r0, [r7, #4]
 800c066:	f001 feb3 	bl	800ddd0 <VL53L0X_WrByte>
 800c06a:	4603      	mov	r3, r0
 800c06c:	461a      	mov	r2, r3
 800c06e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c072:	4313      	orrs	r3, r2
 800c074:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800c078:	2201      	movs	r2, #1
 800c07a:	2100      	movs	r1, #0
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f001 fea7 	bl	800ddd0 <VL53L0X_WrByte>
 800c082:	4603      	mov	r3, r0
 800c084:	461a      	mov	r2, r3
 800c086:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c08a:	4313      	orrs	r3, r2
 800c08c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c090:	2200      	movs	r2, #0
 800c092:	21ff      	movs	r1, #255	; 0xff
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f001 fe9b 	bl	800ddd0 <VL53L0X_WrByte>
 800c09a:	4603      	mov	r3, r0
 800c09c:	461a      	mov	r2, r3
 800c09e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c0a2:	4313      	orrs	r3, r2
 800c0a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	2180      	movs	r1, #128	; 0x80
 800c0ac:	6878      	ldr	r0, [r7, #4]
 800c0ae:	f001 fe8f 	bl	800ddd0 <VL53L0X_WrByte>
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	461a      	mov	r2, r3
 800c0b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c0ba:	4313      	orrs	r3, r2
 800c0bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800c0c0:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	f040 808f 	bne.w	800c1e8 <VL53L0X_get_info_from_device+0x98e>
 800c0ca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c0ce:	2b07      	cmp	r3, #7
 800c0d0:	f000 808a 	beq.w	800c1e8 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800c0d4:	78fb      	ldrb	r3, [r7, #3]
 800c0d6:	f003 0301 	and.w	r3, r3, #1
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d024      	beq.n	800c128 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800c0de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c0e2:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d11e      	bne.n	800c128 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800c0f0:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800c0fa:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800c0fe:	2300      	movs	r3, #0
 800c100:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c102:	e00e      	b.n	800c122 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800c104:	f107 0208 	add.w	r2, r7, #8
 800c108:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c10a:	4413      	add	r3, r2
 800c10c:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800c10e:	687a      	ldr	r2, [r7, #4]
 800c110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c112:	4413      	add	r3, r2
 800c114:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800c118:	460a      	mov	r2, r1
 800c11a:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800c11c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c11e:	3301      	adds	r3, #1
 800c120:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c124:	2b05      	cmp	r3, #5
 800c126:	dded      	ble.n	800c104 <VL53L0X_get_info_from_device+0x8aa>
=======
 800ad64:	78fb      	ldrb	r3, [r7, #3]
 800ad66:	f003 0304 	and.w	r3, r3, #4
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	f000 80f1 	beq.w	800af52 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800ad70:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ad74:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	f040 80ea 	bne.w	800af52 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800ad7e:	227b      	movs	r2, #123	; 0x7b
 800ad80:	2194      	movs	r1, #148	; 0x94
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f001 ffd4 	bl	800cd30 <VL53L0X_WrByte>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	461a      	mov	r2, r3
 800ad8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad90:	4313      	orrs	r3, r2
 800ad92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f7ff fccc 	bl	800a734 <VL53L0X_device_read_strobe>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	461a      	mov	r2, r3
 800ada0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ada4:	4313      	orrs	r3, r2
 800ada6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800adaa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800adae:	461a      	mov	r2, r3
 800adb0:	2190      	movs	r1, #144	; 0x90
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f002 f8a0 	bl	800cef8 <VL53L0X_RdDWord>
 800adb8:	4603      	mov	r3, r0
 800adba:	461a      	mov	r2, r3
 800adbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800adc0:	4313      	orrs	r3, r2
 800adc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800adc6:	227c      	movs	r2, #124	; 0x7c
 800adc8:	2194      	movs	r1, #148	; 0x94
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f001 ffb0 	bl	800cd30 <VL53L0X_WrByte>
 800add0:	4603      	mov	r3, r0
 800add2:	461a      	mov	r2, r3
 800add4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800add8:	4313      	orrs	r3, r2
 800adda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f7ff fca8 	bl	800a734 <VL53L0X_device_read_strobe>
 800ade4:	4603      	mov	r3, r0
 800ade6:	461a      	mov	r2, r3
 800ade8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800adec:	4313      	orrs	r3, r2
 800adee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800adf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800adf6:	461a      	mov	r2, r3
 800adf8:	2190      	movs	r1, #144	; 0x90
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f002 f87c 	bl	800cef8 <VL53L0X_RdDWord>
 800ae00:	4603      	mov	r3, r0
 800ae02:	461a      	mov	r2, r3
 800ae04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae08:	4313      	orrs	r3, r2
 800ae0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800ae0e:	2273      	movs	r2, #115	; 0x73
 800ae10:	2194      	movs	r1, #148	; 0x94
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f001 ff8c 	bl	800cd30 <VL53L0X_WrByte>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	461a      	mov	r2, r3
 800ae1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae20:	4313      	orrs	r3, r2
 800ae22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f7ff fc84 	bl	800a734 <VL53L0X_device_read_strobe>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	461a      	mov	r2, r3
 800ae30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae34:	4313      	orrs	r3, r2
 800ae36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ae3a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ae3e:	461a      	mov	r2, r3
 800ae40:	2190      	movs	r1, #144	; 0x90
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f002 f858 	bl	800cef8 <VL53L0X_RdDWord>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	461a      	mov	r2, r3
 800ae4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae50:	4313      	orrs	r3, r2
 800ae52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800ae56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae58:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800ae5a:	b29b      	uxth	r3, r3
 800ae5c:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800ae5e:	2274      	movs	r2, #116	; 0x74
 800ae60:	2194      	movs	r1, #148	; 0x94
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f001 ff64 	bl	800cd30 <VL53L0X_WrByte>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	461a      	mov	r2, r3
 800ae6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae70:	4313      	orrs	r3, r2
 800ae72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f7ff fc5c 	bl	800a734 <VL53L0X_device_read_strobe>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	461a      	mov	r2, r3
 800ae80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae84:	4313      	orrs	r3, r2
 800ae86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ae8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ae8e:	461a      	mov	r2, r3
 800ae90:	2190      	movs	r1, #144	; 0x90
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f002 f830 	bl	800cef8 <VL53L0X_RdDWord>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	461a      	mov	r2, r3
 800ae9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aea0:	4313      	orrs	r3, r2
 800aea2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800aea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea8:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800aeaa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aeac:	4313      	orrs	r3, r2
 800aeae:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800aeb0:	2275      	movs	r2, #117	; 0x75
 800aeb2:	2194      	movs	r1, #148	; 0x94
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f001 ff3b 	bl	800cd30 <VL53L0X_WrByte>
 800aeba:	4603      	mov	r3, r0
 800aebc:	461a      	mov	r2, r3
 800aebe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aec2:	4313      	orrs	r3, r2
 800aec4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f7ff fc33 	bl	800a734 <VL53L0X_device_read_strobe>
 800aece:	4603      	mov	r3, r0
 800aed0:	461a      	mov	r2, r3
 800aed2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aed6:	4313      	orrs	r3, r2
 800aed8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800aedc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800aee0:	461a      	mov	r2, r3
 800aee2:	2190      	movs	r1, #144	; 0x90
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f002 f807 	bl	800cef8 <VL53L0X_RdDWord>
 800aeea:	4603      	mov	r3, r0
 800aeec:	461a      	mov	r2, r3
 800aeee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aef2:	4313      	orrs	r3, r2
 800aef4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800aef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aefa:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800aefc:	b29b      	uxth	r3, r3
 800aefe:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800af00:	2276      	movs	r2, #118	; 0x76
 800af02:	2194      	movs	r1, #148	; 0x94
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f001 ff13 	bl	800cd30 <VL53L0X_WrByte>
 800af0a:	4603      	mov	r3, r0
 800af0c:	461a      	mov	r2, r3
 800af0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800af12:	4313      	orrs	r3, r2
 800af14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f7ff fc0b 	bl	800a734 <VL53L0X_device_read_strobe>
 800af1e:	4603      	mov	r3, r0
 800af20:	461a      	mov	r2, r3
 800af22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800af26:	4313      	orrs	r3, r2
 800af28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800af2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800af30:	461a      	mov	r2, r3
 800af32:	2190      	movs	r1, #144	; 0x90
 800af34:	6878      	ldr	r0, [r7, #4]
 800af36:	f001 ffdf 	bl	800cef8 <VL53L0X_RdDWord>
 800af3a:	4603      	mov	r3, r0
 800af3c:	461a      	mov	r2, r3
 800af3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800af42:	4313      	orrs	r3, r2
 800af44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800af48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af4a:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800af4c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800af4e:	4313      	orrs	r3, r2
 800af50:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800af52:	2200      	movs	r2, #0
 800af54:	2181      	movs	r1, #129	; 0x81
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f001 feea 	bl	800cd30 <VL53L0X_WrByte>
 800af5c:	4603      	mov	r3, r0
 800af5e:	461a      	mov	r2, r3
 800af60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800af64:	4313      	orrs	r3, r2
 800af66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800af6a:	2206      	movs	r2, #6
 800af6c:	21ff      	movs	r1, #255	; 0xff
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f001 fede 	bl	800cd30 <VL53L0X_WrByte>
 800af74:	4603      	mov	r3, r0
 800af76:	461a      	mov	r2, r3
 800af78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800af7c:	4313      	orrs	r3, r2
 800af7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800af82:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800af86:	461a      	mov	r2, r3
 800af88:	2183      	movs	r1, #131	; 0x83
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f001 ff52 	bl	800ce34 <VL53L0X_RdByte>
 800af90:	4603      	mov	r3, r0
 800af92:	461a      	mov	r2, r3
 800af94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800af98:	4313      	orrs	r3, r2
 800af9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800af9e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800afa2:	f023 0304 	bic.w	r3, r3, #4
 800afa6:	b2db      	uxtb	r3, r3
 800afa8:	461a      	mov	r2, r3
 800afaa:	2183      	movs	r1, #131	; 0x83
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f001 febf 	bl	800cd30 <VL53L0X_WrByte>
 800afb2:	4603      	mov	r3, r0
 800afb4:	461a      	mov	r2, r3
 800afb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800afba:	4313      	orrs	r3, r2
 800afbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800afc0:	2201      	movs	r2, #1
 800afc2:	21ff      	movs	r1, #255	; 0xff
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f001 feb3 	bl	800cd30 <VL53L0X_WrByte>
 800afca:	4603      	mov	r3, r0
 800afcc:	461a      	mov	r2, r3
 800afce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800afd2:	4313      	orrs	r3, r2
 800afd4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800afd8:	2201      	movs	r2, #1
 800afda:	2100      	movs	r1, #0
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f001 fea7 	bl	800cd30 <VL53L0X_WrByte>
 800afe2:	4603      	mov	r3, r0
 800afe4:	461a      	mov	r2, r3
 800afe6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800afea:	4313      	orrs	r3, r2
 800afec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800aff0:	2200      	movs	r2, #0
 800aff2:	21ff      	movs	r1, #255	; 0xff
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f001 fe9b 	bl	800cd30 <VL53L0X_WrByte>
 800affa:	4603      	mov	r3, r0
 800affc:	461a      	mov	r2, r3
 800affe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b002:	4313      	orrs	r3, r2
 800b004:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800b008:	2200      	movs	r2, #0
 800b00a:	2180      	movs	r1, #128	; 0x80
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	f001 fe8f 	bl	800cd30 <VL53L0X_WrByte>
 800b012:	4603      	mov	r3, r0
 800b014:	461a      	mov	r2, r3
 800b016:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b01a:	4313      	orrs	r3, r2
 800b01c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800b020:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800b024:	2b00      	cmp	r3, #0
 800b026:	f040 808f 	bne.w	800b148 <VL53L0X_get_info_from_device+0x98e>
 800b02a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b02e:	2b07      	cmp	r3, #7
 800b030:	f000 808a 	beq.w	800b148 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800b034:	78fb      	ldrb	r3, [r7, #3]
 800b036:	f003 0301 	and.w	r3, r3, #1
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d024      	beq.n	800b088 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800b03e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b042:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800b046:	2b00      	cmp	r3, #0
 800b048:	d11e      	bne.n	800b088 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800b050:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800b05a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800b05e:	2300      	movs	r3, #0
 800b060:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b062:	e00e      	b.n	800b082 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800b064:	f107 0208 	add.w	r2, r7, #8
 800b068:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b06a:	4413      	add	r3, r2
 800b06c:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800b06e:	687a      	ldr	r2, [r7, #4]
 800b070:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b072:	4413      	add	r3, r2
 800b074:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800b078:	460a      	mov	r2, r1
 800b07a:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800b07c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b07e:	3301      	adds	r3, #1
 800b080:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b084:	2b05      	cmp	r3, #5
 800b086:	dded      	ble.n	800b064 <VL53L0X_get_info_from_device+0x8aa>
>>>>>>> ModeSelect_v2
			}
		}

		if (((option & 2) == 2) &&
<<<<<<< HEAD
 800c128:	78fb      	ldrb	r3, [r7, #3]
 800c12a:	f003 0302 	and.w	r3, r3, #2
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d018      	beq.n	800c164 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800c132:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c136:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d112      	bne.n	800c164 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c13e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c148:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	33f3      	adds	r3, #243	; 0xf3
 800c156:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800c158:	f107 0310 	add.w	r3, r7, #16
 800c15c:	4619      	mov	r1, r3
 800c15e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c160:	f001 ffa0 	bl	800e0a4 <strcpy>
=======
 800b088:	78fb      	ldrb	r3, [r7, #3]
 800b08a:	f003 0302 	and.w	r3, r3, #2
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d018      	beq.n	800b0c4 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800b092:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b096:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d112      	bne.n	800b0c4 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b09e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b0a8:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	33f3      	adds	r3, #243	; 0xf3
 800b0b6:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800b0b8:	f107 0310 	add.w	r3, r7, #16
 800b0bc:	4619      	mov	r1, r3
 800b0be:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b0c0:	f001 ffa0 	bl	800d004 <strcpy>
>>>>>>> ModeSelect_v2

		}

		if (((option & 4) == 4) &&
<<<<<<< HEAD
 800c164:	78fb      	ldrb	r3, [r7, #3]
 800c166:	f003 0304 	and.w	r3, r3, #4
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d030      	beq.n	800c1d0 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800c16e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c172:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800c176:	2b00      	cmp	r3, #0
 800c178:	d12a      	bne.n	800c1d0 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c17a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800c18a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c18c:	025b      	lsls	r3, r3, #9
 800c18e:	643b      	str	r3, [r7, #64]	; 0x40
=======
 800b0c4:	78fb      	ldrb	r3, [r7, #3]
 800b0c6:	f003 0304 	and.w	r3, r3, #4
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d030      	beq.n	800b130 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800b0ce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b0d2:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d12a      	bne.n	800b130 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b0da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b0e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800b0ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0ec:	025b      	lsls	r3, r3, #9
 800b0ee:	643b      	str	r3, [r7, #64]	; 0x40
>>>>>>> ModeSelect_v2
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
<<<<<<< HEAD
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c194:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
=======
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b0f4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
>>>>>>> ModeSelect_v2
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
<<<<<<< HEAD
 800c198:	2300      	movs	r3, #0
 800c19a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800c19e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d011      	beq.n	800c1c8 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800c1a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c1a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c1a8:	1ad3      	subs	r3, r2, r3
 800c1aa:	64bb      	str	r3, [r7, #72]	; 0x48
=======
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800b0fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b100:	2b00      	cmp	r3, #0
 800b102:	d011      	beq.n	800b128 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800b104:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b106:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b108:	1ad3      	subs	r3, r2, r3
 800b10a:	64bb      	str	r3, [r7, #72]	; 0x48
>>>>>>> ModeSelect_v2
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
<<<<<<< HEAD
 800c1ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c1b2:	fb02 f303 	mul.w	r3, r2, r3
 800c1b6:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800c1b8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800c1bc:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800c1c0:	425b      	negs	r3, r3
 800c1c2:	b29b      	uxth	r3, r3
 800c1c4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800c1c8:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	60da      	str	r2, [r3, #12]
=======
 800b10c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b10e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b112:	fb02 f303 	mul.w	r3, r2, r3
 800b116:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800b118:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800b11c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800b120:	425b      	negs	r3, r3
 800b122:	b29b      	uxth	r3, r3
 800b124:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800b128:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	60da      	str	r2, [r3, #12]
>>>>>>> ModeSelect_v2
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
<<<<<<< HEAD
 800c1d0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800c1d4:	78fb      	ldrb	r3, [r7, #3]
 800c1d6:	4313      	orrs	r3, r2
 800c1d8:	b2db      	uxtb	r3, r3
 800c1da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800c1de:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
=======
 800b130:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800b134:	78fb      	ldrb	r3, [r7, #3]
 800b136:	4313      	orrs	r3, r2
 800b138:	b2db      	uxtb	r3, r3
 800b13a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800b13e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
>>>>>>> ModeSelect_v2
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
<<<<<<< HEAD
 800c1e8:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	3760      	adds	r7, #96	; 0x60
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	bd80      	pop	{r7, pc}

0800c1f4 <VL53L0X_calc_macro_period_ps>:
=======
 800b148:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800b14c:	4618      	mov	r0, r3
 800b14e:	3760      	adds	r7, #96	; 0x60
 800b150:	46bd      	mov	sp, r7
 800b152:	bd80      	pop	{r7, pc}

0800b154 <VL53L0X_calc_macro_period_ps>:
>>>>>>> ModeSelect_v2


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
<<<<<<< HEAD
 800c1f4:	b480      	push	{r7}
 800c1f6:	b087      	sub	sp, #28
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
 800c1fc:	460b      	mov	r3, r1
 800c1fe:	70fb      	strb	r3, [r7, #3]
=======
 800b154:	b480      	push	{r7}
 800b156:	b087      	sub	sp, #28
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
 800b15c:	460b      	mov	r3, r1
 800b15e:	70fb      	strb	r3, [r7, #3]
>>>>>>> ModeSelect_v2
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
<<<<<<< HEAD
 800c200:	f240 6277 	movw	r2, #1655	; 0x677
 800c204:	f04f 0300 	mov.w	r3, #0
 800c208:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800c20c:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800c210:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800c212:	78fb      	ldrb	r3, [r7, #3]
 800c214:	68fa      	ldr	r2, [r7, #12]
 800c216:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800c21a:	693a      	ldr	r2, [r7, #16]
 800c21c:	fb02 f303 	mul.w	r3, r2, r3
 800c220:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800c222:	68bb      	ldr	r3, [r7, #8]
}
 800c224:	4618      	mov	r0, r3
 800c226:	371c      	adds	r7, #28
 800c228:	46bd      	mov	sp, r7
 800c22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22e:	4770      	bx	lr

0800c230 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800c230:	b480      	push	{r7}
 800c232:	b087      	sub	sp, #28
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
=======
 800b160:	f240 6277 	movw	r2, #1655	; 0x677
 800b164:	f04f 0300 	mov.w	r3, #0
 800b168:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800b16c:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800b170:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800b172:	78fb      	ldrb	r3, [r7, #3]
 800b174:	68fa      	ldr	r2, [r7, #12]
 800b176:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800b17a:	693a      	ldr	r2, [r7, #16]
 800b17c:	fb02 f303 	mul.w	r3, r2, r3
 800b180:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800b182:	68bb      	ldr	r3, [r7, #8]
}
 800b184:	4618      	mov	r0, r3
 800b186:	371c      	adds	r7, #28
 800b188:	46bd      	mov	sp, r7
 800b18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18e:	4770      	bx	lr

0800b190 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800b190:	b480      	push	{r7}
 800b192:	b087      	sub	sp, #28
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
>>>>>>> ModeSelect_v2
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
<<<<<<< HEAD
 800c238:	2300      	movs	r3, #0
 800c23a:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800c23c:	2300      	movs	r3, #0
 800c23e:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800c240:	2300      	movs	r3, #0
 800c242:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d017      	beq.n	800c27a <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	3b01      	subs	r3, #1
 800c24e:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800c250:	e005      	b.n	800c25e <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800c252:	693b      	ldr	r3, [r7, #16]
 800c254:	085b      	lsrs	r3, r3, #1
 800c256:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800c258:	89fb      	ldrh	r3, [r7, #14]
 800c25a:	3301      	adds	r3, #1
 800c25c:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800c25e:	693b      	ldr	r3, [r7, #16]
 800c260:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c264:	2b00      	cmp	r3, #0
 800c266:	d1f4      	bne.n	800c252 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800c268:	89fb      	ldrh	r3, [r7, #14]
 800c26a:	021b      	lsls	r3, r3, #8
 800c26c:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800c26e:	693b      	ldr	r3, [r7, #16]
 800c270:	b29b      	uxth	r3, r3
 800c272:	b2db      	uxtb	r3, r3
 800c274:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800c276:	4413      	add	r3, r2
 800c278:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800c27a:	8afb      	ldrh	r3, [r7, #22]

}
 800c27c:	4618      	mov	r0, r3
 800c27e:	371c      	adds	r7, #28
 800c280:	46bd      	mov	sp, r7
 800c282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c286:	4770      	bx	lr

0800c288 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800c288:	b480      	push	{r7}
 800c28a:	b085      	sub	sp, #20
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	4603      	mov	r3, r0
 800c290:	80fb      	strh	r3, [r7, #6]
=======
 800b198:	2300      	movs	r3, #0
 800b19a:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800b19c:	2300      	movs	r3, #0
 800b19e:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d017      	beq.n	800b1da <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	3b01      	subs	r3, #1
 800b1ae:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800b1b0:	e005      	b.n	800b1be <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800b1b2:	693b      	ldr	r3, [r7, #16]
 800b1b4:	085b      	lsrs	r3, r3, #1
 800b1b6:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800b1b8:	89fb      	ldrh	r3, [r7, #14]
 800b1ba:	3301      	adds	r3, #1
 800b1bc:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d1f4      	bne.n	800b1b2 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800b1c8:	89fb      	ldrh	r3, [r7, #14]
 800b1ca:	021b      	lsls	r3, r3, #8
 800b1cc:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800b1ce:	693b      	ldr	r3, [r7, #16]
 800b1d0:	b29b      	uxth	r3, r3
 800b1d2:	b2db      	uxtb	r3, r3
 800b1d4:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800b1d6:	4413      	add	r3, r2
 800b1d8:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800b1da:	8afb      	ldrh	r3, [r7, #22]

}
 800b1dc:	4618      	mov	r0, r3
 800b1de:	371c      	adds	r7, #28
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e6:	4770      	bx	lr

0800b1e8 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	b085      	sub	sp, #20
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	80fb      	strh	r3, [r7, #6]
>>>>>>> ModeSelect_v2
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
<<<<<<< HEAD
 800c292:	2300      	movs	r3, #0
 800c294:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800c296:	88fb      	ldrh	r3, [r7, #6]
 800c298:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800c29a:	88fa      	ldrh	r2, [r7, #6]
 800c29c:	0a12      	lsrs	r2, r2, #8
 800c29e:	b292      	uxth	r2, r2
 800c2a0:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800c2a2:	3301      	adds	r3, #1
 800c2a4:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
}
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	3714      	adds	r7, #20
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b2:	4770      	bx	lr

0800c2b4 <VL53L0X_calc_timeout_mclks>:
=======
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800b1f6:	88fb      	ldrh	r3, [r7, #6]
 800b1f8:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800b1fa:	88fa      	ldrh	r2, [r7, #6]
 800b1fc:	0a12      	lsrs	r2, r2, #8
 800b1fe:	b292      	uxth	r2, r2
 800b200:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800b202:	3301      	adds	r3, #1
 800b204:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800b206:	68fb      	ldr	r3, [r7, #12]
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3714      	adds	r7, #20
 800b20c:	46bd      	mov	sp, r7
 800b20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b212:	4770      	bx	lr

0800b214 <VL53L0X_calc_timeout_mclks>:
>>>>>>> ModeSelect_v2

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
<<<<<<< HEAD
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b088      	sub	sp, #32
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	60f8      	str	r0, [r7, #12]
 800c2bc:	60b9      	str	r1, [r7, #8]
 800c2be:	4613      	mov	r3, r2
 800c2c0:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800c2c6:	79fb      	ldrb	r3, [r7, #7]
 800c2c8:	4619      	mov	r1, r3
 800c2ca:	68f8      	ldr	r0, [r7, #12]
 800c2cc:	f7ff ff92 	bl	800c1f4 <VL53L0X_calc_macro_period_ps>
 800c2d0:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800c2d2:	69bb      	ldr	r3, [r7, #24]
 800c2d4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c2d8:	4a0a      	ldr	r2, [pc, #40]	; (800c304 <VL53L0X_calc_timeout_mclks+0x50>)
 800c2da:	fba2 2303 	umull	r2, r3, r2, r3
 800c2de:	099b      	lsrs	r3, r3, #6
 800c2e0:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800c2e2:	68bb      	ldr	r3, [r7, #8]
 800c2e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c2e8:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800c2ec:	697b      	ldr	r3, [r7, #20]
 800c2ee:	085b      	lsrs	r3, r3, #1
 800c2f0:	441a      	add	r2, r3
	timeout_period_mclks =
 800c2f2:	697b      	ldr	r3, [r7, #20]
 800c2f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2f8:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800c2fa:	69fb      	ldr	r3, [r7, #28]
}
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	3720      	adds	r7, #32
 800c300:	46bd      	mov	sp, r7
 800c302:	bd80      	pop	{r7, pc}
 800c304:	10624dd3 	.word	0x10624dd3

0800c308 <VL53L0X_calc_timeout_us>:
=======
 800b214:	b580      	push	{r7, lr}
 800b216:	b088      	sub	sp, #32
 800b218:	af00      	add	r7, sp, #0
 800b21a:	60f8      	str	r0, [r7, #12]
 800b21c:	60b9      	str	r1, [r7, #8]
 800b21e:	4613      	mov	r3, r2
 800b220:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800b222:	2300      	movs	r3, #0
 800b224:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800b226:	79fb      	ldrb	r3, [r7, #7]
 800b228:	4619      	mov	r1, r3
 800b22a:	68f8      	ldr	r0, [r7, #12]
 800b22c:	f7ff ff92 	bl	800b154 <VL53L0X_calc_macro_period_ps>
 800b230:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800b232:	69bb      	ldr	r3, [r7, #24]
 800b234:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b238:	4a0a      	ldr	r2, [pc, #40]	; (800b264 <VL53L0X_calc_timeout_mclks+0x50>)
 800b23a:	fba2 2303 	umull	r2, r3, r2, r3
 800b23e:	099b      	lsrs	r3, r3, #6
 800b240:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b248:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800b24c:	697b      	ldr	r3, [r7, #20]
 800b24e:	085b      	lsrs	r3, r3, #1
 800b250:	441a      	add	r2, r3
	timeout_period_mclks =
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	fbb2 f3f3 	udiv	r3, r2, r3
 800b258:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800b25a:	69fb      	ldr	r3, [r7, #28]
}
 800b25c:	4618      	mov	r0, r3
 800b25e:	3720      	adds	r7, #32
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}
 800b264:	10624dd3 	.word	0x10624dd3

0800b268 <VL53L0X_calc_timeout_us>:
>>>>>>> ModeSelect_v2

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
<<<<<<< HEAD
 800c308:	b580      	push	{r7, lr}
 800c30a:	b086      	sub	sp, #24
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
 800c310:	460b      	mov	r3, r1
 800c312:	807b      	strh	r3, [r7, #2]
 800c314:	4613      	mov	r3, r2
 800c316:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800c318:	2300      	movs	r3, #0
 800c31a:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800c31c:	787b      	ldrb	r3, [r7, #1]
 800c31e:	4619      	mov	r1, r3
 800c320:	6878      	ldr	r0, [r7, #4]
 800c322:	f7ff ff67 	bl	800c1f4 <VL53L0X_calc_macro_period_ps>
 800c326:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800c328:	693b      	ldr	r3, [r7, #16]
 800c32a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c32e:	4a0a      	ldr	r2, [pc, #40]	; (800c358 <VL53L0X_calc_timeout_us+0x50>)
 800c330:	fba2 2303 	umull	r2, r3, r2, r3
 800c334:	099b      	lsrs	r3, r3, #6
 800c336:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800c338:	887b      	ldrh	r3, [r7, #2]
 800c33a:	68fa      	ldr	r2, [r7, #12]
 800c33c:	fb02 f303 	mul.w	r3, r2, r3
 800c340:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800c344:	4a04      	ldr	r2, [pc, #16]	; (800c358 <VL53L0X_calc_timeout_us+0x50>)
 800c346:	fba2 2303 	umull	r2, r3, r2, r3
 800c34a:	099b      	lsrs	r3, r3, #6
 800c34c:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800c34e:	697b      	ldr	r3, [r7, #20]
}
 800c350:	4618      	mov	r0, r3
 800c352:	3718      	adds	r7, #24
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}
 800c358:	10624dd3 	.word	0x10624dd3

0800c35c <get_sequence_step_timeout>:
=======
 800b268:	b580      	push	{r7, lr}
 800b26a:	b086      	sub	sp, #24
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
 800b270:	460b      	mov	r3, r1
 800b272:	807b      	strh	r3, [r7, #2]
 800b274:	4613      	mov	r3, r2
 800b276:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800b278:	2300      	movs	r3, #0
 800b27a:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800b27c:	787b      	ldrb	r3, [r7, #1]
 800b27e:	4619      	mov	r1, r3
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f7ff ff67 	bl	800b154 <VL53L0X_calc_macro_period_ps>
 800b286:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800b288:	693b      	ldr	r3, [r7, #16]
 800b28a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b28e:	4a0a      	ldr	r2, [pc, #40]	; (800b2b8 <VL53L0X_calc_timeout_us+0x50>)
 800b290:	fba2 2303 	umull	r2, r3, r2, r3
 800b294:	099b      	lsrs	r3, r3, #6
 800b296:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800b298:	887b      	ldrh	r3, [r7, #2]
 800b29a:	68fa      	ldr	r2, [r7, #12]
 800b29c:	fb02 f303 	mul.w	r3, r2, r3
 800b2a0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800b2a4:	4a04      	ldr	r2, [pc, #16]	; (800b2b8 <VL53L0X_calc_timeout_us+0x50>)
 800b2a6:	fba2 2303 	umull	r2, r3, r2, r3
 800b2aa:	099b      	lsrs	r3, r3, #6
 800b2ac:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800b2ae:	697b      	ldr	r3, [r7, #20]
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	3718      	adds	r7, #24
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}
 800b2b8:	10624dd3 	.word	0x10624dd3

0800b2bc <get_sequence_step_timeout>:
>>>>>>> ModeSelect_v2


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
<<<<<<< HEAD
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b08c      	sub	sp, #48	; 0x30
 800c360:	af00      	add	r7, sp, #0
 800c362:	60f8      	str	r0, [r7, #12]
 800c364:	460b      	mov	r3, r1
 800c366:	607a      	str	r2, [r7, #4]
 800c368:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c36a:	2300      	movs	r3, #0
 800c36c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800c370:	2300      	movs	r3, #0
 800c372:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800c376:	2300      	movs	r3, #0
 800c378:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800c37a:	2300      	movs	r3, #0
 800c37c:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800c37e:	2300      	movs	r3, #0
 800c380:	84bb      	strh	r3, [r7, #36]	; 0x24
=======
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b08c      	sub	sp, #48	; 0x30
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	60f8      	str	r0, [r7, #12]
 800b2c4:	460b      	mov	r3, r1
 800b2c6:	607a      	str	r2, [r7, #4]
 800b2c8:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	84bb      	strh	r3, [r7, #36]	; 0x24
>>>>>>> ModeSelect_v2
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
<<<<<<< HEAD
 800c382:	7afb      	ldrb	r3, [r7, #11]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d005      	beq.n	800c394 <get_sequence_step_timeout+0x38>
 800c388:	7afb      	ldrb	r3, [r7, #11]
 800c38a:	2b01      	cmp	r3, #1
 800c38c:	d002      	beq.n	800c394 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800c38e:	7afb      	ldrb	r3, [r7, #11]
 800c390:	2b02      	cmp	r3, #2
 800c392:	d128      	bne.n	800c3e6 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c394:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800c398:	461a      	mov	r2, r3
 800c39a:	2100      	movs	r1, #0
 800c39c:	68f8      	ldr	r0, [r7, #12]
 800c39e:	f7fd fa7d 	bl	800989c <VL53L0X_GetVcselPulsePeriod>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800c3a8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d109      	bne.n	800c3c4 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800c3b0:	f107 0320 	add.w	r3, r7, #32
 800c3b4:	461a      	mov	r2, r3
 800c3b6:	2146      	movs	r1, #70	; 0x46
 800c3b8:	68f8      	ldr	r0, [r7, #12]
 800c3ba:	f001 fd8b 	bl	800ded4 <VL53L0X_RdByte>
 800c3be:	4603      	mov	r3, r0
 800c3c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
=======
 800b2e2:	7afb      	ldrb	r3, [r7, #11]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d005      	beq.n	800b2f4 <get_sequence_step_timeout+0x38>
 800b2e8:	7afb      	ldrb	r3, [r7, #11]
 800b2ea:	2b01      	cmp	r3, #1
 800b2ec:	d002      	beq.n	800b2f4 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800b2ee:	7afb      	ldrb	r3, [r7, #11]
 800b2f0:	2b02      	cmp	r3, #2
 800b2f2:	d128      	bne.n	800b346 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b2f4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800b2f8:	461a      	mov	r2, r3
 800b2fa:	2100      	movs	r1, #0
 800b2fc:	68f8      	ldr	r0, [r7, #12]
 800b2fe:	f7fd fa7d 	bl	80087fc <VL53L0X_GetVcselPulsePeriod>
 800b302:	4603      	mov	r3, r0
 800b304:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800b308:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d109      	bne.n	800b324 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800b310:	f107 0320 	add.w	r3, r7, #32
 800b314:	461a      	mov	r2, r3
 800b316:	2146      	movs	r1, #70	; 0x46
 800b318:	68f8      	ldr	r0, [r7, #12]
 800b31a:	f001 fd8b 	bl	800ce34 <VL53L0X_RdByte>
 800b31e:	4603      	mov	r3, r0
 800b320:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
>>>>>>> ModeSelect_v2
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
<<<<<<< HEAD
 800c3c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c3c8:	b29b      	uxth	r3, r3
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f7ff ff5c 	bl	800c288 <VL53L0X_decode_timeout>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800c3d4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c3d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c3da:	4619      	mov	r1, r3
 800c3dc:	68f8      	ldr	r0, [r7, #12]
 800c3de:	f7ff ff93 	bl	800c308 <VL53L0X_calc_timeout_us>
 800c3e2:	62b8      	str	r0, [r7, #40]	; 0x28
 800c3e4:	e092      	b.n	800c50c <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800c3e6:	7afb      	ldrb	r3, [r7, #11]
 800c3e8:	2b03      	cmp	r3, #3
 800c3ea:	d135      	bne.n	800c458 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c3ec:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800c3f0:	461a      	mov	r2, r3
 800c3f2:	2100      	movs	r1, #0
 800c3f4:	68f8      	ldr	r0, [r7, #12]
 800c3f6:	f7fd fa51 	bl	800989c <VL53L0X_GetVcselPulsePeriod>
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
=======
 800b324:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b328:	b29b      	uxth	r3, r3
 800b32a:	4618      	mov	r0, r3
 800b32c:	f7ff ff5c 	bl	800b1e8 <VL53L0X_decode_timeout>
 800b330:	4603      	mov	r3, r0
 800b332:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800b334:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b338:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b33a:	4619      	mov	r1, r3
 800b33c:	68f8      	ldr	r0, [r7, #12]
 800b33e:	f7ff ff93 	bl	800b268 <VL53L0X_calc_timeout_us>
 800b342:	62b8      	str	r0, [r7, #40]	; 0x28
 800b344:	e092      	b.n	800b46c <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800b346:	7afb      	ldrb	r3, [r7, #11]
 800b348:	2b03      	cmp	r3, #3
 800b34a:	d135      	bne.n	800b3b8 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b34c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800b350:	461a      	mov	r2, r3
 800b352:	2100      	movs	r1, #0
 800b354:	68f8      	ldr	r0, [r7, #12]
 800b356:	f7fd fa51 	bl	80087fc <VL53L0X_GetVcselPulsePeriod>
 800b35a:	4603      	mov	r3, r0
 800b35c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
>>>>>>> ModeSelect_v2
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 800c400:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c404:	2b00      	cmp	r3, #0
 800c406:	f040 8081 	bne.w	800c50c <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c40a:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800c40e:	461a      	mov	r2, r3
 800c410:	2100      	movs	r1, #0
 800c412:	68f8      	ldr	r0, [r7, #12]
 800c414:	f7fd fa42 	bl	800989c <VL53L0X_GetVcselPulsePeriod>
 800c418:	4603      	mov	r3, r0
 800c41a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
=======
 800b360:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b364:	2b00      	cmp	r3, #0
 800b366:	f040 8081 	bne.w	800b46c <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b36a:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800b36e:	461a      	mov	r2, r3
 800b370:	2100      	movs	r1, #0
 800b372:	68f8      	ldr	r0, [r7, #12]
 800b374:	f7fd fa42 	bl	80087fc <VL53L0X_GetVcselPulsePeriod>
 800b378:	4603      	mov	r3, r0
 800b37a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
>>>>>>> ModeSelect_v2
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 800c41e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c422:	2b00      	cmp	r3, #0
 800c424:	d109      	bne.n	800c43a <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800c426:	f107 031e 	add.w	r3, r7, #30
 800c42a:	461a      	mov	r2, r3
 800c42c:	2151      	movs	r1, #81	; 0x51
 800c42e:	68f8      	ldr	r0, [r7, #12]
 800c430:	f001 fd7a 	bl	800df28 <VL53L0X_RdWord>
 800c434:	4603      	mov	r3, r0
 800c436:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
=======
 800b37e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b382:	2b00      	cmp	r3, #0
 800b384:	d109      	bne.n	800b39a <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800b386:	f107 031e 	add.w	r3, r7, #30
 800b38a:	461a      	mov	r2, r3
 800b38c:	2151      	movs	r1, #81	; 0x51
 800b38e:	68f8      	ldr	r0, [r7, #12]
 800b390:	f001 fd7a 	bl	800ce88 <VL53L0X_RdWord>
 800b394:	4603      	mov	r3, r0
 800b396:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
>>>>>>> ModeSelect_v2
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
<<<<<<< HEAD
 800c43a:	8bfb      	ldrh	r3, [r7, #30]
 800c43c:	4618      	mov	r0, r3
 800c43e:	f7ff ff23 	bl	800c288 <VL53L0X_decode_timeout>
 800c442:	4603      	mov	r3, r0
 800c444:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800c446:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c44a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c44c:	4619      	mov	r1, r3
 800c44e:	68f8      	ldr	r0, [r7, #12]
 800c450:	f7ff ff5a 	bl	800c308 <VL53L0X_calc_timeout_us>
 800c454:	62b8      	str	r0, [r7, #40]	; 0x28
 800c456:	e059      	b.n	800c50c <get_sequence_step_timeout+0x1b0>
=======
 800b39a:	8bfb      	ldrh	r3, [r7, #30]
 800b39c:	4618      	mov	r0, r3
 800b39e:	f7ff ff23 	bl	800b1e8 <VL53L0X_decode_timeout>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800b3a6:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b3aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b3ac:	4619      	mov	r1, r3
 800b3ae:	68f8      	ldr	r0, [r7, #12]
 800b3b0:	f7ff ff5a 	bl	800b268 <VL53L0X_calc_timeout_us>
 800b3b4:	62b8      	str	r0, [r7, #40]	; 0x28
 800b3b6:	e059      	b.n	800b46c <get_sequence_step_timeout+0x1b0>
>>>>>>> ModeSelect_v2
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
<<<<<<< HEAD
 800c458:	7afb      	ldrb	r3, [r7, #11]
 800c45a:	2b04      	cmp	r3, #4
 800c45c:	d156      	bne.n	800c50c <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800c45e:	f107 0314 	add.w	r3, r7, #20
 800c462:	4619      	mov	r1, r3
 800c464:	68f8      	ldr	r0, [r7, #12]
 800c466:	f7fd fb25 	bl	8009ab4 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800c46a:	2300      	movs	r3, #0
 800c46c:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800c46e:	7dfb      	ldrb	r3, [r7, #23]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d01d      	beq.n	800c4b0 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c474:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800c478:	461a      	mov	r2, r3
 800c47a:	2100      	movs	r1, #0
 800c47c:	68f8      	ldr	r0, [r7, #12]
 800c47e:	f7fd fa0d 	bl	800989c <VL53L0X_GetVcselPulsePeriod>
 800c482:	4603      	mov	r3, r0
 800c484:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
=======
 800b3b8:	7afb      	ldrb	r3, [r7, #11]
 800b3ba:	2b04      	cmp	r3, #4
 800b3bc:	d156      	bne.n	800b46c <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800b3be:	f107 0314 	add.w	r3, r7, #20
 800b3c2:	4619      	mov	r1, r3
 800b3c4:	68f8      	ldr	r0, [r7, #12]
 800b3c6:	f7fd fb25 	bl	8008a14 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800b3ce:	7dfb      	ldrb	r3, [r7, #23]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d01d      	beq.n	800b410 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b3d4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800b3d8:	461a      	mov	r2, r3
 800b3da:	2100      	movs	r1, #0
 800b3dc:	68f8      	ldr	r0, [r7, #12]
 800b3de:	f7fd fa0d 	bl	80087fc <VL53L0X_GetVcselPulsePeriod>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
>>>>>>> ModeSelect_v2
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 800c488:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d10f      	bne.n	800c4b0 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800c490:	f107 031e 	add.w	r3, r7, #30
 800c494:	461a      	mov	r2, r3
 800c496:	2151      	movs	r1, #81	; 0x51
 800c498:	68f8      	ldr	r0, [r7, #12]
 800c49a:	f001 fd45 	bl	800df28 <VL53L0X_RdWord>
 800c49e:	4603      	mov	r3, r0
 800c4a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800c4a4:	8bfb      	ldrh	r3, [r7, #30]
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f7ff feee 	bl	800c288 <VL53L0X_decode_timeout>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	84fb      	strh	r3, [r7, #38]	; 0x26
=======
 800b3e8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d10f      	bne.n	800b410 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800b3f0:	f107 031e 	add.w	r3, r7, #30
 800b3f4:	461a      	mov	r2, r3
 800b3f6:	2151      	movs	r1, #81	; 0x51
 800b3f8:	68f8      	ldr	r0, [r7, #12]
 800b3fa:	f001 fd45 	bl	800ce88 <VL53L0X_RdWord>
 800b3fe:	4603      	mov	r3, r0
 800b400:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800b404:	8bfb      	ldrh	r3, [r7, #30]
 800b406:	4618      	mov	r0, r3
 800b408:	f7ff feee 	bl	800b1e8 <VL53L0X_decode_timeout>
 800b40c:	4603      	mov	r3, r0
 800b40e:	84fb      	strh	r3, [r7, #38]	; 0x26
>>>>>>> ModeSelect_v2
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 800c4b0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d109      	bne.n	800c4cc <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c4b8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800c4bc:	461a      	mov	r2, r3
 800c4be:	2101      	movs	r1, #1
 800c4c0:	68f8      	ldr	r0, [r7, #12]
 800c4c2:	f7fd f9eb 	bl	800989c <VL53L0X_GetVcselPulsePeriod>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
=======
 800b410:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b414:	2b00      	cmp	r3, #0
 800b416:	d109      	bne.n	800b42c <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b418:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800b41c:	461a      	mov	r2, r3
 800b41e:	2101      	movs	r1, #1
 800b420:	68f8      	ldr	r0, [r7, #12]
 800b422:	f7fd f9eb 	bl	80087fc <VL53L0X_GetVcselPulsePeriod>
 800b426:	4603      	mov	r3, r0
 800b428:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
>>>>>>> ModeSelect_v2
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 800c4cc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d10f      	bne.n	800c4f4 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800c4d4:	f107 031c 	add.w	r3, r7, #28
 800c4d8:	461a      	mov	r2, r3
 800c4da:	2171      	movs	r1, #113	; 0x71
 800c4dc:	68f8      	ldr	r0, [r7, #12]
 800c4de:	f001 fd23 	bl	800df28 <VL53L0X_RdWord>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800c4e8:	8bbb      	ldrh	r3, [r7, #28]
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f7ff fecc 	bl	800c288 <VL53L0X_decode_timeout>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	84bb      	strh	r3, [r7, #36]	; 0x24
=======
 800b42c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b430:	2b00      	cmp	r3, #0
 800b432:	d10f      	bne.n	800b454 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800b434:	f107 031c 	add.w	r3, r7, #28
 800b438:	461a      	mov	r2, r3
 800b43a:	2171      	movs	r1, #113	; 0x71
 800b43c:	68f8      	ldr	r0, [r7, #12]
 800b43e:	f001 fd23 	bl	800ce88 <VL53L0X_RdWord>
 800b442:	4603      	mov	r3, r0
 800b444:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800b448:	8bbb      	ldrh	r3, [r7, #28]
 800b44a:	4618      	mov	r0, r3
 800b44c:	f7ff fecc 	bl	800b1e8 <VL53L0X_decode_timeout>
 800b450:	4603      	mov	r3, r0
 800b452:	84bb      	strh	r3, [r7, #36]	; 0x24
>>>>>>> ModeSelect_v2
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
<<<<<<< HEAD
 800c4f4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c4f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c4f8:	1ad3      	subs	r3, r2, r3
 800c4fa:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800c4fc:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c500:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c502:	4619      	mov	r1, r3
 800c504:	68f8      	ldr	r0, [r7, #12]
 800c506:	f7ff feff 	bl	800c308 <VL53L0X_calc_timeout_us>
 800c50a:	62b8      	str	r0, [r7, #40]	; 0x28
=======
 800b454:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b456:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b458:	1ad3      	subs	r3, r2, r3
 800b45a:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800b45c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b460:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b462:	4619      	mov	r1, r3
 800b464:	68f8      	ldr	r0, [r7, #12]
 800b466:	f7ff feff 	bl	800b268 <VL53L0X_calc_timeout_us>
 800b46a:	62b8      	str	r0, [r7, #40]	; 0x28
>>>>>>> ModeSelect_v2
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
<<<<<<< HEAD
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c510:	601a      	str	r2, [r3, #0]

	return Status;
 800c512:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800c516:	4618      	mov	r0, r3
 800c518:	3730      	adds	r7, #48	; 0x30
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}

0800c51e <set_sequence_step_timeout>:
=======
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b470:	601a      	str	r2, [r3, #0]

	return Status;
 800b472:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b476:	4618      	mov	r0, r3
 800b478:	3730      	adds	r7, #48	; 0x30
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}

0800b47e <set_sequence_step_timeout>:
>>>>>>> ModeSelect_v2


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
<<<<<<< HEAD
 800c51e:	b580      	push	{r7, lr}
 800c520:	b08a      	sub	sp, #40	; 0x28
 800c522:	af00      	add	r7, sp, #0
 800c524:	60f8      	str	r0, [r7, #12]
 800c526:	460b      	mov	r3, r1
 800c528:	607a      	str	r2, [r7, #4]
 800c52a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c52c:	2300      	movs	r3, #0
 800c52e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
=======
 800b47e:	b580      	push	{r7, lr}
 800b480:	b08a      	sub	sp, #40	; 0x28
 800b482:	af00      	add	r7, sp, #0
 800b484:	60f8      	str	r0, [r7, #12]
 800b486:	460b      	mov	r3, r1
 800b488:	607a      	str	r2, [r7, #4]
 800b48a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b48c:	2300      	movs	r3, #0
 800b48e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
>>>>>>> ModeSelect_v2
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
<<<<<<< HEAD
 800c532:	7afb      	ldrb	r3, [r7, #11]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d005      	beq.n	800c544 <set_sequence_step_timeout+0x26>
 800c538:	7afb      	ldrb	r3, [r7, #11]
 800c53a:	2b01      	cmp	r3, #1
 800c53c:	d002      	beq.n	800c544 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800c53e:	7afb      	ldrb	r3, [r7, #11]
 800c540:	2b02      	cmp	r3, #2
 800c542:	d138      	bne.n	800c5b6 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c544:	f107 031b 	add.w	r3, r7, #27
 800c548:	461a      	mov	r2, r3
 800c54a:	2100      	movs	r1, #0
 800c54c:	68f8      	ldr	r0, [r7, #12]
 800c54e:	f7fd f9a5 	bl	800989c <VL53L0X_GetVcselPulsePeriod>
 800c552:	4603      	mov	r3, r0
 800c554:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
=======
 800b492:	7afb      	ldrb	r3, [r7, #11]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d005      	beq.n	800b4a4 <set_sequence_step_timeout+0x26>
 800b498:	7afb      	ldrb	r3, [r7, #11]
 800b49a:	2b01      	cmp	r3, #1
 800b49c:	d002      	beq.n	800b4a4 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800b49e:	7afb      	ldrb	r3, [r7, #11]
 800b4a0:	2b02      	cmp	r3, #2
 800b4a2:	d138      	bne.n	800b516 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b4a4:	f107 031b 	add.w	r3, r7, #27
 800b4a8:	461a      	mov	r2, r3
 800b4aa:	2100      	movs	r1, #0
 800b4ac:	68f8      	ldr	r0, [r7, #12]
 800b4ae:	f7fd f9a5 	bl	80087fc <VL53L0X_GetVcselPulsePeriod>
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
>>>>>>> ModeSelect_v2
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 800c558:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d11a      	bne.n	800c596 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800c560:	7efb      	ldrb	r3, [r7, #27]
 800c562:	461a      	mov	r2, r3
 800c564:	6879      	ldr	r1, [r7, #4]
 800c566:	68f8      	ldr	r0, [r7, #12]
 800c568:	f7ff fea4 	bl	800c2b4 <VL53L0X_calc_timeout_mclks>
 800c56c:	4603      	mov	r3, r0
 800c56e:	83bb      	strh	r3, [r7, #28]
=======
 800b4b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d11a      	bne.n	800b4f6 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800b4c0:	7efb      	ldrb	r3, [r7, #27]
 800b4c2:	461a      	mov	r2, r3
 800b4c4:	6879      	ldr	r1, [r7, #4]
 800b4c6:	68f8      	ldr	r0, [r7, #12]
 800b4c8:	f7ff fea4 	bl	800b214 <VL53L0X_calc_timeout_mclks>
 800b4cc:	4603      	mov	r3, r0
 800b4ce:	83bb      	strh	r3, [r7, #28]
>>>>>>> ModeSelect_v2
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
<<<<<<< HEAD
 800c570:	8bbb      	ldrh	r3, [r7, #28]
 800c572:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c576:	d903      	bls.n	800c580 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800c578:	23ff      	movs	r3, #255	; 0xff
 800c57a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c57e:	e004      	b.n	800c58a <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800c580:	8bbb      	ldrh	r3, [r7, #28]
 800c582:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800c584:	3b01      	subs	r3, #1
 800c586:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c58a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c58e:	b29a      	uxth	r2, r3
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
=======
 800b4d0:	8bbb      	ldrh	r3, [r7, #28]
 800b4d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4d6:	d903      	bls.n	800b4e0 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800b4d8:	23ff      	movs	r3, #255	; 0xff
 800b4da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b4de:	e004      	b.n	800b4ea <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800b4e0:	8bbb      	ldrh	r3, [r7, #28]
 800b4e2:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800b4e4:	3b01      	subs	r3, #1
 800b4e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b4ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b4ee:	b29a      	uxth	r2, r3
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
>>>>>>> ModeSelect_v2
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 800c596:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	f040 80ab 	bne.w	800c6f6 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800c5a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c5a4:	461a      	mov	r2, r3
 800c5a6:	2146      	movs	r1, #70	; 0x46
 800c5a8:	68f8      	ldr	r0, [r7, #12]
 800c5aa:	f001 fc11 	bl	800ddd0 <VL53L0X_WrByte>
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800c5b4:	e09f      	b.n	800c6f6 <set_sequence_step_timeout+0x1d8>
=======
 800b4f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	f040 80ab 	bne.w	800b656 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800b500:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b504:	461a      	mov	r2, r3
 800b506:	2146      	movs	r1, #70	; 0x46
 800b508:	68f8      	ldr	r0, [r7, #12]
 800b50a:	f001 fc11 	bl	800cd30 <VL53L0X_WrByte>
 800b50e:	4603      	mov	r3, r0
 800b510:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800b514:	e09f      	b.n	800b656 <set_sequence_step_timeout+0x1d8>
>>>>>>> ModeSelect_v2
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
<<<<<<< HEAD
 800c5b6:	7afb      	ldrb	r3, [r7, #11]
 800c5b8:	2b03      	cmp	r3, #3
 800c5ba:	d135      	bne.n	800c628 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800c5bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d11b      	bne.n	800c5fc <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c5c4:	f107 031b 	add.w	r3, r7, #27
 800c5c8:	461a      	mov	r2, r3
 800c5ca:	2100      	movs	r1, #0
 800c5cc:	68f8      	ldr	r0, [r7, #12]
 800c5ce:	f7fd f965 	bl	800989c <VL53L0X_GetVcselPulsePeriod>
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
=======
 800b516:	7afb      	ldrb	r3, [r7, #11]
 800b518:	2b03      	cmp	r3, #3
 800b51a:	d135      	bne.n	800b588 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800b51c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b520:	2b00      	cmp	r3, #0
 800b522:	d11b      	bne.n	800b55c <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b524:	f107 031b 	add.w	r3, r7, #27
 800b528:	461a      	mov	r2, r3
 800b52a:	2100      	movs	r1, #0
 800b52c:	68f8      	ldr	r0, [r7, #12]
 800b52e:	f7fd f965 	bl	80087fc <VL53L0X_GetVcselPulsePeriod>
 800b532:	4603      	mov	r3, r0
 800b534:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
>>>>>>> ModeSelect_v2
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
<<<<<<< HEAD
 800c5d8:	7efb      	ldrb	r3, [r7, #27]
 800c5da:	461a      	mov	r2, r3
 800c5dc:	6879      	ldr	r1, [r7, #4]
 800c5de:	68f8      	ldr	r0, [r7, #12]
 800c5e0:	f7ff fe68 	bl	800c2b4 <VL53L0X_calc_timeout_mclks>
 800c5e4:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800c5e6:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800c5e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f7ff fe20 	bl	800c230 <VL53L0X_encode_timeout>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c5f4:	8b3a      	ldrh	r2, [r7, #24]
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
=======
 800b538:	7efb      	ldrb	r3, [r7, #27]
 800b53a:	461a      	mov	r2, r3
 800b53c:	6879      	ldr	r1, [r7, #4]
 800b53e:	68f8      	ldr	r0, [r7, #12]
 800b540:	f7ff fe68 	bl	800b214 <VL53L0X_calc_timeout_mclks>
 800b544:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800b546:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800b548:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b54a:	4618      	mov	r0, r3
 800b54c:	f7ff fe20 	bl	800b190 <VL53L0X_encode_timeout>
 800b550:	4603      	mov	r3, r0
 800b552:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b554:	8b3a      	ldrh	r2, [r7, #24]
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
>>>>>>> ModeSelect_v2
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 800c5fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c600:	2b00      	cmp	r3, #0
 800c602:	d108      	bne.n	800c616 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800c604:	8b3b      	ldrh	r3, [r7, #24]
 800c606:	461a      	mov	r2, r3
 800c608:	2151      	movs	r1, #81	; 0x51
 800c60a:	68f8      	ldr	r0, [r7, #12]
 800c60c:	f001 fc04 	bl	800de18 <VL53L0X_WrWord>
 800c610:	4603      	mov	r3, r0
 800c612:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
=======
 800b55c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b560:	2b00      	cmp	r3, #0
 800b562:	d108      	bne.n	800b576 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800b564:	8b3b      	ldrh	r3, [r7, #24]
 800b566:	461a      	mov	r2, r3
 800b568:	2151      	movs	r1, #81	; 0x51
 800b56a:	68f8      	ldr	r0, [r7, #12]
 800b56c:	f001 fc04 	bl	800cd78 <VL53L0X_WrWord>
 800b570:	4603      	mov	r3, r0
 800b572:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
>>>>>>> ModeSelect_v2
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 800c616:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d16b      	bne.n	800c6f6 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	687a      	ldr	r2, [r7, #4]
 800c622:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800c626:	e066      	b.n	800c6f6 <set_sequence_step_timeout+0x1d8>
=======
 800b576:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d16b      	bne.n	800b656 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	687a      	ldr	r2, [r7, #4]
 800b582:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800b586:	e066      	b.n	800b656 <set_sequence_step_timeout+0x1d8>
>>>>>>> ModeSelect_v2
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
<<<<<<< HEAD
 800c628:	7afb      	ldrb	r3, [r7, #11]
 800c62a:	2b04      	cmp	r3, #4
 800c62c:	d160      	bne.n	800c6f0 <set_sequence_step_timeout+0x1d2>
=======
 800b588:	7afb      	ldrb	r3, [r7, #11]
 800b58a:	2b04      	cmp	r3, #4
 800b58c:	d160      	bne.n	800b650 <set_sequence_step_timeout+0x1d2>
>>>>>>> ModeSelect_v2
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
<<<<<<< HEAD
 800c62e:	f107 0310 	add.w	r3, r7, #16
 800c632:	4619      	mov	r1, r3
 800c634:	68f8      	ldr	r0, [r7, #12]
 800c636:	f7fd fa3d 	bl	8009ab4 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800c63a:	2300      	movs	r3, #0
 800c63c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800c63e:	7cfb      	ldrb	r3, [r7, #19]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d01d      	beq.n	800c680 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c644:	f107 031b 	add.w	r3, r7, #27
 800c648:	461a      	mov	r2, r3
 800c64a:	2100      	movs	r1, #0
 800c64c:	68f8      	ldr	r0, [r7, #12]
 800c64e:	f7fd f925 	bl	800989c <VL53L0X_GetVcselPulsePeriod>
 800c652:	4603      	mov	r3, r0
 800c654:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
=======
 800b58e:	f107 0310 	add.w	r3, r7, #16
 800b592:	4619      	mov	r1, r3
 800b594:	68f8      	ldr	r0, [r7, #12]
 800b596:	f7fd fa3d 	bl	8008a14 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800b59a:	2300      	movs	r3, #0
 800b59c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800b59e:	7cfb      	ldrb	r3, [r7, #19]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d01d      	beq.n	800b5e0 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b5a4:	f107 031b 	add.w	r3, r7, #27
 800b5a8:	461a      	mov	r2, r3
 800b5aa:	2100      	movs	r1, #0
 800b5ac:	68f8      	ldr	r0, [r7, #12]
 800b5ae:	f7fd f925 	bl	80087fc <VL53L0X_GetVcselPulsePeriod>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
>>>>>>> ModeSelect_v2
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 800c658:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d10f      	bne.n	800c680 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800c660:	f107 0318 	add.w	r3, r7, #24
 800c664:	461a      	mov	r2, r3
 800c666:	2151      	movs	r1, #81	; 0x51
 800c668:	68f8      	ldr	r0, [r7, #12]
 800c66a:	f001 fc5d 	bl	800df28 <VL53L0X_RdWord>
 800c66e:	4603      	mov	r3, r0
 800c670:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800c674:	8b3b      	ldrh	r3, [r7, #24]
 800c676:	4618      	mov	r0, r3
 800c678:	f7ff fe06 	bl	800c288 <VL53L0X_decode_timeout>
 800c67c:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800c67e:	84bb      	strh	r3, [r7, #36]	; 0x24
=======
 800b5b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d10f      	bne.n	800b5e0 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800b5c0:	f107 0318 	add.w	r3, r7, #24
 800b5c4:	461a      	mov	r2, r3
 800b5c6:	2151      	movs	r1, #81	; 0x51
 800b5c8:	68f8      	ldr	r0, [r7, #12]
 800b5ca:	f001 fc5d 	bl	800ce88 <VL53L0X_RdWord>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800b5d4:	8b3b      	ldrh	r3, [r7, #24]
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f7ff fe06 	bl	800b1e8 <VL53L0X_decode_timeout>
 800b5dc:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800b5de:	84bb      	strh	r3, [r7, #36]	; 0x24
>>>>>>> ModeSelect_v2
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 800c680:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c684:	2b00      	cmp	r3, #0
 800c686:	d109      	bne.n	800c69c <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c688:	f107 031b 	add.w	r3, r7, #27
 800c68c:	461a      	mov	r2, r3
 800c68e:	2101      	movs	r1, #1
 800c690:	68f8      	ldr	r0, [r7, #12]
 800c692:	f7fd f903 	bl	800989c <VL53L0X_GetVcselPulsePeriod>
 800c696:	4603      	mov	r3, r0
 800c698:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
=======
 800b5e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d109      	bne.n	800b5fc <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b5e8:	f107 031b 	add.w	r3, r7, #27
 800b5ec:	461a      	mov	r2, r3
 800b5ee:	2101      	movs	r1, #1
 800b5f0:	68f8      	ldr	r0, [r7, #12]
 800b5f2:	f7fd f903 	bl	80087fc <VL53L0X_GetVcselPulsePeriod>
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
>>>>>>> ModeSelect_v2
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 800c69c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d128      	bne.n	800c6f6 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800c6a4:	7efb      	ldrb	r3, [r7, #27]
 800c6a6:	461a      	mov	r2, r3
 800c6a8:	6879      	ldr	r1, [r7, #4]
 800c6aa:	68f8      	ldr	r0, [r7, #12]
 800c6ac:	f7ff fe02 	bl	800c2b4 <VL53L0X_calc_timeout_mclks>
 800c6b0:	6238      	str	r0, [r7, #32]
=======
 800b5fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b600:	2b00      	cmp	r3, #0
 800b602:	d128      	bne.n	800b656 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800b604:	7efb      	ldrb	r3, [r7, #27]
 800b606:	461a      	mov	r2, r3
 800b608:	6879      	ldr	r1, [r7, #4]
 800b60a:	68f8      	ldr	r0, [r7, #12]
 800b60c:	f7ff fe02 	bl	800b214 <VL53L0X_calc_timeout_mclks>
 800b610:	6238      	str	r0, [r7, #32]
>>>>>>> ModeSelect_v2
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
<<<<<<< HEAD
 800c6b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c6b4:	6a3a      	ldr	r2, [r7, #32]
 800c6b6:	4413      	add	r3, r2
 800c6b8:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800c6ba:	6a38      	ldr	r0, [r7, #32]
 800c6bc:	f7ff fdb8 	bl	800c230 <VL53L0X_encode_timeout>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800c6c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d108      	bne.n	800c6de <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800c6cc:	8bfb      	ldrh	r3, [r7, #30]
 800c6ce:	461a      	mov	r2, r3
 800c6d0:	2171      	movs	r1, #113	; 0x71
 800c6d2:	68f8      	ldr	r0, [r7, #12]
 800c6d4:	f001 fba0 	bl	800de18 <VL53L0X_WrWord>
 800c6d8:	4603      	mov	r3, r0
 800c6da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
=======
 800b612:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b614:	6a3a      	ldr	r2, [r7, #32]
 800b616:	4413      	add	r3, r2
 800b618:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800b61a:	6a38      	ldr	r0, [r7, #32]
 800b61c:	f7ff fdb8 	bl	800b190 <VL53L0X_encode_timeout>
 800b620:	4603      	mov	r3, r0
 800b622:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800b624:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d108      	bne.n	800b63e <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800b62c:	8bfb      	ldrh	r3, [r7, #30]
 800b62e:	461a      	mov	r2, r3
 800b630:	2171      	movs	r1, #113	; 0x71
 800b632:	68f8      	ldr	r0, [r7, #12]
 800b634:	f001 fba0 	bl	800cd78 <VL53L0X_WrWord>
 800b638:	4603      	mov	r3, r0
 800b63a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
>>>>>>> ModeSelect_v2
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 800c6de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d107      	bne.n	800c6f6 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	687a      	ldr	r2, [r7, #4]
 800c6ea:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800c6ee:	e002      	b.n	800c6f6 <set_sequence_step_timeout+0x1d8>
=======
 800b63e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b642:	2b00      	cmp	r3, #0
 800b644:	d107      	bne.n	800b656 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	687a      	ldr	r2, [r7, #4]
 800b64a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800b64e:	e002      	b.n	800b656 <set_sequence_step_timeout+0x1d8>
>>>>>>> ModeSelect_v2
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
<<<<<<< HEAD
 800c6f0:	23fc      	movs	r3, #252	; 0xfc
 800c6f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800c6f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	3728      	adds	r7, #40	; 0x28
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}

0800c702 <VL53L0X_set_vcsel_pulse_period>:
=======
 800b650:	23fc      	movs	r3, #252	; 0xfc
 800b652:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800b656:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3728      	adds	r7, #40	; 0x28
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}

0800b662 <VL53L0X_set_vcsel_pulse_period>:
>>>>>>> ModeSelect_v2

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
<<<<<<< HEAD
 800c702:	b580      	push	{r7, lr}
 800c704:	b08a      	sub	sp, #40	; 0x28
 800c706:	af00      	add	r7, sp, #0
 800c708:	6078      	str	r0, [r7, #4]
 800c70a:	460b      	mov	r3, r1
 800c70c:	70fb      	strb	r3, [r7, #3]
 800c70e:	4613      	mov	r3, r2
 800c710:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c712:	2300      	movs	r3, #0
 800c714:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800c718:	230c      	movs	r3, #12
 800c71a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800c71e:	2312      	movs	r3, #18
 800c720:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800c724:	2308      	movs	r3, #8
 800c726:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800c72a:	230e      	movs	r3, #14
 800c72c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
=======
 800b662:	b580      	push	{r7, lr}
 800b664:	b08a      	sub	sp, #40	; 0x28
 800b666:	af00      	add	r7, sp, #0
 800b668:	6078      	str	r0, [r7, #4]
 800b66a:	460b      	mov	r3, r1
 800b66c:	70fb      	strb	r3, [r7, #3]
 800b66e:	4613      	mov	r3, r2
 800b670:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b672:	2300      	movs	r3, #0
 800b674:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800b678:	230c      	movs	r3, #12
 800b67a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800b67e:	2312      	movs	r3, #18
 800b680:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800b684:	2308      	movs	r3, #8
 800b686:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800b68a:	230e      	movs	r3, #14
 800b68c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
>>>>>>> ModeSelect_v2
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
<<<<<<< HEAD
 800c730:	2300      	movs	r3, #0
 800c732:	73fb      	strb	r3, [r7, #15]
=======
 800b690:	2300      	movs	r3, #0
 800b692:	73fb      	strb	r3, [r7, #15]
>>>>>>> ModeSelect_v2

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
<<<<<<< HEAD
 800c734:	78bb      	ldrb	r3, [r7, #2]
 800c736:	f003 0301 	and.w	r3, r3, #1
 800c73a:	b2db      	uxtb	r3, r3
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d003      	beq.n	800c748 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c740:	23fc      	movs	r3, #252	; 0xfc
 800c742:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c746:	e020      	b.n	800c78a <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800c748:	78fb      	ldrb	r3, [r7, #3]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d10d      	bne.n	800c76a <VL53L0X_set_vcsel_pulse_period+0x68>
 800c74e:	78ba      	ldrb	r2, [r7, #2]
 800c750:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c754:	429a      	cmp	r2, r3
 800c756:	d304      	bcc.n	800c762 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800c758:	78ba      	ldrb	r2, [r7, #2]
 800c75a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800c75e:	429a      	cmp	r2, r3
 800c760:	d903      	bls.n	800c76a <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c762:	23fc      	movs	r3, #252	; 0xfc
 800c764:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c768:	e00f      	b.n	800c78a <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800c76a:	78fb      	ldrb	r3, [r7, #3]
 800c76c:	2b01      	cmp	r3, #1
 800c76e:	d10c      	bne.n	800c78a <VL53L0X_set_vcsel_pulse_period+0x88>
 800c770:	78ba      	ldrb	r2, [r7, #2]
 800c772:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c776:	429a      	cmp	r2, r3
 800c778:	d304      	bcc.n	800c784 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800c77a:	78ba      	ldrb	r2, [r7, #2]
 800c77c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c780:	429a      	cmp	r2, r3
 800c782:	d902      	bls.n	800c78a <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c784:	23fc      	movs	r3, #252	; 0xfc
 800c786:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
=======
 800b694:	78bb      	ldrb	r3, [r7, #2]
 800b696:	f003 0301 	and.w	r3, r3, #1
 800b69a:	b2db      	uxtb	r3, r3
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d003      	beq.n	800b6a8 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b6a0:	23fc      	movs	r3, #252	; 0xfc
 800b6a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b6a6:	e020      	b.n	800b6ea <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800b6a8:	78fb      	ldrb	r3, [r7, #3]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d10d      	bne.n	800b6ca <VL53L0X_set_vcsel_pulse_period+0x68>
 800b6ae:	78ba      	ldrb	r2, [r7, #2]
 800b6b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b6b4:	429a      	cmp	r2, r3
 800b6b6:	d304      	bcc.n	800b6c2 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800b6b8:	78ba      	ldrb	r2, [r7, #2]
 800b6ba:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b6be:	429a      	cmp	r2, r3
 800b6c0:	d903      	bls.n	800b6ca <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b6c2:	23fc      	movs	r3, #252	; 0xfc
 800b6c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b6c8:	e00f      	b.n	800b6ea <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800b6ca:	78fb      	ldrb	r3, [r7, #3]
 800b6cc:	2b01      	cmp	r3, #1
 800b6ce:	d10c      	bne.n	800b6ea <VL53L0X_set_vcsel_pulse_period+0x88>
 800b6d0:	78ba      	ldrb	r2, [r7, #2]
 800b6d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b6d6:	429a      	cmp	r2, r3
 800b6d8:	d304      	bcc.n	800b6e4 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800b6da:	78ba      	ldrb	r2, [r7, #2]
 800b6dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b6e0:	429a      	cmp	r2, r3
 800b6e2:	d902      	bls.n	800b6ea <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b6e4:	23fc      	movs	r3, #252	; 0xfc
 800b6e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
>>>>>>> ModeSelect_v2
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
<<<<<<< HEAD
 800c78a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d002      	beq.n	800c798 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800c792:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c796:	e239      	b.n	800cc0c <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800c798:	78fb      	ldrb	r3, [r7, #3]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d150      	bne.n	800c840 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800c79e:	78bb      	ldrb	r3, [r7, #2]
 800c7a0:	2b0c      	cmp	r3, #12
 800c7a2:	d110      	bne.n	800c7c6 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800c7a4:	2218      	movs	r2, #24
 800c7a6:	2157      	movs	r1, #87	; 0x57
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f001 fb11 	bl	800ddd0 <VL53L0X_WrByte>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800c7b4:	2208      	movs	r2, #8
 800c7b6:	2156      	movs	r1, #86	; 0x56
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f001 fb09 	bl	800ddd0 <VL53L0X_WrByte>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c7c4:	e17f      	b.n	800cac6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800c7c6:	78bb      	ldrb	r3, [r7, #2]
 800c7c8:	2b0e      	cmp	r3, #14
 800c7ca:	d110      	bne.n	800c7ee <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800c7cc:	2230      	movs	r2, #48	; 0x30
 800c7ce:	2157      	movs	r1, #87	; 0x57
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f001 fafd 	bl	800ddd0 <VL53L0X_WrByte>
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800c7dc:	2208      	movs	r2, #8
 800c7de:	2156      	movs	r1, #86	; 0x56
 800c7e0:	6878      	ldr	r0, [r7, #4]
 800c7e2:	f001 faf5 	bl	800ddd0 <VL53L0X_WrByte>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c7ec:	e16b      	b.n	800cac6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800c7ee:	78bb      	ldrb	r3, [r7, #2]
 800c7f0:	2b10      	cmp	r3, #16
 800c7f2:	d110      	bne.n	800c816 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800c7f4:	2240      	movs	r2, #64	; 0x40
 800c7f6:	2157      	movs	r1, #87	; 0x57
 800c7f8:	6878      	ldr	r0, [r7, #4]
 800c7fa:	f001 fae9 	bl	800ddd0 <VL53L0X_WrByte>
 800c7fe:	4603      	mov	r3, r0
 800c800:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800c804:	2208      	movs	r2, #8
 800c806:	2156      	movs	r1, #86	; 0x56
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	f001 fae1 	bl	800ddd0 <VL53L0X_WrByte>
 800c80e:	4603      	mov	r3, r0
 800c810:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c814:	e157      	b.n	800cac6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800c816:	78bb      	ldrb	r3, [r7, #2]
 800c818:	2b12      	cmp	r3, #18
 800c81a:	f040 8154 	bne.w	800cac6 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800c81e:	2250      	movs	r2, #80	; 0x50
 800c820:	2157      	movs	r1, #87	; 0x57
 800c822:	6878      	ldr	r0, [r7, #4]
 800c824:	f001 fad4 	bl	800ddd0 <VL53L0X_WrByte>
 800c828:	4603      	mov	r3, r0
 800c82a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800c82e:	2208      	movs	r2, #8
 800c830:	2156      	movs	r1, #86	; 0x56
 800c832:	6878      	ldr	r0, [r7, #4]
 800c834:	f001 facc 	bl	800ddd0 <VL53L0X_WrByte>
 800c838:	4603      	mov	r3, r0
 800c83a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c83e:	e142      	b.n	800cac6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
=======
 800b6ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d002      	beq.n	800b6f8 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800b6f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b6f6:	e239      	b.n	800bb6c <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800b6f8:	78fb      	ldrb	r3, [r7, #3]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d150      	bne.n	800b7a0 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800b6fe:	78bb      	ldrb	r3, [r7, #2]
 800b700:	2b0c      	cmp	r3, #12
 800b702:	d110      	bne.n	800b726 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800b704:	2218      	movs	r2, #24
 800b706:	2157      	movs	r1, #87	; 0x57
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f001 fb11 	bl	800cd30 <VL53L0X_WrByte>
 800b70e:	4603      	mov	r3, r0
 800b710:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800b714:	2208      	movs	r2, #8
 800b716:	2156      	movs	r1, #86	; 0x56
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	f001 fb09 	bl	800cd30 <VL53L0X_WrByte>
 800b71e:	4603      	mov	r3, r0
 800b720:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b724:	e17f      	b.n	800ba26 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800b726:	78bb      	ldrb	r3, [r7, #2]
 800b728:	2b0e      	cmp	r3, #14
 800b72a:	d110      	bne.n	800b74e <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800b72c:	2230      	movs	r2, #48	; 0x30
 800b72e:	2157      	movs	r1, #87	; 0x57
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f001 fafd 	bl	800cd30 <VL53L0X_WrByte>
 800b736:	4603      	mov	r3, r0
 800b738:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800b73c:	2208      	movs	r2, #8
 800b73e:	2156      	movs	r1, #86	; 0x56
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f001 faf5 	bl	800cd30 <VL53L0X_WrByte>
 800b746:	4603      	mov	r3, r0
 800b748:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b74c:	e16b      	b.n	800ba26 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800b74e:	78bb      	ldrb	r3, [r7, #2]
 800b750:	2b10      	cmp	r3, #16
 800b752:	d110      	bne.n	800b776 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800b754:	2240      	movs	r2, #64	; 0x40
 800b756:	2157      	movs	r1, #87	; 0x57
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	f001 fae9 	bl	800cd30 <VL53L0X_WrByte>
 800b75e:	4603      	mov	r3, r0
 800b760:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800b764:	2208      	movs	r2, #8
 800b766:	2156      	movs	r1, #86	; 0x56
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f001 fae1 	bl	800cd30 <VL53L0X_WrByte>
 800b76e:	4603      	mov	r3, r0
 800b770:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b774:	e157      	b.n	800ba26 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800b776:	78bb      	ldrb	r3, [r7, #2]
 800b778:	2b12      	cmp	r3, #18
 800b77a:	f040 8154 	bne.w	800ba26 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800b77e:	2250      	movs	r2, #80	; 0x50
 800b780:	2157      	movs	r1, #87	; 0x57
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f001 fad4 	bl	800cd30 <VL53L0X_WrByte>
 800b788:	4603      	mov	r3, r0
 800b78a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800b78e:	2208      	movs	r2, #8
 800b790:	2156      	movs	r1, #86	; 0x56
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f001 facc 	bl	800cd30 <VL53L0X_WrByte>
 800b798:	4603      	mov	r3, r0
 800b79a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b79e:	e142      	b.n	800ba26 <VL53L0X_set_vcsel_pulse_period+0x3c4>
>>>>>>> ModeSelect_v2
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
<<<<<<< HEAD
 800c840:	78fb      	ldrb	r3, [r7, #3]
 800c842:	2b01      	cmp	r3, #1
 800c844:	f040 813f 	bne.w	800cac6 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800c848:	78bb      	ldrb	r3, [r7, #2]
 800c84a:	2b08      	cmp	r3, #8
 800c84c:	d14c      	bne.n	800c8e8 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800c84e:	2210      	movs	r2, #16
 800c850:	2148      	movs	r1, #72	; 0x48
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f001 fabc 	bl	800ddd0 <VL53L0X_WrByte>
 800c858:	4603      	mov	r3, r0
 800c85a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800c85e:	2208      	movs	r2, #8
 800c860:	2147      	movs	r1, #71	; 0x47
 800c862:	6878      	ldr	r0, [r7, #4]
 800c864:	f001 fab4 	bl	800ddd0 <VL53L0X_WrByte>
 800c868:	4603      	mov	r3, r0
 800c86a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
=======
 800b7a0:	78fb      	ldrb	r3, [r7, #3]
 800b7a2:	2b01      	cmp	r3, #1
 800b7a4:	f040 813f 	bne.w	800ba26 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800b7a8:	78bb      	ldrb	r3, [r7, #2]
 800b7aa:	2b08      	cmp	r3, #8
 800b7ac:	d14c      	bne.n	800b848 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800b7ae:	2210      	movs	r2, #16
 800b7b0:	2148      	movs	r1, #72	; 0x48
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f001 fabc 	bl	800cd30 <VL53L0X_WrByte>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800b7be:	2208      	movs	r2, #8
 800b7c0:	2147      	movs	r1, #71	; 0x47
 800b7c2:	6878      	ldr	r0, [r7, #4]
 800b7c4:	f001 fab4 	bl	800cd30 <VL53L0X_WrByte>
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
>>>>>>> ModeSelect_v2
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
<<<<<<< HEAD
 800c86e:	2202      	movs	r2, #2
 800c870:	2132      	movs	r1, #50	; 0x32
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f001 faac 	bl	800ddd0 <VL53L0X_WrByte>
 800c878:	4603      	mov	r3, r0
 800c87a:	461a      	mov	r2, r3
 800c87c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c880:	4313      	orrs	r3, r2
 800c882:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800c886:	220c      	movs	r2, #12
 800c888:	2130      	movs	r1, #48	; 0x30
 800c88a:	6878      	ldr	r0, [r7, #4]
 800c88c:	f001 faa0 	bl	800ddd0 <VL53L0X_WrByte>
 800c890:	4603      	mov	r3, r0
 800c892:	461a      	mov	r2, r3
 800c894:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c898:	4313      	orrs	r3, r2
 800c89a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800c89e:	2201      	movs	r2, #1
 800c8a0:	21ff      	movs	r1, #255	; 0xff
 800c8a2:	6878      	ldr	r0, [r7, #4]
 800c8a4:	f001 fa94 	bl	800ddd0 <VL53L0X_WrByte>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	461a      	mov	r2, r3
 800c8ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8b0:	4313      	orrs	r3, r2
 800c8b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800c8b6:	2230      	movs	r2, #48	; 0x30
 800c8b8:	2130      	movs	r1, #48	; 0x30
 800c8ba:	6878      	ldr	r0, [r7, #4]
 800c8bc:	f001 fa88 	bl	800ddd0 <VL53L0X_WrByte>
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	461a      	mov	r2, r3
 800c8c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8c8:	4313      	orrs	r3, r2
 800c8ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	21ff      	movs	r1, #255	; 0xff
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f001 fa7c 	bl	800ddd0 <VL53L0X_WrByte>
 800c8d8:	4603      	mov	r3, r0
 800c8da:	461a      	mov	r2, r3
 800c8dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8e0:	4313      	orrs	r3, r2
 800c8e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c8e6:	e0ee      	b.n	800cac6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800c8e8:	78bb      	ldrb	r3, [r7, #2]
 800c8ea:	2b0a      	cmp	r3, #10
 800c8ec:	d14c      	bne.n	800c988 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800c8ee:	2228      	movs	r2, #40	; 0x28
 800c8f0:	2148      	movs	r1, #72	; 0x48
 800c8f2:	6878      	ldr	r0, [r7, #4]
 800c8f4:	f001 fa6c 	bl	800ddd0 <VL53L0X_WrByte>
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800c8fe:	2208      	movs	r2, #8
 800c900:	2147      	movs	r1, #71	; 0x47
 800c902:	6878      	ldr	r0, [r7, #4]
 800c904:	f001 fa64 	bl	800ddd0 <VL53L0X_WrByte>
 800c908:	4603      	mov	r3, r0
 800c90a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
=======
 800b7ce:	2202      	movs	r2, #2
 800b7d0:	2132      	movs	r1, #50	; 0x32
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f001 faac 	bl	800cd30 <VL53L0X_WrByte>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	461a      	mov	r2, r3
 800b7dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7e0:	4313      	orrs	r3, r2
 800b7e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800b7e6:	220c      	movs	r2, #12
 800b7e8:	2130      	movs	r1, #48	; 0x30
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	f001 faa0 	bl	800cd30 <VL53L0X_WrByte>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	461a      	mov	r2, r3
 800b7f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7f8:	4313      	orrs	r3, r2
 800b7fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800b7fe:	2201      	movs	r2, #1
 800b800:	21ff      	movs	r1, #255	; 0xff
 800b802:	6878      	ldr	r0, [r7, #4]
 800b804:	f001 fa94 	bl	800cd30 <VL53L0X_WrByte>
 800b808:	4603      	mov	r3, r0
 800b80a:	461a      	mov	r2, r3
 800b80c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b810:	4313      	orrs	r3, r2
 800b812:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800b816:	2230      	movs	r2, #48	; 0x30
 800b818:	2130      	movs	r1, #48	; 0x30
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	f001 fa88 	bl	800cd30 <VL53L0X_WrByte>
 800b820:	4603      	mov	r3, r0
 800b822:	461a      	mov	r2, r3
 800b824:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b828:	4313      	orrs	r3, r2
 800b82a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800b82e:	2200      	movs	r2, #0
 800b830:	21ff      	movs	r1, #255	; 0xff
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f001 fa7c 	bl	800cd30 <VL53L0X_WrByte>
 800b838:	4603      	mov	r3, r0
 800b83a:	461a      	mov	r2, r3
 800b83c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b840:	4313      	orrs	r3, r2
 800b842:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b846:	e0ee      	b.n	800ba26 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800b848:	78bb      	ldrb	r3, [r7, #2]
 800b84a:	2b0a      	cmp	r3, #10
 800b84c:	d14c      	bne.n	800b8e8 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800b84e:	2228      	movs	r2, #40	; 0x28
 800b850:	2148      	movs	r1, #72	; 0x48
 800b852:	6878      	ldr	r0, [r7, #4]
 800b854:	f001 fa6c 	bl	800cd30 <VL53L0X_WrByte>
 800b858:	4603      	mov	r3, r0
 800b85a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800b85e:	2208      	movs	r2, #8
 800b860:	2147      	movs	r1, #71	; 0x47
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	f001 fa64 	bl	800cd30 <VL53L0X_WrByte>
 800b868:	4603      	mov	r3, r0
 800b86a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
>>>>>>> ModeSelect_v2
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
<<<<<<< HEAD
 800c90e:	2203      	movs	r2, #3
 800c910:	2132      	movs	r1, #50	; 0x32
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f001 fa5c 	bl	800ddd0 <VL53L0X_WrByte>
 800c918:	4603      	mov	r3, r0
 800c91a:	461a      	mov	r2, r3
 800c91c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c920:	4313      	orrs	r3, r2
 800c922:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800c926:	2209      	movs	r2, #9
 800c928:	2130      	movs	r1, #48	; 0x30
 800c92a:	6878      	ldr	r0, [r7, #4]
 800c92c:	f001 fa50 	bl	800ddd0 <VL53L0X_WrByte>
 800c930:	4603      	mov	r3, r0
 800c932:	461a      	mov	r2, r3
 800c934:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c938:	4313      	orrs	r3, r2
 800c93a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800c93e:	2201      	movs	r2, #1
 800c940:	21ff      	movs	r1, #255	; 0xff
 800c942:	6878      	ldr	r0, [r7, #4]
 800c944:	f001 fa44 	bl	800ddd0 <VL53L0X_WrByte>
 800c948:	4603      	mov	r3, r0
 800c94a:	461a      	mov	r2, r3
 800c94c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c950:	4313      	orrs	r3, r2
 800c952:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800c956:	2220      	movs	r2, #32
 800c958:	2130      	movs	r1, #48	; 0x30
 800c95a:	6878      	ldr	r0, [r7, #4]
 800c95c:	f001 fa38 	bl	800ddd0 <VL53L0X_WrByte>
 800c960:	4603      	mov	r3, r0
 800c962:	461a      	mov	r2, r3
 800c964:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c968:	4313      	orrs	r3, r2
 800c96a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800c96e:	2200      	movs	r2, #0
 800c970:	21ff      	movs	r1, #255	; 0xff
 800c972:	6878      	ldr	r0, [r7, #4]
 800c974:	f001 fa2c 	bl	800ddd0 <VL53L0X_WrByte>
 800c978:	4603      	mov	r3, r0
 800c97a:	461a      	mov	r2, r3
 800c97c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c980:	4313      	orrs	r3, r2
 800c982:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c986:	e09e      	b.n	800cac6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800c988:	78bb      	ldrb	r3, [r7, #2]
 800c98a:	2b0c      	cmp	r3, #12
 800c98c:	d14c      	bne.n	800ca28 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800c98e:	2238      	movs	r2, #56	; 0x38
 800c990:	2148      	movs	r1, #72	; 0x48
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	f001 fa1c 	bl	800ddd0 <VL53L0X_WrByte>
 800c998:	4603      	mov	r3, r0
 800c99a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800c99e:	2208      	movs	r2, #8
 800c9a0:	2147      	movs	r1, #71	; 0x47
 800c9a2:	6878      	ldr	r0, [r7, #4]
 800c9a4:	f001 fa14 	bl	800ddd0 <VL53L0X_WrByte>
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
=======
 800b86e:	2203      	movs	r2, #3
 800b870:	2132      	movs	r1, #50	; 0x32
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f001 fa5c 	bl	800cd30 <VL53L0X_WrByte>
 800b878:	4603      	mov	r3, r0
 800b87a:	461a      	mov	r2, r3
 800b87c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b880:	4313      	orrs	r3, r2
 800b882:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800b886:	2209      	movs	r2, #9
 800b888:	2130      	movs	r1, #48	; 0x30
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	f001 fa50 	bl	800cd30 <VL53L0X_WrByte>
 800b890:	4603      	mov	r3, r0
 800b892:	461a      	mov	r2, r3
 800b894:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b898:	4313      	orrs	r3, r2
 800b89a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800b89e:	2201      	movs	r2, #1
 800b8a0:	21ff      	movs	r1, #255	; 0xff
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f001 fa44 	bl	800cd30 <VL53L0X_WrByte>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	461a      	mov	r2, r3
 800b8ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8b0:	4313      	orrs	r3, r2
 800b8b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800b8b6:	2220      	movs	r2, #32
 800b8b8:	2130      	movs	r1, #48	; 0x30
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f001 fa38 	bl	800cd30 <VL53L0X_WrByte>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	461a      	mov	r2, r3
 800b8c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8c8:	4313      	orrs	r3, r2
 800b8ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	21ff      	movs	r1, #255	; 0xff
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f001 fa2c 	bl	800cd30 <VL53L0X_WrByte>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	461a      	mov	r2, r3
 800b8dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8e0:	4313      	orrs	r3, r2
 800b8e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b8e6:	e09e      	b.n	800ba26 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800b8e8:	78bb      	ldrb	r3, [r7, #2]
 800b8ea:	2b0c      	cmp	r3, #12
 800b8ec:	d14c      	bne.n	800b988 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800b8ee:	2238      	movs	r2, #56	; 0x38
 800b8f0:	2148      	movs	r1, #72	; 0x48
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f001 fa1c 	bl	800cd30 <VL53L0X_WrByte>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800b8fe:	2208      	movs	r2, #8
 800b900:	2147      	movs	r1, #71	; 0x47
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f001 fa14 	bl	800cd30 <VL53L0X_WrByte>
 800b908:	4603      	mov	r3, r0
 800b90a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
>>>>>>> ModeSelect_v2
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
<<<<<<< HEAD
 800c9ae:	2203      	movs	r2, #3
 800c9b0:	2132      	movs	r1, #50	; 0x32
 800c9b2:	6878      	ldr	r0, [r7, #4]
 800c9b4:	f001 fa0c 	bl	800ddd0 <VL53L0X_WrByte>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	461a      	mov	r2, r3
 800c9bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9c0:	4313      	orrs	r3, r2
 800c9c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800c9c6:	2208      	movs	r2, #8
 800c9c8:	2130      	movs	r1, #48	; 0x30
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	f001 fa00 	bl	800ddd0 <VL53L0X_WrByte>
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	461a      	mov	r2, r3
 800c9d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9d8:	4313      	orrs	r3, r2
 800c9da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800c9de:	2201      	movs	r2, #1
 800c9e0:	21ff      	movs	r1, #255	; 0xff
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	f001 f9f4 	bl	800ddd0 <VL53L0X_WrByte>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	461a      	mov	r2, r3
 800c9ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9f0:	4313      	orrs	r3, r2
 800c9f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800c9f6:	2220      	movs	r2, #32
 800c9f8:	2130      	movs	r1, #48	; 0x30
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	f001 f9e8 	bl	800ddd0 <VL53L0X_WrByte>
 800ca00:	4603      	mov	r3, r0
 800ca02:	461a      	mov	r2, r3
 800ca04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca08:	4313      	orrs	r3, r2
 800ca0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800ca0e:	2200      	movs	r2, #0
 800ca10:	21ff      	movs	r1, #255	; 0xff
 800ca12:	6878      	ldr	r0, [r7, #4]
 800ca14:	f001 f9dc 	bl	800ddd0 <VL53L0X_WrByte>
 800ca18:	4603      	mov	r3, r0
 800ca1a:	461a      	mov	r2, r3
 800ca1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca20:	4313      	orrs	r3, r2
 800ca22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ca26:	e04e      	b.n	800cac6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800ca28:	78bb      	ldrb	r3, [r7, #2]
 800ca2a:	2b0e      	cmp	r3, #14
 800ca2c:	d14b      	bne.n	800cac6 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800ca2e:	2248      	movs	r2, #72	; 0x48
 800ca30:	2148      	movs	r1, #72	; 0x48
 800ca32:	6878      	ldr	r0, [r7, #4]
 800ca34:	f001 f9cc 	bl	800ddd0 <VL53L0X_WrByte>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800ca3e:	2208      	movs	r2, #8
 800ca40:	2147      	movs	r1, #71	; 0x47
 800ca42:	6878      	ldr	r0, [r7, #4]
 800ca44:	f001 f9c4 	bl	800ddd0 <VL53L0X_WrByte>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
=======
 800b90e:	2203      	movs	r2, #3
 800b910:	2132      	movs	r1, #50	; 0x32
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f001 fa0c 	bl	800cd30 <VL53L0X_WrByte>
 800b918:	4603      	mov	r3, r0
 800b91a:	461a      	mov	r2, r3
 800b91c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b920:	4313      	orrs	r3, r2
 800b922:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800b926:	2208      	movs	r2, #8
 800b928:	2130      	movs	r1, #48	; 0x30
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f001 fa00 	bl	800cd30 <VL53L0X_WrByte>
 800b930:	4603      	mov	r3, r0
 800b932:	461a      	mov	r2, r3
 800b934:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b938:	4313      	orrs	r3, r2
 800b93a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800b93e:	2201      	movs	r2, #1
 800b940:	21ff      	movs	r1, #255	; 0xff
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	f001 f9f4 	bl	800cd30 <VL53L0X_WrByte>
 800b948:	4603      	mov	r3, r0
 800b94a:	461a      	mov	r2, r3
 800b94c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b950:	4313      	orrs	r3, r2
 800b952:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800b956:	2220      	movs	r2, #32
 800b958:	2130      	movs	r1, #48	; 0x30
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	f001 f9e8 	bl	800cd30 <VL53L0X_WrByte>
 800b960:	4603      	mov	r3, r0
 800b962:	461a      	mov	r2, r3
 800b964:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b968:	4313      	orrs	r3, r2
 800b96a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800b96e:	2200      	movs	r2, #0
 800b970:	21ff      	movs	r1, #255	; 0xff
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	f001 f9dc 	bl	800cd30 <VL53L0X_WrByte>
 800b978:	4603      	mov	r3, r0
 800b97a:	461a      	mov	r2, r3
 800b97c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b980:	4313      	orrs	r3, r2
 800b982:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b986:	e04e      	b.n	800ba26 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800b988:	78bb      	ldrb	r3, [r7, #2]
 800b98a:	2b0e      	cmp	r3, #14
 800b98c:	d14b      	bne.n	800ba26 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800b98e:	2248      	movs	r2, #72	; 0x48
 800b990:	2148      	movs	r1, #72	; 0x48
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f001 f9cc 	bl	800cd30 <VL53L0X_WrByte>
 800b998:	4603      	mov	r3, r0
 800b99a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800b99e:	2208      	movs	r2, #8
 800b9a0:	2147      	movs	r1, #71	; 0x47
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f001 f9c4 	bl	800cd30 <VL53L0X_WrByte>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
>>>>>>> ModeSelect_v2
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
<<<<<<< HEAD
 800ca4e:	2203      	movs	r2, #3
 800ca50:	2132      	movs	r1, #50	; 0x32
 800ca52:	6878      	ldr	r0, [r7, #4]
 800ca54:	f001 f9bc 	bl	800ddd0 <VL53L0X_WrByte>
 800ca58:	4603      	mov	r3, r0
 800ca5a:	461a      	mov	r2, r3
 800ca5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca60:	4313      	orrs	r3, r2
 800ca62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800ca66:	2207      	movs	r2, #7
 800ca68:	2130      	movs	r1, #48	; 0x30
 800ca6a:	6878      	ldr	r0, [r7, #4]
 800ca6c:	f001 f9b0 	bl	800ddd0 <VL53L0X_WrByte>
 800ca70:	4603      	mov	r3, r0
 800ca72:	461a      	mov	r2, r3
 800ca74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca78:	4313      	orrs	r3, r2
 800ca7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800ca7e:	2201      	movs	r2, #1
 800ca80:	21ff      	movs	r1, #255	; 0xff
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f001 f9a4 	bl	800ddd0 <VL53L0X_WrByte>
 800ca88:	4603      	mov	r3, r0
 800ca8a:	461a      	mov	r2, r3
 800ca8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca90:	4313      	orrs	r3, r2
 800ca92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800ca96:	2220      	movs	r2, #32
 800ca98:	2130      	movs	r1, #48	; 0x30
 800ca9a:	6878      	ldr	r0, [r7, #4]
 800ca9c:	f001 f998 	bl	800ddd0 <VL53L0X_WrByte>
 800caa0:	4603      	mov	r3, r0
 800caa2:	461a      	mov	r2, r3
 800caa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800caa8:	4313      	orrs	r3, r2
 800caaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800caae:	2200      	movs	r2, #0
 800cab0:	21ff      	movs	r1, #255	; 0xff
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f001 f98c 	bl	800ddd0 <VL53L0X_WrByte>
 800cab8:	4603      	mov	r3, r0
 800caba:	461a      	mov	r2, r3
 800cabc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cac0:	4313      	orrs	r3, r2
 800cac2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
=======
 800b9ae:	2203      	movs	r2, #3
 800b9b0:	2132      	movs	r1, #50	; 0x32
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f001 f9bc 	bl	800cd30 <VL53L0X_WrByte>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	461a      	mov	r2, r3
 800b9bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9c0:	4313      	orrs	r3, r2
 800b9c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800b9c6:	2207      	movs	r2, #7
 800b9c8:	2130      	movs	r1, #48	; 0x30
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f001 f9b0 	bl	800cd30 <VL53L0X_WrByte>
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	461a      	mov	r2, r3
 800b9d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9d8:	4313      	orrs	r3, r2
 800b9da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800b9de:	2201      	movs	r2, #1
 800b9e0:	21ff      	movs	r1, #255	; 0xff
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f001 f9a4 	bl	800cd30 <VL53L0X_WrByte>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	461a      	mov	r2, r3
 800b9ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9f0:	4313      	orrs	r3, r2
 800b9f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800b9f6:	2220      	movs	r2, #32
 800b9f8:	2130      	movs	r1, #48	; 0x30
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f001 f998 	bl	800cd30 <VL53L0X_WrByte>
 800ba00:	4603      	mov	r3, r0
 800ba02:	461a      	mov	r2, r3
 800ba04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba08:	4313      	orrs	r3, r2
 800ba0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800ba0e:	2200      	movs	r2, #0
 800ba10:	21ff      	movs	r1, #255	; 0xff
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f001 f98c 	bl	800cd30 <VL53L0X_WrByte>
 800ba18:	4603      	mov	r3, r0
 800ba1a:	461a      	mov	r2, r3
 800ba1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba20:	4313      	orrs	r3, r2
 800ba22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
>>>>>>> ModeSelect_v2
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 800cac6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d17f      	bne.n	800cbce <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800cace:	78bb      	ldrb	r3, [r7, #2]
 800cad0:	4618      	mov	r0, r3
 800cad2:	f7fe fe38 	bl	800b746 <VL53L0X_encode_vcsel_period>
 800cad6:	4603      	mov	r3, r0
 800cad8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
=======
 800ba26:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d17f      	bne.n	800bb2e <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800ba2e:	78bb      	ldrb	r3, [r7, #2]
 800ba30:	4618      	mov	r0, r3
 800ba32:	f7fe fe38 	bl	800a6a6 <VL53L0X_encode_vcsel_period>
 800ba36:	4603      	mov	r3, r0
 800ba38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
>>>>>>> ModeSelect_v2
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
<<<<<<< HEAD
 800cadc:	78fb      	ldrb	r3, [r7, #3]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d002      	beq.n	800cae8 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800cae2:	2b01      	cmp	r3, #1
 800cae4:	d045      	beq.n	800cb72 <VL53L0X_set_vcsel_pulse_period+0x470>
 800cae6:	e06e      	b.n	800cbc6 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800cae8:	f107 0314 	add.w	r3, r7, #20
 800caec:	461a      	mov	r2, r3
 800caee:	2103      	movs	r1, #3
 800caf0:	6878      	ldr	r0, [r7, #4]
 800caf2:	f7ff fc33 	bl	800c35c <get_sequence_step_timeout>
 800caf6:	4603      	mov	r3, r0
 800caf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
=======
 800ba3c:	78fb      	ldrb	r3, [r7, #3]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d002      	beq.n	800ba48 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800ba42:	2b01      	cmp	r3, #1
 800ba44:	d045      	beq.n	800bad2 <VL53L0X_set_vcsel_pulse_period+0x470>
 800ba46:	e06e      	b.n	800bb26 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800ba48:	f107 0314 	add.w	r3, r7, #20
 800ba4c:	461a      	mov	r2, r3
 800ba4e:	2103      	movs	r1, #3
 800ba50:	6878      	ldr	r0, [r7, #4]
 800ba52:	f7ff fc33 	bl	800b2bc <get_sequence_step_timeout>
 800ba56:	4603      	mov	r3, r0
 800ba58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
>>>>>>> ModeSelect_v2
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
<<<<<<< HEAD
 800cafc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d109      	bne.n	800cb18 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800cb04:	f107 0310 	add.w	r3, r7, #16
 800cb08:	461a      	mov	r2, r3
 800cb0a:	2102      	movs	r1, #2
 800cb0c:	6878      	ldr	r0, [r7, #4]
 800cb0e:	f7ff fc25 	bl	800c35c <get_sequence_step_timeout>
 800cb12:	4603      	mov	r3, r0
 800cb14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
=======
 800ba5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d109      	bne.n	800ba78 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800ba64:	f107 0310 	add.w	r3, r7, #16
 800ba68:	461a      	mov	r2, r3
 800ba6a:	2102      	movs	r1, #2
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	f7ff fc25 	bl	800b2bc <get_sequence_step_timeout>
 800ba72:	4603      	mov	r3, r0
 800ba74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
>>>>>>> ModeSelect_v2
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
<<<<<<< HEAD
 800cb18:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d109      	bne.n	800cb34 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800cb20:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800cb24:	461a      	mov	r2, r3
 800cb26:	2150      	movs	r1, #80	; 0x50
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f001 f951 	bl	800ddd0 <VL53L0X_WrByte>
 800cb2e:	4603      	mov	r3, r0
 800cb30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
=======
 800ba78:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d109      	bne.n	800ba94 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800ba80:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ba84:	461a      	mov	r2, r3
 800ba86:	2150      	movs	r1, #80	; 0x50
 800ba88:	6878      	ldr	r0, [r7, #4]
 800ba8a:	f001 f951 	bl	800cd30 <VL53L0X_WrByte>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
>>>>>>> ModeSelect_v2
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
<<<<<<< HEAD
 800cb34:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d108      	bne.n	800cb4e <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800cb3c:	697b      	ldr	r3, [r7, #20]
 800cb3e:	461a      	mov	r2, r3
 800cb40:	2103      	movs	r1, #3
 800cb42:	6878      	ldr	r0, [r7, #4]
 800cb44:	f7ff fceb 	bl	800c51e <set_sequence_step_timeout>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
=======
 800ba94:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d108      	bne.n	800baae <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800ba9c:	697b      	ldr	r3, [r7, #20]
 800ba9e:	461a      	mov	r2, r3
 800baa0:	2103      	movs	r1, #3
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f7ff fceb 	bl	800b47e <set_sequence_step_timeout>
 800baa8:	4603      	mov	r3, r0
 800baaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
>>>>>>> ModeSelect_v2
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
<<<<<<< HEAD
 800cb4e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d108      	bne.n	800cb68 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800cb56:	693b      	ldr	r3, [r7, #16]
 800cb58:	461a      	mov	r2, r3
 800cb5a:	2102      	movs	r1, #2
 800cb5c:	6878      	ldr	r0, [r7, #4]
 800cb5e:	f7ff fcde 	bl	800c51e <set_sequence_step_timeout>
 800cb62:	4603      	mov	r3, r0
 800cb64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
=======
 800baae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d108      	bne.n	800bac8 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800bab6:	693b      	ldr	r3, [r7, #16]
 800bab8:	461a      	mov	r2, r3
 800baba:	2102      	movs	r1, #2
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f7ff fcde 	bl	800b47e <set_sequence_step_timeout>
 800bac2:	4603      	mov	r3, r0
 800bac4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
>>>>>>> ModeSelect_v2
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
<<<<<<< HEAD
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	78ba      	ldrb	r2, [r7, #2]
 800cb6c:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
=======
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	78ba      	ldrb	r2, [r7, #2]
 800bacc:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
>>>>>>> ModeSelect_v2
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
<<<<<<< HEAD
 800cb70:	e02e      	b.n	800cbd0 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800cb72:	f107 0318 	add.w	r3, r7, #24
 800cb76:	461a      	mov	r2, r3
 800cb78:	2104      	movs	r1, #4
 800cb7a:	6878      	ldr	r0, [r7, #4]
 800cb7c:	f7ff fbee 	bl	800c35c <get_sequence_step_timeout>
 800cb80:	4603      	mov	r3, r0
 800cb82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
=======
 800bad0:	e02e      	b.n	800bb30 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800bad2:	f107 0318 	add.w	r3, r7, #24
 800bad6:	461a      	mov	r2, r3
 800bad8:	2104      	movs	r1, #4
 800bada:	6878      	ldr	r0, [r7, #4]
 800badc:	f7ff fbee 	bl	800b2bc <get_sequence_step_timeout>
 800bae0:	4603      	mov	r3, r0
 800bae2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
>>>>>>> ModeSelect_v2
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
<<<<<<< HEAD
 800cb86:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d109      	bne.n	800cba2 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800cb8e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800cb92:	461a      	mov	r2, r3
 800cb94:	2170      	movs	r1, #112	; 0x70
 800cb96:	6878      	ldr	r0, [r7, #4]
 800cb98:	f001 f91a 	bl	800ddd0 <VL53L0X_WrByte>
 800cb9c:	4603      	mov	r3, r0
 800cb9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
=======
 800bae6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800baea:	2b00      	cmp	r3, #0
 800baec:	d109      	bne.n	800bb02 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800baee:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800baf2:	461a      	mov	r2, r3
 800baf4:	2170      	movs	r1, #112	; 0x70
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f001 f91a 	bl	800cd30 <VL53L0X_WrByte>
 800bafc:	4603      	mov	r3, r0
 800bafe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
>>>>>>> ModeSelect_v2
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
<<<<<<< HEAD
 800cba2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d108      	bne.n	800cbbc <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800cbaa:	69bb      	ldr	r3, [r7, #24]
 800cbac:	461a      	mov	r2, r3
 800cbae:	2104      	movs	r1, #4
 800cbb0:	6878      	ldr	r0, [r7, #4]
 800cbb2:	f7ff fcb4 	bl	800c51e <set_sequence_step_timeout>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
=======
 800bb02:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d108      	bne.n	800bb1c <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800bb0a:	69bb      	ldr	r3, [r7, #24]
 800bb0c:	461a      	mov	r2, r3
 800bb0e:	2104      	movs	r1, #4
 800bb10:	6878      	ldr	r0, [r7, #4]
 800bb12:	f7ff fcb4 	bl	800b47e <set_sequence_step_timeout>
 800bb16:	4603      	mov	r3, r0
 800bb18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
>>>>>>> ModeSelect_v2
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
<<<<<<< HEAD
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	78ba      	ldrb	r2, [r7, #2]
 800cbc0:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
=======
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	78ba      	ldrb	r2, [r7, #2]
 800bb20:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
>>>>>>> ModeSelect_v2
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
<<<<<<< HEAD
 800cbc4:	e004      	b.n	800cbd0 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800cbc6:	23fc      	movs	r3, #252	; 0xfc
 800cbc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cbcc:	e000      	b.n	800cbd0 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 800cbce:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800cbd0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d109      	bne.n	800cbec <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	695b      	ldr	r3, [r3, #20]
 800cbdc:	61fb      	str	r3, [r7, #28]
=======
 800bb24:	e004      	b.n	800bb30 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bb26:	23fc      	movs	r3, #252	; 0xfc
 800bb28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bb2c:	e000      	b.n	800bb30 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 800bb2e:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800bb30:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d109      	bne.n	800bb4c <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	695b      	ldr	r3, [r3, #20]
 800bb3c:	61fb      	str	r3, [r7, #28]
>>>>>>> ModeSelect_v2
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
<<<<<<< HEAD
 800cbde:	69f9      	ldr	r1, [r7, #28]
 800cbe0:	6878      	ldr	r0, [r7, #4]
 800cbe2:	f7fc fe1d 	bl	8009820 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
=======
 800bb3e:	69f9      	ldr	r1, [r7, #28]
 800bb40:	6878      	ldr	r0, [r7, #4]
 800bb42:	f7fc fe1d 	bl	8008780 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800bb46:	4603      	mov	r3, r0
 800bb48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
>>>>>>> ModeSelect_v2
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
<<<<<<< HEAD
 800cbec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d109      	bne.n	800cc08 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 800cbf4:	f107 010f 	add.w	r1, r7, #15
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	f7fe fcbd 	bl	800b57c <VL53L0X_perform_phase_calibration>
 800cc02:	4603      	mov	r3, r0
 800cc04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800cc08:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	3728      	adds	r7, #40	; 0x28
 800cc10:	46bd      	mov	sp, r7
 800cc12:	bd80      	pop	{r7, pc}

0800cc14 <VL53L0X_get_vcsel_pulse_period>:
=======
 800bb4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d109      	bne.n	800bb68 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 800bb54:	f107 010f 	add.w	r1, r7, #15
 800bb58:	2301      	movs	r3, #1
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f7fe fcbd 	bl	800a4dc <VL53L0X_perform_phase_calibration>
 800bb62:	4603      	mov	r3, r0
 800bb64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800bb68:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	3728      	adds	r7, #40	; 0x28
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}

0800bb74 <VL53L0X_get_vcsel_pulse_period>:
>>>>>>> ModeSelect_v2

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
<<<<<<< HEAD
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b086      	sub	sp, #24
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	60f8      	str	r0, [r7, #12]
 800cc1c:	460b      	mov	r3, r1
 800cc1e:	607a      	str	r2, [r7, #4]
 800cc20:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cc22:	2300      	movs	r3, #0
 800cc24:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800cc26:	7afb      	ldrb	r3, [r7, #11]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d002      	beq.n	800cc32 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800cc2c:	2b01      	cmp	r3, #1
 800cc2e:	d00a      	beq.n	800cc46 <VL53L0X_get_vcsel_pulse_period+0x32>
 800cc30:	e013      	b.n	800cc5a <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800cc32:	f107 0316 	add.w	r3, r7, #22
 800cc36:	461a      	mov	r2, r3
 800cc38:	2150      	movs	r1, #80	; 0x50
 800cc3a:	68f8      	ldr	r0, [r7, #12]
 800cc3c:	f001 f94a 	bl	800ded4 <VL53L0X_RdByte>
 800cc40:	4603      	mov	r3, r0
 800cc42:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800cc44:	e00b      	b.n	800cc5e <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800cc46:	f107 0316 	add.w	r3, r7, #22
 800cc4a:	461a      	mov	r2, r3
 800cc4c:	2170      	movs	r1, #112	; 0x70
 800cc4e:	68f8      	ldr	r0, [r7, #12]
 800cc50:	f001 f940 	bl	800ded4 <VL53L0X_RdByte>
 800cc54:	4603      	mov	r3, r0
 800cc56:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800cc58:	e001      	b.n	800cc5e <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800cc5a:	23fc      	movs	r3, #252	; 0xfc
 800cc5c:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800cc5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d107      	bne.n	800cc76 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800cc66:	7dbb      	ldrb	r3, [r7, #22]
 800cc68:	4618      	mov	r0, r3
 800cc6a:	f7fe fd59 	bl	800b720 <VL53L0X_decode_vcsel_period>
 800cc6e:	4603      	mov	r3, r0
 800cc70:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	701a      	strb	r2, [r3, #0]

	return Status;
 800cc76:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	3718      	adds	r7, #24
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	bd80      	pop	{r7, pc}

0800cc82 <VL53L0X_set_measurement_timing_budget_micro_seconds>:
=======
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b086      	sub	sp, #24
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	60f8      	str	r0, [r7, #12]
 800bb7c:	460b      	mov	r3, r1
 800bb7e:	607a      	str	r2, [r7, #4]
 800bb80:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bb82:	2300      	movs	r3, #0
 800bb84:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800bb86:	7afb      	ldrb	r3, [r7, #11]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d002      	beq.n	800bb92 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800bb8c:	2b01      	cmp	r3, #1
 800bb8e:	d00a      	beq.n	800bba6 <VL53L0X_get_vcsel_pulse_period+0x32>
 800bb90:	e013      	b.n	800bbba <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800bb92:	f107 0316 	add.w	r3, r7, #22
 800bb96:	461a      	mov	r2, r3
 800bb98:	2150      	movs	r1, #80	; 0x50
 800bb9a:	68f8      	ldr	r0, [r7, #12]
 800bb9c:	f001 f94a 	bl	800ce34 <VL53L0X_RdByte>
 800bba0:	4603      	mov	r3, r0
 800bba2:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800bba4:	e00b      	b.n	800bbbe <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800bba6:	f107 0316 	add.w	r3, r7, #22
 800bbaa:	461a      	mov	r2, r3
 800bbac:	2170      	movs	r1, #112	; 0x70
 800bbae:	68f8      	ldr	r0, [r7, #12]
 800bbb0:	f001 f940 	bl	800ce34 <VL53L0X_RdByte>
 800bbb4:	4603      	mov	r3, r0
 800bbb6:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800bbb8:	e001      	b.n	800bbbe <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bbba:	23fc      	movs	r3, #252	; 0xfc
 800bbbc:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800bbbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d107      	bne.n	800bbd6 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800bbc6:	7dbb      	ldrb	r3, [r7, #22]
 800bbc8:	4618      	mov	r0, r3
 800bbca:	f7fe fd59 	bl	800a680 <VL53L0X_decode_vcsel_period>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	701a      	strb	r2, [r3, #0]

	return Status;
 800bbd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	3718      	adds	r7, #24
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}

0800bbe2 <VL53L0X_set_measurement_timing_budget_micro_seconds>:
>>>>>>> ModeSelect_v2



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
<<<<<<< HEAD
 800cc82:	b580      	push	{r7, lr}
 800cc84:	b092      	sub	sp, #72	; 0x48
 800cc86:	af00      	add	r7, sp, #0
 800cc88:	6078      	str	r0, [r7, #4]
 800cc8a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800cc92:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800cc96:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800cc98:	f240 7376 	movw	r3, #1910	; 0x776
 800cc9c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800cc9e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800cca2:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800cca4:	f44f 7325 	mov.w	r3, #660	; 0x294
 800cca8:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800ccaa:	f240 234e 	movw	r3, #590	; 0x24e
 800ccae:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800ccb0:	f240 23b2 	movw	r3, #690	; 0x2b2
 800ccb4:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800ccb6:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ccba:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800ccbc:	f240 2326 	movw	r3, #550	; 0x226
 800ccc0:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800ccc6:	f644 6320 	movw	r3, #20000	; 0x4e20
 800ccca:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800cccc:	2300      	movs	r3, #0
 800ccce:	61fb      	str	r3, [r7, #28]
=======
 800bbe2:	b580      	push	{r7, lr}
 800bbe4:	b092      	sub	sp, #72	; 0x48
 800bbe6:	af00      	add	r7, sp, #0
 800bbe8:	6078      	str	r0, [r7, #4]
 800bbea:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bbec:	2300      	movs	r3, #0
 800bbee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800bbf2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800bbf6:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800bbf8:	f240 7376 	movw	r3, #1910	; 0x776
 800bbfc:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800bbfe:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800bc02:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800bc04:	f44f 7325 	mov.w	r3, #660	; 0x294
 800bc08:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800bc0a:	f240 234e 	movw	r3, #590	; 0x24e
 800bc0e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800bc10:	f240 23b2 	movw	r3, #690	; 0x2b2
 800bc14:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800bc16:	f44f 7325 	mov.w	r3, #660	; 0x294
 800bc1a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800bc1c:	f240 2326 	movw	r3, #550	; 0x226
 800bc20:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800bc22:	2300      	movs	r3, #0
 800bc24:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800bc26:	f644 6320 	movw	r3, #20000	; 0x4e20
 800bc2a:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	61fb      	str	r3, [r7, #28]
>>>>>>> ModeSelect_v2

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
<<<<<<< HEAD
 800ccd0:	683a      	ldr	r2, [r7, #0]
 800ccd2:	6a3b      	ldr	r3, [r7, #32]
 800ccd4:	429a      	cmp	r2, r3
 800ccd6:	d205      	bcs.n	800cce4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ccd8:	23fc      	movs	r3, #252	; 0xfc
 800ccda:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800ccde:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800cce2:	e0aa      	b.n	800ce3a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
=======
 800bc30:	683a      	ldr	r2, [r7, #0]
 800bc32:	6a3b      	ldr	r3, [r7, #32]
 800bc34:	429a      	cmp	r2, r3
 800bc36:	d205      	bcs.n	800bc44 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bc38:	23fc      	movs	r3, #252	; 0xfc
 800bc3a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800bc3e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800bc42:	e0aa      	b.n	800bd9a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
>>>>>>> ModeSelect_v2
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
<<<<<<< HEAD
 800cce4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cce8:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800ccea:	683a      	ldr	r2, [r7, #0]
 800ccec:	1ad3      	subs	r3, r2, r3
 800ccee:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800ccf0:	f107 0314 	add.w	r3, r7, #20
 800ccf4:	4619      	mov	r1, r3
 800ccf6:	6878      	ldr	r0, [r7, #4]
 800ccf8:	f7fc fedc 	bl	8009ab4 <VL53L0X_GetSequenceStepEnables>
 800ccfc:	4603      	mov	r3, r0
 800ccfe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800cd02:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d15b      	bne.n	800cdc2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800cd0a:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d105      	bne.n	800cd1c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800cd10:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d102      	bne.n	800cd1c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800cd16:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d052      	beq.n	800cdc2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800cd1c:	f107 0310 	add.w	r3, r7, #16
 800cd20:	461a      	mov	r2, r3
 800cd22:	2102      	movs	r1, #2
 800cd24:	6878      	ldr	r0, [r7, #4]
 800cd26:	f7ff fb19 	bl	800c35c <get_sequence_step_timeout>
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
=======
 800bc44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bc46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc48:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800bc4a:	683a      	ldr	r2, [r7, #0]
 800bc4c:	1ad3      	subs	r3, r2, r3
 800bc4e:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800bc50:	f107 0314 	add.w	r3, r7, #20
 800bc54:	4619      	mov	r1, r3
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f7fc fedc 	bl	8008a14 <VL53L0X_GetSequenceStepEnables>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800bc62:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d15b      	bne.n	800bd22 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800bc6a:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d105      	bne.n	800bc7c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800bc70:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d102      	bne.n	800bc7c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800bc76:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d052      	beq.n	800bd22 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800bc7c:	f107 0310 	add.w	r3, r7, #16
 800bc80:	461a      	mov	r2, r3
 800bc82:	2102      	movs	r1, #2
 800bc84:	6878      	ldr	r0, [r7, #4]
 800bc86:	f7ff fb19 	bl	800b2bc <get_sequence_step_timeout>
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
>>>>>>> ModeSelect_v2
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
<<<<<<< HEAD
 800cd30:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d002      	beq.n	800cd3e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800cd38:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800cd3c:	e07d      	b.n	800ce3a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800cd3e:	7d3b      	ldrb	r3, [r7, #20]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d00f      	beq.n	800cd64 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800cd44:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800cd46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd48:	4413      	add	r3, r2
 800cd4a:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800cd4c:	69fa      	ldr	r2, [r7, #28]
 800cd4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd50:	429a      	cmp	r2, r3
 800cd52:	d204      	bcs.n	800cd5e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800cd54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cd56:	69fb      	ldr	r3, [r7, #28]
 800cd58:	1ad3      	subs	r3, r2, r3
 800cd5a:	643b      	str	r3, [r7, #64]	; 0x40
 800cd5c:	e002      	b.n	800cd64 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
=======
 800bc90:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d002      	beq.n	800bc9e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800bc98:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800bc9c:	e07d      	b.n	800bd9a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800bc9e:	7d3b      	ldrb	r3, [r7, #20]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d00f      	beq.n	800bcc4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800bca4:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800bca6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bca8:	4413      	add	r3, r2
 800bcaa:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800bcac:	69fa      	ldr	r2, [r7, #28]
 800bcae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcb0:	429a      	cmp	r2, r3
 800bcb2:	d204      	bcs.n	800bcbe <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800bcb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bcb6:	69fb      	ldr	r3, [r7, #28]
 800bcb8:	1ad3      	subs	r3, r2, r3
 800bcba:	643b      	str	r3, [r7, #64]	; 0x40
 800bcbc:	e002      	b.n	800bcc4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
>>>>>>> ModeSelect_v2
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
<<<<<<< HEAD
 800cd5e:	23fc      	movs	r3, #252	; 0xfc
 800cd60:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
=======
 800bcbe:	23fc      	movs	r3, #252	; 0xfc
 800bcc0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
>>>>>>> ModeSelect_v2
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 800cd64:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d002      	beq.n	800cd72 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800cd6c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800cd70:	e063      	b.n	800ce3a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
=======
 800bcc4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d002      	beq.n	800bcd2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800bccc:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800bcd0:	e063      	b.n	800bd9a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
>>>>>>> ModeSelect_v2
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
<<<<<<< HEAD
 800cd72:	7dbb      	ldrb	r3, [r7, #22]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d011      	beq.n	800cd9c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800cd78:	693a      	ldr	r2, [r7, #16]
 800cd7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd7c:	4413      	add	r3, r2
 800cd7e:	005b      	lsls	r3, r3, #1
 800cd80:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800cd82:	69fa      	ldr	r2, [r7, #28]
 800cd84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd86:	429a      	cmp	r2, r3
 800cd88:	d204      	bcs.n	800cd94 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800cd8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cd8c:	69fb      	ldr	r3, [r7, #28]
 800cd8e:	1ad3      	subs	r3, r2, r3
 800cd90:	643b      	str	r3, [r7, #64]	; 0x40
 800cd92:	e016      	b.n	800cdc2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800cd94:	23fc      	movs	r3, #252	; 0xfc
 800cd96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800cd9a:	e012      	b.n	800cdc2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800cd9c:	7d7b      	ldrb	r3, [r7, #21]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d00f      	beq.n	800cdc2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800cda2:	693b      	ldr	r3, [r7, #16]
 800cda4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cda6:	4413      	add	r3, r2
 800cda8:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800cdaa:	69fa      	ldr	r2, [r7, #28]
 800cdac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cdae:	429a      	cmp	r2, r3
 800cdb0:	d204      	bcs.n	800cdbc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800cdb2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cdb4:	69fb      	ldr	r3, [r7, #28]
 800cdb6:	1ad3      	subs	r3, r2, r3
 800cdb8:	643b      	str	r3, [r7, #64]	; 0x40
 800cdba:	e002      	b.n	800cdc2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800cdbc:	23fc      	movs	r3, #252	; 0xfc
 800cdbe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
=======
 800bcd2:	7dbb      	ldrb	r3, [r7, #22]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d011      	beq.n	800bcfc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800bcd8:	693a      	ldr	r2, [r7, #16]
 800bcda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcdc:	4413      	add	r3, r2
 800bcde:	005b      	lsls	r3, r3, #1
 800bce0:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800bce2:	69fa      	ldr	r2, [r7, #28]
 800bce4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bce6:	429a      	cmp	r2, r3
 800bce8:	d204      	bcs.n	800bcf4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800bcea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bcec:	69fb      	ldr	r3, [r7, #28]
 800bcee:	1ad3      	subs	r3, r2, r3
 800bcf0:	643b      	str	r3, [r7, #64]	; 0x40
 800bcf2:	e016      	b.n	800bd22 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bcf4:	23fc      	movs	r3, #252	; 0xfc
 800bcf6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800bcfa:	e012      	b.n	800bd22 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800bcfc:	7d7b      	ldrb	r3, [r7, #21]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d00f      	beq.n	800bd22 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800bd02:	693b      	ldr	r3, [r7, #16]
 800bd04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bd06:	4413      	add	r3, r2
 800bd08:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800bd0a:	69fa      	ldr	r2, [r7, #28]
 800bd0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd0e:	429a      	cmp	r2, r3
 800bd10:	d204      	bcs.n	800bd1c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800bd12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bd14:	69fb      	ldr	r3, [r7, #28]
 800bd16:	1ad3      	subs	r3, r2, r3
 800bd18:	643b      	str	r3, [r7, #64]	; 0x40
 800bd1a:	e002      	b.n	800bd22 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bd1c:	23fc      	movs	r3, #252	; 0xfc
 800bd1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
>>>>>>> ModeSelect_v2
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 800cdc2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d002      	beq.n	800cdd0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800cdca:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800cdce:	e034      	b.n	800ce3a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800cdd0:	7dfb      	ldrb	r3, [r7, #23]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d019      	beq.n	800ce0a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
=======
 800bd22:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d002      	beq.n	800bd30 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800bd2a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800bd2e:	e034      	b.n	800bd9a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800bd30:	7dfb      	ldrb	r3, [r7, #23]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d019      	beq.n	800bd6a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
>>>>>>> ModeSelect_v2

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
<<<<<<< HEAD
 800cdd6:	f107 030c 	add.w	r3, r7, #12
 800cdda:	461a      	mov	r2, r3
 800cddc:	2103      	movs	r1, #3
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	f7ff fabc 	bl	800c35c <get_sequence_step_timeout>
 800cde4:	4603      	mov	r3, r0
 800cde6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
=======
 800bd36:	f107 030c 	add.w	r3, r7, #12
 800bd3a:	461a      	mov	r2, r3
 800bd3c:	2103      	movs	r1, #3
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	f7ff fabc 	bl	800b2bc <get_sequence_step_timeout>
 800bd44:	4603      	mov	r3, r0
 800bd46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
>>>>>>> ModeSelect_v2
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
<<<<<<< HEAD
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cdee:	4413      	add	r3, r2
 800cdf0:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800cdf2:	69fa      	ldr	r2, [r7, #28]
 800cdf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cdf6:	429a      	cmp	r2, r3
 800cdf8:	d204      	bcs.n	800ce04 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800cdfa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cdfc:	69fb      	ldr	r3, [r7, #28]
 800cdfe:	1ad3      	subs	r3, r2, r3
 800ce00:	643b      	str	r3, [r7, #64]	; 0x40
 800ce02:	e002      	b.n	800ce0a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ce04:	23fc      	movs	r3, #252	; 0xfc
 800ce06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
=======
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd4e:	4413      	add	r3, r2
 800bd50:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800bd52:	69fa      	ldr	r2, [r7, #28]
 800bd54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd56:	429a      	cmp	r2, r3
 800bd58:	d204      	bcs.n	800bd64 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800bd5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bd5c:	69fb      	ldr	r3, [r7, #28]
 800bd5e:	1ad3      	subs	r3, r2, r3
 800bd60:	643b      	str	r3, [r7, #64]	; 0x40
 800bd62:	e002      	b.n	800bd6a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bd64:	23fc      	movs	r3, #252	; 0xfc
 800bd66:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
>>>>>>> ModeSelect_v2
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
<<<<<<< HEAD
 800ce0a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d111      	bne.n	800ce36 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800ce12:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d00e      	beq.n	800ce36 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800ce18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ce1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce1c:	1ad3      	subs	r3, r2, r3
 800ce1e:	643b      	str	r3, [r7, #64]	; 0x40
=======
 800bd6a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d111      	bne.n	800bd96 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800bd72:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d00e      	beq.n	800bd96 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800bd78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bd7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd7c:	1ad3      	subs	r3, r2, r3
 800bd7e:	643b      	str	r3, [r7, #64]	; 0x40
>>>>>>> ModeSelect_v2
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
<<<<<<< HEAD
 800ce20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ce22:	2104      	movs	r1, #4
 800ce24:	6878      	ldr	r0, [r7, #4]
 800ce26:	f7ff fb7a 	bl	800c51e <set_sequence_step_timeout>
 800ce2a:	4603      	mov	r3, r0
 800ce2c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
=======
 800bd80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bd82:	2104      	movs	r1, #4
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	f7ff fb7a 	bl	800b47e <set_sequence_step_timeout>
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
>>>>>>> ModeSelect_v2
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
<<<<<<< HEAD
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	683a      	ldr	r2, [r7, #0]
 800ce34:	615a      	str	r2, [r3, #20]
=======
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	683a      	ldr	r2, [r7, #0]
 800bd94:	615a      	str	r2, [r3, #20]
>>>>>>> ModeSelect_v2
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
<<<<<<< HEAD
 800ce36:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	3748      	adds	r7, #72	; 0x48
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	bd80      	pop	{r7, pc}

0800ce42 <VL53L0X_get_measurement_timing_budget_micro_seconds>:
=======
 800bd96:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	3748      	adds	r7, #72	; 0x48
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}

0800bda2 <VL53L0X_get_measurement_timing_budget_micro_seconds>:
>>>>>>> ModeSelect_v2

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
<<<<<<< HEAD
 800ce42:	b580      	push	{r7, lr}
 800ce44:	b090      	sub	sp, #64	; 0x40
 800ce46:	af00      	add	r7, sp, #0
 800ce48:	6078      	str	r0, [r7, #4]
 800ce4a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800ce52:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800ce56:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800ce58:	f240 7376 	movw	r3, #1910	; 0x776
 800ce5c:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800ce5e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800ce62:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800ce64:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ce68:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800ce6a:	f240 234e 	movw	r3, #590	; 0x24e
 800ce6e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800ce70:	f240 23b2 	movw	r3, #690	; 0x2b2
 800ce74:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800ce76:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ce7a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800ce7c:	f240 2326 	movw	r3, #550	; 0x226
 800ce80:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800ce82:	2300      	movs	r3, #0
 800ce84:	60fb      	str	r3, [r7, #12]
=======
 800bda2:	b580      	push	{r7, lr}
 800bda4:	b090      	sub	sp, #64	; 0x40
 800bda6:	af00      	add	r7, sp, #0
 800bda8:	6078      	str	r0, [r7, #4]
 800bdaa:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bdac:	2300      	movs	r3, #0
 800bdae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800bdb2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800bdb6:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800bdb8:	f240 7376 	movw	r3, #1910	; 0x776
 800bdbc:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800bdbe:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800bdc2:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800bdc4:	f44f 7325 	mov.w	r3, #660	; 0x294
 800bdc8:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800bdca:	f240 234e 	movw	r3, #590	; 0x24e
 800bdce:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800bdd0:	f240 23b2 	movw	r3, #690	; 0x2b2
 800bdd4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800bdd6:	f44f 7325 	mov.w	r3, #660	; 0x294
 800bdda:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800bddc:	f240 2326 	movw	r3, #550	; 0x226
 800bde0:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800bde2:	2300      	movs	r3, #0
 800bde4:	60fb      	str	r3, [r7, #12]
>>>>>>> ModeSelect_v2

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
<<<<<<< HEAD
 800ce86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce8a:	441a      	add	r2, r3
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800ce90:	f107 0318 	add.w	r3, r7, #24
 800ce94:	4619      	mov	r1, r3
 800ce96:	6878      	ldr	r0, [r7, #4]
 800ce98:	f7fc fe0c 	bl	8009ab4 <VL53L0X_GetSequenceStepEnables>
 800ce9c:	4603      	mov	r3, r0
 800ce9e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800cea2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d002      	beq.n	800ceb0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800ceaa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ceae:	e075      	b.n	800cf9c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
=======
 800bde6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bde8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdea:	441a      	add	r2, r3
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800bdf0:	f107 0318 	add.w	r3, r7, #24
 800bdf4:	4619      	mov	r1, r3
 800bdf6:	6878      	ldr	r0, [r7, #4]
 800bdf8:	f7fc fe0c 	bl	8008a14 <VL53L0X_GetSequenceStepEnables>
 800bdfc:	4603      	mov	r3, r0
 800bdfe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800be02:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800be06:	2b00      	cmp	r3, #0
 800be08:	d002      	beq.n	800be10 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800be0a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800be0e:	e075      	b.n	800befc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
>>>>>>> ModeSelect_v2
	}


	if (SchedulerSequenceSteps.TccOn  ||
<<<<<<< HEAD
 800ceb0:	7e3b      	ldrb	r3, [r7, #24]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d105      	bne.n	800cec2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800ceb6:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d102      	bne.n	800cec2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800cebc:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d030      	beq.n	800cf24 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800cec2:	f107 0310 	add.w	r3, r7, #16
 800cec6:	461a      	mov	r2, r3
 800cec8:	2102      	movs	r1, #2
 800ceca:	6878      	ldr	r0, [r7, #4]
 800cecc:	f7ff fa46 	bl	800c35c <get_sequence_step_timeout>
 800ced0:	4603      	mov	r3, r0
 800ced2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
=======
 800be10:	7e3b      	ldrb	r3, [r7, #24]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d105      	bne.n	800be22 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800be16:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d102      	bne.n	800be22 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800be1c:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d030      	beq.n	800be84 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800be22:	f107 0310 	add.w	r3, r7, #16
 800be26:	461a      	mov	r2, r3
 800be28:	2102      	movs	r1, #2
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f7ff fa46 	bl	800b2bc <get_sequence_step_timeout>
 800be30:	4603      	mov	r3, r0
 800be32:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
>>>>>>> ModeSelect_v2
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 800ced6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d122      	bne.n	800cf24 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800cede:	7e3b      	ldrb	r3, [r7, #24]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d007      	beq.n	800cef4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800cee4:	683b      	ldr	r3, [r7, #0]
 800cee6:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800cee8:	6939      	ldr	r1, [r7, #16]
 800ceea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceec:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800ceee:	441a      	add	r2, r3
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	601a      	str	r2, [r3, #0]
=======
 800be36:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d122      	bne.n	800be84 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800be3e:	7e3b      	ldrb	r3, [r7, #24]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d007      	beq.n	800be54 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800be48:	6939      	ldr	r1, [r7, #16]
 800be4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be4c:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800be4e:	441a      	add	r2, r3
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	601a      	str	r2, [r3, #0]
>>>>>>> ModeSelect_v2
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
<<<<<<< HEAD
 800cef4:	7ebb      	ldrb	r3, [r7, #26]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d009      	beq.n	800cf0e <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800cefe:	6939      	ldr	r1, [r7, #16]
 800cf00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf02:	440b      	add	r3, r1
 800cf04:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800cf06:	441a      	add	r2, r3
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	601a      	str	r2, [r3, #0]
 800cf0c:	e00a      	b.n	800cf24 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800cf0e:	7e7b      	ldrb	r3, [r7, #25]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d007      	beq.n	800cf24 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800cf18:	6939      	ldr	r1, [r7, #16]
 800cf1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf1c:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800cf1e:	441a      	add	r2, r3
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	601a      	str	r2, [r3, #0]
=======
 800be54:	7ebb      	ldrb	r3, [r7, #26]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d009      	beq.n	800be6e <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800be5e:	6939      	ldr	r1, [r7, #16]
 800be60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be62:	440b      	add	r3, r1
 800be64:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800be66:	441a      	add	r2, r3
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	601a      	str	r2, [r3, #0]
 800be6c:	e00a      	b.n	800be84 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800be6e:	7e7b      	ldrb	r3, [r7, #25]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d007      	beq.n	800be84 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800be78:	6939      	ldr	r1, [r7, #16]
 800be7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be7c:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800be7e:	441a      	add	r2, r3
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	601a      	str	r2, [r3, #0]
>>>>>>> ModeSelect_v2
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 800cf24:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d114      	bne.n	800cf56 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800cf2c:	7efb      	ldrb	r3, [r7, #27]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d011      	beq.n	800cf56 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800cf32:	f107 030c 	add.w	r3, r7, #12
 800cf36:	461a      	mov	r2, r3
 800cf38:	2103      	movs	r1, #3
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f7ff fa0e 	bl	800c35c <get_sequence_step_timeout>
 800cf40:	4603      	mov	r3, r0
 800cf42:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800cf4a:	68f9      	ldr	r1, [r7, #12]
 800cf4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf4e:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800cf50:	441a      	add	r2, r3
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	601a      	str	r2, [r3, #0]
=======
 800be84:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d114      	bne.n	800beb6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800be8c:	7efb      	ldrb	r3, [r7, #27]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d011      	beq.n	800beb6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800be92:	f107 030c 	add.w	r3, r7, #12
 800be96:	461a      	mov	r2, r3
 800be98:	2103      	movs	r1, #3
 800be9a:	6878      	ldr	r0, [r7, #4]
 800be9c:	f7ff fa0e 	bl	800b2bc <get_sequence_step_timeout>
 800bea0:	4603      	mov	r3, r0
 800bea2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800beaa:	68f9      	ldr	r1, [r7, #12]
 800beac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beae:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800beb0:	441a      	add	r2, r3
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	601a      	str	r2, [r3, #0]
>>>>>>> ModeSelect_v2
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 800cf56:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d114      	bne.n	800cf88 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800cf5e:	7f3b      	ldrb	r3, [r7, #28]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d011      	beq.n	800cf88 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800cf64:	f107 0314 	add.w	r3, r7, #20
 800cf68:	461a      	mov	r2, r3
 800cf6a:	2104      	movs	r1, #4
 800cf6c:	6878      	ldr	r0, [r7, #4]
 800cf6e:	f7ff f9f5 	bl	800c35c <get_sequence_step_timeout>
 800cf72:	4603      	mov	r3, r0
 800cf74:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800cf7c:	6979      	ldr	r1, [r7, #20]
 800cf7e:	6a3b      	ldr	r3, [r7, #32]
 800cf80:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800cf82:	441a      	add	r2, r3
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	601a      	str	r2, [r3, #0]
=======
 800beb6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d114      	bne.n	800bee8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800bebe:	7f3b      	ldrb	r3, [r7, #28]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d011      	beq.n	800bee8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800bec4:	f107 0314 	add.w	r3, r7, #20
 800bec8:	461a      	mov	r2, r3
 800beca:	2104      	movs	r1, #4
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f7ff f9f5 	bl	800b2bc <get_sequence_step_timeout>
 800bed2:	4603      	mov	r3, r0
 800bed4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800bedc:	6979      	ldr	r1, [r7, #20]
 800bede:	6a3b      	ldr	r3, [r7, #32]
 800bee0:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800bee2:	441a      	add	r2, r3
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	601a      	str	r2, [r3, #0]
>>>>>>> ModeSelect_v2
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 800cf88:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d103      	bne.n	800cf98 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800cf90:	683b      	ldr	r3, [r7, #0]
 800cf92:	681a      	ldr	r2, [r3, #0]
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	615a      	str	r2, [r3, #20]
=======
 800bee8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800beec:	2b00      	cmp	r3, #0
 800beee:	d103      	bne.n	800bef8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	681a      	ldr	r2, [r3, #0]
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	615a      	str	r2, [r3, #20]
>>>>>>> ModeSelect_v2
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
<<<<<<< HEAD
 800cf98:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	3740      	adds	r7, #64	; 0x40
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bd80      	pop	{r7, pc}

0800cfa4 <VL53L0X_load_tuning_settings>:
=======
 800bef8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800befc:	4618      	mov	r0, r3
 800befe:	3740      	adds	r7, #64	; 0x40
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}

0800bf04 <VL53L0X_load_tuning_settings>:
>>>>>>> ModeSelect_v2



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
<<<<<<< HEAD
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b088      	sub	sp, #32
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
 800cfac:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cfae:	2300      	movs	r3, #0
 800cfb0:	77fb      	strb	r3, [r7, #31]
=======
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b088      	sub	sp, #32
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
 800bf0c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	77fb      	strb	r3, [r7, #31]
>>>>>>> ModeSelect_v2
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
<<<<<<< HEAD
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800cfb6:	e0c6      	b.n	800d146 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800cfb8:	697b      	ldr	r3, [r7, #20]
 800cfba:	683a      	ldr	r2, [r7, #0]
 800cfbc:	4413      	add	r3, r2
 800cfbe:	781b      	ldrb	r3, [r3, #0]
 800cfc0:	74fb      	strb	r3, [r7, #19]
		Index++;
 800cfc2:	697b      	ldr	r3, [r7, #20]
 800cfc4:	3301      	adds	r3, #1
 800cfc6:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800cfc8:	7cfb      	ldrb	r3, [r7, #19]
 800cfca:	2bff      	cmp	r3, #255	; 0xff
 800cfcc:	f040 808d 	bne.w	800d0ea <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800cfd0:	697b      	ldr	r3, [r7, #20]
 800cfd2:	683a      	ldr	r2, [r7, #0]
 800cfd4:	4413      	add	r3, r2
 800cfd6:	781b      	ldrb	r3, [r3, #0]
 800cfd8:	747b      	strb	r3, [r7, #17]
			Index++;
 800cfda:	697b      	ldr	r3, [r7, #20]
 800cfdc:	3301      	adds	r3, #1
 800cfde:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800cfe0:	7c7b      	ldrb	r3, [r7, #17]
 800cfe2:	2b03      	cmp	r3, #3
 800cfe4:	d87e      	bhi.n	800d0e4 <VL53L0X_load_tuning_settings+0x140>
 800cfe6:	a201      	add	r2, pc, #4	; (adr r2, 800cfec <VL53L0X_load_tuning_settings+0x48>)
 800cfe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfec:	0800cffd 	.word	0x0800cffd
 800cff0:	0800d037 	.word	0x0800d037
 800cff4:	0800d071 	.word	0x0800d071
 800cff8:	0800d0ab 	.word	0x0800d0ab
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800cffc:	697b      	ldr	r3, [r7, #20]
 800cffe:	683a      	ldr	r2, [r7, #0]
 800d000:	4413      	add	r3, r2
 800d002:	781b      	ldrb	r3, [r3, #0]
 800d004:	743b      	strb	r3, [r7, #16]
				Index++;
 800d006:	697b      	ldr	r3, [r7, #20]
 800d008:	3301      	adds	r3, #1
 800d00a:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800d00c:	697b      	ldr	r3, [r7, #20]
 800d00e:	683a      	ldr	r2, [r7, #0]
 800d010:	4413      	add	r3, r2
 800d012:	781b      	ldrb	r3, [r3, #0]
 800d014:	73fb      	strb	r3, [r7, #15]
				Index++;
 800d016:	697b      	ldr	r3, [r7, #20]
 800d018:	3301      	adds	r3, #1
 800d01a:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800d01c:	7c3b      	ldrb	r3, [r7, #16]
 800d01e:	b29b      	uxth	r3, r3
 800d020:	021b      	lsls	r3, r3, #8
 800d022:	b29a      	uxth	r2, r3
 800d024:	7bfb      	ldrb	r3, [r7, #15]
 800d026:	b29b      	uxth	r3, r3
 800d028:	4413      	add	r3, r2
 800d02a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	89ba      	ldrh	r2, [r7, #12]
 800d030:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800d034:	e087      	b.n	800d146 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800d036:	697b      	ldr	r3, [r7, #20]
 800d038:	683a      	ldr	r2, [r7, #0]
 800d03a:	4413      	add	r3, r2
 800d03c:	781b      	ldrb	r3, [r3, #0]
 800d03e:	743b      	strb	r3, [r7, #16]
				Index++;
 800d040:	697b      	ldr	r3, [r7, #20]
 800d042:	3301      	adds	r3, #1
 800d044:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800d046:	697b      	ldr	r3, [r7, #20]
 800d048:	683a      	ldr	r2, [r7, #0]
 800d04a:	4413      	add	r3, r2
 800d04c:	781b      	ldrb	r3, [r3, #0]
 800d04e:	73fb      	strb	r3, [r7, #15]
				Index++;
 800d050:	697b      	ldr	r3, [r7, #20]
 800d052:	3301      	adds	r3, #1
 800d054:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800d056:	7c3b      	ldrb	r3, [r7, #16]
 800d058:	b29b      	uxth	r3, r3
 800d05a:	021b      	lsls	r3, r3, #8
 800d05c:	b29a      	uxth	r2, r3
 800d05e:	7bfb      	ldrb	r3, [r7, #15]
 800d060:	b29b      	uxth	r3, r3
 800d062:	4413      	add	r3, r2
 800d064:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	89ba      	ldrh	r2, [r7, #12]
 800d06a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800d06e:	e06a      	b.n	800d146 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800d070:	697b      	ldr	r3, [r7, #20]
 800d072:	683a      	ldr	r2, [r7, #0]
 800d074:	4413      	add	r3, r2
 800d076:	781b      	ldrb	r3, [r3, #0]
 800d078:	743b      	strb	r3, [r7, #16]
				Index++;
 800d07a:	697b      	ldr	r3, [r7, #20]
 800d07c:	3301      	adds	r3, #1
 800d07e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800d080:	697b      	ldr	r3, [r7, #20]
 800d082:	683a      	ldr	r2, [r7, #0]
 800d084:	4413      	add	r3, r2
 800d086:	781b      	ldrb	r3, [r3, #0]
 800d088:	73fb      	strb	r3, [r7, #15]
				Index++;
 800d08a:	697b      	ldr	r3, [r7, #20]
 800d08c:	3301      	adds	r3, #1
 800d08e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800d090:	7c3b      	ldrb	r3, [r7, #16]
 800d092:	b29b      	uxth	r3, r3
 800d094:	021b      	lsls	r3, r3, #8
 800d096:	b29a      	uxth	r2, r3
 800d098:	7bfb      	ldrb	r3, [r7, #15]
 800d09a:	b29b      	uxth	r3, r3
 800d09c:	4413      	add	r3, r2
 800d09e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	89ba      	ldrh	r2, [r7, #12]
 800d0a4:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800d0a8:	e04d      	b.n	800d146 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800d0aa:	697b      	ldr	r3, [r7, #20]
 800d0ac:	683a      	ldr	r2, [r7, #0]
 800d0ae:	4413      	add	r3, r2
 800d0b0:	781b      	ldrb	r3, [r3, #0]
 800d0b2:	743b      	strb	r3, [r7, #16]
				Index++;
 800d0b4:	697b      	ldr	r3, [r7, #20]
 800d0b6:	3301      	adds	r3, #1
 800d0b8:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800d0ba:	697b      	ldr	r3, [r7, #20]
 800d0bc:	683a      	ldr	r2, [r7, #0]
 800d0be:	4413      	add	r3, r2
 800d0c0:	781b      	ldrb	r3, [r3, #0]
 800d0c2:	73fb      	strb	r3, [r7, #15]
				Index++;
 800d0c4:	697b      	ldr	r3, [r7, #20]
 800d0c6:	3301      	adds	r3, #1
 800d0c8:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800d0ca:	7c3b      	ldrb	r3, [r7, #16]
 800d0cc:	b29b      	uxth	r3, r3
 800d0ce:	021b      	lsls	r3, r3, #8
 800d0d0:	b29a      	uxth	r2, r3
 800d0d2:	7bfb      	ldrb	r3, [r7, #15]
 800d0d4:	b29b      	uxth	r3, r3
 800d0d6:	4413      	add	r3, r2
 800d0d8:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	89ba      	ldrh	r2, [r7, #12]
 800d0de:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800d0e2:	e030      	b.n	800d146 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d0e4:	23fc      	movs	r3, #252	; 0xfc
 800d0e6:	77fb      	strb	r3, [r7, #31]
 800d0e8:	e02d      	b.n	800d146 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800d0ea:	7cfb      	ldrb	r3, [r7, #19]
 800d0ec:	2b04      	cmp	r3, #4
 800d0ee:	d828      	bhi.n	800d142 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800d0f0:	697b      	ldr	r3, [r7, #20]
 800d0f2:	683a      	ldr	r2, [r7, #0]
 800d0f4:	4413      	add	r3, r2
 800d0f6:	781b      	ldrb	r3, [r3, #0]
 800d0f8:	74bb      	strb	r3, [r7, #18]
			Index++;
 800d0fa:	697b      	ldr	r3, [r7, #20]
 800d0fc:	3301      	adds	r3, #1
 800d0fe:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800d100:	2300      	movs	r3, #0
 800d102:	61bb      	str	r3, [r7, #24]
 800d104:	e00f      	b.n	800d126 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800d106:	697b      	ldr	r3, [r7, #20]
 800d108:	683a      	ldr	r2, [r7, #0]
 800d10a:	4413      	add	r3, r2
 800d10c:	7819      	ldrb	r1, [r3, #0]
 800d10e:	f107 0208 	add.w	r2, r7, #8
 800d112:	69bb      	ldr	r3, [r7, #24]
 800d114:	4413      	add	r3, r2
 800d116:	460a      	mov	r2, r1
 800d118:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800d11a:	697b      	ldr	r3, [r7, #20]
 800d11c:	3301      	adds	r3, #1
 800d11e:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800d120:	69bb      	ldr	r3, [r7, #24]
 800d122:	3301      	adds	r3, #1
 800d124:	61bb      	str	r3, [r7, #24]
 800d126:	7cfb      	ldrb	r3, [r7, #19]
 800d128:	69ba      	ldr	r2, [r7, #24]
 800d12a:	429a      	cmp	r2, r3
 800d12c:	dbeb      	blt.n	800d106 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800d12e:	7cfb      	ldrb	r3, [r7, #19]
 800d130:	f107 0208 	add.w	r2, r7, #8
 800d134:	7cb9      	ldrb	r1, [r7, #18]
 800d136:	6878      	ldr	r0, [r7, #4]
 800d138:	f000 fdee 	bl	800dd18 <VL53L0X_WriteMulti>
 800d13c:	4603      	mov	r3, r0
 800d13e:	77fb      	strb	r3, [r7, #31]
 800d140:	e001      	b.n	800d146 <VL53L0X_load_tuning_settings+0x1a2>
=======
 800bf12:	2300      	movs	r3, #0
 800bf14:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800bf16:	e0c6      	b.n	800c0a6 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800bf18:	697b      	ldr	r3, [r7, #20]
 800bf1a:	683a      	ldr	r2, [r7, #0]
 800bf1c:	4413      	add	r3, r2
 800bf1e:	781b      	ldrb	r3, [r3, #0]
 800bf20:	74fb      	strb	r3, [r7, #19]
		Index++;
 800bf22:	697b      	ldr	r3, [r7, #20]
 800bf24:	3301      	adds	r3, #1
 800bf26:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800bf28:	7cfb      	ldrb	r3, [r7, #19]
 800bf2a:	2bff      	cmp	r3, #255	; 0xff
 800bf2c:	f040 808d 	bne.w	800c04a <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800bf30:	697b      	ldr	r3, [r7, #20]
 800bf32:	683a      	ldr	r2, [r7, #0]
 800bf34:	4413      	add	r3, r2
 800bf36:	781b      	ldrb	r3, [r3, #0]
 800bf38:	747b      	strb	r3, [r7, #17]
			Index++;
 800bf3a:	697b      	ldr	r3, [r7, #20]
 800bf3c:	3301      	adds	r3, #1
 800bf3e:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800bf40:	7c7b      	ldrb	r3, [r7, #17]
 800bf42:	2b03      	cmp	r3, #3
 800bf44:	d87e      	bhi.n	800c044 <VL53L0X_load_tuning_settings+0x140>
 800bf46:	a201      	add	r2, pc, #4	; (adr r2, 800bf4c <VL53L0X_load_tuning_settings+0x48>)
 800bf48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf4c:	0800bf5d 	.word	0x0800bf5d
 800bf50:	0800bf97 	.word	0x0800bf97
 800bf54:	0800bfd1 	.word	0x0800bfd1
 800bf58:	0800c00b 	.word	0x0800c00b
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	683a      	ldr	r2, [r7, #0]
 800bf60:	4413      	add	r3, r2
 800bf62:	781b      	ldrb	r3, [r3, #0]
 800bf64:	743b      	strb	r3, [r7, #16]
				Index++;
 800bf66:	697b      	ldr	r3, [r7, #20]
 800bf68:	3301      	adds	r3, #1
 800bf6a:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800bf6c:	697b      	ldr	r3, [r7, #20]
 800bf6e:	683a      	ldr	r2, [r7, #0]
 800bf70:	4413      	add	r3, r2
 800bf72:	781b      	ldrb	r3, [r3, #0]
 800bf74:	73fb      	strb	r3, [r7, #15]
				Index++;
 800bf76:	697b      	ldr	r3, [r7, #20]
 800bf78:	3301      	adds	r3, #1
 800bf7a:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800bf7c:	7c3b      	ldrb	r3, [r7, #16]
 800bf7e:	b29b      	uxth	r3, r3
 800bf80:	021b      	lsls	r3, r3, #8
 800bf82:	b29a      	uxth	r2, r3
 800bf84:	7bfb      	ldrb	r3, [r7, #15]
 800bf86:	b29b      	uxth	r3, r3
 800bf88:	4413      	add	r3, r2
 800bf8a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	89ba      	ldrh	r2, [r7, #12]
 800bf90:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800bf94:	e087      	b.n	800c0a6 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800bf96:	697b      	ldr	r3, [r7, #20]
 800bf98:	683a      	ldr	r2, [r7, #0]
 800bf9a:	4413      	add	r3, r2
 800bf9c:	781b      	ldrb	r3, [r3, #0]
 800bf9e:	743b      	strb	r3, [r7, #16]
				Index++;
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	3301      	adds	r3, #1
 800bfa4:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800bfa6:	697b      	ldr	r3, [r7, #20]
 800bfa8:	683a      	ldr	r2, [r7, #0]
 800bfaa:	4413      	add	r3, r2
 800bfac:	781b      	ldrb	r3, [r3, #0]
 800bfae:	73fb      	strb	r3, [r7, #15]
				Index++;
 800bfb0:	697b      	ldr	r3, [r7, #20]
 800bfb2:	3301      	adds	r3, #1
 800bfb4:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800bfb6:	7c3b      	ldrb	r3, [r7, #16]
 800bfb8:	b29b      	uxth	r3, r3
 800bfba:	021b      	lsls	r3, r3, #8
 800bfbc:	b29a      	uxth	r2, r3
 800bfbe:	7bfb      	ldrb	r3, [r7, #15]
 800bfc0:	b29b      	uxth	r3, r3
 800bfc2:	4413      	add	r3, r2
 800bfc4:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	89ba      	ldrh	r2, [r7, #12]
 800bfca:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800bfce:	e06a      	b.n	800c0a6 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800bfd0:	697b      	ldr	r3, [r7, #20]
 800bfd2:	683a      	ldr	r2, [r7, #0]
 800bfd4:	4413      	add	r3, r2
 800bfd6:	781b      	ldrb	r3, [r3, #0]
 800bfd8:	743b      	strb	r3, [r7, #16]
				Index++;
 800bfda:	697b      	ldr	r3, [r7, #20]
 800bfdc:	3301      	adds	r3, #1
 800bfde:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800bfe0:	697b      	ldr	r3, [r7, #20]
 800bfe2:	683a      	ldr	r2, [r7, #0]
 800bfe4:	4413      	add	r3, r2
 800bfe6:	781b      	ldrb	r3, [r3, #0]
 800bfe8:	73fb      	strb	r3, [r7, #15]
				Index++;
 800bfea:	697b      	ldr	r3, [r7, #20]
 800bfec:	3301      	adds	r3, #1
 800bfee:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800bff0:	7c3b      	ldrb	r3, [r7, #16]
 800bff2:	b29b      	uxth	r3, r3
 800bff4:	021b      	lsls	r3, r3, #8
 800bff6:	b29a      	uxth	r2, r3
 800bff8:	7bfb      	ldrb	r3, [r7, #15]
 800bffa:	b29b      	uxth	r3, r3
 800bffc:	4413      	add	r3, r2
 800bffe:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	89ba      	ldrh	r2, [r7, #12]
 800c004:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800c008:	e04d      	b.n	800c0a6 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800c00a:	697b      	ldr	r3, [r7, #20]
 800c00c:	683a      	ldr	r2, [r7, #0]
 800c00e:	4413      	add	r3, r2
 800c010:	781b      	ldrb	r3, [r3, #0]
 800c012:	743b      	strb	r3, [r7, #16]
				Index++;
 800c014:	697b      	ldr	r3, [r7, #20]
 800c016:	3301      	adds	r3, #1
 800c018:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800c01a:	697b      	ldr	r3, [r7, #20]
 800c01c:	683a      	ldr	r2, [r7, #0]
 800c01e:	4413      	add	r3, r2
 800c020:	781b      	ldrb	r3, [r3, #0]
 800c022:	73fb      	strb	r3, [r7, #15]
				Index++;
 800c024:	697b      	ldr	r3, [r7, #20]
 800c026:	3301      	adds	r3, #1
 800c028:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800c02a:	7c3b      	ldrb	r3, [r7, #16]
 800c02c:	b29b      	uxth	r3, r3
 800c02e:	021b      	lsls	r3, r3, #8
 800c030:	b29a      	uxth	r2, r3
 800c032:	7bfb      	ldrb	r3, [r7, #15]
 800c034:	b29b      	uxth	r3, r3
 800c036:	4413      	add	r3, r2
 800c038:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	89ba      	ldrh	r2, [r7, #12]
 800c03e:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800c042:	e030      	b.n	800c0a6 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c044:	23fc      	movs	r3, #252	; 0xfc
 800c046:	77fb      	strb	r3, [r7, #31]
 800c048:	e02d      	b.n	800c0a6 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800c04a:	7cfb      	ldrb	r3, [r7, #19]
 800c04c:	2b04      	cmp	r3, #4
 800c04e:	d828      	bhi.n	800c0a2 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800c050:	697b      	ldr	r3, [r7, #20]
 800c052:	683a      	ldr	r2, [r7, #0]
 800c054:	4413      	add	r3, r2
 800c056:	781b      	ldrb	r3, [r3, #0]
 800c058:	74bb      	strb	r3, [r7, #18]
			Index++;
 800c05a:	697b      	ldr	r3, [r7, #20]
 800c05c:	3301      	adds	r3, #1
 800c05e:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800c060:	2300      	movs	r3, #0
 800c062:	61bb      	str	r3, [r7, #24]
 800c064:	e00f      	b.n	800c086 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800c066:	697b      	ldr	r3, [r7, #20]
 800c068:	683a      	ldr	r2, [r7, #0]
 800c06a:	4413      	add	r3, r2
 800c06c:	7819      	ldrb	r1, [r3, #0]
 800c06e:	f107 0208 	add.w	r2, r7, #8
 800c072:	69bb      	ldr	r3, [r7, #24]
 800c074:	4413      	add	r3, r2
 800c076:	460a      	mov	r2, r1
 800c078:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800c07a:	697b      	ldr	r3, [r7, #20]
 800c07c:	3301      	adds	r3, #1
 800c07e:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800c080:	69bb      	ldr	r3, [r7, #24]
 800c082:	3301      	adds	r3, #1
 800c084:	61bb      	str	r3, [r7, #24]
 800c086:	7cfb      	ldrb	r3, [r7, #19]
 800c088:	69ba      	ldr	r2, [r7, #24]
 800c08a:	429a      	cmp	r2, r3
 800c08c:	dbeb      	blt.n	800c066 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800c08e:	7cfb      	ldrb	r3, [r7, #19]
 800c090:	f107 0208 	add.w	r2, r7, #8
 800c094:	7cb9      	ldrb	r1, [r7, #18]
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	f000 fdee 	bl	800cc78 <VL53L0X_WriteMulti>
 800c09c:	4603      	mov	r3, r0
 800c09e:	77fb      	strb	r3, [r7, #31]
 800c0a0:	e001      	b.n	800c0a6 <VL53L0X_load_tuning_settings+0x1a2>
>>>>>>> ModeSelect_v2
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
<<<<<<< HEAD
 800d142:	23fc      	movs	r3, #252	; 0xfc
 800d144:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800d146:	697b      	ldr	r3, [r7, #20]
 800d148:	683a      	ldr	r2, [r7, #0]
 800d14a:	4413      	add	r3, r2
 800d14c:	781b      	ldrb	r3, [r3, #0]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d004      	beq.n	800d15c <VL53L0X_load_tuning_settings+0x1b8>
 800d152:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d156:	2b00      	cmp	r3, #0
 800d158:	f43f af2e 	beq.w	800cfb8 <VL53L0X_load_tuning_settings+0x14>
=======
 800c0a2:	23fc      	movs	r3, #252	; 0xfc
 800c0a4:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800c0a6:	697b      	ldr	r3, [r7, #20]
 800c0a8:	683a      	ldr	r2, [r7, #0]
 800c0aa:	4413      	add	r3, r2
 800c0ac:	781b      	ldrb	r3, [r3, #0]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d004      	beq.n	800c0bc <VL53L0X_load_tuning_settings+0x1b8>
 800c0b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	f43f af2e 	beq.w	800bf18 <VL53L0X_load_tuning_settings+0x14>
>>>>>>> ModeSelect_v2
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
<<<<<<< HEAD
 800d15c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d160:	4618      	mov	r0, r3
 800d162:	3720      	adds	r7, #32
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}

0800d168 <VL53L0X_get_total_xtalk_rate>:
=======
 800c0bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	3720      	adds	r7, #32
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd80      	pop	{r7, pc}

0800c0c8 <VL53L0X_get_total_xtalk_rate>:
>>>>>>> ModeSelect_v2

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
<<<<<<< HEAD
 800d168:	b580      	push	{r7, lr}
 800d16a:	b088      	sub	sp, #32
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	60f8      	str	r0, [r7, #12]
 800d170:	60b9      	str	r1, [r7, #8]
 800d172:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d174:	2300      	movs	r3, #0
 800d176:	77fb      	strb	r3, [r7, #31]
=======
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b088      	sub	sp, #32
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	60f8      	str	r0, [r7, #12]
 800c0d0:	60b9      	str	r1, [r7, #8]
 800c0d2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	77fb      	strb	r3, [r7, #31]
>>>>>>> ModeSelect_v2

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
<<<<<<< HEAD
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2200      	movs	r2, #0
 800d17c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800d17e:	f107 0313 	add.w	r3, r7, #19
 800d182:	4619      	mov	r1, r3
 800d184:	68f8      	ldr	r0, [r7, #12]
 800d186:	f7fc fd21 	bl	8009bcc <VL53L0X_GetXTalkCompensationEnable>
 800d18a:	4603      	mov	r3, r0
 800d18c:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800d18e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d111      	bne.n	800d1ba <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800d196:	7cfb      	ldrb	r3, [r7, #19]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d00e      	beq.n	800d1ba <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	6a1b      	ldr	r3, [r3, #32]
 800d1a0:	61bb      	str	r3, [r7, #24]
=======
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2200      	movs	r2, #0
 800c0dc:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800c0de:	f107 0313 	add.w	r3, r7, #19
 800c0e2:	4619      	mov	r1, r3
 800c0e4:	68f8      	ldr	r0, [r7, #12]
 800c0e6:	f7fc fd21 	bl	8008b2c <VL53L0X_GetXTalkCompensationEnable>
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800c0ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d111      	bne.n	800c11a <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800c0f6:	7cfb      	ldrb	r3, [r7, #19]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d00e      	beq.n	800c11a <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	6a1b      	ldr	r3, [r3, #32]
 800c100:	61bb      	str	r3, [r7, #24]
>>>>>>> ModeSelect_v2
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
<<<<<<< HEAD
 800d1a2:	68bb      	ldr	r3, [r7, #8]
 800d1a4:	8a9b      	ldrh	r3, [r3, #20]
 800d1a6:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800d1a8:	69bb      	ldr	r3, [r7, #24]
 800d1aa:	fb02 f303 	mul.w	r3, r2, r3
 800d1ae:	617b      	str	r3, [r7, #20]
=======
 800c102:	68bb      	ldr	r3, [r7, #8]
 800c104:	8a9b      	ldrh	r3, [r3, #20]
 800c106:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800c108:	69bb      	ldr	r3, [r7, #24]
 800c10a:	fb02 f303 	mul.w	r3, r2, r3
 800c10e:	617b      	str	r3, [r7, #20]
>>>>>>> ModeSelect_v2
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
<<<<<<< HEAD
 800d1b0:	697b      	ldr	r3, [r7, #20]
 800d1b2:	3380      	adds	r3, #128	; 0x80
 800d1b4:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	601a      	str	r2, [r3, #0]
=======
 800c110:	697b      	ldr	r3, [r7, #20]
 800c112:	3380      	adds	r3, #128	; 0x80
 800c114:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	601a      	str	r2, [r3, #0]
>>>>>>> ModeSelect_v2
		}
	}

	return Status;
<<<<<<< HEAD
 800d1ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d1be:	4618      	mov	r0, r3
 800d1c0:	3720      	adds	r7, #32
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	bd80      	pop	{r7, pc}

0800d1c6 <VL53L0X_get_total_signal_rate>:
=======
 800c11a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c11e:	4618      	mov	r0, r3
 800c120:	3720      	adds	r7, #32
 800c122:	46bd      	mov	sp, r7
 800c124:	bd80      	pop	{r7, pc}

0800c126 <VL53L0X_get_total_signal_rate>:
>>>>>>> ModeSelect_v2

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
<<<<<<< HEAD
 800d1c6:	b580      	push	{r7, lr}
 800d1c8:	b086      	sub	sp, #24
 800d1ca:	af00      	add	r7, sp, #0
 800d1cc:	60f8      	str	r0, [r7, #12]
 800d1ce:	60b9      	str	r1, [r7, #8]
 800d1d0:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	75fb      	strb	r3, [r7, #23]
=======
 800c126:	b580      	push	{r7, lr}
 800c128:	b086      	sub	sp, #24
 800c12a:	af00      	add	r7, sp, #0
 800c12c:	60f8      	str	r0, [r7, #12]
 800c12e:	60b9      	str	r1, [r7, #8]
 800c130:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c132:	2300      	movs	r3, #0
 800c134:	75fb      	strb	r3, [r7, #23]
>>>>>>> ModeSelect_v2
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
<<<<<<< HEAD
 800d1d6:	68bb      	ldr	r3, [r7, #8]
 800d1d8:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800d1de:	f107 0310 	add.w	r3, r7, #16
 800d1e2:	461a      	mov	r2, r3
 800d1e4:	68b9      	ldr	r1, [r7, #8]
 800d1e6:	68f8      	ldr	r0, [r7, #12]
 800d1e8:	f7ff ffbe 	bl	800d168 <VL53L0X_get_total_xtalk_rate>
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800d1f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d105      	bne.n	800d204 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681a      	ldr	r2, [r3, #0]
 800d1fc:	693b      	ldr	r3, [r7, #16]
 800d1fe:	441a      	add	r2, r3
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	601a      	str	r2, [r3, #0]

	return Status;
 800d204:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d208:	4618      	mov	r0, r3
 800d20a:	3718      	adds	r7, #24
 800d20c:	46bd      	mov	sp, r7
 800d20e:	bd80      	pop	{r7, pc}

0800d210 <VL53L0X_calc_dmax>:
=======
 800c136:	68bb      	ldr	r3, [r7, #8]
 800c138:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800c13e:	f107 0310 	add.w	r3, r7, #16
 800c142:	461a      	mov	r2, r3
 800c144:	68b9      	ldr	r1, [r7, #8]
 800c146:	68f8      	ldr	r0, [r7, #12]
 800c148:	f7ff ffbe 	bl	800c0c8 <VL53L0X_get_total_xtalk_rate>
 800c14c:	4603      	mov	r3, r0
 800c14e:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800c150:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d105      	bne.n	800c164 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681a      	ldr	r2, [r3, #0]
 800c15c:	693b      	ldr	r3, [r7, #16]
 800c15e:	441a      	add	r2, r3
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	601a      	str	r2, [r3, #0]

	return Status;
 800c164:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c168:	4618      	mov	r0, r3
 800c16a:	3718      	adds	r7, #24
 800c16c:	46bd      	mov	sp, r7
 800c16e:	bd80      	pop	{r7, pc}

0800c170 <VL53L0X_calc_dmax>:
>>>>>>> ModeSelect_v2
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
<<<<<<< HEAD
 800d210:	b580      	push	{r7, lr}
 800d212:	b09a      	sub	sp, #104	; 0x68
 800d214:	af00      	add	r7, sp, #0
 800d216:	60f8      	str	r0, [r7, #12]
 800d218:	60b9      	str	r1, [r7, #8]
 800d21a:	607a      	str	r2, [r7, #4]
 800d21c:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800d21e:	2312      	movs	r3, #18
 800d220:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800d222:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d226:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800d228:	2342      	movs	r3, #66	; 0x42
 800d22a:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800d22c:	2306      	movs	r3, #6
 800d22e:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800d230:	2307      	movs	r3, #7
 800d232:	647b      	str	r3, [r7, #68]	; 0x44
=======
 800c170:	b580      	push	{r7, lr}
 800c172:	b09a      	sub	sp, #104	; 0x68
 800c174:	af00      	add	r7, sp, #0
 800c176:	60f8      	str	r0, [r7, #12]
 800c178:	60b9      	str	r1, [r7, #8]
 800c17a:	607a      	str	r2, [r7, #4]
 800c17c:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800c17e:	2312      	movs	r3, #18
 800c180:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800c182:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c186:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800c188:	2342      	movs	r3, #66	; 0x42
 800c18a:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800c18c:	2306      	movs	r3, #6
 800c18e:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800c190:	2307      	movs	r3, #7
 800c192:	647b      	str	r3, [r7, #68]	; 0x44
>>>>>>> ModeSelect_v2
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
<<<<<<< HEAD
 800d234:	2300      	movs	r3, #0
 800d236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
=======
 800c194:	2300      	movs	r3, #0
 800c196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
>>>>>>> ModeSelect_v2

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
<<<<<<< HEAD
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800d240:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800d248:	63bb      	str	r3, [r7, #56]	; 0x38
=======
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800c1a0:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800c1a8:	63bb      	str	r3, [r7, #56]	; 0x38
>>>>>>> ModeSelect_v2
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
<<<<<<< HEAD
 800d24a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d24c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d24e:	fb02 f303 	mul.w	r3, r2, r3
 800d252:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800d254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d256:	3380      	adds	r3, #128	; 0x80
 800d258:	0a1b      	lsrs	r3, r3, #8
 800d25a:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800d25c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d25e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d260:	fb02 f303 	mul.w	r3, r2, r3
 800d264:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800d266:	2300      	movs	r3, #0
 800d268:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d01a      	beq.n	800d2a6 <VL53L0X_calc_dmax+0x96>
=======
 800c1aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1ae:	fb02 f303 	mul.w	r3, r2, r3
 800c1b2:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800c1b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1b6:	3380      	adds	r3, #128	; 0x80
 800c1b8:	0a1b      	lsrs	r3, r3, #8
 800c1ba:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800c1bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c1c0:	fb02 f303 	mul.w	r3, r2, r3
 800c1c4:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d01a      	beq.n	800c206 <VL53L0X_calc_dmax+0x96>
>>>>>>> ModeSelect_v2

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
<<<<<<< HEAD
 800d270:	68bb      	ldr	r3, [r7, #8]
 800d272:	029b      	lsls	r3, r3, #10
 800d274:	633b      	str	r3, [r7, #48]	; 0x30
=======
 800c1d0:	68bb      	ldr	r3, [r7, #8]
 800c1d2:	029b      	lsls	r3, r3, #10
 800c1d4:	633b      	str	r3, [r7, #48]	; 0x30
>>>>>>> ModeSelect_v2

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
<<<<<<< HEAD
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800d27a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d27c:	4413      	add	r3, r2
 800d27e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800d280:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	fbb2 f3f3 	udiv	r3, r2, r3
 800d288:	667b      	str	r3, [r7, #100]	; 0x64
=======
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800c1da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1dc:	4413      	add	r3, r2
 800c1de:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800c1e0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1e8:	667b      	str	r3, [r7, #100]	; 0x64
>>>>>>> ModeSelect_v2

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
<<<<<<< HEAD
 800d28a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d28c:	4613      	mov	r3, r2
 800d28e:	005b      	lsls	r3, r3, #1
 800d290:	4413      	add	r3, r2
 800d292:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800d294:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d296:	fb03 f303 	mul.w	r3, r3, r3
 800d29a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800d29c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d29e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d2a2:	0c1b      	lsrs	r3, r3, #16
 800d2a4:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800d2a6:	683b      	ldr	r3, [r7, #0]
 800d2a8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d2aa:	fb02 f303 	mul.w	r3, r2, r3
 800d2ae:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800d2b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2b2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d2b6:	0c1b      	lsrs	r3, r3, #16
 800d2b8:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800d2ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2bc:	fb03 f303 	mul.w	r3, r3, r3
 800d2c0:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 800c1ea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c1ec:	4613      	mov	r3, r2
 800c1ee:	005b      	lsls	r3, r3, #1
 800c1f0:	4413      	add	r3, r2
 800c1f2:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800c1f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c1f6:	fb03 f303 	mul.w	r3, r3, r3
 800c1fa:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800c1fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c1fe:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c202:	0c1b      	lsrs	r3, r3, #16
 800c204:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c20a:	fb02 f303 	mul.w	r3, r2, r3
 800c20e:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800c210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c212:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c216:	0c1b      	lsrs	r3, r3, #16
 800c218:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800c21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c21c:	fb03 f303 	mul.w	r3, r3, r3
 800c220:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> ModeSelect_v2
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
<<<<<<< HEAD
 800d2c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d2c4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d2c8:	0c1b      	lsrs	r3, r3, #16
 800d2ca:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800d2cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d2ce:	085a      	lsrs	r2, r3, #1
 800d2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2d2:	441a      	add	r2, r3
 800d2d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d2d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2da:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800d2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d2e0:	fb02 f303 	mul.w	r3, r2, r3
 800d2e4:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800d2e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d2ec:	d302      	bcc.n	800d2f4 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800d2ee:	4b54      	ldr	r3, [pc, #336]	; (800d440 <VL53L0X_calc_dmax+0x230>)
 800d2f0:	663b      	str	r3, [r7, #96]	; 0x60
 800d2f2:	e015      	b.n	800d320 <VL53L0X_calc_dmax+0x110>
=======
 800c222:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c224:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c228:	0c1b      	lsrs	r3, r3, #16
 800c22a:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800c22c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c22e:	085a      	lsrs	r2, r3, #1
 800c230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c232:	441a      	add	r2, r3
 800c234:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c236:	fbb2 f3f3 	udiv	r3, r2, r3
 800c23a:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800c23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c23e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c240:	fb02 f303 	mul.w	r3, r2, r3
 800c244:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800c246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c24c:	d302      	bcc.n	800c254 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800c24e:	4b54      	ldr	r3, [pc, #336]	; (800c3a0 <VL53L0X_calc_dmax+0x230>)
 800c250:	663b      	str	r3, [r7, #96]	; 0x60
 800c252:	e015      	b.n	800c280 <VL53L0X_calc_dmax+0x110>
>>>>>>> ModeSelect_v2

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
<<<<<<< HEAD
 800d2f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d2f6:	085a      	lsrs	r2, r3, #1
 800d2f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d2fa:	441a      	add	r2, r3
 800d2fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d2fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800d302:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800d304:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d306:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d308:	fb02 f303 	mul.w	r3, r2, r3
 800d30c:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800d30e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d310:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d314:	0c1b      	lsrs	r3, r3, #16
 800d316:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800d318:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d31a:	fb03 f303 	mul.w	r3, r3, r3
 800d31e:	663b      	str	r3, [r7, #96]	; 0x60
=======
 800c254:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c256:	085a      	lsrs	r2, r3, #1
 800c258:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c25a:	441a      	add	r2, r3
 800c25c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c25e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c262:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800c264:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c266:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c268:	fb02 f303 	mul.w	r3, r2, r3
 800c26c:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800c26e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c270:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c274:	0c1b      	lsrs	r3, r3, #16
 800c276:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800c278:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c27a:	fb03 f303 	mul.w	r3, r3, r3
 800c27e:	663b      	str	r3, [r7, #96]	; 0x60
>>>>>>> ModeSelect_v2

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
<<<<<<< HEAD
 800d320:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d322:	039b      	lsls	r3, r3, #14
 800d324:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d328:	4a46      	ldr	r2, [pc, #280]	; (800d444 <VL53L0X_calc_dmax+0x234>)
 800d32a:	fba2 2303 	umull	r2, r3, r2, r3
 800d32e:	099b      	lsrs	r3, r3, #6
 800d330:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800d332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d334:	fb03 f303 	mul.w	r3, r3, r3
 800d338:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800d33a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d33c:	fb03 f303 	mul.w	r3, r3, r3
 800d340:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800d342:	6a3b      	ldr	r3, [r7, #32]
 800d344:	3308      	adds	r3, #8
 800d346:	091b      	lsrs	r3, r3, #4
 800d348:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800d34a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d34c:	6a3b      	ldr	r3, [r7, #32]
 800d34e:	1ad3      	subs	r3, r2, r3
 800d350:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800d352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d354:	4613      	mov	r3, r2
 800d356:	005b      	lsls	r3, r3, #1
 800d358:	4413      	add	r3, r2
 800d35a:	011b      	lsls	r3, r3, #4
 800d35c:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800d35e:	69fb      	ldr	r3, [r7, #28]
 800d360:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800d364:	0b9b      	lsrs	r3, r3, #14
 800d366:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800d368:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d36a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d36c:	4413      	add	r3, r2
 800d36e:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800d370:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d372:	085b      	lsrs	r3, r3, #1
 800d374:	69ba      	ldr	r2, [r7, #24]
 800d376:	4413      	add	r3, r2
 800d378:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800d37a:	69ba      	ldr	r2, [r7, #24]
 800d37c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d37e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d382:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800d384:	69bb      	ldr	r3, [r7, #24]
 800d386:	039b      	lsls	r3, r3, #14
 800d388:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800d38a:	69fb      	ldr	r3, [r7, #28]
 800d38c:	085b      	lsrs	r3, r3, #1
 800d38e:	69ba      	ldr	r2, [r7, #24]
 800d390:	4413      	add	r3, r2
 800d392:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800d394:	69ba      	ldr	r2, [r7, #24]
 800d396:	69fb      	ldr	r3, [r7, #28]
 800d398:	fbb2 f3f3 	udiv	r3, r2, r3
 800d39c:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800d39e:	69bb      	ldr	r3, [r7, #24]
 800d3a0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d3a2:	fb02 f303 	mul.w	r3, r2, r3
 800d3a6:	61bb      	str	r3, [r7, #24]
=======
 800c280:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c282:	039b      	lsls	r3, r3, #14
 800c284:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c288:	4a46      	ldr	r2, [pc, #280]	; (800c3a4 <VL53L0X_calc_dmax+0x234>)
 800c28a:	fba2 2303 	umull	r2, r3, r2, r3
 800c28e:	099b      	lsrs	r3, r3, #6
 800c290:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800c292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c294:	fb03 f303 	mul.w	r3, r3, r3
 800c298:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800c29a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c29c:	fb03 f303 	mul.w	r3, r3, r3
 800c2a0:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800c2a2:	6a3b      	ldr	r3, [r7, #32]
 800c2a4:	3308      	adds	r3, #8
 800c2a6:	091b      	lsrs	r3, r3, #4
 800c2a8:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800c2aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2ac:	6a3b      	ldr	r3, [r7, #32]
 800c2ae:	1ad3      	subs	r3, r2, r3
 800c2b0:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800c2b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2b4:	4613      	mov	r3, r2
 800c2b6:	005b      	lsls	r3, r3, #1
 800c2b8:	4413      	add	r3, r2
 800c2ba:	011b      	lsls	r3, r3, #4
 800c2bc:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800c2be:	69fb      	ldr	r3, [r7, #28]
 800c2c0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800c2c4:	0b9b      	lsrs	r3, r3, #14
 800c2c6:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800c2c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c2ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c2cc:	4413      	add	r3, r2
 800c2ce:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800c2d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c2d2:	085b      	lsrs	r3, r3, #1
 800c2d4:	69ba      	ldr	r2, [r7, #24]
 800c2d6:	4413      	add	r3, r2
 800c2d8:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800c2da:	69ba      	ldr	r2, [r7, #24]
 800c2dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c2de:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2e2:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800c2e4:	69bb      	ldr	r3, [r7, #24]
 800c2e6:	039b      	lsls	r3, r3, #14
 800c2e8:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800c2ea:	69fb      	ldr	r3, [r7, #28]
 800c2ec:	085b      	lsrs	r3, r3, #1
 800c2ee:	69ba      	ldr	r2, [r7, #24]
 800c2f0:	4413      	add	r3, r2
 800c2f2:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800c2f4:	69ba      	ldr	r2, [r7, #24]
 800c2f6:	69fb      	ldr	r3, [r7, #28]
 800c2f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2fc:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800c2fe:	69bb      	ldr	r3, [r7, #24]
 800c300:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c302:	fb02 f303 	mul.w	r3, r2, r3
 800c306:	61bb      	str	r3, [r7, #24]
>>>>>>> ModeSelect_v2
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
<<<<<<< HEAD
 800d3a8:	69bb      	ldr	r3, [r7, #24]
 800d3aa:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d3ae:	4a25      	ldr	r2, [pc, #148]	; (800d444 <VL53L0X_calc_dmax+0x234>)
 800d3b0:	fba2 2303 	umull	r2, r3, r2, r3
 800d3b4:	099b      	lsrs	r3, r3, #6
 800d3b6:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800d3b8:	69bb      	ldr	r3, [r7, #24]
 800d3ba:	011b      	lsls	r3, r3, #4
 800d3bc:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800d3be:	69bb      	ldr	r3, [r7, #24]
 800d3c0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d3c4:	4a1f      	ldr	r2, [pc, #124]	; (800d444 <VL53L0X_calc_dmax+0x234>)
 800d3c6:	fba2 2303 	umull	r2, r3, r2, r3
 800d3ca:	099b      	lsrs	r3, r3, #6
 800d3cc:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800d3ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3d0:	3380      	adds	r3, #128	; 0x80
 800d3d2:	0a1b      	lsrs	r3, r3, #8
 800d3d4:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800d3d6:	697b      	ldr	r3, [r7, #20]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d008      	beq.n	800d3ee <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800d3dc:	697b      	ldr	r3, [r7, #20]
 800d3de:	085a      	lsrs	r2, r3, #1
 800d3e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3e2:	441a      	add	r2, r3
 800d3e4:	697b      	ldr	r3, [r7, #20]
 800d3e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3ea:	65bb      	str	r3, [r7, #88]	; 0x58
 800d3ec:	e001      	b.n	800d3f2 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800d3f2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d3f4:	f7fe f9ba 	bl	800b76c <VL53L0X_isqrt>
 800d3f8:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800d3fa:	69bb      	ldr	r3, [r7, #24]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d008      	beq.n	800d412 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800d400:	69bb      	ldr	r3, [r7, #24]
 800d402:	085a      	lsrs	r2, r3, #1
 800d404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d406:	441a      	add	r2, r3
 800d408:	69bb      	ldr	r3, [r7, #24]
 800d40a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d40e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d410:	e001      	b.n	800d416 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800d412:	2300      	movs	r3, #0
 800d414:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800d416:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800d418:	f7fe f9a8 	bl	800b76c <VL53L0X_isqrt>
 800d41c:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800d41e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d420:	693a      	ldr	r2, [r7, #16]
 800d422:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800d424:	693a      	ldr	r2, [r7, #16]
 800d426:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d428:	429a      	cmp	r2, r3
 800d42a:	d902      	bls.n	800d432 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800d42c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d42e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d430:	601a      	str	r2, [r3, #0]
=======
 800c308:	69bb      	ldr	r3, [r7, #24]
 800c30a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c30e:	4a25      	ldr	r2, [pc, #148]	; (800c3a4 <VL53L0X_calc_dmax+0x234>)
 800c310:	fba2 2303 	umull	r2, r3, r2, r3
 800c314:	099b      	lsrs	r3, r3, #6
 800c316:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800c318:	69bb      	ldr	r3, [r7, #24]
 800c31a:	011b      	lsls	r3, r3, #4
 800c31c:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800c31e:	69bb      	ldr	r3, [r7, #24]
 800c320:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c324:	4a1f      	ldr	r2, [pc, #124]	; (800c3a4 <VL53L0X_calc_dmax+0x234>)
 800c326:	fba2 2303 	umull	r2, r3, r2, r3
 800c32a:	099b      	lsrs	r3, r3, #6
 800c32c:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800c32e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c330:	3380      	adds	r3, #128	; 0x80
 800c332:	0a1b      	lsrs	r3, r3, #8
 800c334:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800c336:	697b      	ldr	r3, [r7, #20]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d008      	beq.n	800c34e <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800c33c:	697b      	ldr	r3, [r7, #20]
 800c33e:	085a      	lsrs	r2, r3, #1
 800c340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c342:	441a      	add	r2, r3
 800c344:	697b      	ldr	r3, [r7, #20]
 800c346:	fbb2 f3f3 	udiv	r3, r2, r3
 800c34a:	65bb      	str	r3, [r7, #88]	; 0x58
 800c34c:	e001      	b.n	800c352 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800c34e:	2300      	movs	r3, #0
 800c350:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800c352:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800c354:	f7fe f9ba 	bl	800a6cc <VL53L0X_isqrt>
 800c358:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800c35a:	69bb      	ldr	r3, [r7, #24]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d008      	beq.n	800c372 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800c360:	69bb      	ldr	r3, [r7, #24]
 800c362:	085a      	lsrs	r2, r3, #1
 800c364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c366:	441a      	add	r2, r3
 800c368:	69bb      	ldr	r3, [r7, #24]
 800c36a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c36e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c370:	e001      	b.n	800c376 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800c372:	2300      	movs	r3, #0
 800c374:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800c376:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800c378:	f7fe f9a8 	bl	800a6cc <VL53L0X_isqrt>
 800c37c:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800c37e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c380:	693a      	ldr	r2, [r7, #16]
 800c382:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800c384:	693a      	ldr	r2, [r7, #16]
 800c386:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c388:	429a      	cmp	r2, r3
 800c38a:	d902      	bls.n	800c392 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800c38c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c38e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c390:	601a      	str	r2, [r3, #0]
>>>>>>> ModeSelect_v2

	LOG_FUNCTION_END(Status);

	return Status;
<<<<<<< HEAD
 800d432:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800d436:	4618      	mov	r0, r3
 800d438:	3768      	adds	r7, #104	; 0x68
 800d43a:	46bd      	mov	sp, r7
 800d43c:	bd80      	pop	{r7, pc}
 800d43e:	bf00      	nop
 800d440:	fff00000 	.word	0xfff00000
 800d444:	10624dd3 	.word	0x10624dd3

0800d448 <VL53L0X_calc_sigma_estimate>:
=======
 800c392:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800c396:	4618      	mov	r0, r3
 800c398:	3768      	adds	r7, #104	; 0x68
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd80      	pop	{r7, pc}
 800c39e:	bf00      	nop
 800c3a0:	fff00000 	.word	0xfff00000
 800c3a4:	10624dd3 	.word	0x10624dd3

0800c3a8 <VL53L0X_calc_sigma_estimate>:
>>>>>>> ModeSelect_v2

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
<<<<<<< HEAD
 800d448:	b580      	push	{r7, lr}
 800d44a:	b0b4      	sub	sp, #208	; 0xd0
 800d44c:	af04      	add	r7, sp, #16
 800d44e:	60f8      	str	r0, [r7, #12]
 800d450:	60b9      	str	r1, [r7, #8]
 800d452:	607a      	str	r2, [r7, #4]
 800d454:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800d456:	f44f 7348 	mov.w	r3, #800	; 0x320
 800d45a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800d45e:	f44f 7316 	mov.w	r3, #600	; 0x258
 800d462:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800d466:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800d46a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800d46e:	f241 235c 	movw	r3, #4700	; 0x125c
 800d472:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800d476:	4b9e      	ldr	r3, [pc, #632]	; (800d6f0 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800d478:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800d47c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800d480:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800d482:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800d486:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d48a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d48e:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800d490:	4b98      	ldr	r3, [pc, #608]	; (800d6f4 <VL53L0X_calc_sigma_estimate+0x2ac>)
 800d492:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800d494:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d498:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800d49a:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800d49e:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800d4a0:	f240 6377 	movw	r3, #1655	; 0x677
 800d4a4:	66bb      	str	r3, [r7, #104]	; 0x68
=======
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b0b4      	sub	sp, #208	; 0xd0
 800c3ac:	af04      	add	r7, sp, #16
 800c3ae:	60f8      	str	r0, [r7, #12]
 800c3b0:	60b9      	str	r1, [r7, #8]
 800c3b2:	607a      	str	r2, [r7, #4]
 800c3b4:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800c3b6:	f44f 7348 	mov.w	r3, #800	; 0x320
 800c3ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800c3be:	f44f 7316 	mov.w	r3, #600	; 0x258
 800c3c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800c3c6:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800c3ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800c3ce:	f241 235c 	movw	r3, #4700	; 0x125c
 800c3d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800c3d6:	4b9e      	ldr	r3, [pc, #632]	; (800c650 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800c3d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800c3dc:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800c3e0:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800c3e2:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800c3e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c3ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3ee:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800c3f0:	4b98      	ldr	r3, [pc, #608]	; (800c654 <VL53L0X_calc_sigma_estimate+0x2ac>)
 800c3f2:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800c3f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c3f8:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800c3fa:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800c3fe:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800c400:	f240 6377 	movw	r3, #1655	; 0x677
 800c404:	66bb      	str	r3, [r7, #104]	; 0x68
>>>>>>> ModeSelect_v2
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
<<<<<<< HEAD
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
=======
 800c406:	2300      	movs	r3, #0
 800c408:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
>>>>>>> ModeSelect_v2
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
<<<<<<< HEAD
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	6a1b      	ldr	r3, [r3, #32]
 800d4b0:	617b      	str	r3, [r7, #20]
=======
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	6a1b      	ldr	r3, [r3, #32]
 800c410:	617b      	str	r3, [r7, #20]
>>>>>>> ModeSelect_v2
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
<<<<<<< HEAD
 800d4b2:	68bb      	ldr	r3, [r7, #8]
 800d4b4:	691b      	ldr	r3, [r3, #16]
 800d4b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d4ba:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800d4be:	0c1b      	lsrs	r3, r3, #16
 800d4c0:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800d4c2:	68bb      	ldr	r3, [r7, #8]
 800d4c4:	68db      	ldr	r3, [r3, #12]
 800d4c6:	663b      	str	r3, [r7, #96]	; 0x60
=======
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	691b      	ldr	r3, [r3, #16]
 800c416:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c41a:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800c41e:	0c1b      	lsrs	r3, r3, #16
 800c420:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800c422:	68bb      	ldr	r3, [r7, #8]
 800c424:	68db      	ldr	r3, [r3, #12]
 800c426:	663b      	str	r3, [r7, #96]	; 0x60
>>>>>>> ModeSelect_v2
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
<<<<<<< HEAD
 800d4c8:	f107 0310 	add.w	r3, r7, #16
 800d4cc:	461a      	mov	r2, r3
 800d4ce:	68b9      	ldr	r1, [r7, #8]
 800d4d0:	68f8      	ldr	r0, [r7, #12]
 800d4d2:	f7ff fe78 	bl	800d1c6 <VL53L0X_get_total_signal_rate>
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800d4dc:	f107 0314 	add.w	r3, r7, #20
 800d4e0:	461a      	mov	r2, r3
 800d4e2:	68b9      	ldr	r1, [r7, #8]
 800d4e4:	68f8      	ldr	r0, [r7, #12]
 800d4e6:	f7ff fe3f 	bl	800d168 <VL53L0X_get_total_xtalk_rate>
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
=======
 800c428:	f107 0310 	add.w	r3, r7, #16
 800c42c:	461a      	mov	r2, r3
 800c42e:	68b9      	ldr	r1, [r7, #8]
 800c430:	68f8      	ldr	r0, [r7, #12]
 800c432:	f7ff fe78 	bl	800c126 <VL53L0X_get_total_signal_rate>
 800c436:	4603      	mov	r3, r0
 800c438:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800c43c:	f107 0314 	add.w	r3, r7, #20
 800c440:	461a      	mov	r2, r3
 800c442:	68b9      	ldr	r1, [r7, #8]
 800c444:	68f8      	ldr	r0, [r7, #12]
 800c446:	f7ff fe3f 	bl	800c0c8 <VL53L0X_get_total_xtalk_rate>
 800c44a:	4603      	mov	r3, r0
 800c44c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
>>>>>>> ModeSelect_v2


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
<<<<<<< HEAD
 800d4f0:	693b      	ldr	r3, [r7, #16]
 800d4f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d4f6:	fb02 f303 	mul.w	r3, r2, r3
 800d4fa:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800d4fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d4fe:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d502:	0c1b      	lsrs	r3, r3, #16
 800d504:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800d506:	697b      	ldr	r3, [r7, #20]
 800d508:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d50c:	fb02 f303 	mul.w	r3, r2, r3
 800d510:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800d514:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800d518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d51a:	429a      	cmp	r2, r3
 800d51c:	d902      	bls.n	800d524 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800d51e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d520:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800d524:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d168      	bne.n	800d5fe <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800d532:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800d53c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800d540:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800d544:	461a      	mov	r2, r3
 800d546:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800d54a:	68f8      	ldr	r0, [r7, #12]
 800d54c:	f7fe feb2 	bl	800c2b4 <VL53L0X_calc_timeout_mclks>
 800d550:	6578      	str	r0, [r7, #84]	; 0x54
=======
 800c450:	693b      	ldr	r3, [r7, #16]
 800c452:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c456:	fb02 f303 	mul.w	r3, r2, r3
 800c45a:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800c45c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c45e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c462:	0c1b      	lsrs	r3, r3, #16
 800c464:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800c466:	697b      	ldr	r3, [r7, #20]
 800c468:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c46c:	fb02 f303 	mul.w	r3, r2, r3
 800c470:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800c474:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800c478:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c47a:	429a      	cmp	r2, r3
 800c47c:	d902      	bls.n	800c484 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800c47e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c480:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800c484:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d168      	bne.n	800c55e <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800c492:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800c49c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800c4a0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800c4a4:	461a      	mov	r2, r3
 800c4a6:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800c4aa:	68f8      	ldr	r0, [r7, #12]
 800c4ac:	f7fe feb2 	bl	800b214 <VL53L0X_calc_timeout_mclks>
 800c4b0:	6578      	str	r0, [r7, #84]	; 0x54
>>>>>>> ModeSelect_v2
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
<<<<<<< HEAD
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d558:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800d562:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800d566:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800d56a:	461a      	mov	r2, r3
 800d56c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800d570:	68f8      	ldr	r0, [r7, #12]
 800d572:	f7fe fe9f 	bl	800c2b4 <VL53L0X_calc_timeout_mclks>
 800d576:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800d578:	2303      	movs	r3, #3
 800d57a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800d57e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800d582:	2b08      	cmp	r3, #8
 800d584:	d102      	bne.n	800d58c <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800d586:	2302      	movs	r3, #2
 800d588:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
=======
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c4b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800c4c2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800c4c6:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800c4ca:	461a      	mov	r2, r3
 800c4cc:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800c4d0:	68f8      	ldr	r0, [r7, #12]
 800c4d2:	f7fe fe9f 	bl	800b214 <VL53L0X_calc_timeout_mclks>
 800c4d6:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800c4d8:	2303      	movs	r3, #3
 800c4da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800c4de:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800c4e2:	2b08      	cmp	r3, #8
 800c4e4:	d102      	bne.n	800c4ec <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800c4e6:	2302      	movs	r3, #2
 800c4e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
>>>>>>> ModeSelect_v2


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
<<<<<<< HEAD
 800d58c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d58e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d590:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800d592:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800d596:	fb02 f303 	mul.w	r3, r2, r3
 800d59a:	02db      	lsls	r3, r3, #11
 800d59c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800d5a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d5a4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d5a8:	4a53      	ldr	r2, [pc, #332]	; (800d6f8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800d5aa:	fba2 2303 	umull	r2, r3, r2, r3
 800d5ae:	099b      	lsrs	r3, r3, #6
 800d5b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800d5b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d5b8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d5ba:	fb02 f303 	mul.w	r3, r2, r3
 800d5be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800d5c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d5c6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d5ca:	4a4b      	ldr	r2, [pc, #300]	; (800d6f8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800d5cc:	fba2 2303 	umull	r2, r3, r2, r3
 800d5d0:	099b      	lsrs	r3, r3, #6
 800d5d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800d5d6:	693b      	ldr	r3, [r7, #16]
 800d5d8:	3380      	adds	r3, #128	; 0x80
 800d5da:	0a1b      	lsrs	r3, r3, #8
 800d5dc:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800d5de:	693a      	ldr	r2, [r7, #16]
 800d5e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d5e4:	fb02 f303 	mul.w	r3, r2, r3
 800d5e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
=======
 800c4ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c4ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c4f0:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800c4f2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800c4f6:	fb02 f303 	mul.w	r3, r2, r3
 800c4fa:	02db      	lsls	r3, r3, #11
 800c4fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800c500:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c504:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c508:	4a53      	ldr	r2, [pc, #332]	; (800c658 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800c50a:	fba2 2303 	umull	r2, r3, r2, r3
 800c50e:	099b      	lsrs	r3, r3, #6
 800c510:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800c514:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c518:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c51a:	fb02 f303 	mul.w	r3, r2, r3
 800c51e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800c522:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c526:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c52a:	4a4b      	ldr	r2, [pc, #300]	; (800c658 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800c52c:	fba2 2303 	umull	r2, r3, r2, r3
 800c530:	099b      	lsrs	r3, r3, #6
 800c532:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800c536:	693b      	ldr	r3, [r7, #16]
 800c538:	3380      	adds	r3, #128	; 0x80
 800c53a:	0a1b      	lsrs	r3, r3, #8
 800c53c:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800c53e:	693a      	ldr	r2, [r7, #16]
 800c540:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c544:	fb02 f303 	mul.w	r3, r2, r3
 800c548:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
>>>>>>> ModeSelect_v2
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
<<<<<<< HEAD
 800d5ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d5f0:	3380      	adds	r3, #128	; 0x80
 800d5f2:	0a1b      	lsrs	r3, r3, #8
 800d5f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800d5f8:	693b      	ldr	r3, [r7, #16]
 800d5fa:	021b      	lsls	r3, r3, #8
 800d5fc:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800d5fe:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800d602:	2b00      	cmp	r3, #0
 800d604:	d002      	beq.n	800d60c <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800d606:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800d60a:	e15e      	b.n	800d8ca <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800d60c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d10c      	bne.n	800d62c <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d618:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d620:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	2200      	movs	r2, #0
 800d628:	601a      	str	r2, [r3, #0]
 800d62a:	e14c      	b.n	800d8c6 <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800d62c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d630:	2b00      	cmp	r3, #0
 800d632:	d102      	bne.n	800d63a <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800d634:	2301      	movs	r3, #1
 800d636:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800d63a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d63e:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800d640:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d642:	041a      	lsls	r2, r3, #16
 800d644:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d646:	fbb2 f3f3 	udiv	r3, r2, r3
 800d64a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800d64e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d652:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d654:	429a      	cmp	r2, r3
 800d656:	d902      	bls.n	800d65e <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800d658:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d65a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800d65e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800d662:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d666:	fb02 f303 	mul.w	r3, r2, r3
 800d66a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800d66e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800d672:	4613      	mov	r3, r2
 800d674:	005b      	lsls	r3, r3, #1
 800d676:	4413      	add	r3, r2
 800d678:	009b      	lsls	r3, r3, #2
 800d67a:	4618      	mov	r0, r3
 800d67c:	f7fe f876 	bl	800b76c <VL53L0X_isqrt>
 800d680:	4603      	mov	r3, r0
 800d682:	005b      	lsls	r3, r3, #1
 800d684:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800d686:	68bb      	ldr	r3, [r7, #8]
 800d688:	891b      	ldrh	r3, [r3, #8]
 800d68a:	461a      	mov	r2, r3
 800d68c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d68e:	fb02 f303 	mul.w	r3, r2, r3
 800d692:	643b      	str	r3, [r7, #64]	; 0x40
=======
 800c54c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c550:	3380      	adds	r3, #128	; 0x80
 800c552:	0a1b      	lsrs	r3, r3, #8
 800c554:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800c558:	693b      	ldr	r3, [r7, #16]
 800c55a:	021b      	lsls	r3, r3, #8
 800c55c:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800c55e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800c562:	2b00      	cmp	r3, #0
 800c564:	d002      	beq.n	800c56c <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800c566:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800c56a:	e15e      	b.n	800c82a <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800c56c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d10c      	bne.n	800c58c <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c578:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c580:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	2200      	movs	r2, #0
 800c588:	601a      	str	r2, [r3, #0]
 800c58a:	e14c      	b.n	800c826 <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800c58c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c590:	2b00      	cmp	r3, #0
 800c592:	d102      	bne.n	800c59a <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800c594:	2301      	movs	r3, #1
 800c596:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800c59a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c59e:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800c5a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c5a2:	041a      	lsls	r2, r3, #16
 800c5a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c5a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800c5ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c5b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c5b4:	429a      	cmp	r2, r3
 800c5b6:	d902      	bls.n	800c5be <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800c5b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c5ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800c5be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c5c2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800c5c6:	fb02 f303 	mul.w	r3, r2, r3
 800c5ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800c5ce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800c5d2:	4613      	mov	r3, r2
 800c5d4:	005b      	lsls	r3, r3, #1
 800c5d6:	4413      	add	r3, r2
 800c5d8:	009b      	lsls	r3, r3, #2
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f7fe f876 	bl	800a6cc <VL53L0X_isqrt>
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	005b      	lsls	r3, r3, #1
 800c5e4:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800c5e6:	68bb      	ldr	r3, [r7, #8]
 800c5e8:	891b      	ldrh	r3, [r3, #8]
 800c5ea:	461a      	mov	r2, r3
 800c5ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c5ee:	fb02 f303 	mul.w	r3, r2, r3
 800c5f2:	643b      	str	r3, [r7, #64]	; 0x40
>>>>>>> ModeSelect_v2
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
<<<<<<< HEAD
 800d694:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d696:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800d698:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d69c:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800d69e:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800d6a0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800d6a4:	4a14      	ldr	r2, [pc, #80]	; (800d6f8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800d6a6:	fba2 2303 	umull	r2, r3, r2, r3
 800d6aa:	099b      	lsrs	r3, r3, #6
 800d6ac:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800d6ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d6b0:	041b      	lsls	r3, r3, #16
 800d6b2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d6b6:	4a10      	ldr	r2, [pc, #64]	; (800d6f8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800d6b8:	fba2 2303 	umull	r2, r3, r2, r3
 800d6bc:	099b      	lsrs	r3, r3, #6
 800d6be:	63bb      	str	r3, [r7, #56]	; 0x38
=======
 800c5f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c5f6:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800c5f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c5fc:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800c5fe:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800c600:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800c604:	4a14      	ldr	r2, [pc, #80]	; (800c658 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800c606:	fba2 2303 	umull	r2, r3, r2, r3
 800c60a:	099b      	lsrs	r3, r3, #6
 800c60c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800c60e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c610:	041b      	lsls	r3, r3, #16
 800c612:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c616:	4a10      	ldr	r2, [pc, #64]	; (800c658 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800c618:	fba2 2303 	umull	r2, r3, r2, r3
 800c61c:	099b      	lsrs	r3, r3, #6
 800c61e:	63bb      	str	r3, [r7, #56]	; 0x38
>>>>>>> ModeSelect_v2

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
<<<<<<< HEAD
 800d6c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6c2:	021b      	lsls	r3, r3, #8
 800d6c4:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800d6c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d6c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	bfb8      	it	lt
 800d6d2:	425b      	neglt	r3, r3
 800d6d4:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800d6d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6d8:	021b      	lsls	r3, r3, #8
 800d6da:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800d6dc:	68bb      	ldr	r3, [r7, #8]
 800d6de:	7e1b      	ldrb	r3, [r3, #24]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d00b      	beq.n	800d6fc <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800d6e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d6e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d6ec:	e033      	b.n	800d756 <VL53L0X_calc_sigma_estimate+0x30e>
 800d6ee:	bf00      	nop
 800d6f0:	028f87ae 	.word	0x028f87ae
 800d6f4:	0006999a 	.word	0x0006999a
 800d6f8:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800d6fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d6fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d702:	fbb2 f3f3 	udiv	r3, r2, r3
 800d706:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
=======
 800c620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c622:	021b      	lsls	r3, r3, #8
 800c624:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800c626:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c62a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c62e:	2b00      	cmp	r3, #0
 800c630:	bfb8      	it	lt
 800c632:	425b      	neglt	r3, r3
 800c634:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800c636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c638:	021b      	lsls	r3, r3, #8
 800c63a:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800c63c:	68bb      	ldr	r3, [r7, #8]
 800c63e:	7e1b      	ldrb	r3, [r3, #24]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d00b      	beq.n	800c65c <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800c644:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c648:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c64c:	e033      	b.n	800c6b6 <VL53L0X_calc_sigma_estimate+0x30e>
 800c64e:	bf00      	nop
 800c650:	028f87ae 	.word	0x028f87ae
 800c654:	0006999a 	.word	0x0006999a
 800c658:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800c65c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c65e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c662:	fbb2 f3f3 	udiv	r3, r2, r3
 800c666:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
>>>>>>> ModeSelect_v2
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
<<<<<<< HEAD
 800d70a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d70c:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800d710:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d714:	fb02 f303 	mul.w	r3, r2, r3
 800d718:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800d71c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800d720:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d722:	4413      	add	r3, r2
 800d724:	0c1b      	lsrs	r3, r3, #16
 800d726:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800d72a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d72e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800d732:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
=======
 800c66a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c66c:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800c670:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c674:	fb02 f303 	mul.w	r3, r2, r3
 800c678:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800c67c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c680:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c682:	4413      	add	r3, r2
 800c684:	0c1b      	lsrs	r3, r3, #16
 800c686:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800c68a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c68e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c692:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
>>>>>>> ModeSelect_v2
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
<<<<<<< HEAD
 800d736:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d73a:	085b      	lsrs	r3, r3, #1
 800d73c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800d740:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d744:	fb03 f303 	mul.w	r3, r3, r3
 800d748:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800d74c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d750:	0b9b      	lsrs	r3, r3, #14
 800d752:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
=======
 800c696:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c69a:	085b      	lsrs	r3, r3, #1
 800c69c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800c6a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c6a4:	fb03 f303 	mul.w	r3, r3, r3
 800c6a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800c6ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c6b0:	0b9b      	lsrs	r3, r3, #14
 800c6b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
>>>>>>> ModeSelect_v2
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
<<<<<<< HEAD
 800d756:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d75a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d75c:	fb02 f303 	mul.w	r3, r2, r3
 800d760:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800d762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d764:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d768:	0c1b      	lsrs	r3, r3, #16
 800d76a:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800d76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d76e:	fb03 f303 	mul.w	r3, r3, r3
 800d772:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800d774:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800d778:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800d77a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d77c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d780:	0c1b      	lsrs	r3, r3, #16
 800d782:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800d784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d786:	fb03 f303 	mul.w	r3, r3, r3
 800d78a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800d78c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d78e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d790:	4413      	add	r3, r2
 800d792:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800d794:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d796:	f7fd ffe9 	bl	800b76c <VL53L0X_isqrt>
 800d79a:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800d79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d79e:	041b      	lsls	r3, r3, #16
 800d7a0:	627b      	str	r3, [r7, #36]	; 0x24
=======
 800c6b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c6ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c6bc:	fb02 f303 	mul.w	r3, r2, r3
 800c6c0:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800c6c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6c4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c6c8:	0c1b      	lsrs	r3, r3, #16
 800c6ca:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800c6cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ce:	fb03 f303 	mul.w	r3, r3, r3
 800c6d2:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800c6d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c6d8:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800c6da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6dc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c6e0:	0c1b      	lsrs	r3, r3, #16
 800c6e2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800c6e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6e6:	fb03 f303 	mul.w	r3, r3, r3
 800c6ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800c6ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6f0:	4413      	add	r3, r2
 800c6f2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800c6f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6f6:	f7fd ffe9 	bl	800a6cc <VL53L0X_isqrt>
 800c6fa:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800c6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6fe:	041b      	lsls	r3, r3, #16
 800c700:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> ModeSelect_v2
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
<<<<<<< HEAD
 800d7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7a4:	3332      	adds	r3, #50	; 0x32
 800d7a6:	4a4b      	ldr	r2, [pc, #300]	; (800d8d4 <VL53L0X_calc_sigma_estimate+0x48c>)
 800d7a8:	fba2 2303 	umull	r2, r3, r2, r3
 800d7ac:	095a      	lsrs	r2, r3, #5
 800d7ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d7b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800d7b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d7bc:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800d7c0:	fb02 f303 	mul.w	r3, r2, r3
 800d7c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800d7c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d7cc:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800d7d0:	3308      	adds	r3, #8
 800d7d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800d7d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d7da:	4a3f      	ldr	r2, [pc, #252]	; (800d8d8 <VL53L0X_calc_sigma_estimate+0x490>)
 800d7dc:	fba2 2303 	umull	r2, r3, r2, r3
 800d7e0:	0b5b      	lsrs	r3, r3, #13
 800d7e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800d7e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d7ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d7ec:	429a      	cmp	r2, r3
 800d7ee:	d902      	bls.n	800d7f6 <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800d7f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d7f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800d7f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800d7fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d7fe:	4413      	add	r3, r2
 800d800:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800d804:	4a35      	ldr	r2, [pc, #212]	; (800d8dc <VL53L0X_calc_sigma_estimate+0x494>)
 800d806:	fba2 2303 	umull	r2, r3, r2, r3
 800d80a:	099b      	lsrs	r3, r3, #6
 800d80c:	623b      	str	r3, [r7, #32]
=======
 800c702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c704:	3332      	adds	r3, #50	; 0x32
 800c706:	4a4b      	ldr	r2, [pc, #300]	; (800c834 <VL53L0X_calc_sigma_estimate+0x48c>)
 800c708:	fba2 2303 	umull	r2, r3, r2, r3
 800c70c:	095a      	lsrs	r2, r3, #5
 800c70e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c710:	fbb2 f3f3 	udiv	r3, r2, r3
 800c714:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800c718:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c71c:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800c720:	fb02 f303 	mul.w	r3, r2, r3
 800c724:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800c728:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c72c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800c730:	3308      	adds	r3, #8
 800c732:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800c736:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c73a:	4a3f      	ldr	r2, [pc, #252]	; (800c838 <VL53L0X_calc_sigma_estimate+0x490>)
 800c73c:	fba2 2303 	umull	r2, r3, r2, r3
 800c740:	0b5b      	lsrs	r3, r3, #13
 800c742:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800c746:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c74a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c74c:	429a      	cmp	r2, r3
 800c74e:	d902      	bls.n	800c756 <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800c750:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c752:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800c756:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c75a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c75e:	4413      	add	r3, r2
 800c760:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800c764:	4a35      	ldr	r2, [pc, #212]	; (800c83c <VL53L0X_calc_sigma_estimate+0x494>)
 800c766:	fba2 2303 	umull	r2, r3, r2, r3
 800c76a:	099b      	lsrs	r3, r3, #6
 800c76c:	623b      	str	r3, [r7, #32]
>>>>>>> ModeSelect_v2
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
<<<<<<< HEAD
 800d80e:	6a3b      	ldr	r3, [r7, #32]
 800d810:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800d812:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d816:	441a      	add	r2, r3
 800d818:	6a3b      	ldr	r3, [r7, #32]
 800d81a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d81e:	4618      	mov	r0, r3
 800d820:	f7fd ffa4 	bl	800b76c <VL53L0X_isqrt>
 800d824:	61f8      	str	r0, [r7, #28]
=======
 800c76e:	6a3b      	ldr	r3, [r7, #32]
 800c770:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800c772:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c776:	441a      	add	r2, r3
 800c778:	6a3b      	ldr	r3, [r7, #32]
 800c77a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c77e:	4618      	mov	r0, r3
 800c780:	f7fd ffa4 	bl	800a6cc <VL53L0X_isqrt>
 800c784:	61f8      	str	r0, [r7, #28]
>>>>>>> ModeSelect_v2
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
<<<<<<< HEAD
 800d826:	69fb      	ldr	r3, [r7, #28]
 800d828:	021b      	lsls	r3, r3, #8
 800d82a:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800d82c:	69fb      	ldr	r3, [r7, #28]
 800d82e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d832:	4a2a      	ldr	r2, [pc, #168]	; (800d8dc <VL53L0X_calc_sigma_estimate+0x494>)
 800d834:	fba2 2303 	umull	r2, r3, r2, r3
 800d838:	099b      	lsrs	r3, r3, #6
 800d83a:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800d83c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d840:	fb03 f303 	mul.w	r3, r3, r3
 800d844:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800d846:	69fb      	ldr	r3, [r7, #28]
 800d848:	fb03 f303 	mul.w	r3, r3, r3
 800d84c:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800d84e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d852:	4413      	add	r3, r2
 800d854:	4618      	mov	r0, r3
 800d856:	f7fd ff89 	bl	800b76c <VL53L0X_isqrt>
 800d85a:	61b8      	str	r0, [r7, #24]
=======
 800c786:	69fb      	ldr	r3, [r7, #28]
 800c788:	021b      	lsls	r3, r3, #8
 800c78a:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800c78c:	69fb      	ldr	r3, [r7, #28]
 800c78e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c792:	4a2a      	ldr	r2, [pc, #168]	; (800c83c <VL53L0X_calc_sigma_estimate+0x494>)
 800c794:	fba2 2303 	umull	r2, r3, r2, r3
 800c798:	099b      	lsrs	r3, r3, #6
 800c79a:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800c79c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c7a0:	fb03 f303 	mul.w	r3, r3, r3
 800c7a4:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800c7a6:	69fb      	ldr	r3, [r7, #28]
 800c7a8:	fb03 f303 	mul.w	r3, r3, r3
 800c7ac:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800c7ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7b2:	4413      	add	r3, r2
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	f7fd ff89 	bl	800a6cc <VL53L0X_isqrt>
 800c7ba:	61b8      	str	r0, [r7, #24]
>>>>>>> ModeSelect_v2
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
<<<<<<< HEAD
 800d85c:	69bb      	ldr	r3, [r7, #24]
 800d85e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d862:	fb02 f303 	mul.w	r3, r2, r3
 800d866:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800d86a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d009      	beq.n	800d884 <VL53L0X_calc_sigma_estimate+0x43c>
 800d870:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d874:	2b00      	cmp	r3, #0
 800d876:	d005      	beq.n	800d884 <VL53L0X_calc_sigma_estimate+0x43c>
 800d878:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800d87c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d880:	429a      	cmp	r2, r3
 800d882:	d903      	bls.n	800d88c <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800d884:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d888:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800d892:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681a      	ldr	r2, [r3, #0]
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800d89e:	6939      	ldr	r1, [r7, #16]
 800d8a0:	683b      	ldr	r3, [r7, #0]
 800d8a2:	9303      	str	r3, [sp, #12]
 800d8a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d8a8:	9302      	str	r3, [sp, #8]
 800d8aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800d8ae:	9301      	str	r3, [sp, #4]
 800d8b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d8b2:	9300      	str	r3, [sp, #0]
 800d8b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d8b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d8ba:	68f8      	ldr	r0, [r7, #12]
 800d8bc:	f7ff fca8 	bl	800d210 <VL53L0X_calc_dmax>
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
=======
 800c7bc:	69bb      	ldr	r3, [r7, #24]
 800c7be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c7c2:	fb02 f303 	mul.w	r3, r2, r3
 800c7c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800c7ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d009      	beq.n	800c7e4 <VL53L0X_calc_sigma_estimate+0x43c>
 800c7d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d005      	beq.n	800c7e4 <VL53L0X_calc_sigma_estimate+0x43c>
 800c7d8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800c7dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c7e0:	429a      	cmp	r2, r3
 800c7e2:	d903      	bls.n	800c7ec <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800c7e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c7e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800c7f2:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681a      	ldr	r2, [r3, #0]
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800c7fe:	6939      	ldr	r1, [r7, #16]
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	9303      	str	r3, [sp, #12]
 800c804:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c808:	9302      	str	r3, [sp, #8]
 800c80a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c80e:	9301      	str	r3, [sp, #4]
 800c810:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c812:	9300      	str	r3, [sp, #0]
 800c814:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c818:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c81a:	68f8      	ldr	r0, [r7, #12]
 800c81c:	f7ff fca8 	bl	800c170 <VL53L0X_calc_dmax>
 800c820:	4603      	mov	r3, r0
 800c822:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
>>>>>>> ModeSelect_v2
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
<<<<<<< HEAD
 800d8c6:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	37c0      	adds	r7, #192	; 0xc0
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bd80      	pop	{r7, pc}
 800d8d2:	bf00      	nop
 800d8d4:	51eb851f 	.word	0x51eb851f
 800d8d8:	d1b71759 	.word	0xd1b71759
 800d8dc:	10624dd3 	.word	0x10624dd3

0800d8e0 <VL53L0X_get_pal_range_status>:
=======
 800c826:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800c82a:	4618      	mov	r0, r3
 800c82c:	37c0      	adds	r7, #192	; 0xc0
 800c82e:	46bd      	mov	sp, r7
 800c830:	bd80      	pop	{r7, pc}
 800c832:	bf00      	nop
 800c834:	51eb851f 	.word	0x51eb851f
 800c838:	d1b71759 	.word	0xd1b71759
 800c83c:	10624dd3 	.word	0x10624dd3

0800c840 <VL53L0X_get_pal_range_status>:
>>>>>>> ModeSelect_v2
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
<<<<<<< HEAD
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b090      	sub	sp, #64	; 0x40
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	60f8      	str	r0, [r7, #12]
 800d8e8:	607a      	str	r2, [r7, #4]
 800d8ea:	461a      	mov	r2, r3
 800d8ec:	460b      	mov	r3, r1
 800d8ee:	72fb      	strb	r3, [r7, #11]
 800d8f0:	4613      	mov	r3, r2
 800d8f2:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800d900:	2300      	movs	r3, #0
 800d902:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800d906:	2300      	movs	r3, #0
 800d908:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800d90c:	2300      	movs	r3, #0
 800d90e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800d912:	2300      	movs	r3, #0
 800d914:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800d918:	2300      	movs	r3, #0
 800d91a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800d91e:	2300      	movs	r3, #0
 800d920:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
=======
 800c840:	b580      	push	{r7, lr}
 800c842:	b090      	sub	sp, #64	; 0x40
 800c844:	af00      	add	r7, sp, #0
 800c846:	60f8      	str	r0, [r7, #12]
 800c848:	607a      	str	r2, [r7, #4]
 800c84a:	461a      	mov	r2, r3
 800c84c:	460b      	mov	r3, r1
 800c84e:	72fb      	strb	r3, [r7, #11]
 800c850:	4613      	mov	r3, r2
 800c852:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c854:	2300      	movs	r3, #0
 800c856:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800c85a:	2300      	movs	r3, #0
 800c85c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800c860:	2300      	movs	r3, #0
 800c862:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800c866:	2300      	movs	r3, #0
 800c868:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800c86c:	2300      	movs	r3, #0
 800c86e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800c872:	2300      	movs	r3, #0
 800c874:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800c878:	2300      	movs	r3, #0
 800c87a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800c87e:	2300      	movs	r3, #0
 800c880:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
>>>>>>> ModeSelect_v2
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
<<<<<<< HEAD
 800d924:	2300      	movs	r3, #0
 800d926:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800d92a:	2300      	movs	r3, #0
 800d92c:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800d92e:	2300      	movs	r3, #0
 800d930:	613b      	str	r3, [r7, #16]
=======
 800c884:	2300      	movs	r3, #0
 800c886:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800c88a:	2300      	movs	r3, #0
 800c88c:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800c88e:	2300      	movs	r3, #0
 800c890:	613b      	str	r3, [r7, #16]
>>>>>>> ModeSelect_v2
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
<<<<<<< HEAD
 800d932:	7afb      	ldrb	r3, [r7, #11]
 800d934:	10db      	asrs	r3, r3, #3
 800d936:	b2db      	uxtb	r3, r3
 800d938:	f003 030f 	and.w	r3, r3, #15
 800d93c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800d940:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d944:	2b00      	cmp	r3, #0
 800d946:	d017      	beq.n	800d978 <VL53L0X_get_pal_range_status+0x98>
 800d948:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d94c:	2b05      	cmp	r3, #5
 800d94e:	d013      	beq.n	800d978 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800d950:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d954:	2b07      	cmp	r3, #7
 800d956:	d00f      	beq.n	800d978 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800d958:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d95c:	2b0c      	cmp	r3, #12
 800d95e:	d00b      	beq.n	800d978 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800d960:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d964:	2b0d      	cmp	r3, #13
 800d966:	d007      	beq.n	800d978 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800d968:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d96c:	2b0e      	cmp	r3, #14
 800d96e:	d003      	beq.n	800d978 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800d970:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d974:	2b0f      	cmp	r3, #15
 800d976:	d103      	bne.n	800d980 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800d978:	2301      	movs	r3, #1
 800d97a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800d97e:	e002      	b.n	800d986 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800d980:	2300      	movs	r3, #0
 800d982:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
=======
 800c892:	7afb      	ldrb	r3, [r7, #11]
 800c894:	10db      	asrs	r3, r3, #3
 800c896:	b2db      	uxtb	r3, r3
 800c898:	f003 030f 	and.w	r3, r3, #15
 800c89c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800c8a0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d017      	beq.n	800c8d8 <VL53L0X_get_pal_range_status+0x98>
 800c8a8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c8ac:	2b05      	cmp	r3, #5
 800c8ae:	d013      	beq.n	800c8d8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800c8b0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c8b4:	2b07      	cmp	r3, #7
 800c8b6:	d00f      	beq.n	800c8d8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800c8b8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c8bc:	2b0c      	cmp	r3, #12
 800c8be:	d00b      	beq.n	800c8d8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800c8c0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c8c4:	2b0d      	cmp	r3, #13
 800c8c6:	d007      	beq.n	800c8d8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800c8c8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c8cc:	2b0e      	cmp	r3, #14
 800c8ce:	d003      	beq.n	800c8d8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800c8d0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c8d4:	2b0f      	cmp	r3, #15
 800c8d6:	d103      	bne.n	800c8e0 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800c8d8:	2301      	movs	r3, #1
 800c8da:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800c8de:	e002      	b.n	800c8e6 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
>>>>>>> ModeSelect_v2

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
<<<<<<< HEAD
 800d986:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d109      	bne.n	800d9a2 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800d98e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800d992:	461a      	mov	r2, r3
 800d994:	2100      	movs	r1, #0
 800d996:	68f8      	ldr	r0, [r7, #12]
 800d998:	f7fc f9ec 	bl	8009d74 <VL53L0X_GetLimitCheckEnable>
 800d99c:	4603      	mov	r3, r0
 800d99e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
=======
 800c8e6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d109      	bne.n	800c902 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800c8ee:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800c8f2:	461a      	mov	r2, r3
 800c8f4:	2100      	movs	r1, #0
 800c8f6:	68f8      	ldr	r0, [r7, #12]
 800c8f8:	f7fc f9ec 	bl	8008cd4 <VL53L0X_GetLimitCheckEnable>
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
>>>>>>> ModeSelect_v2
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
<<<<<<< HEAD
 800d9a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d02e      	beq.n	800da08 <VL53L0X_get_pal_range_status+0x128>
 800d9aa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d12a      	bne.n	800da08 <VL53L0X_get_pal_range_status+0x128>
=======
 800c902:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c906:	2b00      	cmp	r3, #0
 800c908:	d02e      	beq.n	800c968 <VL53L0X_get_pal_range_status+0x128>
 800c90a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d12a      	bne.n	800c968 <VL53L0X_get_pal_range_status+0x128>
>>>>>>> ModeSelect_v2
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
<<<<<<< HEAD
 800d9b2:	f107 0310 	add.w	r3, r7, #16
 800d9b6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800d9ba:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d9bc:	68f8      	ldr	r0, [r7, #12]
 800d9be:	f7ff fd43 	bl	800d448 <VL53L0X_calc_sigma_estimate>
 800d9c2:	4603      	mov	r3, r0
 800d9c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
=======
 800c912:	f107 0310 	add.w	r3, r7, #16
 800c916:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800c91a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c91c:	68f8      	ldr	r0, [r7, #12]
 800c91e:	f7ff fd43 	bl	800c3a8 <VL53L0X_calc_sigma_estimate>
 800c922:	4603      	mov	r3, r0
 800c924:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
>>>>>>> ModeSelect_v2
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
<<<<<<< HEAD
 800d9c8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d103      	bne.n	800d9d8 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800d9d0:	693b      	ldr	r3, [r7, #16]
 800d9d2:	b29a      	uxth	r2, r3
 800d9d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d9d6:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800d9d8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d113      	bne.n	800da08 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800d9e0:	f107 0320 	add.w	r3, r7, #32
 800d9e4:	461a      	mov	r2, r3
 800d9e6:	2100      	movs	r1, #0
 800d9e8:	68f8      	ldr	r0, [r7, #12]
 800d9ea:	f7fc fa49 	bl	8009e80 <VL53L0X_GetLimitCheckValue>
 800d9ee:	4603      	mov	r3, r0
 800d9f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
=======
 800c928:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d103      	bne.n	800c938 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800c930:	693b      	ldr	r3, [r7, #16]
 800c932:	b29a      	uxth	r2, r3
 800c934:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c936:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800c938:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d113      	bne.n	800c968 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800c940:	f107 0320 	add.w	r3, r7, #32
 800c944:	461a      	mov	r2, r3
 800c946:	2100      	movs	r1, #0
 800c948:	68f8      	ldr	r0, [r7, #12]
 800c94a:	f7fc fa49 	bl	8008de0 <VL53L0X_GetLimitCheckValue>
 800c94e:	4603      	mov	r3, r0
 800c950:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
>>>>>>> ModeSelect_v2
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
<<<<<<< HEAD
 800d9f4:	6a3b      	ldr	r3, [r7, #32]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d006      	beq.n	800da08 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800d9fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9fc:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800d9fe:	429a      	cmp	r2, r3
 800da00:	d902      	bls.n	800da08 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800da02:	2301      	movs	r3, #1
 800da04:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
=======
 800c954:	6a3b      	ldr	r3, [r7, #32]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d006      	beq.n	800c968 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800c95a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c95c:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800c95e:	429a      	cmp	r2, r3
 800c960:	d902      	bls.n	800c968 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800c962:	2301      	movs	r3, #1
 800c964:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
>>>>>>> ModeSelect_v2

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
<<<<<<< HEAD
 800da08:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d109      	bne.n	800da24 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800da10:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800da14:	461a      	mov	r2, r3
 800da16:	2102      	movs	r1, #2
 800da18:	68f8      	ldr	r0, [r7, #12]
 800da1a:	f7fc f9ab 	bl	8009d74 <VL53L0X_GetLimitCheckEnable>
 800da1e:	4603      	mov	r3, r0
 800da20:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
=======
 800c968:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d109      	bne.n	800c984 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800c970:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800c974:	461a      	mov	r2, r3
 800c976:	2102      	movs	r1, #2
 800c978:	68f8      	ldr	r0, [r7, #12]
 800c97a:	f7fc f9ab 	bl	8008cd4 <VL53L0X_GetLimitCheckEnable>
 800c97e:	4603      	mov	r3, r0
 800c980:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
>>>>>>> ModeSelect_v2
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
<<<<<<< HEAD
 800da24:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d044      	beq.n	800dab6 <VL53L0X_get_pal_range_status+0x1d6>
 800da2c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800da30:	2b00      	cmp	r3, #0
 800da32:	d140      	bne.n	800dab6 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800da34:	f107 031c 	add.w	r3, r7, #28
 800da38:	461a      	mov	r2, r3
 800da3a:	2102      	movs	r1, #2
 800da3c:	68f8      	ldr	r0, [r7, #12]
 800da3e:	f7fc fa1f 	bl	8009e80 <VL53L0X_GetLimitCheckValue>
 800da42:	4603      	mov	r3, r0
 800da44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
=======
 800c984:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d044      	beq.n	800ca16 <VL53L0X_get_pal_range_status+0x1d6>
 800c98c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c990:	2b00      	cmp	r3, #0
 800c992:	d140      	bne.n	800ca16 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800c994:	f107 031c 	add.w	r3, r7, #28
 800c998:	461a      	mov	r2, r3
 800c99a:	2102      	movs	r1, #2
 800c99c:	68f8      	ldr	r0, [r7, #12]
 800c99e:	f7fc fa1f 	bl	8008de0 <VL53L0X_GetLimitCheckValue>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
>>>>>>> ModeSelect_v2
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
<<<<<<< HEAD
 800da48:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d107      	bne.n	800da60 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800da50:	2201      	movs	r2, #1
 800da52:	21ff      	movs	r1, #255	; 0xff
 800da54:	68f8      	ldr	r0, [r7, #12]
 800da56:	f000 f9bb 	bl	800ddd0 <VL53L0X_WrByte>
 800da5a:	4603      	mov	r3, r0
 800da5c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800da60:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800da64:	2b00      	cmp	r3, #0
 800da66:	d109      	bne.n	800da7c <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800da68:	f107 0316 	add.w	r3, r7, #22
 800da6c:	461a      	mov	r2, r3
 800da6e:	21b6      	movs	r1, #182	; 0xb6
 800da70:	68f8      	ldr	r0, [r7, #12]
 800da72:	f000 fa59 	bl	800df28 <VL53L0X_RdWord>
 800da76:	4603      	mov	r3, r0
 800da78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
=======
 800c9a8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d107      	bne.n	800c9c0 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c9b0:	2201      	movs	r2, #1
 800c9b2:	21ff      	movs	r1, #255	; 0xff
 800c9b4:	68f8      	ldr	r0, [r7, #12]
 800c9b6:	f000 f9bb 	bl	800cd30 <VL53L0X_WrByte>
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800c9c0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d109      	bne.n	800c9dc <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800c9c8:	f107 0316 	add.w	r3, r7, #22
 800c9cc:	461a      	mov	r2, r3
 800c9ce:	21b6      	movs	r1, #182	; 0xb6
 800c9d0:	68f8      	ldr	r0, [r7, #12]
 800c9d2:	f000 fa59 	bl	800ce88 <VL53L0X_RdWord>
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
>>>>>>> ModeSelect_v2
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
<<<<<<< HEAD
 800da7c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800da80:	2b00      	cmp	r3, #0
 800da82:	d107      	bne.n	800da94 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800da84:	2200      	movs	r2, #0
 800da86:	21ff      	movs	r1, #255	; 0xff
 800da88:	68f8      	ldr	r0, [r7, #12]
 800da8a:	f000 f9a1 	bl	800ddd0 <VL53L0X_WrByte>
 800da8e:	4603      	mov	r3, r0
 800da90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800da94:	8afb      	ldrh	r3, [r7, #22]
 800da96:	025b      	lsls	r3, r3, #9
 800da98:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da9e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800daa2:	69fb      	ldr	r3, [r7, #28]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d006      	beq.n	800dab6 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800daa8:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800daaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800daac:	429a      	cmp	r2, r3
 800daae:	d902      	bls.n	800dab6 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800dab0:	2301      	movs	r3, #1
 800dab2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
=======
 800c9dc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d107      	bne.n	800c9f4 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	21ff      	movs	r1, #255	; 0xff
 800c9e8:	68f8      	ldr	r0, [r7, #12]
 800c9ea:	f000 f9a1 	bl	800cd30 <VL53L0X_WrByte>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800c9f4:	8afb      	ldrh	r3, [r7, #22]
 800c9f6:	025b      	lsls	r3, r3, #9
 800c9f8:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9fe:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800ca02:	69fb      	ldr	r3, [r7, #28]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d006      	beq.n	800ca16 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800ca08:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800ca0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca0c:	429a      	cmp	r2, r3
 800ca0e:	d902      	bls.n	800ca16 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800ca10:	2301      	movs	r3, #1
 800ca12:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
>>>>>>> ModeSelect_v2
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
<<<<<<< HEAD
 800dab6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d109      	bne.n	800dad2 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800dabe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dac2:	461a      	mov	r2, r3
 800dac4:	2103      	movs	r1, #3
 800dac6:	68f8      	ldr	r0, [r7, #12]
 800dac8:	f7fc f954 	bl	8009d74 <VL53L0X_GetLimitCheckEnable>
 800dacc:	4603      	mov	r3, r0
 800dace:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
=======
 800ca16:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d109      	bne.n	800ca32 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800ca1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ca22:	461a      	mov	r2, r3
 800ca24:	2103      	movs	r1, #3
 800ca26:	68f8      	ldr	r0, [r7, #12]
 800ca28:	f7fc f954 	bl	8008cd4 <VL53L0X_GetLimitCheckEnable>
 800ca2c:	4603      	mov	r3, r0
 800ca2e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
>>>>>>> ModeSelect_v2
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
<<<<<<< HEAD
 800dad2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d023      	beq.n	800db22 <VL53L0X_get_pal_range_status+0x242>
 800dada:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d11f      	bne.n	800db22 <VL53L0X_get_pal_range_status+0x242>
=======
 800ca32:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d023      	beq.n	800ca82 <VL53L0X_get_pal_range_status+0x242>
 800ca3a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d11f      	bne.n	800ca82 <VL53L0X_get_pal_range_status+0x242>
>>>>>>> ModeSelect_v2
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
<<<<<<< HEAD
 800dae2:	893b      	ldrh	r3, [r7, #8]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d102      	bne.n	800daee <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800dae8:	2300      	movs	r3, #0
 800daea:	637b      	str	r3, [r7, #52]	; 0x34
 800daec:	e005      	b.n	800dafa <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	021a      	lsls	r2, r3, #8
 800daf2:	893b      	ldrh	r3, [r7, #8]
 800daf4:	fbb2 f3f3 	udiv	r3, r2, r3
 800daf8:	637b      	str	r3, [r7, #52]	; 0x34
=======
 800ca42:	893b      	ldrh	r3, [r7, #8]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d102      	bne.n	800ca4e <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800ca48:	2300      	movs	r3, #0
 800ca4a:	637b      	str	r3, [r7, #52]	; 0x34
 800ca4c:	e005      	b.n	800ca5a <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	021a      	lsls	r2, r3, #8
 800ca52:	893b      	ldrh	r3, [r7, #8]
 800ca54:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca58:	637b      	str	r3, [r7, #52]	; 0x34
>>>>>>> ModeSelect_v2
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
<<<<<<< HEAD
 800dafa:	f107 0318 	add.w	r3, r7, #24
 800dafe:	461a      	mov	r2, r3
 800db00:	2103      	movs	r1, #3
 800db02:	68f8      	ldr	r0, [r7, #12]
 800db04:	f7fc f9bc 	bl	8009e80 <VL53L0X_GetLimitCheckValue>
 800db08:	4603      	mov	r3, r0
 800db0a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
=======
 800ca5a:	f107 0318 	add.w	r3, r7, #24
 800ca5e:	461a      	mov	r2, r3
 800ca60:	2103      	movs	r1, #3
 800ca62:	68f8      	ldr	r0, [r7, #12]
 800ca64:	f7fc f9bc 	bl	8008de0 <VL53L0X_GetLimitCheckValue>
 800ca68:	4603      	mov	r3, r0
 800ca6a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
>>>>>>> ModeSelect_v2
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
<<<<<<< HEAD
 800db0e:	69bb      	ldr	r3, [r7, #24]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d006      	beq.n	800db22 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800db14:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800db16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db18:	429a      	cmp	r2, r3
 800db1a:	d202      	bcs.n	800db22 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800db1c:	2301      	movs	r3, #1
 800db1e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
=======
 800ca6e:	69bb      	ldr	r3, [r7, #24]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d006      	beq.n	800ca82 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800ca74:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800ca76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ca78:	429a      	cmp	r2, r3
 800ca7a:	d202      	bcs.n	800ca82 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800ca7c:	2301      	movs	r3, #1
 800ca7e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
>>>>>>> ModeSelect_v2
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 800db22:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800db26:	2b00      	cmp	r3, #0
 800db28:	d14a      	bne.n	800dbc0 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800db2a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800db2e:	2b01      	cmp	r3, #1
 800db30:	d103      	bne.n	800db3a <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800db32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db34:	22ff      	movs	r2, #255	; 0xff
 800db36:	701a      	strb	r2, [r3, #0]
 800db38:	e042      	b.n	800dbc0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800db3a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800db3e:	2b01      	cmp	r3, #1
 800db40:	d007      	beq.n	800db52 <VL53L0X_get_pal_range_status+0x272>
 800db42:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800db46:	2b02      	cmp	r3, #2
 800db48:	d003      	beq.n	800db52 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800db4a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800db4e:	2b03      	cmp	r3, #3
 800db50:	d103      	bne.n	800db5a <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800db52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db54:	2205      	movs	r2, #5
 800db56:	701a      	strb	r2, [r3, #0]
 800db58:	e032      	b.n	800dbc0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800db5a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800db5e:	2b06      	cmp	r3, #6
 800db60:	d003      	beq.n	800db6a <VL53L0X_get_pal_range_status+0x28a>
 800db62:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800db66:	2b09      	cmp	r3, #9
 800db68:	d103      	bne.n	800db72 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800db6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db6c:	2204      	movs	r2, #4
 800db6e:	701a      	strb	r2, [r3, #0]
 800db70:	e026      	b.n	800dbc0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800db72:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800db76:	2b08      	cmp	r3, #8
 800db78:	d007      	beq.n	800db8a <VL53L0X_get_pal_range_status+0x2aa>
 800db7a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800db7e:	2b0a      	cmp	r3, #10
 800db80:	d003      	beq.n	800db8a <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800db82:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800db86:	2b01      	cmp	r3, #1
 800db88:	d103      	bne.n	800db92 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800db8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db8c:	2203      	movs	r2, #3
 800db8e:	701a      	strb	r2, [r3, #0]
 800db90:	e016      	b.n	800dbc0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800db92:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800db96:	2b04      	cmp	r3, #4
 800db98:	d003      	beq.n	800dba2 <VL53L0X_get_pal_range_status+0x2c2>
 800db9a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800db9e:	2b01      	cmp	r3, #1
 800dba0:	d103      	bne.n	800dbaa <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800dba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dba4:	2202      	movs	r2, #2
 800dba6:	701a      	strb	r2, [r3, #0]
 800dba8:	e00a      	b.n	800dbc0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800dbaa:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800dbae:	2b01      	cmp	r3, #1
 800dbb0:	d103      	bne.n	800dbba <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800dbb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbb4:	2201      	movs	r2, #1
 800dbb6:	701a      	strb	r2, [r3, #0]
 800dbb8:	e002      	b.n	800dbc0 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800dbba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	701a      	strb	r2, [r3, #0]
=======
 800ca82:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d14a      	bne.n	800cb20 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800ca8a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800ca8e:	2b01      	cmp	r3, #1
 800ca90:	d103      	bne.n	800ca9a <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800ca92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca94:	22ff      	movs	r2, #255	; 0xff
 800ca96:	701a      	strb	r2, [r3, #0]
 800ca98:	e042      	b.n	800cb20 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800ca9a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ca9e:	2b01      	cmp	r3, #1
 800caa0:	d007      	beq.n	800cab2 <VL53L0X_get_pal_range_status+0x272>
 800caa2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800caa6:	2b02      	cmp	r3, #2
 800caa8:	d003      	beq.n	800cab2 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800caaa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800caae:	2b03      	cmp	r3, #3
 800cab0:	d103      	bne.n	800caba <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800cab2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cab4:	2205      	movs	r2, #5
 800cab6:	701a      	strb	r2, [r3, #0]
 800cab8:	e032      	b.n	800cb20 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800caba:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800cabe:	2b06      	cmp	r3, #6
 800cac0:	d003      	beq.n	800caca <VL53L0X_get_pal_range_status+0x28a>
 800cac2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800cac6:	2b09      	cmp	r3, #9
 800cac8:	d103      	bne.n	800cad2 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800caca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cacc:	2204      	movs	r2, #4
 800cace:	701a      	strb	r2, [r3, #0]
 800cad0:	e026      	b.n	800cb20 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800cad2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800cad6:	2b08      	cmp	r3, #8
 800cad8:	d007      	beq.n	800caea <VL53L0X_get_pal_range_status+0x2aa>
 800cada:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800cade:	2b0a      	cmp	r3, #10
 800cae0:	d003      	beq.n	800caea <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800cae2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cae6:	2b01      	cmp	r3, #1
 800cae8:	d103      	bne.n	800caf2 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800caea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800caec:	2203      	movs	r2, #3
 800caee:	701a      	strb	r2, [r3, #0]
 800caf0:	e016      	b.n	800cb20 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800caf2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800caf6:	2b04      	cmp	r3, #4
 800caf8:	d003      	beq.n	800cb02 <VL53L0X_get_pal_range_status+0x2c2>
 800cafa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800cafe:	2b01      	cmp	r3, #1
 800cb00:	d103      	bne.n	800cb0a <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800cb02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb04:	2202      	movs	r2, #2
 800cb06:	701a      	strb	r2, [r3, #0]
 800cb08:	e00a      	b.n	800cb20 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800cb0a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800cb0e:	2b01      	cmp	r3, #1
 800cb10:	d103      	bne.n	800cb1a <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800cb12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb14:	2201      	movs	r2, #1
 800cb16:	701a      	strb	r2, [r3, #0]
 800cb18:	e002      	b.n	800cb20 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800cb1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	701a      	strb	r2, [r3, #0]
>>>>>>> ModeSelect_v2
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
<<<<<<< HEAD
 800dbc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbc2:	781b      	ldrb	r3, [r3, #0]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d102      	bne.n	800dbce <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800dbc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dbca:	2200      	movs	r2, #0
 800dbcc:	815a      	strh	r2, [r3, #10]
=======
 800cb20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb22:	781b      	ldrb	r3, [r3, #0]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d102      	bne.n	800cb2e <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800cb28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	815a      	strh	r2, [r3, #10]
>>>>>>> ModeSelect_v2

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
<<<<<<< HEAD
 800dbce:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800dbd2:	461a      	mov	r2, r3
 800dbd4:	2101      	movs	r1, #1
 800dbd6:	68f8      	ldr	r0, [r7, #12]
 800dbd8:	f7fc f8cc 	bl	8009d74 <VL53L0X_GetLimitCheckEnable>
 800dbdc:	4603      	mov	r3, r0
 800dbde:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
=======
 800cb2e:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800cb32:	461a      	mov	r2, r3
 800cb34:	2101      	movs	r1, #1
 800cb36:	68f8      	ldr	r0, [r7, #12]
 800cb38:	f7fc f8cc 	bl	8008cd4 <VL53L0X_GetLimitCheckEnable>
 800cb3c:	4603      	mov	r3, r0
 800cb3e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
>>>>>>> ModeSelect_v2
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
<<<<<<< HEAD
 800dbe2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d14f      	bne.n	800dc8a <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800dbea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d003      	beq.n	800dbfa <VL53L0X_get_pal_range_status+0x31a>
 800dbf2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800dbf6:	2b01      	cmp	r3, #1
 800dbf8:	d103      	bne.n	800dc02 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800dbfa:	2301      	movs	r3, #1
 800dbfc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dc00:	e002      	b.n	800dc08 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800dc02:	2300      	movs	r3, #0
 800dc04:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800dc0e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800dc12:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800dc16:	2b04      	cmp	r3, #4
 800dc18:	d003      	beq.n	800dc22 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800dc1a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d103      	bne.n	800dc2a <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800dc22:	2301      	movs	r3, #1
 800dc24:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dc28:	e002      	b.n	800dc30 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800dc36:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
=======
 800cb42:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d14f      	bne.n	800cbea <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800cb4a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d003      	beq.n	800cb5a <VL53L0X_get_pal_range_status+0x31a>
 800cb52:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800cb56:	2b01      	cmp	r3, #1
 800cb58:	d103      	bne.n	800cb62 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800cb5a:	2301      	movs	r3, #1
 800cb5c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb60:	e002      	b.n	800cb68 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800cb62:	2300      	movs	r3, #0
 800cb64:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800cb6e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800cb72:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800cb76:	2b04      	cmp	r3, #4
 800cb78:	d003      	beq.n	800cb82 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800cb7a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d103      	bne.n	800cb8a <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800cb82:	2301      	movs	r3, #1
 800cb84:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb88:	e002      	b.n	800cb90 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800cb96:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
>>>>>>> ModeSelect_v2
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
<<<<<<< HEAD
 800dc3a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d003      	beq.n	800dc4a <VL53L0X_get_pal_range_status+0x36a>
 800dc42:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dc46:	2b01      	cmp	r3, #1
 800dc48:	d103      	bne.n	800dc52 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800dc4a:	2301      	movs	r3, #1
 800dc4c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dc50:	e002      	b.n	800dc58 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800dc52:	2300      	movs	r3, #0
 800dc54:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800dc5e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800dc62:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d003      	beq.n	800dc72 <VL53L0X_get_pal_range_status+0x392>
 800dc6a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800dc6e:	2b01      	cmp	r3, #1
 800dc70:	d103      	bne.n	800dc7a <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800dc72:	2301      	movs	r3, #1
 800dc74:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dc78:	e002      	b.n	800dc80 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800dc86:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
=======
 800cb9a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d003      	beq.n	800cbaa <VL53L0X_get_pal_range_status+0x36a>
 800cba2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cba6:	2b01      	cmp	r3, #1
 800cba8:	d103      	bne.n	800cbb2 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800cbaa:	2301      	movs	r3, #1
 800cbac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbb0:	e002      	b.n	800cbb8 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800cbbe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800cbc2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d003      	beq.n	800cbd2 <VL53L0X_get_pal_range_status+0x392>
 800cbca:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800cbce:	2b01      	cmp	r3, #1
 800cbd0:	d103      	bne.n	800cbda <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800cbd2:	2301      	movs	r3, #1
 800cbd4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbd8:	e002      	b.n	800cbe0 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800cbda:	2300      	movs	r3, #0
 800cbdc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800cbe6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
>>>>>>> ModeSelect_v2
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
<<<<<<< HEAD
 800dc8a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800dc8e:	4618      	mov	r0, r3
 800dc90:	3740      	adds	r7, #64	; 0x40
 800dc92:	46bd      	mov	sp, r7
 800dc94:	bd80      	pop	{r7, pc}

0800dc96 <_I2CWrite>:
=======
 800cbea:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800cbee:	4618      	mov	r0, r3
 800cbf0:	3740      	adds	r7, #64	; 0x40
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bd80      	pop	{r7, pc}

0800cbf6 <_I2CWrite>:
>>>>>>> ModeSelect_v2
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
<<<<<<< HEAD
 800dc96:	b580      	push	{r7, lr}
 800dc98:	b088      	sub	sp, #32
 800dc9a:	af02      	add	r7, sp, #8
 800dc9c:	60f8      	str	r0, [r7, #12]
 800dc9e:	60b9      	str	r1, [r7, #8]
 800dca0:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	330a      	adds	r3, #10
 800dca6:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800dcb4:	b299      	uxth	r1, r3
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	b29a      	uxth	r2, r3
 800dcba:	697b      	ldr	r3, [r7, #20]
 800dcbc:	9300      	str	r3, [sp, #0]
 800dcbe:	4613      	mov	r3, r2
 800dcc0:	68ba      	ldr	r2, [r7, #8]
 800dcc2:	f7f5 fc05 	bl	80034d0 <HAL_I2C_Master_Transmit>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	613b      	str	r3, [r7, #16]
=======
 800cbf6:	b580      	push	{r7, lr}
 800cbf8:	b088      	sub	sp, #32
 800cbfa:	af02      	add	r7, sp, #8
 800cbfc:	60f8      	str	r0, [r7, #12]
 800cbfe:	60b9      	str	r1, [r7, #8]
 800cc00:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	330a      	adds	r3, #10
 800cc06:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800cc14:	b299      	uxth	r1, r3
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	b29a      	uxth	r2, r3
 800cc1a:	697b      	ldr	r3, [r7, #20]
 800cc1c:	9300      	str	r3, [sp, #0]
 800cc1e:	4613      	mov	r3, r2
 800cc20:	68ba      	ldr	r2, [r7, #8]
 800cc22:	f7f5 fc9b 	bl	800255c <HAL_I2C_Master_Transmit>
 800cc26:	4603      	mov	r3, r0
 800cc28:	613b      	str	r3, [r7, #16]
>>>>>>> ModeSelect_v2
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
<<<<<<< HEAD
 800dcca:	693b      	ldr	r3, [r7, #16]
}
 800dccc:	4618      	mov	r0, r3
 800dcce:	3718      	adds	r7, #24
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	bd80      	pop	{r7, pc}

0800dcd4 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b088      	sub	sp, #32
 800dcd8:	af02      	add	r7, sp, #8
 800dcda:	60f8      	str	r0, [r7, #12]
 800dcdc:	60b9      	str	r1, [r7, #8]
 800dcde:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	330a      	adds	r3, #10
 800dce4:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800dcf2:	f043 0301 	orr.w	r3, r3, #1
 800dcf6:	b2db      	uxtb	r3, r3
 800dcf8:	b299      	uxth	r1, r3
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	b29a      	uxth	r2, r3
 800dcfe:	697b      	ldr	r3, [r7, #20]
 800dd00:	9300      	str	r3, [sp, #0]
 800dd02:	4613      	mov	r3, r2
 800dd04:	68ba      	ldr	r2, [r7, #8]
 800dd06:	f7f5 fcd7 	bl	80036b8 <HAL_I2C_Master_Receive>
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	613b      	str	r3, [r7, #16]
=======
 800cc2a:	693b      	ldr	r3, [r7, #16]
}
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	3718      	adds	r7, #24
 800cc30:	46bd      	mov	sp, r7
 800cc32:	bd80      	pop	{r7, pc}

0800cc34 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b088      	sub	sp, #32
 800cc38:	af02      	add	r7, sp, #8
 800cc3a:	60f8      	str	r0, [r7, #12]
 800cc3c:	60b9      	str	r1, [r7, #8]
 800cc3e:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	330a      	adds	r3, #10
 800cc44:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800cc52:	f043 0301 	orr.w	r3, r3, #1
 800cc56:	b2db      	uxtb	r3, r3
 800cc58:	b299      	uxth	r1, r3
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	b29a      	uxth	r2, r3
 800cc5e:	697b      	ldr	r3, [r7, #20]
 800cc60:	9300      	str	r3, [sp, #0]
 800cc62:	4613      	mov	r3, r2
 800cc64:	68ba      	ldr	r2, [r7, #8]
 800cc66:	f7f5 fd6d 	bl	8002744 <HAL_I2C_Master_Receive>
 800cc6a:	4603      	mov	r3, r0
 800cc6c:	613b      	str	r3, [r7, #16]
>>>>>>> ModeSelect_v2
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
<<<<<<< HEAD
 800dd0e:	693b      	ldr	r3, [r7, #16]
}
 800dd10:	4618      	mov	r0, r3
 800dd12:	3718      	adds	r7, #24
 800dd14:	46bd      	mov	sp, r7
 800dd16:	bd80      	pop	{r7, pc}

0800dd18 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b086      	sub	sp, #24
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	60f8      	str	r0, [r7, #12]
 800dd20:	607a      	str	r2, [r7, #4]
 800dd22:	603b      	str	r3, [r7, #0]
 800dd24:	460b      	mov	r3, r1
 800dd26:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dd28:	2300      	movs	r3, #0
 800dd2a:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800dd2c:	683b      	ldr	r3, [r7, #0]
 800dd2e:	2b3f      	cmp	r3, #63	; 0x3f
 800dd30:	d902      	bls.n	800dd38 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800dd32:	f06f 0303 	mvn.w	r3, #3
 800dd36:	e016      	b.n	800dd66 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800dd38:	4a0d      	ldr	r2, [pc, #52]	; (800dd70 <VL53L0X_WriteMulti+0x58>)
 800dd3a:	7afb      	ldrb	r3, [r7, #11]
 800dd3c:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800dd3e:	683a      	ldr	r2, [r7, #0]
 800dd40:	6879      	ldr	r1, [r7, #4]
 800dd42:	480c      	ldr	r0, [pc, #48]	; (800dd74 <VL53L0X_WriteMulti+0x5c>)
 800dd44:	f000 f998 	bl	800e078 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800dd48:	683b      	ldr	r3, [r7, #0]
 800dd4a:	3301      	adds	r3, #1
 800dd4c:	461a      	mov	r2, r3
 800dd4e:	4908      	ldr	r1, [pc, #32]	; (800dd70 <VL53L0X_WriteMulti+0x58>)
 800dd50:	68f8      	ldr	r0, [r7, #12]
 800dd52:	f7ff ffa0 	bl	800dc96 <_I2CWrite>
 800dd56:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800dd58:	693b      	ldr	r3, [r7, #16]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d001      	beq.n	800dd62 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800dd5e:	23ec      	movs	r3, #236	; 0xec
 800dd60:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800dd62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dd66:	4618      	mov	r0, r3
 800dd68:	3718      	adds	r7, #24
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd80      	pop	{r7, pc}
 800dd6e:	bf00      	nop
 800dd70:	20000810 	.word	0x20000810
 800dd74:	20000811 	.word	0x20000811

0800dd78 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b086      	sub	sp, #24
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	60f8      	str	r0, [r7, #12]
 800dd80:	607a      	str	r2, [r7, #4]
 800dd82:	603b      	str	r3, [r7, #0]
 800dd84:	460b      	mov	r3, r1
 800dd86:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dd88:	2300      	movs	r3, #0
 800dd8a:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800dd8c:	f107 030b 	add.w	r3, r7, #11
 800dd90:	2201      	movs	r2, #1
 800dd92:	4619      	mov	r1, r3
 800dd94:	68f8      	ldr	r0, [r7, #12]
 800dd96:	f7ff ff7e 	bl	800dc96 <_I2CWrite>
 800dd9a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800dd9c:	693b      	ldr	r3, [r7, #16]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d002      	beq.n	800dda8 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800dda2:	23ec      	movs	r3, #236	; 0xec
 800dda4:	75fb      	strb	r3, [r7, #23]
        goto done;
 800dda6:	e00c      	b.n	800ddc2 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800dda8:	683a      	ldr	r2, [r7, #0]
 800ddaa:	6879      	ldr	r1, [r7, #4]
 800ddac:	68f8      	ldr	r0, [r7, #12]
 800ddae:	f7ff ff91 	bl	800dcd4 <_I2CRead>
 800ddb2:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ddb4:	693b      	ldr	r3, [r7, #16]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d002      	beq.n	800ddc0 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ddba:	23ec      	movs	r3, #236	; 0xec
 800ddbc:	75fb      	strb	r3, [r7, #23]
 800ddbe:	e000      	b.n	800ddc2 <VL53L0X_ReadMulti+0x4a>
    }
done:
 800ddc0:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800ddc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	3718      	adds	r7, #24
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	bd80      	pop	{r7, pc}
	...

0800ddd0 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b084      	sub	sp, #16
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
 800ddd8:	460b      	mov	r3, r1
 800ddda:	70fb      	strb	r3, [r7, #3]
 800dddc:	4613      	mov	r3, r2
 800ddde:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dde0:	2300      	movs	r3, #0
 800dde2:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800dde4:	4a0b      	ldr	r2, [pc, #44]	; (800de14 <VL53L0X_WrByte+0x44>)
 800dde6:	78fb      	ldrb	r3, [r7, #3]
 800dde8:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800ddea:	4a0a      	ldr	r2, [pc, #40]	; (800de14 <VL53L0X_WrByte+0x44>)
 800ddec:	78bb      	ldrb	r3, [r7, #2]
 800ddee:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800ddf0:	2202      	movs	r2, #2
 800ddf2:	4908      	ldr	r1, [pc, #32]	; (800de14 <VL53L0X_WrByte+0x44>)
 800ddf4:	6878      	ldr	r0, [r7, #4]
 800ddf6:	f7ff ff4e 	bl	800dc96 <_I2CWrite>
 800ddfa:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800ddfc:	68bb      	ldr	r3, [r7, #8]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d001      	beq.n	800de06 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800de02:	23ec      	movs	r3, #236	; 0xec
 800de04:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800de06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800de0a:	4618      	mov	r0, r3
 800de0c:	3710      	adds	r7, #16
 800de0e:	46bd      	mov	sp, r7
 800de10:	bd80      	pop	{r7, pc}
 800de12:	bf00      	nop
 800de14:	20000810 	.word	0x20000810

0800de18 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800de18:	b580      	push	{r7, lr}
 800de1a:	b084      	sub	sp, #16
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
 800de20:	460b      	mov	r3, r1
 800de22:	70fb      	strb	r3, [r7, #3]
 800de24:	4613      	mov	r3, r2
 800de26:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800de28:	2300      	movs	r3, #0
 800de2a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800de2c:	4a0e      	ldr	r2, [pc, #56]	; (800de68 <VL53L0X_WrWord+0x50>)
 800de2e:	78fb      	ldrb	r3, [r7, #3]
 800de30:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800de32:	883b      	ldrh	r3, [r7, #0]
 800de34:	0a1b      	lsrs	r3, r3, #8
 800de36:	b29b      	uxth	r3, r3
 800de38:	b2da      	uxtb	r2, r3
 800de3a:	4b0b      	ldr	r3, [pc, #44]	; (800de68 <VL53L0X_WrWord+0x50>)
 800de3c:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800de3e:	883b      	ldrh	r3, [r7, #0]
 800de40:	b2da      	uxtb	r2, r3
 800de42:	4b09      	ldr	r3, [pc, #36]	; (800de68 <VL53L0X_WrWord+0x50>)
 800de44:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800de46:	2203      	movs	r2, #3
 800de48:	4907      	ldr	r1, [pc, #28]	; (800de68 <VL53L0X_WrWord+0x50>)
 800de4a:	6878      	ldr	r0, [r7, #4]
 800de4c:	f7ff ff23 	bl	800dc96 <_I2CWrite>
 800de50:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800de52:	68bb      	ldr	r3, [r7, #8]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d001      	beq.n	800de5c <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800de58:	23ec      	movs	r3, #236	; 0xec
 800de5a:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800de5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800de60:	4618      	mov	r0, r3
 800de62:	3710      	adds	r7, #16
 800de64:	46bd      	mov	sp, r7
 800de66:	bd80      	pop	{r7, pc}
 800de68:	20000810 	.word	0x20000810

0800de6c <VL53L0X_UpdateByte>:
=======
 800cc6e:	693b      	ldr	r3, [r7, #16]
}
 800cc70:	4618      	mov	r0, r3
 800cc72:	3718      	adds	r7, #24
 800cc74:	46bd      	mov	sp, r7
 800cc76:	bd80      	pop	{r7, pc}

0800cc78 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b086      	sub	sp, #24
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	60f8      	str	r0, [r7, #12]
 800cc80:	607a      	str	r2, [r7, #4]
 800cc82:	603b      	str	r3, [r7, #0]
 800cc84:	460b      	mov	r3, r1
 800cc86:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cc88:	2300      	movs	r3, #0
 800cc8a:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	2b3f      	cmp	r3, #63	; 0x3f
 800cc90:	d902      	bls.n	800cc98 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800cc92:	f06f 0303 	mvn.w	r3, #3
 800cc96:	e016      	b.n	800ccc6 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800cc98:	4a0d      	ldr	r2, [pc, #52]	; (800ccd0 <VL53L0X_WriteMulti+0x58>)
 800cc9a:	7afb      	ldrb	r3, [r7, #11]
 800cc9c:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800cc9e:	683a      	ldr	r2, [r7, #0]
 800cca0:	6879      	ldr	r1, [r7, #4]
 800cca2:	480c      	ldr	r0, [pc, #48]	; (800ccd4 <VL53L0X_WriteMulti+0x5c>)
 800cca4:	f000 f998 	bl	800cfd8 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	3301      	adds	r3, #1
 800ccac:	461a      	mov	r2, r3
 800ccae:	4908      	ldr	r1, [pc, #32]	; (800ccd0 <VL53L0X_WriteMulti+0x58>)
 800ccb0:	68f8      	ldr	r0, [r7, #12]
 800ccb2:	f7ff ffa0 	bl	800cbf6 <_I2CWrite>
 800ccb6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ccb8:	693b      	ldr	r3, [r7, #16]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d001      	beq.n	800ccc2 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ccbe:	23ec      	movs	r3, #236	; 0xec
 800ccc0:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800ccc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	3718      	adds	r7, #24
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bd80      	pop	{r7, pc}
 800ccce:	bf00      	nop
 800ccd0:	200007ac 	.word	0x200007ac
 800ccd4:	200007ad 	.word	0x200007ad

0800ccd8 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b086      	sub	sp, #24
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	60f8      	str	r0, [r7, #12]
 800cce0:	607a      	str	r2, [r7, #4]
 800cce2:	603b      	str	r3, [r7, #0]
 800cce4:	460b      	mov	r3, r1
 800cce6:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cce8:	2300      	movs	r3, #0
 800ccea:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800ccec:	f107 030b 	add.w	r3, r7, #11
 800ccf0:	2201      	movs	r2, #1
 800ccf2:	4619      	mov	r1, r3
 800ccf4:	68f8      	ldr	r0, [r7, #12]
 800ccf6:	f7ff ff7e 	bl	800cbf6 <_I2CWrite>
 800ccfa:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ccfc:	693b      	ldr	r3, [r7, #16]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d002      	beq.n	800cd08 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800cd02:	23ec      	movs	r3, #236	; 0xec
 800cd04:	75fb      	strb	r3, [r7, #23]
        goto done;
 800cd06:	e00c      	b.n	800cd22 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800cd08:	683a      	ldr	r2, [r7, #0]
 800cd0a:	6879      	ldr	r1, [r7, #4]
 800cd0c:	68f8      	ldr	r0, [r7, #12]
 800cd0e:	f7ff ff91 	bl	800cc34 <_I2CRead>
 800cd12:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800cd14:	693b      	ldr	r3, [r7, #16]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d002      	beq.n	800cd20 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800cd1a:	23ec      	movs	r3, #236	; 0xec
 800cd1c:	75fb      	strb	r3, [r7, #23]
 800cd1e:	e000      	b.n	800cd22 <VL53L0X_ReadMulti+0x4a>
    }
done:
 800cd20:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800cd22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cd26:	4618      	mov	r0, r3
 800cd28:	3718      	adds	r7, #24
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}
	...

0800cd30 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b084      	sub	sp, #16
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
 800cd38:	460b      	mov	r3, r1
 800cd3a:	70fb      	strb	r3, [r7, #3]
 800cd3c:	4613      	mov	r3, r2
 800cd3e:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cd40:	2300      	movs	r3, #0
 800cd42:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800cd44:	4a0b      	ldr	r2, [pc, #44]	; (800cd74 <VL53L0X_WrByte+0x44>)
 800cd46:	78fb      	ldrb	r3, [r7, #3]
 800cd48:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800cd4a:	4a0a      	ldr	r2, [pc, #40]	; (800cd74 <VL53L0X_WrByte+0x44>)
 800cd4c:	78bb      	ldrb	r3, [r7, #2]
 800cd4e:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800cd50:	2202      	movs	r2, #2
 800cd52:	4908      	ldr	r1, [pc, #32]	; (800cd74 <VL53L0X_WrByte+0x44>)
 800cd54:	6878      	ldr	r0, [r7, #4]
 800cd56:	f7ff ff4e 	bl	800cbf6 <_I2CWrite>
 800cd5a:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d001      	beq.n	800cd66 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800cd62:	23ec      	movs	r3, #236	; 0xec
 800cd64:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800cd66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3710      	adds	r7, #16
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}
 800cd72:	bf00      	nop
 800cd74:	200007ac 	.word	0x200007ac

0800cd78 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b084      	sub	sp, #16
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
 800cd80:	460b      	mov	r3, r1
 800cd82:	70fb      	strb	r3, [r7, #3]
 800cd84:	4613      	mov	r3, r2
 800cd86:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cd88:	2300      	movs	r3, #0
 800cd8a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800cd8c:	4a0e      	ldr	r2, [pc, #56]	; (800cdc8 <VL53L0X_WrWord+0x50>)
 800cd8e:	78fb      	ldrb	r3, [r7, #3]
 800cd90:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800cd92:	883b      	ldrh	r3, [r7, #0]
 800cd94:	0a1b      	lsrs	r3, r3, #8
 800cd96:	b29b      	uxth	r3, r3
 800cd98:	b2da      	uxtb	r2, r3
 800cd9a:	4b0b      	ldr	r3, [pc, #44]	; (800cdc8 <VL53L0X_WrWord+0x50>)
 800cd9c:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800cd9e:	883b      	ldrh	r3, [r7, #0]
 800cda0:	b2da      	uxtb	r2, r3
 800cda2:	4b09      	ldr	r3, [pc, #36]	; (800cdc8 <VL53L0X_WrWord+0x50>)
 800cda4:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800cda6:	2203      	movs	r2, #3
 800cda8:	4907      	ldr	r1, [pc, #28]	; (800cdc8 <VL53L0X_WrWord+0x50>)
 800cdaa:	6878      	ldr	r0, [r7, #4]
 800cdac:	f7ff ff23 	bl	800cbf6 <_I2CWrite>
 800cdb0:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800cdb2:	68bb      	ldr	r3, [r7, #8]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d001      	beq.n	800cdbc <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800cdb8:	23ec      	movs	r3, #236	; 0xec
 800cdba:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800cdbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	3710      	adds	r7, #16
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bd80      	pop	{r7, pc}
 800cdc8:	200007ac 	.word	0x200007ac

0800cdcc <VL53L0X_UpdateByte>:
>>>>>>> ModeSelect_v2
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
<<<<<<< HEAD
 800de6c:	b580      	push	{r7, lr}
 800de6e:	b084      	sub	sp, #16
 800de70:	af00      	add	r7, sp, #0
 800de72:	6078      	str	r0, [r7, #4]
 800de74:	4608      	mov	r0, r1
 800de76:	4611      	mov	r1, r2
 800de78:	461a      	mov	r2, r3
 800de7a:	4603      	mov	r3, r0
 800de7c:	70fb      	strb	r3, [r7, #3]
 800de7e:	460b      	mov	r3, r1
 800de80:	70bb      	strb	r3, [r7, #2]
 800de82:	4613      	mov	r3, r2
 800de84:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800de86:	2300      	movs	r3, #0
 800de88:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800de8a:	f107 020e 	add.w	r2, r7, #14
 800de8e:	78fb      	ldrb	r3, [r7, #3]
 800de90:	4619      	mov	r1, r3
 800de92:	6878      	ldr	r0, [r7, #4]
 800de94:	f000 f81e 	bl	800ded4 <VL53L0X_RdByte>
 800de98:	4603      	mov	r3, r0
 800de9a:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800de9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d110      	bne.n	800dec6 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800dea4:	7bba      	ldrb	r2, [r7, #14]
 800dea6:	78bb      	ldrb	r3, [r7, #2]
 800dea8:	4013      	ands	r3, r2
 800deaa:	b2da      	uxtb	r2, r3
 800deac:	787b      	ldrb	r3, [r7, #1]
 800deae:	4313      	orrs	r3, r2
 800deb0:	b2db      	uxtb	r3, r3
 800deb2:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800deb4:	7bba      	ldrb	r2, [r7, #14]
 800deb6:	78fb      	ldrb	r3, [r7, #3]
 800deb8:	4619      	mov	r1, r3
 800deba:	6878      	ldr	r0, [r7, #4]
 800debc:	f7ff ff88 	bl	800ddd0 <VL53L0X_WrByte>
 800dec0:	4603      	mov	r3, r0
 800dec2:	73fb      	strb	r3, [r7, #15]
 800dec4:	e000      	b.n	800dec8 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800dec6:	bf00      	nop
done:
    return Status;
 800dec8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800decc:	4618      	mov	r0, r3
 800dece:	3710      	adds	r7, #16
 800ded0:	46bd      	mov	sp, r7
 800ded2:	bd80      	pop	{r7, pc}

0800ded4 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b086      	sub	sp, #24
 800ded8:	af00      	add	r7, sp, #0
 800deda:	60f8      	str	r0, [r7, #12]
 800dedc:	460b      	mov	r3, r1
 800dede:	607a      	str	r2, [r7, #4]
 800dee0:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dee2:	2300      	movs	r3, #0
 800dee4:	75fb      	strb	r3, [r7, #23]
=======
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b084      	sub	sp, #16
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
 800cdd4:	4608      	mov	r0, r1
 800cdd6:	4611      	mov	r1, r2
 800cdd8:	461a      	mov	r2, r3
 800cdda:	4603      	mov	r3, r0
 800cddc:	70fb      	strb	r3, [r7, #3]
 800cdde:	460b      	mov	r3, r1
 800cde0:	70bb      	strb	r3, [r7, #2]
 800cde2:	4613      	mov	r3, r2
 800cde4:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cde6:	2300      	movs	r3, #0
 800cde8:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800cdea:	f107 020e 	add.w	r2, r7, #14
 800cdee:	78fb      	ldrb	r3, [r7, #3]
 800cdf0:	4619      	mov	r1, r3
 800cdf2:	6878      	ldr	r0, [r7, #4]
 800cdf4:	f000 f81e 	bl	800ce34 <VL53L0X_RdByte>
 800cdf8:	4603      	mov	r3, r0
 800cdfa:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800cdfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d110      	bne.n	800ce26 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800ce04:	7bba      	ldrb	r2, [r7, #14]
 800ce06:	78bb      	ldrb	r3, [r7, #2]
 800ce08:	4013      	ands	r3, r2
 800ce0a:	b2da      	uxtb	r2, r3
 800ce0c:	787b      	ldrb	r3, [r7, #1]
 800ce0e:	4313      	orrs	r3, r2
 800ce10:	b2db      	uxtb	r3, r3
 800ce12:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800ce14:	7bba      	ldrb	r2, [r7, #14]
 800ce16:	78fb      	ldrb	r3, [r7, #3]
 800ce18:	4619      	mov	r1, r3
 800ce1a:	6878      	ldr	r0, [r7, #4]
 800ce1c:	f7ff ff88 	bl	800cd30 <VL53L0X_WrByte>
 800ce20:	4603      	mov	r3, r0
 800ce22:	73fb      	strb	r3, [r7, #15]
 800ce24:	e000      	b.n	800ce28 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800ce26:	bf00      	nop
done:
    return Status;
 800ce28:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	3710      	adds	r7, #16
 800ce30:	46bd      	mov	sp, r7
 800ce32:	bd80      	pop	{r7, pc}

0800ce34 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b086      	sub	sp, #24
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	60f8      	str	r0, [r7, #12]
 800ce3c:	460b      	mov	r3, r1
 800ce3e:	607a      	str	r2, [r7, #4]
 800ce40:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ce42:	2300      	movs	r3, #0
 800ce44:	75fb      	strb	r3, [r7, #23]
>>>>>>> ModeSelect_v2
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
<<<<<<< HEAD
 800dee6:	f107 030b 	add.w	r3, r7, #11
 800deea:	2201      	movs	r2, #1
 800deec:	4619      	mov	r1, r3
 800deee:	68f8      	ldr	r0, [r7, #12]
 800def0:	f7ff fed1 	bl	800dc96 <_I2CWrite>
 800def4:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800def6:	693b      	ldr	r3, [r7, #16]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d002      	beq.n	800df02 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800defc:	23ec      	movs	r3, #236	; 0xec
 800defe:	75fb      	strb	r3, [r7, #23]
        goto done;
 800df00:	e00c      	b.n	800df1c <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800df02:	2201      	movs	r2, #1
 800df04:	6879      	ldr	r1, [r7, #4]
 800df06:	68f8      	ldr	r0, [r7, #12]
 800df08:	f7ff fee4 	bl	800dcd4 <_I2CRead>
 800df0c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800df0e:	693b      	ldr	r3, [r7, #16]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d002      	beq.n	800df1a <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800df14:	23ec      	movs	r3, #236	; 0xec
 800df16:	75fb      	strb	r3, [r7, #23]
 800df18:	e000      	b.n	800df1c <VL53L0X_RdByte+0x48>
    }
done:
 800df1a:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800df1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800df20:	4618      	mov	r0, r3
 800df22:	3718      	adds	r7, #24
 800df24:	46bd      	mov	sp, r7
 800df26:	bd80      	pop	{r7, pc}

0800df28 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800df28:	b580      	push	{r7, lr}
 800df2a:	b086      	sub	sp, #24
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	60f8      	str	r0, [r7, #12]
 800df30:	460b      	mov	r3, r1
 800df32:	607a      	str	r2, [r7, #4]
 800df34:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800df36:	2300      	movs	r3, #0
 800df38:	75fb      	strb	r3, [r7, #23]
=======
 800ce46:	f107 030b 	add.w	r3, r7, #11
 800ce4a:	2201      	movs	r2, #1
 800ce4c:	4619      	mov	r1, r3
 800ce4e:	68f8      	ldr	r0, [r7, #12]
 800ce50:	f7ff fed1 	bl	800cbf6 <_I2CWrite>
 800ce54:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800ce56:	693b      	ldr	r3, [r7, #16]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d002      	beq.n	800ce62 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ce5c:	23ec      	movs	r3, #236	; 0xec
 800ce5e:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ce60:	e00c      	b.n	800ce7c <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800ce62:	2201      	movs	r2, #1
 800ce64:	6879      	ldr	r1, [r7, #4]
 800ce66:	68f8      	ldr	r0, [r7, #12]
 800ce68:	f7ff fee4 	bl	800cc34 <_I2CRead>
 800ce6c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ce6e:	693b      	ldr	r3, [r7, #16]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d002      	beq.n	800ce7a <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ce74:	23ec      	movs	r3, #236	; 0xec
 800ce76:	75fb      	strb	r3, [r7, #23]
 800ce78:	e000      	b.n	800ce7c <VL53L0X_RdByte+0x48>
    }
done:
 800ce7a:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800ce7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ce80:	4618      	mov	r0, r3
 800ce82:	3718      	adds	r7, #24
 800ce84:	46bd      	mov	sp, r7
 800ce86:	bd80      	pop	{r7, pc}

0800ce88 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b086      	sub	sp, #24
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	60f8      	str	r0, [r7, #12]
 800ce90:	460b      	mov	r3, r1
 800ce92:	607a      	str	r2, [r7, #4]
 800ce94:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ce96:	2300      	movs	r3, #0
 800ce98:	75fb      	strb	r3, [r7, #23]
>>>>>>> ModeSelect_v2
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
<<<<<<< HEAD
 800df3a:	f107 030b 	add.w	r3, r7, #11
 800df3e:	2201      	movs	r2, #1
 800df40:	4619      	mov	r1, r3
 800df42:	68f8      	ldr	r0, [r7, #12]
 800df44:	f7ff fea7 	bl	800dc96 <_I2CWrite>
 800df48:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800df4a:	693b      	ldr	r3, [r7, #16]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d002      	beq.n	800df56 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800df50:	23ec      	movs	r3, #236	; 0xec
 800df52:	75fb      	strb	r3, [r7, #23]
        goto done;
 800df54:	e017      	b.n	800df86 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800df56:	2202      	movs	r2, #2
 800df58:	490e      	ldr	r1, [pc, #56]	; (800df94 <VL53L0X_RdWord+0x6c>)
 800df5a:	68f8      	ldr	r0, [r7, #12]
 800df5c:	f7ff feba 	bl	800dcd4 <_I2CRead>
 800df60:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800df62:	693b      	ldr	r3, [r7, #16]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d002      	beq.n	800df6e <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800df68:	23ec      	movs	r3, #236	; 0xec
 800df6a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800df6c:	e00b      	b.n	800df86 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800df6e:	4b09      	ldr	r3, [pc, #36]	; (800df94 <VL53L0X_RdWord+0x6c>)
 800df70:	781b      	ldrb	r3, [r3, #0]
 800df72:	b29b      	uxth	r3, r3
 800df74:	021b      	lsls	r3, r3, #8
 800df76:	b29a      	uxth	r2, r3
 800df78:	4b06      	ldr	r3, [pc, #24]	; (800df94 <VL53L0X_RdWord+0x6c>)
 800df7a:	785b      	ldrb	r3, [r3, #1]
 800df7c:	b29b      	uxth	r3, r3
 800df7e:	4413      	add	r3, r2
 800df80:	b29a      	uxth	r2, r3
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800df86:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800df8a:	4618      	mov	r0, r3
 800df8c:	3718      	adds	r7, #24
 800df8e:	46bd      	mov	sp, r7
 800df90:	bd80      	pop	{r7, pc}
 800df92:	bf00      	nop
 800df94:	20000810 	.word	0x20000810

0800df98 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800df98:	b580      	push	{r7, lr}
 800df9a:	b086      	sub	sp, #24
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	60f8      	str	r0, [r7, #12]
 800dfa0:	460b      	mov	r3, r1
 800dfa2:	607a      	str	r2, [r7, #4]
 800dfa4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	75fb      	strb	r3, [r7, #23]
=======
 800ce9a:	f107 030b 	add.w	r3, r7, #11
 800ce9e:	2201      	movs	r2, #1
 800cea0:	4619      	mov	r1, r3
 800cea2:	68f8      	ldr	r0, [r7, #12]
 800cea4:	f7ff fea7 	bl	800cbf6 <_I2CWrite>
 800cea8:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800ceaa:	693b      	ldr	r3, [r7, #16]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d002      	beq.n	800ceb6 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ceb0:	23ec      	movs	r3, #236	; 0xec
 800ceb2:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ceb4:	e017      	b.n	800cee6 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800ceb6:	2202      	movs	r2, #2
 800ceb8:	490e      	ldr	r1, [pc, #56]	; (800cef4 <VL53L0X_RdWord+0x6c>)
 800ceba:	68f8      	ldr	r0, [r7, #12]
 800cebc:	f7ff feba 	bl	800cc34 <_I2CRead>
 800cec0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800cec2:	693b      	ldr	r3, [r7, #16]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d002      	beq.n	800cece <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800cec8:	23ec      	movs	r3, #236	; 0xec
 800ceca:	75fb      	strb	r3, [r7, #23]
        goto done;
 800cecc:	e00b      	b.n	800cee6 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800cece:	4b09      	ldr	r3, [pc, #36]	; (800cef4 <VL53L0X_RdWord+0x6c>)
 800ced0:	781b      	ldrb	r3, [r3, #0]
 800ced2:	b29b      	uxth	r3, r3
 800ced4:	021b      	lsls	r3, r3, #8
 800ced6:	b29a      	uxth	r2, r3
 800ced8:	4b06      	ldr	r3, [pc, #24]	; (800cef4 <VL53L0X_RdWord+0x6c>)
 800ceda:	785b      	ldrb	r3, [r3, #1]
 800cedc:	b29b      	uxth	r3, r3
 800cede:	4413      	add	r3, r2
 800cee0:	b29a      	uxth	r2, r3
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800cee6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ceea:	4618      	mov	r0, r3
 800ceec:	3718      	adds	r7, #24
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}
 800cef2:	bf00      	nop
 800cef4:	200007ac 	.word	0x200007ac

0800cef8 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b086      	sub	sp, #24
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	60f8      	str	r0, [r7, #12]
 800cf00:	460b      	mov	r3, r1
 800cf02:	607a      	str	r2, [r7, #4]
 800cf04:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cf06:	2300      	movs	r3, #0
 800cf08:	75fb      	strb	r3, [r7, #23]
>>>>>>> ModeSelect_v2
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
<<<<<<< HEAD
 800dfaa:	f107 030b 	add.w	r3, r7, #11
 800dfae:	2201      	movs	r2, #1
 800dfb0:	4619      	mov	r1, r3
 800dfb2:	68f8      	ldr	r0, [r7, #12]
 800dfb4:	f7ff fe6f 	bl	800dc96 <_I2CWrite>
 800dfb8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800dfba:	693b      	ldr	r3, [r7, #16]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d002      	beq.n	800dfc6 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800dfc0:	23ec      	movs	r3, #236	; 0xec
 800dfc2:	75fb      	strb	r3, [r7, #23]
        goto done;
 800dfc4:	e01b      	b.n	800dffe <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800dfc6:	2204      	movs	r2, #4
 800dfc8:	4910      	ldr	r1, [pc, #64]	; (800e00c <VL53L0X_RdDWord+0x74>)
 800dfca:	68f8      	ldr	r0, [r7, #12]
 800dfcc:	f7ff fe82 	bl	800dcd4 <_I2CRead>
 800dfd0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800dfd2:	693b      	ldr	r3, [r7, #16]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d002      	beq.n	800dfde <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800dfd8:	23ec      	movs	r3, #236	; 0xec
 800dfda:	75fb      	strb	r3, [r7, #23]
        goto done;
 800dfdc:	e00f      	b.n	800dffe <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800dfde:	4b0b      	ldr	r3, [pc, #44]	; (800e00c <VL53L0X_RdDWord+0x74>)
 800dfe0:	781b      	ldrb	r3, [r3, #0]
 800dfe2:	061a      	lsls	r2, r3, #24
 800dfe4:	4b09      	ldr	r3, [pc, #36]	; (800e00c <VL53L0X_RdDWord+0x74>)
 800dfe6:	785b      	ldrb	r3, [r3, #1]
 800dfe8:	041b      	lsls	r3, r3, #16
 800dfea:	441a      	add	r2, r3
 800dfec:	4b07      	ldr	r3, [pc, #28]	; (800e00c <VL53L0X_RdDWord+0x74>)
 800dfee:	789b      	ldrb	r3, [r3, #2]
 800dff0:	021b      	lsls	r3, r3, #8
 800dff2:	4413      	add	r3, r2
 800dff4:	4a05      	ldr	r2, [pc, #20]	; (800e00c <VL53L0X_RdDWord+0x74>)
 800dff6:	78d2      	ldrb	r2, [r2, #3]
 800dff8:	441a      	add	r2, r3
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	601a      	str	r2, [r3, #0]
=======
 800cf0a:	f107 030b 	add.w	r3, r7, #11
 800cf0e:	2201      	movs	r2, #1
 800cf10:	4619      	mov	r1, r3
 800cf12:	68f8      	ldr	r0, [r7, #12]
 800cf14:	f7ff fe6f 	bl	800cbf6 <_I2CWrite>
 800cf18:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800cf1a:	693b      	ldr	r3, [r7, #16]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d002      	beq.n	800cf26 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800cf20:	23ec      	movs	r3, #236	; 0xec
 800cf22:	75fb      	strb	r3, [r7, #23]
        goto done;
 800cf24:	e01b      	b.n	800cf5e <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800cf26:	2204      	movs	r2, #4
 800cf28:	4910      	ldr	r1, [pc, #64]	; (800cf6c <VL53L0X_RdDWord+0x74>)
 800cf2a:	68f8      	ldr	r0, [r7, #12]
 800cf2c:	f7ff fe82 	bl	800cc34 <_I2CRead>
 800cf30:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800cf32:	693b      	ldr	r3, [r7, #16]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d002      	beq.n	800cf3e <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800cf38:	23ec      	movs	r3, #236	; 0xec
 800cf3a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800cf3c:	e00f      	b.n	800cf5e <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800cf3e:	4b0b      	ldr	r3, [pc, #44]	; (800cf6c <VL53L0X_RdDWord+0x74>)
 800cf40:	781b      	ldrb	r3, [r3, #0]
 800cf42:	061a      	lsls	r2, r3, #24
 800cf44:	4b09      	ldr	r3, [pc, #36]	; (800cf6c <VL53L0X_RdDWord+0x74>)
 800cf46:	785b      	ldrb	r3, [r3, #1]
 800cf48:	041b      	lsls	r3, r3, #16
 800cf4a:	441a      	add	r2, r3
 800cf4c:	4b07      	ldr	r3, [pc, #28]	; (800cf6c <VL53L0X_RdDWord+0x74>)
 800cf4e:	789b      	ldrb	r3, [r3, #2]
 800cf50:	021b      	lsls	r3, r3, #8
 800cf52:	4413      	add	r3, r2
 800cf54:	4a05      	ldr	r2, [pc, #20]	; (800cf6c <VL53L0X_RdDWord+0x74>)
 800cf56:	78d2      	ldrb	r2, [r2, #3]
 800cf58:	441a      	add	r2, r3
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	601a      	str	r2, [r3, #0]
>>>>>>> ModeSelect_v2

done:
    VL53L0X_PutI2cBus();
    return Status;
<<<<<<< HEAD
 800dffe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e002:	4618      	mov	r0, r3
 800e004:	3718      	adds	r7, #24
 800e006:	46bd      	mov	sp, r7
 800e008:	bd80      	pop	{r7, pc}
 800e00a:	bf00      	nop
 800e00c:	20000810 	.word	0x20000810

0800e010 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800e010:	b580      	push	{r7, lr}
 800e012:	b084      	sub	sp, #16
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800e018:	2300      	movs	r3, #0
 800e01a:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800e01c:	2002      	movs	r0, #2
 800e01e:	f7f4 fdfd 	bl	8002c1c <HAL_Delay>
    return status;
 800e022:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e026:	4618      	mov	r0, r3
 800e028:	3710      	adds	r7, #16
 800e02a:	46bd      	mov	sp, r7
 800e02c:	bd80      	pop	{r7, pc}
	...

0800e030 <__libc_init_array>:
 800e030:	b570      	push	{r4, r5, r6, lr}
 800e032:	4d0d      	ldr	r5, [pc, #52]	; (800e068 <__libc_init_array+0x38>)
 800e034:	4c0d      	ldr	r4, [pc, #52]	; (800e06c <__libc_init_array+0x3c>)
 800e036:	1b64      	subs	r4, r4, r5
 800e038:	10a4      	asrs	r4, r4, #2
 800e03a:	2600      	movs	r6, #0
 800e03c:	42a6      	cmp	r6, r4
 800e03e:	d109      	bne.n	800e054 <__libc_init_array+0x24>
 800e040:	4d0b      	ldr	r5, [pc, #44]	; (800e070 <__libc_init_array+0x40>)
 800e042:	4c0c      	ldr	r4, [pc, #48]	; (800e074 <__libc_init_array+0x44>)
 800e044:	f000 f836 	bl	800e0b4 <_init>
 800e048:	1b64      	subs	r4, r4, r5
 800e04a:	10a4      	asrs	r4, r4, #2
 800e04c:	2600      	movs	r6, #0
 800e04e:	42a6      	cmp	r6, r4
 800e050:	d105      	bne.n	800e05e <__libc_init_array+0x2e>
 800e052:	bd70      	pop	{r4, r5, r6, pc}
 800e054:	f855 3b04 	ldr.w	r3, [r5], #4
 800e058:	4798      	blx	r3
 800e05a:	3601      	adds	r6, #1
 800e05c:	e7ee      	b.n	800e03c <__libc_init_array+0xc>
 800e05e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e062:	4798      	blx	r3
 800e064:	3601      	adds	r6, #1
 800e066:	e7f2      	b.n	800e04e <__libc_init_array+0x1e>
 800e068:	0800e144 	.word	0x0800e144
 800e06c:	0800e144 	.word	0x0800e144
 800e070:	0800e144 	.word	0x0800e144
 800e074:	0800e148 	.word	0x0800e148

0800e078 <memcpy>:
 800e078:	440a      	add	r2, r1
 800e07a:	4291      	cmp	r1, r2
 800e07c:	f100 33ff 	add.w	r3, r0, #4294967295
 800e080:	d100      	bne.n	800e084 <memcpy+0xc>
 800e082:	4770      	bx	lr
 800e084:	b510      	push	{r4, lr}
 800e086:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e08a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e08e:	4291      	cmp	r1, r2
 800e090:	d1f9      	bne.n	800e086 <memcpy+0xe>
 800e092:	bd10      	pop	{r4, pc}

0800e094 <memset>:
 800e094:	4402      	add	r2, r0
 800e096:	4603      	mov	r3, r0
 800e098:	4293      	cmp	r3, r2
 800e09a:	d100      	bne.n	800e09e <memset+0xa>
 800e09c:	4770      	bx	lr
 800e09e:	f803 1b01 	strb.w	r1, [r3], #1
 800e0a2:	e7f9      	b.n	800e098 <memset+0x4>

0800e0a4 <strcpy>:
 800e0a4:	4603      	mov	r3, r0
 800e0a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e0aa:	f803 2b01 	strb.w	r2, [r3], #1
 800e0ae:	2a00      	cmp	r2, #0
 800e0b0:	d1f9      	bne.n	800e0a6 <strcpy+0x2>
 800e0b2:	4770      	bx	lr

0800e0b4 <_init>:
 800e0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0b6:	bf00      	nop
 800e0b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0ba:	bc08      	pop	{r3}
 800e0bc:	469e      	mov	lr, r3
 800e0be:	4770      	bx	lr

0800e0c0 <_fini>:
 800e0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0c2:	bf00      	nop
 800e0c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0c6:	bc08      	pop	{r3}
 800e0c8:	469e      	mov	lr, r3
 800e0ca:	4770      	bx	lr
=======
 800cf5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cf62:	4618      	mov	r0, r3
 800cf64:	3718      	adds	r7, #24
 800cf66:	46bd      	mov	sp, r7
 800cf68:	bd80      	pop	{r7, pc}
 800cf6a:	bf00      	nop
 800cf6c:	200007ac 	.word	0x200007ac

0800cf70 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b084      	sub	sp, #16
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800cf78:	2300      	movs	r3, #0
 800cf7a:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800cf7c:	2002      	movs	r0, #2
 800cf7e:	f7f4 feab 	bl	8001cd8 <HAL_Delay>
    return status;
 800cf82:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cf86:	4618      	mov	r0, r3
 800cf88:	3710      	adds	r7, #16
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	bd80      	pop	{r7, pc}
	...

0800cf90 <__libc_init_array>:
 800cf90:	b570      	push	{r4, r5, r6, lr}
 800cf92:	4d0d      	ldr	r5, [pc, #52]	; (800cfc8 <__libc_init_array+0x38>)
 800cf94:	4c0d      	ldr	r4, [pc, #52]	; (800cfcc <__libc_init_array+0x3c>)
 800cf96:	1b64      	subs	r4, r4, r5
 800cf98:	10a4      	asrs	r4, r4, #2
 800cf9a:	2600      	movs	r6, #0
 800cf9c:	42a6      	cmp	r6, r4
 800cf9e:	d109      	bne.n	800cfb4 <__libc_init_array+0x24>
 800cfa0:	4d0b      	ldr	r5, [pc, #44]	; (800cfd0 <__libc_init_array+0x40>)
 800cfa2:	4c0c      	ldr	r4, [pc, #48]	; (800cfd4 <__libc_init_array+0x44>)
 800cfa4:	f000 f836 	bl	800d014 <_init>
 800cfa8:	1b64      	subs	r4, r4, r5
 800cfaa:	10a4      	asrs	r4, r4, #2
 800cfac:	2600      	movs	r6, #0
 800cfae:	42a6      	cmp	r6, r4
 800cfb0:	d105      	bne.n	800cfbe <__libc_init_array+0x2e>
 800cfb2:	bd70      	pop	{r4, r5, r6, pc}
 800cfb4:	f855 3b04 	ldr.w	r3, [r5], #4
 800cfb8:	4798      	blx	r3
 800cfba:	3601      	adds	r6, #1
 800cfbc:	e7ee      	b.n	800cf9c <__libc_init_array+0xc>
 800cfbe:	f855 3b04 	ldr.w	r3, [r5], #4
 800cfc2:	4798      	blx	r3
 800cfc4:	3601      	adds	r6, #1
 800cfc6:	e7f2      	b.n	800cfae <__libc_init_array+0x1e>
 800cfc8:	0800d0a4 	.word	0x0800d0a4
 800cfcc:	0800d0a4 	.word	0x0800d0a4
 800cfd0:	0800d0a4 	.word	0x0800d0a4
 800cfd4:	0800d0a8 	.word	0x0800d0a8

0800cfd8 <memcpy>:
 800cfd8:	440a      	add	r2, r1
 800cfda:	4291      	cmp	r1, r2
 800cfdc:	f100 33ff 	add.w	r3, r0, #4294967295
 800cfe0:	d100      	bne.n	800cfe4 <memcpy+0xc>
 800cfe2:	4770      	bx	lr
 800cfe4:	b510      	push	{r4, lr}
 800cfe6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cfea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cfee:	4291      	cmp	r1, r2
 800cff0:	d1f9      	bne.n	800cfe6 <memcpy+0xe>
 800cff2:	bd10      	pop	{r4, pc}

0800cff4 <memset>:
 800cff4:	4402      	add	r2, r0
 800cff6:	4603      	mov	r3, r0
 800cff8:	4293      	cmp	r3, r2
 800cffa:	d100      	bne.n	800cffe <memset+0xa>
 800cffc:	4770      	bx	lr
 800cffe:	f803 1b01 	strb.w	r1, [r3], #1
 800d002:	e7f9      	b.n	800cff8 <memset+0x4>

0800d004 <strcpy>:
 800d004:	4603      	mov	r3, r0
 800d006:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d00a:	f803 2b01 	strb.w	r2, [r3], #1
 800d00e:	2a00      	cmp	r2, #0
 800d010:	d1f9      	bne.n	800d006 <strcpy+0x2>
 800d012:	4770      	bx	lr

0800d014 <_init>:
 800d014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d016:	bf00      	nop
 800d018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d01a:	bc08      	pop	{r3}
 800d01c:	469e      	mov	lr, r3
 800d01e:	4770      	bx	lr

0800d020 <_fini>:
 800d020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d022:	bf00      	nop
 800d024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d026:	bc08      	pop	{r3}
 800d028:	469e      	mov	lr, r3
 800d02a:	4770      	bx	lr
>>>>>>> ModeSelect_v2
